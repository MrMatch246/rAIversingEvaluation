{
    "functions": {
        "FUN_00104020": {
            "additional_data": {
                "": {
                    "1": "noparameters"
                },
                "*(code *)(undefined *)0x0": {
                    "1": "indirect_jump_function"
                },
                "0x0": {
                    "1": "function_pointer"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "DAT_00104020": {
                    "1": "address"
                },
                "FUN_00104020": {
                    "1": "execute_code_from_address",
                    "17": "execute_indirect_jump",
                    "2": "execute_function",
                    "3": "execute_indirect_function",
                    "4": "execute_indirect_call"
                },
                "PTR_0": {
                    "1": "function_pointer"
                },
                "PTR_00104020": {
                    "1": "jump_table"
                },
                "PTR_undefined": {
                    "1": "input_address"
                },
                "_": {
                    "1": "underscore"
                },
                "code": {
                    "1": "indirect_function",
                    "2": "function_ptr",
                    "3": "function_pointer"
                },
                "undefined": {
                    "1": "memory_address",
                    "2": "jump_address",
                    "3": "target_address",
                    "4": "function_pointer"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00104020",
            "entrypoint": "0x00104020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "_": "underscore",
                "code": "function_pointer",
                "undefined": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104920": {
            "additional_data": {
                "FUN_00104920": {
                    "1": "print_error_message_and_exit",
                    "10": "print_error_and_exit",
                    "2": "print_error_bad_number",
                    "8": "print_bad_number_error"
                },
                "dcgettext": {
                    "1": "retrieve_translated_string",
                    "3": "get_localized_string",
                    "5": "get_error_message"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_error_message_and_exit",
                    "9": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "translated_error_message",
                    "2": "error_msg",
                    "22": "error_message",
                    "4": "error_string"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid print_error_and_exit_00104920(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00104920(error_message);\n}\n\n",
            "current_name": "print_error_and_exit_00104920",
            "entrypoint": "0x00104920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104920": "print_error_and_exit_00104920",
                "dcgettext": "get_error_message",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104943": {
            "additional_data": {
                "FUN_00104943": {
                    "1": "print_binary_information",
                    "2": "print_arch_info",
                    "3": "print_reverse_strings",
                    "5": "print_binary_info"
                },
                "_stdout": {
                    "1": "output_stream",
                    "2": "stdout"
                },
                "iVar1": {
                    "1": "line_width",
                    "2": "converted_int",
                    "4": "int_value",
                    "6": "default_value"
                },
                "iVar2": {
                    "1": "current_index",
                    "2": "arch_compare_result",
                    "3": "arch_comparison",
                    "5": "arch_index",
                    "7": "comparison_result"
                },
                "iVar7": {
                    "1": "arch_machine_code",
                    "14": "arch_index",
                    "2": "arch_iterator"
                },
                "iVar9": {
                    "1": "loop_index",
                    "2": "current_length",
                    "5": "current_index"
                },
                "in_RAX": {
                    "1": "number_string",
                    "2": "input_str",
                    "28": "input_string"
                },
                "lVar3": {
                    "1": "num_strings",
                    "2": "loop_index",
                    "6": "converted_number",
                    "7": "converted_value"
                },
                "lVar8": {
                    "1": "start_line_index",
                    "3": "param_index",
                    "5": "start_index"
                },
                "lVar8 * 0x60": {
                    "1": "arch_offset_index"
                },
                "param_11": {
                    "1": "binary_paths",
                    "2": "arch_mach_param",
                    "4": "param11"
                },
                "param_13": {
                    "1": "arch_mach_info",
                    "2": "data_pointer",
                    "3": "string_array",
                    "4": "param13"
                },
                "param_7": {
                    "1": "start_index",
                    "2": "max_strings",
                    "4": "param7"
                },
                "pcVar5": {
                    "1": "arch_machine",
                    "2": "arch_mach_string",
                    "3": "arch_mach_str",
                    "4": "printable_arch"
                },
                "sVar4": {
                    "1": "current_str_length",
                    "2": "current_string_length",
                    "4": "str_length",
                    "9": "string_length"
                },
                "uStack000000000000000c": {
                    "1": "indentation_count",
                    "3": "stack_var",
                    "6": "indentation",
                    "7": "indentation_level"
                },
                "uVar10": {
                    "1": "loop_index",
                    "2": "loop_count",
                    "5": "loop_counter",
                    "7": "string_length"
                },
                "uVar11": {
                    "1": "arch_index_minus_two",
                    "2": "arch_mach_difference",
                    "3": "arch_index",
                    "4": "arch_diff",
                    "8": "arch_offset"
                },
                "uVar6": {
                    "1": "formatted_string",
                    "2": "arch_string",
                    "4": "arch_mach_printable",
                    "5": "printable_arch",
                    "7": "printable_arch_mach"
                },
                "unaff_R15D": {
                    "1": "temporary_value",
                    "3": "stack_size",
                    "4": "stack_value"
                }
            },
            "called": [
                "bfd_printable_arch_mach",
                "putc",
                "printf",
                "fputs",
                "strtol",
                "strcmp",
                "strlen"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nvoid print_binary_info_00104943(void)\n\n{\n  int default_value;\n  int comparison_result;\n  char *input_string;\n  long converted_value;\n  size_t string_length;\n  char *arch_string;\n  undefined8 printable_arch_mach;\n  int arch_index;\n  long start_index;\n  int current_index;\n  uint stack_value;\n  ulong string_length;\n  uint arch_offset;\n  int max_length;\n  uint indentation_level;\n  undefined8 binary_info;\n  long param13;\n  \n  converted_value = strtol(input_string,(char **)0x0,10);\n  default_value = (int)converted_value;\n  current_index = max_length;\n  indentation_level = stack_value;\n  if (default_value == 0) {\n    default_value = 0x50;\n  }\n  do {\n    max_length = current_index;\n    if (binary_info._4_4_ <= max_length) {\n      return;\n    }\n    start_index = (long)max_length;\n    arch_index = (default_value - indentation_level) + -1;\n    converted_value = start_index;\n    do {\n      current_index = (int)converted_value;\n      if (binary_info._4_4_ <= current_index) break;\n      string_length = strlen(*(char **)(param13 + converted_value * 0x60));\n      converted_value = converted_value + 1;\n      arch_index = (arch_index - (int)string_length) + -1;\n    } while (-1 < arch_index);\n    printf(\"\\n%*s\",(ulong)(indentation_level + 1),&DAT_0011b4a1);\n    for (converted_value = start_index * 0x60; ((ulong)(uint)(current_index - max_length) + start_index) * 0x60 - converted_value != 0;\n        converted_value = converted_value + 0x60) {\n      printf(\"%s \",*(undefined8 *)(param13 + converted_value));\n    }\n    arch_index = 2;\n    putc(10,standard_output);\n    do {\n      arch_string = (char *)bfd_printable_arch_mach(arch_index,0);\n      comparison_result = strcmp(arch_string,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        printable_arch_mach = bfd_printable_arch_mach(arch_index,0);\n        printf(\"%*s \",(ulong)indentation_level,printable_arch_mach);\n        arch_offset = arch_index - 2;\n        converted_value = start_index * 0x60;\n        comparison_result = max_length;\n        while (current_index != comparison_result) {\n          arch_string = *(char **)(param13 + converted_value);\n          if (*(char *)((long)(char **)(param13 + converted_value) + (ulong)arch_offset + 8) == '\\0') {\n            string_length = strlen(arch_string);\n            for (string_length = string_length & 0xffffffff; (int)string_length != 0; string_length = (ulong)((int)string_length - 1)) {\n              putc(0x2d,standard_output);\n            }\n          }\n          else {\n            fputs(arch_string,standard_output);\n          }\n          comparison_result = comparison_result + 1;\n          if (current_index != comparison_result) {\n            putc(0x20,standard_output);\n          }\n          converted_value = converted_value + 0x60;\n        }\n        putc(10,standard_output);\n      }\n      arch_index = arch_index + 1;\n    } while (arch_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_binary_info_00104943",
            "entrypoint": "0x00104943",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104943": "print_binary_info_00104943",
                "_stdout": "standard_output",
                "iVar1": "default_value",
                "iVar2": "comparison_result",
                "iVar7": "arch_index",
                "iVar9": "current_index",
                "in_RAX": "input_string",
                "lVar3": "converted_value",
                "lVar8": "start_index",
                "param_11": "binary_info",
                "param_13": "param13",
                "param_7": "max_length",
                "pcVar5": "arch_string",
                "sVar4": "string_length",
                "uStack000000000000000c": "indentation_level",
                "uVar10": "string_length",
                "uVar11": "arch_offset",
                "uVar6": "printable_arch_mach",
                "unaff_R15D": "stack_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104966": {
            "additional_data": {
                "*piVar1": {
                    "4": "errno_value"
                },
                "FUN_00104966": {
                    "1": "file_not_found_error",
                    "16": "handle_file_error",
                    "3": "print_file_error_message",
                    "4": "print_error_message",
                    "6": "print_file_error"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "piVar1": {
                    "1": "err_num_ptr",
                    "2": "error_code_ptr",
                    "20": "errno_ptr",
                    "3": "error_code"
                },
                "print_error_message_00119ed0": {
                    "8": "print_error_message"
                },
                "uVar2": {
                    "1": "error_msg",
                    "29": "error_message"
                }
            },
            "called": [
                "FUN_00119ed0",
                "__errno_location",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_00113f50"
            ],
            "code": "\nundefined8 handle_file_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "current_name": "handle_file_error_00104966",
            "entrypoint": "0x00104966",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_error_message",
                "piVar1": "errno_ptr",
                "print_error_message_00119ed0": "print_error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a35": {
            "additional_data": {
                "FUN_00104a35": {
                    "1": "print_target_list",
                    "30": "print_supported_targets"
                },
                "__ptr": {
                    "31": "target_list"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "fprintf": {
                    "1": "print_to_output"
                },
                "fputc": {
                    "1": "put_character"
                },
                "free": {
                    "1": "free_memory"
                },
                "lVar1": {
                    "1": "target_addr",
                    "10": "current_target_value",
                    "2": "target_value",
                    "3": "target_ptr",
                    "4": "current_target"
                },
                "param_1": {
                    "28": "target",
                    "3": "target_name"
                },
                "param_2": {
                    "26": "output_file",
                    "5": "file"
                },
                "pcVar2": {
                    "1": "target_message",
                    "19": "message",
                    "2": "text"
                },
                "plVar3": {
                    "1": "ptr_to_target",
                    "2": "target_ptr",
                    "20": "current_target",
                    "6": "ptr"
                }
            },
            "called": [
                "fprintf",
                "fputc",
                "bfd_target_list",
                "free",
                "dcgettext"
            ],
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "code": "\nvoid print_supported_targets_00104a35(long target,FILE *output_file)\n\n{\n  long current_target_value;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target_value = *current_target;\n    current_target = current_target + 1;\n    if (current_target_value == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free_memory(target_list);\n  return;\n}\n\n",
            "current_name": "print_supported_targets_00104a35",
            "entrypoint": "0x00104a35",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "__ptr": "target_list",
                "dcgettext": "get_translation",
                "fprintf": "print_to_output",
                "fputc": "put_character",
                "free": "free_memory",
                "lVar1": "current_target_value",
                "param_1": "target",
                "param_2": "output_file",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ad6": {
            "additional_data": {
                "FUN_00104ad6": {
                    "1": "parse_section_flag",
                    "25": "parse_section_flags"
                },
                "__s": {
                    "1": "remaining_str",
                    "2": "current_flag",
                    "3": "remaining_flags",
                    "4": "section_flag"
                },
                "auVar6": {
                    "11": "return_value",
                    "14": "result",
                    "2": "return_val"
                },
                "iVar1": {
                    "1": "strcmp_result",
                    "22": "comparison_result",
                    "5": "result"
                },
                "iVar5": {
                    "1": "section_index",
                    "2": "str_length",
                    "3": "section_length",
                    "5": "string_length"
                },
                "pcVar3": {
                    "1": "delimiter_found",
                    "12": "comma_position",
                    "2": "comma_ptr",
                    "3": "comma_index",
                    "6": "delimiter"
                },
                "sVar4": {
                    "1": "current_string_length",
                    "2": "section_flag_length",
                    "4": "length",
                    "6": "string_length",
                    "9": "section_length"
                },
                "uVar2": {
                    "1": "error_msg",
                    "11": "error_message",
                    "2": "error_string"
                },
                "unaff_R14D": {
                    "1": "section_flag_result",
                    "2": "section_flag",
                    "20": "section_flags",
                    "6": "flags"
                },
                "unaff_R15": {
                    "1": "compare_flag",
                    "12": "section_name",
                    "3": "section_flag",
                    "8": "supported_flags"
                },
                "unaff_RBP": {
                    "1": "current_position",
                    "2": "section_flag",
                    "3": "current_string",
                    "4": "next_section",
                    "7": "current_flag"
                },
                "unaff_retaddr": {
                    "1": "ret_addr",
                    "26": "return_address"
                }
            },
            "called": [
                "strncasecmp",
                "strncpy",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext",
                "strchr",
                "strlen"
            ],
            "calling": [
                "FUN_00104ad6"
            ],
            "code": "\nundefined  [16] parse_section_flags_00104ad6(void)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *current_flag;\n  char *section_flag;\n  size_t section_length;\n  int section_name_length;\n  uint section_flags;\n  char *section_name;\n  undefined result [16];\n  undefined8 return_address;\n  \n  do {\n    section_flags = section_flags | 0x2000;\n    section_flag = current_flag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (section_flag == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = section_flags;\n                result._8_8_ = return_address;\n                return result;\n              }\n              comma_position = strchr(section_flag,0x2c);\n              if (comma_position == (char *)0x0) {\n                section_length = strlen(section_flag);\n                section_name_length = (int)section_length;\n                current_flag = (char *)0x0;\n              }\n              else {\n                current_flag = comma_position + 1;\n                section_name_length = (int)comma_position - (int)section_flag;\n              }\n              section_length = (size_t)section_name_length;\n              comparison_result = strncasecmp(section_name,section_flag,section_length);\n              if (comparison_result != 0) break;\n              section_flags = section_flags | 1;\n              section_flag = current_flag;\n            }\n            comparison_result = strncasecmp(\"load\",section_flag,section_length);\n            if (comparison_result != 0) break;\n            section_flags = section_flags | 2;\n            section_flag = current_flag;\n          }\n          comparison_result = strncasecmp(\"noload\",section_flag,section_length);\n          if (comparison_result != 0) break;\n          section_flags = section_flags | 0x200;\n          section_flag = current_flag;\n        }\n        comparison_result = strncasecmp(\"readonly\",section_flag,section_length);\n        if (comparison_result != 0) break;\n        section_flags = section_flags | 8;\n        section_flag = current_flag;\n      }\n      comparison_result = strncasecmp(\"debug\",section_flag,section_length);\n      if (comparison_result == 0) break;\n      comparison_result = strncasecmp(\"code\",section_flag,section_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 0x10;\n        section_flag = current_flag;\n      }\n      else {\n        comparison_result = strncasecmp(\"data\",section_flag,section_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x20;\n          section_flag = current_flag;\n        }\n        else {\n          comparison_result = strncasecmp(\"rom\",section_flag,section_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 0x40;\n            section_flag = current_flag;\n          }\n          else {\n            comparison_result = strncasecmp(\"exclude\",section_flag,section_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x8000;\n              section_flag = current_flag;\n            }\n            else {\n              comparison_result = strncasecmp(\"share\",section_flag,section_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x8000000;\n                section_flag = current_flag;\n              }\n              else {\n                comparison_result = strncasecmp(\"contents\",section_flag,section_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x100;\n                  section_flag = current_flag;\n                }\n                else {\n                  comparison_result = strncasecmp(\"merge\",section_flag,section_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x800000;\n                    section_flag = current_flag;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"strings\",section_flag,section_length);\n                    if (comparison_result != 0) {\n                      comma_position = (char *)xmalloc((long)(section_name_length + 1));\n                      strncpy(comma_position,section_flag,section_length);\n                      comma_position[section_length] = '\\0';\n                      error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_00119ed0(error_message,comma_position);\n                      error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_error_and_exit_00119dd0(error_message,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    section_flags = section_flags | 0x1000000;\n                    section_flag = current_flag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "parse_section_flags_00104ad6",
            "entrypoint": "0x00104ad6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "__s": "section_flag",
                "auVar6": "result",
                "iVar1": "comparison_result",
                "iVar5": "section_name_length",
                "pcVar3": "comma_position",
                "sVar4": "section_length",
                "uVar2": "error_message",
                "unaff_R14D": "section_flags",
                "unaff_R15": "section_name",
                "unaff_RBP": "current_flag",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104bba": {
            "additional_data": {
                "FUN_00104bba": {
                    "1": "check_flags",
                    "11": "check_and_set_flags",
                    "2": "validate_flags"
                },
                "in_EAX": {
                    "1": "eax_input",
                    "17": "flags",
                    "8": "eax_value"
                },
                "uVar1": {
                    "2": "error_msg",
                    "20": "error_message"
                },
                "unaff_EBP": {
                    "1": "flags",
                    "11": "ebp_value",
                    "2": "status",
                    "3": "register_ebp",
                    "4": "ebp"
                },
                "unaff_R14": {
                    "1": "base_pointer",
                    "10": "r14_value",
                    "3": "register_r14",
                    "4": "base_address",
                    "6": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_00114190"
            ],
            "code": "\nvoid check_and_set_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 error_message;\n  uint ebp_value;\n  long r14_value;\n  \n  if ((flags & 2) != 0) {\n    error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_error_and_exit_00119dd0(error_message);\n  }\n  if ((((flags & 8) == 0) || ((ebp_value & 0x10) == 0)) && ((ebp_value & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((ebp_value & 0x40) == 0)) && ((ebp_value & 0x60) != 0x60)) {\n      *(uint *)(r14_value + 0x14) = flags | ebp_value;\n      return;\n    }\n    error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_error_and_exit_00119dd0(error_message);\n  }\n  error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_error_and_exit_00119dd0(error_message);\n}\n\n",
            "current_name": "check_and_set_flags_00104bba",
            "entrypoint": "0x00104bba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "error_message",
                "unaff_EBP": "ebp_value",
                "unaff_R14": "r14_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c36": {
            "additional_data": {
                "FUN_00104c36": {
                    "1": "process_lines_from_binary",
                    "18": "process_lines",
                    "2": "parse_lines"
                },
                "FUN_00104d1c": {
                    "1": "process_comment"
                },
                "FUN_00119ed0": {
                    "1": "print_warning"
                },
                "bVar4": {
                    "1": "b",
                    "12": "next_char",
                    "2": "temp_byte",
                    "3": "next_character"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "htab_find_slot": {
                    "2": "find_slot"
                },
                "in_CL": {
                    "1": "current_char_value",
                    "18": "current_char",
                    "7": "current_character"
                },
                "in_stack_00000008": {
                    "1": "format_specifier",
                    "4": "message",
                    "7": "format_string"
                },
                "in_stack_00000010": {
                    "1": "return_ptr",
                    "2": "return_address_pointer",
                    "3": "result_ptr",
                    "6": "result",
                    "8": "return_address"
                },
                "pbVar2": {
                    "1": "slot_pointer"
                },
                "pbVar3": {
                    "1": "temp_pointer_2",
                    "2": "next_position",
                    "4": "current_char"
                },
                "pbVar4": {
                    "1": "var4",
                    "3": "next_char"
                },
                "pbVar5": {
                    "1": "line_pointer",
                    "2": "current_char",
                    "3": "current_line",
                    "4": "line_ptr"
                },
                "ppbVar2": {
                    "1": "table_slot",
                    "2": "hash_slot",
                    "4": "hash_table_slot",
                    "5": "slot_pointer",
                    "6": "slot"
                },
                "uVar1": {
                    "1": "error_message_id",
                    "2": "translation",
                    "3": "error_msg",
                    "6": "error_message"
                },
                "unaff_EBP": {
                    "1": "count_ebp",
                    "13": "line_number",
                    "3": "line_index",
                    "6": "line_counter",
                    "8": "line_count"
                },
                "unaff_R13": {
                    "1": "string_pointer",
                    "4": "filename",
                    "5": "file_name",
                    "6": "error_message"
                },
                "unaff_R14": {
                    "1": "ptr_previous_line",
                    "2": "prev_line",
                    "3": "line_start"
                },
                "unaff_R15": {
                    "1": "start_position",
                    "2": "next_line_ptr",
                    "3": "line_end",
                    "4": "next_line",
                    "5": "line_start"
                },
                "unaff_RBX": {
                    "1": "start_of_line",
                    "2": "line_start",
                    "4": "line_ptr",
                    "6": "line_buffer",
                    "9": "current_line"
                },
                "unaff_RBx": {
                    "1": "input_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104c36(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *current_char;\n  byte current_char;\n  byte next_char;\n  byte *current_line;\n  int line_number;\n  byte *line_ptr;\n  undefined8 error_message;\n  byte *line_start;\n  byte *line_start;\n  undefined8 format_string;\n  undefined8 *return_address;\n  \n  do {\n    line_ptr = line_start;\n    if (current_char == 9) goto LAB_00104c3f;\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = line_ptr[1];\n      line_ptr = line_ptr + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_char = line_ptr[1];\n      if ((((((next_char == 9) || (next_char == 0x20)) &&\n            ((next_char = line_ptr[2], next_char == 9 || (next_char == 0x20)))) &&\n           ((next_char = line_ptr[3], next_char == 9 || (next_char == 0x20)))) &&\n          ((next_char = line_ptr[4], next_char == 9 || (next_char == 0x20)))) &&\n         ((next_char = line_ptr[5], next_char == 9 || (next_char == 0x20)))) {\n        next_char = line_ptr[6];\n        current_char = line_ptr + 6;\n        if ((next_char == 9) || (next_char == 0x20)) {\n          do {\n            do {\n              next_char = current_char[1];\n              current_char = current_char + 1;\n            } while (next_char == 0x20);\n          } while (next_char == 9);\n        }\n      }\n      if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(error_message,format_string,line_number);\n      }\n    }\nLAB_00114599:\n    *line_ptr = 0;\n    if (line_start < line_ptr) {\n      slot = (byte **)htab_find_slot();\n      *slot = line_start;\n    }\n    line_number = line_number + 1;\n    line_ptr = current_line;\n    if (line_start[1] == 0) {\n      *return_address = error_message;\n      return;\n    }\n    for (; next_char = *line_ptr, line_start = line_ptr, next_char != 10; line_ptr = line_ptr + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          current_char = line_ptr + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *line_ptr = 0;\n          current_char = line_ptr + 1;\n          if (line_ptr[1] == 10) {\n            current_char = line_ptr + 2;\n            line_start = line_ptr + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *line_ptr = 0;\n    if (line_ptr[1] == 0xd) {\n      line_start = line_ptr + 1;\n      current_char = line_ptr + 2;\n    }\n    else {\n      current_char = line_ptr + 1;\n    }\nLAB_00114553:\n    current_char = *current_line;\n    line_start = current_line;\n    while (current_line = current_char, current_char == 0x20) {\nLAB_00104c3f:\n      line_ptr = line_start + 1;\n      line_start = line_start + 1;\n      current_char = current_line;\n      current_char = *line_ptr;\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_lines_00104c36",
            "entrypoint": "0x00104c36",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "bVar4": "next_char",
                "dcgettext": "get_error_message",
                "htab_find_slot": "find_slot",
                "in_CL": "current_char",
                "in_stack_00000008": "format_string",
                "in_stack_00000010": "return_address",
                "pbVar2": "htab_find_slot",
                "pbVar3": "current_char",
                "pbVar5": "line_ptr",
                "ppbVar2": "slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "error_message",
                "unaff_R14": "line_start",
                "unaff_R15": "line_start",
                "unaff_RBX": "current_line"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104cc1": {
            "additional_data": {
                "FUN_00104cc1": {
                    "1": "parse_and_ignore_rubbish",
                    "13": "process_lines",
                    "2": "parse_and_store_lines",
                    "3": "parse_lines",
                    "4": "parse_and_process_lines"
                },
                "PBVAR5": {
                    "1": "next_char"
                },
                "bVar4": {
                    "1": "current_char_value",
                    "2": "temp_char",
                    "4": "current_char",
                    "8": "current_byte"
                },
                "in_R10": {
                    "1": "current_pos",
                    "14": "current_line",
                    "2": "line",
                    "3": "line_ptr"
                },
                "param_7": {
                    "1": "file_name",
                    "3": "param7",
                    "5": "error_message",
                    "8": "line_number"
                },
                "param_8": {
                    "1": "return_value_ptr",
                    "2": "result_ptr",
                    "3": "param8",
                    "4": "output_buffer"
                },
                "param_9": {
                    "1": "param3",
                    "2": "param9",
                    "3": "input_buffer",
                    "5": "line",
                    "7": "input_line"
                },
                "pbVar3": {
                    "1": "curr_char",
                    "14": "current_char",
                    "2": "current_byte"
                },
                "pbVar5": {
                    "1": "current_char",
                    "2": "start_pointer",
                    "4": "line_ptr",
                    "7": "line_start"
                },
                "ppbVar2": {
                    "1": "htab_slot_ptr",
                    "11": "slot",
                    "6": "slot_pointer",
                    "7": "slot_ptr"
                },
                "uVar1": {
                    "1": "error_message_id",
                    "14": "error_message",
                    "3": "error_string",
                    "5": "error_msg"
                },
                "unaff_EBP": {
                    "1": "line_counter",
                    "11": "line_number",
                    "2": "line_length",
                    "7": "line_index",
                    "8": "line_count"
                },
                "unaff_R13": {
                    "1": "replacement",
                    "2": "file_name",
                    "3": "result",
                    "4": "param7"
                },
                "unaff_R14": {
                    "1": "line",
                    "2": "current_line",
                    "3": "line_start",
                    "4": "current_char",
                    "5": "line_end"
                },
                "unaff_R15": {
                    "1": "hash_entry",
                    "3": "line_end",
                    "6": "line_start"
                },
                "unaff_RBX": {
                    "1": "line",
                    "2": "line_pointer",
                    "3": "current_line",
                    "6": "line_ptr"
                }
            },
            "called": [
                "FUN_00104c36",
                "FUN_00104cc1",
                "FUN_00119ed0",
                "FUN_00104d1c",
                "htab_find_slot",
                "dcgettext"
            ],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104cc1(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *current_char;\n  byte next_char;\n  byte *line_ptr;\n  byte *line_start;\n  int line_number;\n  byte *current_line;\n  undefined8 param7;\n  byte *line_end;\n  byte *line_start;\n  undefined8 line_number;\n  undefined8 *output;\n  byte *input_line;\n  \ncode_r0x00104cc1:\n  input_line = current_line;\n  error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_message_00119ed0(error_message,line_number,line_number);\n  line_start = line_ptr;\n  current_line = input_line;\nLAB_00114599:\n  do {\n    *current_line = 0;\n    if (line_start < current_line) {\n      slot = (byte **)htab_find_slot();\n      *slot = line_start;\n    }\n    line_number = line_number + 1;\n    current_char = line_start;\n    if (line_end[1] == 0) {\n      *output = param7;\n      return;\n    }\n    for (; next_char = *current_char, line_end = current_char, next_char != 10; current_char = current_char + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          line_ptr = current_char + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_char = 0;\n          line_ptr = current_char + 1;\n          if (current_char[1] == 10) {\n            line_ptr = current_char + 2;\n            line_end = current_char + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          process_lines_00104cc1_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_char = 0;\n    if (current_char[1] == 0xd) {\n      line_end = current_char + 1;\n      line_ptr = current_char + 2;\n    }\n    else {\n      line_ptr = current_char + 1;\n    }\nLAB_00114553:\n    next_char = *line_start;\n    line_start = line_start;\n    while ((next_char == 0x20 || (current_line = line_start, next_char == 9))) {\n      line_start = line_start + 1;\n      line_start = line_start + 1;\n      next_char = *line_start;\n    }\n    do {\n      line_start = line_ptr;\n      if ((next_char == 10) || (next_char == 0xd)) goto LAB_00114676;\n      if (next_char == 0) goto LAB_00114599;\n      next_char = current_line[1];\n      current_line = current_line + 1;\n    } while ((next_char != 0x20) && (next_char != 9));\n    if ((char)next_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (next_char & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    next_char = current_line[1];\n    if ((((((next_char == 9) || (next_char == 0x20)) && ((next_char = current_line[2], next_char == 9 || (next_char == 0x20)))\n          ) && ((next_char = current_line[3], next_char == 9 || (next_char == 0x20)))) &&\n        ((next_char = current_line[4], next_char == 9 || (next_char == 0x20)))) &&\n       ((next_char = current_line[5], next_char == 9 || (next_char == 0x20)))) {\n      next_char = current_line[6];\n      current_char = current_line + 6;\n      if ((next_char == 9) || (next_char == 0x20)) {\n        do {\n          do {\n            next_char = current_char[1];\n            current_char = current_char + 1;\n          } while (next_char == 0x20);\n        } while (next_char == 9);\n      }\n    }\n    if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "current_name": "process_lines_00104cc1",
            "entrypoint": "0x00104cc1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "bVar4": "next_char",
                "in_R10": "current_line",
                "param_7": "line_number",
                "param_8": "output",
                "param_9": "input_line",
                "pbVar3": "current_char",
                "pbVar5": "line_start",
                "ppbVar2": "slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "param7",
                "unaff_R14": "line_end",
                "unaff_R15": "line_start",
                "unaff_RBX": "line_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d1c": {
            "additional_data": {
                "*pbVar3": {
                    "1": "next_char"
                },
                "*pbVar6": {
                    "1": "current_char"
                },
                "*unaff_R14": {
                    "1": "current_line"
                },
                "*unaff_R15": {
                    "1": "current_char"
                },
                "FUN_00104d1c": {
                    "1": "parse_text_lines",
                    "18": "process_lines",
                    "2": "parse_and_process_lines",
                    "5": "parse_input_lines"
                },
                "bVar4": {
                    "1": "byte_val",
                    "4": "current_char_value",
                    "6": "current_char",
                    "7": "current_byte"
                },
                "htab_find_slot": {
                    "1": "find_slot"
                },
                "in_stack_00000008": {
                    "1": "line_number",
                    "2": "filename",
                    "4": "file_name",
                    "7": "format_string",
                    "8": "error_message"
                },
                "in_stack_00000010": {
                    "1": "return_value_ptr",
                    "16": "return_address",
                    "2": "return_value"
                },
                "pbVar3": {
                    "1": "temp_char",
                    "2": "rubbish_ptr",
                    "4": "next_char"
                },
                "pbVar4": {
                    "1": "next_char"
                },
                "pbVar5": {
                    "1": "next_line_ptr",
                    "12": "next_line",
                    "3": "next_line_start",
                    "6": "next_char"
                },
                "pbVar6": {
                    "1": "check_pos",
                    "2": "temp_char",
                    "4": "next_char"
                },
                "pbVar7": {
                    "1": "temp_byte",
                    "2": "end_of_line",
                    "5": "next_char"
                },
                "ppbVar2": {
                    "1": "hash_table_slot",
                    "3": "slot_ptr",
                    "4": "hash_table_entry",
                    "5": "slot_pointer",
                    "6": "slot"
                },
                "uVar1": {
                    "1": "translation",
                    "2": "warning_message",
                    "3": "message",
                    "4": "error_msg"
                },
                "unaff_EBP": {
                    "1": "ebp_value",
                    "12": "line_count",
                    "4": "counter",
                    "5": "line_counter",
                    "7": "line_number"
                },
                "unaff_R13": {
                    "1": "filename",
                    "2": "context",
                    "4": "file_path",
                    "5": "error_message"
                },
                "unaff_R14": {
                    "1": "curr_line",
                    "16": "current_line",
                    "2": "line",
                    "6": "line_start"
                },
                "unaff_R14 + 1": {
                    "1": "next_line"
                },
                "unaff_R14 + 2": {
                    "1": "next_line2"
                },
                "unaff_R15": {
                    "1": "str",
                    "17": "current_char",
                    "2": "next_line",
                    "3": "line_end",
                    "4": "line_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104d1c(void)\n\n{\n  undefined8 error_msg;\n  byte **slot;\n  byte *next_char;\n  byte current_byte;\n  byte *next_line;\n  int line_count;\n  byte *next_char;\n  undefined8 error_message;\n  byte *next_char;\n  byte *current_line;\n  byte *current_char;\n  undefined8 error_message;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_byte = *current_line;\n    next_char = current_line;\n    if (current_byte == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_char = current_line + 1;\n        next_line = current_line + 2;\n      }\n      else {\n        next_line = current_line + 1;\n      }\n    }\n    else if ((char)current_byte < '\\v') {\n      if (current_byte != 0) goto LAB_00114520;\n      next_line = current_line + 1;\n    }\n    else {\n      if (current_byte != 0xd) break;\n      *current_line = 0;\n      next_line = current_line + 1;\n      if (current_line[1] == 10) {\n        next_line = current_line + 2;\n        next_char = current_line + 1;\n      }\n    }\n    current_byte = *current_char;\n    while ((current_byte == 0x20 || (next_char = current_char, current_byte == 9))) {\n      next_char = current_char + 1;\n      current_char = current_char + 1;\n      current_byte = *next_char;\n    }\n    do {\n      if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n      if (current_byte == 0) goto LAB_00114599;\n      current_byte = next_char[1];\n      next_char = next_char + 1;\n    } while ((current_byte != 0x20) && (current_byte != 9));\n    if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_byte = next_char[1];\n      if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n            ((current_byte = next_char[2], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = next_char[3], current_byte == 9 || (current_byte == 0x20)))) &&\n          ((current_byte = next_char[4], current_byte == 9 || (current_byte == 0x20)))) &&\n         ((current_byte = next_char[5], current_byte == 9 || (current_byte == 0x20)))) {\n        current_byte = next_char[6];\n        next_char = next_char + 6;\n        if ((current_byte == 9) || (current_byte == 0x20)) {\n          do {\n            do {\n              current_byte = next_char[1];\n              next_char = next_char + 1;\n            } while (current_byte == 0x20);\n          } while (current_byte == 9);\n        }\n      }\n      if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n        error_msg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(error_msg,error_message,line_count);\n      }\n    }\nLAB_00114599:\n    *next_char = 0;\n    if (current_char < next_char) {\n      slot = (byte **)htab_find_slot();\n      *slot = current_char;\n    }\n    line_count = line_count + 1;\n    current_line = next_line;\n    current_char = next_line;\n    if (next_char[1] == 0) {\n      *return_address = error_message;\n      return;\n    }\n  } while( true );\n  if (current_byte == 0x23) {\n    process_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "current_name": "process_lines_00104d1c",
            "entrypoint": "0x00104d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "bVar4": "current_byte",
                "htab_find_slot": "find_slot",
                "in_stack_00000008": "error_message",
                "in_stack_00000010": "return_address",
                "pbVar3": "next_char",
                "pbVar5": "next_line",
                "pbVar6": "next_char",
                "pbVar7": "next_char",
                "ppbVar2": "slot",
                "uVar1": "error_msg",
                "unaff_EBP": "line_count",
                "unaff_R13": "error_message",
                "unaff_R14": "current_line",
                "unaff_R15": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d25": {
            "additional_data": {
                "FUNC_00114b84": {
                    "1": "execute_secondary_function",
                    "2": "additional_function",
                    "3": "execute_function",
                    "4": "execute_additional_function",
                    "7": "perform_additional_tasks"
                },
                "FUN_00104d25": {
                    "1": "initialize_data",
                    "11": "initialize_and_print_error_message",
                    "2": "print_error_message",
                    "5": "initialize_application",
                    "6": "initialize_program"
                },
                "param_7": {
                    "1": "user_param",
                    "2": "user_data",
                    "4": "param",
                    "5": "error_code"
                },
                "print_error_message_001126c0": {
                    "1": "show_error_message",
                    "26": "print_error_message",
                    "3": "display_error_message"
                }
            },
            "called": [
                "FUN_001126c0",
                "FUN_00114b84"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid initialize_and_print_error_message_00104d25(void)\n\n{\n  undefined8 error_code;\n  \n  DAT_00127a20 = 1;\n  print_error_message(0,error_code,0,0);\n  FUNC_00114b84();\n  return;\n}\n\n",
            "current_name": "initialize_and_print_error_message_00104d25",
            "entrypoint": "0x00104d25",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d25": "initialize_and_print_error_message_00104d25",
                "param_7": "error_code",
                "print_error_message_001126c0": "print_error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ea2": {
            "additional_data": {
                "BVAR17": {
                    "1": "zero"
                },
                "DAT_001279cb": {
                    "1": "should_set_file_time"
                },
                "DAT_00127a20": {
                    "1": "error_occurred",
                    "2": "error_flag"
                },
                "FUNC_00114e50": {
                    "1": "check_file_architecture"
                },
                "FUN_00104ea2": {
                    "1": "copy_and_extract_archive_files",
                    "2": "extract_archive",
                    "26": "extract_and_copy_archive"
                },
                "IN_STACK_00000030": {
                    "1": "copy_flag"
                },
                "IVAR2": {
                    "1": "arch_type"
                },
                "LVAR12": {
                    "1": "temp_dir"
                },
                "LVAR5": {
                    "1": "read_size"
                },
                "PARAM_10": {
                    "1": "archive_path_ptr"
                },
                "PARAM_11": {
                    "1": "output_file_mode"
                },
                "PARAM_18": {
                    "1": "output_file_permissions"
                },
                "PARAM_19": {
                    "1": "input_file_size"
                },
                "PARAM_7": {
                    "1": "output_file_name"
                },
                "PARAM_8": {
                    "1": "temp_file_ptr"
                },
                "PARAM_9": {
                    "1": "output_dir"
                },
                "PC_VAR1": {
                    "1": "flag"
                },
                "PC_VAR10": {
                    "1": "temp_file"
                },
                "PC_VAR15": {
                    "1": "path_ptr"
                },
                "PC_VAR7": {
                    "1": "input_file"
                },
                "PI_VAR9": {
                    "1": "errno_ptr"
                },
                "PPC_VAR15": {
                    "1": "archived_files"
                },
                "PPC_VAR6": {
                    "1": "output_file"
                },
                "PS_VAR16": {
                    "1": "arch_stat_ptr"
                },
                "PV_VAR4": {
                    "1": "buffer"
                },
                "UNAFF_EBX": {
                    "1": "arch_stat_err"
                },
                "UNAFF_R12": {
                    "1": "working_directory"
                },
                "UNAFF_R13": {
                    "1": "temp_dir_info"
                },
                "UNAFF_R15": {
                    "1": "arch_file_ptr"
                },
                "UNAFF_RBP": {
                    "1": "stat_buffer"
                },
                "UNAFF_RETADDR": {
                    "1": "return_addr"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "bVar17": {
                    "1": "char_buffer",
                    "2": "byte_value"
                },
                "bfd_bread": {
                    "1": "read_from_file"
                },
                "bfd_bwrite": {
                    "1": "write_to_file"
                },
                "bfd_check_format": {
                    "1": "check_format"
                },
                "bfd_close": {
                    "1": "close"
                },
                "bfd_close_all_done": {
                    "1": "close_all_done"
                },
                "bfd_get_arch": {
                    "1": "get_architecture"
                },
                "bfd_openr": {
                    "1": "open_read_mode"
                },
                "bfd_openr_next_archived_file": {
                    "1": "open_next_archived_file"
                },
                "bfd_openw": {
                    "1": "open_write_mode"
                },
                "byte bVar17": {
                    "1": "byte_var"
                },
                "cVar1": {
                    "1": "success_flag",
                    "2": "success",
                    "7": "result"
                },
                "char **ppcVar6": {
                    "1": "archive_file"
                },
                "char **unaff_R15": {
                    "1": "bfd_struct"
                },
                "char *param_9": {
                    "1": "tempdir_to_copy"
                },
                "char *pcVar10": {
                    "1": "error_string"
                },
                "char *pcVar15": {
                    "1": "pathname"
                },
                "char *pcVar7": {
                    "1": "archive_member"
                },
                "char *unaff_R12": {
                    "1": "tempdir"
                },
                "chmod": {
                    "1": "change_file_mode",
                    "2": "change_file_permissions"
                },
                "code *pcVar13": {
                    "1": "close_function"
                },
                "concat": {
                    "1": "combine_strings"
                },
                "create_temp_directory_0011a0e0": {
                    "3": "create_temp_directory"
                },
                "dcgettext": {
                    "1": "get_locale_message"
                },
                "extract_and_copy_archive_001052a2": {
                    "1": "extract_and_copy_file"
                },
                "free": {
                    "1": "free_memory"
                },
                "get_formatted_string_001125fa": {
                    "3": "get_formatted_string"
                },
                "get_temp_directory_path": {
                    "1": "retrieve_temp_directory_path"
                },
                "iVar2": {
                    "1": "arch_value",
                    "2": "int_value",
                    "3": "arch"
                },
                "in_stack_00000030": {
                    "1": "format_error_message",
                    "2": "unknown_flag"
                },
                "int *piVar9": {
                    "1": "errno_location"
                },
                "int unaff_EBX": {
                    "1": "stat_result"
                },
                "lVar1": {
                    "1": "bytes_read"
                },
                "lVar12": {
                    "1": "bytes_remaining",
                    "3": "file_size",
                    "6": "remaining_size"
                },
                "lVar14": {
                    "1": "long_var14",
                    "2": "write_size",
                    "6": "bytes_written"
                },
                "lVar4": {
                    "1": "temp_dir_size"
                },
                "lVar5": {
                    "1": "read_result",
                    "10": "bytes_read",
                    "2": "bytes_written"
                },
                "long *param_8": {
                    "1": "file_size_ptr"
                },
                "long lVar12": {
                    "1": "file_size"
                },
                "long param_19": {
                    "1": "param19"
                },
                "param_10": {
                    "1": "archived_filename",
                    "2": "archive_file",
                    "3": "archive_file_path",
                    "4": "archive_path"
                },
                "param_11": {
                    "1": "create_new_file_option",
                    "2": "access_mode",
                    "3": "file_mode",
                    "4": "mode",
                    "8": "open_mode"
                },
                "param_18": {
                    "1": "permission_flags",
                    "4": "permission",
                    "9": "file_permissions"
                },
                "param_19": {
                    "1": "file_stat",
                    "15": "file_size",
                    "2": "archive_size"
                },
                "param_7": {
                    "1": "error_path1",
                    "2": "input_file_path",
                    "3": "output_file_path"
                },
                "param_8": {
                    "1": "error_path2",
                    "2": "temp_directory",
                    "3": "bytes_read"
                },
                "param_9": {
                    "1": "temp_path",
                    "11": "temp_dir_path",
                    "2": "temporary_directory",
                    "5": "temp_directory"
                },
                "pbVar17": {
                    "1": "iteration_flag"
                },
                "pcVar1": {
                    "1": "temp_dir_file"
                },
                "pcVar10": {
                    "1": "error_file_path",
                    "2": "file_name",
                    "3": "error_message"
                },
                "pcVar11": {
                    "1": "copy_to_filename"
                },
                "pcVar12": {
                    "1": "copy_to_filename_error_message"
                },
                "pcVar13": {
                    "1": "close_function_ptr",
                    "5": "bfd_close_function",
                    "8": "close_function"
                },
                "pcVar15": {
                    "1": "sub_directory_path",
                    "2": "current_char",
                    "3": "pathname"
                },
                "pcVar2": {
                    "1": "temp_dir_file_substring"
                },
                "pcVar4": {
                    "1": "error_message"
                },
                "pcVar5": {
                    "1": "copy_from_filename"
                },
                "pcVar7": {
                    "1": "pointer_temp",
                    "5": "current_path",
                    "6": "current_char"
                },
                "pcVar8": {
                    "1": "temp_dir_file_format"
                },
                "pcVar9": {
                    "1": "copy_from_filename_format"
                },
                "piVar9": {
                    "1": "errno_value",
                    "2": "errno_ptr",
                    "7": "errno_location"
                },
                "ppcVar13": {
                    "1": "bfd_close_fn"
                },
                "ppcVar3": {
                    "1": "archived_file_pointer",
                    "2": "next_archived_file",
                    "4": "archived_file"
                },
                "ppcVar3_2": {
                    "1": "ppc_var3_2"
                },
                "ppcVar6": {
                    "1": "open_result",
                    "2": "archive",
                    "4": "archive_file"
                },
                "ppcVar6_2": {
                    "1": "file_pointer2"
                },
                "print_error_message_001126c0": {
                    "3": "print_error_message"
                },
                "print_error_message_00119ed0": {
                    "1": "print_custom_error_message"
                },
                "printf": {
                    "1": "print_to_console",
                    "2": "print_formatted_string"
                },
                "printf_variant": {
                    "1": "print_formatted_string_variant"
                },
                "psVar16": {
                    "1": "stat_data",
                    "2": "stat_pointer"
                },
                "puVar4": {
                    "1": "temp_dir_file_stat"
                },
                "puVar5": {
                    "1": "temp_dir_file_stat_check"
                },
                "puVar6": {
                    "1": "xmalloc_buffer"
                },
                "puVar7": {
                    "1": "bfd_close_func"
                },
                "puVar8": {
                    "1": "temp_info2",
                    "2": "temp_dir_info"
                },
                "pvVar1": {
                    "1": "file_buffer"
                },
                "pvVar4": {
                    "1": "temp_file_path",
                    "2": "temp_str",
                    "6": "buffer"
                },
                "rmdir": {
                    "1": "delete_directory",
                    "2": "remove_directory"
                },
                "set_file_time_0011a350": {
                    "2": "set_file_time"
                },
                "stack0x00000050": {
                    "1": "stack_variables"
                },
                "stat": {
                    "1": "file_stats"
                },
                "stat *unaff_RBP": {
                    "1": "file_stat"
                },
                "strerror": {
                    "2": "get_error_string"
                },
                "uVar1": {
                    "1": "copy_to_filename_format"
                },
                "uVar11": {
                    "1": "format_error_message",
                    "5": "formatted_string"
                },
                "uVar15": {
                    "1": "cannot_create_temp_dir_msg"
                },
                "uVar16": {
                    "1": "internal_stat_error_msg"
                },
                "uVar2": {
                    "1": "formatted_string"
                },
                "uVar3": {
                    "1": "error_message_format"
                },
                "uint param_18": {
                    "1": "permissions"
                },
                "unaff_EBX": {
                    "1": "stat_error_flag",
                    "2": "error_code",
                    "4": "stat_result",
                    "9": "stat_error"
                },
                "unaff_R12": {
                    "1": "archive_member_path",
                    "2": "archive_filename",
                    "3": "temp_dir_path",
                    "4": "archive_file_path",
                    "9": "archive_path"
                },
                "unaff_R13": {
                    "1": "archive_file",
                    "2": "temp_dirs",
                    "4": "temp_dir_info",
                    "5": "temp_dir_list"
                },
                "unaff_R15": {
                    "1": "bfd_object",
                    "2": "archive_file",
                    "7": "archive"
                },
                "unaff_RBP": {
                    "1": "file_info",
                    "5": "file_stat",
                    "7": "stat_buffer"
                },
                "unaff_retaddr": {
                    "1": "ret_addr",
                    "19": "return_address"
                },
                "undefined8 *param_10": {
                    "1": "bfd_struct_ptr"
                },
                "undefined8 *param_7": {
                    "1": "archive_file_ptr"
                },
                "undefined8 *puVar8": {
                    "1": "tempdir_struct"
                },
                "undefined8 *unaff_R13": {
                    "1": "tempdir_struct_list"
                },
                "undefined8 in_stack_00000030": {
                    "1": "stack_var"
                },
                "undefined8 param_11": {
                    "1": "param11"
                },
                "undefined8 uVar11": {
                    "1": "formatted_string"
                },
                "undefined8 unaff_retaddr": {
                    "1": "return_address"
                },
                "unlink": {
                    "1": "remove_file"
                },
                "void *pvVar4": {
                    "1": "buffer"
                },
                "xmalloc": {
                    "1": "dynamic_memory_allocation",
                    "2": "allocate_memory"
                },
                "xstrdup": {
                    "2": "duplicate_string"
                }
            },
            "called": [
                "bfd_get_arch",
                "concat",
                "__errno_location",
                "bfd_openw",
                "xmalloc",
                "FUN_001125fa",
                "bfd_close",
                "FUN_00114e50",
                "strerror",
                "free",
                "FUN_001126c0",
                "FUN_0011a0e0",
                "bfd_bread",
                "bfd_check_format",
                "FUN_00119ed0",
                "bfd_bwrite",
                "stat",
                "FUN_0011a350",
                "FUN_001052a2",
                "bfd_openr_next_archived_file",
                "printf",
                "FUN_00104ea2",
                "FUN_00114b84",
                "xstrdup",
                "bfd_openr",
                "bfd_seek",
                "bfd_close_all_done",
                "bfd_close_all_done",
                "FUN_0011a110",
                "unlink",
                "dcgettext",
                "bfd_close",
                "rmdir",
                "chmod"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid extract_and_copy_archive_00104ea2(void)\n\n{\n  char result;\n  int arch;\n  char **archived_file;\n  void *buffer;\n  long bytes_read;\n  char **archive_file;\n  char *current_char;\n  undefined8 *temp_dir_info;\n  int *errno_location;\n  char *error_message;\n  undefined8 formatted_string;\n  long remaining_size;\n  code *bfd_close_function;\n  long bytes_written;\n  int stat_error;\n  get_file_status *stat_buffer;\n  char *pathname;\n  get_file_status *stat_pointer;\n  char *archive_path;\n  undefined8 *temp_dir_list;\n  char **archive;\n  byte offset;\n  undefined8 return_address;\n  undefined8 *output_file_path;\n  long *bytes_read;\n  char *temp_dir_path;\n  undefined8 *archive_path;\n  undefined8 open_mode;\n  undefined8 unknown_flag;\n  uint file_permissions;\n  long file_size;\n  \n  offset = 0;\ncode_r0x00104ea2:\n  archive_file = (char **)bfd_openw(archive_path,open_mode);\n  if (archive_file == (char **)0x0) {\nLAB_00104e80:\n    print_error_message(archive_path,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = FUNC_00114e50(archive,archive_file,return_address);\n    if (result == '\\0') {\n      arch = bfd_get_arch(archive);\n      if (arch == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(archive_file);\n      if (result != '\\0') goto LAB_00104ec9;\n      print_error_message(archive_path,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(archive_file);\n    archive_file = archive;\n    if (result == '\\0') {\n      print_error_message(archive_path,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (stat_error == 0)) {\n      set_file_time(archive_path,stat_buffer);\n    }\n    remaining_size = bfd_openr(archive_path,open_mode);\n    temp_dir_list[2] = remaining_size;\n    *bytes_read = remaining_size;\n    bytes_read = (long *)(remaining_size + 0xf0);\n    archive = (char **)bfd_openr_next_archived_file(archive_path,archive_file);\n    bfd_close(archive_file);\n    while ((DAT_00127a20 == 0 && (archive != (char **)0x0))) {\n      error_message = *archive;\n      current_char = error_message;\n      if (*error_message == '/') {\nLAB_0010527d:\n        formatted_string = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_custom_error_message(formatted_string,error_message);\n        goto LAB_00104e93;\n      }\n      while (*current_char != '\\0') {\n        pathname = current_char;\n        if ((*current_char == '.') && (pathname = current_char + 1, current_char[1] == '.')) {\n          pathname = current_char + 2;\n          if ((current_char[2] == '\\0') || (current_char[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pathname != '\\0' && (*pathname != '/')); pathname = pathname + 1) {\n        }\n        current_char = pathname;\n        if (*pathname == '/') {\n          extract_and_copy_file();\n          return;\n        }\n      }\n      stat_buffer = (get_file_status *)&stack_variables;\n      archive_path = (char *)concat(temp_dir_path,&DAT_0011b47d);\n      arch = get_file_status(archive_path,stat_buffer);\n      temp_dir_info = temp_dir_list;\n      if (-1 < arch) {\n        remaining_size = create_temp_directory(archive_path);\n        free(archive_path);\n        if (remaining_size == 0) {\n          errno_location = __errno_location();\n          error_message = strerror(*errno_location);\n          formatted_string = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_custom_error_message(formatted_string,error_message);\n          goto LAB_00104e93;\n        }\n        temp_dir_info = (undefined8 *)xmalloc(0x18);\n        error_message = *archive;\n        *temp_dir_info = temp_dir_list;\n        temp_dir_info[2] = 0;\n        temp_dir_info[1] = remaining_size;\n        archive_path = (char *)concat(remaining_size,&DAT_0011b47d,error_message);\n      }\n      stat_error = 0;\n      if (DAT_001279cb != '\\0') {\n        stat_pointer = stat_buffer;\n        for (remaining_size = 0x24; remaining_size != 0; remaining_size = remaining_size + -1) {\n          *(undefined4 *)&stat_pointer->st_dev = 0;\n          stat_pointer = (get_file_status *)((long)stat_pointer + (ulong)offset * -8 + 4);\n        }\n        archive_file = (char **)archive[0x1d];\n        if ((char **)archive[0x1d] == (char **)0x0) {\n          archive_file = archive;\n        }\n        stat_error = (**(code **)(archive_file[1] + 0x1e8))(archive,stat_buffer);\n        if (stat_error != 0) {\n          error_message = *archive;\n          formatted_string = dcgettext(0,\"internal get_file_status error on %s\",5);\n          print_custom_error_message(formatted_string,error_message);\n        }\n      }\n      temp_dir_list = (undefined8 *)xmalloc(0x18);\n      temp_dir_list[1] = archive_path;\n      *temp_dir_list = temp_dir_info;\n      temp_dir_list[2] = 0;\n      result = bfd_check_format(archive,1);\n      if (result != '\\0') {\n        if (unknown_flag._7_1_ != '\\0') goto code_r0x00104ea2;\n        archive_file = (char **)bfd_openw(archive_path,*(undefined8 *)archive[1]);\n        if (archive_file == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      formatted_string = dcgettext(0,\"Unable to recognise the format of file\",5);\n      print_error_message(0,archive,0,formatted_string);\n      archive_file = (char **)bfd_openw(archive_path,open_mode);\n      if (archive_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archived_file = (char **)archive[0x1d];\n      if ((char **)archive[0x1d] == (char **)0x0) {\n        archived_file = archive;\n      }\n      arch = (**(code **)(archived_file[1] + 0x1e8))(archive);\n      remaining_size = file_size;\n      if (arch == 0) {\n        if (file_size < 0) {\n          get_formatted_string(archive);\n          formatted_string = dcgettext(0,\"get_file_status returns negative size for `%s\\'\",5);\n          print_custom_error_message(formatted_string);\n        }\n        else {\n          arch = bfd_seek(archive,0,0);\n          if (arch == 0) {\n            if (DAT_001279c9 != '\\0') {\n              error_message = *archive_file;\n              formatted_string = get_formatted_string(archive);\n              current_char = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(current_char,formatted_string,error_message);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remaining_size == 0) {\n                chmod(*archive_file,file_permissions | 0x100);\n                free(buffer);\n                result = bfd_close_all_done(archive_file);\n                archive_file = archive;\n                if (result == '\\0') {\n                  print_error_message(archive_path,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytes_written = 0x2000;\n              if (remaining_size < 0x2001) {\n                bytes_written = remaining_size;\n              }\n              bytes_read = bfd_bread(buffer,bytes_written,archive);\n              archived_file = archive;\n              if ((bytes_written != bytes_read) ||\n                 (bytes_read = bfd_bwrite(buffer,bytes_written,archive_file), archived_file = archive_file, bytes_written != bytes_read))\n              break;\n              remaining_size = remaining_size - bytes_written;\n            }\n            print_error_message(0,archived_file,0,0);\n            free(buffer);\n          }\n          else {\n            formatted_string = get_formatted_string(archive);\n            print_error_message_0011a110(formatted_string);\n          }\n        }\n      }\n      else {\n        print_error_message(0,archive,0,0);\n      }\n      result = bfd_close_all_done(archive_file);\n      if (result == '\\0') {\n        print_error_message(archive_path,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archive_path);\n      DAT_00127a20 = 1;\n    }\n    *bytes_read = 0;\n    buffer = (void *)xstrdup(*output_file_path);\n    if (DAT_00127a20 == 0) {\n      bfd_close_function = bfd_close;\n    }\n    else {\n      bfd_close_function = bfd_close_all_done;\n    }\n    result = (*bfd_close_function)(output_file_path);\n    if (result == '\\0') {\n      DAT_00127a20 = 1;\n      print_error_message(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*archive_path);\n    result = bfd_close(archive_path);\n    if (result == '\\0') {\n      DAT_00127a20 = 1;\n      print_error_message(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (temp_dir_list != (undefined8 *)0x0) {\n    if (temp_dir_list[2] == 0) {\n      rmdir((char *)temp_dir_list[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)temp_dir_list[1]);\n    }\n    free((void *)temp_dir_list[1]);\n    temp_dir_info = (undefined8 *)*temp_dir_list;\n    free(temp_dir_list);\n    temp_dir_list = temp_dir_info;\n  }\n  rmdir(temp_dir_path);\n  free(temp_dir_path);\n  return;\n}\n\n",
            "current_name": "extract_and_copy_archive_00104ea2",
            "entrypoint": "0x00104ea2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_archive_00104ea2",
                "__errno_location": "get_errno_location",
                "bVar17": "offset",
                "bfd_bread": "read_from_file",
                "bfd_bwrite": "write_to_file",
                "bfd_check_format": "check_format",
                "bfd_close": "close",
                "bfd_close_all_done": "close_all_done",
                "bfd_get_arch": "get_architecture",
                "bfd_openr": "open_read_mode",
                "bfd_openr_next_archived_file": "open_next_archived_file",
                "bfd_openw": "open_write_mode",
                "cVar1": "result",
                "chmod": "change_file_permissions",
                "concat": "combine_strings",
                "create_temp_directory_0011a0e0": "create_temp_directory",
                "dcgettext": "get_localized_text",
                "extract_and_copy_archive_001052a2": "extract_and_copy_file",
                "free": "deallocate_memory",
                "get_formatted_string_001125fa": "get_formatted_string",
                "iVar2": "arch",
                "in_stack_00000030": "unknown_flag",
                "lVar1": "bytes_read",
                "lVar12": "remaining_size",
                "lVar14": "bytes_written",
                "lVar5": "bytes_read",
                "param_10": "archive_path",
                "param_11": "open_mode",
                "param_18": "file_permissions",
                "param_19": "file_size",
                "param_7": "output_file_path",
                "param_8": "bytes_read",
                "param_9": "temp_dir_path",
                "pcVar1": "temp_dir_file",
                "pcVar10": "error_message",
                "pcVar13": "close_function",
                "pcVar15": "pathname",
                "pcVar7": "current_char",
                "piVar9": "errno_location",
                "ppcVar3": "archived_file",
                "ppcVar6": "archive_file",
                "print_error_message_001126c0": "print_error_message",
                "print_error_message_00119ed0": "print_custom_error_message",
                "printf": "print_formatted_string",
                "psVar16": "stat_pointer",
                "puVar8": "temp_dir_info",
                "pvVar4": "buffer",
                "rmdir": "remove_directory",
                "set_file_time_0011a350": "set_file_time",
                "stack0x00000050": "stack_variables",
                "stat": "get_file_status",
                "strerror": "get_error_string",
                "uVar1": "copy_to_filename_format",
                "uVar11": "formatted_string",
                "unaff_EBX": "stat_error",
                "unaff_R12": "archive_path",
                "unaff_R13": "temp_dir_list",
                "unaff_R15": "archive",
                "unaff_RBP": "stat_buffer",
                "unaff_retaddr": "return_address",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001052a2": {
            "additional_data": {
                "DAT_001279c9": {
                    "1": "copy_flag"
                },
                "DAT_001279cb": {
                    "1": "internal_stat_flag"
                },
                "DAT_00127a20": {
                    "1": "close_failed_flag"
                },
                "FUN_001052a2": {
                    "1": "extract_and_copy_archive_member",
                    "12": "extract_and_copy_archive",
                    "5": "extract_archive",
                    "6": "copy_archive"
                },
                "__format": {
                    "1": "error_msg_format",
                    "12": "format_string",
                    "3": "error_message",
                    "4": "error_message_format",
                    "5": "error_format"
                },
                "bVar18": {
                    "1": "stack_var",
                    "3": "temp_flag",
                    "5": "flag"
                },
                "cVar1": {
                    "1": "format_match",
                    "2": "current_char",
                    "5": "char_var",
                    "7": "format_valid",
                    "9": "format_check"
                },
                "iVar2": {
                    "1": "int_value",
                    "13": "arch_type",
                    "3": "architecture"
                },
                "iVar3": {
                    "1": "internal_stat_error",
                    "20": "stat_result",
                    "3": "int_var2"
                },
                "in_RAX": {
                    "1": "rax_var",
                    "2": "rax_value",
                    "3": "base_address"
                },
                "in_stack_00000008": {
                    "1": "original_file_path",
                    "2": "output_file_name",
                    "3": "output_path"
                },
                "in_stack_00000010": {
                    "1": "archive_ptr_ptr",
                    "2": "file_size_ptr",
                    "4": "current_file_ptr"
                },
                "in_stack_00000018": {
                    "1": "temp_dir_path_ptr",
                    "13": "temp_dir_path",
                    "3": "temp_dir_name"
                },
                "in_stack_00000020": {
                    "1": "archive_path",
                    "2": "next_archive_file"
                },
                "in_stack_00000028": {
                    "1": "stack_param5",
                    "2": "archive_mode",
                    "7": "open_mode"
                },
                "in_stack_00000030": {
                    "1": "is_relative",
                    "2": "is_writable",
                    "4": "unknown_flag"
                },
                "in_stack_000000f8": {
                    "1": "stack_var7",
                    "2": "permission_flags",
                    "3": "file_permission",
                    "4": "permissions",
                    "5": "file_permissions"
                },
                "in_stack_00000110": {
                    "1": "archive_size",
                    "4": "total_file_size",
                    "5": "total_size"
                },
                "lVar12": {
                    "1": "long_var12",
                    "18": "file_size",
                    "2": "archive_file_size",
                    "3": "long_var2"
                },
                "lVar15": {
                    "1": "bytes_to_write",
                    "2": "chunk_size",
                    "3": "long_var3",
                    "4": "read_size",
                    "5": "bytes_remaining"
                },
                "lVar5": {
                    "1": "long_var5",
                    "10": "bytes_read",
                    "2": "read_bytes",
                    "3": "long_var1",
                    "4": "bread_result"
                },
                "param_1": {
                    "1": "param",
                    "11": "param_1",
                    "19": "param1"
                },
                "param_2": {
                    "11": "param_2",
                    "20": "param2"
                },
                "param_3": {
                    "1": "pathname",
                    "3": "file_path",
                    "5": "path",
                    "7": "param3",
                    "9": "archive_path"
                },
                "pcVar10": {
                    "1": "char_pointer_variable",
                    "14": "current_char",
                    "2": "file_path",
                    "5": "current_path"
                },
                "pcVar14": {
                    "1": "pointer_code_var14",
                    "12": "close_function",
                    "2": "bfd_close_func",
                    "4": "close_func"
                },
                "pcVar16": {
                    "1": "current_path",
                    "2": "temp_path",
                    "3": "current_char",
                    "7": "next_char"
                },
                "piVar8": {
                    "1": "errno_result",
                    "10": "errno_ptr",
                    "2": "error_code",
                    "8": "errno_location"
                },
                "ppcVar11": {
                    "1": "pointer_pointer_char_var11",
                    "4": "archive_file",
                    "8": "archived_files"
                },
                "ppcVar4": {
                    "1": "temp_path",
                    "2": "arch_ptr",
                    "3": "stat_args"
                },
                "psVar17": {
                    "1": "internal_stat_ptr",
                    "2": "stat_data",
                    "6": "stat_buffer",
                    "9": "stat_struct"
                },
                "puVar7": {
                    "1": "ptr_var",
                    "2": "temp_ptr",
                    "3": "temp_dir_info",
                    "4": "temp_dir_ptr",
                    "7": "temp_dir"
                },
                "pvVar13": {
                    "1": "ptr_var",
                    "2": "buffer_ptr",
                    "21": "buffer"
                },
                "stack0x00000050": {
                    "1": "stat_storage"
                },
                "stack0x000000e0": {
                    "1": "arch_file_stats"
                },
                "stack0x000000f0": {
                    "1": "arch_file_ptr"
                },
                "stack0x00000110": {
                    "1": "remaining_size"
                },
                "uVar6": {
                    "1": "undefined_var",
                    "2": "error_string",
                    "4": "format_string"
                },
                "uVar9": {
                    "1": "undefined_var9",
                    "10": "error_msg",
                    "2": "u_var2",
                    "5": "error_message",
                    "6": "error_string"
                },
                "unaff_R14": {
                    "1": "unaff_variable14",
                    "2": "temp_dir_node",
                    "5": "temp_dir_list"
                },
                "unaff_R15": {
                    "1": "archive_path",
                    "2": "archive_info",
                    "3": "archive_ptr",
                    "5": "archive_file"
                },
                "unaff_retaddr": {
                    "1": "return_value",
                    "2": "unaff_return_address",
                    "21": "return_address",
                    "4": "return_addr"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid extract_and_copy_archive_001052a2(undefined8 param1,undefined8 param2,char *archive_path)\n\n{\n  char format_check;\n  int arch_type;\n  int stat_result;\n  char **stat_args;\n  long bytes_read;\n  undefined8 error_message;\n  char *format_string;\n  undefined8 *temp_dir;\n  int *errno_ptr;\n  undefined8 error_msg;\n  long base_address;\n  char *current_char;\n  char **archived_files;\n  long file_size;\n  void *buffer;\n  code *close_function;\n  long bytes_remaining;\n  char *next_char;\n  stat *stat_struct;\n  undefined8 *temp_dir_list;\n  char **archive_file;\n  byte byte_var;\n  undefined8 return_address;\n  undefined8 *output_path;\n  long *current_file_ptr;\n  char *temp_dir_path;\n  undefined8 *next_archive_file;\n  undefined8 open_mode;\n  undefined8 unknown_flag;\n  uint file_permissions;\n  long file_count;\n  \n  byte_var = 0;\n  current_char = (char *)(base_address + 1);\n  do {\n    if (*current_char == '/') {\n      extract_and_copy_archive_001052a2();\n      return;\n    }\n    while (*current_char == '\\0') {\n      current_char = (char *)concat(temp_dir_path,&DAT_0011b47d);\n      stat_result = stat(current_char,(stat *)&stat_storage);\n      temp_dir = temp_dir_list;\n      if (-1 < stat_result) {\n        file_size = create_temp_directory_0011a0e0(current_char);\n        free(current_char);\n        if (file_size == 0) {\n          errno_ptr = __errno_location();\n          current_char = strerror(*errno_ptr);\n          error_msg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(error_msg,current_char);\n          goto LAB_00104e93;\n        }\n        temp_dir = (undefined8 *)xmalloc(0x18);\n        current_char = *archive_file;\n        *temp_dir = temp_dir_list;\n        temp_dir[2] = 0;\n        temp_dir[1] = file_size;\n        current_char = (char *)concat(file_size,&DAT_0011b47d,current_char);\n      }\n      stat_result = 0;\n      if (DAT_001279cb != '\\0') {\n        stat_struct = (stat *)&stat_storage;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&stat_struct->st_dev = 0;\n          stat_struct = (stat *)((long)stat_struct + (ulong)byte_var * -8 + 4);\n        }\n        archived_files = (char **)archive_file[0x1d];\n        if ((char **)archive_file[0x1d] == (char **)0x0) {\n          archived_files = archive_file;\n        }\n        stat_result = (**(code **)(archived_files[1] + 0x1e8))(archive_file,(stat *)&stat_storage);\n        if (stat_result != 0) {\n          next_char = *archive_file;\n          error_msg = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(error_msg,next_char);\n        }\n      }\n      temp_dir_list = (undefined8 *)xmalloc(0x18);\n      temp_dir_list[1] = current_char;\n      *temp_dir_list = temp_dir;\n      temp_dir_list[2] = 0;\n      format_check = bfd_check_format(archive_file,1);\n      if (format_check == '\\0') {\n        error_msg = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_error_message_001126c0(0,archive_file,0,error_msg);\n        archived_files = (char **)bfd_openw(current_char,open_mode);\n        if (archived_files == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        stat_args = (char **)archive_file[0x1d];\n        if ((char **)archive_file[0x1d] == (char **)0x0) {\n          stat_args = archive_file;\n        }\n        arch_type = (**(code **)(stat_args[1] + 0x1e8))(archive_file,&stat_storage2);\n        file_size = file_count;\n        if (arch_type == 0) {\n          if (file_count < 0) {\n            error_msg = get_formatted_string_001125fa(archive_file);\n            error_message = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_message_00119ed0(error_message,error_msg);\n          }\n          else {\n            arch_type = bfd_seek(archive_file,0,0);\n            if (arch_type == 0) {\n              if (DAT_001279c9 != '\\0') {\n                next_char = *archived_files;\n                error_msg = get_formatted_string_001125fa(archive_file);\n                format_string = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(format_string,error_msg,next_char);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; file_size != 0; file_size = file_size - bytes_remaining) {\n                bytes_remaining = 0x2000;\n                if (file_size < 0x2001) {\n                  bytes_remaining = file_size;\n                }\n                bytes_read = bfd_bread(buffer,bytes_remaining,archive_file);\n                stat_args = archive_file;\n                if ((bytes_remaining != bytes_read) ||\n                   (bytes_read = bfd_bwrite(buffer,bytes_remaining,archived_files), stat_args = archived_files, bytes_remaining != bytes_read\n                   )) {\n                  print_error_message_001126c0(0,stat_args,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*archived_files,file_permissions | 0x100);\n              free(buffer);\n              format_check = bfd_close_all_done(archived_files);\n              if (format_check == '\\0') {\n                print_error_message_001126c0(current_char,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            error_msg = get_formatted_string_001125fa(archive_file);\n            print_error_message_0011a110(error_msg);\n          }\n        }\n        else {\n          print_error_message_001126c0(0,archive_file,0,0);\n        }\nLAB_00104f00:\n        format_check = bfd_close_all_done(archived_files);\n        if (format_check == '\\0') {\n          print_error_message_001126c0(current_char,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(current_char);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (unknown_flag._7_1_ == '\\0') {\n          archived_files = (char **)bfd_openw(current_char,*(undefined8 *)archive_file[1]);\n        }\n        else {\n          archived_files = (char **)bfd_openw(current_char,open_mode);\n        }\n        if (archived_files == (char **)0x0) {\nLAB_00104e80:\n          print_error_message_001126c0(current_char,0,0,0);\n          goto LAB_00104e93;\n        }\n        format_check = FUNC_00114e50(archive_file,archived_files,return_address);\n        if (format_check == '\\0') {\n          arch_type = bfd_get_arch(archive_file);\n          if (arch_type == 0) goto LAB_00104d75;\n          format_check = bfd_close_all_done(archived_files);\n          if (format_check == '\\0') {\n            print_error_message_001126c0(current_char,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        format_check = bfd_close(archived_files);\n        if (format_check == '\\0') {\n          print_error_message_001126c0(current_char,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (stat_result == 0)) {\n          set_file_time_0011a350(current_char,(stat *)&stat_storage);\n        }\n        file_size = bfd_openr(current_char,open_mode);\n        temp_dir_list[2] = file_size;\n        *current_file_ptr = file_size;\n        current_file_ptr = (long *)(file_size + 0xf0);\n        archived_files = (char **)bfd_openr_next_archived_file(next_archive_file,archive_file);\n        bfd_close(archive_file);\n        archive_file = archived_files;\n      }\n      if ((DAT_00127a20 != 0) || (archive_file == (char **)0x0)) {\n        *current_file_ptr = 0;\n        buffer = (void *)xstrdup(*output_path);\n        if (DAT_00127a20 == 0) {\n          close_function = bfd_close;\n        }\n        else {\n          close_function = bfd_close_all_done;\n        }\n        format_check = (*close_function)(output_path);\n        if (format_check == '\\0') {\n          DAT_00127a20 = 1;\n          print_error_message_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*next_archive_file);\n        format_check = bfd_close(next_archive_file);\n        if (format_check == '\\0') {\n          DAT_00127a20 = 1;\n          print_error_message_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      current_char = *archive_file;\n      archive_path = current_char;\n      if (*current_char == '/') goto LAB_0010527d;\n    }\n    next_char = current_char;\n    if ((*current_char == '.') && (next_char = current_char + 1, current_char[1] == '.')) {\n      next_char = current_char + 2;\n      if ((current_char[2] == '\\0') || (current_char[2] == '/')) {\nLAB_0010527d:\n        error_msg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(error_msg,archive_path);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (temp_dir_list != (undefined8 *)0x0) {\n          if (temp_dir_list[2] == 0) {\n            rmdir((char *)temp_dir_list[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)temp_dir_list[1]);\n          }\n          free((void *)temp_dir_list[1]);\n          temp_dir = (undefined8 *)*temp_dir_list;\n          free(temp_dir_list);\n          temp_dir_list = temp_dir;\n        }\n        rmdir(temp_dir_path);\n        free(temp_dir_path);\n        return;\n      }\n    }\n    for (; (current_char = next_char, *next_char != '\\0' && (*next_char != '/')); next_char = next_char + 1) {\n    }\n  } while( true );\n}\n\n",
            "current_name": "extract_and_copy_archive_001052a2",
            "entrypoint": "0x001052a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_001052a2",
                "__format": "format_string",
                "bVar18": "byte_var",
                "cVar1": "format_check",
                "iVar2": "arch_type",
                "iVar3": "stat_result",
                "in_RAX": "base_address",
                "in_stack_00000008": "output_path",
                "in_stack_00000010": "current_file_ptr",
                "in_stack_00000018": "temp_dir_path",
                "in_stack_00000020": "next_archive_file",
                "in_stack_00000028": "open_mode",
                "in_stack_00000030": "unknown_flag",
                "in_stack_000000f8": "file_permissions",
                "in_stack_00000110": "file_count",
                "lVar12": "file_size",
                "lVar15": "bytes_remaining",
                "lVar5": "bytes_read",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "archive_path",
                "pcVar10": "current_char",
                "pcVar14": "close_function",
                "pcVar16": "next_char",
                "piVar8": "errno_ptr",
                "ppcVar11": "archived_files",
                "ppcVar4": "stat_args",
                "psVar17": "stat_struct",
                "puVar7": "temp_dir",
                "pvVar13": "buffer",
                "stack0x00000050": "stat_storage",
                "stack0x000000e0": "stat_storage2",
                "uVar6": "error_message",
                "uVar9": "error_msg",
                "unaff_R14": "temp_dir_list",
                "unaff_R15": "archive_file",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053b5": {
            "additional_data": {
                "FUN_001053b5": {
                    "1": "print_formatted_error_and_exit",
                    "11": "print_error_message",
                    "2": "print_error_message_and_exit",
                    "4": "print_bad_format_error",
                    "9": "print_error_and_exit"
                },
                "dcgettext": {
                    "1": "get_error_text"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "error_format",
                    "19": "error_message",
                    "6": "error_string"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00114c80"
            ],
            "code": "\nvoid print_error_message_001053b5(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit(error_message);\n}\n\n",
            "current_name": "print_error_message_001053b5",
            "entrypoint": "0x001053b5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053b5": "print_error_message_001053b5",
                "dcgettext": "get_error_text",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053d5": {
            "additional_data": {
                "*unaff_R12": {
                    "1": "error_code_pointer"
                },
                "*unaff_R14": {
                    "1": "error_message_pointer"
                },
                "FUN_001053d5": {
                    "1": "print_and_close_error",
                    "11": "print_and_close",
                    "13": "print_error_and_close",
                    "2": "print_and_close_file",
                    "3": "print_error_message"
                },
                "bfd_close_all_done": {
                    "1": "close_file"
                },
                "print_error_message_0011a110": {
                    "2": "print_error_message"
                },
                "unaff_R12": {
                    "1": "error_message_pointer",
                    "3": "file_pointer",
                    "4": "file_descriptor",
                    "5": "error_address"
                },
                "unaff_R14": {
                    "1": "error_ptr",
                    "2": "error_message_address",
                    "4": "message_pointer",
                    "5": "error_message_ptr",
                    "8": "message_ptr"
                }
            },
            "called": [
                "FUN_0011a110"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nundefined4 print_error_and_close_001053d5(void)\n\n{\n  long error_address;\n  undefined8 *message_ptr;\n  \n  print_error_message(*message_ptr);\n  *(undefined4 *)(error_address + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(error_address + 8);\n}\n\n",
            "current_name": "print_error_and_close_001053d5",
            "entrypoint": "0x001053d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053d5": "print_error_and_close_001053d5",
                "bfd_close_all_done": "close_all_done",
                "print_error_message_0011a110": "print_error_message",
                "unaff_R12": "error_address",
                "unaff_R14": "message_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010540e": {
            "additional_data": {
                "**(code **)(*(long *)(in_RAX + 0x380) + 0x78)": {
                    "1": "function_pointer"
                },
                "0x380": {
                    "1": "offset2"
                },
                "0x71": {
                    "1": "inner_offset"
                },
                "0x78": {
                    "1": "function_offset"
                },
                "0x8": {
                    "1": "offset1"
                },
                "FUN_0010540e": {
                    "1": "run_function",
                    "17": "execute_function",
                    "2": "process_data"
                },
                "byte": {
                    "1": "byte_value"
                },
                "code": {
                    "2": "function_pointer"
                },
                "in_RAX": {
                    "1": "temp_value",
                    "2": "temp",
                    "4": "temp1"
                },
                "param_1": {
                    "1": "param",
                    "2": "data",
                    "3": "input_param",
                    "4": "arg1",
                    "8": "param1"
                },
                "param_2": {
                    "1": "input1",
                    "2": "struct_pointer",
                    "4": "arg2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "action",
                    "2": "parameter3",
                    "4": "arg3",
                    "5": "flag",
                    "8": "param3"
                }
            },
            "called": [],
            "calling": [
                "FUN_00114d50"
            ],
            "code": "\nvoid execute_function_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long rax;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte_value *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(function_pointer **)(*(long *)(rax + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_0010540e",
            "entrypoint": "0x0010540e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "byte": "byte_value",
                "code": "function_pointer",
                "in_RAX": "rax",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010543c": {
            "additional_data": {
                "*pcVar3": {
                    "1": "error_message"
                },
                "*piVar2": {
                    "1": "error_number"
                },
                "FUN_0010543c": {
                    "1": "open_file_and_print_error",
                    "23": "print_error_and_exit",
                    "3": "print_error_message"
                },
                "__errno_location": {
                    "1": "get_error_location"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "pcVar3": {
                    "1": "error_str",
                    "25": "error_message",
                    "3": "error_string"
                },
                "piVar2": {
                    "1": "errno_location_pointer",
                    "10": "errno_location",
                    "2": "error_pointer",
                    "3": "error_location",
                    "4": "errno_ptr"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_error_and_exit"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "uVar1": {
                    "1": "file_pointer",
                    "13": "file_descriptor",
                    "3": "parameter1",
                    "6": "file_handle"
                },
                "uVar4": {
                    "1": "gettext_result",
                    "2": "error_template",
                    "3": "translated_message",
                    "4": "translated_error_message",
                    "7": "localized_error_message"
                },
                "unaff_RBP": {
                    "1": "previous_rbp",
                    "10": "base_pointer",
                    "3": "stack_pointer",
                    "5": "stack_base"
                }
            },
            "called": [
                "__errno_location",
                "FUN_00119dd0",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_00114d60"
            ],
            "code": "\nvoid print_error_and_exit_0010543c(void)\n\n{\n  undefined8 file_descriptor;\n  int *errno_location;\n  char *error_message;\n  undefined8 localized_error_message;\n  long base_pointer;\n  \n  errno_location = __errno_location();\n  error_message = strerror(*errno_location);\n  file_descriptor = *(undefined8 *)(base_pointer + 0x10);\n  localized_error_message = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_error_and_exit_0010543c(localized_error_message,file_descriptor,error_message);\n}\n\n",
            "current_name": "print_error_and_exit_0010543c",
            "entrypoint": "0x0010543c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010543c": "print_error_and_exit_0010543c",
                "__errno_location": "get_error_location",
                "dcgettext": "get_error_message",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "strerror": "get_error_string",
                "uVar1": "file_descriptor",
                "uVar4": "localized_error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001054af": {
            "additional_data": {
                "DAT_001278c8": {
                    "1": "hash_table9"
                },
                "DAT_001278d0": {
                    "1": "hash_table8"
                },
                "DAT_001279d0": {
                    "1": "hash_table7"
                },
                "DAT_001279d8": {
                    "1": "hash_table6"
                },
                "DAT_001279e0": {
                    "1": "hash_table5"
                },
                "DAT_001279e8": {
                    "1": "hash_table4"
                },
                "DAT_001279f0": {
                    "1": "hash_table2"
                },
                "DAT_001279f8": {
                    "1": "hash_table1"
                },
                "DAT_00127a08": {
                    "1": "hash_table3"
                },
                "FUN_001054af": {
                    "1": "clean_up_data",
                    "2": "cleanup_hashtable",
                    "5": "cleanup_function",
                    "6": "delete_hash_tables",
                    "8": "cleanup_hash_table"
                },
                "in_RAX": {
                    "1": "temporary_register",
                    "2": "unused_variable"
                },
                "param_1": {
                    "1": "hash_table1",
                    "10": "unused_param1",
                    "3": "unused_parameter1",
                    "7": "unused_param"
                },
                "param_2": {
                    "1": "hash_table2",
                    "11": "unused_param2",
                    "3": "unused_parameter2",
                    "6": "unused_param"
                }
            },
            "called": [
                "htab_delete"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid cleanup_hash_table_001054af(undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  undefined8 return_value;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,unused_param2,return_value);\n  return;\n}\n\n",
            "current_name": "cleanup_hash_table_001054af",
            "entrypoint": "0x001054af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "in_RAX": "return_value",
                "param_1": "unused_param1",
                "param_2": "unused_param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010551d": {
            "additional_data": {
                "<original_parameter_name_1>": {
                    "1": "input"
                },
                "<original_variable_name_10>": {
                    "1": "c_var9"
                },
                "<original_variable_name_11>": {
                    "1": "u_var10"
                },
                "<original_variable_name_12>": {
                    "1": "i_var11"
                },
                "<original_variable_name_13>": {
                    "1": "u_var12"
                },
                "<original_variable_name_14>": {
                    "1": "u_var13"
                },
                "<original_variable_name_15>": {
                    "1": "i_var14"
                },
                "<original_variable_name_16>": {
                    "1": "pl_var15"
                },
                "<original_variable_name_17>": {
                    "1": "u_var16"
                },
                "<original_variable_name_18>": {
                    "1": "u_var17"
                },
                "<original_variable_name_19>": {
                    "1": "s_var18"
                },
                "<original_variable_name_1>": {
                    "1": "pu_var1"
                },
                "<original_variable_name_20>": {
                    "1": "pc_var19"
                },
                "<original_variable_name_21>": {
                    "1": "__ptr"
                },
                "<original_variable_name_22>": {
                    "1": "__ptr_00"
                },
                "<original_variable_name_23>": {
                    "1": "u_var20"
                },
                "<original_variable_name_24>": {
                    "1": "l_var21"
                },
                "<original_variable_name_25>": {
                    "1": "u_var22"
                },
                "<original_variable_name_26>": {
                    "1": "pi_var23"
                },
                "<original_variable_name_27>": {
                    "1": "u_var24"
                },
                "<original_variable_name_28>": {
                    "1": "l_var25"
                },
                "<original_variable_name_29>": {
                    "1": "__s_00"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_30>": {
                    "1": "s_var26"
                },
                "<original_variable_name_31>": {
                    "1": "l_var27"
                },
                "<original_variable_name_32>": {
                    "1": "unaff_rbx"
                },
                "<original_variable_name_33>": {
                    "1": "pc_var28"
                },
                "<original_variable_name_34>": {
                    "1": "pu_var29"
                },
                "<original_variable_name_35>": {
                    "1": "u_var30"
                },
                "<original_variable_name_36>": {
                    "1": "i_var31"
                },
                "<original_variable_name_3>": {
                    "1": "pu_var3"
                },
                "<original_variable_name_4>": {
                    "1": "pc_var4"
                },
                "<original_variable_name_5>": {
                    "1": "pu_var5"
                },
                "<original_variable_name_6>": {
                    "1": "u_var6"
                },
                "<original_variable_name_7>": {
                    "1": "u_var7"
                },
                "<original_variable_name_8>": {
                    "1": "__s"
                },
                "<original_variable_name_9>": {
                    "1": "c_var8"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_00127980": {
                    "1": "strip_symbols"
                },
                "DAT_001279b0": {
                    "1": "warning_msg_table_ptr"
                },
                "DAT_00127a00": {
                    "1": "should_merge_notes"
                },
                "DAT_00127a10": {
                    "1": "should_create_debuglink"
                },
                "DAT_00127a2c": {
                    "1": "debug_mode"
                },
                "FUN_0010551d": {
                    "1": "merge_notes",
                    "2": "process_binary",
                    "4": "process_binary_file"
                },
                "PC_stack_var": {
                    "1": "char_ptr5"
                },
                "__ptr": {
                    "1": "ptr_variable2",
                    "2": "void_pointer"
                },
                "__ptr_00": {
                    "1": "void_ptr2",
                    "2": "void_pointer2"
                },
                "__s": {
                    "1": "note_name",
                    "2": "message",
                    "3": "section_name",
                    "4": "str",
                    "6": "string_var"
                },
                "__s_00": {
                    "1": "file_ptr"
                },
                "__s_01": {
                    "1": "file_ptr2"
                },
                "bStack0000000000000100": {
                    "1": "byte2"
                },
                "bStack0000000000000101": {
                    "1": "byte3"
                },
                "bVar2": {
                    "1": "section_contents_check",
                    "10": "byte_var",
                    "2": "byte_var2"
                },
                "bVar38": {
                    "1": "bool_value"
                },
                "bVar39": {
                    "1": "flag3"
                },
                "cStack0000000000000148": {
                    "1": "found_relocation"
                },
                "cVar38": {
                    "1": "bool_variable"
                },
                "cVar39": {
                    "1": "byte_var2"
                },
                "cVar8": {
                    "1": "section_last_char",
                    "11": "char_var",
                    "2": "char_var8",
                    "3": "char1"
                },
                "cVar9": {
                    "1": "check_result",
                    "11": "char_var2",
                    "2": "char_var9",
                    "3": "char2"
                },
                "charArray": {
                    "1": "char_array1"
                },
                "charArray2": {
                    "1": "char_array2"
                },
                "iStack000000000000006c": {
                    "1": "int_var3"
                },
                "iVar11": {
                    "1": "int_value",
                    "2": "int_var11",
                    "3": "int1",
                    "5": "int_var1",
                    "7": "int_var"
                },
                "iVar13": {
                    "1": "int_variable2"
                },
                "iVar14": {
                    "1": "integer_variable_14",
                    "10": "int_var2",
                    "2": "int_var14",
                    "4": "string_comparison_result"
                },
                "iVar31": {
                    "1": "int_variable4",
                    "2": "int_var31",
                    "3": "int_var3"
                },
                "in_stack_00000008": {
                    "1": "binary_filename"
                },
                "in_stack_00000010": {
                    "1": "variable_count",
                    "2": "section_count"
                },
                "in_stack_00000018": {
                    "1": "c_var"
                },
                "in_stack_000000c0": {
                    "1": "section_array"
                },
                "in_stack_000000c8": {
                    "1": "ulong8"
                },
                "in_stack_000000d0": {
                    "1": "index"
                },
                "in_stack_000000d8": {
                    "1": "in_stack_var_d8"
                },
                "in_stack_000000e0": {
                    "1": "data_ptr"
                },
                "in_stack_000000f0": {
                    "1": "long11"
                },
                "in_stack_000000f8": {
                    "1": "ulong9"
                },
                "in_stack_00000110": {
                    "1": "long12"
                },
                "in_stack_00000118": {
                    "1": "entry_count"
                },
                "in_stack_00000140": {
                    "1": "section_size"
                },
                "lStack0000000000000078": {
                    "1": "long_var6"
                },
                "lStack0000000000000088": {
                    "1": "long_var7"
                },
                "lStack00000000000000a0": {
                    "1": "long8"
                },
                "lVar15": {
                    "1": "result_pointer"
                },
                "lVar21": {
                    "1": "name_allocation_size",
                    "2": "long1",
                    "3": "long_var1"
                },
                "lVar25": {
                    "1": "long5",
                    "2": "long_var2"
                },
                "lVar26": {
                    "1": "l_var27"
                },
                "lVar27": {
                    "1": "long4",
                    "2": "long_var3"
                },
                "longVar5": {
                    "1": "long_var5"
                },
                "pcStack0000000000000038": {
                    "1": "char_ptr4"
                },
                "pcStack0000000000000090": {
                    "2": "char_ptr3"
                },
                "pcVar108": {
                    "1": "str_buf4"
                },
                "pcVar19": {
                    "1": "ptr_var",
                    "2": "pointer_var19"
                },
                "pcVar28": {
                    "1": "pointer_char2",
                    "2": "section_name"
                },
                "pcVar33": {
                    "1": "section_name"
                },
                "pcVar33_2": {
                    "1": "str_buf2"
                },
                "pcVar33_3": {
                    "1": "str_buf3"
                },
                "pcVar34": {
                    "1": "merged_note_section_name"
                },
                "pcVar4": {
                    "1": "code_pointer_variable_4",
                    "2": "section_callback",
                    "3": "code_var",
                    "7": "function_pointer"
                },
                "piVar23": {
                    "1": "errno_location_ptr"
                },
                "plVar15": {
                    "1": "pointer_list",
                    "2": "pointer_var15",
                    "4": "long_ptr"
                },
                "plVar23": {
                    "1": "errno_ptr"
                },
                "plVar32": {
                    "1": "long_ptr_variable2",
                    "2": "merged_notes_ptr"
                },
                "ppcVar35": {
                    "1": "char_ptr_ptr"
                },
                "ppuVar37": {
                    "1": "pointer_pointer"
                },
                "puStack0000000000000020": {
                    "1": "undefined4_ptr"
                },
                "puVar1": {
                    "1": "p_note_section",
                    "2": "pointer",
                    "3": "pointer_var1",
                    "4": "section_flags",
                    "5": "ptr",
                    "6": "pointer1"
                },
                "puVar16": {
                    "1": "pointer_var3"
                },
                "puVar17": {
                    "1": "pointer_var4"
                },
                "puVar29": {
                    "1": "undefined8_ptr",
                    "2": "pointer_var29"
                },
                "puVar3": {
                    "1": "ptr_val",
                    "2": "ptr2",
                    "5": "pointer2"
                },
                "puVar34": {
                    "1": "ptr_var"
                },
                "puVar37": {
                    "1": "stab_symbols"
                },
                "puVar4": {
                    "1": "section_contents_function"
                },
                "puVar5": {
                    "1": "undefined8_ptr",
                    "2": "ptr_array",
                    "5": "pointer3"
                },
                "pvVar36": {
                    "1": "ptr_var3"
                },
                "pvVar37": {
                    "1": "ptr_array5"
                },
                "sStack000000000000015a": {
                    "1": "short1"
                },
                "sVar18": {
                    "1": "size1",
                    "2": "string_length",
                    "7": "size_var"
                },
                "sVar19": {
                    "1": "error_string"
                },
                "sVar26": {
                    "1": "fwrite_result",
                    "6": "size_var2"
                },
                "uStack0000000000000048": {
                    "1": "uint3"
                },
                "uStack0000000000000158": {
                    "1": "undefined2"
                },
                "uVar10": {
                    "1": "uint_variable",
                    "10": "uint_var",
                    "2": "uint_var10",
                    "3": "uint1"
                },
                "uVar12": {
                    "1": "section_flags_updated",
                    "2": "unsigned_var4",
                    "3": "uint2",
                    "9": "uint_var2"
                },
                "uVar13": {
                    "1": "undefined4_1",
                    "2": "uint_var13",
                    "3": "uint_var3",
                    "4": "undefined4_var"
                },
                "uVar16": {
                    "1": "message_translation",
                    "2": "ulong_var",
                    "3": "ulong_var3"
                },
                "uVar17": {
                    "1": "undefined8_variable2",
                    "2": "ulong4",
                    "3": "ulong_var4",
                    "4": "error_message"
                },
                "uVar20": {
                    "1": "result_var5",
                    "2": "ulong5"
                },
                "uVar22": {
                    "1": "result_var6",
                    "2": "ulong6"
                },
                "uVar24": {
                    "1": "ulong_var7",
                    "2": "section_size"
                },
                "uVar26": {
                    "1": "size_var26"
                },
                "uVar27": {
                    "1": "ulong_var"
                },
                "uVar30": {
                    "1": "ulong_var5",
                    "2": "ulong_var30"
                },
                "uVar6": {
                    "1": "section_index",
                    "2": "unsigned_var1",
                    "3": "ulong1",
                    "7": "ulong_var1"
                },
                "uVar7": {
                    "1": "unsigned_variable_7",
                    "2": "unsigned_var2",
                    "3": "ulong2",
                    "9": "ulong_var2"
                },
                "unaff_R13": {
                    "1": "long_pointer2"
                },
                "unaff_R14": {
                    "1": "unaff_r14"
                },
                "unaff_RBP": {
                    "1": "unaff_rbp"
                },
                "unaff_RBX": {
                    "1": "unaffected_rbx"
                },
                "voidPtr3": {
                    "1": "void_ptr3"
                },
                "voidPtr4": {
                    "1": "void_ptr4"
                },
                "voidPtr5": {
                    "1": "void_ptr5"
                }
            },
            "called": [
                "free",
                "FUN_001126c0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong process_binary_file_0010551d(void)\n\n{\n  uint *pointer1;\n  byte byte_var;\n  undefined *pointer2;\n  code *function_pointer;\n  undefined8 *pointer3;\n  ulong ulong_var1;\n  ulong ulong_var2;\n  char *string_var;\n  char char_var;\n  char char_var2;\n  uint uint_var;\n  int int_var;\n  uint uint_var2;\n  undefined4 undefined4_var;\n  int int_var2;\n  long *long_ptr;\n  undefined8 ulong_var3;\n  undefined8 error_message;\n  size_t size_var;\n  char *pointer4;\n  void *void_pointer;\n  void *void_pointer2;\n  ulong ulong5;\n  long long_var1;\n  ulong ulong6;\n  int *pointer_int;\n  ulong ulong7;\n  long long_var2;\n  FILE *string_var_00;\n  size_t size_var2;\n  long long_var3;\n  long *unaffected_rbx;\n  char *pointer_var28;\n  undefined8 *pointer_var29;\n  ulong ulong_var3;\n  int int_var3;\n  long unaffected_rbp;\n  long *pointer_var32;\n  char *pointer_to_string;\n  undefined4 *undefined4_pointer;\n  char **char_pointer_pointer;\n  long *pointer4;\n  void *void_pointer;\n  undefined8 *pointer5;\n  undefined **pointer_pointer;\n  bool bool_var;\n  byte byte_var2;\n  long binary_filename;\n  ulong section_count;\n  char string_var;\n  undefined4 *undefined4_ptr;\n  char *char_ptr4;\n  uint pointer_int_list;\n  int int4;\n  long long6;\n  long long7;\n  char *char_ptr3;\n  long long8;\n  long *pointer_list3;\n  ulong ulong8;\n  long long_var4;\n  long ulong_var8;\n  void *data_ptr;\n  long long11;\n  undefined8 ulong9;\n  byte byte2;\n  byte byte3;\n  undefined8 long12;\n  ushort ushort1;\n  char *section_size;\n  char char4;\n  char *in_stack_00000150;\n  undefined undefined2;\n  short short1;\n  \n  byte_var2 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_error_message_001126c0(0);\n  free(unaffected_rbx);\nLAB_001151a2:\n  unaffected_rbp = *(long *)(unaffected_rbp + 8);\n  pointer_var29 = DAT_001279b0;\n  if (unaffected_rbp == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(pointer5[1] + 8) != 5) || (*(int *)(*(long *)(unaffected_rbp + 0xd0) + 4) != 7)) ||\n        (char_var2 = string_comparison_00113fb0(), char_var2 == '\\0')) ||\n       ((*(long *)(unaffected_rbp + 0x60) == 0 || (long_var2 = *(long *)(unaffected_rbp + 0x40), long_var2 == 0))))\n    goto LAB_001151a2;\n    unaffected_rbx = (long *)xmalloc(0x20);\n    unaffected_rbx[1] = 0;\n    char_var2 = bfd_get_full_section_contents();\n    if (char_var2 != '\\0') {\n      long_var3 = process_build_attribute_notes_001163d0();\n      unaffected_rbx[2] = long_var3;\n      if ((long_var3 == long_var2) || (char_var2 = bfd_set_section_size(), char_var2 != '\\0')) {\n        unaffected_rbx[3] = (long)pointer4;\n        *unaffected_rbx = unaffected_rbp;\n        pointer4 = unaffected_rbx;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,binary_filename,unaffected_rbp);\n        free((void *)unaffected_rbx[1]);\n        free(unaffected_rbx);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (long_var2 = *(long *)(unaffected_rbp + 8); long_var2 != 0; long_var2 = *(long *)(long_var2 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointer_var29 != (undefined8 *)0x0; pointer_var29 = (undefined8 *)*pointer_var29) {\n    long_var2 = bfd_get_section_by_name();\n    if (long_var2 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(long_var2 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      size_var = *(size_t *)(long_var2 + 0x40);\n      string_var_00 = fopen((char *)pointer_var29[2],\"w\");\n      if (string_var_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(pointer_var29[2],0,0);\n      }\n      else {\n        char_var2 = bfd_malloc_and_get_section();\n        if (char_var2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((size_var != 0) &&\n                (size_var2 = fwrite(section_size,1,size_var,string_var_00), size_var2 != size_var)) {\n          pointer_int = __errno_location();\n          pointer_to_string = strerror(*pointer_int);\n          error_message = pointer_var29[2];\n          ulong_var3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(ulong_var3,error_message,pointer_to_string);\n          free(section_size);\n          fclose(string_var_00);\n          return 0;\n        }\n        fclose(string_var_00);\n        free(section_size);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    long6 = 0;\n  }\n  else {\n    long_var2 = bfd_get_section_by_name(binary_filename,\".gnu_debuglink\");\n    if (long_var2 != 0) {\n      error_message = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(error_message);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    long6 = bfd_create_gnu_debuglink_section(binary_filename);\n    long_var2 = DAT_00127a10;\n    if (long6 == 0) {\n      error_message = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,binary_filename,0,error_message,long_var2);\n      return 0;\n    }\n    if (*(int *)(*(long *)(binary_filename + 8) + 8) == 2) {\n      ulong5 = 0;\n      for (ulong7 = *(ulong *)(binary_filename + 0x90); ulong7 != 0;\n          ulong7 = *(ulong *)(ulong7 + 8)) {\n        ulong6 = *(ulong *)(ulong7 + 0x30);\n        ulong_var3 = ulong5;\n        ulong_var1 = ulong7;\n        ulong_var2 = ulong5;\n        if (ulong6 != 0) {\n          while ((ulong_var3 = ulong_var1, ulong_var2 != 0 &&\n                 (ulong_var3 = ulong7, ulong6 <= *(ulong *)(ulong5 + 0x30)))) {\n            ulong7 = *(ulong *)(ulong7 + 8);\n            if (ulong7 == 0) goto LAB_00107db8;\n            ulong6 = *(ulong *)(ulong7 + 0x30);\n            ulong_var1 = ulong5;\n            ulong_var2 = ulong6;\n          }\n        }\n        ulong5 = ulong_var3;\n      }\nLAB_00107db8:\n      if (ulong5 == 0) {\n        ulong7 = 0x1000;\n      }\n      else {\n        ulong5 = *(long *)(ulong5 + 0x40) + *(long *)(ulong5 + 0x30);\n        ulong7 = 0xffffffffffffffff;\n        if (ulong5 < 0xfffffffffffff001) {\n          ulong7 = ulong5 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(long6 + 0x28) = *(byte *)(long6 + 0x28) | 1;\n      *(ulong *)(long6 + 0x30) = ulong7;\n      *(ulong *)(long6 + 0x38) = ulong7;\n    }\n  }\n  pointer_var32 = DAT_001278b0;\n  int4 = *(int *)(binary_filename + 0xa0);\n  if (int4 != 0) {\n    ulong7 = process_debug_info_0010554f();\n    return ulong7;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    undefined4_ptr = (undefined4 *)0x0;\n  }\n  else {\n    pointer_pointer = &PTR_sstring_vartab_00125c60;\n    undefined4_ptr = (undefined4 *)xmalloc(0x60);\n    undefined4_pointer = undefined4_ptr;\n    for (long_var2 = 0x18; long_var2 != 0; long_var2 = long_var2 + -1) {\n      *undefined4_pointer = 0;\n      undefined4_pointer = undefined4_pointer + (ulong)byte_var2 * -2 + 1;\n    }\n    char_ptr4 = (char *)0x0;\n    do {\n      pointer2 = *pointer_pointer;\n      long_var2 = bfd_get_section_by_name();\n      long_var3 = bfd_get_section_by_name();\n      if ((long_var2 != 0) && (long_var3 != 0)) {\n        long_var2 = *(long *)(long_var2 + 0x40);\n        void_pointer = (void *)xmalloc(long_var2);\n        char_var2 = bfd_get_section_contents();\n        if (char_var2 == '\\0') {\n          undefined4_var = bfd_get_error();\n          bfd_errmsg(undefined4_var);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*pointer5);\n          free(char_ptr4);\n          free(void_pointer);\n        }\n        else {\n          ulong7 = *(ulong *)(long_var3 + 0x40);\n          void_pointer2 = (void *)xmalloc(ulong7 + 1);\n          string_var = bfd_get_section_contents();\n          if (string_var == '\\0') {\n            undefined4_var = bfd_get_error();\n            bfd_errmsg(undefined4_var);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*pointer5);\n            free(char_ptr4);\n          }\n          else {\n            *(undefined *)((long)void_pointer2 + ulong7) = 0;\n            if ((char_ptr4 != (char *)0x0) ||\n               (char_ptr4 = (char *)initialize_memory_00112894(),\n               char_ptr4 != (char *)0x0)) {\n              long8 = 0;\n              long7 = 0;\n              for (void_pointer = void_pointer; void_pointer <= (void *)((long)void_pointer + long_var2 + -0xc);\n                  void_pointer = (void *)((long)void_pointer + 0xc)) {\n                ulong5 = (**(code **)(pointer5[1] + 0x40))(void_pointer);\n                byte_var = *(byte *)((long)void_pointer + 4);\n                undefined4_var = (**(code **)(pointer5[1] + 0x58))((long)void_pointer + 6);\n                long_var3 = (**(code **)(pointer5[1] + 0x40))((long)void_pointer + 8);\n                if (byte_var == 0) {\n                  long7 = long8;\n                  long8 = long8 + long_var3;\n                }\n                else {\n                  ulong6 = (ulong5 & 0xffffffff) + long7;\n                  if (ulong6 < ulong7) {\n                    pointer_to_string = (char *)((long)void_pointer2 + ulong6);\n                    char_ptr3 = (char *)0x0;\n                    while( true ) {\n                      size_var = strlen(pointer_to_string);\n                      if (((size_var == 0) || (pointer_var28 = pointer_to_string + (size_var - 1), *pointer_var28 != '\\')) ||\n                         ((ulong)((long)void_pointer + long_var2) < (long)void_pointer + 0x10U)) goto LAB_001077fb;\n                      *pointer_var28 = '\\0';\n                      void_pointer = (void *)((long)void_pointer + 0xc);\n                      int_var = (**(code **)(pointer5[1] + 0x40))(void_pointer);\n                      ulong5 = (ulong)(uint)(int_var + (int)long7);\n                      if (ulong7 <= ulong5) break;\n                      pointer_to_string = (char *)concat(pointer_to_string,(long)void_pointer2 + ulong5,0);\n                      *pointer_var28 = '\\';\n                      free(char_ptr3);\n                      char_ptr3 = pointer_to_string;\n                    }\n                    error_message = *pointer5;\n                    pointer_var28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pointer_var28,error_message,pointer2,((long)void_pointer - (long)void_pointer) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)byte_var,undefined4_var,long_var3,pointer_to_string);\n                    char_var2 = process_debug_info_0011173a(undefined4_ptr,char_ptr4,byte_var);\n                    if (char_var2 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(char_ptr3);\n                      free(char_ptr4);\n                      free(void_pointer);\n                      free(void_pointer2);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    error_message = *pointer5;\n                    pointer_to_string = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pointer_to_string,error_message,pointer2,((long)void_pointer - (long)void_pointer) / 0xc,\n                            ulong5 & 0xffffffff,(ulong)byte_var,((long)void_pointer - (long)void_pointer) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(void_pointer);\n              goto LAB_001058eb;\n            }\n          }\n          free(void_pointer2);\n          free(void_pointer);\n        }\nLAB_00105981:\n        free(undefined4_ptr);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pointer_pointer = pointer_pointer + 2;\n    } while (pointer_pointer != (undefined **)&DAT_00125c90);\n    if ((char_ptr4 != (char *)0x0) && (char_var2 = process_debug_data_0010c892(), char_var2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(pointer5[1] + 8) == 1) {\n      long_var2 = 0;\n      for (long_ptr = pointer_var32; long_ptr < pointer_var32 + section_count; long_ptr = long_ptr + 1) {\n        (**(code **)(pointer5[1] + 0x218))();\n        if (char4 == '-') {\n          if (((long_var2 != 0) || (long_var2 = initialize_memory_00112894(), long_var2 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pointer_to_string = (char *)0x0;\n            pointer_var28 = in_stack_00000150;\n            while (((*pointer_var28 != '\\0' && (size_var = strlen(pointer_var28), pointer_var28[size_var - 1] == '\\')) &&\n                   (long_ptr + 1 < pointer_var32 + section_count))) {\n              pointer4 = (char *)xstrdup(pointer_var28);\n              size_var = strlen(pointer4);\n              pointer4[size_var - 1] = '\\0';\n              pointer_var28 = (char *)concat(pointer4,*(undefined8 *)(long_ptr[1] + 8),0);\n              free(pointer4);\n              free(pointer_to_string);\n              long_ptr = long_ptr + 1;\n              pointer_to_string = pointer_var28;\n            }\n            update_data_entry_001088ae(undefined2,(int)short1,section_size,\n                         pointer_var28);\n            string_var = process_debug_info_0011173a(undefined4_ptr,long_var2,undefined2);\n            if (string_var != '\\0') goto LAB_00106cac;\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_memory_blocks_00108863();\n      if ((long_var2 != 0) && (char_var2 = process_debug_data_0010c892(), char_var2 == '\\0')) goto LAB_00105981;\n    }\n    if (string_var == '\\0') {\n      if ((*(int *)(pointer5[1] + 8) != 2) || (section_count == 0)) {\n        pointer_to_string = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      section_size = (char *)0x0;\n      pointer_list3 = pointer_var32;\n      long_var4 = 0;\n      ulong8 = section_count;\n      ulong_var8 = 0;\n      pointer_var29 = (undefined8 *)&stack0x00000148;\n      for (long_var2 = 0x22; long_var2 != 0; long_var2 = long_var2 + -1) {\n        *(undefined4 *)pointer_var29 = 0;\n        pointer_var29 = (undefined8 *)((long)pointer_var29 + (ulong)byte_var2 * -8 + 4);\n      }\n      char_var2 = '\\0';\n      _pointer_int_list = (int *)0x0;\n      char_ptr4 = (char *)0x0;\n      char_ptr3 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)section_count <= long_var4) break;\n        long_var2 = pointer_var32[long_var4];\n        char_var = bfd_coff_get_syment();\n        long_var3 = ulong_var8;\n        if (char_var == '\\0') {\n          undefined4_var = bfd_get_error();\n          bfd_errmsg(undefined4_var);\n          pointer_to_string = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          error_message = dcgettext(0,pointer_to_string,5);\n          print_error_message_00119ed0(error_message);\n          goto LAB_00105981;\n        }\n        pointer_to_string = *(char **)(long_var2 + 8);\n        long_var4 = long_var4 + 1;\n        ulong_var8 = (ulong)byte3 + 1 + ulong_var8;\n        if ((byte3 != 0) && (char_var = bfd_coff_get_auxent(), char_var == '\\0')) {\n          undefined4_var = bfd_get_error();\n          bfd_errmsg(undefined4_var);\n          pointer_to_string = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (char_ptr3 == (char *)long_var3) {\n          if (byte2 != 0x67) {\n            char_var = initialize_debug_info_0010bbd3(undefined4_ptr);\n            if (char_var == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          char_ptr3 = (char *)long11;\n          char_var = initialize_debug_info_0010bbd3(undefined4_ptr);\n        }\n        else {\nLAB_00106de4:\n          if ((char)byte2 < '\\0') {\n            if (byte2 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (byte2 < 100) {\n            switch(byte2) {\n            case 3:\n              if (ulong9._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)ulong9._6_2_ & *(uint *)(pointer5[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(pointer5[0x22] + 0x3c) & 0x3f)) {\n                _pointer_int_list = (int *)(**(code **)(pointer5[1] + 0x238))();\n                char_ptr4 = pointer_to_string;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(byte2) {\n            case 100:\n              int_var = strcmp(pointer_to_string,\".bb\");\n              if (int_var == 0) {\n                char_var = start_debug_block_0010be88(undefined4_ptr);\n                goto joined_r0x00107247;\n              }\n              int_var = strcmp(pointer_to_string,\".eb\");\n              if (int_var == 0) {\n                char_var = debug_end_block_0010bf20(undefined4_ptr);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              int_var = strcmp(pointer_to_string,\".bf\");\n              if (int_var == 0) {\n                if (char_ptr4 != (char *)0x0) {\n                  long_var3 = parse_coff_type_0010dac0();\n                  if ((long_var3 == 0) ||\n                     (char_var2 = debug_record_function_0010bc80(undefined4_ptr), char_var2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_pointer_int_list != (int *)0x0) {\n                    int_var = 0;\n                    if (byte3 != 0) {\n                      int_var = ushort1 - 1;\n                    }\n                    long_var2 = *(long *)(*(long *)(long_var2 + 0x20) + 0x30);\n                    while( true ) {\n                      int_var3 = _pointer_int_list[4];\n                      if (int_var3 == 0) break;\n                      char_var = record_debug_line_0010bf86(undefined4_ptr,int_var + int_var3,\n                                           *(long *)(_pointer_int_list + 6) + long_var2);\n                      _pointer_int_list = _pointer_int_list + 4;\n                      if (char_var == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _pointer_int_list = (int *)0x0;\n                  char_ptr4 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointer_to_string = \"%ld: .bf without preceding function\";\n              }\n              else {\n                int_var = strcmp(pointer_to_string,\".ef\");\n                if (int_var != 0) goto switchD_00106e1a_caseD_68;\n                if (char_var2 != '\\0') {\n                  char_var2 = debug_end_function_0010be1a(undefined4_ptr);\n                  if (char_var2 == '\\0') goto LAB_00105981;\n                  char_var2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointer_to_string = \"%ld: unexpected .ef\\n\";\n              }\n              error_message = dcgettext(0,pointer_to_string,5);\n              print_error_message_00119ed0(error_message);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          long_var1 = parse_coff_type_0010dac0();\n          if (long_var1 == 0) goto LAB_00105981;\n          char_var = process_parameter_00112a33(&stack0x00000140,long_var2,long_var3);\n        }\njoined_r0x00107247:\n        if (char_var == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(binary_filename + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(binary_filename + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary_filename + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (section_count != 0) {\n        pointer_var32 = DAT_001278b0 + section_count;\n        long_ptr = DAT_001278b0;\n        do {\n          uint_var = *(uint *)(*long_ptr + 0x18);\n          if ((uint_var & 0x1000000) != 0) {\n            *(uint *)(*long_ptr + 0x18) = uint_var & 0xfeffffff;\n          }\n          long_ptr = long_ptr + 1;\n        } while (pointer_var32 != long_ptr);\n      }\n    }\n    else {\n      for (long_var2 = *(long *)(binary_filename + 0x90); long_var2 != 0; long_var2 = *(long *)(long_var2 + 8)\n          ) {\n        if (*(long *)(long_var2 + 0xe8) != 0) {\n          pointer1 = (uint *)(*(long *)(long_var2 + 0xe8) + 0x18);\n          *pointer1 = *pointer1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      int_var = bfd_get_error();\n      if (int_var != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    long_var2 = xmalloc();\n    pointer_var32 = DAT_001278b0;\n    pointer_int_list = *(uint *)((long)pointer5 + 0x44) & 0x42;\n    DAT_001278a8 = long_var2;\n    if (section_count == 0) {\n      ulong7 = 0;\n    }\n    else {\n      ulong7 = 0;\n      _string_var = 0;\n      do {\n        int_var = DAT_001279a0;\n        long_ptr = (long *)pointer_var32[_string_var];\n        function_pointer = (code *)long_ptr[4];\n        uint_var = *(uint *)(long_ptr + 3);\n        pointer_to_string = (char *)long_ptr[1];\n        pointer_var28 = pointer_to_string;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          int_var3 = 0;\n          pointer_var29 = DAT_001279a8;\n          while( true ) {\n            if ((int_var <= int_var3) || (pointer4 = (char *)pointer_var29[5], pointer4 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pointer4 != \"\") break;\nLAB_0010750b:\n            int_var3 = int_var3 + 1;\n          }\n          int_var2 = strcmp(pointer4,pointer_to_string);\n          if (int_var2 != 0) {\n            pointer_var29 = (undefined8 *)*pointer_var29;\n            goto LAB_0010750b;\n          }\n          free(pointer4);\n          ulong5 = ulong7 + 1;\n          pointer_var29[5] = \"\";\n          ulong_var3 = extract_section_info_0011a2e0(pointer_var29);\n          error_message = DAT_001278d0;\n          *(undefined8 *)(long_var2 + ulong7 * 8) = ulong_var3;\n          long_var3 = htab_elements(error_message);\n          if ((long_var3 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          char_var2 = *pointer_to_string;\n          if (char_var2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pointer_to_string = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(binary_filename + 8) + 0x1c) != '\\0')\n             ) {\n            long_var3 = pointer5[1];\n            char_var2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        long_var3 = htab_elements(DAT_001278d0);\n        ulong5 = ulong7;\n        if ((long_var3 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (pointer_to_string != (char *)0x0) {\nLAB_001064eb:\n          if (((*pointer_to_string == '_') && (pointer_to_string[1] == '_')) &&\n             (int_var = strcmp(pointer_to_string + (pointer_to_string[2] == '_'),\"__gnu_lto_slim\"), int_var == 0)) {\n            error_message = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_error_and_exit_00119dd0(error_message);\n          }\n        }\n        _char4 = 0;\n        section_size = pointer_to_string;\n        long_var3 = htab_find(DAT_001278d0);\n        if (((long_var3 == 0) || (pointer_var28 = *(char **)(long_var3 + 8), pointer_to_string == pointer_var28)) &&\n           (pointer_var28 = pointer_to_string, char_pointer_pointer = DAT_001278d8, (uint_var & 0x100) != 0)) {\n          for (; char_pointer_pointer != (char **)0x0; char_pointer_pointer = (char **)char_pointer_pointer[3]) {\n            int_var = strcmp(*char_pointer_pointer,pointer_to_string);\n            if (int_var == 0) {\n              pointer_var28 = char_pointer_pointer[1];\n              break;\n            }\n          }\n        }\n        long_ptr[1] = (long)pointer_var28;\n        char_var2 = *pointer_var28;\n        if (char_var2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pointer_to_string = DAT_00127908;\n        long_var3 = pointer5[1];\n        if (*(char *)(long_var3 + 0x1c) == char_var2) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((uint_var & 0x82) == 0 && (function_pointer != bfd_map_over_sections)) &&\n                ((*(byte *)(long_ptr[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pointer_var28 = pointer_var28 + 1;\n            long_ptr[1] = (long)pointer_var28;\n            goto joined_r0x00106565;\n          }\n          char_var2 = *(char *)(*(long *)(binary_filename + 8) + 0x1c);\n          if (char_var2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            pointer_var28 = pointer_var28 + 1;\n            long_ptr[1] = (long)pointer_var28;\n            size_var = strlen(pointer_var28);\n            long_var3 = size_var + 2;\n            goto LAB_001066bc;\n          }\n          *pointer_var28 = char_var2;\n          long_ptr[1] = (long)pointer_var28;\n          ulong7 = ulong5;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(binary_filename + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            ulong7 = ulong5;\n            if (pointer_to_string == (char *)0x0) goto LAB_00105b32;\n            size_var = strlen(pointer_var28);\n            size_var2 = strlen(pointer_to_string);\n            pointer_to_string = (char *)xmalloc(size_var2 + size_var + 1);\n            pointer4 = pointer_to_string;\n          }\n          else {\nLAB_0010668d:\n            pointer_to_string = DAT_00127908;\n            if ((*(char *)(long_var3 + 0x1c) != '\\0') && (char_var2 != *(char *)(long_var3 + 0x1c)))\n            goto joined_r0x00106565;\n            size_var = strlen(pointer_var28);\n            long_var3 = size_var + 2;\n            if (pointer_to_string == (char *)0x0) {\n              pointer4 = (char *)xmalloc(long_var3);\n            }\n            else {\nLAB_001066bc:\n              size_var = strlen(pointer_to_string);\n              pointer4 = (char *)xmalloc(size_var + long_var3);\n            }\n            pointer_to_string = pointer4 + 1;\n            *pointer4 = *(char *)(*(long *)(binary_filename + 8) + 0x1c);\n          }\n          string_var = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(pointer_to_string,DAT_00127908);\n            size_var = strlen(string_var);\n            pointer_to_string = pointer_to_string + size_var;\n          }\n          strcpy(pointer_to_string,pointer_var28);\n          long_ptr[1] = (long)pointer4;\n          pointer_var28 = pointer4;\n          ulong7 = ulong5;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((uint_var & 0x20) == 0) &&\n           (((uint_var & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(long_ptr[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((pointer_int_list == 0) &&\n              (((uint_var & 0x82) != 0 || ((*(byte *)(long_ptr[4] + 0x25) & 0x10) != 0)))) ||\n             (int_var = bfd_decode_symclass(long_ptr), int_var == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              long_var3 = htab_find();\n              if (long_var3 == 0) goto LAB_00105c07;\n            }\n            else {\n              _char4 = _char4 & 0xffffffffffffff00;\n              section_size = pointer_var28;\n              htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n              if (char4 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uint_var & 0x82) == 0) && (function_pointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(long_ptr[4] + 0x25) & 0x10) == 0)) {\n            if ((uint_var & 4) == 0) {\n              if (((*(int *)(pointer5[1] + 8) != 2) ||\n                  (long_var3 = *(long *)(long_ptr[4] + 0xd0), long_var3 == 0)) ||\n                 (*(long *)(long_var3 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  char_var2 = bfd_is_local_label(pointer5);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            char_var2 = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (char_var2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          long_var3 = htab_find();\n          if (long_var3 != 0) {\nLAB_0010687f:\n            error_message = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_00119ed0(error_message);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _char4 = _char4 & 0xffffffffffffff00;\n          section_size = pointer_var28;\n          htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n          if (char4 != '\\0') goto LAB_0010687f;\n        }\n        if ((uint_var & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _char4 = _char4 & 0xffffffffffffff00;\n            section_size = pointer_var28;\n            htab_traverse(DAT_001279f0,match_pattern_0011a170,&stack0x00000140);\n            if (char4 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          long_var3 = htab_find();\n          if (long_var3 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((uint_var & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            long_var3 = htab_find();\n            if (long_var3 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _char4 = _char4 & 0xffffffffffffff00;\n            section_size = pointer_var28;\n            htab_traverse(DAT_00127a08,match_pattern_0011a170,&stack0x00000140);\n            if (char4 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          char_var2 = process_binary_section_001159d0(long_ptr[4]);\n          if (char_var2 == '\\0') {\n            if (((uint_var & 0x800002) == 0) && (function_pointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uint_var & 0x82) != 0) {\n                char_var2 = check_pattern_00115d70(pointer_var28);\n                if ((char_var2 == '\\0') &&\n                   ((long_var3 = htab_elements(DAT_001279d8), long_var3 == 0 ||\n                    (char_var2 = check_pattern_00115d70(pointer_var28), char_var2 != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (uint_var2 = *(uint *)(long_ptr + 3), (uint_var2 & 0x200000) != 0)) ||\n                       (long_var3 = *long_ptr, long_var3 == 0)) ||\n                      ((*(int *)(*(long *)(long_var3 + 8) + 8) != 5 || (*(long *)(long_var3 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)long_ptr + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uint_var2 = *(uint *)(long_ptr + 3);\n                }\n                *(uint *)(long_ptr + 3) = uint_var2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uint_var & 1) != 0) && (char_var2 = check_pattern_00115d70(pointer_var28), char_var2 != '\\0')) {\n                *(uint *)(long_ptr + 3) = *(uint *)(long_ptr + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (char_var2 = check_pattern_00115d70(pointer_var28), char_var2 != '\\0')) {\n                *(uint *)(long_ptr + 3) = *(uint *)(long_ptr + 3) & 0xff7ffffd | 0x80;\n              }\n              if (function_pointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(long_var2 + ulong7 * 8) = long_ptr;\n            ulong7 = ulong7 + 1;\n          }\n        }\n        _string_var = _string_var + 1;\n      } while (section_count != _string_var);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      pointer_var29 = DAT_001279a8;\n      int_var = DAT_001279a0;\n      for (long_var3 = 0; long_var3 < int_var; long_var3 = long_var3 + 1) {\n        pointer_to_string = (char *)pointer_var29[5];\n        if (pointer_to_string == (char *)0x0) {\n          long_var1 = ulong7 * 8;\n          ulong7 = ulong7 + 1;\n          error_message = extract_section_info_0011a2e0(pointer_var29,binary_filename);\n          *(undefined8 *)(long_var2 + long_var1) = error_message;\n          int_var = DAT_001279a0;\n        }\n        else if (pointer_to_string != \"\") {\n          error_message = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_error_and_exit_00119dd0(error_message,pointer_to_string);\n        }\n        pointer_var29 = (undefined8 *)*pointer_var29;\n      }\n    }\n    bool_var = DAT_00127980 != '\\0';\n    *(undefined8 *)(long_var2 + ulong7 * 8) = 0;\n    if ((bool_var) && (undefined4_ptr != (undefined4 *)0x0)) {\n      int_var = *(int *)(*(undefined8 **)(binary_filename + 8) + 1);\n      if ((int_var != 5) && (int_var != 2)) {\n        error_message = **(undefined8 **)(binary_filename + 8);\n        ulong_var3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,binary_filename,0,ulong_var3,error_message);\nLAB_00105d8c:\n        free(undefined4_ptr);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      data_ptr = (void *)0x0;\n      char_var2 = analyze_input_0011378f(binary_filename,undefined4_ptr,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (char_var2 == '\\0') goto LAB_00105d8c;\n      long_var2 = bfd_make_section_with_flags(binary_filename,\".stab\",0x2108);\n      long_var3 = bfd_make_section_with_flags(binary_filename,\".stabstr\",0x2108);\n      if ((((long_var2 == 0) || (long_var3 == 0)) ||\n          (char_var2 = bfd_set_section_size(long_var2,long12), char_var2 == '\\0')) ||\n         (char_var2 = bfd_set_section_size(long_var3,section_size), char_var2 == '\\0')) {\n        pointer_to_string = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        error_message = dcgettext(0,pointer_to_string,5);\n        print_error_message_001126c0(0,binary_filename,0,error_message);\n        free(data_ptr);\n        free(undefined4_ptr);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(long_var2 + 0x7c) = 2;\n      *(undefined4 *)(long_var3 + 0x7c) = 0;\n      char_var2 = bfd_set_section_contents\n                        (binary_filename,long_var2,pointer_list3,0,long12);\n      if ((char_var2 == '\\0') ||\n         (char_var2 = bfd_set_section_contents\n                            (binary_filename,long_var3,data_ptr,0,section_size),\n         char_var2 == '\\0')) {\n        pointer_to_string = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(undefined4_ptr);\n    }\n    section_count = ulong7 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    long_var2 = htab_elements(DAT_001279f8);\n    if (((long_var2 != 0) ||\n        (((((((long_var2 = htab_elements(DAT_00127a08), long_var2 != 0 ||\n              (long_var2 = htab_elements(DAT_001279e8), long_var2 != 0)) ||\n             (long_var2 = htab_elements(DAT_001279e0), long_var2 != 0)) ||\n            ((long_var2 = htab_elements(DAT_001279d8), long_var2 != 0 ||\n             (long_var2 = htab_elements(DAT_001279d0), long_var2 != 0)))) ||\n           (long_var2 = htab_elements(DAT_001278d0), long_var2 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(binary_filename,DAT_001278a8,section_count & 0xffffffff);\n  bfd_map_over_sections(pointer5,process_binary_section_00115dc0,binary_filename);\n  bfd_map_over_sections(pointer5,reverse_section_00116110,binary_filename);\n  for (pointer_var29 = DAT_001279c0; pointer3 = DAT_001279b8, pointer_var29 != (undefined8 *)0x0;\n      pointer_var29 = (undefined8 *)*pointer_var29) {\n    char_var2 = bfd_set_section_contents(binary_filename,pointer_var29[5],pointer_var29[4],0,pointer_var29[3]);\n    if (char_var2 == '\\0') {\n      print_error_message_001126c0(0,binary_filename,pointer_var29[5],0);\n      return 0;\n    }\n  }\n  for (; pointer3 != (undefined8 *)0x0; pointer3 = (undefined8 *)*pointer3) {\n    error_message = *(undefined8 *)(pointer3[5] + 0x60);\n    char_var2 = bfd_set_section_contents(binary_filename,error_message,pointer3[4],0,pointer3[3]);\n    if (char_var2 == '\\0') {\n      print_error_message_001126c0(0,binary_filename,error_message,0);\n      return 0;\n    }\n  }\n  if (pointer4 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      error_message = *pointer5;\n      ulong_var3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_00119ed0(ulong_var3,error_message);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (char_var2 = bfd_fill_in_gnu_debuglink_section(binary_filename,long6),\n       long_var2 = DAT_00127a10, char_var2 != '\\0')) {\n      uint_var = (**(code **)(*(long *)(binary_filename + 8) + 0x140))(pointer5);\n      ulong7 = (ulong)uint_var;\n      if ((char)uint_var != '\\0') {\n        if (DAT_00127910 == 0) {\n          return ulong7;\n        }\n        char_var2 = bfd_alt_mach_code(binary_filename,DAT_00127910 & 0xffffffff);\n        ulong5 = DAT_00127910;\n        if (char_var2 != '\\0') {\n          return ulong7;\n        }\n        error_message = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_00119ed0(error_message,ulong5);\n        if (*(int *)(*(long *)(binary_filename + 8) + 8) != 5) {\n          error_message = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(error_message);\n          return ulong7;\n        }\n        error_message = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_00119ed0(error_message);\n        *(short *)(*(long *)(binary_filename + 0x110) + 0x3a) = (short)DAT_00127910;\n        return ulong7;\n      }\n      error_message = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,binary_filename,0,error_message);\n    }\n    else {\n      error_message = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,binary_filename,0,error_message,long_var2);\n    }\n    return 0;\n  }\n  pointer_var32 = (long *)0x0;\n  pointer_var29 = *(undefined8 **)(binary_filename + 0x90);\n  do {\n    if (pointer_var29 == (undefined8 *)0x0) {\n      do {\n        pointer_var32 = (long *)pointer4[3];\n        free((void *)pointer4[1]);\n        free(pointer4);\n        pointer4 = pointer_var32;\n      } while (pointer_var32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(binary_filename + 8) + 8) == 5)) &&\n        (*(int *)(pointer_var29[0x1a] + 4) == 7)) &&\n       (char_var2 = string_comparison_00113fb0(*pointer_var29,\".gnu.build.attributes\"), char_var2 != '\\0')) {\n      if (pointer_var32 == (long *)0x0) {\n        pointer_var32 = pointer4;\n      }\n      long_ptr = pointer4;\n      if (*(undefined8 **)(*pointer_var32 + 0x60) == pointer_var29) {\nLAB_0010625f:\n        pointer_to_string = \"error: failed to merge notes\";\n        if (pointer_var32[1] != 0) {\n          char_var2 = bfd_set_section_contents(binary_filename,pointer_var29,pointer_var32[1],0,pointer_var32[2]);\n          if (char_var2 == '\\0') {\n            error_message = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_error_message_001126c0(0,binary_filename,pointer_var29,error_message);\n            return 0;\n          }\n          pointer_var32 = (long *)pointer_var32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          pointer_var32 = long_ptr;\n          if (*(undefined8 **)(*long_ptr + 0x60) == pointer_var29) goto LAB_0010625f;\n          pointer_var32 = (long *)long_ptr[3];\n          long_ptr = pointer_var32;\n        } while (pointer_var32 != (long *)0x0);\n        pointer_to_string = \"error: failed to locate merged notes\";\n      }\n      error_message = dcgettext(0,pointer_to_string,5);\n      print_error_message_001126c0(0,binary_filename,pointer_var29,error_message);\n    }\nLAB_001061be:\n    pointer_var29 = (undefined8 *)pointer_var29[1];\n  } while( true );\n}\n\n",
            "current_name": "process_binary_file_0010551d",
            "entrypoint": "0x0010551d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010551d": "process_binary_file_0010551d",
                "__ptr": "void_pointer",
                "__ptr_00": "void_pointer2",
                "__s": "string_var",
                "__s_00": "string_var_00",
                "bStack0000000000000100": "byte2",
                "bStack0000000000000101": "byte3",
                "bVar2": "byte_var",
                "bVar38": "bool_var",
                "bVar39": "byte_var2",
                "cStack0000000000000148": "char4",
                "cVar8": "char_var",
                "cVar9": "char_var2",
                "iStack000000000000006c": "int4",
                "iVar11": "int_var",
                "iVar14": "int_var2",
                "iVar31": "int_var3",
                "in_stack_00000008": "binary_filename",
                "in_stack_00000010": "section_count",
                "in_stack_00000018": "string_var",
                "in_stack_000000c0": "pointer_list3",
                "in_stack_000000c8": "ulong8",
                "in_stack_000000d0": "long_var4",
                "in_stack_000000d8": "ulong_var8",
                "in_stack_000000e0": "data_ptr",
                "in_stack_000000f0": "long11",
                "in_stack_000000f8": "ulong9",
                "in_stack_00000110": "long12",
                "in_stack_00000118": "ushort1",
                "in_stack_00000140": "section_size",
                "lStack0000000000000078": "long6",
                "lStack0000000000000088": "long7",
                "lStack00000000000000a0": "long8",
                "lVar15": "result_pointer",
                "lVar21": "long_var1",
                "lVar25": "long_var2",
                "lVar27": "long_var3",
                "pcStack0000000000000038": "char_ptr4",
                "pcStack0000000000000090": "char_ptr3",
                "pcVar19": "pointer4",
                "pcVar28": "pointer_var28",
                "pcVar33": "pointer_to_string",
                "pcVar4": "function_pointer",
                "piVar23": "pointer_int",
                "plVar15": "long_ptr",
                "plVar32": "pointer_var32",
                "ppcVar35": "char_pointer_pointer",
                "ppuVar37": "pointer_pointer",
                "puStack0000000000000020": "undefined4_ptr",
                "puVar1": "pointer1",
                "puVar29": "pointer_var29",
                "puVar3": "pointer2",
                "puVar34": "undefined4_pointer",
                "puVar37": "stab_symbols",
                "puVar5": "pointer3",
                "pvVar36": "void_pointer",
                "sStack000000000000015a": "short1",
                "sVar18": "size_var",
                "sVar26": "size_var2",
                "uStack0000000000000048": "pointer_int_list",
                "uStack0000000000000158": "undefined2",
                "uVar10": "uint_var",
                "uVar12": "uint_var2",
                "uVar13": "undefined4_var",
                "uVar16": "ulong_var3",
                "uVar17": "error_message",
                "uVar20": "ulong5",
                "uVar22": "ulong6",
                "uVar24": "ulong7",
                "uVar30": "ulong_var3",
                "uVar6": "ulong_var1",
                "uVar7": "ulong_var2",
                "unaff_R13": "pointer4",
                "unaff_R14": "pointer5",
                "unaff_RBP": "unaffected_rbp",
                "unaff_RBX": "unaffected_rbx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010554f": {
            "additional_data": {
                "FUN_0010554f": {
                    "1": "extract_debug_symbols",
                    "3": "process_debug_info"
                },
                "URENAMED": {
                    "1": "unrename"
                },
                "__dest": {
                    "1": "destination"
                },
                "__ptr": {
                    "1": "new_section_content"
                },
                "__ptr_00": {
                    "1": "section1_data"
                },
                "__ptr_01": {
                    "1": "section2_data"
                },
                "__ptr_02": {
                    "1": "stab_buffer",
                    "2": "decompiled_code"
                },
                "_param_41": {
                    "1": "temp_byte"
                },
                "_param_43": {
                    "1": "merged_debug_sections_flags"
                },
                "_param_44": {
                    "1": "merged_debug_sections_sizes"
                },
                "_param_9": {
                    "1": "loop_counter"
                },
                "bVar2": {
                    "1": "byte_var"
                },
                "bVar3": {
                    "1": "byte_var"
                },
                "bVar38": {
                    "1": "flag"
                },
                "bVar39": {
                    "1": "flag"
                },
                "cVar7": {
                    "1": "error",
                    "2": "flag"
                },
                "iVar10": {
                    "1": "counter",
                    "2": "error_code"
                },
                "iVar11": {
                    "1": "comparison_result"
                },
                "in_R10": {
                    "1": "linked_list"
                },
                "in_stack_00000068": {
                    "1": "num_sections"
                },
                "in_stack_000000d8": {
                    "1": "long_var2"
                },
                "lVar14": {
                    "1": "iteration_index",
                    "2": "section_index",
                    "3": "section_size"
                },
                "lVar23": {
                    "1": "gap_size"
                },
                "lVar37": {
                    "1": "index"
                },
                "lVar8": {
                    "1": "long_var"
                },
                "param_1": {
                    "1": "input_binary"
                },
                "param_10": {
                    "1": "section_names"
                },
                "param_11": {
                    "1": "debug_info"
                },
                "param_12": {
                    "1": "updated_section_size",
                    "2": "max_size",
                    "3": "gap_size"
                },
                "param_13": {
                    "1": "debug_str"
                },
                "param_14": {
                    "1": "decompiled_code",
                    "2": "section_contents",
                    "6": "section_sizes"
                },
                "param_15": {
                    "1": "symtab",
                    "2": "bfd_flags"
                },
                "param_16": {
                    "1": "symtab_size"
                },
                "param_17": {
                    "1": "param_sections",
                    "2": "record_array",
                    "3": "section_array",
                    "5": "section_pointers",
                    "6": "sections"
                },
                "param_18": {
                    "1": "parameter_18"
                },
                "param_19": {
                    "1": "alt_machine_code"
                },
                "param_2": {
                    "1": "output_binary"
                },
                "param_20": {
                    "1": "build_attributes"
                },
                "param_21": {
                    "1": "section_data",
                    "2": "debug_link_section"
                },
                "param_22": {
                    "1": "parameter_22"
                },
                "param_23": {
                    "1": "section_start"
                },
                "param_24": {
                    "1": "stab_section"
                },
                "param_25": {
                    "1": "parameter_25"
                },
                "param_26": {
                    "1": "param_b"
                },
                "param_27": {
                    "1": "parameter_27"
                },
                "param_28": {
                    "1": "parameter_28"
                },
                "param_29": {
                    "1": "parameter_29"
                },
                "param_3": {
                    "1": "debug_info_file"
                },
                "param_30": {
                    "1": "param_c",
                    "3": "merged_notes"
                },
                "param_31": {
                    "1": "param_d",
                    "2": "merged_notes_size"
                },
                "param_32": {
                    "1": "param_e",
                    "2": "num_merged_notes"
                },
                "param_33": {
                    "1": "parameter_33",
                    "2": "debug_link_contents"
                },
                "param_34": {
                    "1": "debug_link_section_name"
                },
                "param_35": {
                    "1": "parameter_35"
                },
                "param_36": {
                    "1": "param7"
                },
                "param_37": {
                    "1": "is_executable"
                },
                "param_38": {
                    "1": "param9",
                    "2": "stab_section_size"
                },
                "param_39": {
                    "1": "stabstr_section_size"
                },
                "param_4": {
                    "1": "debug_link"
                },
                "param_40": {
                    "1": "section_indices",
                    "2": "section_sizes"
                },
                "param_41": {
                    "1": "section_type"
                },
                "param_42": {
                    "1": "merge_pattern"
                },
                "param_43": {
                    "1": "param14"
                },
                "param_44": {
                    "1": "section_type"
                },
                "param_5": {
                    "1": "alternative_machine_code"
                },
                "param_6": {
                    "1": "verbose_mode"
                },
                "param_7": {
                    "1": "bfd_ptr",
                    "15": "binary",
                    "2": "bfd_handle"
                },
                "param_8": {
                    "1": "record_count",
                    "4": "section_count",
                    "5": "num_records",
                    "9": "num_sections"
                },
                "param_9": {
                    "1": "param_41"
                },
                "pcVar3": {
                    "1": "section_function"
                },
                "pcVar31": {
                    "1": "section_name"
                },
                "pcVar4": {
                    "1": "function_ptr"
                },
                "plVar1": {
                    "1": "pointer2"
                },
                "plVar10": {
                    "1": "long_ptr2"
                },
                "plVar15": {
                    "1": "record",
                    "2": "current_section"
                },
                "plVar20": {
                    "1": "cur_symbol"
                },
                "plVar25": {
                    "1": "section_data"
                },
                "plVar28": {
                    "1": "current_section",
                    "2": "sections"
                },
                "plVar37": {
                    "1": "temp_ptr"
                },
                "plVar5": {
                    "1": "long_ptr"
                },
                "ppVar9": {
                    "1": "pointer_array"
                },
                "ppcVar34": {
                    "1": "pointer_array5"
                },
                "ppuVar36": {
                    "1": "stab_sections"
                },
                "puVar1": {
                    "1": "pointer1"
                },
                "puVar26": {
                    "1": "alternative_machine_code_entry"
                },
                "puVar30": {
                    "1": "pointer_array4"
                },
                "puVar32": {
                    "1": "pointer_var1"
                },
                "puVar33": {
                    "1": "section_gap"
                },
                "puVar36": {
                    "1": "stab_section_names"
                },
                "puVar4": {
                    "1": "pointer_array3"
                },
                "pvVar35": {
                    "1": "content_pointer"
                },
                "sVar18": {
                    "1": "length",
                    "2": "string_length"
                },
                "sVar19": {
                    "1": "length_2"
                },
                "uVar12": {
                    "1": "section_type"
                },
                "uVar13": {
                    "1": "symbol_size"
                },
                "uVar16": {
                    "1": "temp_long_long",
                    "2": "error_message"
                },
                "uVar17": {
                    "1": "translated_message",
                    "2": "error_message"
                },
                "uVar2": {
                    "1": "ushort_var"
                },
                "uVar21": {
                    "1": "calculation_result"
                },
                "uVar24": {
                    "1": "gap_size"
                },
                "uVar29": {
                    "1": "updated_param"
                },
                "uVar5": {
                    "1": "undefined_var"
                },
                "uVar6": {
                    "1": "section_type"
                },
                "uVar7": {
                    "1": "ushort_var3"
                },
                "uVar9": {
                    "1": "error_status",
                    "2": "result"
                },
                "unaff_R14": {
                    "1": "bfd_handle"
                },
                "unaff_R14[1]": {
                    "1": "bfd_data"
                }
            },
            "called": [
                "fprintf",
                "concat",
                "FUN_00112a33",
                "bfd_is_local_label",
                "FUN_0010870e",
                "xmalloc",
                "strcmp",
                "FUN_0010bf86",
                "bfd_map_over_sections",
                "FUN_00113fb0",
                "bfd_get_section_by_name",
                "FUN_0010bc80",
                "FUN_0010c892",
                "bfd_make_section_with_flags",
                "bfd_map_over_sections",
                "FUN_00115dc0",
                "htab_elements",
                "FUN_0010875d",
                "bfd_get_section_contents",
                "bfd_alt_mach_code",
                "bfd_coff_get_syment",
                "FUN_00119dd0",
                "xstrdup",
                "bfd_set_section_contents",
                "bfd_set_error",
                "htab_find",
                "FUN_00108863",
                "FUN_0010dac0",
                "FUN_0010be1a",
                "bfd_decode_symclass",
                "bfd_set_symtab",
                "FUN_00108b3e",
                "FUN_001159d0",
                "FUN_00116030",
                "FUN_0011a170",
                "bfd_get_error",
                "strlen",
                "FUN_0011173a",
                "FUN_0011a2e0",
                "bfd_errmsg",
                "FUN_0010be88",
                "qsort",
                "bfd_coff_get_auxent",
                "strcpy",
                "free",
                "FUN_001126c0",
                "FUN_00119ed0",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010bf20",
                "FUN_0010bbd3",
                "FUN_00112894",
                "FUN_00115d70",
                "FUN_00116110",
                "FUN_0011378f",
                "htab_traverse",
                "bfd_set_section_size",
                "dcgettext",
                "FUN_001088ae",
                "bfd_octets_per_byte"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 process_debug_info_0010554f(void)\n\n{\n  uint *symbol_flags;\n  byte byte_var;\n  code *section_function;\n  undefined8 *temp_ptr;\n  undefined testing_mode;\n  ushort section_type;\n  char result;\n  char cVar8;\n  undefined4 result;\n  int error_code;\n  int comparison_result;\n  uint section_flags;\n  uint symbol_size;\n  long section_size;\n  long *current_section;\n  undefined8 error_message;\n  undefined *new_section_content;\n  undefined8 error_message;\n  size_t string_length;\n  size_t str_len_2;\n  long *destination;\n  long *cur_symbol;\n  void *section1_data;\n  void *section2_data;\n  ulong calculation_result;\n  char *__s;\n  char *pcVar22;\n  long size;\n  ulong gap_size;\n  long *section_data;\n  undefined8 *aux_data;\n  int iVar27;\n  long *sections;\n  ulong gap_size;\n  ulong *section_contents;\n  char *temp_ptr;\n  undefined4 *stab_pointer;\n  undefined *temp_ptr;\n  long *linked_list;\n  char **debug_sections_names;\n  void *content_pointer;\n  undefined8 *bfd_handle;\n  undefined **stab_strings;\n  long index;\n  bool has_debug_info;\n  byte flag;\n  long binary;\n  ulong num_sections;\n  char param_41;\n  undefined4 *decompiled_code;\n  ulong padding_size;\n  char *merged_notes;\n  undefined *section_sizes;\n  uint bfd_flags;\n  long *sections;\n  undefined8 stab_strings_count;\n  undefined8 debug_link_section;\n  long section_data;\n  char *current_section;\n  long current_section_data;\n  long *merged_notes;\n  ulong merged_notes_size;\n  long num_merged_notes;\n  long long_var2;\n  void *debug_link_contents;\n  long param_g;\n  undefined8 in_stack_000000f8;\n  byte padding_byte;\n  byte stripping_level;\n  undefined8 stab_section_size;\n  ushort stab_strings_size;\n  long *section_sizes;\n  char param_d;\n  char *merged_debug_sections_names;\n  undefined section_flags;\n  short section_type;\n  \n  flag = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    padding_size = 0;\n    section_sizes = (undefined *)0x0;\n    sections = (long *)0x0;\n    gap_size = padding_size;\n  }\n  else {\n    section_size = (ulong)stab_strings_count._4_4_ * 8;\n    sections = (long *)xmalloc(section_size);\n    section_sizes = sections;\n    bfd_map_over_sections(binary,update_pointer_0010870e,&stack0x00000140);\n    qsort(sections,(ulong)stab_strings_count._4_4_,8,compare_records_0010875d);\n    section_sizes = (undefined *)xmalloc(section_size);\n    has_debug_info = DAT_00127978 != '\\0';\n    temp_ptr = section_sizes;\n    for (; section_size != 0; section_size = section_size + -1) {\n      *temp_ptr = 0;\n      temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n    }\n    if (has_debug_info) {\n      gap_size = 0;\n      padding_size = 0;\n      do {\n        section_contents = (ulong *)(section_sizes + gap_size * 8);\n        sections = sections + gap_size;\n        calculation_result = padding_size;\n        do {\n          padding_size = calculation_result;\n          if (stab_strings_count._4_4_ - 1 <= (uint)gap_size) goto LAB_00107cd1;\n          gap_size = (ulong)((uint)gap_size + 1);\n          section_flags = bfd_octets_per_byte(binary,*sections);\n          symbol_size = bfd_octets_per_byte(binary);\n          section_size = *sections;\n          if ((*(uint *)(section_size + 0x24) & 0x102) != 0x102) break;\n          calculation_result = (ulong)symbol_size * *(long *)(sections[1] + 0x38);\n          gap_size = (ulong)section_flags * *(long *)(section_size + 0x38) + *(long *)(section_size + 0x40);\n          if (calculation_result <= gap_size) break;\n          calculation_result = calculation_result - gap_size;\n          result = bfd_set_section_size();\n          if (result == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_error_message_001126c0(0,binary,*sections);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *section_contents = calculation_result;\n          sections = sections + 1;\n          section_contents = section_contents + 1;\n        } while (padding_size < calculation_result);\n      } while( true );\n    }\n    padding_size = 0;\nLAB_00107cd1:\n    gap_size = padding_size;\n    if (DAT_00127969 != '\\0') {\n      section_flags = bfd_octets_per_byte(binary);\n      section_size = sections[stab_strings_count._4_4_ - 1];\n      calculation_result = DAT_00127970 * (ulong)section_flags;\n      gap_size = *(long *)(section_size + 0x40) + (ulong)section_flags * *(long *)(section_size + 0x38);\n      if (gap_size < calculation_result) {\n        result = bfd_set_section_size();\n        if (result == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_error_message_001126c0(0,binary,sections[stab_strings_count._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          gap_size = calculation_result - gap_size;\n          *(ulong *)(section_sizes + (ulong)(stab_strings_count._4_4_ - 1) * 8) = gap_size;\n          if (gap_size <= padding_size) {\n            gap_size = padding_size;\n          }\n        }\n      }\n    }\n  }\n  padding_size = gap_size;\n  sections = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    decompiled_code = (undefined4 *)0x0;\n  }\n  else {\n    stab_strings = &PTR_s__stab_00125c60;\n    decompiled_code = (undefined4 *)xmalloc(0x60);\n    stab_pointer = decompiled_code;\n    for (section_size = 0x18; section_size != 0; section_size = section_size + -1) {\n      *stab_pointer = 0;\n      stab_pointer = stab_pointer + (ulong)flag * -2 + 1;\n    }\n    merged_notes = (char *)0x0;\n    do {\n      temp_ptr = *stab_strings;\n      section_size = bfd_get_section_by_name(bfd_handle,temp_ptr);\n      index = bfd_get_section_by_name();\n      if ((section_size != 0) && (index != 0)) {\n        size = *(long *)(section_size + 0x40);\n        section1_data = (void *)xmalloc(size);\n        result = bfd_get_section_contents(bfd_handle,section_size,section1_data,0,size);\n        if (result == '\\0') {\n          result = bfd_get_error();\n          bfd_errmsg(result);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*bfd_handle);\n          free(merged_notes);\n          free(section1_data);\n        }\n        else {\n          gap_size = *(ulong *)(index + 0x40);\n          section2_data = (void *)xmalloc(gap_size + 1);\n          param_41 = bfd_get_section_contents(bfd_handle,index,section2_data,0);\n          if (param_41 == '\\0') {\n            result = bfd_get_error();\n            bfd_errmsg(result);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*bfd_handle);\n            free(merged_notes);\n          }\n          else {\n            *(undefined *)((long)section2_data + gap_size) = 0;\n            if ((merged_notes != (char *)0x0) ||\n               (merged_notes = (char *)initialize_memory_00112894(bfd_handle,1,sections), merged_notes != (char *)0x0)) {\n              current_section_data = 0;\n              section_data = 0;\n              for (content_pointer = section1_data; content_pointer <= (void *)((long)section1_data + size + -0xc);\n                  content_pointer = (void *)((long)content_pointer + 0xc)) {\n                calculation_result = (**(code **)(bfd_data + 0x40))(content_pointer);\n                byte_var = *(byte *)((long)content_pointer + 4);\n                result = (**(code **)(bfd_data + 0x58))((long)content_pointer + 6);\n                section_size = (**(code **)(bfd_data + 0x40))((long)content_pointer + 8);\n                if (byte_var == 0) {\n                  section_data = current_section_data;\n                  current_section_data = current_section_data + section_size;\n                }\n                else {\n                  gap_size = (calculation_result & 0xffffffff) + section_data;\n                  if (gap_size < gap_size) {\n                    temp_ptr = (char *)((long)section2_data + gap_size);\n                    current_section = (char *)0x0;\n                    while( true ) {\n                      string_length = strlen(temp_ptr);\n                      if (((string_length == 0) || (pcVar22 = temp_ptr + (string_length - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)section1_data + size) < (long)content_pointer + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      content_pointer = (void *)((long)content_pointer + 0xc);\n                      error_code = (**(code **)(bfd_data + 0x40))(content_pointer);\n                      calculation_result = (ulong)(uint)(error_code + (int)section_data);\n                      if (gap_size <= calculation_result) break;\n                      temp_ptr = (char *)concat(temp_ptr,(long)section2_data + calculation_result,0);\n                      *pcVar22 = '\\';\n                      free(current_section);\n                      current_section = temp_ptr;\n                    }\n                    error_message = *bfd_handle;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,error_message,temp_ptr,((long)content_pointer - (long)section1_data) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)byte_var,result,section_size,temp_ptr);\n                    result = process_debug_info_0010554f_0011173a(decompiled_code,merged_notes,byte_var);\n                    if (result == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(current_section);\n                      free(merged_notes);\n                      free(section1_data);\n                      free(section2_data);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    error_message = *bfd_handle;\n                    temp_ptr = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,temp_ptr,error_message,temp_ptr,((long)content_pointer - (long)section1_data) / 0xc,\n                            calculation_result & 0xffffffff,(ulong)byte_var,((long)content_pointer - (long)section1_data) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(section1_data);\n              goto LAB_001058eb;\n            }\n          }\n          free(section2_data);\n          free(section1_data);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      stab_strings = stab_strings + 2;\n    } while (stab_strings != (undefined **)&DAT_00125c90);\n    if ((merged_notes != (char *)0x0) && (result = process_debug_data_0010c892(), result == '\\0')) {\nLAB_00105981:\n      free(decompiled_code);\n      goto LAB_00105588;\n    }\n    if (*(int *)(bfd_data + 8) == 1) {\n      section_size = 0;\n      for (current_section = sections; current_section < sections + num_sections; current_section = current_section + 1) {\n        (**(code **)(bfd_data + 0x218))(bfd_handle,*current_section,&stack0x00000140);\n        if (param_d == '-') {\n          if (((section_size == 0) && (section_size = initialize_memory_00112894(bfd_handle,0,sections), section_size == 0)) ||\n             ((merged_debug_sections_names == (char *)0x0 || (*merged_debug_sections_names == '\\0')))) goto LAB_00105981;\n          temp_ptr = (char *)0x0;\n          pcVar22 = merged_debug_sections_names;\n          while (((*pcVar22 != '\\0' && (string_length = strlen(pcVar22), pcVar22[string_length - 1] == '\\')) &&\n                 (current_section + 1 < sections + num_sections))) {\n            __s = (char *)xstrdup(pcVar22);\n            string_length = strlen(__s);\n            __s[string_length - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(current_section[1] + 8),0);\n            free(__s);\n            free(temp_ptr);\n            current_section = current_section + 1;\n            temp_ptr = pcVar22;\n          }\n          update_data_entry_001088ae(section_flags,(int)section_type,section_sizes,pcVar22);\n          param_41 = process_debug_info_0010554f_0011173a(decompiled_code,section_size,section_flags);\n          if (param_41 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((section_size != 0) && (result = process_debug_data_0010c892(), result == '\\0')) goto LAB_00105981;\n    }\n    if (param_41 == '\\0') {\n      if ((*(int *)(bfd_data + 8) == 2) && (num_sections != 0)) {\n        section_sizes = (long *)0x0;\n        merged_notes = sections;\n        num_merged_notes = 0;\n        merged_notes_size = num_sections;\n        long_var2 = 0;\n        aux_data = (undefined8 *)&stack0x00000148;\n        for (section_size = 0x22; section_size != 0; section_size = section_size + -1) {\n          *(undefined4 *)aux_data = 0;\n          aux_data = (undefined8 *)((long)aux_data + (ulong)flag * -8 + 4);\n        }\n        result = '\\0';\n        _bfd_flags = (int *)0x0;\n        section_flags = 0;\n        merged_notes = (char *)0x0;\n        current_section = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)num_sections <= num_merged_notes) goto LAB_00105590;\n            section_size = sections[num_merged_notes];\n            cVar8 = bfd_coff_get_syment(bfd_handle,section_size,&stack0x000000e0);\n            index = long_var2;\n            if (cVar8 == '\\0') {\n              result = bfd_get_error();\n              bfd_errmsg(result);\n              temp_ptr = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            temp_ptr = *(char **)(section_size + 8);\n            aux_data = (undefined8 *)0x0;\n            num_merged_notes = num_merged_notes + 1;\n            long_var2 = (ulong)stripping_level + 1 + long_var2;\n            if (stripping_level != 0) {\n              aux_data = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(bfd_handle,section_size,0);\n              if (cVar8 == '\\0') {\n                result = bfd_get_error();\n                bfd_errmsg(result);\n                temp_ptr = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (current_section != (char *)index) break;\n            if (padding_byte != 0x67) {\n              cVar8 = initialize_debug_info_0010bbd3(decompiled_code);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            current_section = (char *)param_g;\n            cVar8 = initialize_debug_info_0010bbd3(decompiled_code);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          section_type = in_stack_000000f8._6_2_;\n          if ((char)padding_byte < '\\0') {\n            if (padding_byte == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            size = parse_coff_type_0010dac0(bfd_handle,&stack0x000000c0,&stack0x00000140);\n            if (size == 0) break;\n            cVar8 = process_parameter_00112a33(&stack0x00000140,section_size,index);\n          }\n          else {\n            if (padding_byte < 100) {\n              switch(padding_byte) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(bfd_handle[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(bfd_handle[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _bfd_flags = (int *)(**(code **)(bfd_data + 0x238))(bfd_handle);\n                section_flags = (uint)section_type;\n                merged_notes = temp_ptr;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(padding_byte) {\n            case 100:\n              error_code = strcmp(temp_ptr,\".bb\");\n              if (error_code == 0) {\n                cVar8 = start_debug_block_0010be88(decompiled_code);\n              }\n              else {\n                error_code = strcmp(temp_ptr,\".eb\");\n                if (error_code != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block_0010bf20(decompiled_code);\n              }\n              break;\n            case 0x65:\n              error_code = strcmp(temp_ptr,\".bf\");\n              if (error_code == 0) {\n                if (merged_notes != (char *)0x0) {\n                  symbol_size = (int)section_flags >> ((byte)*(undefined4 *)(bfd_handle[0x22] + 0x44) & 0x1f);\n                  index = parse_coff_type_0010dac0(bfd_handle,&stack0x000000c0,&stack0x00000140,index,\n                                        symbol_size ^ (section_flags ^ symbol_size) &\n                                                 *(uint *)(bfd_handle[0x22] + 0x38),aux_data,0,\n                                        decompiled_code);\n                  if ((index == 0) || (result = debug_record_function_0010bc80(decompiled_code), result == '\\0'))\n                  goto LAB_00105981;\n                  if (_bfd_flags != (int *)0x0) {\n                    error_code = 0;\n                    if (stripping_level != 0) {\n                      error_code = stab_strings_size - 1;\n                    }\n                    section_size = *(long *)(*(long *)(section_size + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _bfd_flags[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = record_debug_line_0010bf86(decompiled_code,error_code + iVar27,\n                                           *(long *)(_bfd_flags + 6) + section_size);\n                      _bfd_flags = _bfd_flags + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  section_flags = 0;\n                  _bfd_flags = (int *)0x0;\n                  merged_notes = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                temp_ptr = \"%ld: .bf without preceding function\";\n              }\n              else {\n                error_code = strcmp(temp_ptr,\".ef\");\n                if (error_code != 0) goto switchD_00106e1a_caseD_68;\n                if (result != '\\0') {\n                  result = debug_end_function_0010be1a(decompiled_code);\n                  if (result == '\\0') goto LAB_00105981;\n                  result = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                temp_ptr = \"%ld: unexpected .ef\\n\";\n              }\n              error_message = dcgettext(0,temp_ptr,5);\n              print_error_message_00119ed0(error_message);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        temp_ptr = \"%s: no recognized debugging information\";\nLAB_00105968:\n        error_message = dcgettext(0,temp_ptr,5);\n        print_error_message_00119ed0(error_message);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (num_sections != 0) {\n        sections = DAT_001278b0 + num_sections;\n        current_section = DAT_001278b0;\n        do {\n          section_flags = *(uint *)(*current_section + 0x18);\n          if ((section_flags & 0x1000000) != 0) {\n            *(uint *)(*current_section + 0x18) = section_flags & 0xfeffffff;\n          }\n          current_section = current_section + 1;\n        } while (sections != current_section);\n      }\n    }\n    else {\n      for (section_size = *(long *)(binary + 0x90); section_size != 0; section_size = *(long *)(section_size + 8)) {\n        if (*(long *)(section_size + 0xe8) != 0) {\n          symbol_flags = (uint *)(*(long *)(section_size + 0xe8) + 0x18);\n          *symbol_flags = *symbol_flags | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      section_size = xmalloc();\n      sections = DAT_001278b0;\n      bfd_flags = *(uint *)((long)bfd_handle + 0x44) & 0x42;\n      DAT_001278a8 = section_size;\n      if (num_sections == 0) {\n        gap_size = 0;\n      }\n      else {\n        gap_size = 0;\n        record_index = 0;\n        do {\n          error_code = DAT_001279a0;\n          current_section = (long *)sections[record_index];\n          section_function = (code *)current_section[4];\n          section_flags = *(uint *)(current_section + 3);\n          cur_symbol = (long *)current_section[1];\n          section_data = cur_symbol;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            aux_data = DAT_001279a8;\n            while ((iVar27 < error_code && (temp_ptr = (char *)aux_data[5], temp_ptr != (char *)0x0))) {\n              if (temp_ptr != \"\") {\n                comparison_result = strcmp(temp_ptr,(char *)cur_symbol);\n                if (comparison_result == 0) {\n                  free(temp_ptr);\n                  calculation_result = gap_size + 1;\n                  aux_data[5] = \"\";\n                  error_message = extract_section_info_0011a2e0(aux_data);\n                  error_message = DAT_001278d0;\n                  *(undefined8 *)(section_size + gap_size * 8) = error_message;\n                  index = htab_elements(error_message);\n                  if ((index != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                aux_data = (undefined8 *)*aux_data;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          index = htab_elements(DAT_001278d0);\n          calculation_result = gap_size;\n          if ((index != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (cur_symbol != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)cur_symbol == '_') && (*(char *)((long)cur_symbol + 1) == '_')) &&\n                 (error_code = strcmp((char *)((ulong)(*(char *)((long)cur_symbol + 2) == '_') +\n                                          (long)cur_symbol),\"__gnu_lto_slim\"), error_code == 0)) {\n                error_message = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(error_message);\n              }\n            }\n            match_failed = 0;\n            section_sizes = cur_symbol;\n            index = htab_find(DAT_001278d0);\n            if (((index == 0) || (section_data = *(long **)(index + 8), cur_symbol == section_data)) &&\n               (section_data = cur_symbol, debug_sections_names = DAT_001278d8, (section_flags & 0x100) != 0)) {\n              for (; debug_sections_names != (char **)0x0; debug_sections_names = (char **)debug_sections_names[3]) {\n                error_code = strcmp(*debug_sections_names,(char *)cur_symbol);\n                if (error_code == 0) {\n                  section_data = (long *)debug_sections_names[1];\n                  break;\n                }\n              }\n            }\n            current_section[1] = (long)section_data;\n            result = *(char *)section_data;\n            if (result != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            temp_ptr = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0')) {\n              index = bfd_data;\n              result = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          result = *(char *)cur_symbol;\n          if (result == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          temp_ptr = DAT_00127908;\n          index = bfd_data;\n          if (*(char *)(index + 0x1c) == result) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((section_flags & 0x82) == 0 && (section_function != bfd_map_over_sections)) &&\n                  ((*(byte *)(current_section[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              section_data = (long *)((long)section_data + 1);\n              current_section[1] = (long)section_data;\n              goto joined_r0x00106565;\n            }\n            result = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (result == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              section_data = (long *)((long)section_data + 1);\n              current_section[1] = (long)section_data;\n              string_length = strlen((char *)section_data);\n              index = string_length + 2;\nLAB_001066bc:\n              string_length = strlen(temp_ptr);\n              cur_symbol = (long *)xmalloc(string_length + index);\n              goto LAB_001066d0;\n            }\n            *(char *)section_data = result;\n            current_section[1] = (long)section_data;\n            gap_size = calculation_result;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              gap_size = calculation_result;\n              if (temp_ptr == (char *)0x0) goto LAB_00105b32;\n              string_length = strlen((char *)section_data);\n              str_len_2 = strlen(temp_ptr);\n              destination = (long *)xmalloc(str_len_2 + string_length + 1);\n              cur_symbol = destination;\n            }\n            else {\nLAB_0010668d:\n              temp_ptr = DAT_00127908;\n              if ((*(char *)(index + 0x1c) != '\\0') && (result != *(char *)(index + 0x1c)))\n              goto joined_r0x00106565;\n              string_length = strlen((char *)section_data);\n              index = string_length + 2;\n              if (temp_ptr != (char *)0x0) goto LAB_001066bc;\n              cur_symbol = (long *)xmalloc(index);\nLAB_001066d0:\n              destination = (long *)((long)cur_symbol + 1);\n              *(char *)cur_symbol = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            temp_ptr = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)destination,DAT_00127908);\n              string_length = strlen(temp_ptr);\n              destination = (long *)((long)destination + string_length);\n            }\n            strcpy((char *)destination,(char *)section_data);\n            current_section[1] = (long)cur_symbol;\n            section_data = cur_symbol;\n            gap_size = calculation_result;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((section_flags & 0x20) == 0) &&\n             (((section_flags & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(current_section[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((bfd_flags == 0) &&\n                (((section_flags & 0x82) != 0 || ((*(byte *)(current_section[4] + 0x25) & 0x10) != 0)))) ||\n               (error_code = bfd_decode_symclass(current_section), error_code == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                index = htab_find();\n                if (index == 0) goto LAB_00105c07;\n              }\n              else {\n                match_failed = match_failed & 0xffffffffffffff00;\n                section_sizes = section_data;\n                htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n                if (param_d == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((section_flags & 0x82) == 0) && (section_function != bfd_map_over_sections)) &&\n                    ((*(byte *)(current_section[4] + 0x25) & 0x10) == 0)) {\n              if ((section_flags & 4) == 0) {\n                if (((*(int *)(bfd_data + 8) != 2) ||\n                    (index = *(long *)(current_section[4] + 0xd0), index == 0)) ||\n                   (*(long *)(index + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    result = bfd_is_local_label(bfd_handle);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              result = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (result == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            index = htab_find();\n            if (index != 0) {\nLAB_0010687f:\n              error_message = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(error_message);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            match_failed = match_failed & 0xffffffffffffff00;\n            section_sizes = section_data;\n            htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n            if (param_d != '\\0') goto LAB_0010687f;\n          }\n          if ((section_flags & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              match_failed = match_failed & 0xffffffffffffff00;\n              section_sizes = section_data;\n              htab_traverse(DAT_001279f0,match_pattern_0011a170,&stack0x00000140);\n              if (param_d != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            index = htab_find();\n            if (index == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((section_flags & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              index = htab_find();\n              if (index != 0) goto LAB_00105c2c;\n            }\n            else {\n              match_failed = match_failed & 0xffffffffffffff00;\n              section_sizes = section_data;\n              htab_traverse(DAT_00127a08,match_pattern_0011a170,&stack0x00000140);\n              if (param_d != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            result = process_binary_section_001159d0(current_section[4]);\n            if (result == '\\0') {\n              if (((section_flags & 0x800002) == 0) && (section_function != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((section_flags & 0x82) != 0) {\n                  result = check_pattern_00115d70(section_data);\n                  if ((result == '\\0') &&\n                     ((index = htab_elements(DAT_001279d8), index == 0 ||\n                      (result = check_pattern_00115d70(section_data), result != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (symbol_size = *(uint *)(current_section + 3), (symbol_size & 0x200000) != 0)) ||\n                         (index = *current_section, index == 0)) ||\n                        ((*(int *)(*(long *)(index + 8) + 8) != 5 ||\n                         (*(long *)(index + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)current_section + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    symbol_size = *(uint *)(current_section + 3);\n                  }\n                  *(uint *)(current_section + 3) = symbol_size & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((section_flags & 1) != 0) && (result = check_pattern_00115d70(section_data), result != '\\0')) {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (result = check_pattern_00115d70(section_data), result != '\\0')) {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xff7ffffd | 0x80;\n                }\n                if (section_function != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(section_size + gap_size * 8) = current_section;\n              gap_size = gap_size + 1;\n            }\n          }\n          record_index = record_index + 1;\n        } while (num_sections != record_index);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        aux_data = DAT_001279a8;\n        error_code = DAT_001279a0;\n        for (index = 0; index < error_code; index = index + 1) {\n          temp_ptr = (char *)aux_data[5];\n          if (temp_ptr == (char *)0x0) {\n            size = gap_size * 8;\n            gap_size = gap_size + 1;\n            error_message = extract_section_info_0011a2e0(aux_data,binary);\n            *(undefined8 *)(section_size + size) = error_message;\n            error_code = DAT_001279a0;\n          }\n          else if (temp_ptr != \"\") {\n            error_message = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(error_message,temp_ptr);\n          }\n          aux_data = (undefined8 *)*aux_data;\n        }\n      }\n      has_debug_info = DAT_00127980 == '\\0';\n      *(undefined8 *)(section_size + gap_size * 8) = 0;\n      if ((has_debug_info) || (decompiled_code == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        num_sections = gap_size & 0xffffffff;\n        goto LAB_00105710;\n      }\n      error_code = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((error_code == 5) || (error_code == 2)) {\n        debug_link_contents = (void *)0x0;\n        result = analyze_input_0011378f(binary,decompiled_code,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (result != '\\0') {\n          section_size = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          index = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((section_size == 0) || (index == 0)) ||\n              (result = bfd_set_section_size(section_size,stab_section_size), result == '\\0')) ||\n             (result = bfd_set_section_size(index,section_sizes), result == '\\0')) {\n            temp_ptr = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(section_size + 0x7c) = 2;\n            *(undefined4 *)(index + 0x7c) = 0;\n            result = bfd_set_section_contents(binary,section_size,merged_notes,0,stab_section_size);\n            if ((result != '\\0') &&\n               (result = bfd_set_section_contents(binary,index,debug_link_contents,0,section_sizes), result != '\\0')\n               ) {\n              free(decompiled_code);\n              goto LAB_00105cfa;\n            }\n            temp_ptr = \"can\\'t set debugging section contents\";\n          }\n          error_message = dcgettext(0,temp_ptr,5);\n          print_error_message_001126c0(0,binary,0,error_message);\n          free(debug_link_contents);\n          free(decompiled_code);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        error_message = **(undefined8 **)(binary + 8);\n        error_message = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,binary,0,error_message,error_message);\n      }\n      free(decompiled_code);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(bfd_handle,process_relocation_00116030,DAT_001278b0);\n      error_code = bfd_get_error();\n      if (error_code == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    section_size = htab_elements(DAT_001279f8);\n    if (((section_size != 0) ||\n        ((((section_size = htab_elements(DAT_00127a08), section_size != 0 ||\n           (section_size = htab_elements(DAT_001279e8), section_size != 0)) ||\n          (section_size = htab_elements(DAT_001279e0), section_size != 0)) ||\n         ((section_size = htab_elements(DAT_001279d8), section_size != 0 ||\n          (section_size = htab_elements(DAT_001279d0), section_size != 0)))))) ||\n       ((((section_size = htab_elements(DAT_001278d0), section_size != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,DAT_001278a8,num_sections & 0xffffffff);\n    bfd_map_over_sections(bfd_handle,process_binary_section_00115dc0,binary);\n    bfd_map_over_sections(bfd_handle,reverse_section_00116110,binary);\n    for (aux_data = DAT_001279c0; temp_ptr = DAT_001279b8, aux_data != (undefined8 *)0x0;\n        aux_data = (undefined8 *)*aux_data) {\n      result = bfd_set_section_contents(binary,aux_data[5],aux_data[4],0,aux_data[3]);\n      if (result == '\\0') {\n        print_error_message_001126c0(0,binary,aux_data[5],0);\n        return 0;\n      }\n    }\n    for (; temp_ptr != (undefined8 *)0x0; temp_ptr = (undefined8 *)*temp_ptr) {\n      error_message = *(undefined8 *)(temp_ptr[5] + 0x60);\n      result = bfd_set_section_contents(binary,error_message,temp_ptr[4],0,temp_ptr[3]);\n      if (result == '\\0') {\n        print_error_message_001126c0(0,binary,error_message,0);\n        return 0;\n      }\n    }\n    if (linked_list == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        error_message = *bfd_handle;\n        error_message = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(error_message,error_message);\n      }\n    }\n    else {\n      sections = (long *)0x0;\n      for (aux_data = *(undefined8 **)(binary + 0x90); aux_data != (undefined8 *)0x0;\n          aux_data = (undefined8 *)aux_data[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(aux_data[0x1a] + 4) == 7 &&\n            (result = string_comparison_00113fb0(*aux_data,\".gnu.build.attributes\"), result != '\\0')))) {\n          if (sections == (long *)0x0) {\n            sections = linked_list;\n          }\n          current_section = linked_list;\n          if (*(undefined8 **)(*sections + 0x60) == aux_data) {\nLAB_0010625f:\n            temp_ptr = \"error: failed to merge notes\";\n            if (sections[1] != 0) {\n              result = bfd_set_section_contents(binary,aux_data,sections[1],0,sections[2]);\n              if (result == '\\0') {\n                error_message = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,binary,aux_data,error_message);\n                return 0;\n              }\n              sections = (long *)sections[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              sections = current_section;\n              if (*(undefined8 **)(*current_section + 0x60) == aux_data) goto LAB_0010625f;\n              sections = (long *)current_section[3];\n              current_section = sections;\n            } while (sections != (long *)0x0);\n            temp_ptr = \"error: failed to locate merged notes\";\n          }\n          error_message = dcgettext(0,temp_ptr,5);\n          print_error_message_001126c0(0,binary,aux_data,error_message);\n        }\nLAB_001061be:\n      }\n      do {\n        sections = (long *)linked_list[3];\n        free((void *)linked_list[1]);\n        free(linked_list);\n        linked_list = sections;\n      } while (sections != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (result = bfd_fill_in_gnu_debuglink_section(binary,debug_link_section), section_size = DAT_00127a10,\n       result != '\\0')) {\n      if (section_sizes != (undefined *)0x0) {\n        if (0x2000 < padding_size) {\n          padding_size = 0x2000;\n        }\n        section_size = 0;\n        new_section_content = (undefined *)xmalloc(padding_size);\n        testing_mode = DAT_00127979;\n        temp_ptr = new_section_content;\n        for (padding_size = padding_size & 0xffffffff; padding_size != 0; padding_size = padding_size - 1) {\n          *temp_ptr = testing_mode;\n          temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n        }\n        for (; (uint)section_size < stab_strings_count._4_4_; section_size = section_size + 1) {\n          gap_size = *(ulong *)(section_sizes + section_size * 8);\n          if (gap_size != 0) {\n            index = *(long *)(*sections + 0x40) - gap_size;\n            do {\n              calculation_result = 0x2000;\n              if (gap_size < 0x2001) {\n                calculation_result = gap_size;\n              }\n              result = bfd_set_section_contents(binary,*sections,new_section_content,index,calculation_result);\n              if (result == '\\0') {\n                print_error_message_001126c0(0,binary,*sections,0);\n                free(new_section_content);\n                return 0;\n              }\n              index = index + calculation_result;\n              gap_size = gap_size - calculation_result;\n            } while (gap_size != 0);\n          }\n          sections = sections + 1;\n        }\n        free(new_section_content);\n        free(section_sizes);\n      }\n      result = (**(code **)(*(long *)(binary + 8) + 0x140))(bfd_handle);\n      if ((char)result != '\\0') {\n        if (DAT_00127910 == 0) {\n          return result;\n        }\n        result = bfd_alt_mach_code(binary,DAT_00127910 & 0xffffffff);\n        gap_size = DAT_00127910;\n        if (result == '\\0') {\n          error_message = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(error_message,gap_size);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            error_message = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(error_message);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)DAT_00127910;\n            return result;\n          }\n          error_message = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(error_message);\n          return result;\n        }\n        return result;\n      }\n      error_message = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,binary,0,error_message);\n    }\n    else {\n      error_message = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,binary,0,error_message,section_size);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_info_0010554f",
            "entrypoint": "0x0010554f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010554f": "process_debug_info_0010554f",
                "__dest": "destination",
                "__ptr": "new_section_content",
                "__ptr_00": "section1_data",
                "__ptr_01": "section2_data",
                "__ptr_02": "decompiled_code",
                "_param_41": "match_failed",
                "_param_9": "record_index",
                "bVar2": "byte_var",
                "bVar3": "byte_var",
                "bVar38": "has_debug_info",
                "bVar39": "flag",
                "cVar7": "result",
                "iVar10": "error_code",
                "iVar11": "comparison_result",
                "in_R10": "linked_list",
                "in_stack_00000068": "stab_strings_count",
                "in_stack_000000d8": "long_var2",
                "lVar14": "section_size",
                "lVar23": "size",
                "lVar37": "index",
                "param_1": "input_binary",
                "param_12": "padding_size",
                "param_13": "merged_notes",
                "param_14": "section_sizes",
                "param_15": "bfd_flags",
                "param_17": "sections",
                "param_2": "output_binary",
                "param_21": "debug_link_section",
                "param_23": "section_data",
                "param_24": "current_section",
                "param_26": "current_section_data",
                "param_3": "debug_info_file",
                "param_30": "merged_notes",
                "param_31": "merged_notes_size",
                "param_32": "num_merged_notes",
                "param_33": "debug_link_contents",
                "param_34": "param_g",
                "param_36": "padding_byte",
                "param_37": "stripping_level",
                "param_38": "stab_section_size",
                "param_39": "stab_strings_size",
                "param_4": "debug_link",
                "param_40": "section_sizes",
                "param_41": "param_d",
                "param_42": "merged_debug_sections_names",
                "param_43": "section_flags",
                "param_44": "section_type",
                "param_7": "binary",
                "param_8": "num_sections",
                "param_9": "param_41",
                "pcVar3": "section_function",
                "pcVar31": "temp_ptr",
                "plVar1": "pointer2",
                "plVar15": "current_section",
                "plVar20": "cur_symbol",
                "plVar25": "section_data",
                "plVar28": "sections",
                "ppcVar34": "debug_sections_names",
                "ppuVar36": "stab_strings",
                "puVar1": "symbol_flags",
                "puVar26": "aux_data",
                "puVar30": "section_contents",
                "puVar32": "stab_pointer",
                "puVar33": "temp_ptr",
                "puVar36": "stab_section_names",
                "puVar4": "temp_ptr",
                "pvVar35": "content_pointer",
                "sVar18": "string_length",
                "sVar19": "str_len_2",
                "uVar12": "section_flags",
                "uVar13": "symbol_size",
                "uVar16": "error_message",
                "uVar17": "error_message",
                "uVar2": "ushort_var",
                "uVar21": "calculation_result",
                "uVar24": "gap_size",
                "uVar29": "gap_size",
                "uVar5": "testing_mode",
                "uVar6": "section_type",
                "uVar9": "result",
                "unaff_R14": "bfd_handle",
                "unaff_R14[1]": "bfd_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105828": {
            "additional_data": {
                "FUN_00105828": {
                    "1": "check_architecture_compatibility",
                    "2": "recognize_architecture",
                    "3": "check_file_architecture",
                    "4": "recognize_input_format"
                },
                "iVar1": {
                    "1": "architecture_type",
                    "17": "architecture",
                    "2": "file_architecture",
                    "4": "arch_type"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error_message"
                },
                "uVar2": {
                    "1": "architecture",
                    "2": "arch_format",
                    "3": "machine",
                    "6": "arch",
                    "7": "format"
                },
                "uVar3": {
                    "1": "formatted_arch_mach",
                    "2": "architecture_string",
                    "3": "formatted_architecture",
                    "8": "formatted_string",
                    "9": "formatted_arch"
                },
                "uVar4": {
                    "1": "error_msg",
                    "2": "error_string",
                    "27": "error_message"
                }
            },
            "called": [
                "bfd_get_arch",
                "bfd_printable_arch_mach",
                "FUN_00119ed0",
                "bfd_get_mach",
                "FUN_001125fa",
                "dcgettext"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nundefined8 recognize_input_format_00105828(void)\n\n{\n  int architecture;\n  undefined4 format;\n  undefined8 formatted_arch;\n  undefined8 error_message;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    formatted_arch = get_formatted_string_001125fa();\n    error_message = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message(error_message,formatted_arch);\n  }\n  else {\n    formatted_arch = bfd_get_mach();\n    format = bfd_get_arch();\n    formatted_arch = bfd_printable_arch_mach(format,formatted_arch);\n    error_message = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message(error_message,formatted_arch);\n  }\n  return 0;\n}\n\n",
            "current_name": "recognize_input_format_00105828",
            "entrypoint": "0x00105828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105828": "recognize_input_format_00105828",
                "iVar1": "architecture",
                "print_error_message_00119ed0": "print_error_message",
                "uVar2": "format",
                "uVar3": "formatted_arch",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107880": {
            "called": [
                "bfd_get_arch",
                "__errno_location",
                "xmalloc",
                "fopen",
                "strerror",
                "bfd_create_gnu_debuglink_section",
                "FUN_00113fb0",
                "FUN_00114190",
                "FUN_0010551d",
                "bfd_get_section_by_name",
                "free",
                "FUN_001126c0",
                "FUN_0010554f",
                "bfd_make_section_with_flags",
                "FUN_00115530",
                "bfd_map_over_sections",
                "FUN_00115f30",
                "bfd_malloc_and_get_section",
                "FUN_00119ed0",
                "bfd_get_full_section_contents",
                "FUN_00105828",
                "FUN_001163d0",
                "fclose",
                "bfd_set_format",
                "bfd_set_section_size",
                "dcgettext",
                "fwrite"
            ],
            "calling": [
                "FUN_001152b6"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_input_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = process_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_info_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_memory_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = process_debug_info_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_parameter_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_debug_block_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_info_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_binary_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_info_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = analyze_input_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_section_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)process_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107880",
            "entrypoint": "0x00107880",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00107976": {
            "called": [
                "bfd_get_arch",
                "bfd_set_start_address",
                "bfd_set_file_flags",
                "FUN_001152b6",
                "printf",
                "bfd_get_mach",
                "FUN_001125fa",
                "dcgettext"
            ],
            "calling": [
                "FUN_00114e50"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = get_formatted_string_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = get_formatted_string_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = recognize_input_format_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = find_matching_entry_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_matching_entry_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_matching_entry_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = process_debug_info_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = initialize_memory_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar28 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = process_parameter_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = start_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = extract_section_info_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_error_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_binary_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_pattern_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = check_pattern_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_pattern_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = extract_section_info_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = analyze_input_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_section_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)process_build_attribute_notes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107976",
            "entrypoint": "0x00107976",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00108072": {
            "additional_data": {
                "DAT_00127a20": {
                    "1": "error_flag"
                },
                "FUNC_00115d00": {
                    "1": "function_00115d00"
                },
                "FUN_00108072": {
                    "1": "set_size_alignment",
                    "2": "set_and_copy_private_data",
                    "6": "set_alignment_and_size",
                    "8": "set_size_and_alignment"
                },
                "_DAT_00127990": {
                    "1": "data_00127990"
                },
                "bVar1": {
                    "1": "byte_flag",
                    "10": "byte_var",
                    "3": "byte_val",
                    "4": "byte_variable",
                    "5": "byte_value"
                },
                "cVar3": {
                    "1": "char_flag",
                    "2": "char_value",
                    "3": "char_val",
                    "9": "char_var"
                },
                "copy_private_data_0010808f": {
                    "3": "copy_private_data"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "find_matching_entry_00114190": {
                    "2": "find_matching_entry"
                },
                "lVar5": {
                    "1": "error_message_1",
                    "14": "error_message",
                    "2": "size_error_message",
                    "6": "error_msg"
                },
                "lVar6": {
                    "1": "entry1",
                    "17": "matching_entry",
                    "4": "matching_entry_1",
                    "5": "matching_entry1"
                },
                "lVar7": {
                    "1": "calculated_value",
                    "2": "entry_value",
                    "3": "offset",
                    "4": "matching_entry_2",
                    "5": "matching_entry2"
                },
                "lVar8": {
                    "1": "func_address",
                    "2": "offset",
                    "8": "entry_offset"
                },
                "print_error_message_001126c0": {
                    "1": "print_error_msg",
                    "2": "print_error_message"
                },
                "set_alignment_00108179": {
                    "2": "set_alignment"
                },
                "set_size_and_alignment": {
                    "1": "set_size_and_alignment"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "undefined_var2",
                    "3": "value"
                },
                "uVar4": {
                    "1": "alignment_flag",
                    "2": "var4",
                    "3": "uint_variable",
                    "4": "alignment_value",
                    "5": "alignment",
                    "6": "uint_var"
                },
                "unaff_R12": {
                    "1": "temp1",
                    "2": "entry_ptr",
                    "4": "register_12"
                },
                "unaff_R14B": {
                    "1": "flag_r14",
                    "2": "r14b",
                    "5": "is_reversed",
                    "9": "flag"
                },
                "unaff_R15": {
                    "1": "memory_info",
                    "3": "result_ptr",
                    "4": "register15",
                    "6": "result"
                },
                "unaff_R15[0x28]": {
                    "1": "flag_byte"
                },
                "unaff_R15[0x30]": {
                    "1": "data_size1"
                },
                "unaff_R15[0x38]": {
                    "1": "data_size2"
                },
                "unaff_RBP": {
                    "1": "previous_rbp",
                    "12": "base_pointer",
                    "2": "stack_base",
                    "3": "rbp"
                },
                "unaff_RBX": {
                    "1": "some_array",
                    "2": "ptr_array",
                    "3": "rbx",
                    "4": "parameters"
                },
                "unaff_RBX[0x1a]": {
                    "1": "array[0x1a]"
                },
                "unaff_RBX[0x1c]": {
                    "1": "array[0x1c]"
                },
                "unaff_RBX[0xb]": {
                    "1": "array[0xb]"
                },
                "unaff_RBX[0xc]": {
                    "1": "array[0xc]"
                },
                "unaff_RBX[5]": {
                    "1": "byte_value"
                },
                "unaff_RBX[6]": {
                    "1": "size1"
                },
                "unaff_RBX[7]": {
                    "1": "size2"
                }
            },
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "dcgettext"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\n\n\nvoid set_size_and_alignment_00108072(void)\n\n{\n  byte byte_var;\n  undefined8 value;\n  char char_var;\n  uint uint_var;\n  long error_message;\n  long matching_entry;\n  long matching_entry2;\n  undefined8 *parameters;\n  long base_pointer;\n  long register12;\n  long entry_offset;\n  char flag;\n  long result;\n  \n  error_message = dcgettext(0,\"failed to set size\",5);\n  entry_offset = size1;\n  matching_entry = find_matching_entry(*parameters,0,0x18);\n  if (matching_entry == 0) {\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    value = *parameters;\n    entry_offset = entry_offset + _DAT_00127990;\n    *(long *)(result + 0x30) = entry_offset;\n    *(long *)(result + 0x38) = entry_offset;\n    entry_offset = size2;\n    matching_entry = find_matching_entry(value,0,0x60);\n    if (matching_entry == 0) goto LAB_00115695;\nLAB_00115860:\n    matching_entry2 = *(long *)(matching_entry + 0x20);\n    if ((*(byte *)(matching_entry + 0x14) & 0x40) != 0) {\n      matching_entry2 = matching_entry2 + entry_offset;\n    }\n    *(long *)(result + 0x38) = matching_entry2;\n    entry_offset = find_matching_entry(*parameters,0,0x200);\n    if (entry_offset != 0) goto LAB_00115889;\nLAB_001156b8:\n    uint_var = *(uint *)((long)parameters + 0x7c);\n    if (uint_var < 0x3f) goto LAB_001156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    array[0xc] = result;\n    array[0xb] = 0;\n    byte_var = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    matching_entry2 = *(long *)(matching_entry + 0x18);\n    if ((*(byte *)(matching_entry + 0x14) & 8) == 0) {\n      matching_entry2 = matching_entry2 + entry_offset;\n    }\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    value = *parameters;\n    *(long *)(result + 0x30) = matching_entry2;\n    *(long *)(result + 0x38) = matching_entry2;\n    entry_offset = size2;\n    matching_entry = find_matching_entry(value,0,0x60);\n    if (matching_entry != 0) goto LAB_00115860;\nLAB_00115695:\n    value = *parameters;\n    *(long *)(result + 0x38) = entry_offset + _DAT_00127990;\n    entry_offset = find_matching_entry(value,0,0x200);\n    if (entry_offset == 0) goto LAB_001156b8;\nLAB_00115889:\n    uint_var = *(uint *)(entry_offset + 0x2c);\n    if (0x3e < uint_var) {\n      set_alignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(result + 0x7c) = uint_var;\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    array[0xc] = result;\n    array[0xb] = 0;\n    byte_var = *(byte *)((long)parameters + 0x27);\n  }\n  if ((byte_var & 2) != 0) {\n    entry_offset = array[0x1a];\n    matching_entry = FUNC_00115d00(entry_offset,array[0x1c]);\n    if ((matching_entry != 0) &&\n       (matching_entry2 = *(long *)(register12 + 8), *(uint *)(matching_entry + 0x18) = *(uint *)(matching_entry + 0x18) | 0x20,\n       *(int *)(matching_entry2 + 8) == 5)) {\n      *(long *)(entry_offset + 0xb0) = matching_entry;\n      char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (char_var == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (char_var == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(result + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_size_and_alignment_00108072",
            "entrypoint": "0x00108072",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108072": "set_size_and_alignment_00108072",
                "bVar1": "byte_var",
                "cVar3": "char_var",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_message",
                "find_matching_entry_00114190": "find_matching_entry",
                "lVar5": "error_message",
                "lVar6": "matching_entry",
                "lVar7": "matching_entry2",
                "lVar8": "entry_offset",
                "print_error_message_001126c0": "print_error_message",
                "set_alignment_00108179": "set_alignment",
                "uVar2": "value",
                "uVar4": "uint_var",
                "unaff_R12": "register12",
                "unaff_R14B": "flag",
                "unaff_R15": "result",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "parameters",
                "unaff_RBX[0x1a]": "array[0x1a]",
                "unaff_RBX[0x1c]": "array[0x1c]",
                "unaff_RBX[0xb]": "array[0xb]",
                "unaff_RBX[0xc]": "array[0xc]",
                "unaff_RBX[6]": "size1",
                "unaff_RBX[7]": "size2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010808f": {
            "additional_data": {
                "DAT_00127a20": {
                    "1": "is_print_error",
                    "2": "is_error"
                },
                "FUN_0010808f": {
                    "31": "copy_private_data"
                },
                "dcgettext": {
                    "1": "get_message",
                    "6": "get_error_message"
                },
                "lVar1": {
                    "1": "error_text",
                    "17": "error_message",
                    "3": "error_string"
                },
                "print_error_message_001126c0": {
                    "14": "print_error_message"
                },
                "unaff_R14B": {
                    "1": "should_copy_data",
                    "2": "is_private_data_copied",
                    "3": "copy_successful",
                    "6": "is_copy_successful",
                    "7": "flag"
                },
                "unaff_R15": {
                    "1": "address",
                    "14": "data_pointer",
                    "4": "data_ptr",
                    "5": "data_address",
                    "7": "base_address"
                }
            },
            "called": [
                "FUN_001126c0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00108179"
            ],
            "code": "\nvoid copy_private_data_0010808f(void)\n\n{\n  long error_message;\n  char flag;\n  long data_pointer;\n  \n  error_message = dcgettext(0,\"failed to copy private data\",5);\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(data_pointer + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "copy_private_data_0010808f",
            "entrypoint": "0x0010808f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "dcgettext": "get_error_message",
                "lVar1": "error_message",
                "print_error_message_001126c0": "print_error_message",
                "unaff_R14B": "flag",
                "unaff_R15": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108179": {
            "additional_data": {
                "(**(code **)(*(long *)(unaff_RBP + 8) + 0x158))()": {
                    "1": "execute_function"
                },
                "*(byte *)(unaff_R15 + 0x28)": {
                    "1": "original_value"
                },
                "*(byte *)(unaff_RBX + 0x27)": {
                    "1": "flag_bits"
                },
                "*(byte *)(unaff_RBX + 0x28)": {
                    "1": "extra_bits"
                },
                "*(int *)(lVar2 + 8)": {
                    "1": "check_value"
                },
                "*(long *)(lVar1 + 0xb0)": {
                    "1": "new_value"
                },
                "*(long *)(unaff_RBX + 0x60)": {
                    "1": "saved_value"
                },
                "*(long *)(unaff_RBX + 0xd0)": {
                    "1": "address1"
                },
                "*(uint *)(lVar5 + 0x18)": {
                    "1": "flags"
                },
                "*(undefined4 *)(unaff_R15 + 0xb4)": {
                    "1": "value_to_set"
                },
                "*(undefined8 *)(unaff_RBX + 0x58)": {
                    "1": "initialized_value"
                },
                "*(undefined8 *)(unaff_RBX + 0xe0)": {
                    "1": "address2"
                },
                "DAT_00127a20": {
                    "3": "error_flag"
                },
                "FUNC_00115d00": {
                    "1": "perform_action",
                    "2": "process_data"
                },
                "FUN_00108179": {
                    "1": "initialize_component",
                    "25": "set_alignment",
                    "3": "set_alignment_and_copy_data"
                },
                "cVar3": {
                    "1": "error_occurred",
                    "10": "result",
                    "2": "is_successful",
                    "3": "is_error"
                },
                "copy_private_data_0010808f": {
                    "5": "copy_private_data"
                },
                "dcgettext": {
                    "1": "retrieve_error_message",
                    "3": "get_error_message"
                },
                "lVar1": {
                    "1": "pointer1",
                    "2": "var1",
                    "3": "result1",
                    "5": "error_message"
                },
                "lVar2": {
                    "1": "func_return",
                    "3": "result2",
                    "5": "var2"
                },
                "lVar4": {
                    "1": "failure_message",
                    "13": "error_message",
                    "6": "error_msg"
                },
                "lVar5": {
                    "1": "function_result",
                    "12": "result",
                    "2": "return_value",
                    "3": "var5"
                },
                "print_error_message_001126c0": {
                    "5": "print_error_message"
                },
                "unaff_R12": {
                    "1": "context_1",
                    "2": "param3",
                    "3": "function_pointer",
                    "4": "context",
                    "7": "r12"
                },
                "unaff_R14B": {
                    "1": "do_copy",
                    "12": "flag",
                    "2": "r14_b",
                    "3": "is_reversed",
                    "4": "r14b"
                },
                "unaff_R15": {
                    "1": "new_object",
                    "2": "source",
                    "3": "new_alignment",
                    "7": "r15"
                },
                "unaff_RBP": {
                    "1": "stack_base",
                    "2": "frame_base",
                    "7": "rbp",
                    "8": "base_pointer"
                },
                "unaff_RBX": {
                    "1": "base_pointer",
                    "2": "param1",
                    "4": "base_address",
                    "7": "rbx"
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_0010808f",
                "dcgettext"
            ],
            "calling": [
                "FUN_00108072"
            ],
            "code": "\nvoid set_alignment_00108179(void)\n\n{\n  long error_message;\n  long var2;\n  char result;\n  long error_message;\n  long result;\n  long rbx;\n  long base_pointer;\n  long r12;\n  char flag;\n  long r15;\n  \n  error_message = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(rbx + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(rbx + 0x28) & 0x30;\n  *(long *)(rbx + 0x60) = r15;\n  *(undefined8 *)(rbx + 0x58) = 0;\n  if ((*(byte *)(rbx + 0x27) & 2) != 0) {\n    error_message = *(long *)(rbx + 0xd0);\n    result = FUNC_00115d00(error_message,*(undefined8 *)(rbx + 0xe0));\n    if ((result != 0) &&\n       (var2 = *(long *)(r12 + 8), *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 0x20,\n       *(int *)(var2 + 8) == 5)) {\n      *(long *)(error_message + 0xb0) = result;\n      result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_alignment_00108179",
            "entrypoint": "0x00108179",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "cVar3": "result",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_error_message",
                "lVar1": "error_message",
                "lVar2": "var2",
                "lVar4": "error_message",
                "lVar5": "result",
                "print_error_message_001126c0": "print_error_message",
                "unaff_R12": "r12",
                "unaff_R14B": "flag",
                "unaff_R15": "r15",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "rbx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001081e9": {
            "additional_data": {
                "FUN_001081e9": {
                    "1": "dealloc_memory",
                    "13": "free_memory",
                    "3": "free_memory_and_return",
                    "5": "deallocate_memory",
                    "8": "release_memory"
                },
                "in_RAX": {
                    "1": "input_param",
                    "2": "input",
                    "4": "return_value"
                },
                "param_7": {
                    "1": "return_address",
                    "15": "return_value",
                    "5": "result"
                },
                "unaff_RBX": {
                    "1": "memory_block_pointer",
                    "10": "memory_block",
                    "2": "memory_block_to_free",
                    "4": "memory_address",
                    "6": "memory_to_free"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\nundefined8 free_memory_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_block;\n  undefined8 return_value;\n  \n  return_value = return_value;\n  free(memory_block);\n  return return_value;\n}\n\n",
            "current_name": "free_memory_001081e9",
            "entrypoint": "0x001081e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "return_value",
                "param_7": "return_value",
                "unaff_RBX": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108200": {
            "additional_data": {
                "FUN_00108200": {
                    "1": "copy_error_handling",
                    "2": "copy_file_and_handle_error",
                    "4": "copy_file",
                    "5": "copy_file_and_set_time"
                },
                "auVar3": {
                    "4": "result"
                },
                "piVar1": {
                    "1": "errno_location"
                },
                "uVar2": {
                    "3": "error_message"
                },
                "unaff_R12B": {
                    "1": "copy_file",
                    "19": "should_set_file_time",
                    "5": "should_set_time"
                },
                "unaff_R13": {
                    "1": "file_attributes",
                    "16": "file_time",
                    "3": "file_permissions",
                    "4": "file_time_mask"
                },
                "unaff_RBP": {
                    "1": "file_to_delete",
                    "2": "file_to_copy",
                    "26": "file_path"
                },
                "unaff_retaddr": {
                    "30": "return_address"
                }
            },
            "called": [
                "FUN_00119ed0",
                "__errno_location",
                "FUN_0011a350",
                "unlink",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nundefined  [16] copy_file_and_set_time_00108200(void)\n\n{\n  int *errno_pointer;\n  undefined8 error_message;\n  char *file_path;\n  char should_set_file_time;\n  ulong file_time;\n  undefined result [16];\n  undefined8 return_address;\n  \n  errno_pointer = __errno_location();\n  strerror(*errno_pointer);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00119ed0(error_message);\n  unlink(file_path);\n  if (should_set_file_time != '\\0') {\n    set_file_time_0011a350();\n  }\n  result._0_8_ = file_time & 0xffffffff;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "copy_file_and_set_time_00108200",
            "entrypoint": "0x00108200",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108200": "copy_file_and_set_time_00108200",
                "auVar3": "result",
                "piVar1": "errno_pointer",
                "uVar2": "error_message",
                "unaff_R12B": "should_set_file_time",
                "unaff_R13": "file_time",
                "unaff_RBP": "file_path",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108237": {
            "additional_data": {
                "FUN_00108237": {
                    "1": "close_file_and_return_failure",
                    "2": "close_and_return_error",
                    "3": "close_file_and_return_error_status",
                    "4": "close_file_and_return_error",
                    "5": "close_and_set_errno"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "iVar1": {
                    "1": "previous_error_status",
                    "2": "errno_value",
                    "3": "previous_error",
                    "4": "saved_errno"
                },
                "piVar2": {
                    "1": "error_location_ptr",
                    "2": "errno_pointer",
                    "3": "error_pointer"
                },
                "unaff_R12D": {
                    "1": "fd",
                    "29": "file_descriptor"
                }
            },
            "called": [
                "__errno_location",
                "close"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\nundefined8 close_and_set_errno_00108237(void)\n\n{\n  int saved_errno;\n  int *error_pointer;\n  int file_descriptor;\n  \n  error_pointer = __errno_location();\n  saved_errno = *error_pointer;\n  close(file_descriptor);\n  *error_pointer = saved_errno;\n  return 0xffffffff;\n}\n\n",
            "current_name": "close_and_set_errno_00108237",
            "entrypoint": "0x00108237",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108237": "close_and_set_errno_00108237",
                "__errno_location": "get_errno_location",
                "iVar1": "saved_errno",
                "piVar2": "error_pointer",
                "unaff_R12D": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010827b": {
            "additional_data": {
                "FUN_0010827b": {
                    "1": "print_and_exit_with_error",
                    "2": "print_section_error_and_exit",
                    "24": "print_error_and_exit",
                    "3": "print_error_message"
                },
                "uVar1": {
                    "1": "param1",
                    "17": "section_value",
                    "4": "section"
                },
                "uVar2": {
                    "1": "error_msg",
                    "23": "error_message"
                },
                "unaff_RBX": {
                    "1": "option",
                    "13": "section_ptr",
                    "2": "section_address",
                    "4": "section_pointer"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nvoid print_error_and_exit_0010827b(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_ptr;\n  \n  section_value = *section_ptr;\n  error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  print_error_and_exit_0010827b_00119dd0(error_message,section_value);\n}\n\n",
            "current_name": "print_error_and_exit_0010827b",
            "entrypoint": "0x0010827b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010827b": "print_error_and_exit_0010827b",
                "uVar1": "section_value",
                "uVar2": "error_message",
                "unaff_RBX": "section_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010829e": {
            "additional_data": {
                "FUN_0010829e": {
                    "1": "check_condition_and_select_action",
                    "2": "process_data",
                    "4": "process_ebp_value",
                    "5": "handle_ebp_value",
                    "9": "process_input"
                },
                "calculate_flipped_value_001082b3": {
                    "1": "flip_input",
                    "19": "calculate_flipped_value",
                    "4": "flip_value"
                },
                "check_string_length_00113ede": {
                    "1": "validate_string_length",
                    "19": "get_string_length",
                    "2": "check_string_length"
                },
                "uVar1": {
                    "1": "result"
                },
                "unaff_EBP": {
                    "1": "condition",
                    "10": "ebp_value",
                    "14": "input_value",
                    "5": "parameter"
                }
            },
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nundefined8 process_input_0010829e(void)\n\n{\n  undefined8 result;\n  int input_value;\n  \n  if (input_value == 5) {\n    result = get_string_length();\n    return result;\n  }\n  if ((input_value != 4) && (input_value == 6)) {\n    result = calculate_flipped_value();\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_input_0010829e",
            "entrypoint": "0x0010829e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010829e": "process_input_0010829e",
                "calculate_flipped_value_001082b3": "calculate_flipped_value",
                "check_string_length_00113ede": "get_string_length",
                "uVar1": "result",
                "unaff_EBP": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082b3": {
            "additional_data": {
                "1": {
                    "1": "bitwise_inverse"
                },
                "FUN_001082b3": {
                    "1": "invert_and_exclude_one",
                    "2": "calculate_inverted_length",
                    "3": "invert_and_check_string_length",
                    "4": "calculate_flipped_value"
                },
                "check_string_length_00113ede": {
                    "22": "get_string_length"
                },
                "uVar1": {
                    "1": "processed_string_length",
                    "2": "inverted_length",
                    "26": "string_length"
                }
            },
            "called": [
                "FUN_00113ede"
            ],
            "calling": [
                "FUN_0010829e"
            ],
            "code": "\nuint calculate_flipped_value_001082b3(void)\n\n{\n  uint string_length;\n  \n  string_length = get_string_length();\n  return string_length ^ 1;\n}\n\n",
            "current_name": "calculate_flipped_value_001082b3",
            "entrypoint": "0x001082b3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082b3": "calculate_flipped_value_001082b3",
                "check_string_length_00113ede": "get_string_length",
                "uVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082c3": {
            "additional_data": {
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_001082c3": {
                    "1": "calculate_result",
                    "11": "get_default_value",
                    "2": "get_zero",
                    "4": "initialize_application",
                    "6": "initialize"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "undefined8": {
                    "1": "uint64_t",
                    "7": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00115d00"
            ],
            "code": "\nvoid get_default_value_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "current_name": "get_default_value_001082c3",
            "entrypoint": "0x001082c3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082c3": "get_default_value_001082c3",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082df": {
            "additional_data": {
                "*(long **)unaff_R13[uVar6]": {
                    "1": "current_element_ptr"
                },
                "*(uint *)(unaff_RBX + 0x78)": {
                    "1": "input_data_size"
                },
                "DAT_00127a2c": {
                    "1": "pattern_type"
                },
                "FUN_001082df": {
                    "1": "find_and_call_function",
                    "15": "process_data",
                    "2": "extract_and_check_patterns",
                    "3": "find_valid_pointers"
                },
                "cVar3": {
                    "1": "is_valid_pattern",
                    "2": "pattern_check",
                    "3": "result",
                    "4": "is_pattern_valid",
                    "9": "pattern_result"
                },
                "check_pattern_00115d70": {
                    "3": "check_pattern"
                },
                "lVar2": {
                    "1": "data_element",
                    "2": "pattern_value",
                    "3": "current_element",
                    "4": "pointer_value",
                    "5": "current_value",
                    "8": "value"
                },
                "puVar4": {
                    "1": "new_array_ptr",
                    "2": "valid_pointers",
                    "4": "result_ptr"
                },
                "puVar5": {
                    "1": "new_data_array_end",
                    "2": "next_result_ptr"
                },
                "uVar1": {
                    "1": "buffer_length",
                    "2": "num_pointers",
                    "4": "count",
                    "7": "num_elements"
                },
                "uVar6": {
                    "1": "iteration_count",
                    "11": "index",
                    "2": "loop_counter",
                    "3": "counter",
                    "6": "current_index"
                },
                "unaff_R13": {
                    "1": "source_array",
                    "2": "ptr_array",
                    "3": "input_array",
                    "5": "array_ptr",
                    "7": "data_array"
                },
                "unaff_RBP": {
                    "1": "frame_base",
                    "11": "frame_pointer",
                    "2": "base_address",
                    "3": "base_ptr",
                    "4": "stack_base"
                },
                "unaff_RBP + 8": {
                    "1": "function_pointer"
                },
                "unaff_RBX": {
                    "1": "data",
                    "18": "base_address"
                }
            },
            "called": [
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid process_data_001082df(void)\n\n{\n  uint num_elements;\n  long value;\n  char pattern_check_result;\n  long base_address;\n  undefined8 *result_ptr;\n  undefined8 *current_pointer;\n  long frame_pointer;\n  ulong index;\n  undefined8 *data_array;\n  \n  num_elements = *(uint *)(base_address + 0x78);\n  if (DAT_00127a2c == 7) {\n    result_ptr = data_array;\n    for (index = 0; index != num_elements; index = index + 1) {\n      current_pointer = result_ptr;\n      if (((*(long **)data_array[index] != (long *)0x0) &&\n          (value = **(long **)data_array[index], value != 0)) &&\n         (pattern_check_result = check_pattern(*(undefined8 *)(value + 8),DAT_00127a08), pattern_check_result != '\\0')) {\n        current_pointer = result_ptr + 1;\n        *result_ptr = data_array[index];\n      }\n      result_ptr = current_pointer;\n    }\n    *result_ptr = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(frame_pointer + 8) + 0x288))();\n  return;\n}\n\n",
            "current_name": "process_data_001082df",
            "entrypoint": "0x001082df",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "cVar3": "pattern_check_result",
                "check_pattern_00115d70": "check_pattern",
                "lVar2": "value",
                "puVar4": "result_ptr",
                "puVar5": "current_pointer",
                "uVar1": "num_elements",
                "uVar6": "index",
                "unaff_R13": "data_array",
                "unaff_RBP": "frame_pointer",
                "unaff_RBX": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108375": {
            "additional_data": {
                "FUN_00108375": {
                    "1": "validate_flag_and_print_error",
                    "2": "check_share_flag_and_print_error_message",
                    "3": "validate_output_format",
                    "8": "drop_share_flag_if_not_coff"
                },
                "param_1": {
                    "1": "arg1",
                    "3": "param",
                    "4": "unused_param",
                    "7": "param_1",
                    "9": "param1"
                },
                "param_2": {
                    "1": "param_b",
                    "2": "input_params",
                    "3": "params",
                    "4": "param2",
                    "6": "arguments",
                    "8": "param_array"
                },
                "param_3": {
                    "1": "param_c",
                    "3": "param_value",
                    "5": "output_format",
                    "8": "param_3",
                    "9": "param3"
                },
                "uVar1": {
                    "1": "data",
                    "2": "arg1",
                    "3": "first_param_value",
                    "7": "var1"
                },
                "uVar2": {
                    "2": "error_msg",
                    "23": "error_message",
                    "6": "var2"
                },
                "unaff_EBX": {
                    "1": "unaffected_ebx",
                    "13": "ebx",
                    "2": "modified_ebx",
                    "3": "flag",
                    "8": "ebx_value"
                }
            },
            "called": [
                "FUN_00119ed0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00115f30"
            ],
            "code": "\nuint drop_share_flag_if_not_coff_00108375(undefined8 param1,undefined8 *param_array,undefined8 param3)\n\n{\n  undefined8 var1;\n  undefined8 error_message;\n  uint ebx;\n  \n  if (*(int *)(param_array[1] + 8) != 2) {\n    var1 = *param_array;\n    ebx = ebx & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(error_message,var1,param3);\n  }\n  return ebx;\n}\n\n",
            "current_name": "drop_share_flag_if_not_coff_00108375",
            "entrypoint": "0x00108375",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_not_coff_00108375",
                "param_1": "param1",
                "param_2": "param_array",
                "param_3": "param3",
                "uVar1": "var1",
                "uVar2": "error_message",
                "unaff_EBX": "ebx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083b7": {
            "additional_data": {
                "FUN_001083b7": {
                    "1": "print_error_message_or_return",
                    "17": "handle_error",
                    "2": "handle_bfd_error",
                    "3": "print_error_or_return",
                    "7": "print_error_and_exit"
                },
                "iVar1": {
                    "1": "get_error_code",
                    "14": "bfd_error",
                    "5": "error_code"
                },
                "param_1": {
                    "1": "file_descriptor",
                    "2": "input_value",
                    "26": "error_code"
                },
                "print_error_message_0011a110": {
                    "2": "print_error_message"
                },
                "unaff_RBP": {
                    "1": "print_address",
                    "2": "error_pointer",
                    "4": "error_message",
                    "6": "message_ptr",
                    "7": "error_message_ptr"
                },
                "unaff_retaddr": {
                    "30": "return_address"
                },
                "xexit": {
                    "2": "exit_program"
                }
            },
            "called": [
                "xexit",
                "FUN_0011a110",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00116030"
            ],
            "code": "\nundefined8 handle_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *error_message_ptr;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  print_error_message(*error_message_ptr);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "handle_error_001083b7",
            "entrypoint": "0x001083b7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "iVar1": "bfd_error",
                "param_1": "error_code",
                "print_error_message_0011a110": "print_error_message",
                "unaff_RBP": "error_message_ptr",
                "unaff_retaddr": "return_address",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083de": {
            "additional_data": {
                "FUN_001083de": {
                    "1": "print_section_length_error_message",
                    "2": "print_error_if_section_length_not_divisible",
                    "25": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "section_name",
                    "2": "section_size",
                    "3": "section_value",
                    "5": "section"
                },
                "uVar2": {
                    "1": "error_msg_format",
                    "16": "error_message"
                },
                "unaff_EBP": {
                    "1": "section_name",
                    "13": "section_length",
                    "2": "length",
                    "9": "error_code"
                },
                "unaff_RBX": {
                    "1": "section_length_pointer",
                    "2": "section_length_ptr",
                    "4": "section_ptr",
                    "7": "section_pointer",
                    "9": "section_length"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid print_error_and_exit_001083de(void)\n\n{\n  undefined8 section;\n  undefined8 error_message;\n  undefined8 *section_length;\n  undefined4 section_length;\n  \n  section = *section_length;\n  error_message = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_error_and_exit_001083de_00119dd0(error_message,section,section_length);\n}\n\n",
            "current_name": "print_error_and_exit_001083de",
            "entrypoint": "0x001083de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083de": "print_error_and_exit_001083de",
                "uVar1": "section",
                "uVar2": "error_message",
                "unaff_EBP": "section_length",
                "unaff_RBX": "section_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108466": {
            "additional_data": {
                "FUN_00108466": {
                    "1": "free_memory",
                    "2": "free_memory_and_print_error",
                    "3": "cleanup_and_print_error_message",
                    "5": "print_error_and_free_memory",
                    "7": "print_error_and_free"
                },
                "param_7": {
                    "1": "buffer",
                    "10": "memory_to_free",
                    "3": "error_message",
                    "4": "memory_block",
                    "5": "data_to_free"
                },
                "print_error_message_001126c0": {
                    "6": "print_error_message"
                }
            },
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid print_error_and_free_00108466(void)\n\n{\n  void *memory_to_free;\n  \n  DAT_00127a20 = 1;\n  print_error_message(0);\n  free(memory_to_free);\n  return;\n}\n\n",
            "current_name": "print_error_and_free_00108466",
            "entrypoint": "0x00108466",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108466": "print_error_and_free_00108466",
                "param_7": "memory_to_free",
                "print_error_message_001126c0": "print_error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010847a": {
            "additional_data": {
                "FUNC_00116490": {
                    "1": "perform_system_checks",
                    "2": "initialize_resources",
                    "3": "initialize_system",
                    "4": "perform_initialization"
                },
                "FUN_0010847a": {
                    "1": "execute_setup_process",
                    "2": "initialize_program",
                    "7": "initialize_application",
                    "8": "execute_initialization"
                }
            },
            "called": [
                "FUN_00116490"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nvoid execute_initialization_0010847a(void)\n\n{\n  process_build_attribute_notes_00116490();\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n",
            "current_name": "execute_initialization_0010847a",
            "entrypoint": "0x0010847a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010847a": "execute_initialization_0010847a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001086af": {
            "additional_data": {
                "FUN_001086af": {
                    "1": "process_attribute_notes",
                    "27": "process_build_attribute_notes"
                },
                "__nmemb": {
                    "1": "temporary_buffer_size",
                    "2": "size",
                    "3": "nmemb",
                    "4": "num_records"
                },
                "__ptr": {
                    "1": "var36",
                    "2": "buffer",
                    "3": "ptr"
                },
                "bVar22": {
                    "1": "temp_byte",
                    "2": "byte_var",
                    "3": "byte_flag"
                },
                "bVar4": {
                    "1": "unused_var_3",
                    "2": "condition",
                    "3": "bool_var",
                    "4": "flag"
                },
                "cVar17": {
                    "1": "var_17",
                    "2": "temp_char",
                    "4": "char_var"
                },
                "iVar23": {
                    "1": "loop_index",
                    "2": "loop_var",
                    "3": "counter",
                    "6": "loop_counter"
                },
                "iVar6": {
                    "1": "counter",
                    "2": "temp_var",
                    "3": "index",
                    "4": "comparison_result"
                },
                "in_RCX": {
                    "1": "input1",
                    "12": "param_1",
                    "4": "input_value"
                },
                "in_stack_00000030": {
                    "1": "stack_param",
                    "2": "param_15",
                    "4": "output_buffer"
                },
                "in_stack_00000038": {
                    "1": "stack_param2",
                    "2": "param_16"
                },
                "lVar7": {
                    "1": "var39",
                    "2": "long_var",
                    "3": "error_msg",
                    "6": "error_message"
                },
                "param_10": {
                    "1": "total_records",
                    "2": "record_count",
                    "4": "output_size",
                    "9": "param_10"
                },
                "param_11": {
                    "1": "array_pointer4",
                    "2": "record_array",
                    "5": "records",
                    "8": "param_11"
                },
                "param_12": {
                    "1": "temp_var_9"
                },
                "param_13": {
                    "1": "flag2",
                    "11": "param_13",
                    "2": "record_count"
                },
                "param_14": {
                    "1": "version_ptr",
                    "2": "error_messages",
                    "9": "param_14"
                },
                "param_7": {
                    "1": "total_notes",
                    "2": "param_8",
                    "8": "param_7"
                },
                "param_8": {
                    "1": "value_4",
                    "2": "note_version",
                    "8": "param_8"
                },
                "param_9": {
                    "1": "var13",
                    "2": "param3",
                    "9": "param_9"
                },
                "puVar15": {
                    "1": "var_17",
                    "2": "ptr2",
                    "3": "current_note",
                    "5": "current_record"
                },
                "puVar16": {
                    "1": "new_output_pointer",
                    "2": "note_name"
                },
                "puVar18": {
                    "1": "ptr_18",
                    "2": "ptr2"
                },
                "puVar19": {
                    "1": "pointer_value3",
                    "2": "description_ptr2"
                },
                "puVar20": {
                    "1": "output_pointer"
                },
                "puVar21": {
                    "1": "loop_var",
                    "2": "current_record"
                },
                "puVar23": {
                    "1": "end_of_note"
                },
                "puVar5": {
                    "1": "ptr_array",
                    "2": "current_record"
                },
                "puVar55": {
                    "1": "new_current_record"
                },
                "siVar30": {
                    "1": "end_of_description"
                },
                "uVar1": {
                    "1": "var26",
                    "12": "result"
                },
                "uVar10": {
                    "1": "var10",
                    "2": "var_10"
                },
                "uVar11": {
                    "1": "temp_value_7",
                    "2": "var_11",
                    "3": "temp_size"
                },
                "uVar12": {
                    "1": "var_q",
                    "2": "var_12"
                },
                "uVar13": {
                    "1": "var13",
                    "2": "var_13"
                },
                "uVar14": {
                    "1": "temp_var6",
                    "2": "var_14"
                },
                "uVar15": {
                    "1": "attribute_size"
                },
                "uVar16": {
                    "1": "attribute_name"
                },
                "uVar17": {
                    "1": "version_2_message"
                },
                "uVar18": {
                    "1": "version"
                },
                "uVar19": {
                    "1": "version_2_message"
                },
                "uVar2": {
                    "1": "code_pointer1",
                    "2": "temp1",
                    "3": "u_var2"
                },
                "uVar20": {
                    "1": "original_record_count",
                    "2": "var_20",
                    "3": "version"
                },
                "uVar21": {
                    "1": "current_offset"
                },
                "uVar22": {
                    "1": "temp11"
                },
                "uVar23": {
                    "1": "loop_counter"
                },
                "uVar3": {
                    "1": "temp_value_3",
                    "2": "var3",
                    "3": "temp2"
                },
                "uVar31": {
                    "1": "end_of_description"
                },
                "uVar32": {
                    "1": "initialized_note"
                },
                "uVar33": {
                    "1": "initialized_note"
                },
                "uVar34": {
                    "1": "initialized_note"
                },
                "uVar35": {
                    "1": "initialized_note"
                },
                "uVar36": {
                    "1": "initialized_note"
                },
                "uVar37": {
                    "1": "initialized_note"
                },
                "uVar38": {
                    "1": "initialized_note"
                },
                "uVar39": {
                    "1": "initialized_note"
                },
                "uVar4": {
                    "1": "bool_flag"
                },
                "uVar40": {
                    "1": "initialized_note"
                },
                "uVar41": {
                    "1": "initialized_note"
                },
                "uVar42": {
                    "1": "initialized_note"
                },
                "uVar43": {
                    "1": "initialized_note"
                },
                "uVar44": {
                    "1": "initialized_note"
                },
                "uVar45": {
                    "1": "initialized_note"
                },
                "uVar46": {
                    "1": "initialized_note"
                },
                "uVar47": {
                    "1": "initialized_note"
                },
                "uVar48": {
                    "1": "initialized_note"
                },
                "uVar49": {
                    "1": "initialized_note"
                },
                "uVar5": {
                    "1": "temp_address"
                },
                "uVar50": {
                    "1": "initialized_note"
                },
                "uVar51": {
                    "1": "initialized_note"
                },
                "uVar52": {
                    "1": "initialized_note"
                },
                "uVar53": {
                    "1": "initialized_note"
                },
                "uVar54": {
                    "1": "initialized_note"
                },
                "uVar6": {
                    "1": "temp_size"
                },
                "uVar7": {
                    "1": "var_l"
                },
                "uVar8": {
                    "1": "var_m",
                    "2": "temp3",
                    "4": "error_message"
                },
                "uVar9": {
                    "1": "var_10",
                    "2": "size1",
                    "3": "note_type"
                },
                "unaff_R12": {
                    "1": "unaff_ptr1",
                    "2": "current_record",
                    "3": "record_ptr",
                    "9": "param_4"
                },
                "unaff_R13": {
                    "1": "tmp4",
                    "8": "param_5"
                },
                "unaff_R14": {
                    "1": "temp_array3",
                    "4": "function_pointers"
                },
                "unaff_R15": {
                    "1": "end_value"
                },
                "unaff_RBP": {
                    "1": "unaff_rbp",
                    "2": "note_size",
                    "9": "param_3"
                },
                "unaff_RBX": {
                    "1": "counter",
                    "10": "param_2",
                    "2": "num_notes"
                },
                "unaff_retaddr": {
                    "1": "default_value",
                    "2": "param_7",
                    "3": "retaddr",
                    "5": "return_address",
                    "6": "param_6"
                }
            },
            "called": [
                "FUN_00116490",
                "FUN_00119ed0",
                "FUN_001126c0",
                "dcgettext",
                "bfd_set_error",
                "FUN_0011a1b0",
                "qsort",
                "FUN_0010847a"
            ],
            "calling": [
                "FUN_00116490"
            ],
            "code": "\nulong process_build_attribute_notes_001086af(void)\n\n{\n  ulong result;\n  undefined8 u_var2;\n  undefined8 u_var3;\n  bool flag;\n  ulong *pointer;\n  int comparison_result;\n  long error_message;\n  undefined8 error_message;\n  ulong note_type;\n  ulong size;\n  ulong temp_size;\n  undefined *ptr;\n  ulong param_1;\n  ulong var_12;\n  ulong var_13;\n  ulong var_14;\n  ulong param_2;\n  ulong param_3;\n  ulong *current_record;\n  undefined *ptr3;\n  char char_var;\n  undefined *ptr1;\n  undefined *ptr2;\n  ulong *param_4;\n  ulong param_5;\n  ulong version;\n  size_t num_records;\n  undefined8 *function_pointers;\n  ulong *current_record;\n  byte byte_flag;\n  int loop_counter;\n  ulong param_6;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *output_buffer;\n  uint param_16;\n  uint param_13;\n  undefined8 *param_14;\n  \n  byte_flag = 0;\n  param_7 = param_1;\n  note_type = (**(code **)(function_pointers[1] + 0x40))();\n  size = (**(code **)(function_pointers[1] + 0x40))(param_4[4] + 4);\nLAB_0011662a:\n  var_13 = param_3;\n  version = param_5;\n  if (size < note_type) {\n    note_type = size;\n  }\n  do {\n    temp_size = param_7;\n    var_12 = param_7;\n    current_record = param_4;\n    if (param_4[2] == 0x100) {\n      if (note_type == 0) {\n        note_type = param_6;\n      }\n      var_14 = *param_4;\n      param_4[7] = note_type;\n      param_3 = var_13;\n      param_5 = size;\n      param_6 = note_type;\n      if (size == 0) goto LAB_001164af;\n    }\n    else {\n      if (note_type == 0) {\n        note_type = param_9;\n      }\n      var_14 = *param_4;\n      param_4[7] = note_type;\n      param_3 = size;\n      param_5 = version;\n      param_9 = note_type;\n      if (size == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    current_record[8] = size;\n    if (*(char *)((current_record[3] - 1) + var_14) != '\\0') {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    param_4 = current_record + 9;\n    if (param_2 < 0xc) {\n      if (param_2 != 0) {\n        error_message = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((param_16 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (param_16 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        error_message = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      u_var2 = *function_pointers;\n      u_var3 = *param_14;\n      error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(error_message,u_var2,u_var3);\nLAB_0011671b:\n      num_records = ((long)param_4 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,num_records,0x48,compare_memory_regions_0011a1b0);\n      current_record = param_11;\n      goto LAB_001167f9;\n    }\n    size = (**(code **)(function_pointers[1] + 0x40))(var_12);\n    *param_4 = size;\n    size = (**(code **)(function_pointers[1] + 0x40))(var_12 + 4);\n    current_record[10] = size;\n    note_type = (**(code **)(function_pointers[1] + 0x40))(var_12 + 8);\n    var_14 = *param_4;\n    current_record[0xb] = note_type;\n    size = current_record[10];\n    var_13 = var_14 + 3 & 0xfffffffffffffffc;\n    current_record[0xf] = var_13;\n    if (size != (size + 3 & 0xfffffffffffffffc)) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note_type - 0x100) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    temp_size = var_13 + size + 0xc;\n    if (param_2 < temp_size) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var_14 < 2) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    current_record[0xc] = var_12 + 0xc;\n    result = var_12 + 0xc + var_13;\n    current_record[0xd] = result;\n    param_2 = param_2 + (-0xc - (var_13 + size));\n    temp_size = var_12 + temp_size;\n    if (var_14 != 2) {\n      if (*(char *)(var_12 + 0xc) == '$') {\n        if ((*(char *)(var_12 + 0xd) == '\\x01') && (*(char *)(var_12 + 0xe) == '1')) {\n          size = process_build_attribute_notes_001086af_00116490();\n          return size;\n        }\n      }\n      else if ((((4 < var_14) && (*(char *)(var_12 + 0xc) == 'G')) &&\n               (*(char *)(var_12 + 0xd) == 'A')) &&\n              ((*(char *)(var_12 + 0xe) == '$' && (*(char *)(var_12 + 0xf) == '\\x01')))) {\n        if (*(char *)(var_12 + 0x10) == '2') {\n          size = process_build_attribute_notes_001086af_00116490();\n          return size;\n        }\n        if (*(char *)(var_12 + 0x10) == '3') {\n          size = process_build_attribute_notes_001086af_00116490();\n          return size;\n        }\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var_13 = param_3;\n    version = param_5;\n    if (size == 0) {\n      if (note_type == 0x100) {\n        current_record[0x10] = param_6;\nLAB_001164af:\n        var_12 = temp_size;\n        size = version;\n        current_record = param_4;\n        param_5 = version;\n      }\n      else {\n        current_record[0x10] = param_9;\nLAB_0011669e:\n        param_3 = var_13;\n        var_12 = temp_size;\n        size = var_13;\n        current_record = param_4;\n        param_5 = version;\n      }\n      goto LAB_001164bb;\n    }\n    if (size == 0x10) break;\n    if (0x10 < size) {\nLAB_00116679:\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (error_message != 0) {\n        bfd_set_error(0x11);\n        print_error_message_001126c0(0,function_pointers,param_14,error_message);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (size != 4) {\n      if (size == 8) {\n        size = process_build_attribute_notes_001086af();\n        return size;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = temp_size;\n    note_type = (**(code **)(function_pointers[1] + 0x40))();\n    size = 0xffffffffffffffff;\n  } while( true );\n  param_7 = temp_size;\n  note_type = (**(code **)(function_pointers[1] + 0x28))(result);\n  size = (**(code **)(function_pointers[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (param_4 <= current_record) {\n    qsort(param_11,num_records,0x48,compare_records_0011a250);\n    ptr = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    ptr2 = ptr;\n    for (current_record = param_11; current_record < param_4; current_record = current_record + 9) {\n      if (current_record[2] != 0) {\n        ptr1 = ptr2 + 4;\n        ptr3 = ptr2 + 0xc;\n        if ((current_record[7] == param_9) && (current_record[8] == param_7)) {\n          (**(code **)(function_pointers[1] + 0x50))(*current_record,ptr2);\n          (**(code **)(function_pointers[1] + 0x50))(0,ptr1);\n          (**(code **)(function_pointers[1] + 0x50))(current_record[2],ptr2 + 8);\n          note_type = current_record[6];\n          size = *current_record;\n          ptr2 = (undefined *)current_record[3];\n          ptr1 = ptr3;\n          for (var_13 = size; var_13 != 0; var_13 = var_13 - 1) {\n            *ptr1 = *ptr2;\n            ptr2 = ptr2 + (ulong)byte_flag * -2 + 1;\n            ptr1 = ptr1 + (ulong)byte_flag * -2 + 1;\n          }\n          if (size < note_type) {\n            for (error_message = note_type - size; error_message != 0; error_message = error_message + -1) {\n              *ptr1 = 0;\n              ptr1 = ptr1 + (ulong)byte_flag * -2 + 1;\n            }\n          }\n          ptr2 = ptr3 + note_type;\n        }\n        else {\n          (**(code **)(function_pointers[1] + 0x50))();\n          if (*(int *)(function_pointers[1] + 8) == 5) {\n            char_var = (*(char *)(function_pointers[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(function_pointers[1] + 0x50))(char_var,ptr1);\n          (**(code **)(function_pointers[1] + 0x50))(current_record[2],ptr2 + 8);\n          size = *current_record;\n          ptr2 = (undefined *)current_record[3];\n          ptr1 = ptr3;\n          for (note_type = size; note_type != 0; note_type = note_type - 1) {\n            *ptr1 = *ptr2;\n            ptr2 = ptr2 + (ulong)byte_flag * -2 + 1;\n            ptr1 = ptr1 + (ulong)byte_flag * -2 + 1;\n          }\n          note_type = current_record[6];\n          if (size < note_type) {\n            for (error_message = note_type - size; error_message != 0; error_message = error_message + -1) {\n              *ptr1 = 0;\n              ptr1 = ptr1 + (ulong)byte_flag * -2 + 1;\n            }\n          }\n          error_message = function_pointers[1];\n          ptr3 = ptr3 + note_type;\n          ptr2 = ptr3 + 8;\n          if ((*(int *)(error_message + 8) == 5) && (*(char *)(function_pointers[0x22] + 4) == '\\x02')) {\n            (**(code **)(error_message + 0x38))(current_record[7],ptr3);\n            (**(code **)(function_pointers[1] + 0x38))(current_record[8],ptr2);\n            ptr2 = ptr3 + 0x10;\n          }\n          else {\n            (**(code **)(error_message + 0x50))(current_record[7],ptr3);\n            (**(code **)(function_pointers[1] + 0x50))(current_record[8],ptr3 + 4);\n          }\n          param_9 = current_record[7];\n          param_7 = current_record[8];\n        }\n      }\n    }\n    note_type = (long)ptr2 - (long)ptr;\n    size = note_type;\n    ptr2 = ptr;\n    if (note_type < param_10) {\n      for (; param_10 = note_type, size != 0; size = size - 1) {\n        *output_buffer = *ptr2;\n        ptr2 = ptr2 + (ulong)byte_flag * -2 + 1;\n        output_buffer = output_buffer + (ulong)byte_flag * -2 + 1;\n      }\n    }\n    free(ptr);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (current_record[2] != 0) {\n    size = current_record[7];\n    note_type = current_record[8];\n    var_13 = current_record[2];\n    current_record = current_record;\n    loop_counter = 0;\n    if (size == note_type) {\n      current_record[2] = 0;\n    }\n    else {\n      do {\n        do {\n          pointer = current_record;\n          current_record = pointer + -9;\n          if (current_record < param_11) goto LAB_001167f5;\n          version = pointer[-7];\n        } while (version == 0);\n        param_7 = var_13;\n        if ((*current_record != *current_record) ||\n           (comparison_result = memcmp((void *)pointer[-6],(void *)current_record[3],*current_record), comparison_result != 0)) break;\n        var_13 = pointer[-2];\n        temp_size = pointer[-1];\n        if (size == var_13) {\n          if (note_type == temp_size) {\n            current_record[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (note_type <= temp_size) {\n            current_record[2] = 0;\n            break;\n          }\n          if (temp_size < size) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < temp_size) || (size <= (temp_size + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (version == 0x101)) {\n            if (temp_size <= note_type) {\n              temp_size = note_type;\n            }\n            if (var_13 < size) {\n              size = var_13;\n            }\n            pointer[-1] = temp_size;\n            pointer[-2] = size;\n            current_record[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (var_13 <= size) goto LAB_001167a6;\n          if (temp_size < size) goto LAB_0010852c;\n          if (note_type < size) {\n            if ((0xfffffffffffffff0 < note_type) || (var_13 <= (note_type + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n            goto LAB_001167b8;\n          }\n          if (note_type != temp_size) goto LAB_001167b8;\n        }\nprocess_records_00116852:\n        flag = loop_counter < 0x11;\n        var_13 = param_7;\n        loop_counter = loop_counter + 1;\n      } while (flag);\n    }\n  }\nLAB_001167f5:\n  current_record = current_record + 9;\n  goto LAB_001167f9;\n}\n\n",
            "current_name": "process_build_attribute_notes_001086af",
            "entrypoint": "0x001086af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001086af": "process_build_attribute_notes_001086af",
                "__nmemb": "num_records",
                "__ptr": "ptr",
                "bVar22": "byte_flag",
                "bVar4": "flag",
                "cVar17": "char_var",
                "iVar23": "loop_counter",
                "iVar6": "comparison_result",
                "in_RCX": "param_1",
                "in_stack_00000030": "output_buffer",
                "in_stack_00000038": "param_16",
                "lVar7": "error_message",
                "puVar15": "current_record",
                "puVar16": "ptr3",
                "puVar18": "ptr1",
                "puVar19": "ptr2",
                "puVar21": "current_record",
                "puVar5": "pointer",
                "uVar1": "result",
                "uVar10": "size",
                "uVar11": "temp_size",
                "uVar12": "var_12",
                "uVar13": "var_13",
                "uVar14": "var_14",
                "uVar15": "var_t",
                "uVar16": "var_u",
                "uVar18": "var_w",
                "uVar19": "var_x",
                "uVar2": "u_var2",
                "uVar20": "version",
                "uVar21": "temp_var_5",
                "uVar3": "u_var3",
                "uVar5": "temp_address",
                "uVar8": "error_message",
                "uVar9": "note_type",
                "unaff_R12": "param_4",
                "unaff_R13": "param_5",
                "unaff_R14": "function_pointers",
                "unaff_RBP": "param_3",
                "unaff_RBX": "param_2",
                "unaff_retaddr": "param_6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010870e": {
            "additional_data": {
                "(long)(puVar1 + 1)": {
                    "1": "updated_pointer"
                },
                "*param_3": {
                    "1": "data"
                },
                "*puVar1": {
                    "1": "value_in_data_array"
                },
                "FUN_0010870e": {
                    "1": "update_array_element",
                    "2": "store_value_and_update_pointer",
                    "3": "update_pointer_and_value",
                    "4": "update_pointer_value"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "pointer_to_update",
                    "4": "destination",
                    "5": "value_to_store"
                },
                "param_2": {
                    "1": "value_to_set",
                    "16": "new_value",
                    "2": "new_data",
                    "6": "value"
                },
                "param_3": {
                    "1": "ptr2",
                    "2": "pointer_to_long",
                    "4": "pointer",
                    "7": "pointer_to_value"
                },
                "puVar1": {
                    "1": "target_pointer",
                    "2": "updated_pointer",
                    "4": "current_pointer"
                },
                "puVar1 + 1": {
                    "1": "next_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid update_pointer_0010870e(undefined8 value_to_store,undefined8 new_value,long *pointer_to_value)\n\n{\n  undefined8 *current_pointer;\n  \n  current_pointer = (undefined8 *)*pointer_to_value;\n  *current_pointer = new_value;\n  *pointer_to_value = (long)(current_pointer + 1);\n  return;\n}\n\n",
            "current_name": "update_pointer_0010870e",
            "entrypoint": "0x0010870e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010870e": "update_pointer_0010870e",
                "param_1": "value_to_store",
                "param_2": "new_value",
                "param_3": "pointer_to_value",
                "puVar1": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010871c": {
            "additional_data": {
                "FUN_0010871c": {
                    "1": "report_error",
                    "24": "print_error_message",
                    "5": "print_error"
                },
                "uVar1": {
                    "1": "error_description",
                    "18": "error_message"
                },
                "unaff_RBX": {
                    "1": "error_type",
                    "21": "error_code",
                    "9": "error_flag"
                },
                "unaff_retaddr": {
                    "31": "return_address"
                }
            },
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011a110"
            ],
            "code": "\n\n\nvoid print_error_message_0010871c(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010871c",
            "entrypoint": "0x0010871c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010875d": {
            "additional_data": {
                "FUN_0010875d": {
                    "1": "compare_structs",
                    "28": "compare_records"
                },
                "iVar3": {
                    "26": "result",
                    "5": "comparison_result"
                },
                "lVar1": {
                    "1": "record1_pointer",
                    "2": "record1_address",
                    "3": "value_1",
                    "5": "record1_value",
                    "9": "value1"
                },
                "lVar2": {
                    "1": "first_field_record2",
                    "2": "record2_address",
                    "3": "value_2",
                    "5": "record2_value",
                    "9": "value2"
                },
                "param_1": {
                    "1": "entry1",
                    "23": "record1",
                    "5": "record_1"
                },
                "param_2": {
                    "1": "ptr_value2",
                    "23": "record2",
                    "5": "record_2"
                },
                "uVar4": {
                    "1": "mask",
                    "2": "flags",
                    "21": "flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "compare_records_0010875d",
            "entrypoint": "0x0010875d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "iVar3": "result",
                "lVar1": "value1",
                "lVar2": "value2",
                "param_1": "record1",
                "param_2": "record2",
                "uVar4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087da": {
            "additional_data": {
                "FUN_001087da": {
                    "1": "check_if_rax_equal_to100",
                    "10": "check_rax_value",
                    "5": "check_if_rax_equals100"
                },
                "auVar1": {
                    "1": "result_array",
                    "2": "return_value",
                    "23": "result"
                },
                "auVar1._1_7_": {
                    "1": "flag"
                },
                "auVar1._8_8_": {
                    "1": "return_address"
                },
                "auVar1[0]": {
                    "1": "result"
                },
                "in_RAX": {
                    "1": "flag_value",
                    "12": "input_value",
                    "2": "input_address",
                    "6": "value_to_check",
                    "7": "value"
                },
                "unaff_retaddr": {
                    "30": "return_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a1b0"
            ],
            "code": "\nundefined  [16] check_rax_value_001087da(void)\n\n{\n  long input_value;\n  undefined result [16];\n  undefined8 return_address;\n  \n  flag = 0;\n  result = input_value == 0x100;\n  return_address = return_address;\n  return result;\n}\n\n",
            "current_name": "check_rax_value_001087da",
            "entrypoint": "0x001087da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "auVar1": "result",
                "auVar1._1_7_": "flag",
                "auVar1._8_8_": "return_address",
                "auVar1[0]": "result",
                "in_RAX": "input_value",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087fd": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_001087fd": {
                    "1": "get_zero_value",
                    "13": "initialize",
                    "2": "initialize_program",
                    "4": "get_default_value"
                },
                "new_param_1": {
                    "1": "old_param_1"
                },
                "new_param_2": {
                    "1": "old_param_2"
                },
                "new_variable_1": {
                    "1": "old_variable_1"
                },
                "new_variable_2": {
                    "1": "old_variable_2"
                },
                "ret": {
                    "1": "result"
                },
                "return": {
                    "1": "result"
                },
                "return value": {
                    "1": "result"
                },
                "undefined8": {
                    "10": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a250"
            ],
            "code": "\nvoid initialize_001087fd(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_001087fd",
            "entrypoint": "0x001087fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087fd": "initialize_001087fd",
                "ret": "result",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108800": {
            "additional_data": {
                "*param_1": {
                    "8": "input_string"
                },
                "FUN_00108800": {
                    "1": "hash_string_from_param",
                    "23": "hash_string",
                    "6": "calculate_hash"
                },
                "param_1": {
                    "1": "data",
                    "13": "input_string",
                    "2": "string_pointer",
                    "3": "string_ptr"
                }
            },
            "called": [
                "htab_hash_string"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid hash_string_00108800(undefined8 *input_string)\n\n{\n  htab_hash_string_00108800(*input_string);\n  return;\n}\n\n",
            "current_name": "hash_string_00108800",
            "entrypoint": "0x00108800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108808": {
            "additional_data": {
                "FUN_00108808": {
                    "1": "find_missing_section",
                    "14": "print_error_if_section_not_found",
                    "2": "print_error_for_missing_section",
                    "3": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "section_ptr",
                    "26": "section_address",
                    "4": "section_pointer"
                },
                "uVar2": {
                    "2": "error_string",
                    "29": "error_message"
                },
                "unaff_RBP": {
                    "1": "stack_pointer",
                    "2": "stack_base",
                    "24": "base_pointer"
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011a2e0"
            ],
            "code": "\nvoid print_error_if_section_not_found_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long base_pointer;\n  \n  section_address = *(undefined8 *)(base_pointer + 0x20);\n  error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,section_address);\n}\n\n",
            "current_name": "print_error_if_section_not_found_00108808",
            "entrypoint": "0x00108808",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108808": "print_error_if_section_not_found_00108808",
                "uVar1": "section_address",
                "uVar2": "error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010882c": {
            "additional_data": {
                "*piVar1": {
                    "1": "errno_location"
                },
                "FUN_0010882c": {
                    "1": "print_set_time_error_message",
                    "14": "print_error_message",
                    "2": "print_set_time_error",
                    "3": "print_time_set_error",
                    "4": "print_time_setting_error"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "dcgettext": {
                    "1": "translate_error_message"
                },
                "piVar1": {
                    "1": "error_pointer",
                    "2": "error_number",
                    "3": "errno_location_ptr",
                    "6": "errno_location",
                    "8": "error_location"
                },
                "print_error_message_00119ed0": {
                    "1": "display_error_message",
                    "2": "print_error_message"
                },
                "strerror": {
                    "3": "get_error_string"
                },
                "uVar2": {
                    "1": "localized_error",
                    "24": "error_message",
                    "3": "translated_message"
                }
            },
            "called": [
                "__errno_location",
                "FUN_00119ed0",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\nvoid print_error_message_0010882c(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  \n  error_location = __errno_location();\n  strerror(*error_location);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_0010882c(error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010882c",
            "entrypoint": "0x0010882c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010882c": "print_error_message_0010882c",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_localized_message",
                "piVar1": "error_location",
                "print_error_message_00119ed0": "print_error_message",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108863": {
            "additional_data": {
                "DAT_00127720": {
                    "1": "data_start"
                },
                "DAT_001278a0": {
                    "1": "data_end"
                },
                "FUN_00108863": {
                    "1": "dealloc_memory",
                    "13": "free_memory_blocks",
                    "2": "free_memory",
                    "3": "cleanup_memory",
                    "9": "clear_memory"
                },
                "puVar1": {
                    "1": "ptr_array",
                    "17": "current_block",
                    "2": "array_pointer",
                    "6": "current_pointer"
                },
                "puVar2": {
                    "1": "ptr_array_next",
                    "17": "next_block",
                    "2": "next_array_pointer",
                    "7": "next_pointer"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid free_memory_blocks_00108863(void)\n\n{\n  undefined4 *current_block;\n  undefined4 *next_block;\n  \n  current_block = (undefined4 *)&DAT_00127720;\n  do {\n    next_block = current_block + 6;\n    free(*(void **)(current_block + 4));\n    *(undefined8 *)(current_block + 4) = 0;\n    current_block = next_block;\n  } while (next_block != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "current_name": "free_memory_blocks_00108863",
            "entrypoint": "0x00108863",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108863": "free_memory_blocks_00108863",
                "puVar1": "current_block",
                "puVar2": "next_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108898": {
            "additional_data": {
                "FUN_00108898": {
                    "31": "compare_strings"
                },
                "auVar2": {
                    "1": "result_container",
                    "13": "result",
                    "3": "result_array",
                    "6": "comparison_result"
                },
                "auVar2._1_7_": {
                    "1": "is_equal"
                },
                "auVar2._8_8_": {
                    "1": "return_value"
                },
                "auVar2[0]": {
                    "1": "result"
                },
                "iVar1": {
                    "1": "string_comparison",
                    "22": "comparison_result",
                    "8": "string_comparison_result"
                },
                "in_RAX": {
                    "1": "temporary_variable",
                    "4": "undefined_value",
                    "8": "return_value"
                },
                "param_1": {
                    "1": "str1",
                    "29": "string1"
                },
                "param_2": {
                    "1": "str2",
                    "29": "string2"
                }
            },
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] compare_strings_00108898(char **string1,char **string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined result [16];\n  \n  comparison_result = strcmp(*string1,*string2);\n  is_equal = 0;\n  result = comparison_result == 0;\n  return_value = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_00108898",
            "entrypoint": "0x00108898",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "auVar2": "result",
                "auVar2._1_7_": "is_equal",
                "auVar2._8_8_": "return_value",
                "auVar2[0]": "result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001088ae": {
            "additional_data": {
                "FUN_001088ae": {
                    "1": "modify_data",
                    "10": "update_data",
                    "13": "update_data_entry",
                    "6": "update_data_and_return_index"
                },
                "iVar1": {
                    "1": "index",
                    "11": "new_index",
                    "2": "new_entry_index",
                    "3": "current_index",
                    "7": "updated_index"
                },
                "lVar2": {
                    "1": "current_entry_index",
                    "2": "data_entry_index",
                    "4": "current_idx",
                    "6": "current_index",
                    "8": "index"
                },
                "lVar3": {
                    "1": "current_element_offset",
                    "11": "offset",
                    "2": "array_index",
                    "7": "entry_offset"
                },
                "param_1": {
                    "1": "data1",
                    "16": "new_value1",
                    "2": "entry_id",
                    "3": "new_param1",
                    "6": "value1"
                },
                "param_2": {
                    "1": "entry_param2",
                    "16": "new_value2",
                    "3": "new_param2",
                    "6": "value2"
                },
                "param_3": {
                    "1": "new_value1",
                    "14": "new_value3",
                    "3": "new_param3",
                    "4": "value3"
                },
                "param_4": {
                    "1": "data4",
                    "12": "new_value4",
                    "3": "new_string"
                },
                "uVar4": {
                    "1": "new_string",
                    "11": "duplicated_string",
                    "2": "duplicate_value",
                    "6": "duplicated_value"
                }
            },
            "called": [
                "free",
                "xstrdup"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nulong update_data_entry_001088ae(undefined4 new_value1,undefined4 new_value2,undefined8 new_value3,undefined8 new_value4)\n\n{\n  int new_index;\n  long index;\n  long offset;\n  undefined8 duplicated_string;\n  \n  index = (long)DAT_001278a0;\n  offset = index * 0x18;\n  free((void *)(&DAT_00127730)[index * 3]);\n  *(undefined4 *)(&DAT_00127720 + offset) = new_value1;\n  *(undefined4 *)(&DAT_00127724 + offset) = new_value2;\n  *(undefined8 *)(&DAT_00127728 + offset) = new_value3;\n  duplicated_string = xstrdup(new_value4);\n  (&DAT_00127730)[index * 3] = duplicated_string;\n  new_index = DAT_001278a0 + 1;\n  DAT_001278a0 = new_index % 0x10;\n  return (long)new_index / 0x10 & 0xffffffff;\n}\n\n",
            "current_name": "update_data_entry_001088ae",
            "entrypoint": "0x001088ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "iVar1": "new_index",
                "lVar2": "index",
                "lVar3": "offset",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "param_4": "new_value4",
                "uVar4": "duplicated_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108916": {
            "additional_data": {
                "FUN_00108916": {
                    "1": "print_file_copy_options",
                    "23": "print_usage",
                    "4": "print_file_usage"
                },
                "dcgettext": {
                    "1": "get_string",
                    "2": "get_translated_message"
                },
                "exit": {
                    "4": "exit_program"
                },
                "fprintf": {
                    "1": "print_to_output_file",
                    "2": "write_to_output"
                },
                "param_1": {
                    "1": "file_ptr",
                    "28": "output_file"
                },
                "param_2": {
                    "1": "exit_status",
                    "26": "exit_code",
                    "4": "error_code"
                },
                "pcVar2": {
                    "1": "translation_string",
                    "2": "text",
                    "20": "message",
                    "3": "localized_string"
                },
                "print_supported_targets_00104a35": {
                    "4": "print_supported_targets"
                },
                "uVar1": {
                    "1": "default_usage",
                    "15": "usage_string",
                    "3": "usage_message"
                }
            },
            "called": [
                "fprintf",
                "exit",
                "dcgettext",
                "FUN_00104a35"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_00108916(FILE *output_file,int exit_code)\n\n{\n  undefined8 usage_string;\n  char *message;\n  \n  usage_string = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(output_file,message,usage_string);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(output_file,message);\n  print_supported_targets(DAT_001275e0,output_file);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_usage_00108916",
            "entrypoint": "0x00108916",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "dcgettext": "get_translated_message",
                "exit": "exit_program",
                "fprintf": "write_to_output",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "print_supported_targets_00104a35": "print_supported_targets",
                "uVar1": "usage_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108a2a": {
            "additional_data": {
                "FUN_00108a2a": {
                    "1": "display_usage",
                    "24": "print_usage",
                    "3": "print_usage_and_exit"
                },
                "dcgettext": {
                    "1": "gettext"
                },
                "exit": {
                    "1": "exit_program"
                },
                "fprintf": {
                    "1": "print_formatted_message",
                    "2": "write_to_output"
                },
                "param_1": {
                    "22": "output_file",
                    "3": "file_pointer",
                    "6": "file"
                },
                "param_2": {
                    "1": "error_flag",
                    "2": "exit_status",
                    "22": "exit_code",
                    "6": "error_code"
                },
                "pcVar2": {
                    "1": "message_text",
                    "15": "message",
                    "3": "text",
                    "5": "localized_string"
                },
                "print_supported_targets_00104a35": {
                    "3": "print_supported_targets"
                },
                "uVar1": {
                    "1": "data",
                    "2": "default_message",
                    "4": "usage_message",
                    "5": "version",
                    "8": "version_number"
                }
            },
            "called": [
                "fprintf",
                "exit",
                "dcgettext",
                "FUN_00104a35"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 version_number;\n  char *message;\n  \n  version_number = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(output_file,message,version_number);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  print_supported_targets(DAT_001275e0,output_file);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  end_program(exit_code);\n}\n\n",
            "current_name": "print_usage_00108a2a",
            "entrypoint": "0x00108a2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "dcgettext": "get_localized_text",
                "exit": "end_program",
                "fprintf": "write_to_output",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "print_supported_targets_00104a35": "print_supported_targets",
                "uVar1": "version_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108b3e": {
            "additional_data": {
                "DAT_001278a0": {
                    "1": "max_entries"
                },
                "FUN_00108b3e": {
                    "1": "print_last_stabs_entries_before_error",
                    "22": "print_last_stabs_entries",
                    "3": "print_stab_entries"
                },
                "__format": {
                    "1": "error_message_format",
                    "2": "format",
                    "22": "format_string",
                    "4": "format_str"
                },
                "_stderr": {
                    "1": "standard_error",
                    "2": "stderr"
                },
                "bfd_get_stab_name": {
                    "3": "get_stab_name"
                },
                "dcgettext": {
                    "1": "gettext",
                    "2": "get_translated_string"
                },
                "fprintf": {
                    "1": "fprintf",
                    "2": "print_to_stderr"
                },
                "fputc": {
                    "1": "write_char_to_stderr",
                    "2": "put_character"
                },
                "fwrite": {
                    "1": "write_file",
                    "2": "write_to_stderr",
                    "3": "write_to_file"
                },
                "iVar5": {
                    "1": "iteration",
                    "10": "counter",
                    "2": "loop_index",
                    "4": "count",
                    "5": "index"
                },
                "lVar1": {
                    "1": "name_ptr",
                    "30": "stab_name"
                },
                "lVar2": {
                    "1": "i_var5_long",
                    "17": "index",
                    "2": "loop_index",
                    "3": "i"
                },
                "lVar3": {
                    "1": "stab_entry_offset",
                    "25": "offset",
                    "4": "stab_offset"
                },
                "param_1": {
                    "1": "input1",
                    "16": "param_1",
                    "2": "file_ptr",
                    "5": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "16": "param_2",
                    "5": "param2"
                },
                "param_3": {
                    "1": "unused_param",
                    "14": "param_3",
                    "2": "result",
                    "3": "return_value",
                    "5": "param3"
                },
                "piVar4": {
                    "1": "stab_data",
                    "11": "stab_entry",
                    "2": "symbol",
                    "4": "stab",
                    "6": "stab_ptr"
                }
            },
            "called": [
                "fprintf",
                "fputc",
                "bfd_get_stab_name",
                "dcgettext",
                "fwrite"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long index;\n  long offset;\n  int *stab_entry;\n  int counter;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(stderr,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,stderr);\n  counter = DAT_001278a0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stab_entry = (int *)(&DAT_00127720 + offset);\n    if ((&DAT_00127730)[index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,stderr);\n        }\n        else {\n          fprintf(stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(stderr,\"%-6s\",stab_name);\n      }\n      fprintf(stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + offset));\n      fprintf(stderr,\"%08lx\",*(undefined8 *)(&DAT_00127728 + offset));\n      if (*stab_entry != 0) {\n        fprintf(stderr,\" %s\",(&DAT_00127730)[index * 3]);\n      }\n      fputc(10,stderr);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278a0 != counter);\n  return param_3;\n}\n\n",
            "current_name": "print_last_stabs_entries_00108b3e",
            "entrypoint": "0x00108b3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "format_string",
                "_stderr": "stderr",
                "bfd_get_stab_name": "get_stab_name",
                "dcgettext": "get_translated_string",
                "fprintf": "print_to_stderr",
                "fputc": "put_character",
                "fwrite": "write_to_file",
                "iVar5": "counter",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stab_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108c86": {
            "additional_data": {
                "FUN_00108c86": {
                    "1": "parse_and_validate_driver",
                    "2": "extract_info_from_binary"
                },
                "__s": {
                    "1": "header",
                    "2": "substring",
                    "6": "input_string",
                    "8": "string_ptr"
                },
                "__s1": {
                    "1": "platform_ptr",
                    "2": "suffix",
                    "3": "platform_string",
                    "4": "arch_string",
                    "6": "architecture"
                },
                "bVar8": {
                    "1": "byte_value",
                    "11": "flag",
                    "2": "is_negative",
                    "5": "byte_flag"
                },
                "cVar1": {
                    "1": "is_equal",
                    "11": "comparison_result",
                    "2": "is_bsdrv",
                    "3": "is_match",
                    "7": "result"
                },
                "iVar2": {
                    "1": "strcmp_result",
                    "18": "comparison_result",
                    "2": "compare_result"
                },
                "lVar5": {
                    "1": "data_length",
                    "2": "string_length",
                    "4": "offset",
                    "5": "input_value"
                },
                "param_1": {
                    "1": "driver_data_ptr",
                    "2": "binary_address",
                    "3": "input_ptr"
                },
                "puVar4": {
                    "1": "parsed_string",
                    "2": "new_string_ptr",
                    "3": "output_ptr",
                    "4": "new_string",
                    "5": "allocated_memory"
                },
                "puVar6": {
                    "1": "new_string_ptr_offset",
                    "5": "new_string_ptr"
                },
                "sVar3": {
                    "1": "driver_name_length",
                    "19": "string_length",
                    "2": "input_length",
                    "4": "length"
                },
                "strncmp": {
                    "1": "compare_strings"
                },
                "uVar7": {
                    "1": "result_to_return",
                    "21": "return_value",
                    "5": "result"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00113fb0",
                "xmalloc",
                "strcmp",
                "strlen"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 parse_driver_info_00108c86(long *input_ptr)\n\n{\n  char comparison_result;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *allocated_memory;\n  long input_value;\n  char *string_ptr;\n  char *architecture;\n  undefined2 *new_string_ptr;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  input_value = *input_ptr;\n  string_ptr = (char *)(input_value + 4);\n  comparison_result = string_comparison_00113fb0(string_ptr,&DAT_0011b73b);\n  if (comparison_result == '\\0') {\n    comparison_result = string_comparison_00113fb0(string_ptr,\"bsdrv-\");\n    if (comparison_result == '\\0') {\n      comparison_result = string_comparison_00113fb0(string_ptr,\"rtdrv-\");\n      if (comparison_result == '\\0') {\n        return 0xffffffff;\n      }\n      string_ptr = (char *)(input_value + 6);\n      return_value = 0xc;\n    }\n    else {\n      string_ptr = (char *)(input_value + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(string_ptr);\n  allocated_memory = (undefined2 *)xmalloc(string_length + 8);\n  architecture = string_ptr + 4;\n  new_string_ptr = allocated_memory;\n  for (input_value = string_length + 1; input_value != 0; input_value = input_value + -1) {\n    *(char *)new_string_ptr = *string_ptr;\n    string_ptr = string_ptr + (ulong)flag * -2 + 1;\n    new_string_ptr = (undefined2 *)((long)new_string_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(allocated_memory + 1) = 0x69;\n  *allocated_memory = 0x6570;\n  comparison_result = strcmp(architecture,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)allocated_memory + 7) = 0x36;\n    *(undefined2 *)((long)allocated_memory + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(architecture,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)allocated_memory + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(architecture,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)allocated_memory + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_ptr = (long)allocated_memory;\n  return return_value;\n}\n\n",
            "current_name": "parse_driver_info_00108c86",
            "entrypoint": "0x00108c86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108c86": "parse_driver_info_00108c86",
                "__s": "string_ptr",
                "__s1": "architecture",
                "bVar8": "flag",
                "cVar1": "comparison_result",
                "iVar2": "comparison_result",
                "lVar5": "input_value",
                "param_1": "input_ptr",
                "puVar4": "allocated_memory",
                "puVar6": "new_string_ptr",
                "sVar3": "string_length",
                "uVar7": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108d9a": {
            "additional_data": {
                "DAT_001278c8": {
                    "1": "symbol2_table"
                },
                "DAT_001278d0": {
                    "1": "symbol1_table"
                },
                "FUN_00108d9a": {
                    "1": "check_symbol_redefinitions",
                    "13": "check_symbol_redefinition",
                    "2": "find_and_check_symbol",
                    "4": "check_redefinition"
                },
                "dcgettext": {
                    "1": "get_translated_text",
                    "2": "get_error_message"
                },
                "htab_find": {
                    "1": "find_entry"
                },
                "htab_find_slot": {
                    "1": "find_slot_in_hashtable"
                },
                "lVar3": {
                    "1": "symbol_redefinition_count",
                    "2": "found_symbol",
                    "3": "symbol_exists",
                    "4": "result",
                    "5": "symbol_found"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "param",
                    "3": "filename",
                    "6": "file_name",
                    "9": "error_message"
                },
                "param_2": {
                    "1": "symbol1",
                    "14": "symbol_name",
                    "4": "symbol_name1",
                    "5": "symbol_1"
                },
                "param_3": {
                    "1": "symbol2",
                    "10": "target_symbol",
                    "3": "target_name",
                    "4": "symbol_name2",
                    "5": "symbol_2"
                },
                "param_4": {
                    "1": "result_value",
                    "2": "param_4",
                    "21": "result",
                    "6": "return_value"
                },
                "pcVar2": {
                    "1": "symbol_dup",
                    "3": "symbol_name",
                    "4": "duplicate_symbol",
                    "5": "symbol_name_copy"
                },
                "plVar5": {
                    "1": "target_entry",
                    "10": "symbol_slot",
                    "2": "slot_entry",
                    "7": "slot"
                },
                "ppcVar1": {
                    "1": "lookup_array",
                    "2": "symbol_ptrs",
                    "4": "symbol_entry",
                    "5": "symbol_array"
                },
                "print_error_and_exit_00119dd0": {
                    "5": "print_error_and_exit"
                },
                "strdup": {
                    "3": "duplicate_string"
                },
                "uVar4": {
                    "2": "error_text",
                    "23": "error_message",
                    "3": "error_msg"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "htab_find_slot",
                "strdup",
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext",
                "htab_find"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_pointers;\n  char *symbol_name_copy;\n  long symbol_found;\n  undefined8 error_message;\n  long *symbol_slot;\n  \n  symbol_pointers = (char **)xmalloc(0x10);\n  symbol_name_copy = strdup(symbol_name);\n  *symbol_pointers = symbol_name_copy;\n  symbol_name_copy = strdup(target_symbol);\n  error_message = DAT_001278d0;\n  symbol_pointers[1] = symbol_name_copy;\n  symbol_found = htab_find(error_message,symbol_pointers);\n  if (symbol_found != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_error_and_exit(error_message,error_message,symbol_name);\n  }\n  symbol_found = htab_find(DAT_001278c8,target_symbol);\n  if (symbol_found != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_error_and_exit(error_message,error_message,target_symbol);\n  }\n  symbol_slot = (long *)htab_find_slot(DAT_001278d0,symbol_pointers,1);\n  error_message = DAT_001278c8;\n  *symbol_slot = (long)symbol_pointers;\n  symbol_name_copy = symbol_pointers[1];\n  symbol_pointers = (char **)htab_find_slot(error_message,symbol_name_copy,1);\n  *symbol_pointers = symbol_name_copy;\n  return result;\n}\n\n",
            "current_name": "check_symbol_redefinition_00108d9a",
            "entrypoint": "0x00108d9a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "dcgettext": "get_error_message",
                "htab_find": "find_in_hashtable",
                "htab_find_slot": "find_slot_in_hashtable",
                "lVar3": "symbol_found",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "pcVar2": "symbol_name_copy",
                "plVar5": "symbol_slot",
                "ppcVar1": "symbol_pointers",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "strdup": "duplicate_string",
                "uVar4": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108e76": {
            "additional_data": {
                "FUN_00108e76": {
                    "1": "parse_decimal",
                    "2": "extract_integer_from_byte_array",
                    "4": "parse_integer",
                    "5": "extract_integer_from_string"
                },
                "F_ExtractInteger": {
                    "1": "extract_integer"
                },
                "bVar1": {
                    "1": "byte_value",
                    "12": "current_char",
                    "13": "current_byte"
                },
                "iVar2": {
                    "1": "numeric_value",
                    "15": "result",
                    "7": "parsed_integer"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "data",
                    "4": "input_string",
                    "5": "byte_array_ptr",
                    "7": "string_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "code": "\nint extract_integer_from_string_00108e76(byte **string_ptr)\n\n{\n  byte current_byte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_byte = **string_ptr;\n    if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) break;\n    *string_ptr = *string_ptr + 1;\n    result = result * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return result;\n}\n\n",
            "current_name": "extract_integer_from_string_00108e76",
            "entrypoint": "0x00108e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108e76": "extract_integer_from_string_00108e76",
                "bVar1": "current_byte",
                "iVar2": "result",
                "param_1": "string_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108ea1": {
            "additional_data": {
                "*param_1": {
                    "1": "input_string"
                },
                "*param_2": {
                    "1": "parsed_number"
                },
                "FUN_00108ea1": {
                    "1": "parse_and_extract_number",
                    "12": "parse_number",
                    "2": "parse_number_from_string",
                    "6": "parse_integer"
                },
                "_sch_istable": {
                    "1": "char_is_table",
                    "3": "char_table"
                },
                "iVar1": {
                    "1": "digit",
                    "2": "current_value",
                    "3": "temp_value"
                },
                "param_1": {
                    "1": "byte_array",
                    "11": "input_ptr",
                    "2": "byte_array_ptr",
                    "3": "input_data",
                    "4": "input"
                },
                "param_2": {
                    "1": "result_ptr",
                    "2": "output_integer",
                    "3": "parsed_number",
                    "4": "output_ptr",
                    "5": "output"
                },
                "pbVar2": {
                    "1": "input_pos",
                    "13": "current_byte",
                    "3": "input",
                    "6": "current_char"
                },
                "pbVar3": {
                    "1": "next_char_ptr",
                    "14": "next_byte",
                    "2": "next_byte_ptr",
                    "4": "next_ptr",
                    "6": "next_char"
                },
                "uVar4": {
                    "1": "parsed_value",
                    "26": "result",
                    "3": "output"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d21c",
                "FUN_0010d882"
            ],
            "code": "\nulong parse_number_00108ea1(byte **input_ptr,int *output)\n\n{\n  int parsed_number;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input_ptr;\n  result = 0;\n  if (((&char_table)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    parsed_number = (char)*current_byte + -0x30;\n    *output = parsed_number;\n    *input_ptr = next_byte;\n    if (((&char_table)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        parsed_number = parsed_number * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&char_table)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input_ptr = next_byte;\n        *output = parsed_number;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "current_name": "parse_number_00108ea1",
            "entrypoint": "0x00108ea1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "_sch_istable": "char_table",
                "iVar1": "parsed_number",
                "param_1": "input_ptr",
                "param_2": "output",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f05": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "DAT_00108f08": {
                    "1": "result"
                },
                "FUN_00108f05": {
                    "1": "get_constant",
                    "12": "get_one",
                    "2": "is_one",
                    "9": "get_return_value"
                },
                "return": {
                    "1": "flag",
                    "2": "result"
                },
                "return value": {
                    "1": "return_value"
                },
                "undefined": {
                    "1": "int",
                    "3": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nvoid get_one_00108f05(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_00108f05",
            "entrypoint": "0x00108f05",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f05": "get_one_00108f05",
                "return": "result",
                "undefined": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f08": {
            "additional_data": {
                "FUN_00108f08": {
                    "1": "parse_debug_source",
                    "10": "debug_start_source",
                    "2": "find_debug_source",
                    "5": "add_source_file"
                },
                "_stderr": {
                    "1": "standard_error",
                    "2": "error_output"
                },
                "bVar9": {
                    "1": "byte_var",
                    "2": "temp_byte",
                    "3": "flag",
                    "7": "byte_value"
                },
                "dcgettext": {
                    "1": "get_string"
                },
                "filename_cmp": {
                    "2": "compare_filenames"
                },
                "fprintf": {
                    "1": "print_string"
                },
                "iVar1": {
                    "1": "result",
                    "11": "cmp_result",
                    "15": "comparison_result",
                    "3": "filename_comparison_result"
                },
                "lVar5": {
                    "1": "loop_count",
                    "25": "loop_counter",
                    "3": "counter"
                },
                "param_1": {
                    "1": "debug_ctx",
                    "2": "debug_context",
                    "3": "source",
                    "5": "source_manager"
                },
                "param_2": {
                    "1": "param2",
                    "30": "filename"
                },
                "pcVar7": {
                    "1": "debug_set_filename",
                    "19": "current_filename",
                    "2": "empty_string",
                    "3": "debug_filename"
                },
                "puVar3": {
                    "1": "debug_source",
                    "11": "current_entry",
                    "2": "source_list",
                    "3": "current_source",
                    "4": "current_node"
                },
                "puVar4": {
                    "1": "prev_entry",
                    "2": "temp_pointer",
                    "4": "previous_node",
                    "8": "previous_entry"
                },
                "puVar6": {
                    "1": "entry_address_ptr",
                    "2": "head_entry",
                    "3": "head_node",
                    "4": "source_list"
                },
                "puVar8": {
                    "1": "last_ptr",
                    "2": "previous_entry",
                    "6": "new_entry"
                },
                "uVar2": {
                    "1": "success_indicator",
                    "23": "result",
                    "3": "success_flag"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "filename_cmp",
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source_manager,char *filename)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined8 *current_entry;\n  undefined8 *previous_entry;\n  long loop_counter;\n  undefined8 *source_list;\n  char *current_filename;\n  undefined8 *new_entry;\n  byte byte_value;\n  \n  byte_value = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_manager + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(error_output,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_entry = *(undefined8 **)(*(long *)(source_manager + 8) + 8); current_entry != (undefined8 *)0x0;\n        current_entry = (undefined8 *)*current_entry) {\n      comparison_result = filename_cmp(current_entry[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_entry = (undefined8 *)xmalloc(0x18);\n    source_list = *(undefined8 **)(source_manager + 0x10);\n    new_entry = current_entry;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)new_entry = 0;\n      new_entry = (undefined8 *)((long)new_entry + (ulong)byte_value * -8 + 4);\n    }\n    current_entry[1] = current_filename;\n    new_entry = (undefined8 *)*source_list;\n    while (previous_entry = new_entry, previous_entry != (undefined8 *)0x0) {\n      source_list = previous_entry;\n      new_entry = (undefined8 *)*previous_entry;\n    }\n    *source_list = current_entry;\nLAB_00108fad:\n    *(undefined8 **)(source_manager + 0x10) = current_entry;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "debug_start_source_00108f08",
            "entrypoint": "0x00108f08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "_stderr": "error_output",
                "bVar9": "byte_value",
                "dcgettext": "get_error_message",
                "filename_cmp": "compare_filenames",
                "fprintf": "print_string",
                "iVar1": "comparison_result",
                "lVar5": "loop_counter",
                "param_1": "source_manager",
                "param_2": "filename",
                "pcVar7": "current_filename",
                "puVar3": "current_entry",
                "puVar4": "previous_entry",
                "puVar6": "source_list",
                "puVar8": "new_entry",
                "uVar2": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fb9": {
            "additional_data": {
                "FUN_00108fb9": {
                    "1": "print_bad_stab_error_message",
                    "16": "print_bad_stab",
                    "2": "print_stab_error",
                    "8": "print_error_message"
                },
                "__format": {
                    "1": "error_msg",
                    "2": "error_message",
                    "21": "format_string",
                    "3": "error_format",
                    "4": "error_message_format"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "param_1": {
                    "1": "stab_string",
                    "2": "stab_message",
                    "20": "error_message",
                    "4": "stab"
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_bad_stab_00108fb9(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(error_stream,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_bad_stab_00108fb9",
            "entrypoint": "0x00108fb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "__format": "format_string",
                "_stderr": "error_stream",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fe8": {
            "additional_data": {
                "FUN_00108fe8": {
                    "25": "print_warning",
                    "6": "print_warning_message"
                },
                "__format": {
                    "1": "translation",
                    "13": "warning_format",
                    "17": "format_string"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "in_RAX": {
                    "1": "format_specifier",
                    "2": "rax_value",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "input1",
                    "11": "message",
                    "2": "filename",
                    "3": "error_message",
                    "4": "file_name",
                    "5": "message1"
                },
                "param_2": {
                    "1": "input2",
                    "10": "source",
                    "2": "file_name",
                    "3": "message",
                    "4": "error_message",
                    "5": "message2"
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109a32"
            ],
            "code": "\n\n\nvoid print_warning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 return_value;\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(error_output,format_string,source,message,return_value);\n  return;\n}\n\n",
            "current_name": "print_warning_00108fe8",
            "entrypoint": "0x00108fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "__format": "format_string",
                "_stderr": "error_output",
                "in_RAX": "return_value",
                "param_1": "message",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109022": {
            "additional_data": {
                "FUN_00109022": {
                    "1": "validate_type_index",
                    "2": "extract_file_type",
                    "5": "validate_and_allocate_memory",
                    "9": "process_file"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "auVar8": {
                    "1": "return_data",
                    "16": "return_value",
                    "2": "return_val",
                    "8": "result"
                },
                "auVar8:_0_8_": {
                    "1": "type_pointer"
                },
                "auVar8:_8_8_": {
                    "1": "param4"
                },
                "bVar7": {
                    "1": "temp_byte",
                    "2": "loop_var",
                    "3": "byte_flag",
                    "5": "byte_value",
                    "9": "byte_var"
                },
                "lVar4": {
                    "1": "loop_index",
                    "2": "counter",
                    "23": "loop_counter",
                    "3": "loop_var"
                },
                "param_1": {
                    "1": "file_handler",
                    "2": "file_descriptor",
                    "3": "file_data",
                    "4": "file_index",
                    "7": "file_number"
                },
                "param_2": {
                    "1": "type_file_number",
                    "2": "type_file_numbers",
                    "3": "type_indices",
                    "4": "file_number",
                    "5": "file_numbers",
                    "6": "type_index"
                },
                "param_3": {
                    "1": "data1",
                    "2": "error_message",
                    "3": "param_3",
                    "5": "arg3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "var4",
                    "3": "param_4",
                    "5": "arg4",
                    "7": "param4"
                },
                "pcVar2": {
                    "1": "error_string",
                    "18": "error_message",
                    "2": "err_msg",
                    "8": "error_msg"
                },
                "plVar3": {
                    "1": "file_type_pointer",
                    "2": "file_data",
                    "5": "result",
                    "6": "allocated_memory"
                },
                "pplVar6": {
                    "1": "file_ptr_array",
                    "2": "ptr_ptr"
                },
                "uVar1": {
                    "1": "index_val",
                    "2": "index",
                    "4": "file_number",
                    "9": "type_index"
                },
                "uVar5": {
                    "1": "current_index",
                    "2": "index",
                    "3": "type_file_number",
                    "9": "type_index"
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\n\n\nundefined  [16] process_file_00109022(long file_number,uint *type_index,undefined8 param3,undefined8 param4)\n\n{\n  uint type_index;\n  char *error_message;\n  long *allocated_memory;\n  long loop_counter;\n  uint type_index;\n  long **pointer_to_pointer;\n  byte byte_var;\n  undefined return_value [16];\n  \n  byte_var = 0;\n  type_index = *type_index;\n  type_index = type_index[1];\n  if (((int)type_index < 0) || (*(uint *)(file_number + 0x80) <= type_index)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(error_stream,error_message,(ulong)type_index);\n  }\n  else {\n    if (-1 < (int)type_index) {\n      pointer_to_pointer = (long **)(*(long *)(file_number + 0x88) + (long)(int)type_index * 8);\n      for (type_index = type_index; 0xf < (int)type_index; type_index = type_index - 0x10) {\n        if (*pointer_to_pointer == (long *)0x0) {\n          allocated_memory = (long *)xmalloc(0x88);\n          *pointer_to_pointer = allocated_memory;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)allocated_memory = 0;\n            allocated_memory = (long *)((long)allocated_memory + (ulong)byte_var * -8 + 4);\n          }\n        }\n        pointer_to_pointer = (long **)*pointer_to_pointer;\n      }\n      if (*pointer_to_pointer == (long *)0x0) {\n        allocated_memory = (long *)xmalloc(0x88);\n        *pointer_to_pointer = allocated_memory;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)allocated_memory = 0;\n          allocated_memory = (long *)((long)allocated_memory + (ulong)byte_var * -8 + 4);\n        }\n      }\n      allocated_memory = *pointer_to_pointer + (long)(int)((type_index >> 4) * -0x10 + type_index) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(error_stream,error_message,(ulong)type_index);\n  }\n  allocated_memory = (long *)0x0;\nLAB_00109117:\n  return_value._8_8_ = param4;\n  return_value._0_8_ = allocated_memory;\n  return return_value;\n}\n\n",
            "current_name": "process_file_00109022",
            "entrypoint": "0x00109022",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109022": "process_file_00109022",
                "_stderr": "error_stream",
                "auVar8": "return_value",
                "bVar7": "byte_var",
                "lVar4": "loop_counter",
                "param_1": "file_number",
                "param_2": "type_index",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar2": "error_message",
                "plVar3": "allocated_memory",
                "pplVar6": "pointer_to_pointer",
                "uVar1": "type_index",
                "uVar5": "type_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010911f": {
            "additional_data": {
                "FUN_0010911f": {
                    "1": "print_bad_mangled_name",
                    "29": "print_error_message"
                },
                "__format": {
                    "1": "mangled_name_format",
                    "12": "format_string",
                    "3": "error_message_format",
                    "4": "error_format",
                    "7": "message_format"
                },
                "param_1": {
                    "1": "input_string",
                    "18": "error_message",
                    "5": "mangled_name",
                    "7": "message"
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_error_message_0010911f(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010911f",
            "entrypoint": "0x0010911f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "__format": "format_string",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010914e": {
            "additional_data": {
                "FUN_0010914e": {
                    "1": "find_type_in_compilation_units",
                    "29": "find_named_type"
                },
                "auVar7": {
                    "10": "return_value",
                    "18": "result"
                },
                "iVar2": {
                    "1": "string_comparison_result",
                    "2": "cmp_result",
                    "28": "comparison_result"
                },
                "lVar1": {
                    "1": "union_address",
                    "17": "current_compilation_unit",
                    "2": "current_comp_unit",
                    "8": "current_unit"
                },
                "lVar5": {
                    "1": "unit_iterator",
                    "2": "type_list",
                    "3": "node",
                    "4": "current_entry"
                },
                "param_1": {
                    "1": "binary",
                    "2": "param",
                    "22": "compilation_unit"
                },
                "param_2": {
                    "1": "type",
                    "26": "type_name",
                    "3": "name"
                },
                "param_3": {
                    "1": "some_param",
                    "2": "stderr",
                    "3": "param_3",
                    "6": "param3"
                },
                "param_4": {
                    "1": "undefined_param_4",
                    "2": "ptr2",
                    "3": "param_4",
                    "4": "result",
                    "5": "param4",
                    "6": "unused_param_2"
                },
                "puVar4": {
                    "1": "ptr_iterator",
                    "2": "type_list",
                    "3": "current_element",
                    "4": "current_node",
                    "7": "current_entry"
                },
                "puVar6": {
                    "1": "ptr2",
                    "2": "unit_list",
                    "3": "current_unit_entry"
                },
                "uVar3": {
                    "1": "error_string",
                    "2": "message",
                    "27": "error_message"
                }
            },
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 param3,undefined8 unused_param_2)\n\n{\n  long current_compilation_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_entry;\n  long current_entry;\n  undefined8 *current_unit_entry;\n  undefined result [16];\n  \n  current_compilation_unit = *(long *)(compilation_unit + 8);\n  if (current_compilation_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (current_entry = *(long *)(compilation_unit + 0x20); current_entry != 0; current_entry = *(long *)(current_entry + 8)) {\n      if (*(undefined8 **)(current_entry + 0x28) != (undefined8 *)0x0) {\n        for (current_entry = (undefined8 *)**(undefined8 **)(current_entry + 0x28); current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (current_unit_entry = *(undefined8 **)(current_compilation_unit + 8); current_unit_entry != (undefined8 *)0x0;\n        current_unit_entry = (undefined8 *)*current_unit_entry) {\n      if ((undefined8 *)current_unit_entry[2] != (undefined8 *)0x0) {\n        for (current_entry = *(undefined8 **)(undefined8 *)current_unit_entry[2]; current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = unused_param_2;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_entry[4];\n  goto LAB_00109223;\n}\n\n",
            "current_name": "find_named_type_0010914e",
            "entrypoint": "0x0010914e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "auVar7": "result",
                "iVar2": "comparison_result",
                "lVar1": "current_compilation_unit",
                "lVar5": "current_entry",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "param3",
                "param_4": "unused_param_2",
                "puVar4": "current_entry",
                "puVar6": "current_unit_entry",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010922b": {
            "additional_data": {
                "FUN_0010922b": {
                    "1": "compare_data",
                    "14": "check_equality",
                    "7": "compare_values"
                },
                "bVar12": {
                    "1": "boolean_result",
                    "11": "result",
                    "2": "byte_result",
                    "9": "is_equal"
                },
                "cVar11": {
                    "1": "is_equal",
                    "13": "result",
                    "2": "comparison",
                    "9": "comparison_result"
                },
                "iVar13": {
                    "1": "var13",
                    "2": "strcmp_result",
                    "3": "cmp_result",
                    "4": "int_var",
                    "9": "comparison_result"
                },
                "lVar19": {
                    "1": "temp_4",
                    "14": "offset",
                    "2": "index"
                },
                "lVar22": {
                    "1": "iterator5",
                    "2": "temp_offset",
                    "3": "l_var22"
                },
                "lVar6": {
                    "1": "type1_ptr",
                    "2": "val1",
                    "3": "long_var1",
                    "7": "length1"
                },
                "lVar7": {
                    "1": "l_var7",
                    "2": "val2",
                    "3": "long_var2",
                    "7": "length2"
                },
                "lVar8": {
                    "1": "len2temp",
                    "2": "l_var8",
                    "3": "long_var3",
                    "6": "length3"
                },
                "local_48": {
                    "1": "local_48",
                    "2": "local_pointer2",
                    "3": "local_array2"
                },
                "local_58": {
                    "1": "ptr_linked_value",
                    "2": "local_array2",
                    "4": "local_ptr2",
                    "5": "ptr_list"
                },
                "local_70": {
                    "1": "local_ptr_array2",
                    "2": "local_pointer",
                    "4": "local_ptr1",
                    "6": "local_array1"
                },
                "param_1": {
                    "1": "binary",
                    "12": "param1",
                    "2": "input_param",
                    "3": "input"
                },
                "param_2": {
                    "1": "array_1",
                    "10": "array1",
                    "2": "data1",
                    "4": "value1"
                },
                "param_3": {
                    "1": "input_3",
                    "10": "array2",
                    "2": "param3",
                    "4": "value2"
                },
                "pcVar10": {
                    "1": "temp_char_2",
                    "2": "char_var2",
                    "6": "str2",
                    "7": "string2",
                    "8": "char_ptr2"
                },
                "pcVar9": {
                    "1": "char_ptr_3",
                    "2": "char_var1",
                    "6": "str1",
                    "7": "string1",
                    "8": "char_ptr1"
                },
                "plStack_50": {
                    "1": "call_stack",
                    "2": "ptr_stack"
                },
                "plVar18": {
                    "1": "result_ptr",
                    "2": "ptr3",
                    "3": "ptr1"
                },
                "plVar19": {
                    "1": "ptr_arr2"
                },
                "plVar20": {
                    "1": "pointer_var_6",
                    "2": "long_ptr2",
                    "3": "ptr2"
                },
                "plVar21": {
                    "1": "ptr_array4",
                    "2": "long_ptr3",
                    "3": "ptr3"
                },
                "ppcVar4": {
                    "1": "pointer_to_pointer_string1",
                    "2": "ptr_ptr2",
                    "3": "ptr_string_array1"
                },
                "ppcVar5": {
                    "1": "ptr_ptr_str2",
                    "2": "ptr_ptr3",
                    "3": "ptr_str2"
                },
                "pplVar3": {
                    "1": "type1_ptr",
                    "4": "ptr_ptr1"
                },
                "puVar16": {
                    "1": "ptr2",
                    "10": "ptr1",
                    "3": "pointer1"
                },
                "puVar17": {
                    "1": "pointer_var_4",
                    "10": "ptr2",
                    "3": "pointer2"
                },
                "uVar1": {
                    "1": "size1",
                    "2": "value_1",
                    "7": "value1",
                    "8": "type1"
                },
                "uVar14": {
                    "1": "type1_real",
                    "12": "real_type1",
                    "2": "type3",
                    "6": "type1"
                },
                "uVar15": {
                    "1": "u_var_2",
                    "12": "real_type2",
                    "2": "type4",
                    "6": "type2"
                },
                "uVar2": {
                    "1": "input_value_2",
                    "2": "elem_type2",
                    "7": "value2",
                    "8": "type2"
                }
            },
            "called": [
                "FUN_00112b6e",
                "strcmp",
                "FUN_0010922b",
                "abort"
            ],
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "code": "\nbyte check_equality_0010922b(long param1,long *array1,long *array2)\n\n{\n  uint type1;\n  uint type2;\n  long **ptr_ptr1;\n  char **ptr_string_array1;\n  char **ptr_string_array2;\n  long length1;\n  long length2;\n  long length3;\n  char *char_ptr1;\n  char *char_ptr2;\n  char result;\n  byte result;\n  int comparison_result;\n  undefined8 real_type1;\n  undefined8 real_type2;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *ptr1;\n  long offset;\n  long *ptr2;\n  long *ptr3;\n  long offset2;\n  long *local_array1;\n  undefined8 *ptr_list;\n  long *ptr_stack;\n  long *local_array2;\n  \n  ptr1 = array2;\n  if (array1 == (long *)0x0) {\nLAB_00109241:\n    return array2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    type1 = *(uint *)array1;\n    if (type1 == 1) goto code_r0x00109263;\n    while (type2 = *(uint *)array2, type2 == 1) {\n      array2 = **(long ***)array2[2];\n      if (array2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (type1 != 0x16) break;\n    if (type2 != 0x17) goto LAB_001092cb;\n    array1 = *(long **)(array1[2] + 8);\n    if (array1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((type1 == 0x17) && (type2 == 0x16)) {\n    array2 = *(long **)(array2[2] + 8);\n    ptr1 = array2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (type1 == 3) {\n    return *(char *)(array1 + 2) == *(char *)(array2 + 2);\n  }\n  if (type1 < 4) {\n    if (type1 == 2) {\n      return true;\n    }\n  }\n  else if (type1 - 4 < 3) {\n    return true;\n  }\n  ptr_list = *(undefined8 **)(param1 + 0x58);\n  for (ptr2 = ptr_list; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == array1) && ((long *)ptr2[2] == array2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &ptr_list;\n  ptr_stack = array1;\n  local_array2 = array2;\n  switch(type1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr1 = (long *)array1[2];\n    ptr_ptr1 = (long **)array2[2];\n    if (ptr1 == (long *)0x0) {\n      result = ptr_ptr1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_ptr1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)ptr1 + 0xc)) &&\n       (*(uint *)((long)ptr1 + 0xc) == *(uint *)((long)ptr_ptr1 + 0xc))) goto LAB_001097af;\n    ptr2 = (undefined8 *)*ptr1;\n    local_array1 = *ptr_ptr1;\n    if (((ptr2 == (undefined8 *)0x0) == (local_array1 == (long *)0x0)) &&\n       ((((ptr1[2] == 0) == (ptr_ptr1[2] == (long *)0x0) &&\n         ((ptr1[3] == 0) == (ptr_ptr1[3] == (long *)0x0))) &&\n        ((ptr1[4] == 0) == (ptr_ptr1[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr1[4] != 0) &&\n           (result = check_equality_0010922b(param1,ptr1[4],ptr_ptr1[4]), result == '\\0'))\n        goto LAB_00109382;\n        ptr3 = (long *)ptr1[2];\n        if (ptr3 == (long *)0x0) {\nLAB_00109540:\n          ptr2 = (undefined8 *)ptr1[3];\n          if (ptr2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr1 = ptr_ptr1[3];\n          while( true ) {\n            ptr_string_array2 = (char **)*ptr2;\n            if (ptr_string_array2 == (char **)0x0) {\n              result = *ptr1 == 0;\n              goto LAB_001099c4;\n            }\n            ptr_string_array1 = (char **)*ptr1;\n            if (ptr_string_array1 == (char **)0x0) break;\n            if ((**ptr_string_array2 != **ptr_string_array1) || (comparison_result = strcmp(*ptr_string_array2,*ptr_string_array1), comparison_result != 0))\n            break;\n            char_ptr1 = ptr_string_array2[1];\n            char_ptr2 = ptr_string_array1[1];\n            if ((char_ptr1 == (char *)0x0) != (char_ptr2 == (char *)0x0)) break;\n            if (char_ptr1 != (char *)0x0) {\n              offset2 = 0;\n              while( true ) {\n                ptr_string_array2 = *(char ***)(char_ptr1 + offset2);\n                ptr_string_array1 = *(char ***)(char_ptr2 + offset2);\n                if (ptr_string_array2 == (char **)0x0) break;\n                if (ptr_string_array1 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptr_string_array2 != **ptr_string_array1) ||\n                     ((((ulong)ptr_string_array2[2] ^ (ulong)ptr_string_array1[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr_string_array2[3] != ptr_string_array1[3] ||\n                     ((((ptr_string_array2[4] == (char *)0x0) != (ptr_string_array1[4] == (char *)0x0) ||\n                       (comparison_result = strcmp(*ptr_string_array2,*ptr_string_array1), comparison_result != 0)) ||\n                      (result = check_equality_0010922b(param1,ptr_string_array2[1],ptr_string_array1[1]), result == '\\0')))))) ||\n                   ((ptr_string_array2[4] != (char *)0x0 &&\n                    (result = check_equality_0010922b(param1,ptr_string_array2[4],ptr_string_array1[4]), result == '\\0'))))\n                goto LAB_00109382;\n                offset2 = offset2 + 8;\n              }\n              if (ptr_string_array1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr2 = ptr2 + 1;\n            ptr1 = ptr1 + 1;\n          }\n        }\n        else {\n          ptr2 = ptr_ptr1[2];\n          for (; ptr2 = (undefined8 *)*ptr3, ptr2 != (undefined8 *)0x0;\n              ptr3 = ptr3 + 1) {\n            ptr1 = (undefined8 *)*ptr2;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (result = check_equality_0010922b(param1,*ptr2,*ptr1), result == '\\0'))\n            goto LAB_00109382;\n            ptr2 = ptr2 + 1;\n          }\n          if (*ptr2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptr_string_array2 = (char **)*ptr2, ptr_string_array2 != (char **)0x0; ptr2 = ptr2 + 1) {\n          ptr_string_array1 = (char **)*local_array1;\n          if (ptr_string_array1 == (char **)0x0) goto LAB_00109382;\n          char_ptr1 = *ptr_string_array1;\n          char_ptr2 = *ptr_string_array2;\n          if ((*char_ptr2 != *char_ptr1) ||\n             ((((ulong)ptr_string_array2[2] ^ (ulong)ptr_string_array1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptr_string_array2 + 0x14) == '\\0') {\n            if (ptr_string_array2[3] == ptr_string_array1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparison_result = strcmp(ptr_string_array2[3],ptr_string_array1[3]);\n          if (comparison_result != 0) goto LAB_00109382;\nLAB_00109480:\n          comparison_result = strcmp(char_ptr2,char_ptr1);\n          if (((comparison_result != 0) || (ptr_string_array2[1] == (char *)0x0)) || (ptr_string_array1[1] == (char *)0x0))\n          goto LAB_00109382;\n          real_type1 = get_real_type_00112b6e(ptr_string_array1[1],0);\n          real_type2 = get_real_type_00112b6e(ptr_string_array2[1],0);\n          result = check_equality_0010922b(param1,real_type2,real_type1);\n          if (result == '\\0') goto LAB_00109382;\n          local_array1 = local_array1 + 1;\n        }\n        if (*local_array1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr1 = (long *)array1[2];\n    ptr3 = (long *)array2[2];\n    if (ptr1 == (long *)0x0) {\n      result = ptr3 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr3 == (long *)0x0) goto LAB_00109382;\n    offset2 = *ptr1;\n    length1 = *ptr3;\n    offset = 0;\n    length2 = ptr1[1];\n    length3 = ptr3[1];\n    do {\n      char_ptr1 = *(char **)(offset2 + offset);\n      if (char_ptr1 == (char *)0x0) {\n        result = *(long *)(length1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      char_ptr2 = *(char **)(length1 + offset);\n      if (((char_ptr2 == (char *)0x0) || (*char_ptr1 != *char_ptr2)) ||\n         (*(long *)(length2 + offset) != *(long *)(length3 + offset))) break;\n      comparison_result = strcmp(char_ptr1,char_ptr2);\n      offset = offset + 8;\n    } while (comparison_result == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = check_equality_0010922b(param1,array1[2],array2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)array1[2] + 2) == *(char *)((undefined8 *)array2[2] + 2)) &&\n       (result = check_equality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n       result != '\\0')) {\n      ptr1 = *(long **)(array1[2] + 8);\n      ptr3 = *(long **)(array2[2] + 8);\n      if ((ptr1 == (long *)0x0) == (ptr3 == (long *)0x0)) {\n        if (ptr1 == (long *)0x0) goto LAB_001097af;\n        while (((*ptr1 != 0 && (*ptr3 != 0)) &&\n               (result = check_equality_0010922b(param1), result != '\\0'))) {\n          ptr1 = ptr1 + 1;\n          ptr3 = ptr3 + 1;\n        }\nLAB_0010995d:\n        if (*ptr1 != 0) goto LAB_00109964;\n        result = *ptr3 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    result = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nLAB_00109862:\n      result = check_equality_0010922b(param1,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    result = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    result = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = check_equality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]);\n    result = 0;\n    if (result != '\\0') {\n      result = check_equality_0010922b(param1,*(undefined8 *)(array1[2] + 8),*(undefined8 *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)array1[2] + 3) == *(char *)((undefined8 *)array2[2] + 3)) &&\n        (result = check_equality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n        result != '\\0')) &&\n       (result = check_equality_0010922b(param1,*(undefined8 *)(array1[2] + 8),\n                              *(undefined8 *)(array2[2] + 8)), result != '\\0')) {\n      ptr1 = *(long **)(array1[2] + 0x10);\n      ptr3 = *(long **)(array2[2] + 0x10);\n      if ((ptr1 == (long *)0x0) == (ptr3 == (long *)0x0)) {\n        if (ptr1 != (long *)0x0) {\n          while (((*ptr1 != 0 && (*ptr3 != 0)) &&\n                 (result = check_equality_0010922b(param1), result != '\\0'))) {\n            ptr1 = ptr1 + 1;\n            ptr3 = ptr3 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr1 = (long *)array2[2];\n    ptr3 = (long *)array1[2];\n    comparison_result = strcmp(*(char **)(*ptr3 + 8),*(char **)(*ptr1 + 8));\n    result = 0;\n    if (comparison_result == 0) {\n      result = check_equality_0010922b(param1,ptr3[1],ptr1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = ptr_list;\n  return result;\ncode_r0x00109263:\n  array1 = **(long ***)array1[2];\n  ptr1 = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "current_name": "check_equality_0010922b",
            "entrypoint": "0x0010922b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "bVar12": "result",
                "cVar11": "result",
                "iVar13": "comparison_result",
                "lVar19": "offset",
                "lVar22": "offset2",
                "lVar6": "length1",
                "lVar7": "length2",
                "lVar8": "length3",
                "local_48": "local_array2",
                "local_58": "ptr_list",
                "local_70": "local_array1",
                "param_1": "param1",
                "param_2": "array1",
                "param_3": "array2",
                "pcVar10": "char_ptr2",
                "pcVar9": "char_ptr1",
                "plStack_50": "ptr_stack",
                "plVar18": "ptr1",
                "plVar20": "ptr2",
                "plVar21": "ptr3",
                "ppcVar4": "ptr_string_array1",
                "ppcVar5": "ptr_string_array2",
                "pplVar3": "ptr_ptr1",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "uVar1": "type1",
                "uVar14": "real_type1",
                "uVar15": "real_type2",
                "uVar2": "type2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a0b": {
            "additional_data": {
                "FUN_00109a0b": {
                    "1": "initialize_and_copy_memory",
                    "19": "copy_and_null_terminate",
                    "3": "copy_and_terminate_string",
                    "4": "copy_and_null_terminate_string"
                },
                "bVar4": {
                    "1": "reverse_index",
                    "2": "is_reversed",
                    "4": "increment",
                    "6": "is_negative",
                    "7": "offset"
                },
                "lVar2": {
                    "1": "bytes_remaining",
                    "11": "i",
                    "2": "remaining_size",
                    "3": "index",
                    "5": "count"
                },
                "param_1": {
                    "1": "source_str",
                    "23": "source",
                    "6": "source_string"
                },
                "param_2": {
                    "1": "source_length",
                    "18": "length",
                    "2": "source_string_length",
                    "3": "string_length",
                    "5": "size"
                },
                "puVar1": {
                    "1": "allocated_memory",
                    "19": "destination",
                    "2": "destination_string",
                    "5": "copied_string"
                },
                "puVar3": {
                    "1": "dest_cursor",
                    "13": "dest_ptr",
                    "2": "dest_pointer",
                    "3": "destination"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "code": "\nvoid copy_and_null_terminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long i;\n  undefined *dest_ptr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  dest_ptr = destination;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *dest_ptr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    dest_ptr = dest_ptr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "current_name": "copy_and_null_terminate_00109a0b",
            "entrypoint": "0x00109a0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "bVar4": "offset",
                "lVar2": "i",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "puVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a32": {
            "additional_data": {
                "FUN_00109a32": {
                    "1": "parse_unsigned_long_number",
                    "2": "parse_and_convert",
                    "3": "parse_unsigned_integer",
                    "6": "parse_numeric_input"
                },
                "__nptr": {
                    "1": "current_position",
                    "10": "current_char",
                    "2": "current_char_ptr",
                    "3": "string"
                },
                "auVar4": {
                    "1": "result_container",
                    "10": "return_value",
                    "15": "result",
                    "2": "return_val"
                },
                "param_1": {
                    "1": "string_pointer",
                    "14": "input_string",
                    "2": "input_strings",
                    "3": "input_ptr",
                    "5": "string_ptr"
                },
                "param_2": {
                    "1": "overflow_flag_ptr",
                    "15": "is_overflow",
                    "3": "error_flag_ptr",
                    "6": "error_flag"
                },
                "param_3": {
                    "1": "end_string",
                    "12": "end_of_string",
                    "3": "end_ptr",
                    "5": "end_of_input"
                },
                "param_4": {
                    "1": "parameter1",
                    "2": "unused_1",
                    "3": "unused_param_4",
                    "4": "unused_param1",
                    "7": "unused_param"
                },
                "param_5": {
                    "1": "arg5",
                    "2": "unused_2",
                    "3": "unused_param_5",
                    "4": "result",
                    "7": "unused_param_2"
                },
                "piVar1": {
                    "1": "error_flag_ptr",
                    "19": "errno_ptr",
                    "2": "error_code"
                },
                "uVar2": {
                    "1": "converted_number",
                    "18": "parsed_value",
                    "3": "parsed_number",
                    "4": "converted_value",
                    "5": "result"
                },
                "uVar3": {
                    "1": "overflow_msg",
                    "20": "error_message",
                    "6": "error_msg"
                }
            },
            "called": [
                "__errno_location",
                "strtoul",
                "dcgettext",
                "FUN_00108fe8"
            ],
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **input_string,undefined *is_overflow,char *end_of_string,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  char *current_char;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (is_overflow != (undefined *)0x0) {\n    *is_overflow = 0;\n  }\n  current_char = *input_string;\n  if ((current_char < end_of_string) && (*current_char != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_char,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (is_overflow == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      print_warning_00108fe8(current_char,error_message);\n    }\n    else {\n      *is_overflow = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = unused_param_2;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "current_name": "parse_numeric_string_00109a32",
            "entrypoint": "0x00109a32",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "__nptr": "current_char",
                "auVar4": "result",
                "param_1": "input_string",
                "param_2": "is_overflow",
                "param_3": "end_of_string",
                "param_4": "unused_param_1",
                "param_5": "unused_param_2",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ab1": {
            "additional_data": {
                "*param_1": {
                    "1": "string_ptr"
                },
                "*param_2": {
                    "1": "output_ptr"
                },
                "FUN_00109ab1": {
                    "1": "parse_stab_description",
                    "2": "parse_and_extract_values",
                    "3": "parse_stab_entry",
                    "7": "parse_function_arguments"
                },
                "LAB_00109b25": {
                    "1": "skip_to_end"
                },
                "auVar4": {
                    "1": "parsed_result",
                    "21": "return_value",
                    "4": "result"
                },
                "param_1": {
                    "1": "argument_string",
                    "17": "input_string",
                    "2": "input_ptr",
                    "3": "string_ptr"
                },
                "param_2": {
                    "1": "parsed_values",
                    "18": "output_values",
                    "2": "output_ptr"
                },
                "param_3": {
                    "1": "param3_value",
                    "15": "param_3",
                    "2": "additional_param_1"
                },
                "param_4": {
                    "1": "param4_value",
                    "15": "param_4",
                    "2": "unused_param"
                },
                "param_5": {
                    "1": "unused_param_3",
                    "19": "param_5"
                },
                "pcVar2": {
                    "1": "current_char_ptr",
                    "29": "current_char"
                },
                "print_bad_stab_00108fb9": {
                    "1": "print_error_message"
                },
                "uVar1": {
                    "1": "parsed_number",
                    "21": "parsed_value",
                    "8": "parsed_value_1"
                },
                "uVar3": {
                    "1": "concatenated_value",
                    "22": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_function_arguments_00109ab1(char **input_string,undefined4 *output_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_value;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    parsed_value = parse_numeric_string_00109a32(input_string,0);\n    *output_values = parsed_value;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      parsed_value = parse_numeric_string_00109a32(input_string,0,param_3);\n      output_values[1] = parsed_value;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto skip_to_end;\n      }\n    }\n    print_error_message(current_char);\n    result = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)parse_numeric_string_00109a32(input_string,0);\n    output_values[1] = (int)current_char;\nskip_to_end:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "parse_function_arguments_00109ab1",
            "entrypoint": "0x00109ab1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ab1": "parse_function_arguments_00109ab1",
                "LAB_00109b25": "skip_to_end",
                "auVar4": "return_value",
                "param_1": "input_string",
                "param_2": "output_values",
                "pcVar2": "current_char",
                "print_bad_stab_00108fb9": "print_error_message",
                "uVar1": "parsed_value",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b2f": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "extract_and_free_next_item",
                    "2": "extract_and_free",
                    "3": "extract_and_free_ptr"
                },
                "__ptr": {
                    "1": "next_value_ptr",
                    "2": "current_element",
                    "4": "next_ptr",
                    "7": "current_ptr",
                    "8": "ptr"
                },
                "__ptr[1]": {
                    "1": "next_of_ptr"
                },
                "param_1": {
                    "1": "arg1",
                    "2": "ptr_address",
                    "3": "data_ptr"
                },
                "puVar1": {
                    "1": "next_item_ptr",
                    "2": "result",
                    "3": "extracted_value",
                    "4": "next_value",
                    "5": "return_value",
                    "8": "next_ptr"
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010a2b9",
                "FUN_0010a0e9",
                "FUN_0010e9a0",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010ebb0",
                "FUN_0010a94e",
                "FUN_0010b948",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010e918",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010eafe",
                "FUN_0010a377",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010a424"
            ],
            "code": "\nundefined8 * extract_and_free_ptr_00109b2f(long input)\n\n{\n  undefined8 *ptr;\n  undefined8 *next_ptr;\n  \n  ptr = *(undefined8 **)(input + 0x60);\n  if (ptr != (undefined8 *)0x0) {\n    next_ptr = (undefined8 *)next_of_ptr;\n    *(undefined8 *)(input + 0x60) = *ptr;\n    free(ptr);\n    return next_ptr;\n  }\n  return ptr;\n}\n\n",
            "current_name": "extract_and_free_ptr_00109b2f",
            "entrypoint": "0x00109b2f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b2f": "extract_and_free_ptr_00109b2f",
                "__ptr": "ptr",
                "__ptr[1]": "next_of_ptr",
                "param_1": "input",
                "puVar1": "next_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b52": {
            "additional_data": {
                "FUN_00109b52": {
                    "1": "create_and_update_data_entry",
                    "12": "initialize_data_structure",
                    "2": "create_data_structure",
                    "3": "create_data_entry",
                    "5": "initialize_data"
                },
                "ZEXT816": {
                    "1": "zero_padding"
                },
                "ZEXT816(0)": {
                    "1": "zero_initialized_array"
                },
                "param_1": {
                    "1": "existing_data_structure",
                    "3": "data_structure_ptr",
                    "8": "data_structure"
                },
                "param_2": {
                    "1": "data",
                    "10": "source_string",
                    "2": "string",
                    "8": "input_string"
                },
                "param_3": {
                    "1": "arg1",
                    "2": "additional_data",
                    "4": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "char_param",
                    "2": "param4_value",
                    "4": "flag",
                    "5": "param_4",
                    "7": "param4"
                },
                "param_5": {
                    "1": "count",
                    "2": "error_code",
                    "4": "status",
                    "5": "param_5",
                    "7": "param5"
                },
                "puVar2": {
                    "1": "new_object",
                    "2": "new_data_structure",
                    "4": "new_entry",
                    "8": "allocated_memory"
                },
                "puVar2[2]": {
                    "1": "allocated_memory_ptr[2]"
                },
                "puVar2[4]": {
                    "1": "allocated_memory_ptr[4]"
                },
                "puVar2[6]": {
                    "1": "allocated_memory_ptr[6]"
                },
                "uVar1": {
                    "1": "old_data",
                    "2": "previous_value",
                    "3": "original_value",
                    "5": "temp_var1"
                },
                "uVar3": {
                    "1": "str_dup",
                    "15": "duplicated_string",
                    "2": "temp_var2",
                    "3": "duplicate_string",
                    "4": "copied_string"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                }
            },
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010a2b9",
                "FUN_0010a0e9",
                "FUN_00109cf4",
                "FUN_00109dfe",
                "FUN_0010a69a",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010b948",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_0010a377",
                "FUN_00109d97",
                "FUN_0010a424",
                "FUN_0010e453"
            ],
            "code": "\nundefined initialize_data_structure_00109b52(long data_structure,undefined8 source_string,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 temp_var1;\n  undefined8 *allocated_memory;\n  undefined8 duplicated_string;\n  \n  allocated_memory = (undefined8 *)xmalloc(0x40);\n  duplicated_string = xstrdup(source_string);\n  allocated_memory_ptr[2] = param3;\n  *(undefined (*) [16])(allocated_memory + 4) = zero_initialized_array;\n  *(undefined (*) [16])(allocated_memory + 6) = zero_initialized_array;\n  temp_var1 = *(undefined8 *)(data_structure + 0x60);\n  *(undefined *)((long)allocated_memory + 0x1c) = param4;\n  *(undefined4 *)(allocated_memory + 3) = param5;\n  *(undefined8 **)(data_structure + 0x60) = allocated_memory;\n  *allocated_memory = temp_var1;\n  allocated_memory[1] = duplicated_string;\n  return 1;\n}\n\n",
            "current_name": "initialize_data_structure_00109b52",
            "entrypoint": "0x00109b52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "ZEXT816": "zero_padding",
                "ZEXT816(0)": "zero_initialized_array",
                "param_1": "data_structure",
                "param_2": "source_string",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar2": "allocated_memory",
                "puVar2[2]": "allocated_memory_ptr[2]",
                "uVar1": "temp_var1",
                "uVar3": "duplicated_string",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109bbb": {
            "additional_data": {
                "FUN_00109bbb": {
                    "1": "append_semicolon_if_needed",
                    "14": "append_semicolon_to_string",
                    "2": "append_semicolon_to_end_of_string",
                    "3": "add_semicolon_to_end_of_string",
                    "4": "add_semicolon_to_string"
                },
                "__s": {
                    "1": "str",
                    "3": "string_to_append",
                    "5": "string",
                    "6": "string_pointer"
                },
                "param_1": {
                    "1": "data",
                    "2": "base_address",
                    "3": "input_param",
                    "4": "input_address",
                    "9": "input"
                },
                "sVar1": {
                    "1": "length",
                    "23": "string_length"
                }
            },
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nbool append_semicolon_to_string_00109bbb(long input)\n\n{\n  char *string_pointer;\n  size_t string_length;\n  \n  if (*(long *)(input + 0x60) != 0) {\n    string_pointer = *(char **)(*(long *)(input + 0x60) + 0x30);\n    if (string_pointer != (char *)0x0) {\n      string_length = strlen(string_pointer);\n      *(undefined2 *)(string_pointer + string_length) = 0x3b;\n    }\n    return string_pointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "current_name": "append_semicolon_to_string_00109bbb",
            "entrypoint": "0x00109bbb",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_string_00109bbb",
                "__s": "string_pointer",
                "param_1": "input",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109be3": {
            "additional_data": {
                "CONCAT71": {
                    "1": "result"
                },
                "FUN_00109be3": {
                    "1": "expand_array_and_add_element",
                    "12": "expand_and_store_data",
                    "2": "expand_array"
                },
                "param_1": {
                    "1": "array_ptr",
                    "2": "buffer",
                    "5": "data_struct",
                    "6": "array",
                    "7": "data"
                },
                "param_2": {
                    "1": "new_data",
                    "15": "value",
                    "3": "data",
                    "4": "element",
                    "5": "new_value"
                },
                "param_3": {
                    "1": "item_size",
                    "10": "flag",
                    "2": "status",
                    "4": "size",
                    "5": "value"
                },
                "puVar2": {
                    "1": "next_element",
                    "2": "ptr",
                    "3": "data_ptr",
                    "5": "new_data_ptr"
                },
                "uVar1": {
                    "1": "new_data_structure_pointer",
                    "2": "new_buffer",
                    "3": "new_data",
                    "7": "realloc_result"
                },
                "uVar3": {
                    "1": "current_index",
                    "24": "current_size",
                    "5": "array_size"
                }
            },
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 expand_and_store_data_00109be3(long data,undefined8 value,undefined4 flag)\n\n{\n  undefined8 realloc_result;\n  undefined8 *new_data_ptr;\n  uint current_size;\n  \n  if (*(uint *)(data + 0x2c) <= *(uint *)(data + 0x28)) {\n    current_size = *(uint *)(data + 0x2c) + 10;\n    *(uint *)(data + 0x2c) = current_size;\n    realloc_result = xrealloc(*(undefined8 *)(data + 0x20),(ulong)current_size << 4);\n    *(undefined8 *)(data + 0x20) = realloc_result;\n  }\n  current_size = *(uint *)(data + 0x28);\n  new_data_ptr = (undefined8 *)((ulong)current_size * 0x10 + *(long *)(data + 0x20));\n  *new_data_ptr = value;\n  *(undefined4 *)(new_data_ptr + 1) = flag;\n  *(uint *)(data + 0x28) = current_size + 1;\n  return result((int7)((ulong)new_data_ptr >> 8),1);\n}\n\n",
            "current_name": "expand_and_store_data_00109be3",
            "entrypoint": "0x00109be3",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT71": "result",
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flag",
                "puVar2": "new_data_ptr",
                "uVar1": "realloc_result",
                "uVar3": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109c2e": {
            "additional_data": {
                "FUN_00109c2e": {
                    "1": "expand_and_store_data",
                    "2": "expand_and_allocate_memory",
                    "3": "expand_array",
                    "4": "expand_and_initialize_array",
                    "5": "resize_and_initialize_array",
                    "6": "resize_array"
                },
                "auVar7": {
                    "1": "result_buffer",
                    "20": "return_value",
                    "4": "result_array",
                    "5": "result"
                },
                "bVar6": {
                    "1": "index_increment",
                    "2": "flag_value",
                    "3": "flag_byte",
                    "7": "is_zero"
                },
                "lVar1": {
                    "1": "realloc_ptr",
                    "2": "new_element",
                    "4": "new_pointer",
                    "5": "new_size"
                },
                "lVar3": {
                    "1": "size_difference",
                    "10": "remaining_size",
                    "2": "remaining_length",
                    "3": "remaining_bytes",
                    "5": "remaining_elements"
                },
                "param_1": {
                    "1": "data",
                    "18": "array"
                },
                "param_2": {
                    "1": "data",
                    "19": "value",
                    "4": "new_value"
                },
                "param_3": {
                    "1": "num_items",
                    "11": "size",
                    "2": "current_size",
                    "3": "new_size",
                    "8": "array_size"
                },
                "param_4": {
                    "1": "condition",
                    "29": "flag"
                },
                "param_5": {
                    "1": "ptr_to_var",
                    "11": "result",
                    "2": "output_array",
                    "3": "output"
                },
                "param_6": {
                    "1": "parameter6",
                    "3": "extra_data",
                    "4": "value",
                    "6": "result",
                    "8": "data"
                },
                "plVar2": {
                    "1": "array_elem",
                    "2": "new_element",
                    "3": "current_element",
                    "4": "array_element",
                    "5": "array_ptr"
                },
                "puVar4": {
                    "1": "tmp_pointer",
                    "2": "byte_ptr",
                    "4": "current_byte",
                    "5": "ptr",
                    "6": "current_element"
                },
                "uVar5": {
                    "1": "old_size",
                    "19": "current_size",
                    "2": "max_size",
                    "4": "array_size"
                }
            },
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "code": "\nundefined  [16]\nresize_array_00109c2e(long array,long value,ulong size,int flag,undefined4 *result,\n            undefined8 data)\n\n{\n  long new_size;\n  long *array_ptr;\n  long remaining_size;\n  undefined *current_element;\n  ulong current_size;\n  byte is_zero;\n  undefined return_value [16];\n  \n  is_zero = 0;\n  size = size & 0xffffffff;\n  current_size = *(ulong *)(array + 0x1b0);\n  if (current_size <= size) {\n    if (current_size == 0) {\n      current_size = 10;\n    }\n    for (; current_size <= size; current_size = current_size * 2) {\n    }\n    new_size = xrealloc(*(undefined8 *)(array + 0x1a8),current_size * 0x18);\n    *(long *)(array + 0x1a8) = new_size;\n    current_element = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + new_size);\n    for (remaining_size = (current_size - *(long *)(array + 0x1b0)) * 0x18; remaining_size != 0; remaining_size = remaining_size + -1) {\n      *current_element = 0;\n      current_element = current_element + (ulong)is_zero * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = current_size;\n  }\n  array_ptr = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*array_ptr == 0) {\n    new_size = *(long *)(array + 0x68);\n    *array_ptr = new_size;\n    *(long *)(array + 0x68) = new_size + 1;\n    array_ptr[1] = value;\n    *(int *)(array_ptr + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(array_ptr + 2) = 0;\n    *(undefined4 *)((long)array_ptr + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)array_ptr + 0x14);\n  }\n  return_value._8_8_ = data;\n  return_value._0_8_ = *array_ptr;\n  return return_value;\n}\n\n",
            "current_name": "resize_array_00109c2e",
            "entrypoint": "0x00109c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109c2e": "resize_array_00109c2e",
                "auVar7": "return_value",
                "bVar6": "is_zero",
                "lVar1": "new_size",
                "lVar3": "remaining_size",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "data",
                "plVar2": "array_ptr",
                "puVar4": "current_element",
                "uVar5": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109cf4": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "initialize_data_structure_with_param",
                    "2": "initialize_and_process_data",
                    "23": "initialize_data_structure",
                    "3": "initialize_data"
                },
                "local_3c": {
                    "1": "value_as_string",
                    "12": "value_string",
                    "2": "value_str",
                    "3": "formatted_value",
                    "4": "converted_value"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "data_structure_ptr",
                    "25": "data_structure"
                },
                "param_2": {
                    "1": "value_param",
                    "23": "value",
                    "4": "param_value"
                },
                "param_3": {
                    "1": "size_param",
                    "16": "flag",
                    "3": "param",
                    "4": "param_flag"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_0010b800",
                "FUN_00109d3e",
                "FUN_0010bba1",
                "FUN_00109ed3",
                "FUN_00109dfe",
                "FUN_00109d97",
                "FUN_00109d5c",
                "FUN_0010e453"
            ],
            "code": "\nvoid initialize_data_structure_00109cf4(undefined8 data_structure,undefined8 value,undefined4 flag)\n\n{\n  char value_string [28];\n  \n  sprintf(value_string,\"%ld\",value);\n  initialize_data_structure_00109cf4_00109b52(data_structure,value_string,value,0,flag);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00109cf4",
            "entrypoint": "0x00109cf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109cf4": "initialize_data_structure_00109cf4",
                "local_3c": "value_string",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d3e": {
            "additional_data": {
                "FUN_00109d3e": {
                    "1": "initialize_and_process_data",
                    "29": "initialize_data_structure"
                },
                "param_1": {
                    "1": "data",
                    "10": "data_structure",
                    "2": "param_ptr",
                    "3": "data_structure_ptr",
                    "8": "param"
                },
                "param_2": {
                    "1": "size_param",
                    "2": "length",
                    "20": "size",
                    "6": "num_elements"
                },
                "uVar1": {
                    "1": "predefined_value",
                    "12": "default_value",
                    "2": "data",
                    "6": "initialized_value"
                }
            },
            "called": [
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_data_structure_00109d3e(undefined8 data_structure,int size)\n\n{\n  undefined8 default_value;\n  \n  default_value = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    default_value = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  initialize_data_structure_00109d3e_00109cf4(data_structure,default_value,size);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00109d3e",
            "entrypoint": "0x00109d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d3e": "initialize_data_structure_00109d3e",
                "param_1": "data_structure",
                "param_2": "size",
                "uVar1": "default_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d5c": {
            "additional_data": {
                "FUN_00109d5c": {
                    "1": "initialize_resizable_array",
                    "12": "initialize_and_resize_array",
                    "13": "initialize_data_structure",
                    "4": "initialize_array"
                },
                "lVar1": {
                    "1": "resized_array_length",
                    "2": "resized_array",
                    "27": "array_size"
                },
                "param_1": {
                    "1": "initial_value",
                    "12": "input_data",
                    "2": "data",
                    "4": "input_parameter",
                    "5": "input_param"
                },
                "uVar2": {
                    "1": "initialized_data_structure",
                    "23": "result",
                    "3": "initialized_structure"
                }
            },
            "called": [
                "FUN_00109cf4",
                "FUN_00109c2e"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 initialize_data_structure_00109d5c(undefined8 input_data)\n\n{\n  long array_size;\n  undefined8 result;\n  \n  array_size = resize_array_00109c2e();\n  if (-1 < array_size) {\n    result = initialize_data_structure_00109d5c_00109cf4(input_data,array_size,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_data_structure_00109d5c",
            "entrypoint": "0x00109d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d5c": "initialize_data_structure_00109d5c",
                "lVar1": "array_size",
                "param_1": "input_data",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d97": {
            "additional_data": {
                "FUN_00109d97": {
                    "1": "process_parameter",
                    "2": "initialize_or_increment_value",
                    "5": "initialize_data_structure",
                    "6": "initialize_or_increment",
                    "7": "initialize_or_increment_data_structure"
                },
                "lVar1": {
                    "1": "index",
                    "13": "counter",
                    "2": "count",
                    "3": "counter_value",
                    "6": "current_value"
                },
                "local_40": {
                    "1": "output_buffer",
                    "2": "buffer",
                    "20": "formatted_string",
                    "4": "output_string"
                },
                "param_1": {
                    "1": "param",
                    "2": "structure_pointer",
                    "3": "data_structure_ptr",
                    "4": "input",
                    "5": "counter",
                    "8": "data_structure"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "code": "\nvoid initialize_or_increment_data_structure_00109d97(long data_structure)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data_structure + 0x70) != 0) {\n    initialize_data_structure_00109cf4(data_structure,*(long *)(data_structure + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data_structure + 0x68);\n  *(long *)(data_structure + 0x68) = counter + 1;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  initialize_data_structure_00109b52(data_structure,formatted_string,counter,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_or_increment_data_structure_00109d97",
            "entrypoint": "0x00109d97",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d97": "initialize_or_increment_data_structure_00109d97",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "data_structure"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109dfe": {
            "additional_data": {
                "FUN_00109dfe": {
                    "1": "initialize_data_structure",
                    "11": "initialize_or_increment",
                    "3": "initialize_or_increment_data",
                    "5": "initialize_or_increment_counter",
                    "6": "initialize_or_increment_data_structure"
                },
                "initialize_data_structure_00109b52": {
                    "1": "initialize_data_structure_with_format"
                },
                "initialize_data_structure_00109cf4": {
                    "1": "initialize_data_structure_with_value"
                },
                "lVar1": {
                    "1": "incremented_value",
                    "2": "previous_value",
                    "4": "current_value",
                    "9": "counter"
                },
                "local_40": {
                    "1": "formatted_counter",
                    "2": "output_string",
                    "20": "formatted_string",
                    "3": "format_string"
                },
                "param_1": {
                    "1": "counter_instance",
                    "2": "input_parameter",
                    "3": "data_pointer",
                    "6": "data_structure"
                }
            },
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_or_increment_00109dfe(long data_structure)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data_structure + 0x70) != 0) {\n    initialize_data_structure_with_value(data_structure,*(long *)(data_structure + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data_structure + 0x68);\n  *(long *)(data_structure + 0x68) = counter + 1;\n  *(long *)(data_structure + 0x70) = counter;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  initialize_data_structure_with_format(data_structure,formatted_string,counter,1,0);\n  return;\n}\n\n",
            "current_name": "initialize_or_increment_00109dfe",
            "entrypoint": "0x00109dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109dfe": "initialize_or_increment_00109dfe",
                "initialize_data_structure_00109b52": "initialize_data_structure_with_format",
                "initialize_data_structure_00109cf4": "initialize_data_structure_with_value",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "data_structure"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109e76": {
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid FUNC_00109e76(long param_1,uint param_2)\n\n{\n  long lVar1;\n  char local_5a [58];\n  \n  lVar1 = *(long *)(param_1 + 0x68);\n  *(long *)(param_1 + 0x68) = lVar1 + 1;\n  sprintf(local_5a,\"%ld=r%ld;%u;0;\",lVar1,lVar1,(ulong)param_2);\n  initialize_data_structure_00109b52(param_1,local_5a,lVar1,1,param_2 * 2);\n  return;\n}\n\n",
            "current_name": "FUNC_00109e76",
            "entrypoint": "0x00109e76",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00109e76": "FUNC_00109e76"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00109ed3": {
            "additional_data": {
                "FUN_00109ed3": {
                    "1": "parse_and_initialize_data",
                    "15": "process_data",
                    "2": "reverse_and_initialize_data",
                    "3": "reverse_and_update_data"
                },
                "__ptr": {
                    "1": "allocated_memory",
                    "12": "extracted_ptr",
                    "2": "extracted_pointer",
                    "3": "ptr",
                    "8": "extracted_data"
                },
                "__s": {
                    "1": "allocated_str",
                    "15": "formatted_string",
                    "2": "formatted_data",
                    "3": "formatted_str",
                    "4": "new_str",
                    "5": "new_string"
                },
                "bVar12": {
                    "1": "zero_byte",
                    "2": "boolean_flag",
                    "3": "byte_value",
                    "4": "flag"
                },
                "cVar3": {
                    "1": "initialize_result",
                    "2": "success_flag",
                    "3": "initialize_success",
                    "9": "result"
                },
                "extract_and_free_ptr_00109b2f": {
                    "1": "extract_and_free_pointer"
                },
                "initialize_data_structure_00109b52": {
                    "1": "initialize_data_structure2"
                },
                "initialize_data_structure_00109cf4": {
                    "1": "initialize_data_structure"
                },
                "lVar6": {
                    "1": "temp_var",
                    "2": "index",
                    "7": "counter"
                },
                "lVar9": {
                    "1": "loop_count",
                    "11": "loop_counter",
                    "2": "counter",
                    "3": "remaining_size",
                    "4": "loop_var"
                },
                "param_1": {
                    "1": "input1",
                    "2": "data",
                    "3": "input_ptr",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "input2",
                    "2": "char_code",
                    "8": "character"
                },
                "param_3": {
                    "1": "input_param3",
                    "2": "int_param",
                    "3": "flags",
                    "5": "param"
                },
                "param_4": {
                    "1": "data",
                    "10": "data_array",
                    "2": "array_pointer",
                    "3": "output_array"
                },
                "param_5": {
                    "1": "data_length",
                    "2": "size_ptr",
                    "3": "size_array",
                    "7": "array_size"
                },
                "pcVar4": {
                    "1": "input_string",
                    "11": "extracted_string",
                    "2": "extracted_data",
                    "3": "str_ptr",
                    "5": "string_ptr"
                },
                "puVar11": {
                    "1": "ptr_increment",
                    "2": "ptr2",
                    "3": "byte_pointer",
                    "4": "data_ptr"
                },
                "sVar5": {
                    "1": "data_length",
                    "17": "string_length",
                    "2": "length",
                    "3": "str_len",
                    "4": "str_length"
                },
                "uVar1": {
                    "1": "temp1",
                    "2": "data_length",
                    "4": "array_size",
                    "5": "size"
                },
                "uVar10": {
                    "1": "computed_buffer_size",
                    "2": "temp_size",
                    "8": "current_size"
                },
                "uVar2": {
                    "1": "temp_count",
                    "2": "temp_value",
                    "4": "new_array_size",
                    "6": "new_size"
                },
                "uVar7": {
                    "1": "return_val",
                    "11": "result",
                    "4": "initialize_result",
                    "5": "init_result",
                    "8": "return_value"
                },
                "uVar8": {
                    "1": "indicator",
                    "2": "is_initialized",
                    "5": "init_flag"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b2f",
                "xmalloc",
                "xrealloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0a0",
                "FUN_0010a0bd",
                "FUN_0010a083",
                "FUN_0010a0d3"
            ],
            "code": "\nundefined8 process_data_00109ed3(long input_param,uint character,undefined4 flag,long *data_array,ulong *array_size)\n\n{\n  ulong size;\n  ulong new_size;\n  char result;\n  char *extracted_string;\n  size_t string_length;\n  char *formatted_string;\n  long count;\n  void *extracted_ptr;\n  undefined8 result;\n  undefined flag;\n  long loop_counter;\n  ulong current_size;\n  undefined *data_ptr;\n  byte flag;\n  \n  flag = 0;\n  count = *(long *)(input_param + 0x60);\n  if (count != 0) {\n    size = *(ulong *)(count + 0x10);\n    if (((long)size < 1) || (data_array == (long *)0x0)) {\n      flag = *(undefined *)(count + 0x1c);\n      extracted_string = (char *)extract_and_free_pointer(input_param);\n      string_length = strlen(extracted_string);\n      formatted_string = (char *)xmalloc(string_length + 2);\n      sprintf(formatted_string,\"%c%s\",(ulong)character,extracted_string);\n      free(extracted_string);\n      count = 0;\n    }\n    else {\n      current_size = *array_size;\n      if (current_size <= size) {\n        if (current_size == 0) {\n          current_size = 10;\n        }\n        for (; current_size <= size; current_size = current_size * 2) {\n        }\n        count = xrealloc(*data_array,current_size * 8);\n        new_size = *array_size;\n        *data_array = count;\n        data_ptr = (undefined *)(count + new_size * 8);\n        for (loop_counter = (current_size - new_size) * 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *data_ptr = 0;\n          data_ptr = data_ptr + (ulong)flag * -2 + 1;\n        }\n        *array_size = current_size;\n      }\n      count = *(long *)(*data_array + size * 8);\n      if ((count != 0) && (*(char *)(*(long *)(input_param + 0x60) + 0x1c) == '\\0')) {\n        extracted_ptr = (void *)extract_and_free_pointer(input_param);\n        free(extracted_ptr);\n        result = initialize_data_structure(input_param,count,flag);\n        return result;\n      }\n      count = *(long *)(input_param + 0x68);\n      *(long *)(input_param + 0x68) = count + 1;\n      extracted_string = (char *)extract_and_free_pointer(input_param);\n      string_length = strlen(extracted_string);\n      formatted_string = (char *)xmalloc(string_length + 0x14);\n      sprintf(formatted_string,\"%ld=%c%s\",count,(ulong)character,extracted_string);\n      free(extracted_string);\n      flag = 1;\n      *(long *)(*data_array + size * 8) = count;\n    }\n    result = initialize_data_structure2(input_param,formatted_string,count,flag,flag);\n    if (result != '\\0') {\n      free(formatted_string);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00109ed3",
            "entrypoint": "0x00109ed3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "__ptr": "extracted_ptr",
                "__s": "formatted_string",
                "bVar12": "flag",
                "cVar3": "result",
                "extract_and_free_ptr_00109b2f": "extract_and_free_pointer",
                "initialize_data_structure_00109b52": "initialize_data_structure2",
                "initialize_data_structure_00109cf4": "initialize_data_structure",
                "lVar6": "count",
                "lVar9": "loop_counter",
                "param_1": "input_param",
                "param_2": "character",
                "param_3": "flag",
                "param_4": "data_array",
                "param_5": "array_size",
                "pcVar4": "extracted_string",
                "puVar11": "data_ptr",
                "sVar5": "string_length",
                "uVar1": "size",
                "uVar10": "current_size",
                "uVar2": "new_size",
                "uVar7": "result",
                "uVar8": "flag",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a083": {
            "additional_data": {
                "0x178": {
                    "1": "ptr_offset1",
                    "6": "offset_1"
                },
                "0x180": {
                    "1": "address_offset_2",
                    "6": "offset_2"
                },
                "0x2a": {
                    "1": "offset",
                    "2": "constant",
                    "5": "constant_value"
                },
                "4": {
                    "1": "iteration_count",
                    "2": "size"
                },
                "DAT_": {
                    "1": "<unchanged>"
                },
                "FUN_0010a083": {
                    "1": "process_data_with_offset",
                    "22": "process_data",
                    "3": "process_and_store_data"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "param_1": {
                    "1": "input",
                    "13": "data",
                    "2": "data_address",
                    "4": "input_data"
                },
                "param_1 + 0x178": {
                    "1": "address_param_1",
                    "2": "data_offset"
                },
                "param_1 + 0x180": {
                    "1": "data_length",
                    "2": "processed_data_end",
                    "3": "data_offset_2"
                },
                "param_2": {
                    "1": "constant_value",
                    "2": "constant_1",
                    "3": "constant"
                },
                "param_3": {
                    "1": "length",
                    "2": "size"
                },
                "param_4": {
                    "1": "offset1"
                },
                "param_5": {
                    "1": "output_data_2"
                },
                "process_data_00109ed3": {
                    "1": "perform_data_processing",
                    "4": "process_data",
                    "6": "process_data_helper"
                },
                "var_1": {
                    "1": "offset_1"
                },
                "var_2": {
                    "1": "offset_2"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a083(long data)\n\n{\n  process_data_0010a083_helper(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "current_name": "process_data_0010a083",
            "entrypoint": "0x0010a083",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a083": "process_data_0010a083",
                "param_1": "data",
                "process_data_00109ed3": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0a0": {
            "additional_data": {
                "+ 0x198": {
                    "1": "address_1"
                },
                "+ 0x1a0": {
                    "1": "address_2"
                },
                "0x198": {
                    "1": "array_index_start",
                    "2": "data_offset_1",
                    "5": "offset_1",
                    "6": "offset1"
                },
                "0x1a0": {
                    "1": "array_index_end",
                    "2": "data_offset_2",
                    "5": "offset_2",
                    "6": "offset2"
                },
                "0x26": {
                    "1": "constant_1",
                    "2": "constant",
                    "4": "constant_value"
                },
                "4": {
                    "1": "argument_count",
                    "2": "constant2"
                },
                "FUN_0010a0a0": {
                    "1": "process_data_and_update",
                    "12": "process_and_update_data",
                    "17": "process_data"
                },
                "param_1": {
                    "1": "input_parameter",
                    "10": "data",
                    "2": "data_address",
                    "3": "data_ptr",
                    "4": "data_pointer",
                    "7": "input_data"
                },
                "param_1 + 0x198": {
                    "1": "output_data_start"
                },
                "param_1 + 0x1a0": {
                    "1": "output_end_ptr"
                },
                "param_2": {
                    "1": "constant",
                    "2": "constant_1"
                },
                "param_3": {
                    "1": "offset",
                    "2": "constant_2"
                },
                "param_4": {
                    "1": "derived_ptr_1"
                },
                "param_5": {
                    "1": "derived_ptr_2"
                },
                "process_data_00109ed3": {
                    "1": "process_data_and_update",
                    "2": "process_data_function",
                    "4": "process_data_helper",
                    "5": "process_data"
                },
                "var_1": {
                    "1": "temp_1"
                },
                "var_2": {
                    "1": "temp_2"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a0a0(long data)\n\n{\n  process_data_0010a0a0(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "current_name": "process_data_0010a0a0",
            "entrypoint": "0x0010a0a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "data",
                "process_data_00109ed3": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0bd": {
            "additional_data": {
                "*(long *)(data_struct + 0x18)": {
                    "1": "ptr_data"
                },
                "*(long *)(param_1 + 0x60) + 0x18": {
                    "1": "data_offset"
                },
                "*(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18)": {
                    "1": "data_offset",
                    "2": "data",
                    "3": "data_ptr",
                    "6": "data_address"
                },
                "0": {
                    "1": "unused2"
                },
                "0x6b": {
                    "1": "value_1",
                    "2": "constant_1",
                    "3": "constant_value",
                    "7": "constant"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<unnamed_variable>": {
                    "1": "ptr1"
                },
                "FUN_0010a0bd": {
                    "28": "process_data",
                    "3": "process_and_send_data"
                },
                "data_offset": {
                    "1": "offset"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "input_data",
                    "20": "data",
                    "3": "data_ptr"
                },
                "param_1 + 0x60": {
                    "1": "data_struct"
                },
                "process_data_00109ed3": {
                    "1": "process_data_function",
                    "3": "process_data",
                    "6": "process_data_helper"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a0bd(long data)\n\n{\n  process_data_0010a0bd_helper(data,0x6b,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "process_data_0010a0bd",
            "entrypoint": "0x0010a0bd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0bd": "process_data_0010a0bd",
                "param_1": "data",
                "process_data_00109ed3": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0d3": {
            "additional_data": {
                "(param_1 + 0x60)": {
                    "1": "data_pointer"
                },
                "*(long *)(param_1 + 0x60)": {
                    "1": "ptr1"
                },
                "*(long *)(param_1 + 0x60) + 0x18": {
                    "2": "ptr_data"
                },
                "*(undefined4  *)(dataPointer + 0x18)": {
                    "1": "target_address"
                },
                "*(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18)": {
                    "1": "data",
                    "2": "ptr_data",
                    "3": "data_offset"
                },
                "*(undefined4 *)(addressPtr + 0x18)": {
                    "1": "value"
                },
                "0": {
                    "1": "constant",
                    "2": "unused_var_2"
                },
                "0x18": {
                    "1": "offset2"
                },
                "0x42": {
                    "1": "value",
                    "3": "constant_value",
                    "9": "constant"
                },
                "0x60": {
                    "1": "offset"
                },
                "<unnamed_variable_1>": {
                    "1": "ptr"
                },
                "<unnamed_variable_2>": {
                    "1": "offset"
                },
                "DAT_param_1": {
                    "1": "data_ptr"
                },
                "FUN_0010a0d3": {
                    "1": "process_and_send_data",
                    "26": "process_data"
                },
                "PTR_param_1": {
                    "1": "data_ptr"
                },
                "param_1": {
                    "1": "data_address",
                    "16": "data",
                    "2": "data_param",
                    "4": "input_data",
                    "5": "input"
                },
                "param_1 + 0x60": {
                    "1": "ptr_input"
                },
                "param_2": {
                    "1": "constant_param"
                },
                "param_3": {
                    "1": "var1"
                },
                "param_4": {
                    "1": "var2"
                },
                "process_data_00109ed3": {
                    "1": "original_function",
                    "12": "process_data_helper",
                    "2": "process_data_subfunction",
                    "4": "process_data"
                },
                "var_1": {
                    "1": "ptr_var"
                },
                "var_2": {
                    "1": "offset_var"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a0d3(long data)\n\n{\n  process_data_0010a0d3_helper(data,0x42,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "process_data_0010a0d3",
            "entrypoint": "0x0010a0d3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0d3": "process_data_0010a0d3",
                "param_1": "data",
                "process_data_00109ed3": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0e9": {
            "additional_data": {
                "FUN_0010a0e9": {
                    "1": "execute_and_initialize_data_structure",
                    "2": "initialize_data",
                    "4": "initialize_data_structure",
                    "6": "process_data",
                    "8": "process_request"
                },
                "__s": {
                    "1": "str_data",
                    "2": "request_data",
                    "21": "extracted_string",
                    "3": "extracted_data"
                },
                "__s_00": {
                    "1": "formatted_request",
                    "10": "formatted_string",
                    "2": "new_string",
                    "3": "formatted_data",
                    "4": "allocated_string",
                    "7": "modified_string"
                },
                "param_1": {
                    "1": "data",
                    "2": "ptr_data",
                    "3": "data_pointer",
                    "7": "request"
                },
                "param_2": {
                    "1": "input_param1",
                    "15": "value1",
                    "3": "param2",
                    "4": "value_1"
                },
                "param_3": {
                    "1": "input_param2",
                    "15": "value2",
                    "3": "param3",
                    "4": "param_3"
                },
                "sVar3": {
                    "1": "len",
                    "15": "string_length",
                    "2": "data_length",
                    "3": "length",
                    "4": "extracted_string_length"
                },
                "uVar1": {
                    "1": "data",
                    "2": "byte_value"
                },
                "uVar2": {
                    "1": "ptr_value2",
                    "4": "return_value",
                    "8": "result"
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "xmalloc",
                "FUN_00109b52",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_request_0010a0e9(long request,undefined8 value1,undefined8 value2)\n\n{\n  undefined byte_value;\n  undefined4 result;\n  char *extracted_string;\n  size_t string_length;\n  char *formatted_string;\n  \n  byte_value = *(undefined *)(*(long *)(request + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(request + 0x60) + 0x18);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(string_length + 100);\n  sprintf(formatted_string,\"r%s;%ld;%ld;\",extracted_string,value1,value2);\n  free(extracted_string);\n  result = initialize_data_structure_00109b52(request,formatted_string,0,byte_value,result);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_request_0010a0e9",
            "entrypoint": "0x0010a0e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0e9": "process_request_0010a0e9",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "param_1": "request",
                "param_2": "value1",
                "param_3": "value2",
                "sVar3": "string_length",
                "uVar1": "byte_value",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a181": {
            "additional_data": {
                "FUN_0010a181": {
                    "1": "generate_data",
                    "24": "process_data"
                },
                "__s": {
                    "1": "extracted_data",
                    "11": "str1",
                    "12": "string1",
                    "3": "string_1"
                },
                "__s_00": {
                    "1": "ptr2",
                    "11": "str2",
                    "12": "string2",
                    "3": "string_2"
                },
                "__s_01": {
                    "1": "composed_string",
                    "2": "combined_str",
                    "5": "result",
                    "6": "result_string"
                },
                "cVar1": {
                    "1": "character1",
                    "2": "flag_value",
                    "3": "char_var",
                    "5": "char_value",
                    "8": "char_flag",
                    "9": "char1"
                },
                "iVar2": {
                    "1": "data_length",
                    "2": "int_value",
                    "3": "int1",
                    "5": "int_var1"
                },
                "iVar3": {
                    "1": "calculation_result",
                    "13": "result",
                    "2": "result_size",
                    "3": "result_value",
                    "4": "int_var2"
                },
                "lVar7": {
                    "1": "temp_variable",
                    "18": "counter",
                    "3": "index",
                    "6": "count"
                },
                "local_41": {
                    "1": "temp_flag",
                    "17": "local_flag",
                    "2": "modified_flag",
                    "5": "default_flag"
                },
                "param_1": {
                    "1": "data1",
                    "2": "input_param",
                    "3": "input_data",
                    "4": "data",
                    "7": "data_struct"
                },
                "param_2": {
                    "1": "input_2",
                    "16": "start",
                    "2": "start_range",
                    "3": "start_value",
                    "7": "start_index"
                },
                "param_3": {
                    "1": "input_3",
                    "16": "end",
                    "2": "end_range",
                    "3": "end_value",
                    "7": "end_index"
                },
                "param_4": {
                    "1": "option",
                    "29": "flag"
                },
                "sVar5": {
                    "1": "size1",
                    "10": "len1",
                    "14": "length1"
                },
                "sVar6": {
                    "1": "length_2",
                    "10": "len2",
                    "14": "length2"
                },
                "uVar4": {
                    "1": "result_value",
                    "17": "return_value",
                    "3": "return_val",
                    "4": "status"
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "xmalloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a181(long data_struct,long start,long end,byte flag)\n\n{\n  char char1;\n  int int_var1;\n  int result;\n  undefined4 return_value;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  long counter;\n  byte local_flag;\n  \n  char1 = *(char *)(*(long *)(data_struct + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_ptr_00109b2f();\n  local_flag = 1;\n  if (char1 == '\\0') {\n    local_flag = *(byte *)(*(long *)(data_struct + 0x60) + 0x1c);\n  }\n  int_var1 = *(int *)(*(long *)(data_struct + 0x60) + 0x18);\n  string2 = (char *)extract_and_free_ptr_00109b2f(data_struct);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  result_string = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *result_string = '\\0';\n    counter = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    counter = *(long *)(data_struct + 0x68);\n    *(long *)(data_struct + 0x68) = counter + 1;\n    sprintf(result_string,\"%ld=@S;\",counter);\n    local_flag = flag;\n  }\n  length1 = strlen(result_string);\n  sprintf(result_string + length1,\"ar%s;%ld;%ld;%s\",string1,start,end,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (start <= end) {\n    result = int_var1 * (((int)end - (int)start) + 1);\n  }\n  return_value = initialize_data_structure_00109b52(data_struct,result_string,counter,local_flag,result);\n  if ((char)return_value != '\\0') {\n    free(result_string);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010a181",
            "entrypoint": "0x0010a181",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "result_string",
                "cVar1": "char1",
                "iVar2": "int_var1",
                "iVar3": "result",
                "lVar7": "counter",
                "local_41": "local_flag",
                "param_1": "data_struct",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "sVar5": "length1",
                "sVar6": "length2",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a2b9": {
            "additional_data": {
                "FUN_0010a2b9": {
                    "1": "decode_and_modify_data",
                    "12": "process_data",
                    "2": "generate_data_structure"
                },
                "__s": {
                    "1": "extracted_text",
                    "17": "extracted_string",
                    "2": "string1",
                    "4": "extracted_data"
                },
                "__s_00": {
                    "1": "modified_data",
                    "2": "str2",
                    "3": "allocated_string",
                    "4": "new_string",
                    "9": "modified_string"
                },
                "auVar4": {
                    "1": "result_object",
                    "26": "result",
                    "4": "return_value"
                },
                "cVar1": {
                    "1": "flag_value",
                    "10": "char_value",
                    "2": "char_1",
                    "5": "char1"
                },
                "lVar3": {
                    "1": "variable_3",
                    "19": "counter",
                    "5": "count"
                },
                "param_1": {
                    "1": "input_ptr",
                    "12": "data_ptr",
                    "2": "input_param",
                    "3": "data",
                    "4": "data_pointer"
                },
                "param_2": {
                    "1": "character",
                    "27": "flag",
                    "3": "condition"
                },
                "param_3": {
                    "1": "param3_value",
                    "2": "input1",
                    "3": "param1",
                    "4": "ptr1",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "result_ptr",
                    "2": "input2",
                    "3": "param2",
                    "4": "ptr2"
                },
                "sVar2": {
                    "1": "source_length",
                    "16": "string_length",
                    "2": "string_len",
                    "3": "data_length"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] process_data_0010a2b9(long data_ptr,char flag,undefined8 param_3,undefined8 ptr2)\n\n{\n  char char_value;\n  char *extracted_string;\n  size_t string_length;\n  char *modified_string;\n  long counter;\n  undefined result [16];\n  \n  char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  string_length = strlen(extracted_string);\n  modified_string = (char *)xmalloc(string_length + 0x1e);\n  if (flag == '\\0') {\n    *modified_string = '\\0';\n    counter = 0;\n    flag = char_value;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(modified_string,\"%ld=@S;\",counter);\n  }\n  string_length = strlen(modified_string);\n  sprintf(modified_string + string_length,\"S%s\",extracted_string);\n  free(extracted_string);\n  result._0_4_ = initialize_data_structure_00109b52(data_ptr,modified_string,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(modified_string);\n  }\n  result._8_8_ = ptr2;\n  return result;\n}\n\n",
            "current_name": "process_data_0010a2b9",
            "entrypoint": "0x0010a2b9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "__s": "extracted_string",
                "__s_00": "modified_string",
                "auVar4": "result",
                "cVar1": "char_value",
                "lVar3": "counter",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_4": "ptr2",
                "sVar2": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a377": {
            "additional_data": {
                "FUN_0010a377": {
                    "1": "reverse_and_initialize_structure",
                    "12": "process_data",
                    "2": "generate_data_structure",
                    "4": "reverse_and_initialize_data_structure"
                },
                "__s": {
                    "1": "prefix_string",
                    "14": "string1",
                    "2": "extracted_string1",
                    "4": "extracted_string"
                },
                "__s_00": {
                    "1": "ptr2",
                    "14": "string2",
                    "2": "str2",
                    "3": "extracted_string_2",
                    "4": "second_string"
                },
                "__s_01": {
                    "1": "composed_string",
                    "2": "concatenated_string",
                    "21": "combined_string"
                },
                "cVar1": {
                    "1": "ptr_value",
                    "19": "flag",
                    "2": "char_value"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "input_ptr",
                    "3": "input_value",
                    "4": "input_data",
                    "6": "data"
                },
                "sVar3": {
                    "1": "length_string1",
                    "12": "length1",
                    "3": "len1",
                    "4": "string1_length"
                },
                "sVar4": {
                    "1": "suffix_length",
                    "12": "length2",
                    "3": "length_2",
                    "4": "string2_length"
                },
                "uVar2": {
                    "1": "status",
                    "21": "result",
                    "8": "return_value"
                },
                "uVar5": {
                    "1": "specific_value",
                    "2": "dynamic_flag",
                    "3": "flag_value",
                    "5": "flag"
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "xmalloc",
                "FUN_00109b52",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a377(long data)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  undefined flag;\n  \n  flag = 1;\n  flag = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_ptr_00109b2f();\n  if (flag == '\\0') {\n    flag = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\n  }\n  string2 = (char *)extract_and_free_ptr_00109b2f(data);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  combined_string = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(combined_string,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = initialize_data_structure_00109b52(data,combined_string,0,flag,0);\n  if ((char)result != '\\0') {\n    free(combined_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010a377",
            "entrypoint": "0x0010a377",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a377": "process_data_0010a377",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "combined_string",
                "cVar1": "flag",
                "param_1": "data",
                "sVar3": "length1",
                "sVar4": "length2",
                "uVar2": "result",
                "uVar5": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a424": {
            "additional_data": {
                "FUN_0010a424": {
                    "1": "construct_data_structure",
                    "15": "process_data",
                    "3": "create_improved_string"
                },
                "__ptr": {
                    "1": "buffer",
                    "12": "ptr_array",
                    "2": "pointer_array",
                    "3": "data_array",
                    "4": "ptr_arr"
                },
                "__s": {
                    "1": "second_extracted_string",
                    "10": "str2",
                    "3": "ptr2",
                    "6": "second_string",
                    "7": "string2"
                },
                "__s_00": {
                    "1": "new_str",
                    "2": "constructed_string",
                    "3": "result_str",
                    "4": "new_string",
                    "5": "final_string",
                    "6": "result_string"
                },
                "bVar10": {
                    "1": "bit_result",
                    "2": "loop_flag",
                    "3": "byte_flag",
                    "4": "flag2",
                    "5": "flag3"
                },
                "bVar2": {
                    "1": "flag3",
                    "2": "flag2",
                    "3": "byte_val",
                    "4": "byte_var",
                    "6": "temp_byte"
                },
                "cVar1": {
                    "1": "is_valid",
                    "28": "result"
                },
                "extract_and_free_ptr_00109b2f": {
                    "1": "extract_and_free_ptr"
                },
                "iVar3": {
                    "1": "loop_index",
                    "10": "index",
                    "2": "counter",
                    "3": "temp_var",
                    "4": "temp_int"
                },
                "initialize_data_structure_00109b52": {
                    "1": "initialize_data_structure"
                },
                "initialize_or_increment_data_structure_00109d97": {
                    "1": "initialize_or_increment_data_structure"
                },
                "lVar11": {
                    "1": "counter",
                    "2": "temp_var",
                    "5": "index2"
                },
                "lVar9": {
                    "1": "counter",
                    "12": "index",
                    "2": "loop_var",
                    "3": "loop_variable",
                    "5": "loop_index"
                },
                "param_1": {
                    "1": "string1",
                    "11": "data",
                    "2": "input_param",
                    "4": "data_structure",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "is_initialized",
                    "2": "condition",
                    "21": "flag",
                    "4": "flag1"
                },
                "param_3": {
                    "1": "num_strings",
                    "13": "count",
                    "6": "size",
                    "7": "num_elements"
                },
                "param_4": {
                    "1": "is_incremented",
                    "2": "increment_flag",
                    "3": "increment",
                    "5": "flag2",
                    "7": "initialize",
                    "8": "initialize_flag"
                },
                "pcVar5": {
                    "1": "original_string",
                    "10": "str1",
                    "3": "ptr1",
                    "6": "first_string",
                    "7": "string1"
                },
                "sVar7": {
                    "1": "original_string_length",
                    "11": "length1",
                    "2": "size1",
                    "4": "first_string_length",
                    "8": "len1"
                },
                "sVar8": {
                    "1": "length_2",
                    "11": "length2",
                    "2": "size2",
                    "4": "second_string_length",
                    "8": "len2"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strcpy": {
                    "1": "copy_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar12": {
                    "1": "unknown",
                    "3": "undefined_var",
                    "5": "flag4"
                },
                "uVar4": {
                    "1": "status",
                    "2": "result",
                    "27": "return_value"
                },
                "uVar6": {
                    "1": "temp_var",
                    "12": "extracted_value",
                    "4": "temp_value",
                    "8": "value"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "strcpy",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "FUN_00109d97",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a424(long data,char flag,int count,char initialize_flag)\n\n{\n  char result;\n  byte byte_value;\n  int index;\n  undefined4 return_value;\n  char *str1;\n  undefined8 *ptr_array;\n  undefined8 extracted_value;\n  char *str2;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  long index;\n  byte flag3;\n  long loop_index;\n  undefined flag4;\n  \n  if ((flag == '\\0') && (result = initialize_or_increment_data_structure(), result == '\\0')) {\n    return 0;\n  }\n  flag3 = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  str1 = (char *)extract_and_free_ptr(data);\n  if (count < 0) {\n    ptr_array = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    flag4 = 1;\n    if (flag3 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      index = count + 1;\n      ptr_array = (undefined8 *)xmalloc((long)index * 8);\n      index = (long)(count + -1);\n      do {\n        byte_value = 1;\n        if (flag3 == 0) {\n          byte_value = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        extracted_value = extract_and_free_ptr(data);\n        flag3 = byte_value & 1;\n        ptr_array[index] = extracted_value;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (initialize_flag == '\\0') {\n        result = initialize_or_increment_data_structure(data);\n        if (result == '\\0') {\n          return 0;\n        }\n        byte_value = 1;\n        if (flag3 == 0) {\n          byte_value = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        flag3 = byte_value & 1;\n        extracted_value = extract_and_free_ptr(data);\n        ptr_array[(long)index + -1] = extracted_value;\n        count = index;\n      }\n      goto LAB_0010a582;\n    }\n    ptr_array = (undefined8 *)0x0;\n    if (initialize_flag != '\\0') goto LAB_0010a582;\n    ptr_array = (undefined8 *)xmalloc(8);\n    result = initialize_or_increment_data_structure(data);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((flag3 != 0) || (*(char *)(*(long *)(data + 0x60) + 0x1c) != '\\0')) {\n      extracted_value = extract_and_free_ptr(data);\n      count = 1;\n      flag4 = 1;\n      *ptr_array = extracted_value;\n      goto LAB_0010a596;\n    }\n    extracted_value = extract_and_free_ptr(data);\n    count = 1;\n    *ptr_array = extracted_value;\n  }\n  flag4 = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)extract_and_free_ptr(data);\n  length1 = strlen(str1);\n  length2 = strlen(str2);\n  index = length1 + 10 + length2;\n  for (loop_index = 0; (int)loop_index < count; loop_index = loop_index + 1) {\n    length1 = strlen((char *)ptr_array[loop_index]);\n    index = index + length1;\n  }\n  result_string = (char *)xmalloc(index);\n  sprintf(result_string,\"#%s,%s\",str1,str2);\n  index = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    length1 = strlen(result_string);\n    if (count <= (int)index) break;\n    *(undefined2 *)(result_string + length1) = 0x2c;\n    str1 = (char *)ptr_array[index];\n    index = index + 1;\n    strcpy(result_string + length1 + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(result_string + length1) = 0x3b;\n  free(ptr_array);\n  return_value = initialize_data_structure(data,result_string,0,flag4,0);\n  if ((char)return_value == '\\0') {\n    return 0;\n  }\n  free(result_string);\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010a424",
            "entrypoint": "0x0010a424",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a424": "process_data_0010a424",
                "__ptr": "ptr_array",
                "__s": "str2",
                "__s_00": "result_string",
                "bVar10": "flag3",
                "bVar2": "byte_value",
                "cVar1": "result",
                "extract_and_free_ptr_00109b2f": "extract_and_free_ptr",
                "iVar3": "index",
                "initialize_data_structure_00109b52": "initialize_data_structure",
                "initialize_or_increment_data_structure_00109d97": "initialize_or_increment_data_structure",
                "lVar11": "loop_index",
                "lVar9": "index",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "initialize_flag",
                "pcVar5": "str1",
                "sVar7": "length1",
                "sVar8": "length2",
                "sprintf": "format_string",
                "strcpy": "copy_string",
                "strlen": "get_string_length",
                "uVar12": "flag4",
                "uVar4": "return_value",
                "uVar6": "extracted_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a69a": {
            "additional_data": {
                "FUN_0010a69a": {
                    "1": "extract_and_initialize_data",
                    "10": "initialize_data_structure",
                    "2": "update_data_structure",
                    "3": "initialize_and_allocate_memory",
                    "8": "process_data"
                },
                "lVar2": {
                    "1": "index",
                    "15": "resized_array",
                    "2": "resized_size",
                    "5": "array_size"
                },
                "local_60": {
                    "1": "local_string",
                    "2": "output_buffer",
                    "3": "string_buffer",
                    "5": "formatted_string",
                    "6": "buffer",
                    "8": "output_string"
                },
                "param_1": {
                    "1": "data_structure_pointer",
                    "2": "input_data",
                    "6": "data_structure_ptr",
                    "7": "data",
                    "8": "data_structure"
                },
                "param_2": {
                    "1": "length",
                    "2": "unused",
                    "6": "param2"
                },
                "param_3": {
                    "1": "is_resized",
                    "11": "flag",
                    "4": "resize_flag",
                    "5": "array_size",
                    "7": "size"
                },
                "param_4": {
                    "1": "is_zero",
                    "14": "flag",
                    "2": "condition",
                    "3": "char_flag",
                    "8": "character"
                },
                "param_5": {
                    "1": "data_value",
                    "22": "value",
                    "3": "number"
                },
                "sVar3": {
                    "1": "len",
                    "11": "length",
                    "2": "local_string_length",
                    "3": "str_length",
                    "9": "string_length"
                },
                "uVar1": {
                    "1": "status",
                    "2": "return_value",
                    "28": "result"
                },
                "uVar4": {
                    "1": "new_allocation",
                    "2": "allocated_mem",
                    "20": "allocated_memory",
                    "3": "allocated_data"
                },
                "uVar5": {
                    "1": "is_initialized",
                    "19": "is_resized",
                    "2": "sprintf_flag"
                }
            },
            "called": [
                "sprintf",
                "FUN_00109c2e",
                "xmalloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a83e"
            ],
            "code": "\nundefined4 initialize_data_structure_0010a69a(long data_structure,undefined8 param2,int flag,char flag,uint value)\n\n{\n  undefined4 result;\n  long resized_array;\n  size_t length;\n  undefined8 allocated_memory;\n  undefined is_resized;\n  char output_string [48];\n  \n  if (flag == 0) {\n    output_string[0] = '\\0';\n    is_resized = 0;\n    resized_array = 0;\n  }\n  else {\n    resized_array = resize_array_00109c2e();\n    if (resized_array < 0) {\n      return 0;\n    }\n    is_resized = 1;\n    sprintf(output_string,\"%ld=\",resized_array);\n  }\n  length = strlen(output_string);\n  sprintf(output_string + length,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = initialize_data_structure_0010a69a_00109b52(data_structure,output_string,resized_array,is_resized,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  resized_array = *(long *)(data_structure + 0x60);\n  allocated_memory = xmalloc(1);\n  *(undefined8 *)(resized_array + 0x20) = allocated_memory;\n  **(undefined **)(*(long *)(data_structure + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_0010a69a",
            "entrypoint": "0x0010a69a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a69a": "initialize_data_structure_0010a69a",
                "lVar2": "resized_array",
                "local_60": "output_string",
                "param_1": "data_structure",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "flag",
                "param_5": "value",
                "sVar3": "length",
                "uVar1": "result",
                "uVar4": "allocated_memory",
                "uVar5": "is_resized"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a77a": {
            "additional_data": {
                "FUN_0010a77a": {
                    "1": "parse_and_initialize_data_structure",
                    "16": "process_data",
                    "2": "parse_and_initialize_data",
                    "3": "extract_and_initialize_data_structure",
                    "4": "initialize_data_structure"
                },
                "__s": {
                    "1": "input_string",
                    "17": "string1",
                    "2": "str1"
                },
                "__s_00": {
                    "1": "string_2",
                    "16": "string2",
                    "2": "extracted_data",
                    "5": "extracted_string"
                },
                "__s_01": {
                    "1": "new_str",
                    "16": "combined_string",
                    "2": "combined_data",
                    "6": "concatenated_string"
                },
                "lVar2": {
                    "1": "header_ptr",
                    "2": "data_structure_ptr",
                    "7": "ptr"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_structure",
                    "3": "data_ptr",
                    "4": "data_structure_ptr",
                    "5": "data",
                    "6": "input"
                },
                "sVar5": {
                    "1": "extracted_string_len",
                    "11": "length1",
                    "2": "len1",
                    "3": "string2_length",
                    "4": "extracted_string_length"
                },
                "sVar6": {
                    "1": "len_string1",
                    "11": "length2",
                    "2": "len2",
                    "3": "string1_length"
                },
                "uVar1": {
                    "1": "char_flag",
                    "2": "byte_var",
                    "3": "char_value",
                    "7": "flag"
                },
                "uVar3": {
                    "1": "ptr_var",
                    "2": "value1",
                    "5": "long_value",
                    "7": "value"
                },
                "uVar4": {
                    "1": "return_val",
                    "18": "result",
                    "2": "result_code",
                    "8": "return_value"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a77a(long input)\n\n{\n  undefined flag;\n  long ptr;\n  char *string1;\n  undefined8 value;\n  undefined4 result;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  \n  ptr = *(long *)(input + 0x60);\n  if ((ptr != 0) && (string1 = *(char **)(ptr + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(ptr + 0x18);\n    flag = *(undefined *)(ptr + 0x1c);\n    value = *(undefined8 *)(ptr + 0x10);\n    string2 = (char *)extract_and_free_ptr_00109b2f();\n    length1 = strlen(string2);\n    length2 = strlen(string1);\n    combined_string = (char *)xmalloc(length1 + 2 + length2);\n    sprintf(combined_string,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = initialize_data_structure_00109b52(input,combined_string,value,flag,result);\n    if ((char)result != '\\0') {\n      free(combined_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0010a77a",
            "entrypoint": "0x0010a77a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "combined_string",
                "lVar2": "ptr",
                "param_1": "input",
                "sVar5": "length1",
                "sVar6": "length2",
                "uVar1": "flag",
                "uVar3": "value",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a83e": {
            "additional_data": {
                "FUN_0010a83e": {
                    "1": "initialize_and_modify_data",
                    "16": "process_data",
                    "2": "initialize_data_structure"
                },
                "__s": {
                    "1": "data",
                    "2": "string_ptr",
                    "4": "extracted_string",
                    "9": "string1"
                },
                "__s_00": {
                    "1": "formatted_string_ptr",
                    "2": "string_2",
                    "3": "formatted_string",
                    "4": "str2",
                    "9": "string2"
                },
                "cVar3": {
                    "1": "config_flag",
                    "2": "char1",
                    "5": "char_flag",
                    "7": "char_value",
                    "8": "char_var"
                },
                "param_1": {
                    "1": "data_source",
                    "2": "input_address",
                    "3": "data_structure",
                    "6": "data_ptr",
                    "7": "data"
                },
                "param_2": {
                    "1": "func_param_2",
                    "2": "ptr",
                    "3": "data",
                    "5": "param2"
                },
                "param_3": {
                    "1": "data_length",
                    "2": "arg3",
                    "3": "size1",
                    "4": "param3"
                },
                "param_4": {
                    "1": "undefined_param",
                    "2": "param_b",
                    "3": "flag_1",
                    "5": "param4",
                    "8": "flag"
                },
                "param_5": {
                    "1": "size_param",
                    "2": "arg5",
                    "3": "size2",
                    "4": "mask"
                },
                "param_6": {
                    "1": "flag_param1",
                    "2": "flag_1",
                    "3": "flag_2",
                    "5": "flag1"
                },
                "param_7": {
                    "1": "is_param7_enabled",
                    "2": "flag3",
                    "3": "flag_3",
                    "5": "flag2"
                },
                "sVar2": {
                    "1": "data_length",
                    "11": "string_length",
                    "3": "str_len",
                    "7": "str_length"
                },
                "uVar1": {
                    "1": "return_value",
                    "24": "result"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "FUN_0010a69a",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4\nprocess_data_0010a83e(long data,undefined8 param2,ulong param3,undefined flag,ulong param5,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t string_length;\n  char char_var;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    string1 = (char *)0x0;\n    char_var = '\\0';\n  }\n  else {\n    char_var = *(char *)(*(long *)(data + 0x60) + 0x1c);\n    string1 = (char *)extract_and_free_ptr_00109b2f();\n    param5 = param5 & 0xffffffff;\n    param3 = param3 & 0xffffffff;\n  }\n  result = initialize_data_structure_0010a69a(data,param2,param3,flag,param5);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(string1);\n      string2 = (char *)xmalloc(string_length + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (char_var != '\\0') {\n        *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(data + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010a83e",
            "entrypoint": "0x0010a83e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "__s": "string1",
                "__s_00": "string2",
                "cVar3": "char_var",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "flag",
                "param_5": "param5",
                "param_6": "flag1",
                "param_7": "flag2",
                "sVar2": "string_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a94e": {
            "additional_data": {
                "FUN_0010a94e": {
                    "1": "generate_output_string",
                    "2": "generate_connection_string",
                    "3": "format_and_store_data"
                },
                "__s": {
                    "1": "extracted_value",
                    "15": "extracted_string",
                    "5": "extracted_data"
                },
                "abort()": {
                    "1": "abort_fn"
                },
                "cVar1": {
                    "1": "use_ssl",
                    "10": "flag_value",
                    "2": "flag_char",
                    "3": "is_flag_set",
                    "5": "flag"
                },
                "lVar2": {
                    "1": "param_address",
                    "2": "ptr",
                    "4": "connection_info_ptr",
                    "5": "config_ptr"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param",
                    "3": "connection_info",
                    "5": "config"
                },
                "param_2": {
                    "1": "text1",
                    "11": "username",
                    "2": "input1",
                    "3": "str1",
                    "5": "string1"
                },
                "param_3": {
                    "1": "suffix",
                    "11": "password",
                    "2": "input2",
                    "3": "str2",
                    "5": "string2"
                },
                "param_4": {
                    "1": "param_c",
                    "2": "option",
                    "20": "flag"
                },
                "pcVar7": {
                    "1": "new_code",
                    "2": "old_string",
                    "3": "new_string",
                    "4": "new_url"
                },
                "pcVar9": {
                    "1": "option_string",
                    "10": "flag_string",
                    "2": "additional_info",
                    "7": "flag_str"
                },
                "sVar3": {
                    "1": "len_existing_url",
                    "2": "length1",
                    "5": "len1"
                },
                "sVar4": {
                    "1": "prefix_len",
                    "2": "length2",
                    "3": "username_length",
                    "4": "len_username",
                    "5": "len2"
                },
                "sVar5": {
                    "1": "len_database_name",
                    "2": "length3",
                    "3": "extracted_data_length",
                    "4": "len3",
                    "7": "extracted_string_length"
                },
                "sVar6": {
                    "1": "suffix_len",
                    "2": "length4",
                    "3": "password_length",
                    "4": "len4"
                },
                "uVar8": {
                    "1": "return_val",
                    "22": "result",
                    "8": "return_value"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 format_and_store_data_0010a94e(long config,char *username,char *password,int flag)\n\n{\n  char flag_value;\n  long config_ptr;\n  char *extracted_string;\n  size_t len1;\n  size_t len2;\n  size_t extracted_string_length;\n  size_t len4;\n  char *formatted_string;\n  undefined8 result;\n  char *flag_string;\n  \n  flag_value = *(char *)(*(long *)(config + 0x60) + 0x1c);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  formatted_string = *(char **)(*(long *)(config + 0x60) + 0x20);\n  if (formatted_string == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    len1 = strlen(formatted_string);\n    len2 = strlen(username);\n    extracted_string_length = strlen(extracted_string);\n    len4 = strlen(password);\n    formatted_string = (char *)xmalloc(len1 + 10 + len2 + extracted_string_length + len4);\n    if (flag == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((flag != 2) && (flag_string = \"\", flag != 0)) {\n                    \n        abort_fn;\n      }\n    }\n    sprintf(formatted_string,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(config + 0x60) + 0x20),username,flag_string,\n            extracted_string,password,*(long *)(config + 0x60));\n    free(*(void **)(*(long *)(config + 0x60) + 0x20));\n    config_ptr = *(long *)(config + 0x60);\n    *(char **)(config_ptr + 0x20) = formatted_string;\n    if (flag_value != '\\0') {\n      *(undefined *)(config_ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)config_ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "current_name": "format_and_store_data_0010a94e",
            "entrypoint": "0x0010a94e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a94e": "format_and_store_data_0010a94e",
                "__s": "extracted_string",
                "abort()": "abort_fn",
                "cVar1": "flag_value",
                "lVar2": "config_ptr",
                "param_1": "config",
                "param_2": "username",
                "param_3": "password",
                "param_4": "flag",
                "pcVar7": "formatted_string",
                "pcVar9": "flag_string",
                "sVar3": "len1",
                "sVar4": "len2",
                "sVar5": "extracted_string_length",
                "sVar6": "len4",
                "uVar8": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010aa53": {
            "additional_data": {
                "FUN_0010aa53": {
                    "1": "add_logging_data",
                    "12": "process_data",
                    "2": "extract_and_store_data"
                },
                "__s": {
                    "1": "source_string",
                    "16": "extracted_string",
                    "3": "string",
                    "5": "string_ptr"
                },
                "cVar1": {
                    "1": "char_val",
                    "14": "flag_value",
                    "2": "flag_val",
                    "3": "char_value",
                    "4": "flag"
                },
                "cVar3": {
                    "1": "char_val",
                    "2": "mode_char",
                    "4": "flag_value",
                    "5": "mode_value"
                },
                "lVar2": {
                    "1": "buffer_ptr",
                    "2": "data_struct_ptr",
                    "5": "struct_pointer",
                    "8": "struct_ptr"
                },
                "lVar7": {
                    "1": "reallocated_struct",
                    "10": "realloc_ptr",
                    "2": "reallocated_ptr",
                    "3": "new_ptr"
                },
                "param_1": {
                    "1": "param",
                    "2": "data",
                    "3": "data_struct",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "value_param",
                    "2": "arg2",
                    "21": "value",
                    "3": "data"
                },
                "param_3": {
                    "1": "log_type",
                    "19": "flag",
                    "2": "option",
                    "3": "flag_char"
                },
                "param_4": {
                    "1": "flag_value",
                    "11": "mode",
                    "2": "type",
                    "4": "condition",
                    "8": "option"
                },
                "pcVar6": {
                    "1": "new_string_ptr",
                    "12": "formatted_string",
                    "2": "log_entry",
                    "3": "new_str",
                    "4": "new_string"
                },
                "sVar5": {
                    "1": "extracted_string_len",
                    "20": "string_length",
                    "3": "str_length",
                    "4": "str_len"
                },
                "uVar10": {
                    "1": "loop_index",
                    "2": "loop_end",
                    "5": "count",
                    "7": "last_index"
                },
                "uVar4": {
                    "1": "loop_var",
                    "2": "loop_index",
                    "3": "index",
                    "4": "counter",
                    "5": "loop_counter"
                },
                "uVar8": {
                    "1": "success_flag",
                    "17": "result",
                    "5": "success",
                    "6": "return_value"
                },
                "uVar9": {
                    "1": "counter1",
                    "12": "index",
                    "2": "count",
                    "4": "counter"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "xrealloc",
                "abort",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_data_0010aa53(long data_ptr,undefined8 value,char flag,int mode)\n\n{\n  char flag_value;\n  long struct_ptr;\n  char mode_value;\n  uint loop_counter;\n  char *extracted_string;\n  size_t string_length;\n  char *formatted_string;\n  long realloc_ptr;\n  undefined8 result;\n  ulong index;\n  ulong last_index;\n  \n  flag_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(string_length + 0x19);\n  *formatted_string = flag + '0';\n  if (mode == 1) {\n    mode_value = '1';\n  }\n  else {\n    mode_value = '0';\n    if ((mode != 2) && (mode_value = '2', mode != 0)) {\n                    \n      abort();\n    }\n  }\n  formatted_string[1] = mode_value;\n  sprintf(formatted_string + 2,\"%ld,%s;\",value);\n  free(extracted_string);\n  struct_ptr = *(long *)(data_ptr + 0x60);\n  result = 0;\n  if ((struct_ptr != 0) && (*(long *)(struct_ptr + 0x20) != 0)) {\n    struct_ptr = *(long *)(struct_ptr + 0x28);\n    last_index = 0;\n    if (struct_ptr != 0) {\n      loop_counter = 0;\n      do {\n        index = (ulong)loop_counter;\n        last_index = (ulong)loop_counter;\n        loop_counter = loop_counter + 1;\n      } while (*(long *)(struct_ptr + index * 8) != 0);\n    }\n    realloc_ptr = xrealloc(struct_ptr,(ulong)((int)last_index + 2) << 3);\n    *(char **)(realloc_ptr + last_index * 8) = formatted_string;\n    *(undefined8 *)(realloc_ptr + (ulong)((int)last_index + 1) * 8) = 0;\n    struct_ptr = *(long *)(data_ptr + 0x60);\n    *(long *)(struct_ptr + 0x28) = realloc_ptr;\n    if (flag_value != '\\0') {\n      *(undefined *)(struct_ptr + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010aa53",
            "entrypoint": "0x0010aa53",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "__s": "extracted_string",
                "cVar1": "flag_value",
                "cVar3": "mode_value",
                "lVar2": "struct_ptr",
                "lVar7": "realloc_ptr",
                "param_1": "data_ptr",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "mode",
                "pcVar6": "formatted_string",
                "sVar5": "string_length",
                "uVar10": "last_index",
                "uVar4": "loop_counter",
                "uVar8": "result",
                "uVar9": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ab4d": {
            "additional_data": {
                "FUN_0010ab4d": {
                    "1": "append_to_existing_string",
                    "2": "update_data",
                    "3": "append_to_log",
                    "4": "update_string"
                },
                "auVar3": {
                    "1": "return_val",
                    "12": "result",
                    "2": "result1",
                    "7": "return_value"
                },
                "auVar7": {
                    "1": "new_buffer",
                    "2": "return_val",
                    "4": "result",
                    "8": "return_value"
                },
                "lVar2": {
                    "1": "data_ptr_temp",
                    "2": "log_struct_ptr",
                    "4": "ptr2"
                },
                "param_1": {
                    "1": "base_address",
                    "2": "input_data",
                    "4": "input_struct"
                },
                "param_2": {
                    "1": "new_data",
                    "10": "string_to_append",
                    "2": "string_to_add",
                    "3": "input_string",
                    "7": "new_string"
                },
                "param_3": {
                    "1": "unused_parameter",
                    "11": "param3",
                    "2": "unused_param1",
                    "3": "unused_param",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "user_data",
                    "12": "param4",
                    "2": "arg2",
                    "3": "arg4",
                    "7": "param_4"
                },
                "pcVar5": {
                    "1": "existing_log_string",
                    "12": "existing_string",
                    "2": "allocated_string"
                },
                "sVar4": {
                    "1": "length1",
                    "2": "input_str_len",
                    "3": "string_length",
                    "5": "input_length"
                },
                "sVar6": {
                    "1": "prefix_str_len",
                    "12": "existing_string_length",
                    "2": "allocated_string_length"
                },
                "uVar1": {
                    "1": "buffer_length",
                    "2": "structure_value",
                    "4": "struct_pointer"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "sprintf",
                "xmalloc",
                "xrealloc",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] update_string_0010ab4d(long input_struct,char *string_to_append,undefined8 param3,undefined8 param4)\n\n{\n  ulong struct_pointer;\n  long ptr2;\n  undefined result [16];\n  size_t input_length;\n  char *existing_string;\n  size_t existing_string_length;\n  undefined return_value [16];\n  \n  struct_pointer = *(ulong *)(input_struct + 0x60);\n  if ((struct_pointer != 0) && (*(long *)(struct_pointer + 0x20) != 0)) {\n    existing_string = *(char **)(struct_pointer + 0x30);\n    input_length = strlen(string_to_append);\n    if (existing_string == (char *)0x0) {\n      existing_string = (char *)xmalloc(input_length + 3);\n      *existing_string = '\\0';\n    }\n    else {\n      existing_string_length = strlen(existing_string);\n      existing_string = (char *)xrealloc(existing_string,input_length + 4 + existing_string_length);\n    }\n    input_length = strlen(existing_string);\n    sprintf(existing_string + input_length,\"%s::\",string_to_append);\n    ptr2 = *(long *)(input_struct + 0x60);\n    *(char **)(ptr2 + 0x30) = existing_string;\n    return_value._1_7_ = (undefined7)((ulong)ptr2 >> 8);\n    return_value[0] = 1;\n    return_value._8_8_ = param4;\n    return return_value;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = struct_pointer;\n  return result << 0x40;\n}\n\n",
            "current_name": "update_string_0010ab4d",
            "entrypoint": "0x0010ab4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ab4d": "update_string_0010ab4d",
                "auVar3": "result",
                "auVar7": "return_value",
                "lVar2": "ptr2",
                "param_1": "input_struct",
                "param_2": "string_to_append",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar5": "existing_string",
                "sVar4": "input_length",
                "sVar6": "existing_string_length",
                "uVar1": "struct_pointer",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010abdd": {
            "additional_data": {
                "FUN_0010abdd": {
                    "1": "update_and_format_data",
                    "12": "process_data",
                    "2": "build_string",
                    "4": "update_data"
                },
                "__s": {
                    "1": "ptr4",
                    "2": "str4",
                    "3": "data3",
                    "5": "str_ptr3",
                    "7": "str3"
                },
                "bVar3": {
                    "1": "temp_byte",
                    "4": "byte_val"
                },
                "cVar10": {
                    "1": "character1",
                    "2": "flag5",
                    "21": "char1",
                    "3": "char_var1"
                },
                "cVar11": {
                    "1": "char_value2",
                    "2": "flag6",
                    "21": "char2",
                    "3": "char_var2"
                },
                "lVar1": {
                    "1": "struct_pointer",
                    "10": "ptr1",
                    "3": "data_address"
                },
                "local_52": {
                    "1": "local_var",
                    "10": "local_flag",
                    "2": "byte_value",
                    "3": "byte_var",
                    "5": "local_byte"
                },
                "param_1": {
                    "1": "input1",
                    "2": "address",
                    "3": "input_data",
                    "8": "data"
                },
                "param_2": {
                    "1": "data",
                    "19": "string1",
                    "3": "input_string"
                },
                "param_3": {
                    "1": "count",
                    "12": "length",
                    "3": "input_length",
                    "9": "num1"
                },
                "param_4": {
                    "1": "flag2",
                    "29": "flag1"
                },
                "param_5": {
                    "1": "flag3",
                    "29": "flag2"
                },
                "param_6": {
                    "1": "flag4",
                    "29": "flag3"
                },
                "param_7": {
                    "1": "param7",
                    "19": "value",
                    "2": "param7_value",
                    "6": "num2"
                },
                "param_8": {
                    "1": "condition4",
                    "28": "flag4"
                },
                "pcVar2": {
                    "1": "string_ptr1",
                    "2": "str2",
                    "3": "data1",
                    "5": "ptr2",
                    "7": "str1"
                },
                "pcVar4": {
                    "1": "ptr2",
                    "2": "string2",
                    "3": "data2",
                    "5": "str_ptr2",
                    "7": "str2"
                },
                "sVar5": {
                    "1": "str1_length",
                    "12": "len1",
                    "2": "len_str1",
                    "9": "length1"
                },
                "sVar6": {
                    "1": "string_length2",
                    "12": "len2",
                    "2": "str_len2",
                    "9": "length2"
                },
                "sVar7": {
                    "1": "name_len",
                    "12": "len3",
                    "2": "len_string1",
                    "9": "length3"
                },
                "sVar8": {
                    "1": "len_data3",
                    "12": "len4",
                    "2": "str_len4",
                    "8": "length4"
                },
                "uVar9": {
                    "28": "result",
                    "3": "return_value"
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "xrealloc",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "code": "\nundefined8\nprocess_data_0010abdd(long data,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr1;\n  char *str1;\n  byte byte_val;\n  char *str2;\n  char *str3;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte local_flag;\n  \n  str3 = (char *)0x0;\n  local_flag = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  str2 = (char *)extract_and_free_ptr_00109b2f();\n  if (flag4 != '\\0') {\n    byte_val = 1;\n    if (local_flag == 0) {\n      byte_val = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n    }\n    local_flag = byte_val & 1;\n    str3 = (char *)extract_and_free_ptr_00109b2f(data);\n  }\n  ptr1 = *(long *)(data + 0x60);\n  if ((ptr1 == 0) || (str1 = *(char **)(ptr1 + 0x30), str1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    len3 = strlen(string1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(str3);\n    }\n    result = xrealloc(str1,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(ptr1 + 0x30) = result;\n    str1 = *(char **)(*(long *)(data + 0x60) + 0x30);\n    len1 = strlen(str1);\n    sprintf(str1 + len1,\"%s:%s;%c%c%c\",str2,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,len1);\n    free(str2);\n    if (flag4 != '\\0') {\n      str2 = *(char **)(*(long *)(data + 0x60) + 0x30);\n      len1 = strlen(str2);\n      sprintf(str2 + len1,\"%ld;%s;\",value,str3);\n      free(str3);\n    }\n    if (local_flag != 0) {\n      *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010abdd",
            "entrypoint": "0x0010abdd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "__s": "str3",
                "bVar3": "byte_val",
                "cVar10": "char1",
                "cVar11": "char2",
                "lVar1": "ptr1",
                "local_52": "local_flag",
                "param_1": "data",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "pcVar2": "str1",
                "pcVar4": "str2",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010add5": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "DAT_0010abdd": {
                    "1": "data"
                },
                "FUN_0010add5": {
                    "1": "process_and_return",
                    "11": "process_and_return_data",
                    "17": "process_data"
                },
                "process_data_0010abdd": {
                    "1": "perform_data_processing",
                    "22": "process_data",
                    "3": "extract_and_process_data"
                },
                "return": {
                    "1": ""
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010add5(void)\n\n{\n  process_data_0010add5();\n  return;\n}\n\n",
            "current_name": "process_data_0010add5",
            "entrypoint": "0x0010add5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010add5": "process_data_0010add5",
                "process_data_0010abdd": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010adf2": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_0010adf2": {
                    "1": "process",
                    "2": "process_and_return",
                    "23": "process_data",
                    "5": "process_and_return_data"
                },
                "process_data_0010abdd": {
                    "1": "extracted_data",
                    "2": "execute_process",
                    "24": "process_data"
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010adf2(void)\n\n{\n  process_data_0010adf2();\n  return;\n}\n\n",
            "current_name": "process_data_0010adf2",
            "entrypoint": "0x0010adf2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010adf2": "process_data_0010adf2",
                "process_data_0010abdd": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ae0e": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "FUN_0010ae0e": {
                    "1": "reverse_and_concatenate_string",
                    "2": "process_data",
                    "3": "reverse_and_concatenate_strings"
                },
                "__ptr": {
                    "1": "ptr_temp",
                    "4": "temp_pointer",
                    "6": "ptr",
                    "7": "temp_ptr"
                },
                "lVar1": {
                    "1": "func_struct",
                    "2": "ptr1",
                    "3": "struct_pointer",
                    "8": "struct_ptr"
                },
                "lVar2": {
                    "1": "ptr_address",
                    "2": "ptr2",
                    "5": "ptr"
                },
                "lVar8": {
                    "1": "string_length",
                    "2": "result_length",
                    "3": "final_string_length",
                    "5": "result_string_length",
                    "9": "total_len"
                },
                "param_1": {
                    "1": "input_data",
                    "18": "input",
                    "2": "input_address",
                    "3": "data",
                    "5": "input_param"
                },
                "pcVar3": {
                    "1": "str_temp",
                    "2": "temp_char_ptr",
                    "3": "temp_str",
                    "5": "temp_string"
                },
                "pcVar6": {
                    "1": "str2",
                    "2": "output_str",
                    "3": "concatenated_string",
                    "4": "result",
                    "9": "result_string"
                },
                "sVar4": {
                    "1": "len_var_1",
                    "10": "len1",
                    "12": "length1",
                    "2": "len_string1"
                },
                "sVar5": {
                    "1": "subdata_length",
                    "10": "len2",
                    "12": "length2",
                    "2": "len_string2"
                },
                "uVar10": {
                    "1": "total_components",
                    "2": "num_strings",
                    "3": "index",
                    "9": "count"
                },
                "uVar7": {
                    "1": "output_var",
                    "21": "return_value",
                    "8": "result"
                },
                "uVar9": {
                    "1": "loop_var",
                    "16": "counter",
                    "2": "count",
                    "9": "index"
                }
            },
            "called": [
                "strcpy",
                "free",
                "sprintf",
                "strcat",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 concatenate_strings_0010ae0e(long input)\n\n{\n  long struct_ptr;\n  long ptr;\n  void *temp_ptr;\n  char *temp_string;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  undefined8 return_value;\n  long total_len;\n  uint counter;\n  ulong count;\n  \n  return_value = 0;\n  struct_ptr = *(long *)(input + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (result_string = *(char **)(struct_ptr + 0x20), result_string != (char *)0x0)) {\n    length1 = strlen(*(char **)(struct_ptr + 8));\n    length2 = strlen(result_string);\n    ptr = *(long *)(struct_ptr + 0x28);\n    if (ptr == 0) {\n      total_len = length1 + length2 + 10;\n      count = 0;\n    }\n    else {\n      total_len = length1 + length2 + 0x1e;\n      count = 0;\n      while( true ) {\n        result_string = *(char **)(ptr + count * 8);\n        if (result_string == (char *)0x0) break;\n        length1 = strlen(result_string);\n        count = (ulong)((int)count + 1);\n        total_len = total_len + length1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      length1 = strlen(*(char **)(struct_ptr + 0x30));\n      total_len = total_len + length1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      length1 = strlen(*(char **)(struct_ptr + 0x38));\n      total_len = total_len + length1;\n    }\n    result_string = (char *)xmalloc(total_len);\n    struct_ptr = *(long *)(input + 0x60);\n    strcpy(result_string,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      counter = 0;\n      length1 = strlen(result_string);\n      sprintf(result_string + length1,\"!%u,\",count);\n      while( true ) {\n        struct_ptr = *(long *)(input + 0x60);\n        count = (ulong)counter;\n        temp_ptr = *(void **)(struct_ptr + 0x28);\n        temp_string = *(char **)((long)temp_ptr + count * 8);\n        if (temp_string == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(result_string,temp_string);\n        free(*(void **)(*(long *)(struct_ptr + 0x28) + count * 8));\n      }\n      free(temp_ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input + 0x60);\n    strcat(result_string,*(char **)(struct_ptr + 0x20));\n    free(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(result_string,*(char **)(struct_ptr + 0x30));\n      free(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    length1 = strlen(result_string);\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined2 *)(result_string + length1) = 0x3b;\n    temp_string = *(char **)(struct_ptr + 0x38);\n    if (temp_string != (char *)0x0) {\n      strcpy(result_string + length1 + 1,temp_string);\n      free(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    struct_ptr = *(long *)(input + 0x60);\n    *(char **)(struct_ptr + 8) = result_string;\n    return_value = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "concatenate_strings_0010ae0e",
            "entrypoint": "0x0010ae0e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ae0e": "concatenate_strings_0010ae0e",
                "__ptr": "temp_ptr",
                "lVar1": "struct_ptr",
                "lVar2": "ptr",
                "lVar8": "total_len",
                "param_1": "input",
                "pcVar3": "temp_string",
                "pcVar6": "result_string",
                "sVar4": "length1",
                "sVar5": "length2",
                "uVar10": "count",
                "uVar7": "return_value",
                "uVar9": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010afd5": {
            "additional_data": {
                "FUN_0010afd5": {
                    "1": "find_matching_string",
                    "2": "find_data",
                    "3": "find_string_in_data"
                },
                "__s2": {
                    "1": "str",
                    "11": "search_string",
                    "2": "input_string",
                    "3": "input_string_copy"
                },
                "auVar8": {
                    "1": "return_buffer",
                    "20": "return_value",
                    "3": "result"
                },
                "bVar7": {
                    "1": "byte_var",
                    "3": "loop_counter",
                    "4": "loop_index",
                    "7": "counter",
                    "8": "flag"
                },
                "copy_and_null_terminate_00109a0b": {
                    "1": "copy_null_terminate"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar1": {
                    "1": "result",
                    "4": "comparison_result"
                },
                "initialize_and_store_data_00113e23": {
                    "1": "initialize_data",
                    "3": "initialize_and_store_data"
                },
                "lVar4": {
                    "1": "temp_val",
                    "2": "temp_data",
                    "3": "data",
                    "4": "temp_value",
                    "7": "data_value"
                },
                "param_1": {
                    "1": "data_struct_array",
                    "2": "linked_list_head",
                    "3": "list",
                    "8": "data_list",
                    "9": "linked_list"
                },
                "param_2": {
                    "1": "structure_base",
                    "11": "context",
                    "3": "data",
                    "4": "struct_ptr",
                    "6": "data_structure"
                },
                "param_3": {
                    "1": "str_to_search",
                    "2": "target_string",
                    "4": "str",
                    "6": "string",
                    "7": "input_string"
                },
                "param_4": {
                    "1": "target_length",
                    "2": "search_string_length",
                    "3": "input_length",
                    "4": "len"
                },
                "param_5": {
                    "1": "data",
                    "2": "default_value",
                    "6": "data_type",
                    "7": "new_value"
                },
                "param_6": {
                    "1": "default_value",
                    "2": "data_ptr",
                    "3": "initial_value",
                    "4": "return_value",
                    "8": "result"
                },
                "puVar2": {
                    "1": "current_param",
                    "14": "current_node",
                    "2": "data_entry",
                    "6": "current_data"
                },
                "puVar5": {
                    "1": "inner_data_struct",
                    "10": "inner_node",
                    "2": "sub_data_list"
                },
                "puVar6": {
                    "1": "inner_node_ptr",
                    "2": "int_ptr",
                    "3": "ptr",
                    "7": "temp_ptr"
                },
                "strcmp": {
                    "3": "compare_strings"
                },
                "uVar3": {
                    "1": "initialized_value",
                    "3": "temp_variable",
                    "5": "temp_var",
                    "8": "temp_value"
                },
                "xmalloc": {
                    "1": "custom_malloc",
                    "3": "allocate_memory"
                }
            },
            "called": [
                "free",
                "xmalloc",
                "FUN_00109a0b",
                "FUN_00113e23",
                "strcmp"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nfind_string_in_data_0010afd5(undefined8 *linked_list,long context,undefined8 input_string,undefined4 len,\n            undefined4 new_value,undefined8 result)\n\n{\n  int comparison_result;\n  char *search_string;\n  undefined8 *current_node;\n  undefined8 temp_value;\n  long data_value;\n  undefined8 *inner_node;\n  undefined4 *temp_ptr;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  search_string = (char *)copy_and_null_terminate(input_string,len);\n  for (linked_list = (undefined8 *)*linked_list; linked_list != (undefined8 *)0x0;\n      linked_list = (undefined8 *)*linked_list) {\n    for (current_node = (undefined8 *)linked_list[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (inner_node = *(undefined8 **)(undefined8 *)current_node[2]; inner_node != (undefined8 *)0x0;\n            inner_node = (undefined8 *)*inner_node) {\n          if ((*(int *)((long)inner_node + 0x14) == 1) && (*(char *)inner_node[1] == *search_string)) {\n            comparison_result = strcmp((char *)inner_node[1],search_string);\n            if (comparison_result == 0) {\n              data_value = inner_node[4];\n              if (data_value == 0) goto LAB_0010b05b;\n              free(search_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)xmalloc(0x28);\n      temp_value = *(undefined8 *)(context + 0x1a0);\n      temp_ptr = (undefined4 *)((long)current_node + 0x14);\n      for (data_value = 5; data_value != 0; data_value = data_value + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = new_value;\n      *current_node = temp_value;\n      current_node[1] = search_string;\n      temp_value = initialize_and_store_data(current_node + 3,search_string);\n      *(undefined8 **)(context + 0x1a0) = current_node;\n      current_node[4] = temp_value;\nLAB_0010b0e7:\n      data_value = current_node[4];\nLAB_0010b0eb:\n      return_value._8_8_ = result;\n      return_value._0_8_ = data_value;\n      return return_value;\n    }\n    if (*(char *)current_node[1] == *search_string) {\n      comparison_result = strcmp((char *)current_node[1],search_string);\n      if (comparison_result == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = new_value;\n        }\n        free(search_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "current_name": "find_string_in_data_0010afd5",
            "entrypoint": "0x0010afd5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010afd5": "find_string_in_data_0010afd5",
                "__s2": "search_string",
                "auVar8": "return_value",
                "bVar7": "flag",
                "copy_and_null_terminate_00109a0b": "copy_and_null_terminate",
                "free": "deallocate_memory",
                "iVar1": "comparison_result",
                "initialize_and_store_data_00113e23": "initialize_and_store_data",
                "lVar4": "data_value",
                "param_1": "linked_list",
                "param_2": "context",
                "param_3": "input_string",
                "param_4": "len",
                "param_5": "new_value",
                "param_6": "result",
                "puVar2": "current_node",
                "puVar5": "inner_node",
                "puVar6": "temp_ptr",
                "strcmp": "compare_strings",
                "uVar3": "temp_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b0fa": {
            "additional_data": {
                "FUN_0010b0fa": {
                    "1": "process_demangled_code",
                    "2": "demangle_and_initialize_data"
                },
                "__ptr": {
                    "1": "void_pointer",
                    "3": "data_ptr",
                    "4": "allocated_memory",
                    "6": "ptr"
                },
                "iVar2": {
                    "1": "compare_result",
                    "17": "comparison_result",
                    "4": "index"
                },
                "lVar7": {
                    "1": "argument_size",
                    "2": "value",
                    "3": "length",
                    "4": "data_length",
                    "7": "size"
                },
                "local_40": {
                    "1": "local_variables",
                    "10": "local_array",
                    "2": "local_variable",
                    "6": "local_buffer",
                    "7": "buffer"
                },
                "param_1": {
                    "1": "input_1",
                    "16": "param1",
                    "3": "arg1",
                    "4": "input_param1"
                },
                "param_2": {
                    "1": "input_2",
                    "16": "param2",
                    "3": "arg2",
                    "4": "input_param2"
                },
                "param_3": {
                    "1": "component",
                    "11": "param3",
                    "2": "data_array",
                    "3": "input_param3",
                    "4": "param_array"
                },
                "param_4": {
                    "1": "data_length",
                    "15": "param4",
                    "2": "parameter_4",
                    "3": "input_param4",
                    "4": "param_4"
                },
                "param_5": {
                    "1": "param_5",
                    "14": "param5",
                    "2": "output_param",
                    "3": "input_param5",
                    "5": "error_flag"
                },
                "pcVar3": {
                    "1": "return_string",
                    "10": "result",
                    "11": "result_string",
                    "2": "string",
                    "3": "output_string"
                },
                "pcVar5": {
                    "1": "str",
                    "5": "message",
                    "7": "error_string",
                    "9": "error_message"
                },
                "plVar4": {
                    "1": "pointer_data",
                    "2": "ptr_var",
                    "3": "pointer_list",
                    "4": "data_pointer"
                },
                "sVar6": {
                    "1": "size_s_var6",
                    "22": "string_length",
                    "7": "length"
                },
                "uVar1": {
                    "1": "array_element",
                    "2": "array_value",
                    "7": "value"
                }
            },
            "called": [
                "fprintf",
                "FUN_00113cb9",
                "FUN_00113b71",
                "cplus_demangle_print",
                "FUN_0010afd5",
                "strncmp",
                "FUN_0010b6ea",
                "FUN_00113df2",
                "strcmp",
                "FUN_00113dfe",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113d3a",
                "free",
                "FUN_00113b1e",
                "FUN_00113ce0",
                "FUN_0010b0fa",
                "FUN_00113e17",
                "dcgettext",
                "FUN_00112904",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "code": "\n\n\nchar * demangle_and_initialize_data_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long param4,\n                   undefined *param5)\n\n{\n  uint value;\n  int comparison_result;\n  char *result_string;\n  long *type_ptr;\n  char *error_message;\n  size_t string_length;\n  void *ptr;\n  long size;\n  undefined local_array [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    value = *param3;\n    if (0x29 < value) break;\n    if (0x17 < value) {\n      switch(value) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result_string = (char *)demangle_and_initialize_data_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (result_string != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result_string = (char *)initialize_data_00113b4a(result_string);\n            return result_string;\n          case 0x1b:\n            result_string = (char *)initialize_data_00113b71(result_string);\n            return result_string;\n          default:\n                    \n            abort();\n          case 0x22:\n            result_string = (char *)initialize_or_get_data_00113d3a(result_string);\n            return result_string;\n          case 0x23:\n            result_string = (char *)initialize_data_00113cb9(result_string);\n            return result_string;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result_string = (char *)cplus_demangle_print(3,param3,0x14,local_array);\n        if (result_string == (char *)0x0) {\n          error_message = \"Couldn\\'t get demangled builtin type\\n\";\n          result_string = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison_result = strcmp(result_string,\"signed char\");\n        if (comparison_result == 0) {\nLAB_0010b406:\n          error_message = (char *)update_data_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"bool\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_data_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"char\");\n        if (comparison_result == 0) goto LAB_0010b406;\n        comparison_result = strcmp(result_string,\"double\");\n        if ((comparison_result == 0) || (comparison_result = strcmp(result_string,\"long double\"), comparison_result == 0)) {\n          error_message = (char *)initialize_data_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"float\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_data_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"__float128\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_data_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned char\");\n        if (comparison_result == 0) {\n          error_message = (char *)update_data_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"int\");\n        if (comparison_result == 0) {\nLAB_0010b504:\n          error_message = (char *)update_data_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned int\");\n        if (comparison_result == 0) {\nLAB_0010b528:\n          error_message = (char *)update_data_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"long\");\n        if (comparison_result == 0) goto LAB_0010b504;\n        comparison_result = strcmp(result_string,\"unsigned long\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result_string,\"__int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)update_data_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)update_data_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"short\");\n        if (comparison_result == 0) {\n          error_message = (char *)update_data_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned short\");\n        if (comparison_result == 0) {\n          error_message = (char *)update_data_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"void\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_data_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"wchar_t\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result_string,\"long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)update_data_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)update_data_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"...\");\n        if (comparison_result == 0) {\n          error_message = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          error_message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          error_message = (char *)dcgettext(0,error_message,5);\n          fprintf(_stderr,error_message);\n        }\n        error_message = (char *)0x0;\nLAB_0010b6c6:\n        free(result_string);\n        return error_message;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          ptr = (void *)initialize_data_00113e17();\n        }\n        else {\n          ptr = (void *)demangle_and_initialize_data_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          size = demangle_arglist_0010b6ea(param1,param2,*(undefined8 *)(param3 + 6),local_array);\n          if (size != 0) {\n            result_string = (char *)initialize_and_allocate_data_00113ce0(ptr,size,local_array[0]);\n            return result_string;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (value != 1) {\n      if (value == 4) {\n        result_string = (char *)cplus_demangle_print(3,param3,0x14,local_array);\n        error_message = \"Failed to print demangled template\\n\";\n        if (result_string != (char *)0x0) {\n          string_length = strlen(result_string);\n          error_message = (char *)find_string_in_data_0010afd5(param1,param2,result_string,string_length & 0xffffffff,9);\n          free(result_string);\n          return error_message;\n        }\nLAB_0010b3d3:\n        error_message = (char *)dcgettext(0,error_message,5);\n        fprintf(_stderr,error_message);\n        return result_string;\n      }\n      if (value == 0) {\n        if ((param4 == 0) || (type_ptr = (long *)get_real_type_00113b1e(param4), type_ptr == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = demangle_and_initialize_data_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    param5 = (undefined *)0x0;\n  }\n  result_string = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result_string,(ulong)value);\nLAB_0010b38c:\n  result_string = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result_string;\nLAB_0010b1a5:\n  if (*type_ptr == 0) {\nswitchD_0010b158_caseD_18:\n    result_string = (char *)find_string_in_data_0010afd5(param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return result_string;\n  }\n  result_string = *(char **)(*type_ptr + 8);\n  if (result_string == (char *)0x0) goto LAB_0010b38c;\n  error_message = (char *)extract_data_001129f4(result_string);\n  if (error_message != (char *)0x0) {\n    string_length = strlen(error_message);\n    if ((param3[6] == (uint)string_length) &&\n       (comparison_result = strncmp(error_message,*(char **)(param3 + 4),(long)(int)param3[6]), comparison_result == 0)) {\n      return result_string;\n    }\n  }\n  type_ptr = type_ptr + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "current_name": "demangle_and_initialize_data_0010b0fa",
            "entrypoint": "0x0010b0fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b0fa": "demangle_and_initialize_data_0010b0fa",
                "__ptr": "ptr",
                "iVar2": "comparison_result",
                "lVar7": "size",
                "local_40": "local_array",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "pcVar3": "result_string",
                "pcVar5": "error_message",
                "plVar4": "type_ptr",
                "sVar6": "string_length",
                "uVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b6ea": {
            "additional_data": {
                "FUN_0010b6ea": {
                    "1": "decode_arglist",
                    "11": "demangle_arglist",
                    "2": "demangle_arglist_types",
                    "3": "extract_arglist",
                    "7": "demangle_v3_arglist"
                },
                "__format": {
                    "1": "err_msg",
                    "23": "error_message",
                    "6": "error_msg"
                },
                "__ptr": {
                    "1": "decoded_values",
                    "11": "result",
                    "2": "result_list",
                    "7": "result_array",
                    "8": "result_ptr"
                },
                "lVar1": {
                    "1": "demangled_arg",
                    "2": "parsed_value",
                    "4": "return_value",
                    "8": "result"
                },
                "local_39": {
                    "1": "char_buffer",
                    "2": "buffer",
                    "3": "type_string",
                    "9": "temp_buffer"
                },
                "param_1": {
                    "1": "data1",
                    "18": "arg1",
                    "3": "param_1",
                    "7": "param1"
                },
                "param_2": {
                    "1": "ptr2",
                    "18": "arg2",
                    "3": "param_2",
                    "7": "param2"
                },
                "param_3": {
                    "31": "arglist"
                },
                "param_4": {
                    "1": "invalid_type",
                    "15": "error_flag",
                    "3": "has_error",
                    "7": "is_error"
                },
                "uVar2": {
                    "1": "result_counter",
                    "2": "array_index",
                    "3": "result_index",
                    "4": "count",
                    "5": "result_count",
                    "7": "index"
                },
                "uVar3": {
                    "1": "result_size",
                    "2": "max_values",
                    "3": "size",
                    "7": "result_capacity",
                    "9": "capacity"
                },
                "uVar4": {
                    "1": "temp_index",
                    "2": "temp_counter",
                    "3": "temp_count",
                    "6": "new_index",
                    "7": "index"
                }
            },
            "called": [
                "fprintf",
                "free",
                "FUN_0010b0fa",
                "xrealloc",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result;\n  char *error_message;\n  long result;\n  ulong index;\n  ulong capacity;\n  uint index;\n  char temp_buffer [9];\n  \n  capacity = 10;\n  index = 0;\n  result = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    result = demangle_and_initialize_data_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,temp_buffer);\n    if (result == 0) {\n      if (temp_buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      index = (int)index + 1;\n      if ((uint)capacity <= index) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + index * 8) = result;\n      index = (ulong)index;\n    }\n  }\n  *(undefined8 *)((long)result + index * 8) = 0;\n  return result;\n}\n\n",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n",
            "current_name": "demangle_arglist_0010b6ea",
            "entrypoint": "0x0010b6ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "__format": "error_message",
                "__ptr": "result",
                "lVar1": "result",
                "local_39": "temp_buffer",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "uVar2": "index",
                "uVar3": "capacity",
                "uVar4": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b800": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "FUN_0010b800": {
                    "1": "handle_stab_int_type",
                    "2": "initialize_structure",
                    "26": "initialize_data_structure"
                },
                "auStack_8a": {
                    "1": "temp_array",
                    "12": "stack_array",
                    "2": "array_stack"
                },
                "lVar4": {
                    "1": "stored_value",
                    "2": "temp_variable",
                    "3": "element",
                    "4": "temp_value"
                },
                "lVar5": {
                    "1": "temp_variable_2",
                    "2": "temp_value2",
                    "3": "mask"
                },
                "local_8c": {
                    "1": "message_buffer",
                    "2": "output_buffer",
                    "3": "format_string",
                    "4": "buffer",
                    "5": "local_string",
                    "7": "output_string"
                },
                "param_1": {
                    "1": "data",
                    "2": "data_ptr",
                    "24": "base_address"
                },
                "param_2": {
                    "1": "index",
                    "30": "size"
                },
                "param_3": {
                    "1": "is_flag_set",
                    "2": "is_null",
                    "27": "flag"
                },
                "plVar1": {
                    "1": "ptr_to_value",
                    "2": "ptr_to_data",
                    "5": "pointer",
                    "7": "ptr_to_element"
                },
                "sVar3": {
                    "1": "str_len",
                    "14": "string_length",
                    "3": "str_length",
                    "6": "length"
                },
                "uVar2": {
                    "10": "return_value",
                    "21": "result"
                }
            },
            "called": [
                "FUN_00119ed0",
                "FUN_00109cf4",
                "sprintf",
                "dcgettext",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 initialize_data_structure_0010b800(long base_address,int size,char flag)\n\n{\n  long *ptr_to_element;\n  undefined8 result;\n  size_t string_length;\n  long temp_long;\n  long bit_mask;\n  undefined2 output_string;\n  undefined4 stack_array [24];\n  \n  if (size - 1U < 8) {\n    temp_long = base_address + 0xb8;\n    if (flag != '\\0') {\n      temp_long = base_address + 0x78;\n    }\n    ptr_to_element = (long *)(temp_long + (ulong)(size - 1U) * 8);\n    temp_long = *ptr_to_element;\n    if (temp_long != 0) {\n      result = initialize_data_structure_0010b800_00109cf4(base_address,temp_long,size);\n      return result;\n    }\n    temp_long = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = temp_long + 1;\n    *ptr_to_element = temp_long;\n    sprintf((char *)&output_string,\"%ld=r%ld;\",temp_long,temp_long);\n    if (flag == '\\0') {\n      bit_mask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      string_length = strlen((char *)&output_string);\n      sprintf((char *)((long)&output_string + string_length),\"%ld;%ld;\",-bit_mask,bit_mask + -1);\n    }\n    else {\n      string_length = strlen((char *)&output_string);\n      *(undefined2 *)((long)&output_string + string_length) = 0x3b30;\n      *(undefined *)((long)&output_string + string_length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&output_string + string_length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&output_string + string_length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = initialize_data_structure_0010b800_00109b52(base_address,&output_string,temp_long,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_0010b800",
            "entrypoint": "0x0010b800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b800": "initialize_data_structure_0010b800",
                "auStack_8a": "stack_array",
                "lVar4": "temp_long",
                "lVar5": "bit_mask",
                "local_8c": "output_string",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "ptr_to_element",
                "sVar3": "string_length",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b948": {
            "additional_data": {
                "FUN_0010b948": {
                    "1": "initialize_structure",
                    "2": "initialize_data",
                    "26": "initialize_data_structure"
                },
                "__ptr": {
                    "1": "extracted_str",
                    "17": "extracted_ptr",
                    "2": "extracted_data",
                    "3": "data_ptr"
                },
                "cVar2": {
                    "1": "is_data_structure_initialized",
                    "2": "success",
                    "3": "is_initialized",
                    "7": "success_flag",
                    "9": "result"
                },
                "lVar1": {
                    "1": "array_element",
                    "2": "data_structure_ptr",
                    "3": "ptr",
                    "6": "data_ptr"
                },
                "local_5a": {
                    "1": "local_string",
                    "19": "formatted_string",
                    "4": "output_string"
                },
                "param_1": {
                    "1": "data",
                    "10": "base_address",
                    "2": "param1",
                    "4": "data_structure_ptr",
                    "8": "data_structure"
                },
                "param_2": {
                    "1": "arg_2",
                    "14": "size",
                    "2": "element_count",
                    "3": "count",
                    "5": "num_elements"
                },
                "uVar3": {
                    "1": "num_elements_ulong",
                    "2": "unsigned_size"
                },
                "uVar4": {
                    "1": "modified_param2",
                    "2": "count_minus_one",
                    "3": "num_elements_minus_one",
                    "4": "index",
                    "9": "size_minus_one"
                }
            },
            "called": [
                "FUN_0010b800",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_data_structure_0010b948(long base_address,uint size)\n\n{\n  long data_ptr;\n  char result;\n  void *extracted_ptr;\n  ulong size_as_ulong;\n  uint size_minus_one;\n  char formatted_string [50];\n  \n  size_minus_one = size - 1;\n  size_as_ulong = (ulong)size;\n  if ((size_minus_one < 0x10) && (data_ptr = *(long *)(base_address + 0xf8 + (ulong)size_minus_one * 8), data_ptr != 0)) {\n    initialize_data_structure_0010b948_00109cf4(base_address,data_ptr,size_as_ulong);\n    return;\n  }\n  result = initialize_data_structure_0010b948_0010b800(base_address,4,0);\n  if (result != '\\0') {\n    extracted_ptr = (void *)extract_and_free_ptr_00109b2f(base_address);\n    data_ptr = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = data_ptr + 1;\n    if (size_minus_one < 0x10) {\n      *(long *)(base_address + 0xf8 + (ulong)size_minus_one * 8) = data_ptr;\n    }\n    sprintf(formatted_string,\"%ld=r%s;%u;0;\",data_ptr,extracted_ptr,size_as_ulong);\n    free(extracted_ptr);\n    initialize_data_structure_0010b948_00109b52(base_address,formatted_string,data_ptr,1,size_as_ulong);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_0010b948",
            "entrypoint": "0x0010b948",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b948": "initialize_data_structure_0010b948",
                "__ptr": "extracted_ptr",
                "cVar2": "result",
                "lVar1": "data_ptr",
                "local_5a": "formatted_string",
                "param_1": "base_address",
                "param_2": "size",
                "uVar3": "size_as_ulong",
                "uVar4": "size_minus_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ba08": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "generate_struct_field_string"
                },
                "FUN_0010ba08": {
                    "1": "build_warning_message",
                    "14": "generate_warning_message",
                    "2": "generate_field_string",
                    "3": "generate_struct_field"
                },
                "__s": {
                    "1": "extracted_data",
                    "2": "extracted_str",
                    "25": "extracted_string"
                },
                "__s_00": {
                    "1": "generated_message",
                    "2": "concatenated_string",
                    "3": "new_string",
                    "5": "combined_string",
                    "7": "formatted_string"
                },
                "cVar1": {
                    "1": "should_print_warning",
                    "13": "flag",
                    "2": "warning_flag",
                    "3": "flag_char",
                    "5": "flag_value"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "get_error_message"
                },
                "extract_and_free_ptr_00109b2f": {
                    "1": "extract_and_free"
                },
                "free": {
                    "1": "deallocate_memory",
                    "2": "free_memory"
                },
                "iVar2": {
                    "1": "field_type",
                    "12": "struct_size",
                    "2": "int_value",
                    "6": "field_count"
                },
                "lVar3": {
                    "1": "object_offset",
                    "2": "length",
                    "4": "local_var",
                    "5": "struct_offset"
                },
                "param_1": {
                    "1": "arg_array",
                    "2": "param_list",
                    "3": "parameters",
                    "6": "struct_ptr"
                },
                "param_2": {
                    "1": "struct_field",
                    "30": "field_name"
                },
                "param_3": {
                    "1": "length",
                    "2": "param1",
                    "3": "param3",
                    "4": "param3_value",
                    "7": "param_value",
                    "8": "field_value"
                },
                "param_4": {
                    "1": "field_type",
                    "2": "param2",
                    "24": "field_size",
                    "3": "size"
                },
                "param_5": {
                    "1": "status",
                    "12": "field_type",
                    "2": "option",
                    "8": "flag"
                },
                "pcVar10": {
                    "1": "default_string"
                },
                "pcVar9": {
                    "1": "mode_suffix",
                    "11": "flag_string",
                    "2": "field_type_string"
                },
                "print_error_message_00119ed0": {
                    "6": "print_error_message"
                },
                "sVar4": {
                    "1": "object_list_size",
                    "2": "param2_length"
                },
                "sVar5": {
                    "1": "length2",
                    "10": "field_name_length",
                    "2": "str_len2",
                    "7": "field_name_size"
                },
                "sVar6": {
                    "1": "extracted_string_len",
                    "11": "extracted_string_length",
                    "2": "str_len3",
                    "5": "extracted_string_size"
                },
                "sprintf": {
                    "1": "write_formatted_string",
                    "4": "format_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar7": {
                    "1": "error_format",
                    "17": "warning_message",
                    "2": "warning_msg",
                    "7": "error_message"
                },
                "uVar8": {
                    "25": "return_value",
                    "3": "result"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "FUN_00119ed0",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "dcgettext",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8\ngenerate_warning_message_0010ba08(undefined8 *struct_ptr,char *field_name,undefined8 field_value,ulong field_size,int field_type)\n\n{\n  char flag;\n  int struct_size;\n  long struct_offset;\n  char *extracted_string;\n  size_t str_len1;\n  size_t field_name_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  undefined8 warning_message;\n  undefined8 return_value;\n  char *flag_string;\n  \n  flag = *(char *)(struct_ptr[0xc] + 0x1c);\n  struct_size = *(int *)(struct_ptr[0xc] + 0x18);\n  extracted_string = (char *)extract_and_free_ptr();\n  if (*(char **)(struct_ptr[0xc] + 0x20) == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    str_len1 = strlen(*(char **)(struct_ptr[0xc] + 0x20));\n    field_name_length = strlen(field_name);\n    extracted_string_length = strlen(extracted_string);\n    formatted_string = (char *)xmalloc(str_len1 + 0x32 + field_name_length + extracted_string_length);\n    if (field_type == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((field_type != 2) && (flag_string = \"\", field_type != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((field_size == 0) && (field_size = (ulong)(uint)(struct_size * 8), field_size == 0)) {\n      return_value = *(undefined8 *)*struct_ptr;\n      warning_message = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      print_error_message(warning_message,return_value,field_name);\n    }\n    sprintf(formatted_string,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(struct_ptr[0xc] + 0x20),field_name,flag_string,extracted_string,\n            field_value,field_size);\n    free_memory(*(void **)(struct_ptr[0xc] + 0x20));\n    struct_offset = struct_ptr[0xc];\n    *(char **)(struct_offset + 0x20) = formatted_string;\n    if (flag != '\\0') {\n      *(undefined *)(struct_offset + 0x1c) = 1;\n    }\n    return_value = CONCAT71((int7)((ulong)struct_offset >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "generate_warning_message_0010ba08",
            "entrypoint": "0x0010ba08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "cVar1": "flag",
                "dcgettext": "get_error_message",
                "extract_and_free_ptr_00109b2f": "extract_and_free_ptr",
                "free": "free_memory",
                "iVar2": "struct_size",
                "lVar3": "struct_offset",
                "param_1": "struct_ptr",
                "param_2": "field_name",
                "param_3": "field_value",
                "param_4": "field_size",
                "param_5": "field_type",
                "pcVar9": "flag_string",
                "print_error_message_00119ed0": "print_error_message",
                "sVar4": "str_len1",
                "sVar5": "field_name_length",
                "sVar6": "extracted_string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar7": "warning_message",
                "uVar8": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bb52": {
            "additional_data": {
                "0": {
                    "2": "initial_value"
                },
                "0x18": {
                    "1": "offset2"
                },
                "0x20": {
                    "1": "offset1"
                },
                "0x28": {
                    "1": "another_offset"
                },
                "0x30": {
                    "1": "buffer_size"
                },
                "0xffffffffffffffff": {
                    "2": "max_value"
                },
                "FUN_0010bb52": {
                    "1": "create_new_hash",
                    "10": "allocate_and_initialize_hash",
                    "12": "create_hash_function",
                    "2": "create_hash"
                },
                "bfd_hash_allocate": {
                    "1": "allocate_bfd_hash",
                    "12": "allocate_hash",
                    "2": "allocate_hash_memory"
                },
                "bfd_hash_newfunc": {
                    "1": "initialize_hash",
                    "2": "create_new_function",
                    "3": "create_new_hash",
                    "4": "create_new_func"
                },
                "lVar1": {
                    "1": "hash_pointer",
                    "2": "hash_function_result",
                    "3": "hash",
                    "5": "hash_ptr",
                    "9": "new_hash"
                },
                "param_1": {
                    "1": "allocation_size",
                    "2": "hash",
                    "3": "input_param",
                    "5": "hash_size",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "hash_key",
                    "11": "param2",
                    "12": "param_2"
                },
                "param_3": {
                    "1": "param_b",
                    "11": "param3",
                    "12": "param_3"
                }
            },
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nlong create_hash_function_0010bb52(long input_value,undefined8 param_2,undefined8 param_3)\n\n{\n  long new_hash;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(param_2,0x30), input_value != 0)) &&\n     (new_hash = bfd_hash_newfunc(input_value,param_2,param_3), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_hash_function_0010bb52",
            "entrypoint": "0x0010bb52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bb52": "create_hash_function_0010bb52",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "create_new_func",
                "lVar1": "new_hash",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bba1": {
            "additional_data": {
                "FUN_0010bba1": {
                    "1": "lookup_and_initialize_data",
                    "16": "lookup_and_initialize_data_structure",
                    "2": "lookup_and_init_data_structure",
                    "7": "initialize_data_structure"
                },
                "initialize_data_structure_00109cf4": {
                    "1": "initialize_data_structure"
                },
                "lVar1": {
                    "1": "hash_entry",
                    "16": "lookup_result",
                    "4": "hash_lookup_result",
                    "8": "hash_result"
                },
                "param_1": {
                    "1": "binary",
                    "2": "input_address",
                    "3": "input_param",
                    "4": "binary_address",
                    "7": "base_address"
                },
                "param_2": {
                    "1": "data",
                    "2": "data_to_lookup",
                    "3": "hash_value",
                    "7": "lookup_key"
                },
                "uVar2": {
                    "1": "data_structure_initialization_result",
                    "2": "initialize_result",
                    "3": "data_structure_result",
                    "5": "initialized_structure",
                    "8": "result"
                }
            },
            "called": [
                "FUN_00109cf4",
                "bfd_hash_lookup"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 lookup_and_initialize_data_structure_0010bba1(long base_address,undefined8 lookup_key)\n\n{\n  long lookup_result;\n  undefined8 result;\n  \n  lookup_result = bfd_hash_lookup(base_address + 0x1b8,lookup_key,0,0);\n  if ((lookup_result != 0) && (0 < *(long *)(lookup_result + 0x20))) {\n    result = initialize_data_structure(base_address,*(long *)(lookup_result + 0x20),*(undefined4 *)(lookup_result + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "lookup_and_initialize_data_structure_0010bba1",
            "entrypoint": "0x0010bba1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bba1": "lookup_and_initialize_data_structure_0010bba1",
                "initialize_data_structure_00109cf4": "initialize_data_structure",
                "lVar1": "lookup_result",
                "param_1": "base_address",
                "param_2": "lookup_key",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bbd3": {
            "additional_data": {
                "FUN_0010bbd3": {
                    "1": "initialize_data_structure",
                    "2": "set_debug_info",
                    "20": "initialize_debug_info",
                    "5": "initialize_debug_data"
                },
                "auVar8": {
                    "1": "return_val",
                    "19": "return_value",
                    "9": "result"
                },
                "bVar7": {
                    "1": "byte_value",
                    "10": "byte_var",
                    "3": "temp_byte",
                    "8": "flag"
                },
                "lVar4": {
                    "1": "index",
                    "13": "loop_counter",
                    "3": "loop_var",
                    "4": "loop_count",
                    "5": "counter"
                },
                "param_1": {
                    "1": "data",
                    "15": "debug_info",
                    "2": "debug_info_ptr",
                    "4": "debug_data"
                },
                "param_2": {
                    "1": "param_string",
                    "29": "filename"
                },
                "param_3": {
                    "1": "var_10",
                    "14": "param3",
                    "2": "arg1",
                    "4": "arg3",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "var4",
                    "14": "param4",
                    "2": "arg2",
                    "4": "arg4",
                    "6": "param_4"
                },
                "pcVar6": {
                    "1": "local_var4",
                    "2": "temp_filename",
                    "6": "filename_ptr",
                    "9": "default_filename"
                },
                "puVar1": {
                    "1": "previous_debug_params",
                    "2": "unit_array",
                    "4": "info_units",
                    "9": "ptr1"
                },
                "puVar2": {
                    "1": "new_ptr1",
                    "2": "debug_info1",
                    "3": "units_ptr1",
                    "6": "ptr2"
                },
                "puVar3": {
                    "1": "ptr_to_zero_array2",
                    "2": "debug_info2",
                    "3": "unit2",
                    "6": "ptr3"
                },
                "puVar5": {
                    "1": "ptr2",
                    "2": "loop_ptr",
                    "3": "ptr",
                    "4": "ptr4"
                }
            },
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\nundefined  [16] initialize_debug_info_0010bbd3(long *debug_info,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long loop_counter;\n  undefined4 *temp_ptr;\n  char *default_filename;\n  byte byte_var;\n  undefined return_value [16];\n  \n  byte_var = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  temp_ptr = ptr2;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *temp_ptr = 0;\n    temp_ptr = temp_ptr + (ulong)byte_var * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = default_filename;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debug_info[2] = (long)ptr2;\n  temp_ptr = ptr3;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *temp_ptr = 0;\n    temp_ptr = temp_ptr + (ulong)byte_var * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debug_info[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debug_info != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debug_info = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debug_info[1] = (long)ptr3;\n  debug_info[5] = 0;\n  *(undefined (*) [16])(debug_info + 3) = ZEXT816(0);\n  return_value._8_8_ = param4;\n  return_value._0_8_ = 1;\n  return return_value;\n}\n\n",
            "current_name": "initialize_debug_info_0010bbd3",
            "entrypoint": "0x0010bbd3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "auVar8": "return_value",
                "bVar7": "byte_var",
                "lVar4": "loop_counter",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar6": "default_filename",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "puVar5": "temp_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bc80": {
            "additional_data": {
                "FUN_0010bc80": {
                    "1": "initialize_debug_records",
                    "16": "debug_record_function",
                    "5": "initialize_debug_record",
                    "6": "record_debug_function"
                },
                "auVar8": {
                    "1": "result_tuple",
                    "10": "result",
                    "15": "return_value"
                },
                "bVar7": {
                    "1": "zero_byte",
                    "14": "flag",
                    "2": "zero",
                    "3": "byte_var"
                },
                "lVar4": {
                    "1": "index",
                    "18": "result",
                    "2": "i",
                    "6": "temp"
                },
                "param_1": {
                    "1": "function_info",
                    "2": "debug_record_ptr",
                    "3": "filename",
                    "5": "debug_info",
                    "6": "debug_context"
                },
                "param_2": {
                    "1": "debug_info",
                    "2": "debug_message",
                    "24": "filename",
                    "3": "file_name"
                },
                "param_3": {
                    "1": "debug_data",
                    "2": "record_length",
                    "3": "line_number",
                    "5": "size",
                    "7": "record_size"
                },
                "param_4": {
                    "1": "debug_flag",
                    "11": "flag",
                    "3": "debug_flags",
                    "6": "flags",
                    "8": "record_type"
                },
                "param_5": {
                    "1": "param_null",
                    "22": "param_5",
                    "7": "param5"
                },
                "param_6": {
                    "1": "result",
                    "22": "param_6",
                    "7": "param6"
                },
                "pcVar6": {
                    "1": "var2",
                    "15": "default_filename",
                    "2": "default_file_name",
                    "3": "default_message"
                },
                "plVar2": {
                    "1": "debug_data",
                    "2": "debug_info",
                    "3": "debug_record_ptr",
                    "4": "record",
                    "6": "debug_record",
                    "8": "record_ptr"
                },
                "puVar3": {
                    "1": "pointer1",
                    "2": "debug_info_ptr",
                    "3": "memory_ptr",
                    "6": "debug_data"
                },
                "puVar5": {
                    "1": "current_debug_info",
                    "2": "temp",
                    "4": "pu_var5",
                    "5": "temp_ptr"
                },
                "uVar1": {
                    "1": "localized_error",
                    "2": "debug_message",
                    "21": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "FUN_00112925"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long debug_context,char *filename,long record_size,uint flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *record_ptr;\n  undefined4 *debug_data;\n  long result;\n  undefined4 *temp_ptr;\n  char *default_filename;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (record_size != 0) {\n    if (*(long *)(debug_context + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      record_ptr = (long *)xmalloc(0x18);\n      *record_ptr = record_size;\n      *(undefined (*) [16])(record_ptr + 1) = ZEXT816(0);\n      debug_data = (undefined4 *)xmalloc(0x30);\n      *(long **)(debug_context + 0x18) = record_ptr;\n      record_ptr[2] = (long)debug_data;\n      temp_ptr = debug_data;\n      for (result = 0xc; result != 0; result = result + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(debug_context + 0x20) = debug_data;\n      result = *(long *)(debug_context + 0x10);\n      *(undefined8 *)(debug_data + 6) = param_5;\n      *(undefined8 *)(debug_data + 8) = 0xffffffffffffffff;\n      result = initialize_memory_00112925(result + 0x10,default_filename,3,(flag & 0xff) + 1);\n      if (result != 0) {\n        *(long **)(result + 0x20) = record_ptr;\n        error_message = CONCAT71((int7)((ulong)result >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_record_function_0010bc80",
            "entrypoint": "0x0010bc80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "result",
                "param_1": "debug_context",
                "param_2": "filename",
                "param_3": "record_size",
                "param_4": "flag",
                "pcVar6": "default_filename",
                "plVar2": "record_ptr",
                "puVar3": "debug_data",
                "puVar5": "temp_ptr",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bd62": {
            "additional_data": {
                "FUN_0010bd62": {
                    "1": "record_parameter_debugging",
                    "2": "record_debug_parameter",
                    "22": "record_parameter",
                    "3": "record_parameter_debug"
                },
                "bVar8": {
                    "1": "byte_var",
                    "11": "flag",
                    "2": "count",
                    "5": "counter"
                },
                "lVar5": {
                    "1": "current_function_address",
                    "12": "loop_counter",
                    "2": "i",
                    "3": "counter"
                },
                "long": {
                    "1": "int64_t"
                },
                "param_1": {
                    "1": "function_addr",
                    "2": "function_pointer",
                    "3": "function_info",
                    "4": "function_data",
                    "5": "function",
                    "7": "function_address",
                    "9": "function_ptr"
                },
                "param_2": {
                    "1": "param_length",
                    "2": "record_size",
                    "3": "record_id",
                    "6": "param1"
                },
                "param_3": {
                    "1": "value_ptr",
                    "2": "length",
                    "3": "param3",
                    "6": "param2"
                },
                "param_4": {
                    "1": "param_4_value",
                    "2": "param",
                    "3": "param4",
                    "4": "param_type",
                    "6": "param3"
                },
                "param_5": {
                    "1": "callback_function",
                    "2": "param_5",
                    "3": "param5",
                    "5": "param_value",
                    "6": "param4"
                },
                "puVar1": {
                    "1": "prev_ptr",
                    "15": "current_ptr",
                    "2": "current",
                    "3": "current_node",
                    "4": "current_pointer"
                },
                "puVar2": {
                    "1": "result"
                },
                "puVar3": {
                    "1": "pu_var",
                    "11": "new_record",
                    "2": "new_ptr",
                    "3": "allocated_memory"
                },
                "puVar4": {
                    "1": "current",
                    "2": "next_record",
                    "3": "temp_pointer",
                    "4": "next_node",
                    "6": "temp_ptr",
                    "7": "next_ptr"
                },
                "puVar6": {
                    "1": "prev_node_ptr",
                    "15": "last_ptr",
                    "2": "previous_node",
                    "3": "last_node"
                },
                "puVar7": {
                    "1": "loop_ptr",
                    "2": "record_ptr",
                    "4": "temp_ptr"
                },
                "uVar2": {
                    "1": "debug_message",
                    "20": "error_message",
                    "9": "error_msg"
                },
                "undefined8": {
                    "1": "uint64_t"
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "code": "\n\n\nuint64_t\nrecord_parameter_0010bd62(int64_t function_ptr,int64_t param1,int64_t param2,undefined4 param3,uint64_t param4)\n\n{\n  uint64_t *current_ptr;\n  uint64_t error_message;\n  undefined4 *new_record;\n  uint64_t *next_ptr;\n  int64_t loop_counter;\n  uint64_t *last_ptr;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (param1 == 0) {\n    return 0;\n  }\n  if (param2 != 0) {\n    if ((*(int64_t *)(function_ptr + 8) != 0) && (*(int64_t *)(function_ptr + 0x18) != 0)) {\n      new_record = (undefined4 *)xmalloc(0x28);\n      temp_ptr = new_record;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (uint64_t)flag * -2 + 1;\n      }\n      loop_counter = *(int64_t *)(function_ptr + 0x18);\n      *(int64_t *)(new_record + 2) = param1;\n      *(int64_t *)(new_record + 4) = param2;\n      new_record[6] = param3;\n      current_ptr = *(uint64_t **)(loop_counter + 8);\n      *(uint64_t *)(new_record + 8) = param4;\n      last_ptr = (uint64_t *)(loop_counter + 8);\n      while (next_ptr = current_ptr, next_ptr != (uint64_t *)0x0) {\n        last_ptr = next_ptr;\n        current_ptr = (uint64_t *)*next_ptr;\n      }\n      *last_ptr = new_record;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "current_name": "record_parameter_0010bd62",
            "entrypoint": "0x0010bd62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "bVar8": "flag",
                "lVar5": "loop_counter",
                "long": "int64_t",
                "param_1": "function_ptr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "puVar1": "current_ptr",
                "puVar3": "new_record",
                "puVar4": "next_ptr",
                "puVar6": "last_ptr",
                "puVar7": "temp_ptr",
                "uVar2": "error_message",
                "undefined8": "uint64_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be1a": {
            "additional_data": {
                "FUN_0010be1a": {
                    "1": "end_function",
                    "15": "debug_end_function",
                    "3": "end_current_function",
                    "7": "end_function_debugging"
                },
                "auVar4": {
                    "1": "output",
                    "3": "result",
                    "8": "return_value"
                },
                "lVar1": {
                    "1": "current_func",
                    "12": "current_block",
                    "2": "block_pointer",
                    "4": "block_ptr",
                    "5": "block_info"
                },
                "param_1": {
                    "1": "function_descriptor",
                    "2": "function_context",
                    "3": "function_pointer",
                    "4": "function_ptr",
                    "7": "function_data",
                    "8": "function_info"
                },
                "param_2": {
                    "1": "original_function",
                    "2": "new_param",
                    "3": "new_value"
                },
                "param_3": {
                    "1": "unused_1",
                    "13": "unused_param",
                    "2": "param_3",
                    "3": "unused"
                },
                "param_4": {
                    "1": "var_8",
                    "2": "new_param4",
                    "3": "return_value",
                    "4": "result",
                    "6": "error_message"
                },
                "pcVar3": {
                    "1": "error_message_text",
                    "11": "error_string",
                    "14": "error_message",
                    "2": "error_msg"
                },
                "uVar2": {
                    "1": "trans_error",
                    "2": "translation",
                    "3": "translated_message",
                    "8": "error_message"
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_info,undefined8 current_function,undefined8 unused_param,undefined8 error_message)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined return_value [16];\n  \n  if (((*(long *)(function_info + 8) == 0) || (current_block = *(long *)(function_info + 0x20), current_block == 0)) ||\n     (*(long *)(function_info + 0x18) == 0)) {\n    error_message = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = current_function;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_info + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_message = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010be86:\n  return_value._8_8_ = error_message;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_end_function_0010be1a",
            "entrypoint": "0x0010be1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "auVar4": "return_value",
                "lVar1": "current_block",
                "param_1": "function_info",
                "param_2": "current_function",
                "param_3": "unused_param",
                "param_4": "error_message",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be88": {
            "additional_data": {
                "FUN_0010be88": {
                    "1": "process_debug_start_block",
                    "13": "start_debug_block",
                    "7": "debug_start_block",
                    "8": "start_block_debugging"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "auVar9": {
                    "1": "return_val",
                    "15": "return_value",
                    "6": "result"
                },
                "bVar8": {
                    "1": "is_initialized",
                    "11": "flag",
                    "2": "is_zero",
                    "3": "byte_var",
                    "4": "loop_counter",
                    "5": "counter"
                },
                "lVar5": {
                    "1": "counter",
                    "10": "block_address",
                    "2": "current_block"
                },
                "param_1": {
                    "1": "block_structure",
                    "2": "block_id",
                    "4": "block",
                    "6": "block_ptr"
                },
                "param_2": {
                    "1": "debug_param1",
                    "2": "param_2",
                    "4": "current_block",
                    "7": "start_address",
                    "9": "param2"
                },
                "param_3": {
                    "1": "unknown",
                    "3": "unused_param",
                    "4": "end_address",
                    "9": "param3"
                },
                "param_4": {
                    "1": "callback_function",
                    "5": "result",
                    "7": "return_value",
                    "8": "param4"
                },
                "puVar1": {
                    "1": "next_block_ptr",
                    "2": "next_block",
                    "3": "current_block",
                    "4": "current_ptr"
                },
                "puVar3": {
                    "1": "alloc_ptr",
                    "15": "new_block",
                    "3": "block",
                    "6": "new_block_ptr"
                },
                "puVar4": {
                    "1": "ptr_temp",
                    "2": "current_block_ptr",
                    "5": "current_block",
                    "6": "temp_ptr"
                },
                "puVar6": {
                    "1": "last_node",
                    "2": "prev_block",
                    "3": "previous_block",
                    "4": "last_ptr",
                    "5": "last_block"
                },
                "puVar7": {
                    "1": "loop_ptr",
                    "2": "temp_block_ptr",
                    "6": "temp_block"
                },
                "uVar2": {
                    "1": "success_flag",
                    "13": "result",
                    "3": "return_value",
                    "4": "status",
                    "7": "success"
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] start_debug_block_0010be88(long block_ptr,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *current_ptr;\n  undefined8 result;\n  undefined4 *new_block;\n  undefined8 *temp_ptr;\n  long block_address;\n  undefined8 *last_block;\n  undefined4 *temp_block;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if ((*(long *)(block_ptr + 8) == 0) || (*(long *)(block_ptr + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(error_stream,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    new_block = (undefined4 *)xmalloc(0x30);\n    temp_block = new_block;\n    for (block_address = 0xc; block_address != 0; block_address = block_address + -1) {\n      *temp_block = 0;\n      temp_block = temp_block + (ulong)flag * -2 + 1;\n    }\n    block_address = *(long *)(block_ptr + 0x20);\n    *(undefined8 *)(new_block + 6) = param2;\n    *(undefined8 *)(new_block + 8) = 0xffffffffffffffff;\n    *(long *)(new_block + 2) = block_address;\n    current_ptr = *(undefined8 **)(block_address + 0x10);\n    last_block = (undefined8 *)(block_address + 0x10);\n    while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n      last_block = temp_ptr;\n      current_ptr = (undefined8 *)*temp_ptr;\n    }\n    *last_block = new_block;\n    result = 1;\n    *(undefined4 **)(block_ptr + 0x20) = new_block;\n  }\n  return_value._8_8_ = param4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "start_debug_block_0010be88",
            "entrypoint": "0x0010be88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be88": "start_debug_block_0010be88",
                "_stderr": "error_stream",
                "auVar9": "return_value",
                "bVar8": "flag",
                "lVar5": "block_address",
                "param_1": "block_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "current_ptr",
                "puVar3": "new_block",
                "puVar4": "temp_ptr",
                "puVar6": "last_block",
                "puVar7": "temp_block",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf20": {
            "additional_data": {
                "FUN_0010bf20": {
                    "1": "end_block_debugger",
                    "11": "debug_end_block",
                    "2": "close_debug_block",
                    "4": "end_current_block",
                    "5": "end_block"
                },
                "auVar4": {
                    "1": "return_val",
                    "2": "return_value_struct",
                    "3": "result",
                    "9": "return_value"
                },
                "lVar1": {
                    "1": "current_block_pointer",
                    "22": "current_block",
                    "5": "current_block_ptr"
                },
                "param_1": {
                    "1": "block_context",
                    "2": "block",
                    "3": "block_info",
                    "7": "block_pointer",
                    "9": "block_ptr"
                },
                "param_2": {
                    "1": "new_param",
                    "2": "block_id",
                    "3": "new_block_ptr"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "12": "unused_param",
                    "2": "unused_parameter",
                    "3": "param_3",
                    "5": "unused"
                },
                "param_4": {
                    "1": "unused_param_4",
                    "14": "return_value",
                    "2": "param_4",
                    "4": "result"
                },
                "pcVar3": {
                    "1": "error_message_text",
                    "22": "error_message",
                    "5": "error_string"
                },
                "uVar2": {
                    "1": "localized_error",
                    "2": "error_msg",
                    "3": "error_string",
                    "4": "result",
                    "7": "error_message"
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 new_block_ptr,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined return_value [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_block_ptr;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010bf84:\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_end_block_0010bf20",
            "entrypoint": "0x0010bf20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "auVar4": "return_value",
                "lVar1": "current_block",
                "param_1": "block_ptr",
                "param_2": "new_block_ptr",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf86": {
            "additional_data": {
                "FUN_0010bf86": {
                    "1": "update_record_line",
                    "2": "record_line_debug",
                    "5": "update_debug_record_line",
                    "7": "record_line_debug_info",
                    "8": "record_debug_line"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "bVar7": {
                    "1": "counter",
                    "2": "is_negative",
                    "23": "flag"
                },
                "lVar5": {
                    "1": "loop_index",
                    "2": "count",
                    "3": "index",
                    "4": "i",
                    "5": "counter"
                },
                "param_1": {
                    "1": "param",
                    "2": "debug_info",
                    "3": "debug_context",
                    "6": "record"
                },
                "param_2": {
                    "1": "new_param1",
                    "12": "line_number",
                    "2": "line_record",
                    "3": "line"
                },
                "param_3": {
                    "1": "unit_number",
                    "2": "source_file",
                    "3": "line",
                    "8": "unit"
                },
                "puVar2": {
                    "1": "debug_ptr",
                    "10": "current_record",
                    "2": "current_unit_ptr",
                    "4": "unit_ptr",
                    "8": "current_unit"
                },
                "puVar4": {
                    "1": "new_debug_info_ptr",
                    "15": "new_record",
                    "2": "new_debug_record",
                    "3": "new_record_ptr"
                },
                "puVar6": {
                    "1": "debug_ptr",
                    "2": "record_ptr",
                    "3": "record_pointer",
                    "6": "ptr"
                },
                "uVar1": {
                    "1": "err_msg",
                    "16": "error_message",
                    "2": "error_msg",
                    "9": "result"
                },
                "uVar3": {
                    "1": "counter",
                    "26": "index"
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 record_debug_line_0010bf86(long record,undefined8 line_number,undefined8 unit)\n\n{\n  undefined8 error_message;\n  undefined8 *current_record;\n  ulong index;\n  undefined4 *new_record;\n  long counter;\n  undefined4 *ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record + 8) == 0) {\n    error_message = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(stderr,\"%s\\n\",error_message);\n    error_message = 0;\n  }\n  else {\n    counter = *(long *)(record + 0x28);\n    if ((counter != 0) && (*(long *)(counter + 8) == *(long *)(record + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(counter + 0x10 + index * 8) == -1) {\n          current_record = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(counter + 0x10 + (long)current_record * 8) = line_number;\n          *(undefined8 *)(counter + 0x60 + (long)current_record * 8) = unit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    new_record = (undefined4 *)xmalloc(0xb0);\n    ptr = new_record;\n    for (counter = 0x2c; counter != 0; counter = counter + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    error_message = *(undefined8 *)(record + 0x10);\n    *(undefined8 *)(new_record + 4) = line_number;\n    *(undefined8 *)(new_record + 2) = error_message;\n    *(undefined8 *)(new_record + 0x18) = unit;\n    ptr = new_record + 6;\n    for (counter = 0x48; counter != 0; counter = counter + -1) {\n      *(undefined *)ptr = 0xff;\n      ptr = (undefined4 *)((long)ptr + (ulong)flag * -2 + 1);\n    }\n    current_record = *(undefined8 **)(record + 0x28);\n    if (current_record == (undefined8 *)0x0) {\n      current_record = *(undefined8 **)(record + 8);\n      current_record[2] = new_record;\n    }\n    else {\n      *current_record = new_record;\n    }\n    *(undefined4 **)(record + 0x28) = new_record;\nLAB_0010c056:\n    error_message = CONCAT71((int7)((ulong)current_record >> 8),1);\n  }\n  return error_message;\n}\n\n",
            "current_name": "record_debug_line_0010bf86",
            "entrypoint": "0x0010bf86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "_stderr": "stderr",
                "bVar7": "flag",
                "lVar5": "counter",
                "param_1": "record",
                "param_2": "line_number",
                "param_3": "unit",
                "puVar2": "current_record",
                "puVar4": "new_record",
                "puVar6": "ptr",
                "uVar1": "error_message",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c05d": {
            "additional_data": {
                "FUN_0010c05d": {
                    "1": "initialize_variable",
                    "11": "debug_record_variable",
                    "13": "record_variable",
                    "4": "record_variable_debug"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "auVar1": {
                    "1": "result_var1",
                    "10": "result",
                    "2": "output_value",
                    "3": "return_value"
                },
                "auVar9": {
                    "1": "result_3",
                    "2": "result2",
                    "3": "output",
                    "6": "return_value"
                },
                "bVar8": {
                    "1": "zero_byte",
                    "2": "is_zero",
                    "3": "flag"
                },
                "cVar4": {
                    "1": "is_file",
                    "18": "flag",
                    "2": "use_offset"
                },
                "lVar5": {
                    "1": "loop_index",
                    "2": "count",
                    "24": "loop_counter",
                    "3": "counter"
                },
                "lVar6": {
                    "1": "var_ptr",
                    "2": "memory_address",
                    "3": "current_file",
                    "4": "memory_ptr"
                },
                "param_1": {
                    "1": "source",
                    "11": "file_ptr",
                    "2": "file_pointer",
                    "3": "file_info",
                    "5": "file"
                },
                "param_2": {
                    "1": "var_value",
                    "10": "variable_size",
                    "2": "record_id",
                    "3": "variable_value",
                    "4": "size"
                },
                "param_3": {
                    "1": "flags",
                    "2": "variable_value",
                    "3": "file_offset",
                    "4": "address",
                    "7": "variable_address"
                },
                "param_4": {
                    "1": "var_size",
                    "11": "variable_type",
                    "2": "data_type",
                    "5": "type",
                    "6": "record_type"
                },
                "param_5": {
                    "1": "data_1",
                    "2": "data",
                    "3": "debug_message",
                    "4": "message",
                    "8": "param_5"
                },
                "param_6": {
                    "1": "output_ptr",
                    "14": "result",
                    "2": "param6",
                    "8": "param_6"
                },
                "piVar3": {
                    "1": "variable",
                    "2": "var_ptr",
                    "3": "new_variable",
                    "4": "ptr",
                    "5": "variable_info"
                },
                "piVar7": {
                    "1": "element",
                    "2": "loop_ptr",
                    "4": "ptr2"
                },
                "uVar2": {
                    "1": "error_msg",
                    "2": "success_flag",
                    "5": "status",
                    "8": "return_value"
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "FUN_00112925"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33",
                "FUN_0010c139",
                "FUN_0010c1c6"
            ],
            "code": "\n\n\nundefined  [16]\nrecord_variable_0010c05d(long file_ptr,long variable_size,ulong variable_address,int variable_type,undefined8 param_5,\n            undefined8 result)\n\n{\n  undefined result [16];\n  undefined8 return_value;\n  int *variable_info;\n  char flag;\n  long loop_counter;\n  long memory_ptr;\n  int *ptr2;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if (variable_size == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = variable_address;\n    return result << 0x40;\n  }\n  if (variable_address != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (memory_ptr = *(long *)(file_ptr + 0x10), memory_ptr == 0)) {\n      return_value = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(error_output,\"%s\\n\",return_value);\n    }\n    else {\n      if (variable_type - 1U < 2) {\n        memory_ptr = memory_ptr + 0x10;\n        flag = (variable_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        memory_ptr = memory_ptr + 0x10;\n        flag = '\\0';\n      }\n      else {\n        memory_ptr = *(long *)(file_ptr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      memory_ptr = initialize_memory_00112925(memory_ptr,variable_size,2,flag);\n      if (memory_ptr != 0) {\n        variable_info = (int *)xmalloc(0x18);\n        ptr2 = variable_info + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)flag * -2 + 1;\n        }\n        *variable_info = variable_type;\n        return_value = 1;\n        *(ulong *)(variable_info + 2) = variable_address;\n        *(undefined8 *)(variable_info + 4) = param_5;\n        *(int **)(memory_ptr + 0x20) = variable_info;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  return_value = 0;\nLAB_0010c12e:\n  return_value._8_8_ = result;\n  return_value._0_8_ = return_value;\n  return return_value;\n}\n\n",
            "current_name": "record_variable_0010c05d",
            "entrypoint": "0x0010c05d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "_stderr": "error_output",
                "auVar1": "result",
                "auVar9": "return_value",
                "bVar8": "flag",
                "cVar4": "flag",
                "lVar5": "loop_counter",
                "lVar6": "memory_ptr",
                "param_1": "file_ptr",
                "param_2": "variable_size",
                "param_3": "variable_address",
                "param_4": "variable_type",
                "param_6": "result",
                "piVar3": "variable_info",
                "piVar7": "ptr2",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c139": {
            "additional_data": {
                "FUN_0010c139": {
                    "1": "allocate_and_set_variable",
                    "2": "process_data",
                    "9": "process_record"
                },
                "cVar2": {
                    "1": "record_status",
                    "11": "char_value",
                    "5": "flag",
                    "8": "record_flag"
                },
                "in_R10": {
                    "1": "temp1",
                    "2": "in_r10",
                    "3": "temp_register"
                },
                "long param_2": {
                    "1": "record_offset"
                },
                "param_1": {
                    "1": "record_pointer",
                    "2": "data",
                    "3": "param1",
                    "4": "record"
                },
                "param_2": {
                    "1": "variable_1",
                    "2": "param2",
                    "3": "record_pointer",
                    "5": "data",
                    "6": "record"
                },
                "param_3": {
                    "1": "new_value1",
                    "2": "data",
                    "3": "arg3",
                    "5": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "input1",
                    "2": "param_b",
                    "3": "arg4",
                    "6": "param_4",
                    "7": "param4"
                },
                "param_5": {
                    "1": "param_b",
                    "2": "param_c",
                    "3": "arg5",
                    "6": "param_5",
                    "7": "param5"
                },
                "param_6": {
                    "1": "param_c",
                    "2": "param_d",
                    "3": "arg6",
                    "6": "param_6",
                    "7": "param6"
                },
                "puVar4": {
                    "1": "allocated_variable",
                    "2": "new_record_pointer",
                    "3": "new_record_ptr",
                    "7": "allocated_memory"
                },
                "record_variable_0010c05d": {
                    "1": "record_variable"
                },
                "uVar1": {
                    "1": "old_record_pointer",
                    "2": "previous_value",
                    "3": "temp_var"
                },
                "uVar3": {
                    "22": "result",
                    "9": "return_value"
                },
                "unaff_R15": {
                    "1": "temp3",
                    "2": "unaff_r15"
                },
                "undefined4 param_5": {
                    "1": "param5"
                },
                "undefined8 param_1": {
                    "1": "record_address"
                },
                "undefined8 param_3": {
                    "1": "param3"
                },
                "undefined8 param_4": {
                    "1": "param4"
                },
                "undefined8 param_6": {
                    "1": "param6"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_0010c05d",
                "xmalloc"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\nulong process_record_0010c139(undefined8 record,long record,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 temp_var;\n  char char_value;\n  ulong result;\n  undefined8 *allocated_memory;\n  undefined8 temp_register;\n  undefined8 temp_reg2;\n  \n  char_value = *(char *)(record + 0x60);\n  if ((char_value != '\\0') && ((*(int *)(record + 0x40) != 0 || (*(char *)(record + 0x44) == '\\0')))) {\n    allocated_memory = (undefined8 *)xmalloc(0x28);\n    temp_var = *(undefined8 *)(record + 0x78);\n    *(undefined8 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[2] = param4;\n    *(undefined4 *)(allocated_memory + 3) = param5;\n    allocated_memory[4] = param6;\n    *(undefined8 **)(record + 0x78) = allocated_memory;\n    *allocated_memory = temp_var;\n    allocated_memory[1] = param3;\n    return CONCAT71((int7)((ulong)temp_reg2 >> 8),char_value) & 0xffffffff;\n  }\n  result = record_variable(record,param3,param4,param5,param6,temp_register);\n  return result;\n}\n\n",
            "current_name": "process_record_0010c139",
            "entrypoint": "0x0010c139",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c139": "process_record_0010c139",
                "cVar2": "char_value",
                "in_R10": "temp_register",
                "param_1": "record",
                "param_2": "record",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar4": "allocated_memory",
                "record_variable_0010c05d": "record_variable",
                "uVar1": "temp_var",
                "uVar3": "result",
                "unaff_R15": "temp_reg2",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c1c6": {
            "additional_data": {
                "*(undefined8 **)(param_2 + 0x78)": {
                    "1": "record_head"
                },
                "FUN_0010c1c6": {
                    "1": "cleanup_records",
                    "11": "process_records",
                    "2": "deallocate_records",
                    "3": "update_record"
                },
                "__ptr": {
                    "1": "current_pointer",
                    "17": "current_record",
                    "3": "current_node",
                    "5": "record_ptr"
                },
                "cVar2": {
                    "1": "success_flag",
                    "10": "result",
                    "2": "record_result",
                    "4": "record_status"
                },
                "param_1": {
                    "1": "param_record",
                    "3": "param_1",
                    "4": "record",
                    "6": "param",
                    "9": "param1"
                },
                "param_2": {
                    "1": "data",
                    "2": "list",
                    "3": "record_list",
                    "4": "record_data",
                    "5": "param2",
                    "6": "record_array"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "16": "param3",
                    "2": "unused_param",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "unused_param_4",
                    "16": "param4",
                    "2": "unused_param",
                    "6": "param_4"
                },
                "param_5": {
                    "1": "unused_param_3",
                    "16": "param5",
                    "7": "param_5"
                },
                "param_6": {
                    "1": "param_b",
                    "16": "param6",
                    "7": "param_6"
                },
                "puVar1": {
                    "1": "next_pointer",
                    "17": "next_record",
                    "3": "next_node",
                    "5": "next_ptr"
                },
                "record_variable_0010c05d": {
                    "1": "check_record"
                }
            },
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "code": "\nundefined process_records_0010c1c6(undefined8 param1,long record_array,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *next_record;\n  char result;\n  undefined8 *current_record;\n  \n  current_record = *(undefined8 **)(record_array + 0x78);\n  while( true ) {\n    if (current_record == (undefined8 *)0x0) {\n      *(undefined8 *)(record_array + 0x78) = 0;\n      return 1;\n    }\n    result = check_record(param1,current_record[1],current_record[2],*(undefined4 *)(current_record + 3),current_record[4],param6,\n                         param5);\n    if (result == '\\0') break;\n    next_record = (undefined8 *)*current_record;\n    free(current_record);\n    current_record = next_record;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_records_0010c1c6",
            "entrypoint": "0x0010c1c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c1c6": "process_records_0010c1c6",
                "__ptr": "current_record",
                "cVar2": "result",
                "param_1": "param1",
                "param_2": "record_array",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "next_record",
                "record_variable_0010c05d": "check_record"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c218": {
            "additional_data": {
                "FUN_0010c218": {
                    "1": "initialize_data_with_memory",
                    "2": "process_data",
                    "3": "initialize_debug_info",
                    "4": "initialize_data_and_memory",
                    "5": "initialize_debug_name_type"
                },
                "_stderr": {
                    "1": "err_stream"
                },
                "dcgettext": {
                    "1": "get_debug_message"
                },
                "fprintf": {
                    "1": "print_error"
                },
                "initialize_data_00112904": {
                    "1": "initialize_data"
                },
                "initialize_memory_00112925": {
                    "1": "initialize_memory"
                },
                "lVar2": {
                    "1": "debug_data_result",
                    "12": "data_ptr",
                    "2": "data_initialized",
                    "5": "data"
                },
                "lVar4": {
                    "1": "memory_pointer",
                    "2": "memory_address",
                    "4": "memory_result"
                },
                "param_1": {
                    "1": "file_data_ptr",
                    "10": "file_info",
                    "2": "file_pointer",
                    "3": "file_data"
                },
                "param_2": {
                    "1": "data",
                    "2": "current_file",
                    "6": "size",
                    "8": "data_size"
                },
                "param_3": {
                    "1": "current_offset",
                    "2": "debug_type",
                    "3": "debug_name_type",
                    "7": "type"
                },
                "pauVar3": {
                    "1": "alloc_ptr",
                    "2": "data_pointer",
                    "4": "data_ptr",
                    "6": "allocated_memory"
                },
                "uVar1": {
                    "1": "debug_msg",
                    "2": "error_msg",
                    "22": "error_message"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "FUN_00112925",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_0010c2d2"
            ],
            "code": "\n\n\nlong initialize_debug_name_type_0010c218(long file_info,long data_size,long type)\n\n{\n  undefined8 error_message;\n  long data_ptr;\n  undefined (*allocated_memory) [16];\n  long memory;\n  \n  if ((data_size != 0) && (type != 0)) {\n    if ((*(long *)(file_info + 8) == 0) || (*(long *)(file_info + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(error_output,\"%s\\n\",error_message);\n    }\n    else {\n      data_ptr = initialize_data(0x16,0);\n      if (data_ptr != 0) {\n        allocated_memory = (undefined (*) [16])xmalloc(0x10);\n        memory = *(long *)(file_info + 0x10);\n        *allocated_memory = ZEXT816(0);\n        *(long *)(*allocated_memory + 8) = type;\n        *(undefined (**) [16])(data_ptr + 0x10) = allocated_memory;\n        memory = initialize_memory(memory + 0x10,data_size,0,3);\n        if (memory != 0) {\n          *(long *)(memory + 0x20) = data_ptr;\n          *(long *)*allocated_memory = memory;\n          return data_ptr;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_debug_name_type_0010c218",
            "entrypoint": "0x0010c218",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c218": "initialize_debug_name_type_0010c218",
                "_stderr": "error_output",
                "dcgettext": "get_debug_message",
                "fprintf": "print_error",
                "initialize_data_00112904": "initialize_data",
                "initialize_memory_00112925": "initialize_memory",
                "lVar2": "data_ptr",
                "lVar4": "memory",
                "param_1": "file_info",
                "param_2": "data_size",
                "param_3": "type",
                "pauVar3": "allocated_memory",
                "uVar1": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c2d2": {
            "additional_data": {
                "FUN_0010c2d2": {
                    "1": "process_data",
                    "2": "convert_type",
                    "3": "convert_data_type",
                    "5": "get_data_type",
                    "7": "improve_data_type"
                },
                "_stderr": {
                    "1": "error_output"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "fprintf": {
                    "1": "formatted_print"
                },
                "initialize_and_store_data_00113e23": {
                    "1": "initialize_and_store_data"
                },
                "initialize_data_00112904": {
                    "1": "initialize_data_with_type"
                },
                "initialize_data_00113df2": {
                    "1": "initialize_data_with_float_size"
                },
                "initialize_data_00113e17": {
                    "2": "initialize_data"
                },
                "initialize_debug_name_type_0010c218": {
                    "2": "initialize_data_type"
                },
                "lVar4": {
                    "1": "type_info_ptr",
                    "10": "result",
                    "3": "data_type_address",
                    "4": "data_type",
                    "5": "data_type_result"
                },
                "param_1": {
                    "1": "debug_info",
                    "4": "param",
                    "9": "param1"
                },
                "param_2": {
                    "1": "file_data",
                    "10": "param2",
                    "2": "data_offset",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "type_array",
                    "10": "param3",
                    "2": "data_type",
                    "4": "type_info"
                },
                "pcVar2": {
                    "1": "data_type_str",
                    "10": "data_type_string",
                    "2": "data_type",
                    "5": "type_string",
                    "8": "type_name"
                },
                "plVar5": {
                    "1": "ptr_to_result",
                    "17": "file_data",
                    "2": "file_data_ptr"
                },
                "process_file_00109022": {
                    "1": "process_file"
                },
                "uVar1": {
                    "1": "data_type_value",
                    "2": "type_index",
                    "3": "unsigned_var1",
                    "8": "type_code"
                },
                "uVar3": {
                    "1": "type_info",
                    "2": "data",
                    "4": "updated_data",
                    "5": "data_type"
                },
                "uVar6": {
                    "1": "neg_type_code",
                    "2": "unsigned_type_code",
                    "3": "abs_type_code",
                    "6": "index"
                },
                "update_data_00113dfe": {
                    "2": "update_data"
                }
            },
            "called": [
                "fprintf",
                "FUN_00109022",
                "FUN_0010c218",
                "dcgettext",
                "FUN_00113e17",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_00112904",
                "FUN_00113dfe"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nlong improve_data_type_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint type_code;\n  char *data_type_string;\n  undefined8 data_type;\n  long result;\n  long *file_data;\n  uint index;\n  \n  if ((*param3 == 0) && (type_code = param3[1], (int)type_code < 0)) {\n    index = ~type_code;\n    if (index < 0x22) {\n      result = *(long *)(param2 + 0x90 + (ulong)index * 8);\n      if (result == 0) {\n        switch(index) {\n        case 1:\n          data_type = update_data(1,0);\n          data_type_string = \"char\";\n          break;\n        case 2:\n          data_type = update_data(2,0);\n          data_type_string = \"short\";\n          break;\n        case 3:\n          data_type = update_data(4,0);\n          data_type_string = \"long\";\n          break;\n        case 4:\n          data_type = update_data(1,1);\n          data_type_string = \"unsigned char\";\n          break;\n        case 5:\n          data_type = update_data(1,0);\n          data_type_string = \"signed char\";\n          break;\n        case 6:\n          data_type = update_data(2,1);\n          data_type_string = \"unsigned short\";\n          break;\n        case 7:\n          data_type = update_data(4,1);\n          data_type_string = \"unsigned int\";\n          break;\n        case 8:\n          data_type = update_data(4,1);\n          data_type_string = \"unsigned\";\n          break;\n        case 9:\n          data_type = update_data(4,1);\n          data_type_string = \"unsigned long\";\n          break;\n        case 10:\n          data_type = initialize_data();\n          data_type_string = \"void\";\n          break;\n        case 0xb:\n          data_type = initialize_data_with_float_size(4);\n          data_type_string = \"float\";\n          break;\n        case 0xc:\n          data_type = initialize_data_with_float_size(8);\n          data_type_string = \"double\";\n          break;\n        case 0xd:\n          data_type = initialize_data_with_float_size(8);\n          data_type_string = \"long double\";\n          break;\n        case 0xe:\n          data_type = update_data(4,0);\n          data_type_string = \"integer\";\n          break;\n        case 0xf:\n          data_type = initialize_data_with_type(6,4);\n          data_type_string = \"boolean\";\n          break;\n        case 0x10:\n          data_type = initialize_data_with_float_size(4);\n          data_type_string = \"short real\";\n          break;\n        case 0x11:\n          data_type = initialize_data_with_float_size(8);\n          data_type_string = \"real\";\n          break;\n        case 0x12:\n          data_type_string = \"stringptr\";\n          data_type = 0;\n          break;\n        case 0x13:\n          data_type = update_data(1,1);\n          data_type_string = \"character\";\n          break;\n        case 0x14:\n          data_type = initialize_data_with_type(6,1);\n          data_type_string = \"logical*1\";\n          break;\n        case 0x15:\n          data_type = initialize_data_with_type(6,2);\n          data_type_string = \"logical*2\";\n          break;\n        case 0x16:\n          data_type = initialize_data_with_type(6,4);\n          data_type_string = \"logical*4\";\n          break;\n        case 0x17:\n          data_type = initialize_data_with_type(6,4);\n          data_type_string = \"logical\";\n          break;\n        case 0x18:\n          data_type = initialize_data_with_type(5,8);\n          data_type_string = \"complex\";\n          break;\n        case 0x19:\n          data_type = initialize_data_with_type(5,0x10);\n          data_type_string = \"double complex\";\n          break;\n        case 0x1a:\n          data_type = update_data(1,0);\n          data_type_string = \"integer*1\";\n          break;\n        case 0x1b:\n          data_type = update_data(2,0);\n          data_type_string = \"integer*2\";\n          break;\n        case 0x1c:\n          data_type = update_data(4,0);\n          data_type_string = \"integer*4\";\n          break;\n        case 0x1d:\n          data_type = update_data(2,0);\n          data_type_string = \"wchar\";\n          break;\n        case 0x1e:\n          data_type = update_data(8,0);\n          data_type_string = \"long long\";\n          break;\n        case 0x1f:\n          data_type = update_data(8,1);\n          data_type_string = \"unsigned long long\";\n          break;\n        case 0x20:\n          data_type = initialize_data_with_type(6,8);\n          data_type_string = \"logical*8\";\n          break;\n        case 0x21:\n          data_type = update_data(8,0);\n          data_type_string = \"integer*8\";\n          break;\n        default:\n          data_type = update_data(4,0);\n          data_type_string = \"int\";\n        }\n        result = initialize_data_type(param1,data_type_string,data_type);\n        *(long *)(param2 + 0x90 + (ulong)index * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    data_type_string = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(standard_error,data_type_string,(ulong)type_code);\n  }\n  else {\n    file_data = (long *)process_file(param2);\n    if (file_data != (long *)0x0) {\n      if (*file_data == 0) {\n        result = initialize_and_store_data(file_data,0);\n        return result;\n      }\n      return *file_data;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "improve_data_type_0010c2d2",
            "entrypoint": "0x0010c2d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c2d2": "improve_data_type_0010c2d2",
                "_stderr": "standard_error",
                "dcgettext": "get_message",
                "fprintf": "formatted_print",
                "initialize_and_store_data_00113e23": "initialize_and_store_data",
                "initialize_data_00112904": "initialize_data_with_type",
                "initialize_data_00113df2": "initialize_data_with_float_size",
                "initialize_data_00113e17": "initialize_data",
                "initialize_debug_name_type_0010c218": "initialize_data_type",
                "lVar4": "result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar2": "data_type_string",
                "plVar5": "file_data",
                "process_file_00109022": "process_file",
                "uVar1": "type_code",
                "uVar3": "data_type",
                "uVar6": "index",
                "update_data_00113dfe": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c6be": {
            "additional_data": {
                "FUN_0010c6be": {
                    "1": "parse_debug_tag",
                    "11": "debug_tag_type",
                    "2": "parse_debug_tag_type",
                    "5": "validate_debug_tag_type"
                },
                "_stderr": {
                    "1": "output_file",
                    "2": "error_output"
                },
                "dcgettext": {
                    "2": "get_localized_string"
                },
                "iVar1": {
                    "1": "tag_comparison_result",
                    "2": "strcmp_result",
                    "23": "comparison_result"
                },
                "initialize_data_00112904": {
                    "1": "initialize_data"
                },
                "initialize_memory_00112925": {
                    "1": "initialize_memory"
                },
                "lVar5": {
                    "1": "tag_data",
                    "2": "offset",
                    "3": "memory_location",
                    "5": "file_offset",
                    "6": "memory_address"
                },
                "param_1": {
                    "1": "param_base",
                    "2": "file_pointer",
                    "3": "file_offset",
                    "4": "file_address",
                    "5": "file_handle"
                },
                "param_2": {
                    "1": "param_b",
                    "15": "tag_name",
                    "2": "file_name",
                    "3": "tag_type",
                    "6": "tag"
                },
                "param_3": {
                    "1": "tag_structure",
                    "2": "tag_array",
                    "3": "debug_tag",
                    "8": "tag_data"
                },
                "pauVar4": {
                    "1": "debug_tag_data_ptr",
                    "2": "new_tag_data",
                    "3": "tag_data",
                    "4": "tag_info"
                },
                "pcVar6": {
                    "1": "default_error_message",
                    "29": "error_message"
                },
                "piVar3": {
                    "1": "new_tag_ptr",
                    "3": "new_tag_data",
                    "4": "new_tag",
                    "5": "initialized_data"
                },
                "uVar2": {
                    "1": "translation",
                    "7": "translated_error_message",
                    "9": "translated_message"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "FUN_00112925",
                "strcmp",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33",
                "FUN_0010c892"
            ],
            "code": "\n\n\nint * debug_tag_type_0010c6be(long file_handle,char *tag_name,int *tag_data)\n\n{\n  int comparison_result;\n  undefined8 translated_message;\n  int *initialized_data;\n  undefined (*tag_info) [16];\n  long memory_address;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_data != (int *)0x0)) {\n    if (*(long *)(file_handle + 0x10) == 0) {\n      error_message = \"debug_tag_type_0010c6be: no current file\";\n    }\n    else {\n      if (*tag_data != 0x17) {\n        initialized_data = (int *)initialize_data(0x17,0);\n        if (initialized_data == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tag_info = (undefined (*) [16])xmalloc(0x10);\n        memory_address = *(long *)(file_handle + 0x10);\n        *tag_info = ZEXT816(0);\n        *(int **)(*tag_info + 8) = tag_data;\n        *(undefined (**) [16])(initialized_data + 4) = tag_info;\n        memory_address = initialize_memory(memory_address + 0x10,tag_name,1,3);\n        if (memory_address == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(memory_address + 0x20) = initialized_data;\n        *(long *)*tag_info = memory_address;\n        return initialized_data;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag_data + 4) + 8),tag_name);\n      error_message = \"debug_tag_type_0010c6be: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag_data;\n      }\n    }\n    translated_message = dcgettext(0,error_message,5);\n    fprintf(error_output,\"%s\\n\",translated_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "current_name": "debug_tag_type_0010c6be",
            "entrypoint": "0x0010c6be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c6be": "debug_tag_type_0010c6be",
                "_stderr": "error_output",
                "dcgettext": "get_localized_string",
                "iVar1": "comparison_result",
                "initialize_data_00112904": "initialize_data",
                "initialize_memory_00112925": "initialize_memory",
                "lVar5": "memory_address",
                "param_1": "file_handle",
                "param_2": "tag_name",
                "param_3": "tag_data",
                "pauVar4": "tag_info",
                "pcVar6": "error_message",
                "piVar3": "initialized_data",
                "uVar2": "translated_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c7a0": {
            "additional_data": {
                "*param_3": {
                    "1": "type_value"
                },
                "FUN_0010c7a0": {
                    "1": "update_class_id",
                    "10": "debug_set_class_id",
                    "20": "set_class_id"
                },
                "__assert_fail": {
                    "1": "assert_fail"
                },
                "__s1": {
                    "1": "name_ptr_2",
                    "2": "current_class_name",
                    "6": "stored_class_name",
                    "9": "existing_class_name"
                },
                "auVar8": {
                    "1": "variable_au_var8",
                    "28": "return_value"
                },
                "cVar5": {
                    "1": "is_equality_true",
                    "12": "is_equal",
                    "4": "equality_check",
                    "6": "equality_result"
                },
                "check_equality_0010922b": {
                    "1": "check_equality"
                },
                "iVar6": {
                    "1": "class_id",
                    "2": "index",
                    "3": "new_id",
                    "4": "counter",
                    "5": "count"
                },
                "lVar3": {
                    "1": "data",
                    "12": "type_info",
                    "2": "type_info_ptr",
                    "3": "type_data",
                    "4": "struct_ptr"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "class_instance",
                    "3": "type",
                    "4": "class_ptr"
                },
                "param_2": {
                    "1": "str",
                    "22": "class_name",
                    "5": "name"
                },
                "param_3": {
                    "1": "ptr_array",
                    "15": "type",
                    "3": "class_type",
                    "6": "type_kind"
                },
                "param_4": {
                    "1": "var",
                    "12": "param_4",
                    "2": "result",
                    "6": "param4",
                    "7": "param"
                },
                "piVar4": {
                    "1": "ptr2",
                    "11": "type_ptr",
                    "2": "current_type",
                    "3": "type_kind_ptr"
                },
                "puVar7": {
                    "1": "new_entry",
                    "2": "current_node",
                    "3": "temp_ptr",
                    "4": "node",
                    "7": "new_node"
                },
                "uVar1": {
                    "1": "variable_u_var1",
                    "2": "return_value",
                    "22": "result"
                },
                "uVar2": {
                    "1": "class_id",
                    "2": "new_class_id",
                    "3": "type_count",
                    "6": "new_id"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "__assert_fail",
                "xmalloc",
                "strcmp",
                "FUN_0010922b"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] set_class_id_0010c7a0(long class_ptr,char *class_name,int *type,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint new_id;\n  long type_info;\n  int *type_ptr;\n  char *existing_class_name;\n  char is_equal;\n  int count;\n  undefined8 *new_node;\n  undefined return_value [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  type_info = *(long *)(type + 4);\n  new_node = (undefined8 *)(ulong)*(uint *)(type_info + 0xc);\n  if (*(uint *)(type_info + 0xc) <= *(uint *)(class_ptr + 0x38)) {\n    for (new_node = *(undefined8 **)(class_ptr + 0x50); new_node != (undefined8 *)0x0;\n        new_node = (undefined8 *)*new_node) {\n      type_ptr = (int *)new_node[1];\n      if (*type_ptr == *type) {\n        existing_class_name = (char *)new_node[2];\n        if (class_name == (char *)0x0) {\n          if (existing_class_name == (char *)0x0) {\nLAB_0010c82c:\n            is_equal = check_equality(class_ptr,type_ptr,type);\n            if (is_equal != '\\0') {\n              new_id = *(uint *)(*(long *)(new_node[1] + 0x10) + 0xc);\n              new_node = (undefined8 *)(ulong)new_id;\n              *(uint *)(type_info + 0xc) = new_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_class_name != (char *)0x0) && (*existing_class_name == *class_name)) &&\n                (count = strcmp(existing_class_name,class_name), count == 0)) goto LAB_0010c82c;\n      }\n    }\n    count = *(int *)(class_ptr + 0x34) + 1;\n    *(int *)(class_ptr + 0x34) = count;\n    *(int *)(type_info + 0xc) = count;\n    new_node = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(class_ptr + 0x50);\n    new_node[2] = class_name;\n    *(undefined8 **)(class_ptr + 0x50) = new_node;\n    *new_node = result;\n    new_node[1] = type;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)new_node >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "current_name": "set_class_id_0010c7a0",
            "entrypoint": "0x0010c7a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "__assert_fail": "assert_fail",
                "__s1": "existing_class_name",
                "auVar8": "return_value",
                "cVar5": "is_equal",
                "check_equality_0010922b": "check_equality",
                "iVar6": "count",
                "lVar3": "type_info",
                "param_1": "class_ptr",
                "param_2": "class_name",
                "param_3": "type",
                "piVar4": "type_ptr",
                "puVar7": "new_node",
                "uVar1": "result",
                "uVar2": "new_id",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c892": {
            "additional_data": {
                "FUN_0010c892": {
                    "1": "process_undefined_types",
                    "2": "analyze_records",
                    "3": "process_debug_info",
                    "5": "process_data",
                    "6": "process_debug_records"
                },
                "_stderr": {
                    "1": "error_output"
                },
                "cVar1": {
                    "1": "record_flag",
                    "17": "result",
                    "2": "success_flag"
                },
                "iVar6": {
                    "1": "index",
                    "2": "entry_kind",
                    "22": "kind"
                },
                "lVar2": {
                    "1": "data_address",
                    "12": "initialized_data",
                    "2": "data_initialized",
                    "4": "data_ptr",
                    "5": "data"
                },
                "lVar3": {
                    "1": "local_var_3",
                    "22": "tag_type",
                    "3": "tagged_type"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "function_name",
                    "3": "input_param",
                    "4": "data"
                },
                "param_2": {
                    "1": "record_ptr",
                    "2": "record_param",
                    "4": "record"
                },
                "puVar5": {
                    "1": "current",
                    "2": "record_pointer",
                    "4": "record_ptr",
                    "5": "current_pointer"
                },
                "uVar4": {
                    "1": "success_flag",
                    "16": "return_value",
                    "2": "success",
                    "8": "result"
                }
            },
            "called": [
                "fprintf",
                "FUN_0010be1a",
                "FUN_0010c6be",
                "dcgettext",
                "FUN_0010c1c6",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_debug_data_0010c892(undefined8 data,long record)\n\n{\n  char result;\n  long initialized_data;\n  long tag_type;\n  undefined8 return_value;\n  undefined8 *current_pointer;\n  int kind;\n  \n  if (*(char *)(record + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (current_pointer = *(undefined8 **)(record + 0x1a0); current_pointer != (undefined8 *)0x0;\n        current_pointer = (undefined8 *)*current_pointer) {\n      kind = *(int *)(current_pointer + 2);\n      tag_type = current_pointer[1];\n      if (kind != 0) {\n        if (tag_type != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          return_value = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(error_output,\"%s\\n\",return_value);\n        }\nLAB_0010c910:\n        current_pointer[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tag_type == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      initialized_data = initialize_data_00112904(kind,0);\n      if (initialized_data == 0) goto LAB_0010c910;\n      tag_type = debug_tag_type_0010c6be(data,tag_type,initialized_data);\n      current_pointer[3] = tag_type;\n      if (tag_type == 0) goto LAB_0010c916;\n    }\n    return_value = 1;\n  }\n  else {\n    result = process_records_0010c1c6();\n    if (result != '\\0') {\n      result = debug_end_function_0010be1a(data,*(undefined8 *)(record + 0x68));\n      if (result != '\\0') {\n        *(undefined *)(record + 0x60) = 0;\n        *(undefined8 *)(record + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_debug_data_0010c892",
            "entrypoint": "0x0010c892",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c892": "process_debug_data_0010c892",
                "_stderr": "error_output",
                "cVar1": "result",
                "iVar6": "kind",
                "lVar2": "initialized_data",
                "lVar3": "tag_type",
                "param_1": "data",
                "param_2": "record",
                "puVar5": "current_pointer",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c95e": {
            "additional_data": {
                "2025": {
                    "1": "local_boolean"
                },
                "2048": {
                    "1": "local_long"
                },
                "DAT_00120436": {
                    "1": "name_data"
                },
                "DAT_00120495": {
                    "1": "long_long_name"
                },
                "FUN_0010c95e": {
                    "1": "parse_code",
                    "2": "parse_and_process",
                    "3": "parse_and_initialize_data"
                },
                "__ptr": {
                    "1": "ptr_val",
                    "2": "type_name",
                    "3": "string_ptr",
                    "4": "type_string"
                },
                "bVar1": {
                    "1": "byte_val1",
                    "17": "current_byte",
                    "2": "byte_val",
                    "7": "byte_var1"
                },
                "bVar2": {
                    "1": "byte_val2",
                    "20": "next_byte",
                    "7": "byte_var2"
                },
                "bVar4": {
                    "1": "bool_value1",
                    "14": "is_signed",
                    "2": "has_signed_char",
                    "7": "bool_var1"
                },
                "bVar5": {
                    "1": "bool_val_2",
                    "14": "is_char",
                    "2": "has_unsigned_char",
                    "7": "bool_var2"
                },
                "bVar6": {
                    "1": "bool_val3",
                    "4": "is_unsigned",
                    "6": "is_void",
                    "7": "bool_var3"
                },
                "cVar7": {
                    "1": "char1",
                    "2": "char_val",
                    "6": "char_var",
                    "7": "result"
                },
                "lVar10": {
                    "1": "named_type_id",
                    "2": "long_var",
                    "3": "found_type",
                    "5": "long_var1"
                },
                "lVar15": {
                    "1": "result4",
                    "6": "long_var2",
                    "9": "result"
                },
                "lVar18": {
                    "1": "initialized_data_location"
                },
                "local_40": {
                    "1": "str_ptrs",
                    "2": "local_string",
                    "3": "string_array",
                    "4": "char_array",
                    "5": "local_string_array"
                },
                "local_48": {
                    "1": "variable_48",
                    "2": "local_long",
                    "4": "ulong_var2"
                },
                "local_49": {
                    "1": "undefined1",
                    "2": "is_initialized",
                    "4": "undefined_var"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "binary_data",
                    "3": "input_data",
                    "4": "input_array",
                    "8": "param_array"
                },
                "param_2": {
                    "1": "bytes_buffer",
                    "2": "input_byte_array",
                    "3": "byte_array_ptr",
                    "7": "byte_array"
                },
                "param_3": {
                    "1": "long_array_param",
                    "2": "output_array",
                    "3": "data_ptr",
                    "4": "output_data",
                    "5": "data_pointer"
                },
                "pbVar20": {
                    "1": "current_byte"
                },
                "pbVar3": {
                    "1": "byte_array_ptr",
                    "2": "current_ptr",
                    "4": "current_byte_pointer",
                    "5": "byte_pointer",
                    "9": "byte_ptr"
                },
                "pbVar9": {
                    "1": "next_byte_address",
                    "2": "next_ptr",
                    "3": "byte_pointer2",
                    "5": "byte_ptr2",
                    "6": "next_byte_ptr"
                },
                "pcVar12": {
                    "1": "string_type",
                    "2": "char_pointer",
                    "3": "char_ptr1",
                    "5": "char_ptr"
                },
                "pcVar19": {
                    "1": "stored_data_type_name",
                    "2": "type_string",
                    "3": "data_type",
                    "4": "type_name",
                    "6": "char_ptr2"
                },
                "ppcVar18": {
                    "1": "string_array_ptr",
                    "2": "char_pointer_pointer",
                    "4": "string_array",
                    "6": "char_ptr_ptr"
                },
                "puVar16": {
                    "1": "unsigned_long_value",
                    "2": "result_ptr",
                    "4": "ulong_pointer",
                    "7": "ulong_ptr"
                },
                "puVar17": {
                    "1": "is_enum",
                    "4": "undefined_pointer"
                },
                "sVar13": {
                    "1": "size1",
                    "16": "string_length",
                    "2": "size_val",
                    "3": "str_length",
                    "5": "size_var"
                },
                "uVar11": {
                    "1": "parsed_data",
                    "2": "parse_result",
                    "5": "uint_var2",
                    "7": "return_value"
                },
                "uVar14": {
                    "1": "u_var_size",
                    "2": "integer_value",
                    "3": "extracted_integer",
                    "5": "ulong_var"
                },
                "uVar8": {
                    "1": "extracted_number",
                    "2": "integer_length",
                    "6": "uint_var"
                }
            },
            "called": [
                "FUN_00113cb9",
                "FUN_0010d559",
                "FUN_00113b71",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_00113bfa",
                "FUN_00113df2",
                "FUN_00109a0b",
                "FUN_00108ea1",
                "FUN_00108e76",
                "FUN_0010911f",
                "FUN_00113dfe",
                "FUN_00113b4a",
                "FUN_0010914e",
                "FUN_00113d3a",
                "FUN_00113c43",
                "free",
                "FUN_00113ce0",
                "FUN_00113b98",
                "FUN_00113e17",
                "FUN_00112904",
                "strlen"
            ],
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010c95e",
                "FUN_0010d21c",
                "FUN_00113e5e"
            ],
            "code": "\nundefined8 parse_and_initialize_data_0010c95e(undefined8 *param_array,byte **byte_array,long *data_pointer)\n\n{\n  byte current_byte;\n  byte next_byte;\n  byte *byte_ptr;\n  bool is_signed;\n  bool is_char;\n  bool bool_var3;\n  char return_value;\n  uint extracted_integer;\n  byte *next_byte_ptr;\n  long long_var1;\n  undefined8 return_value;\n  char *char_ptr;\n  size_t string_length;\n  ulong ulong_var;\n  void *type_string;\n  long result;\n  ulong *ulong_ptr;\n  undefined *undefined_ptr;\n  char **char_ptr_ptr;\n  char *char_ptr2;\n  byte *current_byte_address;\n  undefined local_flag;\n  ulong ulong_var2;\n  char *local_string_array [2];\n  \n  while( true ) {\n    current_byte_address = *byte_array;\n    current_byte = *current_byte_address;\n    if ('T' < (char)current_byte) break;\n    if ((char)current_byte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(current_byte) {\n    case 0x41:\n      result = 0;\n      byte_ptr = current_byte_address;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byte_array = current_byte_address + 1;\n      return_value = parse_and_initialize_data_0010c95e(param_array,byte_array,data_pointer);\n      if (return_value == '\\0') {\n        return 0;\n      }\n      if (data_pointer == (long *)0x0) {\n        return 1;\n      }\n      result = initialize_data_00113b71(*data_pointer);\n      *data_pointer = result;\n      return 1;\n    case 0x46:\n      *byte_array = current_byte_address + 1;\n      if (data_pointer == (long *)0x0) {\n        ulong_ptr = (ulong *)0x0;\n        char_ptr_ptr = (char **)0x0;\n      }\n      else {\n        ulong_ptr = &ulong_var2;\n        char_ptr_ptr = local_string_array;\n      }\n      return_value = parse_and_process_data_0010d882(param_array,byte_array,char_ptr_ptr,ulong_ptr);\n      if (return_value == '\\0') {\n        return 0;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        return_value = parse_and_initialize_data_0010c95e(param_array,byte_array,data_pointer);\n        if (return_value == '\\0') {\n          return 0;\n        }\n        if (data_pointer == (long *)0x0) {\n          return 1;\n        }\n        result = initialize_and_allocate_data_00113ce0(*data_pointer,local_string_array[0],ulong_var2 & 0xff);\n        *data_pointer = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byte_array = current_byte_address + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      local_flag = 0;\n      local_string_array[0] = (char *)0x0;\n      ulong_var2 = 0;\n      *byte_array = current_byte_address + 1;\n      if (((&_sch_istable)[(ulong)current_byte_address[1] * 2] & 4) == 0) {\n        if (current_byte_address[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        char_ptr_ptr = local_string_array;\n        if (data_pointer == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        return_value = parse_and_extract_data_0010d559(param_array,byte_array,char_ptr_ptr);\n        if (return_value == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        extracted_integer = extract_integer_from_string_00108e76(byte_array);\n        byte_ptr = *byte_array;\n        string_length = strlen((char *)byte_ptr);\n        if (string_length < extracted_integer) goto switchD_0010cdf9_caseD_60;\n        *byte_array = byte_ptr + extracted_integer;\n        if ((data_pointer != (long *)0x0) &&\n           (local_string_array[0] = (char *)find_string_in_data_0010afd5(*param_array,param_array[1],byte_ptr,extracted_integer,9),\n           local_string_array[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **byte_array;\n      if (current_byte == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *byte_array = *byte_array + 1;\n        }\n        if (**byte_array != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byte_array = *byte_array + 1;\n        if (data_pointer == (long *)0x0) {\n          undefined_ptr = (undefined *)0x0;\n          ulong_ptr = (ulong *)0x0;\n        }\n        else {\n          undefined_ptr = &local_flag;\n          ulong_ptr = &ulong_var2;\n        }\n        return_value = parse_and_process_data_0010d882(param_array,byte_array,ulong_ptr,undefined_ptr);\n        if (return_value == '\\0') {\n          return 0;\n        }\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        return_value = parse_and_initialize_data_0010c95e(param_array,byte_array,data_pointer);\n        if (return_value == '\\0') {\n          return 0;\n        }\n        if (data_pointer == (long *)0x0) {\n          return 1;\n        }\n        if (current_byte != 0x4d) {\n          result = initialize_and_store_data_00113bfa(local_string_array[0],*data_pointer);\n          *data_pointer = result;\n          return 1;\n        }\n        result = initialize_data_00113b98(*data_pointer,local_string_array[0],ulong_var2,local_flag);\n        *data_pointer = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      return_value = parse_and_extract_data_0010d559(param_array,byte_array,data_pointer);\n      return return_value;\n    case 0x52:\n      *byte_array = current_byte_address + 1;\n      return_value = parse_and_initialize_data_0010c95e(param_array,byte_array,data_pointer);\n      if (return_value == '\\0') {\n        return 0;\n      }\n      if (data_pointer == (long *)0x0) {\n        return 1;\n      }\n      result = initialize_data_00113cb9(*data_pointer);\n      *data_pointer = result;\n      return 1;\n    case 0x54:\n      *byte_array = current_byte_address + 1;\n      return_value = parse_number_00108ea1(byte_array,&ulong_var2);\n      if (return_value != '\\0') {\n        if ((uint)ulong_var2 < *(uint *)(param_array + 5)) {\n          local_string_array[0] = *(char **)((ulong_var2 & 0xffffffff) * 0x10 + param_array[4]);\n          return_value = parse_and_initialize_data_0010c95e(param_array,local_string_array,data_pointer);\n          if (return_value == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (current_byte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byte_array = current_byte_address + 1;\n    return_value = parse_and_initialize_data_0010c95e(param_array,byte_array,data_pointer);\n    if (return_value == '\\0') {\n      return 0;\n    }\n    if (data_pointer == (long *)0x0) {\n      return 1;\n    }\n    result = initialize_or_get_data_00113d3a(*data_pointer);\n    *data_pointer = result;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bool_var3 = false;\n  is_signed = false;\n  return_value = '\\0';\n  is_char = false;\n  do {\n    byte_ptr = *byte_array;\n    current_byte = *byte_ptr;\n    if (current_byte == 0x55) {\n      return_value = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)current_byte) {\n      if (current_byte == 0x56) {\n        bool_var3 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)current_byte) goto switchD_0010cdf9_caseD_60;\n      if ((char)current_byte < '_') goto LAB_0010cdfb;\n      switch(current_byte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (data_pointer == (long *)0x0) {\nLAB_0010d0aa:\n          *byte_array = byte_ptr + 1;\n          return 1;\n        }\n        result = find_named_type_0010914e(*param_array,&DAT_00120436);\n        *data_pointer = result;\n        if (result == 0) {\n          result = initialize_data_00112904(6,4);\n          *data_pointer = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (data_pointer == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned char\";\n        if ((return_value == '\\0') && (char_ptr2 = \"char\", is_signed)) {\n          char_ptr2 = \"signed char\";\n        }\n        result = find_named_type_0010914e(*param_array,char_ptr2);\n        *data_pointer = result;\n        if (result == 0) {\n          result = update_data_00113dfe(1,return_value);\n          *data_pointer = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (data_pointer == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (data_pointer == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*param_array,\"float\");\n        *data_pointer = result;\n        if (result == 0) {\n          result = initialize_data_00113df2(4);\n          *data_pointer = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (data_pointer == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned int\";\n        char_ptr = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (data_pointer == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long unsigned int\";\n        char_ptr = \"long int\";\nLAB_0010ced2:\n        if (return_value == '\\0') {\n          char_ptr2 = char_ptr;\n        }\n        result = find_named_type_0010914e(*param_array,char_ptr2);\n        *data_pointer = result;\n        if (result == 0) {\n          result = update_data_00113dfe(4,return_value);\n          *data_pointer = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        char_ptr2 = \"long double\";\n        if (data_pointer == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        result = find_named_type_0010914e(*param_array,char_ptr2);\n        *data_pointer = result;\n        if (result == 0) {\n          result = initialize_data_00113df2(8);\n          *data_pointer = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (data_pointer == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"short unsigned int\";\n        if (return_value == '\\0') {\n          char_ptr2 = \"short int\";\n        }\n        result = find_named_type_0010914e(*param_array,char_ptr2);\n        *data_pointer = result;\n        if (result == 0) {\n          result = update_data_00113dfe(2,return_value);\n          *data_pointer = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        char_ptr_ptr = local_string_array;\n        if (data_pointer == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        return_value = parse_and_extract_data_0010d21c(param_array,byte_array,char_ptr_ptr);\n        if (return_value == '\\0') {\n          return 0;\n        }\n        if (data_pointer == (long *)0x0) {\n          return 1;\n        }\n        string_length = strlen(local_string_array[0]);\n        result = find_string_in_data_0010afd5(*param_array,param_array[1],local_string_array[0],string_length & 0xffffffff,9);\n        *data_pointer = result;\n        free(local_string_array[0]);\n        result = *data_pointer;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (data_pointer == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*param_array,&DAT_00120495);\n        *data_pointer = result;\n        if (result == 0) {\n          result = initialize_data_00113e17();\n          *data_pointer = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (data_pointer == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*param_array,\"__wchar_t\");\n        *data_pointer = result;\n        if (result == 0) {\n          result = update_data_00113dfe(2,1);\n          *data_pointer = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (data_pointer == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long long unsigned int\";\n        if (return_value == '\\0') {\n          char_ptr2 = \"long long int\";\n        }\n        result = find_named_type_0010914e(*param_array,char_ptr2);\n        *data_pointer = result;\n        if (result == 0) {\n          result = update_data_00113dfe(8,return_value);\n          *data_pointer = result;\n        }\n      }\n      *byte_array = *byte_array + 1;\n      goto LAB_0010d1de;\n    }\n    if (current_byte == 0x43) {\n      is_char = true;\n      goto LAB_0010cd84;\n    }\n    if (current_byte != 0x53) goto LAB_0010cdc5;\n    is_signed = true;\nLAB_0010cd84:\n    *byte_array = byte_ptr + 1;\n  } while( true );\nLAB_0010ca26:\n  next_byte_ptr = byte_ptr + 1;\n  *byte_array = next_byte_ptr;\n  current_byte = *next_byte_ptr;\n  if (current_byte == 0) goto switchD_0010cdf9_caseD_60;\n  if (current_byte == 0x5f) {\n    *byte_array = byte_ptr + 2;\n    return_value = parse_and_initialize_data_0010c95e(param_array,byte_array,data_pointer);\n    if (return_value == '\\0') {\n      return 0;\n    }\n    if (data_pointer == (long *)0x0) {\n      return 1;\n    }\n    long_var1 = find_named_type_0010914e(*param_array,\"int\");\n    if (long_var1 == 0) {\n      long_var1 = update_data_00113dfe(4,0);\n    }\n    result = initialize_and_store_data_00113c43(*data_pointer,long_var1,0,result,0);\n    *data_pointer = result;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  result = result * 10 + (long)((char)current_byte + -0x30);\n  byte_ptr = next_byte_ptr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)current_byte < ':') {\n    if ((char)current_byte < '0') {\n      if (current_byte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message_0010911f(current_byte_address);\n      if (data_pointer == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((current_byte != 0x47) || (*byte_array = byte_ptr + 1, ((&_sch_istable)[(ulong)byte_ptr[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  current_byte_address = *byte_array;\n  extracted_integer = extract_integer_from_string_00108e76(byte_array);\n  byte_ptr = *byte_array;\n  string_length = strlen((char *)byte_ptr);\n  ulong_var = (ulong)extracted_integer;\n  if (ulong_var <= string_length) {\n    *byte_array = byte_ptr + ulong_var;\n    if (data_pointer == (long *)0x0) {\n      return 1;\n    }\n    type_string = (void *)copy_and_null_terminate_00109a0b(byte_ptr,ulong_var);\n    result = find_named_type_0010914e(*param_array,type_string);\n    *data_pointer = result;\n    free(type_string);\n    if (*data_pointer == 0) {\n      result = find_string_in_data_0010afd5(*param_array,param_array[1],byte_ptr,(int)*byte_array - (int)byte_ptr,0);\n      *data_pointer = result;\njoined_r0x0010d1d8:\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_char) {\n      result = initialize_data_00113b71(*data_pointer);\n      *data_pointer = result;\n    }\n    if (bool_var3) {\n      result = initialize_data_00113b4a(*data_pointer);\n      *data_pointer = result;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message_0010911f(current_byte_address);\n  return 0;\n}\n\n",
            "current_name": "parse_and_initialize_data_0010c95e",
            "entrypoint": "0x0010c95e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c95e": "parse_and_initialize_data_0010c95e",
                "__ptr": "type_string",
                "bVar1": "current_byte",
                "bVar2": "next_byte",
                "bVar4": "is_signed",
                "bVar5": "is_char",
                "bVar6": "bool_var3",
                "cVar7": "return_value",
                "lVar10": "long_var1",
                "lVar15": "result",
                "local_40": "local_string_array",
                "local_48": "ulong_var2",
                "local_49": "local_flag",
                "param_1": "param_array",
                "param_2": "byte_array",
                "param_3": "data_pointer",
                "pbVar20": "current_byte_address",
                "pbVar3": "byte_ptr",
                "pbVar9": "next_byte_ptr",
                "pcVar12": "char_ptr",
                "pcVar19": "char_ptr2",
                "ppcVar18": "char_ptr_ptr",
                "puVar16": "ulong_ptr",
                "puVar17": "undefined_ptr",
                "sVar13": "string_length",
                "uVar11": "return_value",
                "uVar14": "ulong_var",
                "uVar8": "extracted_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d21c": {
            "additional_data": {
                "FUN_0010d21c": {
                    "1": "extract_string_information",
                    "2": "parse_and_validate_input",
                    "3": "extract_and_parse_number",
                    "4": "parse_and_extract_string"
                },
                "__haystack": {
                    "1": "str_haystack",
                    "19": "haystack",
                    "2": "temp_str",
                    "3": "demangled_string"
                },
                "__ptr": {
                    "1": "temp_pointer_1",
                    "10": "ptr1",
                    "2": "copied_string",
                    "3": "ptr",
                    "4": "temp_ptr1"
                },
                "__ptr_00": {
                    "1": "str_concat",
                    "12": "ptr2",
                    "2": "concatenated_string",
                    "3": "temp_ptr_2",
                    "6": "temp_ptr2"
                },
                "bVar1": {
                    "1": "byte_value",
                    "2": "current_char",
                    "5": "byte1",
                    "6": "current_byte"
                },
                "bVar14": {
                    "1": "byte_flag1",
                    "2": "byte4",
                    "3": "temp_byte2",
                    "4": "byte_var14"
                },
                "bVar16": {
                    "1": "current_char",
                    "2": "temp_byte2",
                    "4": "byte_var16"
                },
                "bVar17": {
                    "1": "byte",
                    "2": "byte17",
                    "3": "temp_byte3",
                    "4": "byte_var17"
                },
                "bVar18": {
                    "1": "byte8",
                    "2": "temp_byte6",
                    "3": "temp_byte4",
                    "4": "byte_var18"
                },
                "bVar19": {
                    "1": "temp_byte_7",
                    "2": "byte8",
                    "3": "temp_byte5",
                    "4": "byte_var19"
                },
                "bVar3": {
                    "1": "byte_var",
                    "2": "byte_var_3",
                    "3": "byte3",
                    "4": "byte_var3",
                    "6": "temp_byte"
                },
                "bVar5": {
                    "1": "flag2",
                    "2": "temp_byte2",
                    "4": "byte_var5"
                },
                "cVar4": {
                    "1": "char",
                    "2": "char_var4",
                    "3": "char1",
                    "7": "temp_char",
                    "9": "char_var"
                },
                "iVar7": {
                    "1": "num_var1",
                    "2": "int_value",
                    "3": "int_var7",
                    "5": "temp_int",
                    "7": "int_var"
                },
                "local_3c": {
                    "1": "extracted_values",
                    "2": "number_array",
                    "3": "array_var",
                    "4": "int_array",
                    "6": "local_array"
                },
                "param_1": {
                    "1": "param",
                    "12": "param1",
                    "2": "input_string",
                    "3": "input",
                    "5": "param_1"
                },
                "param_2": {
                    "1": "byte_array_ptr",
                    "11": "param2",
                    "3": "input_string",
                    "6": "string_ptr"
                },
                "param_3": {
                    "1": "param_three",
                    "11": "param3",
                    "2": "output_param",
                    "7": "output_string"
                },
                "pbVar10": {
                    "1": "ptr2",
                    "2": "byte_ptr",
                    "3": "str_ptr",
                    "4": "temp_ptr",
                    "6": "byte_ptr2"
                },
                "pbVar2": {
                    "1": "current_char",
                    "2": "current_ptr",
                    "3": "ptr",
                    "7": "byte_ptr"
                },
                "pcVar11": {
                    "1": "loop_ptr",
                    "2": "pointer_var1",
                    "7": "var11"
                },
                "pcVar13": {
                    "1": "current_char",
                    "2": "temp_ptr_4",
                    "7": "var13"
                },
                "pcVar15": {
                    "1": "ptr2",
                    "2": "pointer_var3",
                    "7": "var15"
                },
                "sVar9": {
                    "1": "input_length",
                    "2": "size_var_9",
                    "3": "size",
                    "4": "size_var",
                    "5": "str_length",
                    "8": "string_length"
                },
                "uVar12": {
                    "1": "result1",
                    "2": "result2"
                },
                "uVar20": {
                    "1": "index",
                    "2": "loop_var",
                    "4": "count",
                    "8": "counter"
                },
                "uVar21": {
                    "1": "unsigned_output",
                    "2": "ulong_var_21",
                    "3": "ulong_var21",
                    "7": "ulong_var"
                },
                "uVar6": {
                    "1": "u_var_6",
                    "23": "result",
                    "7": "return_value"
                },
                "uVar8": {
                    "1": "extracted_uint",
                    "2": "uint_value",
                    "3": "temp_uint",
                    "7": "uint_var"
                }
            },
            "called": [
                "concat",
                "FUN_0010c95e",
                "free",
                "cplus_demangle",
                "strstr",
                "FUN_00109a0b",
                "FUN_00108e76",
                "FUN_00108ea1",
                "strlen",
                "abort",
                "FUN_0010911f"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined4 parse_and_extract_data_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte current_byte;\n  byte *byte_ptr;\n  byte temp_byte;\n  char char_var;\n  byte byte_var5;\n  undefined4 result;\n  int int_var;\n  uint uint_var;\n  size_t string_length;\n  byte *byte_ptr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *var11;\n  undefined8 result_ptr;\n  char *var13;\n  byte byte_var14;\n  char *var15;\n  byte byte_var16;\n  byte byte_var17;\n  byte byte_var18;\n  byte byte_var19;\n  uint counter;\n  ulong ulong_var;\n  uint local_array [3];\n  \n  byte_ptr = *param2;\n  *param2 = byte_ptr + 1;\n  local_array[0] = extract_integer_from_string_00108e76(param2);\n  ulong_var = (ulong)local_array[0];\n  if (local_array[0] != 0) {\n    byte_ptr2 = *param2;\n    string_length = strlen((char *)byte_ptr2);\n    if (ulong_var <= string_length) {\n      *param2 = byte_ptr2 + ulong_var;\n      counter = 0;\n      result = parse_number_00108ea1(param2,local_array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (local_array[0] <= counter) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)copy_and_null_terminate_00109a0b(byte_ptr,(int)*param2 - (int)byte_ptr);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (var11 = strstr(haystack,\"::NoSuchStrinG\"), var13 = haystack,\n             var15 = haystack, var11 != (char *)0x0)) {\n            for (; var13 != var11; var13 = var13 + 1) {\n              if ((*var13 != ' ') ||\n                 (((var13[1] == '>' && (haystack < var13)) && (var13[-1] == '>')))) {\n                *var15 = *var13;\n                var15 = var15 + 1;\n              }\n            }\n            result_ptr = copy_and_null_terminate_00109a0b(haystack,(int)var15 - (int)haystack);\n            *param3 = result_ptr;\n            free(haystack);\n            return result;\n          }\n          print_error_message_0010911f(byte_ptr);\n          free(haystack);\n          return 0;\n        }\n        byte_ptr2 = *param2;\n        if (*byte_ptr2 != 0x5a) {\n          byte_var5 = parse_and_initialize_data_0010c95e(param1,param2,0);\n          if (byte_var5 == 0) {\n            return 0;\n          }\n          temp_byte = 0;\n          byte_var14 = 0;\n          byte_var18 = 0;\n          byte_var17 = 0;\n          byte_var19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte_var16 = temp_byte;\n              current_byte = *byte_ptr2;\n              if ((byte_var14 | current_byte == 0) != 0) {\n                byte_var5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              temp_byte = byte_var5;\n              byte_var14 = byte_var5;\n            } while ('v' < (char)current_byte);\n            if ((char)current_byte < 'b') {\n              if ((char)current_byte < 'U') {\n                if ((char)current_byte < 'C') goto LAB_0010d2e9;\n                ulong_var = 1L << (current_byte + 0xbd & 0x3f);\n                if ((ulong_var & 0x11409) == 0) {\n                  if ((ulong_var & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (current_byte == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(current_byte + 0xab)) goto LAB_0010d2e9;\n              byte_ptr2 = byte_ptr2 + 1;\n              temp_byte = byte_var16;\n              byte_var14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(current_byte) {\n            case 0x62:\n              temp_byte = byte_var16;\n              byte_var18 = byte_var5;\n              break;\n            case 99:\n              temp_byte = byte_var16;\n              byte_var19 = byte_var5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              temp_byte = byte_var16;\n              byte_var17 = byte_var5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param2 = byte_ptr2 + 1;\n        char_var = parse_and_initialize_data_0010c95e(param1,param2,0);\n        if (char_var == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(byte_ptr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte_var16 == 0) {\n    if (byte_var19 == 0) {\n      if (byte_var18 == 0) {\n        if (byte_var17 == 0) {\n          if (byte_var5 != 0) {\n            uint_var = extract_integer_from_string_00108e76(param2);\n            if (uint_var == 0) goto LAB_0010d280;\n            *param2 = *param2 + uint_var;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            byte_ptr2 = *param2;\n            if (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) == 0) break;\n            *param2 = byte_ptr2 + 1;\n          }\n          if (*byte_ptr2 == 0x2e) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *param2 = byte_ptr2;\n            } while (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n          byte_ptr2 = *param2;\n          if (*byte_ptr2 == 0x65) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *param2 = byte_ptr2;\n            } while (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uint_var = extract_integer_from_string_00108e76(param2);\n        if (1 < uint_var) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      int_var = extract_integer_from_string_00108e76(param2);\n      if (int_var == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  counter = counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = extract_integer_from_string_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = parse_number_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_null_terminate_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_null_terminate_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = extract_integer_from_string_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = extract_integer_from_string_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = extract_integer_from_string_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "current_name": "parse_and_extract_data_0010d21c",
            "entrypoint": "0x0010d21c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d21c": "parse_and_extract_data_0010d21c",
                "__haystack": "haystack",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar1": "current_byte",
                "bVar14": "byte_var14",
                "bVar16": "byte_var16",
                "bVar17": "byte_var17",
                "bVar18": "byte_var18",
                "bVar19": "byte_var19",
                "bVar3": "temp_byte",
                "bVar5": "byte_var5",
                "cVar4": "char_var",
                "iVar7": "int_var",
                "local_3c": "local_array",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pbVar10": "byte_ptr2",
                "pbVar2": "byte_ptr",
                "pcVar11": "var11",
                "pcVar13": "var13",
                "pcVar15": "var15",
                "sVar9": "string_length",
                "uVar12": "result_ptr",
                "uVar20": "counter",
                "uVar21": "ulong_var",
                "uVar6": "result",
                "uVar8": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d559": {
            "additional_data": {
                "FUN_0010d559": {
                    "1": "parse_and_count_occurrences",
                    "2": "parse_and_extract_integer",
                    "3": "parse_data",
                    "6": "extract_data_from_binary",
                    "8": "parse_and_extract_data"
                },
                "__nptr": {
                    "1": "byte_ptr2"
                },
                "__ptr": {
                    "1": "copy_buffer",
                    "2": "extracted_data",
                    "3": "string_copy",
                    "4": "temp_ptr",
                    "6": "temp_pointer"
                },
                "__s1": {
                    "1": "data_string_2",
                    "16": "extracted_string",
                    "2": "type_name"
                },
                "bVar1": {
                    "1": "current_byte_value",
                    "13": "first_byte",
                    "2": "byte_value",
                    "4": "first_char"
                },
                "cVar3": {
                    "1": "char_val",
                    "15": "result",
                    "2": "check_result",
                    "3": "parse_result"
                },
                "iVar5": {
                    "1": "index",
                    "26": "comparison_result"
                },
                "lVar8": {
                    "1": "output_data",
                    "2": "found_index",
                    "3": "found_string",
                    "5": "result",
                    "8": "search_result"
                },
                "local_40": {
                    "1": "ptr_temp_strings",
                    "2": "local_strings",
                    "4": "temp_string_array"
                },
                "local_64": {
                    "1": "int_local",
                    "4": "count",
                    "6": "remaining_iterations",
                    "9": "counter"
                },
                "param_1": {
                    "1": "parsed_data",
                    "2": "input_data",
                    "3": "output_buffer",
                    "5": "data",
                    "7": "input_array"
                },
                "param_2": {
                    "1": "buffer",
                    "2": "byte_array_ptr",
                    "3": "data",
                    "4": "input",
                    "5": "input_string"
                },
                "param_3": {
                    "1": "ptr_length",
                    "2": "length_ptr",
                    "3": "data_length",
                    "4": "count_ptr",
                    "9": "output_length"
                },
                "pbVar11": {
                    "1": "new_byte",
                    "2": "updated_byte_ptr",
                    "3": "updated_byte",
                    "4": "next_byte"
                },
                "pbVar2": {
                    "1": "buffer_ptr",
                    "10": "current_byte",
                    "2": "current_position",
                    "3": "current_ptr",
                    "5": "byte_ptr"
                },
                "pcVar10": {
                    "1": "ptr_string",
                    "3": "string",
                    "5": "extracted_string",
                    "7": "temp_string"
                },
                "plVar9": {
                    "1": "pointer_to_long",
                    "2": "pointer_list",
                    "4": "type_array",
                    "6": "type_pointer"
                },
                "ppcVar6": {
                    "1": "str_array_ptr",
                    "2": "temp_string_array",
                    "6": "string_array"
                },
                "sVar7": {
                    "1": "size1",
                    "16": "string_length",
                    "2": "string_size",
                    "5": "length"
                },
                "uVar12": {
                    "1": "string_type",
                    "4": "type",
                    "6": "type_flag"
                },
                "uVar4": {
                    "1": "integer",
                    "4": "integer_value",
                    "7": "extracted_integer",
                    "9": "string_length"
                }
            },
            "called": [
                "FUN_001129f4",
                "FUN_0010914e",
                "FUN_0010afd5",
                "free",
                "strtol",
                "FUN_00113b1e",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "FUN_00108e76",
                "strcmp",
                "strlen",
                "FUN_0010911f"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 parse_and_extract_data_0010d559(undefined8 *input_array,byte **input_string,long *output_length)\n\n{\n  byte first_byte;\n  byte *current_byte;\n  char result;\n  uint string_length;\n  int comparison_result;\n  char **string_array;\n  size_t string_length;\n  long search_result;\n  long *type_ptr;\n  char *temp_string;\n  char *extracted_string;\n  void *temp_pointer;\n  byte *next_byte;\n  undefined8 type_flag;\n  byte *byte_ptr2;\n  int counter;\n  char *temp_string_array [2];\n  \n  current_byte = *input_string;\n  first_byte = current_byte[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    counter = (char)first_byte + -0x30;\n    if (current_byte[2] == 0x5f) {\n      *input_string = current_byte + 1;\n    }\n    next_byte = *input_string + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&_sch_istable)[(ulong)current_byte[2] * 2] & 4) == 0)) ||\n       (current_byte[2] == 0x30)) goto LAB_0010d5d8;\n    byte_ptr2 = current_byte + 2;\n    search_result = strtol((char *)byte_ptr2,(char **)0x0,10);\n    counter = (int)search_result;\n    while (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) != 0) {\n      byte_ptr2 = byte_ptr2 + 1;\n    }\n    next_byte = byte_ptr2 + 1;\n    if (*byte_ptr2 != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_string = next_byte;\n  string_array = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    string_array = temp_string_array;\n  }\n  search_result = 0;\n  while( true ) {\n    while( true ) {\n      counter = counter + -1;\n      if (counter == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = search_result;\n        }\n        return 1;\n      }\n      if (**input_string == 0x5f) {\n        *input_string = *input_string + 1;\n      }\n      if (**input_string != 0x74) break;\n      result = parse_and_extract_data_0010d559_0010d21c(input_array,input_string,string_array);\n      temp_string = temp_string_array[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        string_length = strlen(temp_string_array[0]);\n        search_result = find_string_in_data_0010afd5(*input_array,input_array[1],temp_string,string_length & 0xffffffff,9);\n        free(temp_string);\n        if (search_result == 0) {\n          return 0;\n        }\n      }\n    }\n    string_length = extract_integer_from_string_00108e76(input_string);\n    string_length = strlen((char *)*input_string);\n    if (string_length < string_length) break;\n    if (output_length != (long *)0x0) {\n      if ((search_result != 0) && (type_ptr = (long *)get_real_type_00113b1e(search_result), type_ptr != (long *)0x0)) {\n        temp_string = (char *)copy_and_null_terminate_00109a0b(*input_string,string_length);\n        for (; search_result = *type_ptr, search_result != 0; type_ptr = type_ptr + 1) {\n          search_result = *(long *)(search_result + 8);\n          if (search_result == 0) {\n            free(temp_string);\n            return 0;\n          }\n          extracted_string = (char *)extract_data_001129f4(search_result);\n          if ((extracted_string != (char *)0x0) && (comparison_result = strcmp(extracted_string,temp_string), comparison_result == 0)) break;\n        }\n        free(temp_string);\n        if (search_result != 0) goto LAB_0010d7ad;\n      }\n      type_flag = 9;\n      if (counter == 0) {\n        temp_pointer = (void *)copy_and_null_terminate_00109a0b(*input_string,string_length);\n        search_result = find_named_type_0010914e(*input_array,temp_pointer);\n        free(temp_pointer);\n        if (search_result != 0) goto LAB_0010d7ad;\n        type_flag = 0;\n      }\n      search_result = find_string_in_data_0010afd5(*input_array,input_array[1],*input_string,string_length,type_flag);\n      if (search_result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_string = *input_string + string_length;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(current_byte);\n  return 0;\n}\n\n",
            "current_name": "parse_and_extract_data_0010d559",
            "entrypoint": "0x0010d559",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d559": "parse_and_extract_data_0010d559",
                "__nptr": "byte_ptr2",
                "__ptr": "temp_pointer",
                "__s1": "extracted_string",
                "bVar1": "first_byte",
                "cVar3": "result",
                "iVar5": "comparison_result",
                "lVar8": "search_result",
                "local_40": "temp_string_array",
                "local_64": "counter",
                "param_1": "input_array",
                "param_2": "input_string",
                "param_3": "output_length",
                "pbVar11": "next_byte",
                "pbVar2": "current_byte",
                "pcVar10": "temp_string",
                "plVar9": "type_ptr",
                "ppcVar6": "string_array",
                "sVar7": "string_length",
                "uVar12": "type_flag",
                "uVar4": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d7d4": {
            "additional_data": {
                "FUNC_0010c95e": {
                    "1": "check_data"
                },
                "FUN_0010d7d4": {
                    "15": "process_data",
                    "2": "expand_and_store_data",
                    "5": "store_and_expand_data",
                    "9": "store_expanded_data"
                },
                "cVar2": {
                    "1": "func_result",
                    "2": "result_char",
                    "20": "result",
                    "3": "is_valid"
                },
                "expand_and_store_data_00109be3": {
                    "2": "expand_and_store_data"
                },
                "lVar4": {
                    "1": "dest_value",
                    "2": "temp_var",
                    "3": "data_ptr",
                    "4": "output_data"
                },
                "local_40": {
                    "1": "local_array_data",
                    "2": "data_array",
                    "4": "local_data",
                    "5": "temp_buffer",
                    "7": "temp_array"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_param1",
                    "3": "data",
                    "4": "input_value",
                    "7": "input_param"
                },
                "param_2": {
                    "1": "data",
                    "2": "input_buffer",
                    "3": "input_param_2",
                    "4": "input_array",
                    "7": "data_ptr"
                },
                "param_3": {
                    "1": "ptr_dest",
                    "2": "arg3",
                    "3": "output_buffer",
                    "4": "output_ptr",
                    "5": "output_data"
                },
                "param_4": {
                    "1": "num_of_elements",
                    "2": "output_count",
                    "6": "count_ptr"
                },
                "param_5": {
                    "1": "counter_2",
                    "2": "capacity_ptr",
                    "3": "size_ptr"
                },
                "plVar5": {
                    "1": "temp_data_ptr",
                    "2": "temp_buffer",
                    "3": "local_data_ptr",
                    "5": "local_array"
                },
                "uVar1": {
                    "1": "input_param2_val",
                    "2": "data_value",
                    "3": "start_value",
                    "7": "data_start"
                },
                "uVar3": {
                    "1": "expanded_value",
                    "10": "expanded_data",
                    "2": "expanded_result",
                    "3": "expand_result",
                    "6": "expanded_data_result",
                    "7": "result"
                },
                "uVar6": {
                    "1": "temp_count",
                    "2": "new_count",
                    "7": "count"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "FUN_00109be3",
                "FUN_0010c95e",
                "xrealloc"
            ],
            "calling": [
                "FUN_0010d882"
            ],
            "code": "\nundefined4\nprocess_data_0010d7d4(undefined8 input_param,undefined8 *data_ptr,long *output_data,uint *count_ptr,uint *size_ptr)\n\n{\n  undefined8 data_start;\n  char result;\n  undefined4 expanded_data;\n  long output_data;\n  long *local_array;\n  uint count;\n  long temp_array [2];\n  \n  data_start = *data_ptr;\n  local_array = temp_array;\n  if (output_data == (long *)0x0) {\n    local_array = (long *)0x0;\n  }\n  result = parse_and_initialize_data_0010c95e(input_param,data_ptr,local_array);\n  if ((result != '\\0') &&\n     (expanded_data = expand_and_store_data(input_param,data_start,(int)*data_ptr - (int)data_start), (char)expanded_data != '\\0')) {\n    if (output_data == (long *)0x0) {\n      return expanded_data;\n    }\n    if (temp_array[0] != 0) {\n      if (*size_ptr <= *count_ptr + 1) {\n        count = *size_ptr + 10;\n        output_data = *output_data;\n        *size_ptr = count;\n        output_data = xrealloc(output_data,(ulong)count << 3);\n        *output_data = output_data;\n      }\n      count = *count_ptr;\n      *(long *)(*output_data + (ulong)count * 8) = temp_array[0];\n      *count_ptr = count + 1;\n      return expanded_data;\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = expand_and_store_data_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0010d7d4",
            "entrypoint": "0x0010d7d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d7d4": "process_data_0010d7d4",
                "cVar2": "result",
                "expand_and_store_data_00109be3": "expand_and_store_data",
                "lVar4": "output_data",
                "local_40": "temp_array",
                "param_1": "input_param",
                "param_2": "data_ptr",
                "param_3": "output_data",
                "param_4": "count_ptr",
                "param_5": "size_ptr",
                "plVar5": "local_array",
                "uVar1": "data_start",
                "uVar3": "expanded_data",
                "uVar6": "count",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d882": {
            "additional_data": {
                "CONCAT71": {
                    "1": "return_value"
                },
                "FUN_0010d882": {
                    "1": "process_data_and_parse",
                    "3": "parse_data",
                    "6": "process_data",
                    "9": "parse_and_process_data"
                },
                "LAB_0010d958": {
                    "1": "error_handler"
                },
                "LAB_0010d9fa": {
                    "1": "end_of_processing"
                },
                "bVar7": {
                    "1": "is_remaining",
                    "11": "loop_condition",
                    "2": "condition",
                    "3": "is_not_zero"
                },
                "cVar3": {
                    "1": "current_char_value",
                    "2": "current_value",
                    "22": "current_char",
                    "3": "current_character"
                },
                "iVar1": {
                    "1": "loop_count",
                    "10": "iteration_count",
                    "2": "counter",
                    "4": "count"
                },
                "lVar4": {
                    "1": "allocation_size",
                    "28": "allocated_memory"
                },
                "local_40": {
                    "1": "data_block",
                    "2": "temp_buffer",
                    "6": "temp_array",
                    "8": "data_array"
                },
                "local_40 [2]": {
                    "1": "temp_buffer"
                },
                "local_44": {
                    "1": "number2",
                    "2": "loop_counter",
                    "4": "count"
                },
                "local_48": {
                    "1": "counter_2",
                    "2": "number_length",
                    "3": "number",
                    "5": "value"
                },
                "local_4c": {
                    "1": "temp_value",
                    "2": "constant_10",
                    "5": "default_value",
                    "7": "constant"
                },
                "local_50": {
                    "1": "output_index",
                    "2": "total_count",
                    "5": "data_index"
                },
                "param_1": {
                    "1": "input_parameter",
                    "2": "input_length",
                    "3": "data",
                    "4": "input",
                    "5": "input_data"
                },
                "param_2": {
                    "1": "data",
                    "2": "input_data",
                    "3": "input_string",
                    "9": "input_strings"
                },
                "param_3": {
                    "1": "output_pointer",
                    "2": "arg3",
                    "3": "output_buffer",
                    "4": "output",
                    "5": "output_data",
                    "8": "output_ptr"
                },
                "param_4": {
                    "1": "flag_ptr",
                    "2": "output_flag",
                    "3": "error_flag_ptr",
                    "4": "has_error",
                    "7": "flag",
                    "8": "error_flag"
                },
                "parse_number_00108ea1": {
                    "1": "parse_number"
                },
                "pcVar2": {
                    "1": "input_string",
                    "13": "current_string",
                    "2": "str",
                    "9": "current_char"
                },
                "pcVar5": {
                    "1": "current_string_ptr",
                    "3": "current_data_ptr",
                    "4": "current_char",
                    "5": "current_string",
                    "8": "current_position"
                },
                "print_error_message_0010911f": {
                    "2": "print_error_message"
                },
                "process_data_0010d7d4": {
                    "2": "process_data"
                },
                "uVar6": {
                    "1": "numeric_value",
                    "19": "index",
                    "2": "current_index",
                    "3": "parsed_number"
                }
            },
            "called": [
                "FUN_0010d7d4",
                "xmalloc",
                "FUN_00108ea1",
                "FUN_0010911f"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 parse_and_process_data_0010d882(long input_param,char **input_strings,long *output_ptr,undefined *error_flag)\n\n{\n  int iteration_count;\n  char *current_string;\n  char current_char;\n  long allocated_memory;\n  char *current_position;\n  ulong index;\n  bool loop_condition;\n  uint counter;\n  undefined4 constant;\n  uint value;\n  int count;\n  undefined8 data_array [2];\n  \n  current_string = *input_strings;\n  constant = 10;\n  if (output_ptr != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_ptr = allocated_memory;\n    *error_flag = 0;\n  }\n  counter = 0;\n  while( true ) {\n    current_position = *input_strings;\n    current_char = *current_position;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *input_strings = current_position + 1;\n      if (current_char == 'T') {\n        count = 1;\n      }\n      else {\n        current_char = parse_number(input_strings,&count);\n        if (current_char == '\\0') goto error_handler;\n      }\n      current_char = parse_number(input_strings,&value);\n      if ((current_char == '\\0') || (*(uint *)(input_param + 0x28) <= value)) {\nerror_handler:\n        print_error_message(current_string);\n        return 0;\n      }\n      index = (ulong)value;\n      while (iteration_count = count + -1, loop_condition = count != 0, count = iteration_count, loop_condition) {\n        data_array[0] = *(undefined8 *)(*(long *)(input_param + 0x20) + index * 0x10);\n        current_char = process_data(input_param,data_array,output_ptr,&counter,&constant);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = process_data(input_param,input_strings,output_ptr,&counter,&constant);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_ptr == (long *)0x0) {\n    if (current_char != 'e') goto end_of_processing;\n  }\n  else {\n    *(undefined8 *)(*output_ptr + (ulong)counter * 8) = 0;\n    if (*current_position != 'e') goto end_of_processing;\n    *error_flag = 1;\n  }\n  current_position = current_position + 1;\n  *input_strings = current_position;\nend_of_processing:\n  return return_value((int7)((ulong)current_position >> 8),1);\n}\n\n",
            "current_name": "parse_and_process_data_0010d882",
            "entrypoint": "0x0010d882",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT71": "return_value",
                "FUN_0010d882": "parse_and_process_data_0010d882",
                "LAB_0010d958": "error_handler",
                "LAB_0010d9fa": "end_of_processing",
                "bVar7": "loop_condition",
                "cVar3": "current_char",
                "iVar1": "iteration_count",
                "lVar4": "allocated_memory",
                "local_40": "data_array",
                "local_44": "count",
                "local_48": "value",
                "local_4c": "constant",
                "local_50": "counter",
                "param_1": "input_param",
                "param_2": "input_strings",
                "param_3": "output_ptr",
                "param_4": "error_flag",
                "parse_number_00108ea1": "parse_number",
                "pcVar2": "current_string",
                "pcVar5": "current_position",
                "print_error_message_0010911f": "print_error_message",
                "process_data_0010d7d4": "process_data",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010da0b": {
            "additional_data": {
                "FUN_0010da0b": {
                    "1": "allocate_memory_for_slots",
                    "2": "allocate_memory_and_initialize",
                    "3": "allocate_memory_for_slot",
                    "9": "allocate_and_initialize_slots"
                },
                "auVar7": {
                    "1": "result_data",
                    "17": "result",
                    "2": "return_val",
                    "7": "return_value"
                },
                "bVar6": {
                    "1": "b_flag",
                    "2": "loop_condition",
                    "3": "is_zero",
                    "6": "flag"
                },
                "lVar3": {
                    "1": "loop_counter1",
                    "18": "offset",
                    "2": "adjusted_slot_index",
                    "4": "slot_offset"
                },
                "lVar4": {
                    "1": "loop_index",
                    "11": "counter",
                    "2": "index",
                    "8": "loop_counter"
                },
                "param_1": {
                    "1": "array_pointer",
                    "2": "memory_pointer",
                    "3": "slot_list_ptr",
                    "4": "slot_pointer",
                    "5": "slot_list"
                },
                "param_2": {
                    "1": "array_size",
                    "30": "slot_index"
                },
                "param_3": {
                    "1": "arg1",
                    "2": "unused_parameter1",
                    "4": "param3",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "extra_slot",
                    "2": "var2",
                    "4": "param4",
                    "5": "param_4"
                },
                "plVar2": {
                    "1": "new_slot_data",
                    "13": "new_slot",
                    "2": "new_block",
                    "3": "allocated_memory"
                },
                "uVar1": {
                    "1": "err_msg",
                    "2": "error_msg",
                    "23": "error_message"
                },
                "uVar5": {
                    "1": "loop_index",
                    "19": "remaining_slots",
                    "2": "temp",
                    "3": "temp_index"
                }
            },
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_list,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 error_message;\n  long *new_slot;\n  long offset;\n  long counter;\n  ulong remaining_slots;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_list == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_list = new_slot;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_list = (long **)*slot_list;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*slot_list == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_list = new_slot;\n      for (counter = 0x22; counter != 0; counter = counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = param_4;\n    result._0_8_ = *slot_list + slot_index + offset + 1;\n    return result;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,slot_index);\n}\n\n",
            "current_name": "allocate_and_initialize_slots_0010da0b",
            "entrypoint": "0x0010da0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "auVar7": "result",
                "bVar6": "flag",
                "lVar3": "offset",
                "lVar4": "counter",
                "param_1": "slot_list",
                "param_2": "slot_index",
                "plVar2": "new_slot",
                "uVar1": "error_message",
                "uVar5": "remaining_slots"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010dac0": {
            "additional_data": {
                "FUN_0010dac0": {
                    "1": "improve_and_get_data",
                    "14": "parse_coff_type",
                    "2": "parse_and_initialize_data_type"
                },
                "__ptr": {
                    "1": "ptr_1",
                    "2": "allocated_memory_1",
                    "3": "data_ptr_1",
                    "9": "ptr1"
                },
                "__ptr_00": {
                    "1": "pointer_2",
                    "2": "allocated_memory_2",
                    "4": "data_ptr_2",
                    "9": "ptr2"
                },
                "bVar8": {
                    "1": "var8",
                    "2": "temp_byte",
                    "4": "temp_var8",
                    "8": "byte_var"
                },
                "cVar2": {
                    "1": "var2",
                    "2": "temp_char",
                    "4": "char_var",
                    "6": "temp_var2"
                },
                "iVar9": {
                    "1": "temp_int_var",
                    "2": "int_value",
                    "3": "iteration",
                    "4": "loop_counter",
                    "5": "temp_var9",
                    "7": "int_var"
                },
                "lVar1": {
                    "1": "data",
                    "2": "length",
                    "6": "temp_var1",
                    "7": "result"
                },
                "lVar12": {
                    "1": "var",
                    "4": "index",
                    "5": "long_var",
                    "6": "temp_var12"
                },
                "lVar5": {
                    "1": "type",
                    "2": "data",
                    "20": "result"
                },
                "local_47": {
                    "1": "local_byte_value",
                    "16": "local_byte",
                    "2": "byte_value",
                    "4": "local_var2"
                },
                "local_48": {
                    "1": "local_var",
                    "13": "local_char",
                    "2": "local_flag",
                    "4": "local_var1"
                },
                "local_68": {
                    "1": "local_data1",
                    "12": "local_buffer",
                    "4": "buffer",
                    "8": "local_array"
                },
                "param_1": {
                    "1": "binary_param",
                    "2": "input_data",
                    "3": "arg1",
                    "4": "coff_data"
                },
                "param_2": {
                    "1": "coff_header",
                    "2": "symbol_table",
                    "3": "arg2",
                    "6": "data_array"
                },
                "param_3": {
                    "1": "debug_info_ptr",
                    "3": "output_param",
                    "4": "debug_info",
                    "5": "debug_data"
                },
                "param_4": {
                    "1": "undefined8_arg",
                    "11": "param_4",
                    "2": "config_param",
                    "3": "arg4"
                },
                "param_5": {
                    "1": "arg5",
                    "20": "type_code",
                    "5": "flag"
                },
                "param_6": {
                    "1": "param_section",
                    "2": "type_name"
                },
                "param_7": {
                    "1": "input_7",
                    "13": "flag",
                    "2": "is_signed",
                    "4": "is_unsigned"
                },
                "param_8": {
                    "1": "arg_8",
                    "2": "param8",
                    "5": "debug_name",
                    "7": "param_8"
                },
                "pcVar10": {
                    "1": "temp_char_var",
                    "2": "char_pointer",
                    "3": "char_ptr",
                    "4": "temp_var10",
                    "5": "type_string"
                },
                "plVar7": {
                    "1": "coff_value",
                    "2": "slots",
                    "3": "ptr_var"
                },
                "uVar11": {
                    "1": "mask",
                    "2": "bit_mask",
                    "4": "temp_var11",
                    "5": "type_mask",
                    "9": "ulong_var"
                },
                "uVar13": {
                    "1": "uint_var1",
                    "2": "shifted_type_code",
                    "3": "uint_var",
                    "5": "temp_var13"
                },
                "uVar14": {
                    "1": "short_count",
                    "2": "uint_var2",
                    "3": "uint_var_2",
                    "5": "temp_var14"
                },
                "uVar15": {
                    "1": "ret_val3",
                    "5": "temp_var15"
                },
                "uVar3": {
                    "1": "result_code",
                    "2": "uint_var",
                    "7": "temp_var3",
                    "9": "error_code"
                },
                "uVar4": {
                    "1": "result_value",
                    "2": "value",
                    "4": "result",
                    "7": "temp_var4"
                },
                "uVar6": {
                    "1": "undefined8_result_2",
                    "2": "result",
                    "7": "temp_var6"
                }
            },
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "xmalloc",
                "xrealloc",
                "FUN_00113df2",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "FUN_00113dfe",
                "FUN_0010dac0",
                "FUN_00113d3a",
                "FUN_00113c43",
                "free",
                "FUN_00113ce0",
                "FUN_00113da9",
                "FUN_0010c218",
                "FUN_00113e17",
                "FUN_00113d6e",
                "dcgettext",
                "bfd_get_error",
                "FUN_00113e23"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010554f",
                "FUN_0010e07c"
            ],
            "code": "\nlong parse_coff_type_0010dac0(long coff_data,long *data_array,long debug_data,undefined8 param_4,uint type_code,\n                 long *coff_symbols,char flag,undefined8 param_8)\n\n{\n  long result;\n  char temp_var2;\n  undefined4 error_code;\n  undefined8 temp_var4;\n  long result;\n  undefined8 temp_var6;\n  long *ptr_var;\n  void *ptr1;\n  void *ptr2;\n  byte byte_value;\n  int int_var;\n  char *type_string;\n  ulong ulong_var;\n  long temp_var12;\n  uint temp_var13;\n  uint temp_var14;\n  undefined8 temp_var15;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  result = *(long *)(coff_data + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    temp_var13 = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    ulong_var = (ulong)(type_code & *(uint *)(result + 0x40));\n    byte_value = (byte)*(undefined4 *)(result + 0x3c);\n    temp_var13 = (temp_var13 ^ type_code) & *(uint *)(result + 0x38) ^ temp_var13;\n    if (ulong_var == 1L << (byte_value & 0x3f)) {\n      temp_var4 = parse_coff_type_0010dac0(coff_data,data_array,debug_data,param_4,temp_var13,coff_symbols,flag,param_8);\n      result = initialize_or_get_data_00113d3a(temp_var4);\n      return result;\n    }\n    if (ulong_var != 2L << (byte_value & 0x3f)) {\n      if (ulong_var != 3L << (byte_value & 0x3f)) {\n        temp_var4 = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          temp_var13);\n        print_error_message_00119ed0(temp_var4,type_code);\n        return 0;\n      }\n      temp_var14 = 0;\n      if (coff_symbols != (long *)0x0) {\n        temp_var14 = (uint)*(ushort *)(coff_symbols + 2);\n        ptr_var = coff_symbols + 2;\n        for (int_var = 0; (*(short *)ptr_var != 0 && (int_var != 3)); int_var = int_var + 1) {\n          *(short *)ptr_var = *(short *)((long)ptr_var + 2);\n          ptr_var = (long *)((long)ptr_var + 2);\n        }\n        *(short *)ptr_var = 0;\n      }\n      temp_var15 = 0;\n      temp_var4 = param_8;\n      temp_var6 = parse_coff_type_0010dac0(coff_data,data_array,debug_data,param_4,temp_var13,coff_symbols,0);\n      result = *(long *)(debug_data + 0x28);\n      if (result == 0) {\n        temp_var4 = update_data_00113dfe(4,0,temp_var15,temp_var4);\n        result = initialize_debug_name_type_0010c218(param_8,\"int\",temp_var4);\n        *(long *)(debug_data + 0x28) = result;\n      }\n      result = initialize_and_store_data_00113c43(temp_var6,result,0,(long)(int)(temp_var14 - 1),0);\n      return result;\n    }\n    temp_var4 = parse_coff_type_0010dac0(coff_data,data_array,debug_data,param_4,temp_var13,coff_symbols,flag,param_8);\n    result = initialize_and_allocate_data_00113ce0(temp_var4,0,0);\n    return result;\n  }\n  if ((coff_symbols != (long *)0x0) && (0 < *coff_symbols)) {\n    ptr_var = (long *)allocate_and_initialize_slots_0010da0b(debug_data);\n    if (*ptr_var != 0) {\n      return *ptr_var;\n    }\n    result = initialize_and_store_data_00113e23(ptr_var,0);\n    return result;\n  }\n  if (flag == '\\0') {\n    coff_symbols = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = initialize_data_00113e17();\n    return result;\n  }\n  result = *(long *)(debug_data + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    temp_var4 = initialize_data_00113e17();\n    type_string = \"void\";\n    break;\n  case 2:\n    temp_var4 = update_data_00113dfe(1,0);\n    type_string = \"char\";\n    break;\n  case 3:\n    temp_var4 = update_data_00113dfe(2,0);\n    type_string = \"short\";\n    break;\n  case 4:\n    temp_var4 = update_data_00113dfe(4,0);\n    type_string = \"int\";\n    break;\n  case 5:\n    temp_var4 = update_data_00113dfe(4,0);\n    type_string = \"long\";\n    break;\n  case 6:\n    temp_var4 = initialize_data_00113df2(4);\n    type_string = \"float\";\n    break;\n  case 7:\n    temp_var4 = initialize_data_00113df2(8);\n    type_string = \"double\";\n    break;\n  case 8:\n    if (coff_symbols == (long *)0x0) {\n      result = initialize_data_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    temp_var4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (coff_symbols == (long *)0x0) {\n      result = initialize_data_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    temp_var4 = 9;\nLAB_0010de7a:\n    result = extract_and_initialize_data_0010e07c(coff_data,data_array,debug_data,temp_var4,coff_symbols,param_8);\nLAB_0010e046:\n    ptr_var = (long *)allocate_and_initialize_slots_0010da0b(debug_data,param_4);\n    *ptr_var = result;\n    return result;\n  case 10:\n    if (coff_symbols == (long *)0x0) {\n      result = initialize_and_store_data_00113d6e(0,0);\n    }\n    else {\n      result = coff_symbols[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      temp_var12 = 0;\n      do {\n        while( true ) {\n          if ((result <= data_array[3]) || (data_array[1] <= data_array[2])) goto LAB_0010e032;\n          int_var = (int)temp_var12;\n          result = *(long *)(*data_array + data_array[2] * 8);\n          temp_var2 = bfd_coff_get_syment(coff_data,result,local_buffer);\n          temp_var12 = (long)int_var;\n          if (temp_var2 == '\\0') {\n            error_code = bfd_get_error();\n            temp_var4 = bfd_errmsg(error_code);\n            temp_var6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_message_00119ed0(temp_var6,temp_var4);\n            free(ptr1);\n            free(ptr2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          data_array[2] = data_array[2] + 1;\n          data_array[3] = (ulong)local_byte + 1 + data_array[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= int_var + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          temp_var12 = *(long *)(result + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)int_var * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)ptr2 + (long)int_var * 8) =\n               *(long *)(result + 0x10) + *(long *)(temp_var12 + 0x30);\n          temp_var12 = (long)(int_var + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + temp_var12 * 8) = 0;\n      result = initialize_and_store_data_00113d6e(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = initialize_data_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    temp_var4 = update_data_00113dfe(1,1);\n    type_string = \"unsigned char\";\n    break;\n  case 0xd:\n    temp_var4 = update_data_00113dfe(2,1);\n    type_string = \"unsigned short\";\n    break;\n  case 0xe:\n    temp_var4 = update_data_00113dfe(4,1);\n    type_string = \"unsigned int\";\n    break;\n  case 0xf:\n    temp_var4 = update_data_00113dfe(4,1);\n    type_string = \"unsigned long\";\n    break;\n  case 0x10:\n    temp_var4 = initialize_data_00113df2(0xc);\n    type_string = \"long double\";\n  }\n  result = initialize_debug_name_type_0010c218(param_8,type_string,temp_var4);\nLAB_0010e065:\n  *(long *)(debug_data + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "current_name": "parse_coff_type_0010dac0",
            "entrypoint": "0x0010dac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "byte_value",
                "cVar2": "temp_var2",
                "iVar9": "int_var",
                "lVar1": "result",
                "lVar12": "temp_var12",
                "lVar5": "result",
                "local_47": "local_byte",
                "local_48": "local_char",
                "local_68": "local_buffer",
                "param_1": "coff_data",
                "param_2": "data_array",
                "param_3": "debug_data",
                "param_5": "type_code",
                "param_6": "coff_symbols",
                "param_7": "flag",
                "pcVar10": "type_string",
                "plVar7": "ptr_var",
                "uVar11": "ulong_var",
                "uVar13": "temp_var13",
                "uVar14": "temp_var14",
                "uVar15": "temp_var15",
                "uVar3": "error_code",
                "uVar4": "temp_var4",
                "uVar6": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e07c": {
            "additional_data": {
                "FUN_0010e07c": {
                    "1": "parse_coff_file",
                    "2": "parse_coff_symbols",
                    "3": "process_binary_data",
                    "5": "extract_and_initialize_data"
                },
                "__ptr": {
                    "1": "extracted_data",
                    "2": "allocated_memory",
                    "3": "dynamic_array",
                    "5": "data_array"
                },
                "cVar4": {
                    "1": "result_code",
                    "12": "result",
                    "2": "char_value",
                    "3": "symbol_status"
                },
                "iVar13": {
                    "1": "symbol_data_size",
                    "2": "some_variable",
                    "4": "offset",
                    "5": "symbol_offset"
                },
                "iVar14": {
                    "1": "symbol_info_4",
                    "2": "initial_size",
                    "3": "array_size"
                },
                "lVar1": {
                    "1": "symbol_table_start",
                    "2": "length"
                },
                "lVar12": {
                    "1": "loop_var",
                    "2": "num_entries",
                    "4": "index"
                },
                "lVar2": {
                    "1": "sym_addr",
                    "2": "element",
                    "3": "symbol_entry",
                    "4": "symbol_table_entry",
                    "5": "symbol_address"
                },
                "lVar3": {
                    "1": "processed_symbols",
                    "2": "counter",
                    "6": "symbol_count"
                },
                "local_56": {
                    "1": "ushort_value",
                    "2": "symbol_value_size"
                },
                "local_60": {
                    "1": "local_buffer3",
                    "2": "auxiliary_info",
                    "3": "aux_data",
                    "4": "aux_data_buffer"
                },
                "local_67": {
                    "1": "num_aux_symbols",
                    "2": "local_byte_2"
                },
                "local_68": {
                    "1": "auxiliary_type",
                    "2": "local_byte_1",
                    "3": "symbol_type",
                    "4": "symbol_class"
                },
                "local_6a": {
                    "1": "symbol_type_flag",
                    "2": "auxent_type",
                    "6": "symbol_type"
                },
                "local_88": {
                    "1": "buffer",
                    "14": "symbol_name",
                    "2": "local_buffer",
                    "3": "symbol_data",
                    "4": "symbol_name_buffer"
                },
                "local_a8": {
                    "1": "local_type1",
                    "2": "symbol_value_low"
                },
                "param_1": {
                    "1": "symbol_table",
                    "2": "input_param",
                    "4": "file_handle",
                    "7": "param1",
                    "8": "param_1"
                },
                "param_2": {
                    "1": "ptr_array",
                    "13": "symbol_table",
                    "2": "array",
                    "4": "data_array",
                    "5": "param2"
                },
                "param_3": {
                    "1": "file_data",
                    "10": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "is_64bit_coff",
                    "2": "symbol_count",
                    "5": "param_4",
                    "7": "param4"
                },
                "param_5": {
                    "1": "input_data",
                    "2": "base_address",
                    "7": "param5"
                },
                "param_6": {
                    "1": "dynamic_allocation",
                    "10": "param_6",
                    "2": "allocation_size",
                    "7": "param6"
                },
                "pcVar9": {
                    "1": "error_message_format",
                    "3": "error_msg",
                    "9": "error_format"
                },
                "puVar10": {
                    "1": "auxiliary_symbol_info",
                    "12": "aux_data",
                    "2": "aux_data_buffer",
                    "5": "auxiliary_data"
                },
                "puVar8": {
                    "1": "new_segment",
                    "2": "symbol_info",
                    "3": "new_entry",
                    "4": "new_symbol_entry"
                },
                "uStack_9c": {
                    "1": "var_9c",
                    "2": "local_var_9c"
                },
                "uStack_a0": {
                    "1": "new_symbol_val3",
                    "2": "local_var_a0"
                },
                "uStack_a4": {
                    "1": "first_value_high_bits",
                    "2": "local_var_a4"
                },
                "uVar11": {
                    "1": "symbol_info_2",
                    "2": "auxent_value",
                    "3": "value",
                    "4": "aux_value"
                },
                "uVar5": {
                    "1": "error_msg",
                    "14": "error_code",
                    "2": "error_var",
                    "3": "bfd_error_code",
                    "7": "bfd_error"
                },
                "uVar6": {
                    "1": "result1",
                    "2": "symbol_name",
                    "3": "initialized_data"
                },
                "uVar7": {
                    "1": "function_result",
                    "11": "error_message",
                    "2": "error_string",
                    "3": "error_msg"
                }
            },
            "called": [
                "FUN_0010dac0",
                "FUN_00119ed0",
                "bfd_coff_get_auxent",
                "bfd_errmsg",
                "free",
                "FUN_00113da9",
                "bfd_coff_get_syment",
                "xrealloc",
                "xmalloc",
                "dcgettext",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_0010dac0"
            ],
            "code": "\nundefined8\nextract_and_initialize_data_0010e07c(undefined8 param_1,long *symbol_table,undefined8 param_3,int param4,long param5,\n            undefined8 param_6)\n\n{\n  long length;\n  long symbol_offset;\n  long symbol_count;\n  char result;\n  undefined4 error_code;\n  void *data_array;\n  undefined8 initialized_data;\n  undefined8 error_message;\n  undefined4 *new_symbol_entry;\n  char *error_format;\n  undefined *aux_data;\n  uint aux_value;\n  long index;\n  int symbol_offset;\n  int array_size;\n  undefined4 symbol_value_low;\n  undefined4 symbol_value_high;\n  undefined4 local_var_a0;\n  undefined4 local_var_9c;\n  undefined symbol_name [30];\n  undefined2 symbol_type;\n  byte symbol_class;\n  byte local_byte_2;\n  undefined aux_buffer [10];\n  ushort symbol_value_size;\n  \n  array_size = 10;\n  index = 0;\n  length = *(long *)(param5 + 0x18);\n  data_array = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < length && (symbol_table[2] < symbol_table[1]))) {\n    symbol_offset = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbol_offset,symbol_name);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      initialized_data = bfd_errmsg(error_code);\n      error_format = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      error_message = dcgettext(0,error_format,5);\n      print_error_message_00119ed0(error_message,initialized_data);\n      free(data_array);\n      return 0;\n    }\n    symbol_count = symbol_table[3];\n    aux_data = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = symbol_count + 1 + (ulong)local_byte_2;\n    if (local_byte_2 != 0) {\n      aux_data = aux_buffer;\n      result = bfd_coff_get_auxent(param_1,symbol_offset,0,aux_data);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        initialized_data = bfd_errmsg(error_code);\n        error_format = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbol_class == 0x12) {\n      aux_value = (uint)symbol_value_size;\n      symbol_offset = (int)*(undefined8 *)(symbol_offset + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_offset + 0x20) + 0x30);\n    }\n    else {\n      if (symbol_class < 0x13) {\n        if ((symbol_class == 8) || (symbol_class == 0xb)) {\n          aux_value = 0;\n          symbol_offset = ((int)*(undefined8 *)(symbol_offset + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_offset + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbol_class == 0x66) break;\n      aux_value = 0;\n      symbol_offset = 0;\n    }\nLAB_0010e214:\n    error_message = parse_coff_type_0010dac0(param_1,symbol_table,param_3,symbol_count,symbol_type,aux_data,1);\n    initialized_data = *(undefined8 *)(symbol_offset + 8);\n    new_symbol_entry = (undefined4 *)xmalloc(0x20);\n    symbol_value_low = (undefined4)initialized_data;\n    symbol_value_high = (undefined4)((ulong)initialized_data >> 0x20);\n    local_var_a0 = (undefined4)error_message;\n    local_var_9c = (undefined4)((ulong)error_message >> 0x20);\n    *(undefined8 *)(new_symbol_entry + 5) = 0;\n    new_symbol_entry[6] = symbol_offset;\n    new_symbol_entry[7] = aux_value;\n    new_symbol_entry[4] = 0;\n    *new_symbol_entry = symbol_value_low;\n    new_symbol_entry[1] = symbol_value_high;\n    new_symbol_entry[2] = local_var_a0;\n    new_symbol_entry[3] = local_var_9c;\n    if (array_size <= (int)index + 1) {\n      array_size = array_size + 10;\n      data_array = (void *)xrealloc(data_array,(long)array_size << 3,new_symbol_entry,0,param_6);\n    }\n    *(undefined4 **)((long)data_array + index * 8) = new_symbol_entry;\n    index = index + 1;\n  }\n  *(undefined8 *)((long)data_array + (long)(int)index * 8) = 0;\n  initialized_data = initialize_data_00113da9(param4 == 8,*(undefined2 *)(param5 + 10),data_array);\n  return initialized_data;\n}\n\n",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_data_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n",
            "current_name": "extract_and_initialize_data_0010e07c",
            "entrypoint": "0x0010e07c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e07c": "extract_and_initialize_data_0010e07c",
                "__ptr": "data_array",
                "cVar4": "result",
                "iVar13": "symbol_offset",
                "iVar14": "array_size",
                "lVar1": "length",
                "lVar12": "index",
                "lVar2": "symbol_offset",
                "lVar3": "symbol_count",
                "local_56": "symbol_value_size",
                "local_60": "aux_buffer",
                "local_67": "local_byte_2",
                "local_68": "symbol_class",
                "local_6a": "symbol_type",
                "local_88": "symbol_name",
                "local_a8": "symbol_value_low",
                "param_2": "symbol_table",
                "param_4": "param4",
                "param_5": "param5",
                "pcVar9": "error_format",
                "puVar10": "aux_data",
                "puVar8": "new_symbol_entry",
                "uStack_9c": "local_var_9c",
                "uStack_a0": "local_var_a0",
                "uStack_a4": "symbol_value_high",
                "uVar11": "aux_value",
                "uVar5": "error_code",
                "uVar6": "initialized_data",
                "uVar7": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e2f0": {
            "additional_data": {
                "(**(code **)(*(long *)(*param_1 + 8) + 0x50))": {
                    "1": "execute_function1"
                },
                "(**(code **)(*(long *)(*param_1 + 8) + 0x68))": {
                    "1": "execute_function2"
                },
                "*(long *)(lVar1 + 0x18)": {
                    "1": "expr"
                },
                "*(long *)(lVar3 + 0x20)": {
                    "1": "string"
                },
                "FUN_0010e2f0": {
                    "1": "extract_and_print_string",
                    "21": "process_string"
                },
                "lVar1": {
                    "1": "length",
                    "3": "hash_entry",
                    "5": "temp1"
                },
                "lVar1 + 0x18": {
                    "1": "previous_expr"
                },
                "lVar3": {
                    "1": "word_hash",
                    "2": "hash_lookup_result",
                    "4": "hash_result",
                    "5": "temp2",
                    "6": "lookup_result"
                },
                "lVar3 + 0x20": {
                    "1": "string_expr"
                },
                "lVar7": {
                    "1": "found_index",
                    "2": "new_entry",
                    "3": "result",
                    "4": "temp3"
                },
                "lVar7 + 1 + sVar6": {
                    "1": "new_length"
                },
                "local_3c": {
                    "1": "temp_buffer",
                    "10": "local_array",
                    "2": "result_2",
                    "3": "local_var2",
                    "5": "temp_array"
                },
                "local_44": {
                    "1": "local_var",
                    "2": "local_data",
                    "3": "local_var1",
                    "5": "result"
                },
                "param_1": {
                    "1": "data",
                    "2": "input_data",
                    "23": "hash_table"
                },
                "param_1[5]": {
                    "1": "previous_string"
                },
                "param_1[6]": {
                    "1": "default_length"
                },
                "param_2": {
                    "1": "undefined_value_1",
                    "11": "flag",
                    "2": "param_flag",
                    "3": "undefined_param",
                    "4": "param"
                },
                "param_3": {
                    "1": "param_count",
                    "2": "count",
                    "3": "param_length",
                    "6": "size"
                },
                "param_4": {
                    "1": "param_value2",
                    "2": "param_4",
                    "3": "param_ptr",
                    "7": "data"
                },
                "param_5": {
                    "1": "param_string",
                    "10": "input_string",
                    "11": "string",
                    "2": "key",
                    "3": "str"
                },
                "sVar6": {
                    "1": "input_str_len",
                    "17": "string_length",
                    "2": "string_len",
                    "4": "str_length"
                },
                "uStack_3e": {
                    "1": "u_variable3",
                    "2": "stack_variable_3",
                    "4": "u_stack_3e",
                    "6": "stack_var3"
                },
                "uStack_3f": {
                    "1": "u_stack_param1",
                    "2": "stack_variable_2",
                    "4": "u_stack_3f",
                    "5": "stack_var2"
                },
                "uStack_40": {
                    "1": "param2_stack",
                    "2": "flag1",
                    "3": "u_stack_40",
                    "5": "stack_var1"
                },
                "uVar2": {
                    "1": "error_var",
                    "12": "error_code",
                    "5": "bfd_error",
                    "7": "error"
                },
                "uVar4": {
                    "1": "error_msg_var",
                    "14": "error_message",
                    "2": "bfd_error_msg",
                    "8": "error_msg"
                },
                "uVar5": {
                    "1": "localized_string",
                    "2": "lookup_failed_message",
                    "3": "error_string",
                    "4": "error_format"
                },
                "xrealloc": {
                    "1": "realloc_memory"
                }
            },
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "xrealloc",
                "dcgettext",
                "bfd_get_error",
                "strlen"
            ],
            "calling": [
                "FUN_0010e9a0",
                "FUN_0010edb4",
                "FUN_0010e439",
                "FUN_0010e8a9",
                "FUN_0010ebb0",
                "FUN_0010e7c2",
                "FUN_0010ed2c",
                "FUN_0011378f",
                "FUN_0010e5db",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_0010ec73",
                "FUN_0010eafe",
                "FUN_0010e6a8",
                "FUN_0010e453"
            ],
            "code": "\nundefined8\nprocess_string_0010e2f0(long *hash_table,undefined flag,int size,undefined8 data,char *string)\n\n{\n  long temp1;\n  undefined4 error_code;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_format;\n  size_t string_length;\n  long temp3;\n  undefined4 result;\n  undefined stack_var1;\n  undefined stack_var2;\n  undefined2 stack_var3;\n  undefined4 local_array [3];\n  \n  if (string == (char *)0x0) {\n    temp3 = 0;\n  }\n  else {\n    lookup_result = bfd_hash_lookup(hash_table + 7,string,1,1);\n    if (lookup_result == 0) {\n      error_code = bfd_get_error();\n      error_message = bfd_errmsg(error_code);\n      error_format = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_message_00119ed0(error_format,error_message);\n      return 0;\n    }\n    temp3 = *(long *)(lookup_result + 0x20);\n    if (temp3 == -1) {\n      temp3 = default_length;\n      temp1 = previous_string;\n      *(long *)(lookup_result + 0x20) = temp3;\n      if (temp1 == 0) {\n        hash_table[4] = lookup_result;\n      }\n      else {\n        *(long *)(temp1 + 0x18) = lookup_result;\n      }\n      previous_string = lookup_result;\n      string_length = strlen(string);\n      default_length = temp3 + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(temp3,&result);\n  stack_var2 = 0;\n  stack_var1 = flag;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)size,&stack_var3);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(data,local_array);\n  if ((ulong)hash_table[3] < hash_table[2] + 0xcU) {\n    hash_table[3] = hash_table[3] * 2;\n    temp3 = xrealloc(hash_table[1]);\n    hash_table[1] = temp3;\n  }\n  temp3 = hash_table[2];\n  lookup_result = hash_table[1];\n  *(ulong *)(lookup_result + temp3) = CONCAT26(stack_var3,CONCAT15(stack_var2,CONCAT14(stack_var1,result)));\n  *(undefined4 *)(lookup_result + 8 + temp3) = local_array[0];\n  hash_table[2] = hash_table[2] + 0xc;\n  return CONCAT71((int7)((ulong)temp3 >> 8),1);\n}\n\n",
            "current_name": "process_string_0010e2f0",
            "entrypoint": "0x0010e2f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "lVar1": "temp1",
                "lVar3": "lookup_result",
                "lVar7": "temp3",
                "local_3c": "local_array",
                "local_44": "result",
                "param_1": "hash_table",
                "param_1[5]": "previous_string",
                "param_1[6]": "default_length",
                "param_2": "flag",
                "param_3": "size",
                "param_4": "data",
                "param_5": "string",
                "sVar6": "string_length",
                "uStack_3e": "stack_var3",
                "uStack_3f": "stack_var2",
                "uStack_40": "stack_var1",
                "uVar2": "error_code",
                "uVar4": "error_message",
                "uVar5": "error_format",
                "xrealloc": "realloc_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e439": {
            "additional_data": {
                "0x210": {
                    "1": "string_offset",
                    "6": "offset"
                },
                "0x84": {
                    "1": "length",
                    "5": "string_length"
                },
                "FUN_0010e439": {
                    "1": "initialize_data",
                    "15": "set_param_and_process_string",
                    "2": "set_param_and_process",
                    "3": "set_string_and_process",
                    "4": "store_and_process_string"
                },
                "base_address": {
                    "1": "base"
                },
                "param_1": {
                    "1": "buffer",
                    "13": "base_address",
                    "3": "target_address",
                    "4": "data_address"
                },
                "param_1 + 0x210": {
                    "1": "address_to_set"
                },
                "param_2": {
                    "1": "new_param_value",
                    "2": "new_string",
                    "3": "value",
                    "4": "data",
                    "8": "new_value"
                },
                "param_3": {
                    "1": "string_length"
                },
                "param_4": {
                    "1": "param_4_unused"
                },
                "process_string_0010e2f0": {
                    "22": "process_string"
                },
                "string_address": {
                    "1": "new_string_address"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "code": "\nvoid set_param_and_process_string_0010e439(long base_address,undefined8 new_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = new_value;\n  process_string(base_address,0x84,0,0,new_value);\n  return;\n}\n\n",
            "current_name": "set_param_and_process_string_0010e439",
            "entrypoint": "0x0010e439",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e439": "set_param_and_process_string_0010e439",
                "param_1": "base_address",
                "param_2": "new_value",
                "process_string_0010e2f0": "process_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e453": {
            "additional_data": {
                "FUN_0010e453": {
                    "1": "process_data",
                    "18": "initialize_data_structure",
                    "2": "initialize_structure",
                    "4": "initialize_data",
                    "6": "initialize_and_process_data"
                },
                "__s": {
                    "1": "string",
                    "2": "new_string",
                    "23": "formatted_string"
                },
                "cVar2": {
                    "1": "result_char",
                    "19": "result",
                    "2": "char_var",
                    "3": "status"
                },
                "lVar1": {
                    "1": "array_element",
                    "2": "param3_value",
                    "3": "current_string_length",
                    "4": "length"
                },
                "lVar2": {
                    "1": "param_length"
                },
                "lVar5": {
                    "1": "str_length",
                    "11": "total_length",
                    "2": "counter",
                    "3": "formatted_string_length",
                    "4": "length"
                },
                "lVar7": {
                    "1": "current_offset",
                    "14": "offset",
                    "2": "string_array_index",
                    "4": "array_index",
                    "5": "index"
                },
                "param_1": {
                    "1": "input1",
                    "2": "data_structure_param",
                    "5": "param1"
                },
                "param_2": {
                    "1": "str",
                    "12": "input_string",
                    "2": "string_param",
                    "4": "param2",
                    "6": "string"
                },
                "param_3": {
                    "1": "str_list",
                    "11": "string_array",
                    "4": "param3"
                },
                "ppcVar6": {
                    "1": "current_array_ptr",
                    "16": "current_string",
                    "2": "array_ptr"
                },
                "sVar3": {
                    "1": "str_length",
                    "19": "string_length",
                    "2": "str_len",
                    "5": "length"
                },
                "uVar4": {
                    "1": "success_flag",
                    "12": "result",
                    "2": "success_indicator",
                    "4": "success"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 initialize_data_structure_0010e453(long param1,char *input_string,char **string_array)\n\n{\n  long length;\n  char result;\n  size_t string_length;\n  undefined2 *formatted_string;\n  undefined8 result;\n  long total_length;\n  char **current_string;\n  long offset;\n  \n  if (string_array == (char **)0x0) {\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      formatted_string = (undefined2 *)xmalloc(string_length + 10);\n      sprintf((char *)formatted_string,\"xe%s:\",input_string);\nLAB_0010e578:\n      result = initialize_data_structure_0010e453_00109b52(param1,formatted_string,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    result = 0;\n  }\n  else {\n    total_length = 10;\n    current_string = string_array;\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      total_length = string_length + 10;\n    }\n    for (; *current_string != (char *)0x0; current_string = current_string + 1) {\n      string_length = strlen(*current_string);\n      total_length = total_length + 0x14 + string_length;\n    }\n    formatted_string = (undefined2 *)xmalloc(total_length);\n    if (input_string == (char *)0x0) {\n      *formatted_string = 0x65;\n      total_length = 0;\n    }\n    else {\n      total_length = *(long *)(param1 + 0x68);\n      *(long *)(param1 + 0x68) = total_length + 1;\n      sprintf((char *)formatted_string,\"%s:T%ld=e\",input_string,total_length);\n    }\n    offset = 0;\n    while( true ) {\n      length = *(long *)((long)string_array + offset);\n      string_length = strlen((char *)formatted_string);\n      if (length == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formatted_string + string_length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_string + string_length) = 0x3b;\n    if (input_string == (char *)0x0) goto LAB_0010e578;\n    result = process_string_0010e2f0(param1,0x80,0,0,formatted_string);\n    if ((result == '\\0') || (result = initialize_data_structure_0010e453_00109cf4(param1,total_length,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formatted_string);\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_0010e453",
            "entrypoint": "0x0010e453",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e453": "initialize_data_structure_0010e453",
                "__s": "formatted_string",
                "cVar2": "result",
                "lVar1": "length",
                "lVar5": "total_length",
                "lVar7": "offset",
                "param_1": "param1",
                "param_2": "input_string",
                "param_3": "string_array",
                "ppcVar6": "current_string",
                "sVar3": "string_length",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e5db": {
            "additional_data": {
                "FUN_0010e5db": {
                    "1": "process_data_reverse",
                    "12": "process_data",
                    "5": "process_and_extract_data",
                    "8": "process_and_return_data"
                },
                "__ptr": {
                    "1": "buffer",
                    "15": "extracted_ptr",
                    "2": "ptr1",
                    "3": "ptr_1",
                    "7": "ptr"
                },
                "__s": {
                    "1": "str_ptr",
                    "18": "extracted_string",
                    "2": "str",
                    "5": "string"
                },
                "__s_00": {
                    "1": "new_str_ptr",
                    "19": "modified_string",
                    "2": "new_str",
                    "3": "formatted_string"
                },
                "auVar4": {
                    "1": "output",
                    "15": "result",
                    "2": "processed_data",
                    "5": "return_value"
                },
                "cVar1": {
                    "1": "processed_char",
                    "3": "char_result",
                    "4": "result_char",
                    "7": "result"
                },
                "iVar3": {
                    "1": "iteration",
                    "15": "iteration_count",
                    "3": "iteration_counter",
                    "5": "counter"
                },
                "in_R10": {
                    "1": "constant",
                    "2": "auxiliary_value",
                    "3": "extra_data",
                    "5": "additional_data"
                },
                "param_1": {
                    "1": "input_data",
                    "18": "data_ptr",
                    "2": "data_address",
                    "5": "data"
                },
                "param_2": {
                    "1": "iteration_limit",
                    "10": "num_iterations",
                    "2": "loop_count",
                    "3": "iteration_count",
                    "5": "iterations"
                },
                "sVar2": {
                    "25": "string_length",
                    "6": "str_length"
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "FUN_00109ed3",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] process_data_0010e5db(long data_ptr,int num_iterations)\n\n{\n  char result;\n  void *extracted_ptr;\n  char *extracted_string;\n  size_t string_length;\n  char *modified_string;\n  ulong additional_data;\n  int iteration_count;\n  undefined result [16];\n  \n  iteration_count = 0;\n  do {\n    if (num_iterations <= iteration_count) {\n      result = process_data_0010e5db_00109ed3(data_ptr,0x66,0,data_ptr + 0x188,data_ptr + 400,additional_data);\n      return result;\n    }\n    if (*(char *)(*(long *)(data_ptr + 0x60) + 0x1c) == '\\0') {\n      extracted_ptr = (void *)extract_and_free_ptr_00109b2f(data_ptr);\n      free(extracted_ptr);\n    }\n    else {\n      extracted_string = (char *)extract_and_free_ptr_00109b2f(data_ptr);\n      string_length = strlen(extracted_string);\n      modified_string = (char *)xmalloc(string_length + 3);\n      sprintf(modified_string,\":t%s\",extracted_string);\n      free(extracted_string);\n      result = process_string_0010e2f0(data_ptr,0x80,0,0,modified_string);\n      if (result == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = additional_data;\n        return result << 0x40;\n      }\n      free(modified_string);\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_data_0010e5db",
            "entrypoint": "0x0010e5db",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "__ptr": "extracted_ptr",
                "__s": "extracted_string",
                "__s_00": "modified_string",
                "auVar4": "result",
                "cVar1": "result",
                "iVar3": "iteration_count",
                "in_R10": "additional_data",
                "param_1": "data_ptr",
                "param_2": "num_iterations",
                "sVar2": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e6a8": {
            "additional_data": {
                "FUN_0010e6a8": {
                    "1": "parse_and_process_string",
                    "18": "process_and_store_string",
                    "2": "extract_and_process_string",
                    "3": "process_string"
                },
                "__s": {
                    "1": "retrieved_string",
                    "29": "extracted_string"
                },
                "__s_00": {
                    "1": "result_string",
                    "2": "final_string",
                    "6": "combined_string",
                    "8": "processed_string",
                    "9": "formatted_string"
                },
                "auVar10": {
                    "1": "output_data",
                    "13": "return_value",
                    "3": "output",
                    "6": "result"
                },
                "bfd_errmsg": {
                    "1": "error_message"
                },
                "bfd_get_error": {
                    "1": "get_error"
                },
                "bfd_hash_lookup": {
                    "1": "hash_lookup"
                },
                "lVar5": {
                    "1": "found_hash",
                    "23": "lookup_result",
                    "4": "hash_lookup_result"
                },
                "lVar8": {
                    "1": "string_number",
                    "10": "count",
                    "19": "counter"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "data_ptr",
                    "3": "hash_table",
                    "5": "data"
                },
                "param_2": {
                    "1": "command",
                    "19": "input_string",
                    "2": "prefix",
                    "4": "key"
                },
                "param_3": {
                    "1": "arg3",
                    "12": "param_3",
                    "2": "unused_param",
                    "4": "param3",
                    "5": "arg1"
                },
                "param_4": {
                    "1": "ptr2",
                    "12": "param_4",
                    "2": "var2",
                    "4": "param4",
                    "5": "arg2"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error"
                },
                "sVar3": {
                    "1": "command_length",
                    "12": "input_string_length",
                    "2": "prefix_length",
                    "3": "string_length",
                    "4": "key_length",
                    "5": "input_length"
                },
                "sVar4": {
                    "1": "extracted_string_len",
                    "21": "extracted_string_length",
                    "5": "extracted_length"
                },
                "uVar1": {
                    "1": "string_result",
                    "2": "string_process_result",
                    "6": "process_result",
                    "9": "result"
                },
                "uVar2": {
                    "1": "data",
                    "5": "value",
                    "6": "extracted_value"
                },
                "uVar6": {
                    "1": "bfd_errmsg_result",
                    "2": "bfd_error_msg",
                    "5": "error_msg",
                    "8": "error_message"
                },
                "uVar7": {
                    "1": "error_msg_format",
                    "2": "lookup_failed_message",
                    "4": "error_format"
                },
                "uVar9": {
                    "1": "hash_lookup_result",
                    "10": "result",
                    "2": "process_string_result",
                    "8": "return_value"
                }
            },
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "bfd_hash_lookup",
                "xmalloc",
                "dcgettext",
                "bfd_get_error",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] process_and_store_string_0010e6a8(long data,char *input_string,undefined8 param_3,undefined8 param_4)\n\n{\n  uint result;\n  undefined4 error_code;\n  char *extracted_string;\n  size_t input_string_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  long lookup_result;\n  undefined8 bfd_errmsg;\n  undefined8 error_format;\n  long counter;\n  ulong result;\n  undefined return_value [16];\n  \n  counter = *(long *)(*(long *)(data + 0x60) + 0x10);\n  error_code = *(undefined4 *)(*(long *)(data + 0x60) + 0x18);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  input_string_length = strlen(input_string);\n  extracted_string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(input_string_length + 0x14 + extracted_string_length);\n  if (counter < 1) {\n    counter = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = counter + 1;\n    sprintf(formatted_string,\"%s:t%ld=%s\",input_string,counter,extracted_string);\n  }\n  else {\n    sprintf(formatted_string,\"%s:t%s\",input_string,extracted_string);\n  }\n  free(extracted_string);\n  result = process_string_0010e2f0(data,0x80,0,0,formatted_string);\n  result = (ulong)result;\n  if ((char)result != '\\0') {\n    free(formatted_string);\n    lookup_result = bfd_hash_lookup(data + 0x1b8,input_string,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = counter;\n      *(undefined4 *)(lookup_result + 0x28) = error_code;\n      goto LAB_0010e7b3;\n    }\n    error_code = bfd_get_error();\n    error_message = error_message(error_code);\n    error_format = dcgettext(0,\"string_bfd_hash_lookup failed: %s\",5);\n    print_error(error_format,error_message);\n  }\n  result = 0;\nLAB_0010e7b3:\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "process_and_store_string_0010e6a8",
            "entrypoint": "0x0010e6a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e6a8": "process_and_store_string_0010e6a8",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "auVar10": "return_value",
                "bfd_errmsg": "error_message",
                "bfd_get_error": "get_error",
                "bfd_hash_lookup": "hash_lookup",
                "lVar5": "lookup_result",
                "lVar8": "counter",
                "param_1": "data",
                "param_2": "input_string",
                "print_error_message_00119ed0": "print_error",
                "sVar3": "input_string_length",
                "sVar4": "extracted_string_length",
                "uVar1": "result",
                "uVar2": "error_code",
                "uVar6": "error_message",
                "uVar7": "error_format",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e7c2": {
            "additional_data": {
                "FUN_0010e7c2": {
                    "1": "build_updated_string",
                    "2": "process_and_free_string",
                    "4": "format_and_process_string",
                    "7": "process_and_format_string"
                },
                "__s": {
                    "1": "extracted_data",
                    "28": "extracted_string"
                },
                "__s_00": {
                    "1": "composed_string",
                    "11": "formatted_string",
                    "3": "concatenated_string",
                    "4": "new_string",
                    "6": "combined_string"
                },
                "auVar3": {
                    "1": "result_data",
                    "25": "result"
                },
                "param_1": {
                    "1": "input_parameter",
                    "10": "input_param",
                    "3": "input",
                    "5": "input_value",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "substring",
                    "12": "prefix",
                    "5": "prefix_string",
                    "8": "input_string"
                },
                "param_3": {
                    "1": "input_3",
                    "19": "unused_param",
                    "2": "unused",
                    "3": "unused_parameter"
                },
                "param_4": {
                    "1": "result_ptr",
                    "2": "output_ptr",
                    "9": "output_param"
                },
                "sVar1": {
                    "1": "message_length",
                    "14": "prefix_length",
                    "2": "input_str_len",
                    "3": "input_string_length",
                    "4": "prefix_len"
                },
                "sVar2": {
                    "1": "extracted_ptr_length",
                    "17": "extracted_string_length",
                    "2": "extracted_string_len",
                    "4": "extracted_str_len"
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] process_and_format_string_0010e7c2(undefined8 input_param,char *prefix,undefined8 unused_param,undefined8 output_param)\n\n{\n  char *extracted_string;\n  size_t prefix_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  prefix_length = strlen(prefix);\n  extracted_string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(prefix_length + 3 + extracted_string_length);\n  sprintf(formatted_string,\"%s:T%s\",prefix,extracted_string);\n  free(extracted_string);\n  result._0_4_ = process_string_0010e2f0(input_param,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = output_param;\n  return result;\n}\n\n",
            "current_name": "process_and_format_string_0010e7c2",
            "entrypoint": "0x0010e7c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e7c2": "process_and_format_string_0010e7c2",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "auVar3": "result",
                "param_1": "input_param",
                "param_2": "prefix",
                "param_3": "unused_param",
                "param_4": "output_param",
                "sVar1": "prefix_length",
                "sVar2": "extracted_string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e842": {
            "additional_data": {
                "DAT_": {
                    "1": ""
                },
                "FUN_0010e842": {
                    "1": "reverse_and_format_string",
                    "10": "process_and_format_string",
                    "7": "format_and_process_string"
                },
                "PTR_": {
                    "1": ""
                },
                "__s": {
                    "1": "new_string",
                    "2": "processed_string",
                    "20": "formatted_string",
                    "6": "allocated_string"
                },
                "auVar2": {
                    "1": "return_value",
                    "2": "result_data",
                    "26": "result"
                },
                "param_1": {
                    "1": "data",
                    "12": "input_data",
                    "2": "input_param",
                    "7": "input_value",
                    "8": "input"
                },
                "param_2": {
                    "1": "string_data",
                    "12": "input_string",
                    "2": "str",
                    "3": "original_string",
                    "5": "string"
                },
                "param_3": {
                    "1": "input_value",
                    "2": "integer_param",
                    "3": "input_number",
                    "7": "integer_value"
                },
                "param_4": {
                    "1": "output_var",
                    "2": "additional_info",
                    "3": "output_param",
                    "4": "output_data",
                    "6": "output"
                },
                "process_string_0010e2f0": {
                    "2": "process_string"
                },
                "sVar1": {
                    "1": "input_length",
                    "2": "str_length",
                    "25": "string_length"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] process_and_format_string_0010e842(undefined8 input_data,char *input_string,undefined8 integer_value,undefined8 output)\n\n{\n  size_t string_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  string_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",input_string,integer_value);\n  result._0_4_ = process_string(input_data,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = output;\n  return result;\n}\n\n",
            "current_name": "process_and_format_string_0010e842",
            "entrypoint": "0x0010e842",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e842": "process_and_format_string_0010e842",
                "__s": "formatted_string",
                "auVar2": "result",
                "param_1": "input_data",
                "param_2": "input_string",
                "param_3": "integer_value",
                "param_4": "output",
                "process_string_0010e2f0": "process_string",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e8a9": {
            "additional_data": {
                "FUN_0010e8a9": {
                    "1": "convert_and_process_string",
                    "26": "process_and_free_string"
                },
                "__s": {
                    "1": "new_str",
                    "2": "modified_string",
                    "3": "combined_string",
                    "4": "new_string",
                    "5": "processed_string",
                    "6": "formatted_string",
                    "7": "allocated_string"
                },
                "param_1": {
                    "1": "data",
                    "14": "input_string",
                    "2": "input1"
                },
                "param_2": {
                    "1": "buffer",
                    "2": "input2",
                    "3": "output_string"
                },
                "param_3": {
                    "1": "str",
                    "2": "suffix",
                    "4": "additional_info",
                    "5": "input_string",
                    "8": "additional_string"
                },
                "sVar2": {
                    "1": "info_length",
                    "2": "input_length",
                    "3": "additional_string_length",
                    "7": "string_length"
                },
                "uVar1": {
                    "2": "return_value",
                    "28": "result"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_and_free_string_0010e8a9(undefined8 input_string,undefined8 output_string,char *additional_string)\n\n{\n  undefined4 result;\n  size_t string_length;\n  char *allocated_string;\n  \n  string_length = strlen(additional_string);\n  allocated_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(allocated_string,\"%s:c=f%g\",input_string,additional_string);\n  result = process_string_0010e2f0(output_string,0x80,0,0,allocated_string);\n  if ((char)result != '\\0') {\n    free(allocated_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_and_free_string_0010e8a9",
            "entrypoint": "0x0010e8a9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e8a9": "process_and_free_string_0010e8a9",
                "__s": "allocated_string",
                "param_1": "input_string",
                "param_2": "output_string",
                "param_3": "additional_string",
                "sVar2": "string_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e918": {
            "additional_data": {
                "FUN_0010e918": {
                    "1": "process_string_with_params",
                    "2": "process_and_send",
                    "3": "process_and_format_string",
                    "7": "process_and_send_data",
                    "8": "process_and_free_string"
                },
                "__s": {
                    "1": "extracted_str",
                    "23": "extracted_string",
                    "6": "extracted_data"
                },
                "__s_00": {
                    "1": "composed_message",
                    "14": "formatted_string",
                    "2": "new_string",
                    "3": "formatted_data",
                    "4": "combined_string"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "arg1",
                    "3": "input",
                    "4": "socket",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "data_string",
                    "2": "string1",
                    "3": "data",
                    "4": "message",
                    "5": "input_string"
                },
                "param_3": {
                    "1": "input_value",
                    "2": "data_length",
                    "4": "suffix"
                },
                "sVar2": {
                    "1": "string_1_length",
                    "2": "prefix_len",
                    "3": "data_length",
                    "4": "message_length",
                    "5": "prefix_length"
                },
                "sVar3": {
                    "1": "extracted_string_len",
                    "16": "extracted_string_length",
                    "2": "length_extracted_string",
                    "3": "extracted_length",
                    "4": "extracted_data_length"
                },
                "uVar1": {
                    "1": "result_code",
                    "19": "result",
                    "2": "return_value"
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_and_free_string_0010e918(undefined8 input_param,char *input_string,undefined8 suffix)\n\n{\n  undefined4 result;\n  char *extracted_string;\n  size_t prefix_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  \n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  prefix_length = strlen(input_string);\n  extracted_string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(prefix_length + 0x14 + extracted_string_length);\n  sprintf(formatted_string,\"%s:c=e%s,%ld\",input_string,extracted_string,suffix);\n  free(extracted_string);\n  result = process_string_0010e2f0(input_param,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_and_free_string_0010e918",
            "entrypoint": "0x0010e918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e918": "process_and_free_string_0010e918",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "param_1": "input_param",
                "param_2": "input_string",
                "param_3": "suffix",
                "sVar2": "prefix_length",
                "sVar3": "extracted_string_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e9a0": {
            "additional_data": {
                "FUN_0010e9a0": {
                    "1": "process_data",
                    "2": "process_and_free_string",
                    "6": "format_and_process_string"
                },
                "__s": {
                    "1": "extracted_ptr",
                    "2": "extracted_str",
                    "23": "extracted_string",
                    "4": "extracted_data"
                },
                "__s_00": {
                    "1": "formatted_str",
                    "11": "formatted_string",
                    "2": "new_string",
                    "3": "modified_data",
                    "8": "modified_string"
                },
                "__s_01": {
                    "1": "generated_string",
                    "19": "final_string",
                    "2": "formatted_string",
                    "3": "result_string"
                },
                "_sch_istable": {
                    "1": "character_table"
                },
                "abort": {
                    "1": "abort_execution"
                },
                "free": {
                    "1": "free_memory"
                },
                "lVar1": {
                    "1": "index",
                    "22": "counter",
                    "7": "count"
                },
                "param_1": {
                    "1": "input_length",
                    "2": "input_data",
                    "3": "data",
                    "4": "input_ptr",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "str",
                    "11": "prefix",
                    "2": "message",
                    "9": "input_string"
                },
                "param_3": {
                    "1": "message_type",
                    "3": "string_type",
                    "5": "format_type",
                    "8": "option",
                    "9": "type"
                },
                "param_4": {
                    "1": "flags",
                    "2": "ptr",
                    "3": "data",
                    "4": "param",
                    "5": "additional_data"
                },
                "pcVar5": {
                    "1": "char_indicator",
                    "2": "format_symbol",
                    "3": "symbol",
                    "4": "type_symbol"
                },
                "process_string_0010e2f0": {
                    "3": "process_string"
                },
                "sVar3": {
                    "1": "message_length",
                    "3": "prefix_len",
                    "4": "input_string_length",
                    "5": "input_length",
                    "6": "prefix_length"
                },
                "sVar4": {
                    "1": "length2",
                    "2": "extracted_data_length",
                    "3": "extracted_str_len",
                    "7": "extracted_length",
                    "9": "extracted_string_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "1": "string_length"
                },
                "uVar2": {
                    "22": "result",
                    "5": "return_value"
                },
                "uVar6": {
                    "1": "format_value",
                    "10": "flag",
                    "2": "flags",
                    "3": "modifier"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_string_0010e9a0(long input_value,char *prefix,undefined4 type,undefined8 additional_data)\n\n{\n  long counter;\n  undefined4 result;\n  byte *extracted_string;\n  byte *formatted_string;\n  size_t prefix_length;\n  size_t extracted_strlen;\n  char *final_string;\n  char *type_symbol;\n  undefined8 flag;\n  \n  extracted_string = (byte *)extract_and_free_ptr_00109b2f();\n  switch(type) {\n  case 1:\n    type_symbol = \"G\";\n    flag = 0x20;\n    break;\n  case 2:\n    type_symbol = \"S\";\n    flag = 0x26;\n    break;\n  case 3:\n    type_symbol = \"V\";\n    flag = 0x26;\n    break;\n  case 4:\n    type_symbol = \"\";\n    flag = 0x80;\n    if (((&character_table)[(ulong)*extracted_string * 2] & 4) == 0) {\n      counter = *(long *)(input_value + 0x68);\n      *(long *)(input_value + 0x68) = counter + 1;\n      prefix_length = strlen((char *)extracted_string);\n      formatted_string = (byte *)xmalloc(prefix_length + 0x14);\n      sprintf((char *)formatted_string,\"%ld=%s\",counter,extracted_string);\n      free(extracted_string);\n      extracted_string = formatted_string;\n    }\n    break;\n  case 5:\n    type_symbol = \"r\";\n    flag = 0x40;\n    break;\n  default:\n                    \n    abort_execution();\n  }\n  prefix_length = strlen(prefix);\n  extracted_strlen = strlen((char *)extracted_string);\n  final_string = (char *)xmalloc(prefix_length + 3 + extracted_strlen);\n  sprintf(final_string,\"%s:%s%s\",prefix,type_symbol,extracted_string);\n  free(extracted_string);\n  result = process_string_0010e9a0(input_value,flag,0,additional_data,final_string);\n  if ((char)result != '\\0') {\n    free(final_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_string_0010e9a0",
            "entrypoint": "0x0010e9a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e9a0": "process_string_0010e9a0",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "__s_01": "final_string",
                "_sch_istable": "character_table",
                "abort": "abort_execution",
                "free": "deallocate_memory",
                "lVar1": "counter",
                "param_1": "input_value",
                "param_2": "prefix",
                "param_3": "type",
                "param_4": "additional_data",
                "pcVar5": "type_symbol",
                "process_string_0010e2f0": "process_string",
                "sVar3": "prefix_length",
                "sVar4": "extracted_string_length",
                "sprintf": "format_string",
                "strlen": "string_length",
                "uVar2": "result",
                "uVar6": "flag",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010eafe": {
            "additional_data": {
                "FUN_0010eafe": {
                    "1": "process_and_return",
                    "10": "process_string",
                    "2": "process_and_send_data",
                    "5": "process_and_free_string"
                },
                "__s": {
                    "1": "extracted_text",
                    "30": "extracted_string"
                },
                "__s_00": {
                    "1": "modified_text",
                    "2": "final_string",
                    "3": "combined_string",
                    "6": "formatted_string",
                    "7": "new_string"
                },
                "param_1": {
                    "1": "base_address",
                    "2": "context",
                    "3": "data_struct",
                    "6": "input"
                },
                "param_2": {
                    "1": "original_string",
                    "2": "string1",
                    "22": "input_string",
                    "3": "prefix"
                },
                "param_3": {
                    "1": "suffix",
                    "2": "character",
                    "27": "flag"
                },
                "sVar2": {
                    "1": "source_length",
                    "10": "input_length",
                    "2": "length1",
                    "3": "prefix_length",
                    "4": "input_len",
                    "7": "input_string_length"
                },
                "sVar3": {
                    "1": "extracted_str_len",
                    "10": "extracted_string_length",
                    "2": "length2",
                    "5": "extracted_len"
                },
                "uVar1": {
                    "1": "return_value",
                    "23": "result"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_string_0010eafe(long input,char *input_string,char flag)\n\n{\n  undefined4 result;\n  char *extracted_string;\n  size_t input_length;\n  size_t extracted_length;\n  char *processed_string;\n  \n  if ((*(int *)(input + 0x1f8) == 0) && (*(long *)(input + 0x1e8) == -1)) {\n    extracted_string = (char *)extract_and_free_ptr_00109b2f();\n    input_length = strlen(input_string);\n    extracted_length = strlen(extracted_string);\n    processed_string = (char *)xmalloc(input_length + 3 + extracted_length);\n    sprintf(processed_string,\"%s:%c%s\",input_string,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),extracted_string);\n    *(undefined8 *)(input + 0x1e8) = *(undefined8 *)(input + 0x10);\n    result = process_string_0010eafe_0010e2f0(input,0x24,0,0,processed_string);\n    if ((char)result != '\\0') {\n      free(processed_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_string_0010eafe",
            "entrypoint": "0x0010eafe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010eafe": "process_string_0010eafe",
                "__s": "extracted_string",
                "__s_00": "processed_string",
                "param_1": "input",
                "param_2": "input_string",
                "param_3": "flag",
                "sVar2": "input_length",
                "sVar3": "extracted_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ebb0": {
            "additional_data": {
                "FUN_0010ebb0": {
                    "1": "process_and_print",
                    "10": "process_and_free_string",
                    "2": "process_and_send_message",
                    "8": "process_string"
                },
                "__s": {
                    "1": "extracted_text",
                    "27": "extracted_string",
                    "3": "extracted_data"
                },
                "__s_00": {
                    "1": "final_string",
                    "2": "new_string",
                    "3": "modified_string",
                    "4": "processed_string",
                    "5": "combined_string",
                    "6": "formatted_string"
                },
                "cVar1": {
                    "1": "char_val",
                    "15": "character",
                    "2": "char_var",
                    "4": "char_value"
                },
                "param_1": {
                    "1": "input_param1",
                    "2": "arg1",
                    "3": "data",
                    "4": "input1",
                    "6": "input_1"
                },
                "param_2": {
                    "1": "file_name",
                    "3": "input2",
                    "4": "input_string",
                    "5": "prefix",
                    "6": "input_2"
                },
                "param_3": {
                    "1": "size_param",
                    "3": "string_length",
                    "7": "input_length",
                    "8": "length"
                },
                "param_4": {
                    "1": "input2",
                    "2": "input4",
                    "4": "input_4"
                },
                "sVar4": {
                    "1": "file_name_length",
                    "2": "message_length",
                    "3": "input_string_length",
                    "4": "input_2_length",
                    "5": "prefix_length"
                },
                "sVar5": {
                    "1": "extracted_string_len",
                    "21": "extracted_string_length",
                    "3": "extracted_data_length",
                    "4": "extracted_length"
                },
                "uVar2": {
                    "1": "text_length_minus_1",
                    "2": "updated_length",
                    "3": "size_minus_one",
                    "4": "remaining_length",
                    "6": "adjusted_length"
                },
                "uVar3": {
                    "1": "return_status",
                    "27": "result"
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_and_free_string_0010ebb0(undefined8 input_1,char *input_2,int length,undefined8 input_4)\n\n{\n  char character;\n  uint adjusted_length;\n  undefined4 result;\n  char *extracted_string;\n  size_t prefix_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  \n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  adjusted_length = length - 1;\n  if (adjusted_length < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)adjusted_length * 4);\n    character = (&DAT_00121334)[adjusted_length];\n    prefix_length = strlen(input_2);\n    extracted_string_length = strlen(extracted_string);\n    formatted_string = (char *)xmalloc(prefix_length + 3 + extracted_string_length);\n    sprintf(formatted_string,\"%s:%c%s\",input_2,(ulong)(uint)(int)character,extracted_string);\n    free(extracted_string);\n    result = process_string_0010e2f0(input_1,result,0,input_4,formatted_string);\n    if ((char)result != '\\0') {\n      free(formatted_string);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "current_name": "process_and_free_string_0010ebb0",
            "entrypoint": "0x0010ebb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ebb0": "process_and_free_string_0010ebb0",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "cVar1": "character",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "length",
                "param_4": "input_4",
                "sVar4": "prefix_length",
                "sVar5": "extracted_string_length",
                "uVar2": "adjusted_length",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ec73": {
            "additional_data": {
                "FUN_0010ec73": {
                    "1": "process_task",
                    "10": "process_data",
                    "2": "process_parameters",
                    "3": "process_and_update_data",
                    "9": "process_param"
                },
                "cVar2": {
                    "1": "flag",
                    "28": "result"
                },
                "data_array": {
                    "1": "array"
                },
                "iVar1": {
                    "2": "increment",
                    "20": "counter",
                    "9": "count"
                },
                "input_value": {
                    "1": "value"
                },
                "param_1": {
                    "1": "array_pointer",
                    "2": "param_list",
                    "3": "param_array",
                    "5": "array",
                    "6": "data",
                    "7": "data_array"
                },
                "param_1[0x3c]": {
                    "1": "param_list[0x3c]"
                },
                "param_1[0x3d]": {
                    "1": "params[61]"
                },
                "param_1[0x3f]": {
                    "1": "param_list[0x3f]"
                },
                "param_1[0x40]": {
                    "1": "param_list[0x40]"
                },
                "param_1[0x41]": {
                    "1": "param_list[0x41]"
                },
                "param_2": {
                    "1": "param",
                    "16": "value",
                    "2": "data",
                    "9": "input_value"
                },
                "param_3": {
                    "1": "unused_1",
                    "10": "arg1",
                    "2": "param3",
                    "3": "arg3",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "param_b",
                    "10": "arg2",
                    "2": "param4",
                    "3": "arg4",
                    "6": "param_4"
                },
                "param_5": {
                    "1": "unused3",
                    "10": "arg3",
                    "2": "param5",
                    "3": "arg5",
                    "6": "param_5"
                },
                "param_6": {
                    "1": "data4",
                    "10": "arg4",
                    "2": "param6",
                    "3": "arg6",
                    "6": "param_6"
                },
                "process_string_0010e2f0": {
                    "5": "process_string"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined process_data_0010ec73(long *data_array,long value,undefined8 arg1,undefined8 arg2,\n                      undefined8 arg3,undefined8 arg4)\n\n{\n  int counter;\n  char result;\n  \n  if (params[60] != -1) {\n    (**(code **)(*(long *)(*data_array + 8) + 0x50))(value,data_array[1] + 8 + params[60]);\n    params[60] = -1;\n  }\n  if (params[61] != -1) {\n    (**(code **)(*(long *)(*data_array + 8) + 0x50))(value,data_array[1] + 8 + params[61]);\n    params[61] = -1;\n  }\n  counter = *(int *)(data_array + 0x3f);\n  *(int *)(data_array + 0x3f) = counter + 1;\n  if (counter == 0) {\n    params[64] = value;\n  }\n  else {\n    if ((params[65] != -1) &&\n       (result = process_string(data_array,0xc0,0,params[65],0,arg4,arg2), result == '\\0')) {\n      return 0;\n    }\n    params[65] = value - params[64];\n  }\n  return 1;\n}\n\n",
            "current_name": "process_data_0010ec73",
            "entrypoint": "0x0010ec73",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "cVar2": "result",
                "iVar1": "counter",
                "param_1": "data_array",
                "param_1[0x3c]": "params[60]",
                "param_1[0x3d]": "params[61]",
                "param_1[0x40]": "params[64]",
                "param_1[0x41]": "params[65]",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "arg3",
                "param_6": "arg4",
                "process_string_0010e2f0": "process_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ed2c": {
            "additional_data": {
                "FUN_0010ed2c": {
                    "1": "update_max_size",
                    "2": "update_param_and_process",
                    "4": "process_data",
                    "6": "update_max_value"
                },
                "auVar4": {
                    "1": "result_container",
                    "12": "result",
                    "2": "processed_result",
                    "3": "result_array",
                    "5": "output"
                },
                "cVar1": {
                    "1": "is_invalid",
                    "13": "result",
                    "2": "is_successful",
                    "3": "success_flag",
                    "5": "success"
                },
                "extraout_RDX": {
                    "1": "previous_value2"
                },
                "iVar2": {
                    "1": "iteration_count",
                    "12": "count",
                    "13": "counter"
                },
                "in_R10": {
                    "1": "temp_variable",
                    "2": "extra_data",
                    "4": "extra_param",
                    "5": "additional_data"
                },
                "param_1": {
                    "1": "file_data",
                    "5": "data_ptr",
                    "7": "data_struct",
                    "9": "data"
                },
                "param_2": {
                    "1": "new_max",
                    "14": "new_value",
                    "2": "size",
                    "8": "new_size"
                },
                "param_3": {
                    "1": "input_data",
                    "2": "previous_value",
                    "3": "extra_data",
                    "5": "extra_param"
                },
                "uVar3": {
                    "1": "flags",
                    "2": "updated_size",
                    "6": "result",
                    "9": "updated_value"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined  [16] update_max_value_0010ed2c(long data,ulong new_value,undefined8 extra_param)\n\n{\n  char result;\n  int counter;\n  undefined8 extraout_rdx;\n  ulong updated_value;\n  undefined8 additional_data;\n  undefined result [16];\n  \n  if (*(ulong *)(data + 0x1f0) < new_value) {\n    *(ulong *)(data + 0x1f0) = new_value;\n  }\n  if (*(long *)(data + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(data + 0x1f8) != 0) {\n      counter = *(int *)(data + 0x1f8) + -1;\n      updated_value = CONCAT71((int7)((ulong)extra_param >> 8),1);\n      *(int *)(data + 0x1f8) = counter;\n      if (counter != 0) {\n        result = process_string_0010e2f0(data,0xe0,0,new_value - *(long *)(data + 0x200),0,additional_data);\n        return result;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    result = process_string_0010e2f0(data,0xc0,0,*(long *)(data + 0x208),0);\n    if (result != '\\0') {\n      *(undefined8 *)(data + 0x208) = 0xffffffffffffffff;\n      extra_param = extraout_rdx;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_value = 0;\nLAB_0010edae:\n  result._0_8_ = updated_value & 0xffffffff;\n  result._8_8_ = additional_data;\n  return result;\n}\n\n",
            "current_name": "update_max_value_0010ed2c",
            "entrypoint": "0x0010ed2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ed2c": "update_max_value_0010ed2c",
                "auVar4": "result",
                "cVar1": "result",
                "extraout_RDX": "extraout_rdx",
                "iVar2": "counter",
                "in_R10": "additional_data",
                "param_1": "data",
                "param_2": "new_value",
                "param_3": "extra_param",
                "uVar3": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010edb4": {
            "additional_data": {
                "*(long *)(param_1 + 0x210)": {
                    "1": "file_buffer"
                },
                "*(ulong *)(param_1 + 0x1f0)": {
                    "1": "max_file_size"
                },
                "0x1f0": {
                    "1": "max_length"
                },
                "0x200": {
                    "1": "curr_offset"
                },
                "0x210": {
                    "1": "stored_filename"
                },
                "FUN_0010edb4": {
                    "1": "update_file_metadata",
                    "2": "process_file_data",
                    "21": "process_file",
                    "3": "update_file_information"
                },
                "cVar1": {
                    "1": "check_result",
                    "12": "result",
                    "2": "success_flag",
                    "5": "success"
                },
                "filename_cmp": {
                    "1": "compare_filenames"
                },
                "iVar2": {
                    "14": "filename_comparison",
                    "5": "filename_comparison_result",
                    "6": "cmp_result"
                },
                "in_R10": {
                    "1": "param_c",
                    "2": "unused_variable",
                    "4": "additional_param",
                    "6": "extra_param"
                },
                "param_1": {
                    "1": "input_parameter",
                    "2": "file_data_ptr",
                    "3": "file",
                    "7": "file_info",
                    "8": "file_data"
                },
                "param_2": {
                    "2": "new_filename",
                    "24": "filename",
                    "5": "file_name"
                },
                "param_3": {
                    "1": "file_permissions",
                    "2": "option",
                    "3": "flags",
                    "4": "file_type",
                    "9": "flag"
                },
                "param_4": {
                    "1": "param_b",
                    "18": "file_size",
                    "3": "max_size",
                    "6": "size"
                },
                "process_string_0010e2f0": {
                    "1": "process_string"
                },
                "uVar3": {
                    "1": "processing_result",
                    "14": "result",
                    "5": "process_result",
                    "6": "string_processing_result"
                }
            },
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00112502"
            ],
            "code": "\nundefined8 process_file_0010edb4(long file_data,undefined8 filename,undefined4 flag,ulong file_size)\n\n{\n  char result;\n  int filename_comparison;\n  undefined8 result;\n  undefined8 extra_param;\n  \n  if (*(long *)(file_data + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_data + 0x1f0) < file_size) {\n    *(ulong *)(file_data + 0x1f0) = file_size;\n  }\n  filename_comparison = filename_cmp(filename);\n  if (filename_comparison != 0) {\n    result = process_string(file_data,0x84,0,file_size,filename);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_data + 0x210) = filename;\n  }\n  result = process_string(file_data,0x44,flag,file_size - *(long *)(file_data + 0x200),0,extra_param);\n  return result;\n}\n\n",
            "current_name": "process_file_0010edb4",
            "entrypoint": "0x0010edb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010edb4": "process_file_0010edb4",
                "cVar1": "result",
                "filename_cmp": "compare_filenames",
                "iVar2": "filename_comparison",
                "in_R10": "extra_param",
                "param_1": "file_data",
                "param_2": "filename",
                "param_3": "flag",
                "param_4": "file_size",
                "process_string_0010e2f0": "process_string",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ee3f": {
            "called": [
                "fprintf",
                "concat",
                "strncmp",
                "FUN_0010d21c",
                "sprintf",
                "strstr",
                "xmalloc",
                "FUN_00113e5e",
                "FUN_00108e76",
                "strcmp",
                "FUN_00113b4a",
                "FUN_001129f4",
                "FUN_00113fb0",
                "FUN_00113d3a",
                "FUN_00113b98",
                "strcat",
                "FUN_00113cb9",
                "FUN_0010d559",
                "FUN_00113bfa",
                "FUN_00108fb9",
                "xrealloc",
                "FUN_00109a32",
                "FUN_0010911f",
                "strspn",
                "strtol",
                "FUN_0010ee3f",
                "FUN_00108fe8",
                "strlen",
                "FUN_0010d882",
                "FUN_0010b6ea",
                "FUN_00109a0b",
                "FUN_00113df2",
                "FUN_0010914e",
                "strcpy",
                "FUN_00113c43",
                "free",
                "malloc",
                "FUN_00113da9",
                "cplus_demangle_init_info",
                "FUN_00109022",
                "FUN_00113e17",
                "FUN_00113d6e",
                "FUN_00113b71",
                "FUN_0010afd5",
                "FUN_00113dfe",
                "FUN_00109ab1",
                "cplus_demangle_mangled_name",
                "FUN_00112b6e",
                "FUN_00109be3",
                "FUN_00113ce0",
                "dcgettext",
                "FUN_0010c2d2",
                "strchr",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_function_arguments_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)improve_data_type_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = process_file_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)initialize_and_store_data_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_function_arguments_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_data_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)process_file_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)process_file_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)initialize_data_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_bad_stab_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)get_real_type_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)initialize_data_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_data_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_or_get_data_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_numeric_string_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_data_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_data_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_data_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_function_arguments_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = update_data_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_bad_stab_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)initialize_and_store_data_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)update_data_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_data_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_bad_stab_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_bad_stab_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)initialize_and_store_data_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_and_allocate_data_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_function_arguments_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_numeric_string_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_numeric_string_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)update_data_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)update_data_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_data_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_bad_stab_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = improve_data_type_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_00108fe8(pbVar27,uVar15);\n                lVar38 = update_data_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_data_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)update_data_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_data_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)update_data_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)update_data_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)update_data_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)update_data_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)update_data_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = string_comparison_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = string_comparison_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = string_comparison_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)update_data_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)update_data_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_bad_stab_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_numeric_string_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)extract_data_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_numeric_string_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_bad_stab_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_bad_stab_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_null_terminate_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_bad_stab_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_numeric_string_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_numeric_string_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_bad_stab_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)get_real_type_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)get_real_type_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_null_terminate_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = improve_data_type_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)get_real_type_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = string_comparison_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = demangle_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = parse_and_extract_data_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = expand_and_store_data_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_and_extract_data_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = expand_and_store_data_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = extract_integer_from_string_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = expand_and_store_data_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = parse_and_process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = parse_and_process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = parse_and_process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = parse_and_process_data_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)initialize_data_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = check_and_process_type_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = check_and_process_type_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = string_comparison_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = string_comparison_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)initialize_data_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_function_arguments_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_bad_stab_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_data_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_data_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_bad_stab_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_string_in_data_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)process_file_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_bad_stab_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "current_name": "FUNC_0010ee3f",
            "entrypoint": "0x0010ee3f",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0011173a": {
            "additional_data": {
                "FUNC_0010ee3f": {
                    "1": "process_block_data"
                },
                "FUN_0011173a": {
                    "1": "process_stabs_record",
                    "3": "process_debug_records",
                    "4": "process_debug_info"
                },
                "__ptr": {
                    "1": "dynamic_pointer",
                    "11": "ptr",
                    "4": "ptr_var"
                },
                "_stderr": {
                    "1": "standard_error_stream"
                },
                "bVar2": {
                    "1": "temp_byte",
                    "10": "byte_var2",
                    "3": "var2",
                    "4": "byte_var"
                },
                "cVar1": {
                    "1": "temp_char",
                    "11": "char_var1",
                    "2": "char_1",
                    "3": "char1"
                },
                "cVar3": {
                    "1": "char_var2",
                    "2": "result_char",
                    "3": "var3",
                    "5": "result",
                    "6": "char_var3"
                },
                "concat": {
                    "1": "concatenate_strings"
                },
                "dVar19": {
                    "1": "double_value",
                    "10": "double_var",
                    "2": "double_var1",
                    "7": "double_var19"
                },
                "dVar20": {
                    "1": "double_var"
                },
                "dVar21": {
                    "1": "var21"
                },
                "dcgettext": {
                    "1": "get_text_translations"
                },
                "debug_end_block_0010bf20": {
                    "1": "debug_end_block"
                },
                "debug_end_function_0010be1a": {
                    "1": "debug_end_function"
                },
                "debug_record_function_0010bc80": {
                    "1": "debug_record_function"
                },
                "debug_tag_type_0010c6be": {
                    "1": "debug_tag_type"
                },
                "fprintf": {
                    "1": "print_formatted_output"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar5": {
                    "1": "counter",
                    "3": "var5",
                    "7": "int_var"
                },
                "initialize_and_allocate_data_00113ce0": {
                    "1": "initialize_and_allocate_data"
                },
                "initialize_debug_info_0010bbd3": {
                    "1": "initialize_debug_info"
                },
                "initialize_memory_00112996": {
                    "1": "initialize_memory"
                },
                "initialize_or_get_data_00113d3a": {
                    "1": "initialize_or_get_data"
                },
                "lVar10": {
                    "1": "var8",
                    "2": "long_var_1",
                    "7": "long_var10",
                    "9": "long_var1"
                },
                "lVar11": {
                    "1": "var9",
                    "3": "var11",
                    "7": "long_var11",
                    "8": "long_var2"
                },
                "lVar12": {
                    "1": "long_value3",
                    "3": "long_var_3",
                    "6": "long_var12",
                    "9": "long_var3"
                },
                "lVar13": {
                    "1": "var13",
                    "2": "long_var_4",
                    "4": "long_var4"
                },
                "lVar14": {
                    "2": "long_var5"
                },
                "lVar18": {
                    "1": "var18"
                },
                "lVar19": {
                    "1": "temp_long19"
                },
                "local_40": {
                    "1": "local_ptr_ptr_list",
                    "2": "local_long_pointer_array",
                    "3": "local_ptr_array"
                },
                "local_48": {
                    "1": "local_variable1",
                    "2": "local_char_ptr48",
                    "6": "local_char_ptr"
                },
                "memcpy": {
                    "1": "copy_memory"
                },
                "memmove": {
                    "1": "move_memory"
                },
                "memset": {
                    "1": "set_memory"
                },
                "param_1": {
                    "1": "source_code",
                    "10": "param1",
                    "2": "arg1",
                    "5": "param_1",
                    "6": "param"
                },
                "param_14": {
                    "1": "param14"
                },
                "param_15": {
                    "1": "param15"
                },
                "param_16": {
                    "1": "param16"
                },
                "param_17": {
                    "1": "param17"
                },
                "param_2": {
                    "1": "param_long_pointer",
                    "12": "debug_info",
                    "2": "debug_data",
                    "7": "param2"
                },
                "param_3": {
                    "1": "param_int",
                    "7": "param3",
                    "8": "record_type",
                    "9": "opcode"
                },
                "param_4": {
                    "1": "stab_string_count",
                    "2": "num_args",
                    "4": "block_depth",
                    "7": "param4"
                },
                "param_5": {
                    "1": "memory_address",
                    "10": "address",
                    "2": "offset",
                    "7": "param5"
                },
                "param_6": {
                    "1": "param_char_pointer",
                    "2": "record_name",
                    "3": "string",
                    "7": "param6",
                    "8": "name"
                },
                "pcVar15": {
                    "1": "char_pointer"
                },
                "pcVar16": {
                    "1": "char_pointer_variable",
                    "2": "char_ptr16",
                    "3": "char_ptr2"
                },
                "pcVar8": {
                    "1": "char_pointer_variable",
                    "2": "var8",
                    "5": "char_ptr"
                },
                "plVar7": {
                    "1": "temp_ptr7",
                    "2": "ptr3",
                    "3": "ptr_var7"
                },
                "pplVar13": {
                    "1": "var13",
                    "2": "long_ptr_ptr"
                },
                "pplVar18": {
                    "1": "long_ptr_ptr_1"
                },
                "pplVar19": {
                    "1": "var19"
                },
                "pplVar20": {
                    "1": "var20"
                },
                "print_bad_stab_00108fb9": {
                    "1": "print_bad_stab"
                },
                "print_warning_00108fe8": {
                    "1": "print_warning"
                },
                "process_record_0010c139": {
                    "1": "process_record"
                },
                "process_records_0010c1c6": {
                    "1": "process_records"
                },
                "puVar6": {
                    "1": "ptr_undefined8",
                    "2": "ptr2",
                    "5": "ptr_var",
                    "6": "ptr_var6"
                },
                "record_debug_line_0010bf86": {
                    "1": "record_debug_line"
                },
                "record_parameter_0010bd62": {
                    "1": "record_parameter"
                },
                "record_variable_0010c05d": {
                    "1": "record_variable"
                },
                "start_debug_block_0010be88": {
                    "1": "start_debug_block"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "strtod": {
                    "1": "convert_string_to_double"
                },
                "strtol": {
                    "1": "convert_string_to_long"
                },
                "uVar14": {
                    "1": "temp_var14",
                    "2": "ulong_var_1",
                    "3": "var14",
                    "7": "ulong_var1"
                },
                "uVar15": {
                    "1": "temp_var15",
                    "3": "ulong_var_2",
                    "7": "ulong_var2"
                },
                "uVar16": {
                    "1": "ulong_var2"
                },
                "uVar17": {
                    "1": "uint_val17",
                    "2": "uint_var1",
                    "3": "var17",
                    "6": "uint_var17",
                    "9": "uint_var"
                },
                "uVar18": {
                    "1": "temp_var18"
                },
                "uVar19": {
                    "1": "ulong_var4"
                },
                "uVar4": {
                    "1": "undefined1",
                    "11": "undefined_var",
                    "3": "var4",
                    "7": "undefined_var4"
                },
                "uVar9": {
                    "1": "temp_var9",
                    "2": "var9",
                    "3": "undefined8_var",
                    "5": "undefined_var2",
                    "6": "undefined_var9"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                }
            },
            "called": [
                "fprintf",
                "concat",
                "FUN_00108f08",
                "FUN_0010be88",
                "xmalloc",
                "FUN_00109a0b",
                "strcmp",
                "FUN_0010bf86",
                "FUN_00113d3a",
                "FUN_0010bd62",
                "free",
                "FUN_0010bc80",
                "FUN_0010c6be",
                "FUN_00112996",
                "FUN_0010bbd3",
                "FUN_0010bf20",
                "FUN_0010c139",
                "xstrdup",
                "FUN_00108fb9",
                "xrealloc",
                "strtod",
                "FUN_0010be1a",
                "FUN_0010c05d",
                "strtol",
                "FUN_00113ce0",
                "FUN_0010ee3f",
                "FUN_0010c218",
                "dcgettext",
                "FUN_00108fe8",
                "FUN_0010c1c6",
                "strchr",
                "strlen"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined process_debug_info_0011173a(undefined8 param1,long *debug_info,int opcode,int param4,ulong address,\n                      char *name)\n\n{\n  char char_var1;\n  byte byte_var2;\n  void *ptr;\n  char char_var3;\n  undefined undefined_var;\n  int int_var;\n  undefined8 *ptr_var6;\n  long *ptr_var7;\n  char *char_ptr;\n  undefined8 undefined_var9;\n  long long_var1;\n  long long_var2;\n  long long_var3;\n  long **long_ptr_ptr;\n  ulong ulong_var1;\n  ulong ulong_var2;\n  char *char_ptr2;\n  uint uint_var;\n  long **ptr4;\n  double double_var;\n  char *local_char_ptr;\n  long **local_long_ptr_array [2];\n  \n  if (debug_info[4] != 0) {\n    if (((opcode == 100) && (*name != '\\0')) && (debug_info[5] == address)) goto LAB_00111a06;\n    char_var3 = initialize_debug_info(param1);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debug_info + 0x44) = 0;\n    *(undefined4 *)(debug_info + 8) = 0;\n    debug_info[9] = debug_info[4];\n    if (*(char *)(debug_info + 1) == '\\0') {\n      debug_info[6] = debug_info[5];\n    }\n    *(undefined4 *)(debug_info + 0x10) = 1;\n    ptr_var6 = (undefined8 *)xmalloc(8);\n    debug_info[0x11] = (long)ptr_var6;\n    *ptr_var6 = 0;\n    debug_info[4] = 0;\n  }\n  strlen(name);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    undefined_var = debug_start_source_00108f08(param1,name);\n    return undefined_var;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      int_var = strcmp(name,\"gcc2_compiled.\");\n      if (int_var == 0) {\n        *(undefined4 *)(debug_info + 8) = 2;\n        return 1;\n      }\n      int_var = strcmp(name,\"gcc_compiled.\");\n      if (int_var == 0) {\n        *(undefined4 *)(debug_info + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debug_info + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(debug_info + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debug_info + 1) != '\\0') {\n            address = address + debug_info[7];\n          }\n          char_var3 = process_records(param1,debug_info);\n          if (char_var3 != '\\0') {\n            char_var3 = debug_end_function(param1,address);\n            if (char_var3 != '\\0') {\n              *(undefined *)(debug_info + 0xc) = 0;\n              debug_info[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debug_info + 0xc) != '\\0') &&\n           ((address < (ulong)debug_info[0xd] || (debug_info[0xd] == 0xffffffffffffffff)))) {\n          debug_info[0xd] = address;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(debug_info + 0xc) != '\\0') {\n          ulong_var1 = address;\n          if (((*name != '\\0') && (ulong_var2 = debug_info[0xd], ulong_var2 != 0xffffffffffffffff)) &&\n             (ulong_var1 = ulong_var2, address < ulong_var2)) {\n            ulong_var1 = address;\n          }\n          char_var3 = process_records(param1,debug_info);\n          if (char_var3 == '\\0') {\n            return 0;\n          }\n          char_var3 = debug_end_function(param1,ulong_var1);\n          if (char_var3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debug_info + 0xc) = 0;\n          debug_info[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        ptr = (void *)debug_info[4];\n        if (ptr == (void *)0x0) {\n          long_var3 = xstrdup(name);\n          debug_info[4] = long_var3;\n        }\n        else {\n          if (*name == '/') {\n            long_var3 = xstrdup(name);\n          }\n          else {\n            long_var3 = concatenate_strings(ptr,name,0);\n          }\n          debug_info[4] = long_var3;\n          free_memory(ptr);\n        }\n        debug_info[5] = address;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          long_var3 = 0;\n          if (*(char *)(debug_info + 0xc) != '\\0') {\n            long_var3 = debug_info[7];\n          }\n          undefined_var = record_debug_line(param1,(long)param4,long_var3 + address);\n          return undefined_var;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        ptr_var7 = (long *)xmalloc();\n        int_var = *(int *)(debug_info + 0x10);\n        long_var1 = debug_info[10];\n        long_var2 = debug_info[0xb];\n        ptr_var7[5] = 0;\n        long_var3 = debug_info[0x11];\n        *(int *)(ptr_var7 + 4) = int_var;\n        uint_var = int_var + 1;\n        *(uint *)(debug_info + 0x10) = uint_var;\n        *ptr_var7 = long_var2;\n        ptr_var7[1] = long_var1;\n        ptr_var7[2] = (long)name;\n        ptr_var7[3] = address;\n        debug_info[10] = (long)ptr_var7;\n        debug_info[0xb] = (long)ptr_var7;\n        long_var3 = xrealloc(long_var3,(ulong)uint_var << 3);\n        uint_var = *(uint *)(ptr_var7 + 4);\n        debug_info[0x11] = long_var3;\n        *(undefined8 *)(long_var3 + (ulong)uint_var * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    char_ptr = strchr(name,0x3a);\n    if ((char_ptr != (char *)0x0) && ((char_ptr[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debug_info + 0xc) != '\\0') {\n        ulong_var1 = debug_info[0xd];\n        ulong_var2 = address;\n        if ((ulong_var1 != 0xffffffffffffffff) && (ulong_var2 = ulong_var1, address < ulong_var1)) {\n          ulong_var2 = address;\n        }\n        char_var3 = process_records(param1,debug_info);\n        if (char_var3 == '\\0') {\n          return 0;\n        }\n        char_var3 = debug_end_function(param1,ulong_var2);\n        if (char_var3 == '\\0') {\n          return 0;\n        }\n        debug_info[0xd] = -1;\n      }\n      if (*(char *)(debug_info + 1) != '\\0') {\n        debug_info[7] = address;\n      }\n      *(undefined *)(debug_info + 0xc) = 1;\n    }\n    local_char_ptr = strchr(name,0x3a);\n    if (local_char_ptr == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_char_ptr[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      char_var3 = name[1];\n      char_ptr2 = \"eh_throw\";\n      if (char_var3 != 'e') {\n        if (char_var3 < 'f') {\n          if ((char_var3 != 'X') && (char_var3 != '_')) {\nLAB_00111d1a:\n            undefined_var9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning(name,undefined_var9);\n          }\n        }\n        else {\n          char_ptr2 = \"this\";\n          if (char_var3 == 't') goto LAB_00111d62;\n          if (char_var3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      char_ptr2 = (char *)0x0;\n      if ((name != local_char_ptr) && ((*name != ' ' || (local_char_ptr != name + 1)))) {\n        char_ptr2 = (char *)copy_and_null_terminate_00109a0b(name,(int)local_char_ptr - (int)name);\n      }\n    }\nLAB_00111d62:\n    byte_var2 = local_char_ptr[1];\n    char_ptr = local_char_ptr + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte_var2 * 2) >> 2) & 1 |\n        (byte_var2 == 0x2d || byte_var2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var2 == 0) goto switchD_00111de5_caseD_44;\n    char_ptr = local_char_ptr + 2;\n    char_var3 = local_char_ptr[1];\n    switch(char_var3) {\n    case 'C':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      char_ptr = \"debug_record_label: not implemented\";\n      if (long_var3 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      char_var3 = debug_record_function(param1,char_ptr2,long_var3,char_var3 == 'F',address);\n      if (char_var3 != '\\0') {\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n        } while (long_var3 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) goto LAB_0011208f;\n      long_var1 = debug_info[3];\n      ptr_var7 = (long *)debug_info[2];\n      char_var3 = *(char *)(*(long *)(*debug_info + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        local_char_ptr = char_ptr;\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n        } while (long_var3 != 0);\n        return 0;\n      }\n    case 'R':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      break;\n    case 'S':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char_var3 = local_char_ptr[2];\n      if (char_var3 == 't') {\n        char_ptr = local_char_ptr + 3;\n      }\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,char_ptr2,&local_char_ptr,local_long_ptr_array);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      char_var1 = *(char *)(debug_info + 0x35);\n      ptr_var7 = (long *)debug_tag_type(param1,char_ptr2,long_var3);\n      if (ptr_var7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_long_ptr_array[0] != (long **)0x0) {\n        *local_long_ptr_array[0] = ptr_var7;\n      }\n      if (char_var1 != '\\0') goto LAB_001122f0;\n      long_ptr_ptr = (long **)(debug_info + 0x34);\n      ptr4 = (long **)debug_info[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      char_ptr = local_char_ptr + 3;\n      if (((local_char_ptr[2] != '\\0') && (char_ptr = local_char_ptr + 4, local_char_ptr[3] == 'n')) &&\n         (char_ptr = local_char_ptr + 5, char_ptr2 = local_char_ptr + 4, local_char_ptr = char_ptr, *char_ptr2 == '0')) {\n        for (; char_ptr = local_char_ptr, *local_char_ptr != '\\0'; local_char_ptr = local_char_ptr + 1) {\n          if (*local_char_ptr == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      break;\n    case 'c':\n      if (local_char_ptr[2] == '=') {\n        char_ptr = local_char_ptr + 4;\n        char_var3 = local_char_ptr[3];\n        local_char_ptr = char_ptr;\n        if (char_var3 == 'i') {\n          long_var3 = strtol(char_ptr,(char **)0x0,10);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long_var1 = initialize_memory(param1,char_ptr2,4);\n          if (long_var1 != 0) {\n            *(long *)(long_var1 + 0x20) = (long)(int)long_var3;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var3 == 'r') {\n          double_var = strtod(char_ptr,(char **)0x0);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long_var3 = initialize_memory(param1,char_ptr2,5);\n          if (long_var3 != 0) {\n            *(double *)(long_var3 + 0x20) = double_var;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var3 == 'e') {\n          long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n          if (long_var3 == 0) {\n            return 0;\n          }\n          char_ptr = local_char_ptr;\n          if (*local_char_ptr == ',') {\n            long_var1 = strtol(local_char_ptr,(char **)0x0,10);\n            if (char_ptr2 == (char *)0x0) {\n              return 0;\n            }\n            long_var2 = initialize_memory(param1,char_ptr2,6);\n            if (long_var2 != 0) {\n              ptr_var7 = (long *)xmalloc(0x10);\n              *ptr_var7 = long_var3;\n              ptr_var7[1] = (long)(int)long_var1;\n              *(long **)(long_var2 + 0x20) = ptr_var7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_char_ptr[2] == 'F') {\n        local_char_ptr = local_char_ptr + 3;\n        long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n        if (long_var3 == 0) {\n          return 0;\n        }\n        undefined_var9 = initialize_and_allocate_data(long_var3,0,0);\n        long_var3 = initialize_or_get_data(undefined_var9);\n      }\n      else {\n        local_char_ptr = char_ptr;\n        long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      }\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 1;\n      break;\n    case 'r':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 5;\nLAB_001123e8:\n      char_var3 = process_record(param1,debug_info,char_ptr2,long_var3,undefined_var9,address);\n      goto joined_r0x001123f8;\n    case 't':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,char_ptr2,&local_char_ptr,local_long_ptr_array);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      ptr_var7 = (long *)initialize_debug_name_type_0010c218(param1,char_ptr2,long_var3);\n      if (ptr_var7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_long_ptr_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_long_ptr_array[0] = ptr_var7;\n      return 1;\n    case 'v':\n      local_char_ptr = char_ptr;\n      long_var3 = FUNC_0010ee3f(param1,debug_info,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n    }\n    char_var3 = record_parameter(param1,char_ptr2,long_var3,undefined_var9,address);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)debug_info + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    char_var3 = process_records(param1,debug_info);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    char_var3 = debug_end_block(param1,debug_info[7] + debug_info[6] + address);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    debug_info = debug_info + 0xe;\n    *(int *)debug_info = *(int *)debug_info + -1;\n    char_ptr = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debug_info) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        char_ptr = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        char_ptr = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var9 = dcgettext(0,char_ptr,5);\n      fprintf(standard_error_stream,\"%s\\n\",undefined_var9);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        int_var = *(int *)(debug_info + 0x10);\n        *(uint *)(debug_info + 0x10) = int_var + 1U;\n        long_var3 = xrealloc(debug_info[0x11],(ulong)(int_var + 1U) << 3);\n        ptr_var6 = (undefined8 *)debug_info[0xb];\n        debug_info[0x11] = long_var3;\n        while( true ) {\n          if (ptr_var6 == (undefined8 *)0x0) {\n            undefined_var9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning(name,undefined_var9);\n            *(undefined8 *)(debug_info[0x11] + (ulong)(*(int *)(debug_info + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == ptr_var6[3]) && (int_var = strcmp((char *)ptr_var6[2],name), int_var == 0))\n          break;\n          ptr_var6 = (undefined8 *)*ptr_var6;\n        }\n        *(undefined8 *)(long_var3 + (ulong)(*(int *)(debug_info + 0x10) - 1) * 8) = ptr_var6[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        long_var3 = debug_info[10];\n        if (long_var3 != 0) {\n          long_var1 = *(long *)(long_var3 + 8);\n          uint_var = *(uint *)(long_var3 + 0x20);\n          debug_info[10] = long_var1;\n          if ((uint_var < *(uint *)(debug_info + 0x10)) &&\n             (*(undefined8 *)(long_var3 + 0x28) = *(undefined8 *)(debug_info[0x11] + (ulong)uint_var * 8),\n             long_var1 != 0)) {\n            name = *(char **)(long_var1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)debug_info[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debug_info + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(debug_info + 0xc) != '\\0') {\n      char_var3 = start_debug_block(param1,debug_info[7] + debug_info[6] + address);\n      if (char_var3 == '\\0') {\n        return 0;\n      }\n      char_var3 = process_records(param1,debug_info);\n      if (char_var3 != '\\0') {\n        *(int *)(debug_info + 0xe) = *(int *)(debug_info + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    char_ptr = \"N_LBRAC not within function\\n\";\n  }\n  char_ptr = (char *)dcgettext(0,char_ptr,5);\n  fprintf(standard_error_stream,char_ptr);\n  return 0;\ncode_r0x00111cc7:\n  local_char_ptr = local_char_ptr + 2;\n  local_char_ptr = strchr(local_char_ptr,0x3a);\n  if (local_char_ptr == (char *)0x0) {\n    char_ptr = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_char_ptr = char_ptr;\n    print_bad_stab(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (ptr4 == (long **)0x0) {\nLAB_001122f0:\n    if (char_var3 != 't') {\n      return 1;\n    }\n    ptr_var7 = (long *)initialize_debug_name_type_0010c218(param1,char_ptr2,ptr_var7);\n    if (ptr_var7 != (long *)0x0) {\n      if (local_long_ptr_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_long_ptr_array[0] = ptr_var7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)ptr4[1] == *char_ptr2) &&\n     (int_var = strcmp((char *)ptr4[1],char_ptr2), int_var == 0)) {\n    ptr4[3] = ptr_var7;\n    *long_ptr_ptr = *ptr4;\n    goto LAB_001122f0;\n  }\n  long_ptr_ptr = ptr4;\n  ptr4 = (long **)*ptr4;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var1 < 1) {\nLAB_0011208f:\n    undefined_var9 = 1;\nLAB_001121c4:\n    char_var3 = record_variable(param1,char_ptr2,long_var3,undefined_var9,address);\njoined_r0x001123f8:\n    if (char_var3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  char_ptr = *(char **)(*ptr_var7 + 8);\n  if ((char_var3 != '\\0') && (char_var3 == *char_ptr)) {\n    char_ptr = char_ptr + 1;\n  }\n  if ((*char_ptr == *char_ptr2) && (int_var = strcmp(char_ptr,char_ptr2), int_var == 0)) {\n    address = *(long *)(*ptr_var7 + 0x10) + *(long *)(*(long *)(*ptr_var7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var1 = long_var1 + -1;\n  ptr_var7 = ptr_var7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "current_name": "process_debug_info_0011173a",
            "entrypoint": "0x0011173a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011173a": "process_debug_info_0011173a",
                "__ptr": "ptr",
                "_stderr": "standard_error_stream",
                "bVar2": "byte_var2",
                "cVar1": "char_var1",
                "cVar3": "char_var3",
                "concat": "concatenate_strings",
                "dVar19": "double_var",
                "dcgettext": "get_text_translations",
                "debug_end_block_0010bf20": "debug_end_block",
                "debug_end_function_0010be1a": "debug_end_function",
                "debug_record_function_0010bc80": "debug_record_function",
                "debug_tag_type_0010c6be": "debug_tag_type",
                "fprintf": "print_formatted_output",
                "free": "free_memory",
                "iVar5": "int_var",
                "initialize_and_allocate_data_00113ce0": "initialize_and_allocate_data",
                "initialize_debug_info_0010bbd3": "initialize_debug_info",
                "initialize_memory_00112996": "initialize_memory",
                "initialize_or_get_data_00113d3a": "initialize_or_get_data",
                "lVar10": "long_var1",
                "lVar11": "long_var2",
                "lVar12": "long_var3",
                "lVar13": "long_var13",
                "lVar18": "var18",
                "local_40": "local_long_ptr_array",
                "local_48": "local_char_ptr",
                "param_1": "param1",
                "param_2": "debug_info",
                "param_3": "opcode",
                "param_4": "param4",
                "param_5": "address",
                "param_6": "name",
                "pcVar16": "char_ptr2",
                "pcVar8": "char_ptr",
                "plVar7": "ptr_var7",
                "pplVar13": "long_ptr_ptr",
                "pplVar18": "ptr4",
                "print_bad_stab_00108fb9": "print_bad_stab",
                "print_warning_00108fe8": "print_warning",
                "process_record_0010c139": "process_record",
                "process_records_0010c1c6": "process_records",
                "puVar6": "ptr_var6",
                "record_debug_line_0010bf86": "record_debug_line",
                "record_parameter_0010bd62": "record_parameter",
                "record_variable_0010c05d": "record_variable",
                "start_debug_block_0010be88": "start_debug_block",
                "strcmp": "compare_strings",
                "strlen": "get_string_length",
                "strtod": "convert_string_to_double",
                "strtol": "convert_string_to_long",
                "uVar14": "ulong_var1",
                "uVar15": "ulong_var2",
                "uVar17": "uint_var",
                "uVar4": "undefined_var",
                "uVar9": "undefined_var9",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112502": {
            "additional_data": {
                "FUN_00112502": {
                    "1": "process",
                    "12": "process_files",
                    "2": "process_file",
                    "3": "check_file_access",
                    "4": "process_data"
                },
                "cVar4": {
                    "1": "is_successful",
                    "19": "result",
                    "2": "file_result",
                    "4": "file_status"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "data",
                    "7": "file_info",
                    "8": "file_data"
                },
                "param_2": {
                    "1": "file_descriptor",
                    "2": "file",
                    "3": "file_context",
                    "4": "file_handle",
                    "5": "file_data",
                    "6": "file_pointer"
                },
                "param_3": {
                    "1": "file_size_threshold",
                    "2": "limit",
                    "24": "file_size"
                },
                "process_file_0010edb4": {
                    "1": "process_file"
                },
                "puVar2": {
                    "1": "file_data_ptr",
                    "14": "file_array",
                    "2": "file_info"
                },
                "uVar1": {
                    "1": "array_index",
                    "2": "counter",
                    "22": "index",
                    "3": "file_index"
                },
                "uVar3": {
                    "1": "current_value",
                    "2": "current_file_ptr",
                    "3": "next_file_ptr",
                    "6": "current_file",
                    "7": "next_file"
                }
            },
            "called": [
                "FUN_0010edb4"
            ],
            "calling": [
                "FUN_0011378f",
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "code": "\nundefined process_files_00112502(long file_data,undefined8 file_pointer,ulong file_size)\n\n{\n  uint index;\n  undefined8 *file_array;\n  undefined8 next_file;\n  char result;\n  \n  do {\n    file_array = *(undefined8 **)(file_data + 0x40);\n    if (file_array == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(file_data + 0x48), index < 10 && (file_array[(ulong)index + 2] != -1))) {\n      if (file_size <= (ulong)file_array[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = process_file(file_pointer,*(undefined8 *)(file_array[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(file_data + 0x48) = *(int *)(file_data + 0x48) + 1;\n    }\n    next_file = *file_array;\n    *(undefined4 *)(file_data + 0x48) = 0;\n    *(undefined8 *)(file_data + 0x40) = next_file;\n  } while( true );\n}\n\n",
            "current_name": "process_files_00112502",
            "entrypoint": "0x00112502",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112502": "process_files_00112502",
                "cVar4": "result",
                "param_1": "file_data",
                "param_2": "file_pointer",
                "param_3": "file_size",
                "process_file_0010edb4": "process_file",
                "puVar2": "file_array",
                "uVar1": "index",
                "uVar3": "next_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011256b": {
            "additional_data": {
                "FUN_0011256b": {
                    "31": "print_matching_formats"
                },
                "__format": {
                    "1": "error_message_format",
                    "19": "format_string",
                    "3": "format_message"
                },
                "_stderr": {
                    "3": "stderr",
                    "4": "standard_error"
                },
                "_stdout": {
                    "4": "stdout"
                },
                "param_1": {
                    "1": "input_formats",
                    "11": "formats",
                    "2": "formats_array",
                    "7": "format_list"
                },
                "plVar2": {
                    "1": "current_string",
                    "24": "current_format"
                },
                "uVar1": {
                    "1": "default_value",
                    "2": "data",
                    "3": "matching_formats",
                    "4": "default_format"
                }
            },
            "called": [
                "fprintf",
                "fputc",
                "free",
                "fflush",
                "dcgettext"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\n\n\nvoid print_matching_formats_0011256b(long *formats)\n\n{\n  undefined8 default_format;\n  char *format_string;\n  long *current_format;\n  \n  fflush(stdout);\n  default_format = DAT_001275e0;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,default_format);\n  for (current_format = formats; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free(formats);\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_0011256b",
            "entrypoint": "0x0011256b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "stdout",
                "param_1": "formats",
                "plVar2": "current_format",
                "uVar1": "default_format"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001125fa": {
            "additional_data": {
                "DAT_00127a30": {
                    "1": "previous_filename"
                },
                "DAT_00127a38": {
                    "1": "previous_length"
                },
                "FUN_001125fa": {
                    "1": "combine_filename",
                    "2": "get_archive_filename",
                    "3": "generate_modified_string",
                    "5": "get_modified_filename",
                    "6": "get_formatted_string"
                },
                "__assert_fail": {
                    "1": "assert_failure"
                },
                "__s": {
                    "1": "file_name",
                    "2": "file",
                    "3": "original_string",
                    "5": "filename"
                },
                "_s": {
                    "1": "original_filename"
                },
                "param_1": {
                    "1": "file_params",
                    "10": "arguments",
                    "2": "input_array",
                    "3": "input",
                    "5": "input_strings"
                },
                "ppcVar2": {
                    "1": "pointer_to_arg2",
                    "2": "archive_filename"
                },
                "sVar3": {
                    "1": "input_length",
                    "2": "archive_name_length",
                    "6": "length1"
                },
                "sVar4": {
                    "1": "input_length",
                    "2": "file_length",
                    "3": "original_string_length",
                    "6": "length2"
                },
                "uVar1": {
                    "1": "new_length",
                    "2": "total_len",
                    "3": "modified_string_length",
                    "9": "total_length"
                }
            },
            "called": [
                "free",
                "sprintf",
                "xmalloc",
                "__assert_fail",
                "strlen"
            ],
            "calling": [
                "FUN_001152b6",
                "FUN_00105828",
                "FUN_001126c0",
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_00107976"
            ],
            "code": "\nchar * get_formatted_string_001125fa(char **arguments)\n\n{\n  ulong total_length;\n  char **archive_filename;\n  size_t length1;\n  size_t length2;\n  char *filename;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archive_filename = (char **)arguments[0x1d];\n  filename = *arguments;\n  if ((archive_filename != (char **)0x0) && ((*(byte *)((long)archive_filename + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*archive_filename);\n    length2 = strlen(filename);\n    total_length = length1 + 3 + length2;\n    if (DAT_00127a38 < total_length) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (total_length >> 1) + total_length;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    filename = DAT_00127a30;\n  }\n  return filename;\n}\n\n",
            "current_name": "get_formatted_string_001125fa",
            "entrypoint": "0x001125fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "__assert_fail": "assert_failure",
                "__s": "filename",
                "_s": "original_filename",
                "param_1": "arguments",
                "ppcVar2": "archive_filename",
                "sVar3": "length1",
                "sVar4": "length2",
                "uVar1": "total_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001126c0": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "print_error_message"
                },
                "DAT_0011b4a0": {
                    "1": "error_separator"
                },
                "DAT_001275e0": {
                    "2": "unknown_cause_error_message"
                },
                "FUN_001126c0": {
                    "1": "print_error_details",
                    "2": "print_error",
                    "27": "print_error_message"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "iVar1": {
                    "1": "bfd_error_code",
                    "10": "error",
                    "2": "error_value",
                    "3": "bfd_error",
                    "5": "error_status"
                },
                "in_AL": {
                    "1": "is_error",
                    "14": "flag",
                    "2": "input_flag",
                    "3": "condition_flag"
                },
                "local_100": {
                    "1": "string_capacity",
                    "2": "buffer_length",
                    "4": "buffer_size1",
                    "8": "buffer_size"
                },
                "local_48": {
                    "1": "local_param_8",
                    "2": "param_8_copy",
                    "3": "local8",
                    "5": "param8_copy"
                },
                "local_58": {
                    "1": "param7",
                    "2": "local_var9",
                    "3": "error7_copy",
                    "5": "param7_copy"
                },
                "local_68": {
                    "1": "saved_param6",
                    "2": "param_6_copy",
                    "3": "error6_copy",
                    "5": "param6_copy"
                },
                "local_78": {
                    "1": "error_code13",
                    "2": "local_var7",
                    "3": "local5",
                    "5": "param5_copy"
                },
                "local_88": {
                    "1": "local_param_4",
                    "2": "param_4_copy",
                    "3": "error4_copy",
                    "5": "param4_copy"
                },
                "local_98": {
                    "1": "error_code3_local",
                    "2": "local_var5",
                    "3": "error3_copy",
                    "5": "param3_copy"
                },
                "local_a8": {
                    "1": "error_code2_local",
                    "2": "local_var4",
                    "3": "local2",
                    "5": "param2_copy"
                },
                "local_b8": {
                    "1": "param1",
                    "2": "param_1_copy",
                    "3": "error1_copy",
                    "4": "param1_copy"
                },
                "local_c0": {
                    "1": "local_param_14",
                    "2": "param_14_copy",
                    "3": "param14",
                    "7": "param14_copy"
                },
                "local_c8": {
                    "1": "loc13",
                    "2": "param_13_copy",
                    "3": "param13",
                    "7": "param13_copy"
                },
                "local_e8": {
                    "1": "local_error_buffer",
                    "12": "local_buffer",
                    "2": "temporary_buffer"
                },
                "local_e8[32]": {
                    "1": "local_array"
                },
                "local_f0": {
                    "1": "local_var3",
                    "2": "ptr2",
                    "3": "local_array",
                    "6": "local_buffer"
                },
                "local_f8": {
                    "1": "local_array_1",
                    "2": "stack_ptr",
                    "9": "stack_pointer"
                },
                "local_fc": {
                    "1": "buffer_capacity",
                    "2": "format_size",
                    "4": "buffer_size2"
                },
                "param_1": {
                    "1": "error_param1",
                    "14": "error_code",
                    "2": "error_type",
                    "5": "error_code1",
                    "7": "error1"
                },
                "param_10": {
                    "1": "error_message2",
                    "2": "error_code_length",
                    "3": "string_length",
                    "5": "formatted_string_length"
                },
                "param_11": {
                    "1": "error_code_arr",
                    "2": "error_array",
                    "3": "formatted_string",
                    "4": "error_code_array"
                },
                "param_12": {
                    "1": "additional_error_message",
                    "19": "format_string",
                    "3": "error_format",
                    "4": "error_message"
                },
                "param_13": {
                    "1": "param7",
                    "2": "extra_param1",
                    "20": "param13",
                    "3": "param_13"
                },
                "param_14": {
                    "1": "additional_param2",
                    "2": "extra_param2",
                    "20": "param14",
                    "3": "param_14"
                },
                "param_2": {
                    "1": "error_flag2",
                    "10": "param2",
                    "3": "error_code",
                    "5": "error_code2",
                    "7": "error2"
                },
                "param_3": {
                    "1": "error_flag3",
                    "12": "param3",
                    "3": "param_3",
                    "5": "error_code3",
                    "7": "error3"
                },
                "param_4": {
                    "1": "error_param4",
                    "12": "param4",
                    "3": "param_4",
                    "5": "error_code4",
                    "7": "error4"
                },
                "param_5": {
                    "1": "error_param5",
                    "12": "param5",
                    "3": "param_5",
                    "5": "error_code5",
                    "7": "error5"
                },
                "param_6": {
                    "1": "error_param6",
                    "12": "param6",
                    "3": "param_6",
                    "5": "error_code6",
                    "7": "error6"
                },
                "param_7": {
                    "1": "error_flag7",
                    "12": "param7",
                    "3": "param_7",
                    "5": "error_code7",
                    "7": "error7"
                },
                "param_8": {
                    "1": "error_param8",
                    "12": "param8",
                    "3": "param_8",
                    "5": "error_code8",
                    "7": "error8"
                },
                "param_9": {
                    "1": "formatted_info",
                    "15": "error_message",
                    "2": "formatted_error_message",
                    "3": "formatted_string",
                    "5": "error_code"
                },
                "uVar2": {
                    "1": "error_message2",
                    "10": "error_message",
                    "2": "error_msg"
                }
            },
            "called": [
                "fprintf",
                "vfprintf",
                "bfd_errmsg",
                "fputs",
                "fflush",
                "FUN_001125fa",
                "dcgettext",
                "fwrite",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00108466",
                "FUN_00104ea2",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_00104d25",
                "FUN_00114690",
                "FUN_00116110",
                "FUN_0010551d",
                "FUN_0010808f",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "code": "\n\n\nvoid print_error_message_001126c0(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 long error_message,long formatted_string_length,long *error_code_array,char *format_string,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int error;\n  undefined8 error_message;\n  undefined4 buffer_size;\n  undefined4 buffer_size2;\n  undefined *stack_pointer;\n  undefined *local_buffer;\n  undefined local_buffer [32];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    param1_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  param13_copy = param13;\n  param14_copy = param14;\n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg();\n  }\n  fflush(standard_output);\n  fputs(DAT_001275e0,standard_error);\n  if (formatted_string_length != 0) {\n    if (error_message == 0) {\n      error_message = get_formatted_string_001125fa(formatted_string_length);\n    }\n    if ((error_code_array != (long *)0x0) && (*error_code_array != 0)) {\n      fprintf(standard_error,\": %s[%s]\",error_message);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(standard_error,\": %s\",error_message);\nLAB_001127c1:\n  if (format_string != (char *)0x0) {\n    stack_pointer = &stack0x00000008;\n    local_buffer = local_buffer;\n    buffer_size = 0x20;\n    buffer_size2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,standard_error);\n    vfprintf(standard_error,format_string,&buffer_size);\n  }\n  fprintf(standard_error,\": %s\\n\",error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_001126c0",
            "entrypoint": "0x001126c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "iVar1": "error",
                "in_AL": "flag",
                "local_100": "buffer_size",
                "local_48": "param8_copy",
                "local_58": "param7_copy",
                "local_68": "param6_copy",
                "local_78": "param5_copy",
                "local_88": "param4_copy",
                "local_98": "param3_copy",
                "local_a8": "param2_copy",
                "local_b8": "param1_copy",
                "local_c0": "param14_copy",
                "local_c8": "param13_copy",
                "local_e8": "local_buffer",
                "local_f0": "local_buffer",
                "local_f8": "stack_pointer",
                "local_fc": "buffer_size2",
                "param_1": "error_code",
                "param_10": "formatted_string_length",
                "param_11": "error_code_array",
                "param_12": "format_string",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011283f": {
            "additional_data": {
                "FUN_0011283f": {
                    "1": "check_directory_valid",
                    "2": "check_directory",
                    "3": "check_directory_permission",
                    "4": "check_directory_permissions",
                    "5": "find_directory",
                    "8": "check_directory_access"
                },
                "iVar1": {
                    "1": "access_status",
                    "23": "access_result"
                },
                "param_1": {
                    "1": "original_path",
                    "11": "directory_path",
                    "13": "path",
                    "4": "file_path"
                },
                "param_2": {
                    "1": "valid_path",
                    "3": "directory_path",
                    "4": "current_directory",
                    "6": "default_directory"
                },
                "sStack_a8": {
                    "1": "directory_stats",
                    "10": "file_stats",
                    "12": "file_stat",
                    "2": "stat_buffer",
                    "3": "file_info"
                }
            },
            "called": [
                "stat",
                "access"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nchar * check_directory_access_0011283f(char *path,char *default_path)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((default_path == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        default_path = path;\n      }\n    }\n  }\n  return default_path;\n}\n\n",
            "current_name": "check_directory_access_0011283f",
            "entrypoint": "0x0011283f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "iVar1": "access_result",
                "param_1": "path",
                "param_2": "default_path",
                "sStack_a8": "file_stat"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112894": {
            "additional_data": {
                "FUN_00112894": {
                    "1": "initialize_data",
                    "2": "initialize_data_structures",
                    "3": "create_initialized_array",
                    "5": "initialize_data_structure",
                    "7": "initialize_memory"
                },
                "bVar4": {
                    "1": "loop_index",
                    "12": "byte_value",
                    "2": "zero_byte",
                    "3": "counter",
                    "4": "offset"
                },
                "lVar3": {
                    "1": "index",
                    "17": "loop_counter",
                    "2": "loop_count",
                    "6": "counter"
                },
                "param_1": {
                    "1": "input_data",
                    "3": "data",
                    "6": "value1",
                    "9": "initial_value"
                },
                "param_2": {
                    "1": "input_value_2",
                    "12": "flag",
                    "3": "input2",
                    "6": "value2"
                },
                "param_3": {
                    "1": "input_3",
                    "3": "data1",
                    "4": "value_1",
                    "6": "value3"
                },
                "param_4": {
                    "1": "param4_value",
                    "3": "input4",
                    "4": "value2",
                    "6": "value4"
                },
                "puVar1": {
                    "1": "buffer_ptr",
                    "2": "allocated_memory",
                    "3": "buffer",
                    "7": "data_structure",
                    "9": "memory_block"
                },
                "puVar2": {
                    "1": "current_position",
                    "2": "current_address",
                    "3": "current_pointer",
                    "7": "current_ptr"
                },
                "xmalloc": {
                    "10": "allocate_memory"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined8 *\ninitialize_memory_00112894(undefined8 initial_value,undefined flag,undefined8 value3,undefined8 value4)\n\n{\n  undefined8 *memory_block;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  byte byte_value;\n  \n  byte_value = 0;\n  memory_block = (undefined8 *)xmalloc(0x1b0);\n  temp_ptr = memory_block;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)temp_ptr = 0;\n    temp_ptr = (undefined8 *)((long)temp_ptr + (ulong)byte_value * -8 + 4);\n  }\n  *memory_block = initial_value;\n  *(undefined *)(memory_block + 1) = flag;\n  memory_block[2] = value3;\n  memory_block[3] = value4;\n  *(undefined4 *)(memory_block + 0x10) = 1;\n  temp_ptr = (undefined8 *)xmalloc(8);\n  memory_block[0xd] = 0xffffffffffffffff;\n  memory_block[0x11] = temp_ptr;\n  *temp_ptr = 0;\n  return memory_block;\n}\n\n",
            "current_name": "initialize_memory_00112894",
            "entrypoint": "0x00112894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112894": "initialize_memory_00112894",
                "bVar4": "byte_value",
                "lVar3": "loop_counter",
                "param_1": "initial_value",
                "param_2": "flag",
                "param_3": "value3",
                "param_4": "value4",
                "puVar1": "memory_block",
                "puVar2": "temp_ptr",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112904": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "allocate_and_initialize",
                    "10": "initialize_data",
                    "5": "initialize_memory",
                    "6": "initialize_data_structure"
                },
                "ZEXT816": {
                    "1": "zero_extend"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "data1",
                    "20": "value1",
                    "4": "input1"
                },
                "param_2": {
                    "1": "input_value2",
                    "2": "data2",
                    "20": "value2",
                    "4": "input2"
                },
                "puVar1": {
                    "1": "memory_block_ptr",
                    "5": "data_pointer",
                    "7": "memory_block",
                    "8": "allocated_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00113cb9",
                "FUN_00113b71",
                "FUN_0010c95e",
                "FUN_00113bfa",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113b4a",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_0010c6be",
                "FUN_00113ce0",
                "FUN_00113da9",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_00113b98",
                "FUN_0010c892",
                "FUN_0010c218",
                "FUN_00113d6e",
                "FUN_00113e17",
                "FUN_00113e23",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_data_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *allocated_memory;\n  \n  allocated_memory = (undefined4 *)xmalloc(0x18);\n  *allocated_memory = value1;\n  allocated_memory[1] = value2;\n  *(undefined (*) [16])(allocated_memory + 2) = zero_extend(0);\n  return;\n}\n\n",
            "current_name": "initialize_data_00112904",
            "entrypoint": "0x00112904",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112904": "initialize_data_00112904",
                "ZEXT816": "zero_extend",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112925": {
            "additional_data": {
                "FUN_00112925": {
                    "1": "initialize_pointer_array",
                    "12": "initialize_array",
                    "13": "initialize_memory",
                    "4": "initialize_data"
                },
                "bVar5": {
                    "1": "byte_var",
                    "2": "counter",
                    "4": "byte_value",
                    "6": "index",
                    "8": "flag"
                },
                "lVar3": {
                    "1": "index",
                    "11": "counter",
                    "15": "loop_counter",
                    "2": "iteration_count"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "11": "array_pointer",
                    "2": "data_pointer",
                    "4": "memory_array",
                    "5": "array_ptr"
                },
                "param_2": {
                    "1": "data",
                    "19": "value",
                    "2": "param"
                },
                "param_3": {
                    "1": "param3_value",
                    "11": "param3",
                    "2": "size1",
                    "3": "parameter3",
                    "4": "value1"
                },
                "param_4": {
                    "1": "param4_value",
                    "11": "param4",
                    "2": "param_b",
                    "3": "parameter4",
                    "4": "value2"
                },
                "pauVar2": {
                    "1": "ptr_array",
                    "13": "existing_array",
                    "2": "existing_array_ptr",
                    "7": "existing_memory"
                },
                "puVar1": {
                    "1": "memory_block_ptr",
                    "2": "memory_pointer",
                    "5": "array",
                    "6": "allocated_memory"
                },
                "puVar4": {
                    "1": "current_data_pointer",
                    "2": "current_memory",
                    "3": "temp_ptr",
                    "5": "current_pointer"
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00112996",
                "FUN_0010c05d",
                "FUN_0010bc80",
                "FUN_0010c6be",
                "FUN_0010c218"
            ],
            "code": "\nundefined4 *\ninitialize_memory_00112925(undefined (**array_pointer) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *allocated_memory;\n  undefined (*existing_array) [16];\n  long loop_counter;\n  undefined4 *current_element;\n  byte flag;\n  \n  flag = 0;\n  allocated_memory = (undefined4 *)xmalloc(0x28);\n  current_element = allocated_memory;\n  for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *current_element = 0;\n    current_element = current_element + (ulong)flag * -2 + 1;\n  }\n  existing_array = *array_pointer;\n  *(undefined8 *)(allocated_memory + 2) = value;\n  allocated_memory[5] = param3;\n  allocated_memory[6] = param4;\n  if (existing_array == (undefined (*) [16])0x0) {\n    existing_array = (undefined (*) [16])xmalloc(0x10);\n    *existing_array = ZEXT816(0);\n    *array_pointer = existing_array;\n    *(undefined (**) [16])(*existing_array + 8) = existing_array;\n  }\n  **(undefined8 **)(*existing_array + 8) = allocated_memory;\n  *(undefined4 **)(*existing_array + 8) = allocated_memory;\n  return allocated_memory;\n}\n\n",
            "current_name": "initialize_memory_00112925",
            "entrypoint": "0x00112925",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "bVar5": "flag",
                "lVar3": "loop_counter",
                "param_1": "array_pointer",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "pauVar2": "existing_array",
                "puVar1": "allocated_memory",
                "puVar4": "current_element"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112996": {
            "additional_data": {
                "FUN_00112996": {
                    "1": "initialize_or_print_error_message",
                    "18": "initialize_memory",
                    "2": "initialize_memory_if_needed",
                    "3": "initialize_or_print_error",
                    "5": "initialize_memory_if_valid"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "fprintf": {
                    "1": "print_error"
                },
                "lVar2": {
                    "1": "memory_address",
                    "3": "memory_offset",
                    "7": "offset",
                    "9": "memory_size"
                },
                "param_1": {
                    "1": "input1",
                    "11": "memory_address",
                    "2": "file_pointer",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "input2",
                    "15": "param2",
                    "2": "arg2",
                    "8": "param_2"
                },
                "param_3": {
                    "1": "param3_value",
                    "15": "param3",
                    "2": "arg3",
                    "8": "param_3"
                },
                "uVar1": {
                    "1": "memory_var",
                    "18": "result",
                    "3": "return_value",
                    "6": "error_message"
                }
            },
            "called": [
                "fprintf",
                "dcgettext",
                "FUN_00112925"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 initialize_memory_00112996(long memory_address,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long memory_size;\n  \n  if ((*(long *)(memory_address + 8) != 0) && (*(long *)(memory_address + 0x10) != 0)) {\n    memory_size = *(long *)(memory_address + 0x10) + 0x10;\n    if (*(long *)(memory_address + 0x20) != 0) {\n      memory_size = *(long *)(memory_address + 0x20) + 0x28;\n    }\n    result = initialize_memory_00112996_00112925(memory_size,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(error_stream,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_00112996",
            "entrypoint": "0x00112996",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112996": "initialize_memory_00112996",
                "_stderr": "error_stream",
                "fprintf": "print_error",
                "lVar2": "memory_size",
                "param_1": "memory_address",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001129f4": {
            "additional_data": {
                "((undefined8 *)*puVar1)[1]": {
                    "1": "second_value"
                },
                "(int *)0x0": {
                    "1": "null_ptr"
                },
                "(undefined8 *)*puVar1)[1]": {
                    "1": "second_element"
                },
                "*(undefined8 *)(**(long **)(param_1 + 4) + 8)": {
                    "1": "return_value"
                },
                "**(int ***)(undefined8 *)*puVar1": {
                    "1": "nested_ptr"
                },
                "**(long **)(param_1 + 4)": {
                    "1": "value"
                },
                "*param_1": {
                    "1": "first_value"
                },
                "*puVar1": {
                    "1": "nested_input"
                },
                "FUN_001129f4": {
                    "1": "reverse_and_get_value",
                    "3": "extract_value_from_binary",
                    "4": "extract_data"
                },
                "param_1": {
                    "1": "binary_data",
                    "12": "input_array",
                    "2": "data",
                    "3": "data_array",
                    "4": "array"
                },
                "param_1 != piVar2": {
                    "1": "input_not_equal_to_nested"
                },
                "param_1+4": {
                    "1": "input_plus4"
                },
                "piVar2": {
                    "1": "temp_data_ptr",
                    "2": "temp_array_pointer",
                    "5": "current_pointer",
                    "7": "current_ptr"
                },
                "puVar1": {
                    "1": "next_value_ptr",
                    "2": "data_pointer",
                    "4": "array_pointer"
                }
            },
            "called": [
                "FUN_001129f4"
            ],
            "calling": [
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 extract_data_001129f4(int *input_array)\n\n{\n  undefined8 *pointer;\n  int *current_ptr;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    pointer = (undefined8 *)(input_array + 4);\n    current_ptr = **(int ***)(undefined8 *)*pointer;\n  } while ((input_array != current_ptr) && (input_array = current_ptr, current_ptr != (int *)0x0));\n  return ((undefined8 *)*pointer)[1];\n}\n\n",
            "current_name": "extract_data_001129f4",
            "entrypoint": "0x001129f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001129f4": "extract_data_001129f4",
                "param_1": "input_array",
                "piVar2": "current_ptr",
                "puVar1": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112a33": {
            "additional_data": {
                "FUN_00112a33": {
                    "1": "improved_code",
                    "2": "process_param",
                    "3": "record_variable_or_parameter",
                    "9": "process_parameter"
                },
                "allocate_and_initialize_slots_0010da0b": {
                    "1": "initialize_slots",
                    "5": "allocate_and_initialize_slots"
                },
                "debug_tag_type_0010c6be": {
                    "2": "get_debug_tag_type",
                    "5": "debug_tag_type"
                },
                "initialize_debug_name_type_0010c218": {
                    "1": "initialize_debug_name",
                    "6": "initialize_debug_name_type"
                },
                "lVar2": {
                    "1": "debug_tag_type_result",
                    "2": "temp_var",
                    "4": "value",
                    "6": "result"
                },
                "param_1": {
                    "1": "param_type",
                    "10": "param1",
                    "2": "record",
                    "3": "param_1",
                    "5": "arg1"
                },
                "param_2": {
                    "1": "data",
                    "2": "record_ptr",
                    "5": "arg2",
                    "9": "param2"
                },
                "param_3": {
                    "1": "param2_ptr",
                    "10": "param3",
                    "2": "context",
                    "3": "param_3",
                    "5": "arg3"
                },
                "param_4": {
                    "1": "parameter_type",
                    "2": "param_code",
                    "3": "param_type",
                    "5": "record_type",
                    "7": "param4"
                },
                "param_5": {
                    "1": "param1_ptr",
                    "10": "param5",
                    "2": "param_value",
                    "3": "param_5",
                    "5": "arg5"
                },
                "param_6": {
                    "1": "param6_ptr",
                    "10": "param6",
                    "2": "record_value",
                    "3": "param_6",
                    "5": "arg6"
                },
                "param_7": {
                    "1": "record_flag",
                    "11": "param7",
                    "2": "param_flag",
                    "5": "arg7",
                    "6": "flags"
                },
                "plVar3": {
                    "1": "initialized_slots",
                    "12": "allocated_slots",
                    "2": "slot",
                    "4": "slot_ptr"
                },
                "record_parameter_0010bd62": {
                    "7": "record_parameter"
                },
                "record_variable_0010c05d": {
                    "7": "record_variable"
                },
                "uVar1": {
                    "1": "is_function_successful",
                    "18": "result",
                    "2": "is_valid",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010c6be",
                "FUN_0010c218",
                "FUN_0010da0b"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nbool process_parameter_00112a33(undefined8 param1,long param2,undefined8 param3,byte param4,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long result;\n  long *allocated_slots;\n  \n  if (param4 < 0x12) {\n    if (param4 != 0) {\n      switch(param4) {\n      case 1:\n        result = record_variable(param5,*(undefined8 *)(param2 + 8),param6,4,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = record_variable(param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = record_variable(param5,*(undefined8 *)(param2 + 8),param6,5,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = record_parameter(param5,*(undefined8 *)(param2 + 8),param6,1,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        result = debug_tag_type(param5,*(undefined8 *)(param2 + 8));\n        if (result == 0) {\n          return false;\n        }\n        allocated_slots = (long *)allocate_and_initialize_slots(param1,param3);\n        *allocated_slots = result;\n        break;\n      case 0xd:\n        result = initialize_debug_name_type(param5,*(undefined8 *)(param2 + 8));\n        return result != 0;\n      case 0x11:\n        result = record_parameter(param5,*(undefined8 *)(param2 + 8),param6,2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (param4 == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = record_variable(param5,*(undefined8 *)(param2 + 8),param6,1,\n                         *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "current_name": "process_parameter_00112a33",
            "entrypoint": "0x00112a33",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112a33": "process_parameter_00112a33",
                "allocate_and_initialize_slots_0010da0b": "allocate_and_initialize_slots",
                "debug_tag_type_0010c6be": "debug_tag_type",
                "initialize_debug_name_type_0010c218": "initialize_debug_name_type",
                "lVar2": "result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "plVar3": "allocated_slots",
                "record_parameter_0010bd62": "record_parameter",
                "record_variable_0010c05d": "record_variable",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112b6e": {
            "additional_data": {
                "FUN_00112b6e": {
                    "1": "debug_get_real_type",
                    "6": "find_real_type",
                    "7": "extract_real_type",
                    "8": "get_real_type"
                },
                "__format": {
                    "1": "error_msg",
                    "20": "format_string",
                    "4": "error_message_format"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "bVar5": {
                    "1": "is_last_element",
                    "2": "circular_flag",
                    "27": "is_circular"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "extract_data_001129f4": {
                    "1": "extract_data"
                },
                "fprintf": {
                    "1": "print_formatted_data"
                },
                "iVar1": {
                    "1": "data_length",
                    "2": "input_value",
                    "3": "type_value",
                    "4": "first_element",
                    "5": "value"
                },
                "local_10": {
                    "1": "output_array",
                    "2": "temp_input_array",
                    "3": "current_input"
                },
                "local_18": {
                    "1": "current_debug_info",
                    "2": "visited_debug_info",
                    "3": "temp_debug_info",
                    "4": "local_debug_info"
                },
                "param_1": {
                    "1": "debug_info",
                    "15": "input_array",
                    "2": "input_ptr",
                    "5": "input_data"
                },
                "param_2": {
                    "1": "circular_info",
                    "2": "debug_info_ptr",
                    "20": "debug_info",
                    "8": "debug_info_array"
                },
                "piVar3": {
                    "1": "output_ptr",
                    "11": "result_array",
                    "17": "result"
                },
                "plVar4": {
                    "1": "temp_debug_info",
                    "15": "current_debug_info",
                    "3": "current_element",
                    "4": "debug_ptr"
                },
                "uVar2": {
                    "1": "data_string",
                    "2": "data",
                    "8": "extracted_data"
                }
            },
            "called": [
                "fprintf",
                "FUN_001129f4",
                "FUN_00112b6e",
                "dcgettext"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_00113b1e",
                "FUN_0010ee3f",
                "FUN_0010922b"
            ],
            "code": "\n\n\nint * get_real_type_00112b6e(int *input_array,long *debug_info)\n\n{\n  int value;\n  undefined8 extracted_data;\n  char *format_string;\n  int *result;\n  long *current_debug_info;\n  bool is_circular;\n  long *local_debug_info;\n  int *current_input;\n  \n  value = *input_array;\n  if ((value != 1) && (1 < value - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      extracted_data = extract_data(input_array,\"debug_get_real_type_00112b6e: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(error_stream,format_string,extracted_data);\n      return (int *)0x0;\n    }\n  }\n  local_debug_info = debug_info;\n  current_input = input_array;\n  if (value - 0x16U < 2) {\n    result = (int *)get_real_type_00112b6e((*(undefined8 **)(input_array + 4))[1],&local_debug_info);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result) {\n    return input_array;\n  }\n  if (result == (int *)0x0) {\n    return input_array;\n  }\n  result = (int *)get_real_type_00112b6e(result,&local_debug_info);\n  return result;\n}\n\n",
            "current_name": "get_real_type_00112b6e",
            "entrypoint": "0x00112b6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "__format": "format_string",
                "_stderr": "error_stream",
                "bVar5": "is_circular",
                "dcgettext": "get_translated_string",
                "extract_data_001129f4": "extract_data",
                "fprintf": "print_formatted_data",
                "iVar1": "value",
                "local_10": "current_input",
                "local_18": "local_debug_info",
                "param_1": "input_array",
                "param_2": "debug_info",
                "piVar3": "result",
                "plVar4": "current_debug_info",
                "uVar2": "extracted_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112c1f": {
            "additional_data": {
                "FUN_00112c1f": {
                    "1": "process_data_structure"
                },
                "bVar14": {
                    "1": "flag_b_var14",
                    "15": "bool_var",
                    "2": "bool_var1"
                },
                "cVar5": {
                    "1": "char_var5",
                    "15": "char_var",
                    "7": "flag"
                },
                "iVar9": {
                    "1": "var4",
                    "2": "index",
                    "4": "i_var",
                    "7": "int_var"
                },
                "lVar2": {
                    "1": "type",
                    "2": "var",
                    "3": "long_var2",
                    "5": "var1",
                    "6": "long_var"
                },
                "local_3c": {
                    "1": "temporary_variable",
                    "15": "local_var",
                    "2": "local_3c"
                },
                "param_1": {
                    "1": "data",
                    "2": "param",
                    "3": "info",
                    "4": "param1",
                    "7": "input_param"
                },
                "param_2": {
                    "1": "input2",
                    "2": "param",
                    "4": "output_param",
                    "8": "param2"
                },
                "param_3": {
                    "1": "input_data",
                    "2": "type_info",
                    "7": "param3"
                },
                "param_4": {
                    "1": "class_id",
                    "2": "param_4",
                    "3": "target_param",
                    "8": "param4"
                },
                "piVar6": {
                    "1": "real_type",
                    "2": "ptr4",
                    "3": "ptr_to_int",
                    "4": "int_var",
                    "5": "int_ptr"
                },
                "plVar1": {
                    "1": "pointer_to_structure",
                    "2": "pointer_1",
                    "3": "pointer_var",
                    "4": "pointer_var1",
                    "5": "ptr1"
                },
                "puVar3": {
                    "1": "pointer_to_data",
                    "2": "pointer_2",
                    "3": "ptr_to_u_var3",
                    "4": "pointer_var3",
                    "6": "ptr2"
                },
                "puVar4": {
                    "1": "ptr_variable4",
                    "2": "pointer_3",
                    "3": "ptr_to_u_var4",
                    "4": "pointer_var4",
                    "6": "ptr3"
                },
                "uVar10": {
                    "1": "undefined_var2",
                    "3": "u_var",
                    "4": "uint_var",
                    "5": "u_var10"
                },
                "uVar11": {
                    "1": "undefined_var3",
                    "2": "u_var2",
                    "3": "var3",
                    "5": "u_var11"
                },
                "uVar12": {
                    "1": "temp_u_var12",
                    "2": "u_var3",
                    "5": "u_var12"
                },
                "uVar13": {
                    "1": "uint_var_2",
                    "2": "u_var4",
                    "5": "u_var13"
                },
                "uVar14": {
                    "1": "tmp_var6"
                },
                "uVar7": {
                    "1": "new_value1",
                    "16": "result",
                    "3": "result_var"
                },
                "uVar8": {
                    "1": "temp1",
                    "2": "result2",
                    "5": "u_var8"
                }
            },
            "called": [
                "fprintf",
                "FUN_00112c1f",
                "FUN_00109d3e",
                "FUN_00109bbb",
                "FUN_0010add5",
                "FUN_0010a83e",
                "FUN_00109dfe",
                "FUN_0010a181",
                "FUN_0010ae0e",
                "FUN_0010c7a0",
                "FUN_0010b948",
                "FUN_0010b800",
                "__assert_fail",
                "FUN_0010a2b9",
                "FUN_0010ab4d",
                "FUN_0010a0e9",
                "FUN_0010bba1",
                "FUN_0010a69a",
                "FUN_00109e76",
                "FUN_0010a77a",
                "FUN_0010adf2",
                "FUN_0010a94e",
                "FUN_00112b6e",
                "FUN_0010e5db",
                "FUN_0010a0a0",
                "FUN_0010a0bd",
                "FUN_0010aa53",
                "FUN_0010a083",
                "FUN_0010a377",
                "FUN_0010ba08",
                "FUN_0010a0d3",
                "dcgettext",
                "FUN_0010a424",
                "FUN_00109d97",
                "FUN_00109d5c",
                "FUN_0010e453",
                "abort"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_001135a5"
            ],
            "code": "\n\n\nundefined8 process_data_structure_00112c1f(ulong input_param,undefined8 param2,int *param3,long param4)\n\n{\n  long *ptr1;\n  long long_var;\n  undefined8 *ptr2;\n  undefined8 *ptr3;\n  char char_var;\n  int *int_ptr;\n  undefined8 result;\n  undefined8 u_var8;\n  int int_var;\n  undefined4 u_var10;\n  undefined8 u_var11;\n  ulong u_var12;\n  uint u_var13;\n  bool bool_var;\n  uint local_var;\n  \n  u_var12 = input_param;\nLAB_00112c39:\n  if (param3 != (int *)0x0) {\n    int_var = *param3;\n    if (int_var - 0x16U < 2) {\n      do {\n        ptr1 = *(long **)(param3 + 4);\n        u_var13 = *(uint *)(input_param + 0x30);\n        u_var12 = (ulong)u_var13;\n        long_var = *ptr1;\n        if (*(uint *)(long_var + 0x10) == u_var13) {\n          if (int_var == 0x16) {\n            result = lookup_and_initialize_data_structure_0010bba1(param2,*(undefined8 *)(long_var + 8));\n            return result;\n          }\nLAB_00112c94:\n          int_ptr = (int *)get_real_type_00112b6e(param3,0);\n          if (int_ptr == (int *)0x0) goto LAB_00112dd6;\n          if ((*int_ptr - 7U < 4) && (*(long *)(int_ptr + 4) != 0)) {\n            if ((*(uint *)(*(long *)(int_ptr + 4) + 0xc) <= *(uint *)(input_param + 0x38)) &&\n               (char_var = set_class_id_0010c7a0(input_param,*(undefined8 *)(**(long **)(param3 + 4) + 8),int_ptr),\n               char_var == '\\0')) {\n              return 0;\n            }\n            u_var13 = *(uint *)(*(long *)(int_ptr + 4) + 0xc);\n          }\n          else {\n            u_var13 = 0;\n          }\n          int_var = *int_ptr;\n          result = *(undefined8 *)(**(long **)(param3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (int_var == 0x17) {\n          if (long_var != param4) goto LAB_00112c94;\n          *(uint *)(param4 + 0x10) = u_var13;\n          param4 = *ptr1;\n          param3 = (int *)ptr1[1];\n          goto LAB_00112c39;\n        }\n        if (param4 != 0) {\n          *(uint *)(param4 + 0x10) = u_var13;\n        }\n        param3 = (int *)ptr1[1];\n        if (param3 == (int *)0x0) goto LAB_00112dd6;\n        int_var = *param3;\n        param4 = 0;\n      } while (int_var - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (param4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param4 + 0x10) = *(undefined4 *)(input_param + 0x30);\n      if (*(int *)(param4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(param4 + 8);\n    }\n    switch(int_var) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = initialize_or_increment_00109dfe(param2);\n      return result;\n    case 3:\n      result = initialize_data_structure_0010b800(param2,param3[1],*(undefined *)(param3 + 4));\n      return result;\n    case 4:\n      result = initialize_data_structure_0010b948(param2,param3[1]);\n      return result;\n    case 5:\n      result = FUNC_00109e76(param2,param3[1]);\n      return result;\n    case 6:\n      result = initialize_data_structure_00109d3e(param2,param3[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(param3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(input_param + 0x38)) &&\n           (char_var = set_class_id_0010c7a0(input_param,result,param3), char_var == '\\0')) {\n          return 0;\n        }\n        long_var = *(long *)(param3 + 4);\n        if (*(int *)(input_param + 0x30) == *(int *)(long_var + 8)) {\n          u_var13 = *(uint *)(long_var + 0xc);\n          if (u_var13 <= *(uint *)(input_param + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          int_var = *param3;\nLAB_00112ed2:\n          result = initialize_data_structure_00109d5c(param2,result,u_var13,int_var);\n          return result;\n        }\n        *(int *)(long_var + 8) = *(int *)(input_param + 0x30);\n      }\n      u_var10 = 0;\n      if (*(long *)(param3 + 4) != 0) {\n        u_var10 = *(undefined4 *)(*(long *)(param3 + 4) + 0xc);\n      }\n      char_var = initialize_data_structure_0010a69a(param2,result,u_var10,*param3 == 7,param3[1]);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param3 + 4) != (long *)0x0) && (u_var12 = 0, **(long **)(param3 + 4) != 0)) {\n        while( true ) {\n          ptr3 = *(undefined8 **)(**(long **)(param3 + 4) + u_var12 * 8);\n          if (ptr3 == (undefined8 *)0x0) break;\n          char_var = process_data_structure_00112c1f(input_param,param2,ptr3[1],0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n          char_var = generate_warning_message_0010ba08(param2,*ptr3,*(undefined4 *)(ptr3 + 3),\n                               *(undefined4 *)((long)ptr3 + 0x1c),*(undefined4 *)(ptr3 + 2));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          u_var12 = (ulong)((int)u_var12 + 1);\n        }\n      }\n      result = process_data_0010a77a(param2);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(param3 + 4) == 0) {\n        u_var13 = 0;\n        int_ptr = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(input_param + 0x38)) &&\n           (u_var12 = input_param, char_var = set_class_id_0010c7a0(input_param,result,param3), char_var == '\\0')) {\n          return 0;\n        }\n        long_var = *(long *)(param3 + 4);\n        u_var13 = *(uint *)(long_var + 0xc);\n        if (*(int *)(input_param + 0x30) == *(int *)(long_var + 8)) {\n          if (u_var13 <= *(uint *)(input_param + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          int_var = *param3;\n          goto LAB_00112ed2;\n        }\n        int_ptr = *(int **)(long_var + 0x20);\n        *(int *)(long_var + 8) = *(int *)(input_param + 0x30);\n        if (((int_ptr != (int *)0x0) && (param3 != int_ptr)) &&\n           (u_var12 = input_param, char_var = process_data_structure_00112c1f(input_param,param2,int_ptr,0), char_var == '\\0')) {\n          return 0;\n        }\n      }\n      char_var = process_data_0010a83e(param2,result,u_var13,*param3 == 9,param3[1],int_ptr != (int *)0x0,\n                           param3 == int_ptr,u_var12);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param3 + 4) != (long *)0x0) {\n        u_var13 = 0;\n        if (**(long **)(param3 + 4) != 0) {\n          while (ptr3 = *(undefined8 **)(**(long **)(param3 + 4) + (ulong)u_var13 * 8),\n                ptr3 != (undefined8 *)0x0) {\n            char_var = process_data_structure_00112c1f(input_param,param2,ptr3[1],0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr3 + 0x14) == '\\0') {\n              char_var = generate_warning_message_0010ba08(param2,*ptr3,*(undefined4 *)(ptr3 + 3));\n            }\n            else {\n              char_var = format_and_store_data_0010a94e(param2,*ptr3,ptr3[3]);\n            }\n            if (char_var == '\\0') {\n              return 0;\n            }\n            u_var13 = u_var13 + 1;\n          }\n        }\n        u_var13 = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x10) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x10) + (ulong)u_var13 * 8),\n                ptr3 != (undefined8 *)0x0) {\n            char_var = process_data_structure_00112c1f(input_param,param2,*ptr3,0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            char_var = process_data_0010aa53(param2,*(undefined4 *)(ptr3 + 1),\n                                 *(undefined *)((long)ptr3 + 0xc));\n            if (char_var == '\\0') {\n              return 0;\n            }\n            u_var13 = u_var13 + 1;\n          }\n        }\n        local_var = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x18) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x18) + (ulong)local_var * 8),\n                ptr3 != (undefined8 *)0x0) {\n            char_var = update_string_0010ab4d(param2,*ptr3);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            u_var13 = 0;\n            while (ptr2 = *(undefined8 **)(ptr3[1] + (ulong)u_var13 * 8),\n                  ptr2 != (undefined8 *)0x0) {\n              if ((ptr2[4] != 0) &&\n                 (char_var = process_data_structure_00112c1f(input_param,param2,ptr2[4],0), char_var == '\\0')) {\n                return 0;\n              }\n              char_var = process_data_structure_00112c1f(input_param,param2,ptr2[1],0);\n              if (char_var == '\\0') {\n                return 0;\n              }\n              if (ptr2[3] == -1) {\n                char_var = process_data_0010adf2(param2,*ptr2,*(undefined4 *)(ptr2 + 2),\n                                     *(undefined *)((long)ptr2 + 0x14),\n                                     *(undefined *)((long)ptr2 + 0x15));\n              }\n              else {\n                char_var = process_data_0010add5(param2);\n              }\n              if (char_var == '\\0') {\n                return 0;\n              }\n              u_var13 = u_var13 + 1;\n            }\n            char_var = append_semicolon_to_string_00109bbb(param2);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            local_var = local_var + 1;\n          }\n        }\n      }\n      result = concatenate_strings_0010ae0e(param2);\n      return result;\n    case 0xb:\n      ptr3 = *(undefined8 **)(param3 + 4);\n      if (ptr3 == (undefined8 *)0x0) {\n        u_var8 = 0;\n        u_var11 = 0;\n      }\n      else {\n        u_var8 = ptr3[1];\n        u_var11 = *ptr3;\n      }\n      result = initialize_data_structure_0010e453(param2,result,u_var11,u_var8);\n      return result;\n    case 0xc:\n      char_var = process_data_structure_00112c1f(input_param,param2,*(undefined8 *)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a083(param2);\n      return result;\n    case 0xd:\n      char_var = process_data_structure_00112c1f(input_param,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      u_var12 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 8) == 0) {\n        u_var12 = 0xffffffff;\n      }\n      else {\n        while (long_var = *(long *)(*(long *)(*(long *)(param3 + 4) + 8) + u_var12 * 8), long_var != 0) {\n          u_var12 = u_var12 + 1;\n          char_var = process_data_structure_00112c1f(input_param,param2,long_var,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        u_var12 = u_var12 & 0xffffffff;\n      }\n      result = process_data_0010e5db(param2,u_var12,*(undefined *)(*(long *)(param3 + 4) + 0x10));\n      return result;\n    case 0xe:\n      char_var = process_data_structure_00112c1f(input_param,param2,*(undefined8 *)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0a0(param2);\n      return result;\n    case 0xf:\n      char_var = process_data_structure_00112c1f(input_param,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_request_0010a0e9(param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),\n                           *(undefined8 *)(*(long *)(param3 + 4) + 0x10));\n      return result;\n    case 0x10:\n      char_var = process_data_structure_00112c1f(input_param,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = process_data_structure_00112c1f(input_param,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      long_var = *(long *)(param3 + 4);\n      result = process_data_0010a181(param2,*(undefined8 *)(long_var + 0x10),*(undefined8 *)(long_var + 0x18),\n                           *(undefined *)(long_var + 0x20));\n      return result;\n    case 0x11:\n      char_var = process_data_structure_00112c1f(input_param,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a2b9(param2,*(undefined *)(*(long *)(param3 + 4) + 8));\n      return result;\n    case 0x12:\n      char_var = process_data_structure_00112c1f(input_param,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = process_data_structure_00112c1f(input_param,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a377(param2);\n      return result;\n    case 0x13:\n      char_var = process_data_structure_00112c1f(input_param,param2,**(undefined8 **)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      u_var12 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 0x10) == 0) {\n        u_var12 = 0xffffffff;\n      }\n      else {\n        while (long_var = *(long *)(*(long *)(*(long *)(param3 + 4) + 0x10) + u_var12 * 8), long_var != 0)\n        {\n          u_var12 = u_var12 + 1;\n          char_var = process_data_structure_00112c1f(input_param,param2,long_var,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param3 + 4) + 8) != 0) &&\n         (char_var = process_data_structure_00112c1f(input_param,param2,*(long *)(*(long *)(param3 + 4) + 8),0),\n         char_var == '\\0')) {\n        return 0;\n      }\n      result = process_data_0010a424(param2,*(long *)(*(long *)(param3 + 4) + 8) != 0,u_var12 & 0xffffffff,\n                           *(undefined *)(*(long *)(param3 + 4) + 0x18));\n      return result;\n    case 0x14:\n      char_var = process_data_structure_00112c1f(input_param,param2,*(undefined8 *)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0bd(param2);\n      return result;\n    case 0x15:\n      char_var = process_data_structure_00112c1f(input_param,param2,*(undefined8 *)(param3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0d3(param2);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bool_var = *(int **)**(undefined8 **)(param3 + 4) == param3;\n  param3 = *(int **)**(undefined8 **)(param3 + 4);\n  if (bool_var) {\nLAB_00112dd6:\n    result = initialize_or_increment_data_structure_00109d97(param2);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "current_name": "process_data_structure_00112c1f",
            "entrypoint": "0x00112c1f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112c1f": "process_data_structure_00112c1f",
                "bVar14": "bool_var",
                "cVar5": "char_var",
                "iVar9": "int_var",
                "lVar2": "long_var",
                "local_3c": "local_var",
                "param_1": "input_param",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar6": "int_ptr",
                "plVar1": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar10": "u_var10",
                "uVar11": "u_var11",
                "uVar12": "u_var12",
                "uVar13": "u_var13",
                "uVar7": "result",
                "uVar8": "u_var8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001135a5": {
            "additional_data": {
                "<FUN_001135a5>": {
                    "1": "<process_input>"
                },
                "<cVar2>": {
                    "1": "<result>"
                },
                "<iVar1>": {
                    "1": "<file_count>"
                },
                "<param_1>": {
                    "1": "<input_stream>"
                },
                "<param_2>": {
                    "1": "<output_stream>"
                },
                "<param_3>": {
                    "1": "<data_structure>"
                },
                "<puVar4>": {
                    "1": "<current_node>"
                },
                "<puVar5>": {
                    "1": "<head_node>"
                },
                "<uVar3>": {
                    "1": "<processed_result>"
                },
                "FUN_001135a5": {
                    "1": "process_and_return_result",
                    "23": "process_data",
                    "6": "process_function"
                },
                "cVar2": {
                    "1": "is_successful",
                    "10": "result",
                    "2": "condition",
                    "3": "char_value",
                    "5": "flag"
                },
                "iVar1": {
                    "1": "i_var1",
                    "10": "index",
                    "2": "variable1",
                    "3": "counter",
                    "4": "count",
                    "5": "int_value"
                },
                "param_1": {
                    "1": "input_param1",
                    "17": "input1",
                    "2": "data1",
                    "3": "input_1",
                    "5": "arg1"
                },
                "param_2": {
                    "1": "input_param2",
                    "17": "input2",
                    "2": "data2",
                    "3": "input_2",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "input_param3",
                    "14": "data",
                    "2": "param",
                    "5": "arg3"
                },
                "puVar4": {
                    "1": "pointer_variable1",
                    "19": "ptr1",
                    "2": "current_ptr",
                    "3": "current_node"
                },
                "puVar5": {
                    "1": "pointer_var2",
                    "19": "ptr2"
                },
                "uVar3": {
                    "1": "output_variable",
                    "16": "result",
                    "6": "return_value",
                    "7": "output"
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_00112c1f",
                "FUN_0010e9a0",
                "FUN_00113a4d",
                "FUN_0010e8a9",
                "FUN_0010ebb0",
                "FUN_0010e7c2",
                "FUN_00108f05",
                "FUN_0010e918",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010e6a8",
                "abort"
            ],
            "calling": [
                "FUN_0011378f",
                "FUN_00113a4d"
            ],
            "code": "\nundefined8 process_data_001135a5(undefined8 input1,undefined8 input2,long data)\n\n{\n  int index;\n  char result;\n  undefined8 result;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    result = process_data_001135a5_structure_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      result = process_and_store_string_0010e6a8(input2,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 1:\n    result = process_data_001135a5_structure_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      result = process_and_format_string_0010e7c2(input2,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 2:\n    result = process_data_001135a5_structure_00112c1f(input1,input2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (result != '\\0') {\n      result = process_string_0010e9a0(input2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(data + 0x20);\n    index = *(int *)(data + 0x18);\n    result = *(undefined8 *)(data + 8);\n    result = process_files_00112502(input1,input2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((result != '\\0') && (result = process_data_001135a5_structure_00112c1f(input1,input2,*ptr2,0), result != '\\0')) &&\n       (result = process_string_0010eafe(input2,result,index == 2), result != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        result = process_data_001135a5_structure_00112c1f(input1,input2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = process_and_free_string_0010ebb0(input2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          result = get_one_00108f05(input2);\n          return result;\n        }\n        result = process_files_recursive_00113a4d(input1,input2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    result = process_and_format_string_0010e842(input2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return result;\n  case 5:\n    result = process_and_free_string_0010e8a9(*(undefined8 *)(data + 0x20),input2,*(undefined8 *)(data + 8));\n    return result;\n  case 6:\n    result = process_data_001135a5_structure_00112c1f(input1,input2,**(undefined8 **)(data + 0x20),0);\n    if (result != '\\0') {\n      result = process_and_free_string_0010e918(input2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = process_data_structure_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_store_string_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = process_data_structure_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_format_string_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = process_data_structure_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_string_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = process_files_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = process_data_structure_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_string_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = process_data_structure_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_and_free_string_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = get_one_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = process_and_format_string_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = process_and_free_string_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = process_data_structure_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_free_string_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_001135a5",
            "entrypoint": "0x001135a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "cVar2": "result",
                "iVar1": "index",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "puVar4": "ptr1",
                "puVar5": "ptr2",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011378f": {
            "additional_data": {
                "FUNC_001135a5": {
                    "1": "process_function_1"
                },
                "FUN_0011378f": {
                    "1": "analyze_input"
                },
                "__dest": {
                    "1": "destination_str",
                    "11": "destination",
                    "2": "dest_ptr",
                    "3": "destination_ptr",
                    "8": "destination_string"
                },
                "auVar1": {
                    "1": "hash_value",
                    "13": "temp_array",
                    "2": "temporary_array",
                    "4": "temp_buffer"
                },
                "bVar12": {
                    "1": "temp_byte",
                    "13": "flag",
                    "2": "boolean_flag",
                    "4": "byte_var"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_error"
                },
                "bfd_hash_table_init": {
                    "1": "initialize_hash_table"
                },
                "cVar2": {
                    "1": "char_val",
                    "2": "result_char",
                    "3": "char_var",
                    "6": "status",
                    "8": "result"
                },
                "create_hash_function_0010bb52": {
                    "1": "create_hash_function"
                },
                "lVar11": {
                    "1": "pl_var"
                },
                "lVar7": {
                    "1": "loop_index",
                    "13": "loop_counter",
                    "2": "counter",
                    "7": "loop_variable"
                },
                "local_1e8": {
                    "1": "var_10",
                    "2": "local_array_3"
                },
                "local_1f0": {
                    "1": "flag_value",
                    "5": "var7"
                },
                "local_1f8": {
                    "1": "flag_value",
                    "5": "var6"
                },
                "local_220": {
                    "1": "local_array_1",
                    "2": "local_array_2",
                    "3": "hash_table_1",
                    "6": "hash_table1"
                },
                "local_228": {
                    "1": "flag_value",
                    "5": "var5"
                },
                "local_238": {
                    "1": "local_array_1",
                    "2": "var_array"
                },
                "local_248": {
                    "1": "data1",
                    "2": "local_variable_1",
                    "6": "var1"
                },
                "local_250": {
                    "1": "input2",
                    "2": "buffer_size",
                    "8": "allocated_memory"
                },
                "local_258": {
                    "1": "input1",
                    "2": "input_data",
                    "3": "input_files_ptr"
                },
                "local_58": {
                    "1": "loop_var4",
                    "3": "var11"
                },
                "local_60": {
                    "1": "flag_value",
                    "3": "var10"
                },
                "local_68": {
                    "1": "flag_value",
                    "3": "var9"
                },
                "local_78": {
                    "1": "var_10",
                    "2": "var8"
                },
                "local_a0": {
                    "1": "temp_buf2",
                    "2": "local_array_4",
                    "4": "hash_table2"
                },
                "param_1": {
                    "1": "input_array_1",
                    "2": "output_buffer",
                    "3": "input_param_1",
                    "4": "input_files",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "stats",
                    "2": "output_stats",
                    "3": "input_param_2",
                    "6": "output_param"
                },
                "param_3": {
                    "1": "buffer_length",
                    "2": "output_param_1",
                    "3": "result"
                },
                "param_4": {
                    "1": "output_hashes",
                    "2": "hash_value",
                    "3": "hash_table"
                },
                "param_5": {
                    "1": "file_names",
                    "2": "string_list",
                    "3": "string_param"
                },
                "param_6": {
                    "1": "version_ptr",
                    "2": "param_6",
                    "4": "result"
                },
                "plVar11": {
                    "1": "ptr2",
                    "2": "linked_list_iterator"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error_message"
                },
                "process_files_00112502": {
                    "1": "process_files"
                },
                "process_string_0010e2f0": {
                    "1": "process_string"
                },
                "puVar10": {
                    "1": "ptr_temp_1",
                    "2": "ptr4"
                },
                "puVar5": {
                    "1": "pointer_value",
                    "2": "buffer",
                    "3": "ptr",
                    "4": "temp_ptr"
                },
                "puVar8": {
                    "1": "loop_ptr",
                    "2": "ptr",
                    "3": "ptr2"
                },
                "puVar9": {
                    "1": "new_pointer2",
                    "2": "ptr3",
                    "3": "array_ptr",
                    "4": "pointer_array"
                },
                "sVar6": {
                    "1": "length_var",
                    "2": "str_length",
                    "22": "string_length",
                    "4": "length"
                },
                "set_param_and_process_string_0010e439": {
                    "1": "set_param_and_process_string"
                },
                "strcpy": {
                    "1": "copy_string"
                },
                "thunk_set_param_and_process_string_0010e439": {
                    "1": "thunk_set_param_and_process_string"
                },
                "uStack_23c": {
                    "1": "local_variable_5",
                    "2": "local_variable_4",
                    "5": "var4"
                },
                "uStack_240": {
                    "1": "local_var_3",
                    "2": "local_variable_3",
                    "5": "var3"
                },
                "uStack_244": {
                    "1": "input4",
                    "2": "var_2",
                    "5": "var2"
                },
                "uStack_4c": {
                    "1": "flag_value",
                    "3": "var14"
                },
                "uStack_50": {
                    "1": "param18_local",
                    "3": "var13"
                },
                "uStack_54": {
                    "1": "input19",
                    "3": "var12"
                },
                "uStack_70": {
                    "1": "flag_value",
                    "2": "var8"
                },
                "uVar3": {
                    "1": "error_var",
                    "24": "error_code",
                    "3": "error"
                },
                "uVar4": {
                    "1": "errmsg_var",
                    "24": "error_message",
                    "4": "error_msg"
                },
                "unique0x100000e9": {
                    "1": "unique1"
                },
                "unique0x100000ed": {
                    "1": "unique2"
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_00119ed0",
                "bfd_errmsg",
                "FUN_001135a5",
                "FUN_0010e439",
                "xmalloc",
                "FUN_0010bb52",
                "strcpy",
                "FUN_0010e2f0",
                "bfd_hash_table_init",
                "bfd_get_error",
                "thunk_FUN_0010e439",
                "strlen"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined4\nanalyze_input_0011378f(undefined8 *input_param,undefined8 *output_param,long *output_length,undefined8 *hash_table,\n            undefined8 *string_param,undefined8 *result)\n\n{\n  undefined temp_array [16];\n  char result;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *temp_ptr;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *inner_pointer;\n  undefined4 *pointer_array;\n  char *destination;\n  undefined8 *ptr4;\n  long *linked_list_iterator;\n  byte flag;\n  undefined8 *input_ptr;\n  long allocated_memory;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined var_array [16];\n  undefined8 var5;\n  undefined hash_table1 [40];\n  undefined8 var6;\n  undefined8 var7;\n  undefined4 local_array_2 [82];\n  undefined hash_table2 [40];\n  undefined local_array_5 [8];\n  undefined8 var8;\n  undefined8 var9;\n  undefined4 var10;\n  undefined4 var11;\n  undefined4 var12;\n  undefined4 var13;\n  undefined4 var14;\n  \n  flag = 0;\n  var1 = 0;\n  var2 = 0;\n  var3 = 500;\n  var4 = 0;\n  input_ptr = input_param;\n  allocated_memory = xmalloc(500);\n  var5 = 1;\n  var_array = ZEXT816(0);\n  result = bfd_hash_table_init(hash_table1,create_hash_function,0x30);\n  if ((result == '\\0') || (result = bfd_hash_table_init(hash_table2,create_hash_function,0x30), result == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    print_error_message(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    var6 = 0;\n    unique1 = 0xffffffff;\n    local_array_5 = (undefined  [8])0xffffffffffffffff;\n    unique2 = 0xffffffff;\n    pointer_array = local_array_2;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *pointer_array = 0;\n      pointer_array = pointer_array + (ulong)flag * -2 + 1;\n    }\n    var9 = 0;\n    var10 = 0;\n    var7 = 1;\n    var11 = 0;\n    var12 = 0;\n    var13 = 0xffffffff;\n    var14 = 0xffffffff;\n    result = process_string(&input_ptr,0,0,0,0);\n    temp_array = _local_array_5;\n    if (result != '\\0') {\n      local_array_5._4_4_ = var2;\n      local_array_5._0_4_ = var1;\n      var8 = temp_array._8_8_;\n      result = process_string(&input_ptr,100,0,0,*input_param);\n      if (result != '\\0') {\n        *(int *)(output_param + 6) = *(int *)(output_param + 6) + 1;\n        output_param[10] = 0;\n        ptr4 = (undefined8 *)*output_param;\n        *(undefined4 *)(output_param + 7) = *(undefined4 *)((long)output_param + 0x34);\n        for (; ptr4 != (undefined8 *)0x0; ptr4 = (undefined8 *)*ptr4) {\n          output_param[8] = ptr4[2];\n          *(undefined4 *)(output_param + 9) = 0;\n          result = thunk_set_param_and_process_string(&input_ptr,*(undefined8 *)(ptr4[1] + 8));\n          if (result == '\\0') {\n            return 0;\n          }\n          linked_list_iterator = (long *)ptr4[1];\n          if (linked_list_iterator != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)linked_list_iterator[2] != (undefined8 *)0x0) {\n                for (inner_pointer = *(undefined8 **)(undefined8 *)linked_list_iterator[2]; inner_pointer != (undefined8 *)0x0;\n                    inner_pointer = (undefined8 *)*inner_pointer) {\n                  result = process_data_001135a5(output_param,&input_ptr);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              linked_list_iterator = (long *)*linked_list_iterator;\n              if (linked_list_iterator == (long *)0x0) break;\n              result = set_param_and_process_string(&input_ptr,linked_list_iterator[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = process_files(output_param,&input_ptr,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var14,var13) == -1) &&\n           (error_code = process_string(&input_ptr,100,0,var9,0), (char)error_code != '\\0')) {\n          (**(code **)(input_param[1] + 0x50))(var5,allocated_memory + 8);\n          *output_length = allocated_memory;\n          *hash_table = CONCAT44(var2,var1);\n          *result = var5;\n          temp_ptr = (undefined *)xmalloc();\n          *temp_ptr = 0;\n          destination = temp_ptr + 1;\n          *string_param = temp_ptr;\n          for (loop_counter = var_array._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(destination,*(char **)(loop_counter + 8));\n            string_length = strlen(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,create_hash_function_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,create_hash_function_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_string_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_string_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = thunk_set_param_and_process_string_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = set_param_and_process_string_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = process_files_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_string_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "analyze_input_0011378f",
            "entrypoint": "0x0011378f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011378f": "analyze_input_0011378f",
                "__dest": "destination",
                "auVar1": "temp_array",
                "bVar12": "flag",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_error",
                "bfd_hash_table_init": "initialize_hash_table",
                "cVar2": "result",
                "create_hash_function_0010bb52": "create_hash_function",
                "lVar11": "pl_var",
                "lVar7": "loop_counter",
                "local_1e8": "local_array_2",
                "local_1f0": "var7",
                "local_1f8": "var6",
                "local_220": "hash_table1",
                "local_228": "var5",
                "local_238": "var_array",
                "local_248": "var1",
                "local_250": "allocated_memory",
                "local_258": "input_ptr",
                "local_58": "var11",
                "local_60": "var10",
                "local_68": "var9",
                "local_78": "local_array_5",
                "local_a0": "hash_table2",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "output_length",
                "param_4": "hash_table",
                "param_5": "string_param",
                "param_6": "result",
                "plVar11": "linked_list_iterator",
                "print_error_message_00119ed0": "print_error_message",
                "process_files_00112502": "process_files",
                "process_string_0010e2f0": "process_string",
                "puVar10": "ptr4",
                "puVar5": "temp_ptr",
                "puVar8": "inner_pointer",
                "puVar9": "pointer_array",
                "sVar6": "string_length",
                "set_param_and_process_string_0010e439": "set_param_and_process_string",
                "strcpy": "copy_string",
                "thunk_set_param_and_process_string_0010e439": "thunk_set_param_and_process_string",
                "uStack_23c": "var4",
                "uStack_240": "var3",
                "uStack_244": "var2",
                "uStack_4c": "var14",
                "uStack_50": "var13",
                "uStack_54": "var12",
                "uStack_70": "var8",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "unique0x100000e9": "unique1",
                "unique0x100000ed": "unique2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113a4d": {
            "additional_data": {
                "FUN_00113a4d": {
                    "1": "recursive_file_processing",
                    "2": "process_and_update",
                    "3": "process_and_update_files",
                    "7": "process_files_and_data",
                    "8": "process_files_recursive"
                },
                "auVar4": {
                    "1": "result_arr",
                    "10": "file_result",
                    "2": "file_data",
                    "3": "result_array"
                },
                "cVar1": {
                    "1": "files_check",
                    "20": "result",
                    "3": "file_result"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_1",
                    "3": "file_path",
                    "4": "file_param",
                    "5": "arg1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "arg_2",
                    "4": "data_param",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "file_data_ptr",
                    "2": "arg_3",
                    "3": "file_data"
                },
                "param_4": {
                    "1": "unknown",
                    "2": "arg_4",
                    "3": "unused_param",
                    "6": "arg4"
                },
                "param_5": {
                    "1": "arg_2",
                    "2": "update_param",
                    "3": "param_5",
                    "5": "max_value",
                    "6": "arg5"
                },
                "process_data_0010ec73": {
                    "4": "process_data"
                },
                "process_data_001135a5": {
                    "1": "process_auxiliary_data"
                },
                "process_files_00112502": {
                    "1": "check_file",
                    "3": "process_files"
                },
                "puVar3": {
                    "1": "file_data_ptr",
                    "11": "ptr",
                    "2": "current_ptr",
                    "5": "file_ptr"
                },
                "uVar2": {
                    "1": "updated_max",
                    "2": "updated_max_value",
                    "4": "return_value",
                    "5": "update_result",
                    "8": "max_value",
                    "9": "updated_value"
                },
                "update_max_value_0010ed2c": {
                    "4": "update_max_value"
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_0010ed2c",
                "FUN_001135a5",
                "FUN_0010ec73",
                "FUN_00113a4d"
            ],
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "code": "\nundefined8\nprocess_files_recursive_00113a4d(undefined8 arg1,undefined8 arg2,long file_info,undefined8 arg4,\n            undefined8 arg5)\n\n{\n  char result;\n  undefined8 updated_value;\n  undefined8 *ptr;\n  undefined file_result [16];\n  \n  result = process_files(arg1,arg2,*(undefined8 *)(file_info + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(file_info + 0x28) == 0 && (*(long *)(file_info + 8) != 0)) ||\n      (result = process_data(arg2,*(undefined8 *)(file_info + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(file_info + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(file_info + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = process_auxiliary_data(arg1,arg2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(file_info + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = process_files_recursive_00113a4d(arg1,arg2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    file_result = process_files(arg1,arg2,*(undefined8 *)(file_info + 0x20));\n    if (file_result[0] != '\\0') {\n      if ((*(long *)(file_info + 0x28) == 0) && (*(long *)(file_info + 8) != 0)) {\n        return file_result._0_8_;\n      }\n      updated_value = update_max_value(arg2,*(undefined8 *)(file_info + 0x20),file_result._8_8_,arg5);\n      return updated_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_files_recursive_00113a4d",
            "entrypoint": "0x00113a4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113a4d": "process_files_recursive_00113a4d",
                "auVar4": "file_result",
                "cVar1": "result",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "file_info",
                "param_4": "arg4",
                "param_5": "arg5",
                "process_data_0010ec73": "process_data",
                "process_data_001135a5": "process_auxiliary_data",
                "process_files_00112502": "process_files",
                "puVar3": "ptr",
                "uVar2": "updated_value",
                "update_max_value_0010ed2c": "update_max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b1e": {
            "additional_data": {
                "FUN_00113b1e": {
                    "1": "extracted_data",
                    "2": "get_value_from_ptr",
                    "3": "extract_value_from_binary",
                    "4": "extract_data",
                    "5": "get_real_type"
                },
                "auVar1": {
                    "1": "result1",
                    "2": "default_result"
                },
                "auVar4": {
                    "1": "output_value2",
                    "2": "output2",
                    "4": "final_result",
                    "5": "result"
                },
                "param_1": {
                    "1": "input_parameter",
                    "2": "input_data",
                    "3": "input",
                    "5": "binary_address",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "data_offset",
                    "12": "unused_param",
                    "2": "unused_parameter",
                    "3": "unused"
                },
                "param_3": {
                    "1": "param3",
                    "2": "data",
                    "3": "output_value",
                    "7": "default_value"
                },
                "param_4": {
                    "1": "result_ptr",
                    "2": "unused",
                    "4": "result"
                },
                "piVar2": {
                    "1": "structure_ptr",
                    "2": "real_type_pointer",
                    "3": "type_info_ptr",
                    "6": "type_info",
                    "8": "real_type",
                    "9": "real_type_ptr"
                },
                "uVar3": {
                    "1": "value_from_real_type",
                    "13": "result",
                    "2": "extracted_data",
                    "6": "extracted_value"
                }
            },
            "called": [
                "FUN_00112b6e"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "code": "\nundefined  [16] get_real_type_00113b1e(long input_param,undefined8 unused_param,ulong default_value,undefined8 result)\n\n{\n  undefined result [16];\n  int *real_type_ptr;\n  undefined8 result;\n  undefined result [16];\n  \n  if (input_param != 0) {\n    real_type_ptr = (int *)get_real_type_00113b1e_00112b6e(input_param,0);\n    if ((real_type_ptr == (int *)0x0) || (3 < *real_type_ptr - 7U)) {\n      result = 0;\n    }\n    else {\n      result = **(undefined8 **)(real_type_ptr + 4);\n    }\n    result._8_8_ = result;\n    result._0_8_ = result;\n    return result;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = default_value;\n  return result << 0x40;\n}\n\n",
            "current_name": "get_real_type_00113b1e",
            "entrypoint": "0x00113b1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b1e": "get_real_type_00113b1e",
                "auVar1": "result",
                "auVar4": "result",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "result",
                "piVar2": "real_type_ptr",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b4a": {
            "additional_data": {
                "0x10": {
                    "1": "offset"
                },
                "0x15": {
                    "1": "constant_size"
                },
                "FUN_00113b4a": {
                    "1": "initialize_data_if_param_not_zero",
                    "16": "initialize_data",
                    "5": "initialize_data_with_param"
                },
                "initialize_data_00112904": {
                    "1": "initialize_data_helper"
                },
                "lVar1": {
                    "1": "data_initialized",
                    "13": "data_ptr",
                    "4": "initialized_data",
                    "8": "data_pointer"
                },
                "param_1": {
                    "1": "input_parameter",
                    "19": "input_value",
                    "2": "input_data",
                    "5": "input_param"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_data_00113b4a(long input_value)\n\n{\n  long data_ptr;\n  \n  if (input_value != 0) {\n    data_ptr = initialize_data_00113b4a_helper(0x15,0);\n    if (data_ptr == 0) {\n      data_ptr = 0;\n    }\n    else {\n      *(long *)(data_ptr + 0x10) = input_value;\n    }\n    return data_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_data_00113b4a",
            "entrypoint": "0x00113b4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b4a": "initialize_data_00113b4a",
                "initialize_data_00112904": "initialize_data_helper",
                "lVar1": "data_ptr",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b71": {
            "additional_data": {
                "0x14": {
                    "1": "data_size"
                },
                "FUN_00113b71": {
                    "1": "initialize_data_if_not_zero",
                    "2": "initialize_data_for_param",
                    "21": "initialize_data",
                    "3": "initialize_data_from_param"
                },
                "initialize_data_00112904": {
                    "1": "initialize_data"
                },
                "lVar1": {
                    "1": "data_initialized",
                    "2": "initialized_data",
                    "22": "data_ptr",
                    "4": "data_pointer"
                },
                "param_1": {
                    "1": "input_data",
                    "18": "input_value",
                    "4": "data",
                    "5": "input_param"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_data_00113b71(long input_value)\n\n{\n  long data_ptr;\n  \n  if (input_value != 0) {\n    data_ptr = initialize_data_00113b71(0x14,0);\n    if (data_ptr == 0) {\n      data_ptr = 0;\n    }\n    else {\n      *(long *)(data_ptr + 0x10) = input_value;\n    }\n    return data_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_data_00113b71",
            "entrypoint": "0x00113b71",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b71": "initialize_data_00113b71",
                "initialize_data_00112904": "initialize_data",
                "lVar1": "data_ptr",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b98": {
            "additional_data": {
                "FUN_00113b98": {
                    "1": "initialize_data_structure",
                    "13": "initialize_data",
                    "2": "initialize_and_allocate",
                    "4": "initialize_data_and_allocate_memory",
                    "7": "initialize_and_store_data"
                },
                "lVar1": {
                    "1": "allocated_memory",
                    "2": "data_structure_ptr",
                    "4": "data_pointer",
                    "5": "data_ptr",
                    "6": "data_initialized",
                    "9": "initialized_data"
                },
                "param_1": {
                    "1": "data",
                    "2": "data1",
                    "3": "data_param",
                    "4": "input_value",
                    "6": "input_1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "2": "data2",
                    "4": "param_2",
                    "6": "input_2"
                },
                "param_3": {
                    "1": "param3_value",
                    "2": "tertiary_value",
                    "4": "third_param",
                    "6": "input_3"
                },
                "param_4": {
                    "1": "data_fourth_param",
                    "2": "data4",
                    "4": "param_4",
                    "5": "undefined_param",
                    "6": "input_4"
                },
                "plVar2": {
                    "1": "allocated_memory_pointer",
                    "14": "allocated_memory",
                    "2": "data_array",
                    "3": "new_data_ptr",
                    "7": "allocated_data"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_data_00113b98(long input_1,long input_2,long input_3,undefined input_4)\n\n{\n  long initialized_data;\n  long *allocated_memory;\n  \n  if ((input_1 != 0) && (initialized_data = initialize_data_00113b98_00112904(0x13,0), initialized_data != 0)) {\n    allocated_memory = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocated_memory + 0x19) = 0;\n    *allocated_memory = input_1;\n    *(undefined4 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[1] = input_2;\n    allocated_memory[2] = input_3;\n    *(undefined *)(allocated_memory + 3) = input_4;\n    *(long **)(initialized_data + 0x10) = allocated_memory;\n    return initialized_data;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_data_00113b98",
            "entrypoint": "0x00113b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b98": "initialize_data_00113b98",
                "lVar1": "initialized_data",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "plVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113bfa": {
            "additional_data": {
                "*plVar2": {
                    "1": "dynamic_array"
                },
                "FUN_00113bfa": {
                    "1": "initialize_data_and_return_pointer",
                    "11": "initialize_and_store_data",
                    "2": "initialize_data_and_allocate_memory",
                    "4": "initialize_data",
                    "6": "create_data_structure"
                },
                "initialize_data_00112904": {
                    "2": "initialize_data"
                },
                "lVar1": {
                    "1": "data_object",
                    "2": "initialized_data_ptr",
                    "3": "data_initialized",
                    "4": "data_handle",
                    "6": "data_ptr"
                },
                "lVar1 + 0x10": {
                    "1": "data_ptr"
                },
                "param_1": {
                    "1": "input_data_1",
                    "14": "input_1",
                    "2": "data1",
                    "3": "data_1",
                    "6": "input_param_1"
                },
                "param_2": {
                    "1": "size_param",
                    "14": "input_2",
                    "2": "input_param2",
                    "3": "data_2",
                    "6": "input_param_2"
                },
                "plVar2": {
                    "1": "object_ptr",
                    "2": "ptr_to_data",
                    "3": "allocated_memory_ptr",
                    "4": "allocated_ptr",
                    "5": "allocated_data",
                    "7": "allocated_memory"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_and_store_data_00113bfa(long input_1,long input_2)\n\n{\n  long data_ptr;\n  long *allocated_memory;\n  \n  if (((input_1 != 0) && (input_2 != 0)) && (data_ptr = initialize_data(0x12,0), data_ptr != 0)) {\n    allocated_memory = (long *)xmalloc(0x10);\n    *allocated_memory = input_1;\n    allocated_memory[1] = input_2;\n    *(long **)(data_ptr + 0x10) = allocated_memory;\n    return data_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_and_store_data_00113bfa",
            "entrypoint": "0x00113bfa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113bfa": "initialize_and_store_data_00113bfa",
                "initialize_data_00112904": "initialize_data",
                "lVar1": "data_ptr",
                "param_1": "input_1",
                "param_2": "input_2",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113c43": {
            "additional_data": {
                "FUN_00113c43": {
                    "1": "initialize_data_structure",
                    "5": "initialize_and_allocate_memory",
                    "6": "initialize_data",
                    "7": "initialize_and_allocate_data",
                    "9": "initialize_and_store_data"
                },
                "auVar3": {
                    "1": "output_variable",
                    "16": "result",
                    "5": "return_value"
                },
                "initialize_data_00112904": {
                    "1": "initialize_data"
                },
                "lVar1": {
                    "1": "data_handle",
                    "3": "data_initialized",
                    "4": "data_pointer",
                    "6": "initialized_data",
                    "8": "data_ptr"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "data1",
                    "4": "data_1",
                    "6": "input_1",
                    "7": "input_param_1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "data_length",
                    "4": "data_2",
                    "6": "input_2",
                    "7": "input_param_2"
                },
                "param_3": {
                    "1": "data1",
                    "2": "param_3",
                    "4": "data_3",
                    "6": "input_3",
                    "7": "input_param_3"
                },
                "param_4": {
                    "1": "value_4",
                    "2": "data4",
                    "4": "data_4",
                    "6": "input_4",
                    "7": "input_param_4"
                },
                "param_5": {
                    "1": "data_value_5",
                    "2": "data5",
                    "4": "data_5",
                    "6": "input_5",
                    "7": "input_param_5"
                },
                "param_6": {
                    "1": "sixth_param",
                    "2": "data6",
                    "4": "data_6",
                    "6": "input_6",
                    "7": "input_param_6"
                },
                "plVar2": {
                    "1": "ptr_to_allocated_memory",
                    "3": "data_ptr",
                    "4": "allocated_data",
                    "7": "data_array",
                    "8": "allocated_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\ninitialize_and_store_data_00113c43(long input_param_1,long input_param_2,long input_param_3,long input_param_4,undefined input_param_5,\n            undefined8 input_param_6)\n\n{\n  long data_ptr;\n  long *allocated_memory;\n  undefined result [16];\n  \n  if ((input_param_1 != 0) && (input_param_2 != 0)) {\n    data_ptr = initialize_data(0x10,0);\n    if (data_ptr != 0) {\n      allocated_memory = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocated_memory + 0x21) = 0;\n      *allocated_memory = input_param_1;\n      *(undefined4 *)((long)allocated_memory + 0x24) = 0;\n      allocated_memory[1] = input_param_2;\n      allocated_memory[2] = input_param_3;\n      allocated_memory[3] = input_param_4;\n      *(undefined *)(allocated_memory + 4) = input_param_5;\n      *(long **)(data_ptr + 0x10) = allocated_memory;\n      goto LAB_00113caa;\n    }\n  }\n  data_ptr = 0;\nLAB_00113caa:\n  result._8_8_ = input_param_6;\n  result._0_8_ = data_ptr;\n  return result;\n}\n\n",
            "current_name": "initialize_and_store_data_00113c43",
            "entrypoint": "0x00113c43",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113c43": "initialize_and_store_data_00113c43",
                "auVar3": "result",
                "initialize_data_00112904": "initialize_data",
                "lVar1": "data_ptr",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "plVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113cb9": {
            "additional_data": {
                "0xe": {
                    "1": "data_size"
                },
                "FUN_00113cb9": {
                    "1": "initialize_data_if_param_not_zero",
                    "2": "initialize_data_and_set_param",
                    "24": "initialize_data"
                },
                "initialize_data_00112904": {
                    "1": "initialize_data_helper"
                },
                "lVar1": {
                    "1": "initialized_data_or_zero",
                    "13": "data_ptr",
                    "2": "data_handle",
                    "3": "data_initialized"
                },
                "param_1": {
                    "1": "input",
                    "2": "input_parameter",
                    "21": "input_value",
                    "3": "input_data",
                    "4": "input_param"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_data_00113cb9(long input_value)\n\n{\n  long data_ptr;\n  \n  if (input_value != 0) {\n    data_ptr = initialize_data_00113cb9(0xe,0);\n    if (data_ptr == 0) {\n      data_ptr = 0;\n    }\n    else {\n      *(long *)(data_ptr + 0x10) = input_value;\n    }\n    return data_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_data_00113cb9",
            "entrypoint": "0x00113cb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113cb9": "initialize_data_00113cb9",
                "initialize_data_00112904": "initialize_data",
                "lVar1": "data_ptr",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ce0": {
            "additional_data": {
                "FUN_00113ce0": {
                    "1": "initialize_resource",
                    "2": "initialize_data_and_allocate_memory",
                    "3": "initialize_data",
                    "5": "initialize_and_allocate_memory",
                    "8": "initialize_and_allocate_data"
                },
                "auVar3": {
                    "1": "output_data",
                    "13": "result",
                    "7": "return_value"
                },
                "lVar1": {
                    "1": "data_address",
                    "2": "data_initialization_result",
                    "3": "data_init_result",
                    "5": "data_ptr",
                    "6": "initialized_data",
                    "8": "data_initialized"
                },
                "param_1": {
                    "1": "data",
                    "2": "data_address",
                    "3": "data_ptr",
                    "7": "input_param_1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "2": "data_value",
                    "3": "param_2",
                    "7": "input_param_2"
                },
                "param_3": {
                    "1": "data_param3",
                    "2": "param",
                    "3": "undefined_param",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "input_value_4",
                    "2": "input_parameter_4",
                    "5": "unused_param",
                    "7": "input_param_4",
                    "8": "param_4"
                },
                "param_5": {
                    "1": "undefined8_param2",
                    "2": "input_parameter_5",
                    "3": "return_value",
                    "7": "input_param_5",
                    "8": "param_5"
                },
                "plVar2": {
                    "1": "allocated_data_pointer",
                    "15": "allocated_memory",
                    "2": "new_data_ptr",
                    "3": "allocated_data"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\ninitialize_and_allocate_data_00113ce0(long input_param_1,long input_param_2,undefined input_param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  long data_initialized;\n  long *allocated_memory;\n  undefined result [16];\n  \n  if (input_param_1 != 0) {\n    data_initialized = initialize_data_00112904(0xd,0);\n    if (data_initialized != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_param_1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_param_2;\n      *(undefined *)(allocated_memory + 2) = input_param_3;\n      *(long **)(data_initialized + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  data_initialized = 0;\nLAB_00113d2f:\n  result._8_8_ = param_5;\n  result._0_8_ = data_initialized;\n  return result;\n}\n\n",
            "current_name": "initialize_and_allocate_data_00113ce0",
            "entrypoint": "0x00113ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ce0": "initialize_and_allocate_data_00113ce0",
                "auVar3": "result",
                "lVar1": "data_initialized",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "plVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d3a": {
            "additional_data": {
                "FUN_00113d3a": {
                    "1": "initialize_data_structure",
                    "15": "initialize_or_get_data",
                    "3": "get_data_pointer",
                    "8": "get_initialized_data"
                },
                "initialize_data_00112904": {
                    "1": "initialize_data"
                },
                "lVar1": {
                    "1": "initialized_value",
                    "13": "initialized_data",
                    "2": "new_data_ptr",
                    "3": "result"
                },
                "param_1": {
                    "1": "data_address",
                    "3": "data_pointer",
                    "4": "input_data",
                    "5": "data_ptr",
                    "6": "data"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_or_get_data_00113d3a(long data)\n\n{\n  long initialized_data;\n  \n  if (data != 0) {\n    initialized_data = *(long *)(data + 8);\n    if (initialized_data == 0) {\n      initialized_data = initialize_data(0xc,0);\n      if (initialized_data == 0) {\n        initialized_data = 0;\n      }\n      else {\n        *(long *)(initialized_data + 0x10) = data;\n        *(long *)(data + 8) = initialized_data;\n      }\n    }\n    return initialized_data;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_or_get_data_00113d3a",
            "entrypoint": "0x00113d3a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d3a": "initialize_or_get_data_00113d3a",
                "initialize_data_00112904": "initialize_data",
                "lVar1": "initialized_data",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d6e": {
            "additional_data": {
                "FUN_00113d6e": {
                    "1": "initialize_and_add_data",
                    "16": "initialize_and_store_data",
                    "3": "initialize_data",
                    "5": "initialize_data_and_store"
                },
                "lVar1": {
                    "1": "data_handle",
                    "5": "initialized_data",
                    "6": "data_initialized"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "initial_value",
                    "3": "data_1",
                    "6": "input_1"
                },
                "param_2": {
                    "1": "data_value_2",
                    "2": "input_value_2",
                    "3": "data_2",
                    "6": "input_2"
                },
                "puVar2": {
                    "1": "new_ptr",
                    "12": "allocated_memory",
                    "2": "new_data_ptr",
                    "3": "allocated_ptr",
                    "5": "allocated_data"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_and_store_data_00113d6e(undefined8 input_param_1,undefined8 input_param_2)\n\n{\n  long data_initialized;\n  undefined8 *allocated_memory;\n  \n  data_initialized = initialize_data_00112904(0xb,0);\n  if (data_initialized != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_param_1;\n    allocated_memory[1] = input_param_2;\n    *(undefined8 **)(data_initialized + 0x10) = allocated_memory;\n  }\n  return data_initialized;\n}\n\n",
            "current_name": "initialize_and_store_data_00113d6e",
            "entrypoint": "0x00113d6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d6e": "initialize_and_store_data_00113d6e",
                "lVar1": "data_initialized",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "puVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113da9": {
            "additional_data": {
                "FUN_00113da9": {
                    "1": "initialize_and_assign",
                    "13": "initialize_data",
                    "2": "initialize_and_copy_data",
                    "9": "initialize_and_allocate_memory"
                },
                "auVar5": {
                    "19": "result",
                    "2": "result_data",
                    "4": "output_data",
                    "6": "return_value"
                },
                "bVar4": {
                    "1": "byte_var",
                    "2": "temp_byte",
                    "3": "byte_counter",
                    "7": "byte_value"
                },
                "initialize_data_00112904": {
                    "1": "allocate_memory"
                },
                "lVar2": {
                    "1": "remaining_iterations",
                    "2": "length",
                    "23": "loop_counter",
                    "4": "counter"
                },
                "param_1": {
                    "1": "buffer_length",
                    "2": "offset",
                    "4": "input_byte",
                    "6": "byte_offset",
                    "7": "byte_count"
                },
                "param_2": {
                    "1": "unused_1",
                    "2": "unnamed_param_2",
                    "3": "param2",
                    "5": "unused_param",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "source",
                    "2": "param_b",
                    "3": "data",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "unused_2",
                    "2": "value",
                    "3": "param4",
                    "5": "param_4"
                },
                "puVar1": {
                    "1": "buffer_ptr",
                    "14": "allocated_memory",
                    "2": "data_pointer",
                    "3": "data_ptr"
                },
                "puVar3": {
                    "1": "pointer_increment",
                    "2": "current_address",
                    "3": "current_pointer",
                    "9": "current_ptr"
                },
                "xmalloc": {
                    "1": "allocate_memory_extra"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0010e07c"
            ],
            "code": "\nundefined  [16] initialize_data_00113da9(byte byte_count,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *allocated_memory;\n  long loop_counter;\n  undefined8 *current_ptr;\n  byte byte_value;\n  undefined result [16];\n  \n  byte_value = 0;\n  result._0_8_ = initialize_data_00113da9(8 - (uint)byte_count);\n  if (result._0_8_ != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x28);\n    current_ptr = allocated_memory + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)current_ptr = 0;\n      current_ptr = (undefined8 *)((long)current_ptr + (ulong)byte_value * -8 + 4);\n    }\n    *allocated_memory = param_3;\n    *(undefined8 **)(result._0_8_ + 0x10) = allocated_memory;\n  }\n  result._8_8_ = param_4;\n  return result;\n}\n\n",
            "current_name": "initialize_data_00113da9",
            "entrypoint": "0x00113da9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113da9": "initialize_data_00113da9",
                "auVar5": "result",
                "bVar4": "byte_value",
                "initialize_data_00112904": "initialize_data",
                "lVar2": "loop_counter",
                "param_1": "byte_count",
                "puVar1": "allocated_memory",
                "puVar3": "current_ptr",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113df2": {
            "additional_data": {
                "4": {
                    "1": "data_size"
                },
                "<no parameter>": {
                    "1": "param_1"
                },
                "FUN_00113df2": {
                    "1": "initialize_with_param",
                    "30": "initialize_data"
                },
                "initialize_data_00112904": {
                    "10": "initialize_data",
                    "2": "initialize_data_helper",
                    "4": "init_data"
                },
                "param_1": {
                    "1": "data_length",
                    "11": "param",
                    "4": "arg",
                    "5": "data_size",
                    "6": "data"
                },
                "param_2": {
                    "1": "param_2"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_data_00113df2(undefined4 param)\n\n{\n  initialize_data_00113df2(4,param);\n  return;\n}\n\n",
            "current_name": "initialize_data_00113df2",
            "entrypoint": "0x00113df2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113df2": "initialize_data_00113df2",
                "initialize_data_00112904": "initialize_data",
                "param_1": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113dfe": {
            "additional_data": {
                "FUN_00113dfe": {
                    "1": "initialize_data",
                    "2": "set_data_value",
                    "5": "update_data_value",
                    "9": "update_data"
                },
                "lVar1": {
                    "1": "initialized_data_ptr",
                    "12": "data_ptr",
                    "2": "initialized_data",
                    "6": "data_pointer",
                    "8": "data_address"
                },
                "param_1": {
                    "1": "config_data",
                    "2": "data",
                    "3": "param"
                },
                "param_2": {
                    "1": "data",
                    "18": "new_value",
                    "2": "param2",
                    "7": "value"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid update_data_00113dfe(undefined4 data_size,undefined new_value)\n\n{\n  long data_ptr;\n  \n  data_ptr = initialize_data_00112904(3,data_size);\n  if (data_ptr != 0) {\n    *(undefined *)(data_ptr + 0x10) = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_00113dfe",
            "entrypoint": "0x00113dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113dfe": "update_data_00113dfe",
                "lVar1": "data_ptr",
                "param_1": "data_size",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e17": {
            "additional_data": {
                "0": {
                    "1": "initial_value",
                    "2": "start_index",
                    "4": "param2"
                },
                "2": {
                    "1": "num_param1",
                    "2": "parameter_1",
                    "4": "param1"
                },
                "FUN_00113e17": {
                    "1": "initialize_data_function",
                    "29": "initialize_data"
                },
                "data_00112904": {
                    "1": "data"
                },
                "initialize_data_00112904": {
                    "1": "initialize",
                    "15": "initialize_data",
                    "4": "initialize_data_helper"
                },
                "original_function_name": {
                    "1": "new_function_name"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name_1"
                },
                "original_parameter_name_2": {
                    "1": "param2"
                },
                "original_variable_name_1": {
                    "1": "new_variable_name_1"
                },
                "parameter1": {
                    "1": "num1"
                },
                "parameter2": {
                    "1": "num2"
                },
                "r0": {
                    "1": "num1"
                },
                "r1": {
                    "1": "num2"
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_data_00113e17(void)\n\n{\n  initialize_data_00113e17(2,0);\n  return;\n}\n\n",
            "current_name": "initialize_data_00113e17",
            "entrypoint": "0x00113e17",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e17": "initialize_data_00113e17",
                "data_00112904": "data",
                "initialize_data_00112904": "initialize_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e23": {
            "additional_data": {
                "FUN_00113e23": {
                    "1": "initialize_data_and_assign_params",
                    "14": "initialize_and_store_data",
                    "3": "create_data_structure",
                    "4": "initialize_data",
                    "5": "create_data_entry"
                },
                "lVar1": {
                    "1": "data_handle",
                    "2": "initialized_data",
                    "3": "result",
                    "5": "data_pointer",
                    "6": "data_initialized"
                },
                "param_1": {
                    "1": "data",
                    "2": "data_1",
                    "3": "input1",
                    "7": "input_param_1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "2": "input_data_2",
                    "3": "input2",
                    "7": "input_param_2"
                },
                "puVar2": {
                    "1": "new_entry",
                    "18": "allocated_memory",
                    "2": "new_data_ptr"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010afd5",
                "FUN_0010c2d2"
            ],
            "code": "\nlong initialize_and_store_data_00113e23(undefined8 input_param_1,undefined8 input_param_2)\n\n{\n  long data_initialized;\n  undefined8 *allocated_memory;\n  \n  data_initialized = initialize_data_00112904(1,0);\n  if (data_initialized != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_param_1;\n    allocated_memory[1] = input_param_2;\n    *(undefined8 **)(data_initialized + 0x10) = allocated_memory;\n  }\n  return data_initialized;\n}\n\n",
            "current_name": "initialize_and_store_data_00113e23",
            "entrypoint": "0x00113e23",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e23": "initialize_and_store_data_00113e23",
                "lVar1": "data_initialized",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "puVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e5e": {
            "additional_data": {
                "**param_2": {
                    "1": "string_pointer"
                },
                "*param_1": {
                    "1": "current_pointer"
                },
                "FUN_00113e5e": {
                    "1": "verify_and_parse_input",
                    "2": "extract_type_and_compare",
                    "3": "check_type_and_call_function",
                    "4": "check_and_process_type"
                },
                "cVar1": {
                    "13": "comparison_result",
                    "2": "result"
                },
                "local_20": {
                    "1": "temp_array",
                    "2": "str_pointer",
                    "6": "temp_string"
                },
                "local_20[0]": {
                    "1": "input_ptr"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data",
                    "3": "param_1",
                    "4": "param",
                    "6": "input"
                },
                "param_2": {
                    "1": "input_string_ptr",
                    "2": "output",
                    "4": "input_string",
                    "5": "string_ptr"
                },
                "param_3": {
                    "1": "input_length",
                    "11": "length",
                    "13": "string_length"
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 check_and_process_type_00113e5e(undefined8 input,char **string_ptr,long string_length)\n\n{\n  char comparison_result;\n  char *current_string [2];\n  \n  input_copy = *string_ptr;\n  *string_ptr = (char *)(string_length + 2);\n  if ((((long)(char *)(string_length + 2) - (long)input_copy < 5) ||\n      (comparison_result = string_comparison_00113fb0(input_copy,\"type\"), comparison_result == '\\0')) ||\n     ((input_copy[4] != '$' && (input_copy[4] != '.')))) {\n    if (*input_copy != '_') {\n      return 1;\n    }\n    if (input_copy[1] != '_') {\n      return 1;\n    }\n    if (input_copy[2] != 'o') {\n      return 1;\n    }\n    if (input_copy[3] != 'p') {\n      return 1;\n    }\n    input_copy = input_copy + 4;\n  }\n  else {\n    input_copy = input_copy + 5;\n  }\n  comparison_result = parse_and_initialize_data_0010c95e(input,current_string,0);\n  if (comparison_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = string_comparison_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_and_process_type_00113e5e",
            "entrypoint": "0x00113e5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e5e": "check_and_process_type_00113e5e",
                "cVar1": "comparison_result",
                "local_20": "current_string",
                "local_20[0]": "input_copy",
                "param_1": "input",
                "param_2": "string_ptr",
                "param_3": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ede": {
            "additional_data": {
                "FUN_00113ede": {
                    "1": "validate_string_length",
                    "19": "check_string_length",
                    "2": "string_comparison"
                },
                "__s": {
                    "1": "str",
                    "13": "current_string",
                    "2": "string_ptr",
                    "5": "input_string",
                    "9": "string"
                },
                "param_1": {
                    "1": "string_list",
                    "13": "string_array",
                    "2": "input_string",
                    "5": "input_strings",
                    "7": "strings"
                },
                "sVar1": {
                    "1": "str_length",
                    "2": "length",
                    "27": "string_length"
                },
                "uVar2": {
                    "1": "string_comparison_result",
                    "11": "result",
                    "19": "comparison_result"
                }
            },
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "calling": [
                "FUN_0010829e",
                "FUN_001082b3"
            ],
            "code": "\nundefined8 check_string_length_00113ede(char **string_array)\n\n{\n  char *current_string;\n  size_t string_length;\n  undefined8 comparison_result;\n  \n  if (string_array == (char **)0x0) {\n    return 0;\n  }\n  current_string = *string_array;\n  if (current_string != (char *)0x0) {\n    string_length = strlen(current_string);\n    if (4 < (int)string_length) {\n      comparison_result = string_comparison_00113fb0(current_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return comparison_result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_string_length_00113ede",
            "entrypoint": "0x00113ede",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "__s": "current_string",
                "param_1": "string_array",
                "sVar1": "string_length",
                "uVar2": "comparison_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f20": {
            "additional_data": {
                "FUN_00113f20": {
                    "1": "create_hashtable_and_allocate_memory",
                    "10": "create_hash_table",
                    "2": "create_string_hash_table",
                    "7": "create_hashtable",
                    "9": "initialize_hash_table"
                },
                "free": {
                    "12": "release_memory",
                    "14": "deallocate_memory",
                    "5": "free_memory"
                },
                "htab_create_alloc": {
                    "1": "create_hashtable",
                    "7": "allocate_hashtable",
                    "8": "create_hash_table"
                },
                "htab_eq_string": {
                    "1": "equals_string",
                    "13": "compare_strings",
                    "3": "string_equality_function",
                    "4": "compare_string",
                    "5": "is_equal_string"
                },
                "htab_hash_string": {
                    "1": "hash_string_in_hash_table",
                    "2": "calculate_hash",
                    "21": "hash_string",
                    "4": "string_hash_function"
                },
                "xcalloc": {
                    "1": "allocate_memory_with_zero",
                    "30": "allocate_memory"
                }
            },
            "called": [
                "htab_eq_string",
                "htab_create_alloc",
                "htab_hash_string",
                "xcalloc",
                "free"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid create_hash_table_00113f20(void)\n\n{\n  create_hash_table_00113f20(0x10,htab_hash_string,compare_strings,0,xcalloc,free);\n  return;\n}\n\n",
            "current_name": "create_hash_table_00113f20",
            "entrypoint": "0x00113f20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f20": "create_hash_table_00113f20",
                "free": "deallocate_memory",
                "htab_create_alloc": "create_hash_table",
                "htab_eq_string": "compare_strings",
                "htab_hash_string": "hash_string",
                "xcalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f50": {
            "additional_data": {
                "FUN_00113f50": {
                    "1": "check_file_info",
                    "2": "check_file_properties",
                    "4": "get_file_size",
                    "5": "get_file_information",
                    "6": "check_file"
                },
                "iVar1": {
                    "1": "status_result",
                    "21": "status",
                    "4": "stat_result"
                },
                "param_1": {
                    "24": "file_path",
                    "7": "filename"
                },
                "pcVar4": {
                    "1": "str_error_message",
                    "2": "str_error",
                    "23": "error_reason",
                    "4": "reason"
                },
                "piVar2": {
                    "1": "error",
                    "18": "errno_ptr",
                    "2": "error_num",
                    "3": "error_ptr"
                },
                "sStack_a8": {
                    "1": "stat_info",
                    "12": "file_stat",
                    "4": "file_info"
                },
                "sStack_a8.st_mode": {
                    "1": "file_mode"
                },
                "uVar3": {
                    "27": "error_message",
                    "4": "error_msg"
                }
            },
            "called": [
                "stat",
                "FUN_00119ed0",
                "FUN_00104966",
                "dcgettext"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "code": "\nlong check_file_00113f50(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stats);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00119ed0(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00119ed0(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else if ((file_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "current_name": "check_file_00113f50",
            "entrypoint": "0x00113f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "iVar1": "status",
                "param_1": "file_path",
                "pcVar4": "error_reason",
                "piVar2": "errno_ptr",
                "sStack_a8": "file_stats",
                "sStack_a8.st_mode": "file_mode",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fb0": {
            "additional_data": {
                "FUN_00113fb0": {
                    "1": "reverse_string_comparison",
                    "11": "compare_strings",
                    "17": "string_comparison",
                    "2": "string_compare"
                },
                "__n": {
                    "1": "target_length",
                    "19": "length",
                    "2": "str2_length",
                    "5": "string2_length"
                },
                "auVar2": {
                    "1": "modified_result",
                    "19": "result",
                    "2": "comparison_result"
                },
                "extraout_var": {
                    "1": "extra_output_var",
                    "2": "additional_var",
                    "3": "extra_output",
                    "4": "comparison_result"
                },
                "iVar1": {
                    "1": "string_comparison",
                    "23": "comparison_result"
                },
                "in_RAX": {
                    "1": "value",
                    "3": "return_value"
                },
                "param_1": {
                    "1": "first_string",
                    "2": "input_string",
                    "22": "string1",
                    "5": "str1"
                },
                "param_2": {
                    "1": "target_string",
                    "2": "comparison_string",
                    "22": "string2",
                    "5": "str2"
                }
            },
            "called": [
                "strncmp",
                "strlen"
            ],
            "calling": [
                "FUN_00108c86",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00113e5e",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00114c20",
                "FUN_00115f50"
            ],
            "code": "\nundefined  [16] string_comparison_00113fb0(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  size_t length;\n  undefined4 comparison_result;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(comparison_result,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "string_comparison_00113fb0",
            "entrypoint": "0x00113fb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "comparison_result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fe0": {
            "additional_data": {
                "FUN_00113fe0": {
                    "1": "process_section_flags",
                    "2": "parse_flags",
                    "28": "parse_section_flags"
                },
                "FUN_00119dd0": {
                    "1": "print_supported_flags"
                },
                "FUN_00119ed0": {
                    "1": "print_error"
                },
                "auVar8": {
                    "1": "return_data",
                    "12": "result",
                    "2": "return_val",
                    "7": "return_value"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "iVar1": {
                    "1": "str_result",
                    "16": "comparison_result",
                    "3": "compare_result",
                    "7": "result"
                },
                "iVar6": {
                    "1": "len",
                    "2": "remaining_string_length",
                    "4": "flag_index",
                    "5": "section_flag_index"
                },
                "param_1": {
                    "1": "str",
                    "17": "section_flags",
                    "2": "section_flags_string",
                    "3": "input_string"
                },
                "param_2": {
                    "1": "unused_param1",
                    "13": "param_2",
                    "15": "param2"
                },
                "param_3": {
                    "1": "unused_param2",
                    "13": "param_3",
                    "15": "param3"
                },
                "param_4": {
                    "1": "flags_pointer",
                    "11": "param_4",
                    "15": "param4"
                },
                "pcVar3": {
                    "1": "delimiter",
                    "2": "separator",
                    "4": "comma_ptr",
                    "5": "comma_pos",
                    "9": "comma_position"
                },
                "pcVar4": {
                    "1": "next_position",
                    "2": "next_flag_start",
                    "3": "next_token",
                    "5": "next_flag",
                    "9": "next_section_flag"
                },
                "sVar5": {
                    "1": "section_string_length",
                    "3": "string_length",
                    "5": "section_length",
                    "7": "flag_length"
                },
                "uVar2": {
                    "1": "translated_string",
                    "2": "msg",
                    "3": "error_string",
                    "4": "result",
                    "5": "error_msg"
                },
                "uVar7": {
                    "1": "new_flags",
                    "10": "section_flags",
                    "2": "flags",
                    "3": "updated_section_flags",
                    "4": "parsed_flags"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_section_flags_00113fe0(char *section_flags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int comparison_result;\n  undefined8 error_msg;\n  char *comma_position;\n  char *next_section_flag;\n  size_t flag_length;\n  int section_flag_index;\n  uint section_flags;\n  undefined result [16];\n  \n  section_flags = 0;\n  do {\n    comma_position = strchr(section_flags,0x2c);\n    if (comma_position == (char *)0x0) {\n      flag_length = strlen(section_flags);\n      section_flag_index = (int)flag_length;\n      next_section_flag = (char *)0x0;\n    }\n    else {\n      next_section_flag = comma_position + 1;\n      section_flag_index = (int)comma_position - (int)section_flags;\n    }\n    flag_length = (size_t)section_flag_index;\n    comparison_result = strncasecmp(\"alloc\",section_flags,flag_length);\n    if (comparison_result == 0) {\n      section_flags = section_flags | 1;\n    }\n    else {\n      comparison_result = strncasecmp(\"load\",section_flags,flag_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 2;\n      }\n      else {\n        comparison_result = strncasecmp(\"noload\",section_flags,flag_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x200;\n        }\n        else {\n          comparison_result = strncasecmp(\"readonly\",section_flags,flag_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 8;\n          }\n          else {\n            comparison_result = strncasecmp(\"debug\",section_flags,flag_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x2000;\n            }\n            else {\n              comparison_result = strncasecmp(\"code\",section_flags,flag_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x10;\n              }\n              else {\n                comparison_result = strncasecmp(\"data\",section_flags,flag_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x20;\n                }\n                else {\n                  comparison_result = strncasecmp(\"rom\",section_flags,flag_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x40;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"exclude\",section_flags,flag_length);\n                    if (comparison_result == 0) {\n                      section_flags = section_flags | 0x8000;\n                    }\n                    else {\n                      comparison_result = strncasecmp(\"share\",section_flags,flag_length);\n                      if (comparison_result == 0) {\n                        section_flags = section_flags | 0x8000000;\n                      }\n                      else {\n                        comparison_result = strncasecmp(\"contents\",section_flags,flag_length);\n                        if (comparison_result == 0) {\n                          section_flags = section_flags | 0x100;\n                        }\n                        else {\n                          comparison_result = strncasecmp(\"merge\",section_flags,flag_length);\n                          if (comparison_result == 0) {\n                            section_flags = section_flags | 0x800000;\n                          }\n                          else {\n                            comparison_result = strncasecmp(\"strings\",section_flags,flag_length);\n                            if (comparison_result != 0) {\n                              comma_position = (char *)xmalloc((long)(section_flag_index + 1));\n                              strncpy(comma_position,section_flags,flag_length);\n                              comma_position[flag_length] = '\\0';\n                              error_msg = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_00119ed0(error_msg,comma_position);\n                              error_msg = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_error_and_exit_00119dd0(error_msg,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            section_flags = section_flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    section_flags = next_section_flag;\n  } while (next_section_flag != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = section_flags;\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "parse_section_flags_00113fe0",
            "entrypoint": "0x00113fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "auVar8": "result",
                "dcgettext": "get_translated_string",
                "iVar1": "comparison_result",
                "iVar6": "section_flag_index",
                "param_1": "section_flags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar3": "comma_position",
                "pcVar4": "next_section_flag",
                "sVar5": "flag_length",
                "uVar2": "error_msg",
                "uVar7": "section_flags",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114190": {
            "additional_data": {
                "FUN_00114190": {
                    "1": "process_data",
                    "2": "find_matching_pattern",
                    "5": "find_matching_entry"
                },
                "dcgettext": {
                    "1": "get_localized_text"
                },
                "iVar4": {
                    "1": "index",
                    "18": "comparison_result",
                    "2": "temp4",
                    "5": "match_result"
                },
                "param_1": {
                    "1": "search_string",
                    "15": "input_array",
                    "2": "input_data",
                    "7": "input_string"
                },
                "param_2": {
                    "1": "is_alter",
                    "11": "flag",
                    "2": "is_exclusion",
                    "5": "is_exact_match"
                },
                "param_3": {
                    "1": "permission_flags",
                    "18": "flags",
                    "2": "mask",
                    "3": "permissions",
                    "4": "options"
                },
                "plVar2": {
                    "1": "array_element",
                    "2": "match_pattern",
                    "3": "temp_ptr",
                    "4": "pattern"
                },
                "pplVar3": {
                    "1": "next_element",
                    "2": "result_ptr",
                    "3": "result_array",
                    "4": "result"
                },
                "pplVar6": {
                    "1": "temp_var6",
                    "2": "current_item",
                    "3": "current_entry"
                },
                "pplVar7": {
                    "1": "previous_vma",
                    "2": "current_node",
                    "3": "previous_pointer"
                },
                "pplVar8": {
                    "1": "pointer_pointer_var8",
                    "2": "next_match",
                    "4": "next_node",
                    "5": "next_entry"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "flags",
                    "2": "flag_value"
                },
                "uVar5": {
                    "1": "temp_var3",
                    "2": "error_msg",
                    "21": "error_message"
                }
            },
            "called": [
                "FUN_00104bba",
                "FUN_00119dd0",
                "fnmatch",
                "xmalloc",
                "dcgettext",
                "strcmp"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110",
                "FUN_00115b70",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00114c20",
                "FUN_00115530"
            ],
            "code": "\nlong ** find_matching_entry_00114190(long *input_array,char flag,uint flags)\n\n{\n  uint var1;\n  long *pattern;\n  long **result;\n  int comparison_result;\n  undefined8 error_message;\n  long **current_pointer;\n  long **previous_pointer;\n  long **next_entry;\n  \n  previous_pointer = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((flags & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      current_pointer = (long **)*previous_pointer;\n      if (current_pointer == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_pointer = (long **)0x0;\n    }\n    else {\n      pattern = DAT_001278e0[1];\n      if (*(char *)pattern == '!') {\n        comparison_result = fnmatch((char *)((long)pattern + 1),(char *)input_array,0);\n        current_pointer = previous_pointer;\n        if (comparison_result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparison_result = fnmatch((char *)pattern,(char *)input_array,0);\n      if (comparison_result != 0) goto LAB_001141e5;\n      current_pointer = (long **)*previous_pointer;\n      if (current_pointer == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)current_pointer + 0x14)) != 0) {\n      pattern = current_pointer[1];\n      if (*(char *)pattern == '!') {\n        comparison_result = fnmatch((char *)((long)pattern + 1),(char *)input_array,0);\n        if (comparison_result == 0) {\nLAB_0011438e:\n          *(undefined *)(current_pointer + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparison_result = fnmatch((char *)pattern,(char *)input_array,0);\n        if ((previous_pointer == (long **)0x0) && (comparison_result == 0)) {\n          next_entry = (long **)*current_pointer;\n          previous_pointer = current_pointer;\n          if (next_entry == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_entry = (long **)*current_pointer;\n    current_pointer = previous_pointer;\n    if (next_entry != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparison_result = strcmp((char *)DAT_001278e0[1],(char *)input_array);\n    if (comparison_result == 0) {\nLAB_001143cd:\n      var1 = *(uint *)((long)previous_pointer + 0x14);\n      if ((((var1 & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((var1 & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_error_and_exit(error_message,input_array);\n      }\n      if ((((var1 & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_error_and_exit(error_message,input_array);\n      }\n      if ((((var1 & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_pointer + 0x14) = var1 | flags;\n        return previous_pointer;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_error_and_exit(error_message,input_array);\n    }\n    previous_pointer = (long **)*previous_pointer;\n    if (previous_pointer == (long **)0x0) goto LAB_001142a9;\n    comparison_result = strcmp((char *)previous_pointer[1],(char *)input_array);\n    if (comparison_result == 0) goto LAB_001143cd;\n    next_entry = (long **)*previous_pointer;\n    current_pointer = (long **)0x0;\n    if (next_entry == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous_pointer = current_pointer;\n      if (flag == '\\0') {\n        while (current_pointer = next_entry, result = previous_pointer, next_entry = current_pointer,\n              (flags & *(uint *)((long)current_pointer + 0x14)) != 0) {\n          pattern = current_pointer[1];\n          if (*(char *)pattern == '!') {\n            comparison_result = fnmatch((char *)((long)pattern + 1),(char *)input_array,0);\n            if (comparison_result == 0) goto LAB_0011438e;\n            next_entry = (long **)*current_pointer;\n            if ((long **)*current_pointer == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparison_result = fnmatch((char *)pattern,(char *)input_array,0);\n            if ((previous_pointer == (long **)0x0) && (comparison_result == 0)) {\n              previous_pointer = current_pointer;\n              next_entry = (long **)*current_pointer;\n              if ((long **)*current_pointer == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_entry = (long **)*current_pointer;\n              if ((long **)*current_pointer == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparison_result = strcmp((char *)next_entry[1],(char *)input_array);\n        result = current_pointer;\n        previous_pointer = next_entry;\n        if (comparison_result == 0) goto LAB_001143cd;\n      }\n      current_pointer = result;\n      next_entry = (long **)*next_entry;\n      previous_pointer = current_pointer;\n    } while (next_entry != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      current_pointer = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_pointer + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_pointer + 2) = 0;\n      *(uint *)((long)current_pointer + 0x14) = flags;\n      current_pointer[5] = (long *)0x0;\n      previous_pointer = current_pointer;\n      *current_pointer = (long *)DAT_001278e0;\n      DAT_001278e0 = previous_pointer;\n      current_pointer[1] = input_array;\n      return current_pointer;\n    }\n  }\nLAB_00114212:\n  if (previous_pointer == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous_pointer + 2) = 1;\n  return previous_pointer;\n}\n\n",
            "current_name": "find_matching_entry_00114190",
            "entrypoint": "0x00114190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114190": "find_matching_entry_00114190",
                "dcgettext": "get_localized_text",
                "iVar4": "comparison_result",
                "param_1": "input_array",
                "param_2": "flag",
                "param_3": "flags",
                "plVar2": "pattern",
                "pplVar3": "result",
                "pplVar6": "current_pointer",
                "pplVar7": "previous_pointer",
                "pplVar8": "next_entry",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "uVar1": "var1",
                "uVar5": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114460": {
            "additional_data": {
                "FUN_00114460": {
                    "1": "extract_file_contents",
                    "16": "read_and_process_file",
                    "2": "parse_file",
                    "3": "read_file_and_process_lines"
                },
                "__n": {
                    "1": "filesize",
                    "30": "file_size"
                },
                "__ptr": {
                    "1": "file_contents",
                    "2": "file_data",
                    "20": "buffer",
                    "6": "file_buffer"
                },
                "__stream": {
                    "1": "file_ptr",
                    "13": "file",
                    "15": "file_stream",
                    "2": "file_pointer"
                },
                "_errno_location": {
                    "1": "get_errno_location"
                },
                "bVar8": {
                    "2": "current_character",
                    "23": "current_byte",
                    "3": "current_char"
                },
                "check_file_00113f50": {
                    "1": "get_file_length"
                },
                "dcgettext": {
                    "1": "translate"
                },
                "ferror": {
                    "1": "check_file_error"
                },
                "fopen": {
                    "1": "open_file"
                },
                "fread": {
                    "1": "read_file"
                },
                "htab_find_slot": {
                    "1": "find_hash_table_slot"
                },
                "iVar1": {
                    "19": "line_number",
                    "4": "line_counter",
                    "6": "line_count"
                },
                "param_1": {
                    "21": "filename",
                    "4": "file_name",
                    "6": "file_path"
                },
                "param_2": {
                    "1": "symbol_table",
                    "2": "hashtable",
                    "24": "hash_table"
                },
                "param_3": {
                    "1": "data",
                    "11": "file_data",
                    "2": "output",
                    "4": "file_contents"
                },
                "pbVar10": {
                    "1": "position",
                    "2": "current_byte",
                    "3": "current_char",
                    "8": "current_position"
                },
                "pbVar11": {
                    "1": "line_byte",
                    "2": "next_char",
                    "3": "next_position"
                },
                "pbVar12": {
                    "1": "file_data_ptr",
                    "2": "line_ptr",
                    "3": "start_of_line",
                    "8": "line_start"
                },
                "pbVar7": {
                    "1": "pb_var7",
                    "11": "current_char",
                    "2": "current_position"
                },
                "pbVar8": {
                    "1": "byte"
                },
                "pbVar9": {
                    "1": "next_byte_ptr",
                    "17": "next_byte",
                    "2": "next_position",
                    "4": "next_char"
                },
                "pcVar3": {
                    "1": "error_msg",
                    "15": "error_message",
                    "6": "error_string"
                },
                "piVar2": {
                    "1": "error_number_ptr",
                    "2": "error_code",
                    "3": "errno_ptr",
                    "6": "errno_location",
                    "8": "error_number"
                },
                "ppbVar6": {
                    "1": "slot_address",
                    "11": "hash_table_slot",
                    "2": "slot_pointer",
                    "5": "slot_ptr",
                    "8": "slot"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_error_and_exit"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error_message"
                },
                "sVar5": {
                    "1": "read_bytes",
                    "24": "bytes_read",
                    "6": "read_size"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "uVar4": {
                    "1": "localized_error",
                    "2": "translated_error_message",
                    "3": "error_message",
                    "4": "translated_string",
                    "8": "translated_message"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "fread",
                "__errno_location",
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00113f50",
                "dcgettext",
                "ferror",
                "strerror",
                "fclose",
                "fopen"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_and_process_file_00114460(char *filename,undefined8 hash_table,byte **file_data)\n\n{\n  int line_number;\n  int *error_number;\n  char *error_message;\n  undefined8 dcgettextd_message;\n  size_t file_size;\n  byte *buffer;\n  FILE *file_stream;\n  size_t bytes_read;\n  byte **hash_table_slot;\n  byte *current_char;\n  byte current_byte;\n  byte *next_byte;\n  byte *current_position;\n  byte *next_position;\n  byte *line_start;\n  \n  file_size = get_file_length();\n  if (file_size == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(file_size + 2);\n    file_stream = fopen(filename,\"r\");\n    if (file_stream == (FILE *)0x0) {\n      error_number = _get_errno_location();\n      error_message = strerror(*error_number);\n      dcgettextd_message = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_error_and_exit(dcgettextd_message,filename,error_message);\n    }\n    bytes_read = fread(buffer,1,file_size,file_stream);\n    if ((bytes_read == 0) || (line_number = ferror(file_stream), line_number != 0)) {\n      dcgettextd_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit(dcgettextd_message,filename);\n    }\n    line_number = 1;\n    fclose(file_stream);\n    *(undefined2 *)(buffer + file_size) = 10;\n    current_byte = *buffer;\n    line_start = buffer;\n    while (current_position = line_start, current_byte != 0) {\n      for (; current_byte = *current_position, next_position = current_position, current_byte != 10; current_position = current_position + 1) {\n        if ((char)current_byte < '\\v') {\n          if (current_byte == 0) {\n            next_byte = current_position + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (current_byte == 0xd) {\n            *current_position = 0;\n            next_byte = current_position + 1;\n            if (current_position[1] == 10) {\n              next_byte = current_position + 2;\n              next_position = current_position + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (current_byte == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *current_position = 0;\n      if (current_position[1] == 0xd) {\n        next_position = current_position + 1;\n        next_byte = current_position + 2;\n      }\n      else {\n        next_byte = current_position + 1;\n      }\nLAB_00114553:\n      current_byte = *line_start;\n      while ((current_byte == 0x20 || (current_position = line_start, current_byte == 9))) {\n        current_position = line_start + 1;\n        line_start = line_start + 1;\n        current_byte = *current_position;\n      }\n      do {\n        if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n        if (current_byte == 0) goto LAB_00114599;\n        current_byte = current_position[1];\n        current_position = current_position + 1;\n      } while ((current_byte != 0x20) && (current_byte != 9));\n      if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        current_byte = current_position[1];\n        if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n              ((current_byte = current_position[2], current_byte == 9 || (current_byte == 0x20)))) &&\n             ((current_byte = current_position[3], current_byte == 9 || (current_byte == 0x20)))) &&\n            ((current_byte = current_position[4], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = current_position[5], current_byte == 9 || (current_byte == 0x20)))) {\n          current_byte = current_position[6];\n          current_char = current_position + 6;\n          if ((current_byte == 9) || (current_byte == 0x20)) {\n            do {\n              do {\n                current_byte = current_char[1];\n                current_char = current_char + 1;\n              } while (current_byte == 0x20);\n            } while (current_byte == 9);\n          }\n        }\n        if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n          dcgettextd_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message(dcgettextd_message,filename,line_number);\n        }\n      }\nLAB_00114599:\n      *current_position = 0;\n      if (line_start < current_position) {\n        hash_table_slot = (byte **)htab_find_slot(hash_table,line_start,1);\n        *hash_table_slot = line_start;\n      }\n      line_number = line_number + 1;\n      line_start = next_byte;\n      current_byte = next_position[1];\n    }\n    *file_data = buffer;\n  }\n  return;\n}\n\n",
            "current_name": "read_and_process_file_00114460",
            "entrypoint": "0x00114460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "__n": "file_size",
                "__ptr": "buffer",
                "__stream": "file_stream",
                "_errno_location": "get_errno_location",
                "bVar8": "current_byte",
                "check_file_00113f50": "get_file_length",
                "dcgettext": "translate",
                "ferror": "check_file_error",
                "fopen": "open_file",
                "fread": "read_file",
                "htab_find_slot": "find_hash_table_slot",
                "iVar1": "line_number",
                "param_1": "filename",
                "param_2": "hash_table",
                "param_3": "file_data",
                "pbVar10": "current_position",
                "pbVar11": "next_position",
                "pbVar12": "line_start",
                "pbVar7": "current_char",
                "pbVar9": "next_byte",
                "pcVar3": "error_message",
                "piVar2": "error_number",
                "ppbVar6": "hash_table_slot",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "print_error_message_00119ed0": "print_error_message",
                "sVar5": "bytes_read",
                "strerror": "get_error_string",
                "uVar4": "translated_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114690": {
            "additional_data": {
                "DAT_001264b4": {
                    "1": "options_flag"
                },
                "DAT_00127822": {
                    "1": "constant_var3"
                },
                "DAT_0012797c": {
                    "1": "constant_var5"
                },
                "DAT_00127984": {
                    "1": "constant_var4"
                },
                "DAT_001279c9": {
                    "1": "print_verbose"
                },
                "DAT_001279cb": {
                    "1": "constant_var1"
                },
                "DAT_00127a10": {
                    "1": "debug_link_flag"
                },
                "DAT_00127a20": {
                    "1": "error_flag"
                },
                "DAT_00127a2c": {
                    "1": "constant_var7"
                },
                "FUN_00114690": {
                    "1": "process_archive",
                    "2": "process_input_file",
                    "4": "process_file",
                    "8": "extract_and_copy_archive"
                },
                "__ptr": {
                    "1": "ptr_var"
                },
                "__ptr[1]": {
                    "1": "new_pointer[1]"
                },
                "__ptr[2]": {
                    "1": "new_pointer[2]"
                },
                "_iVar5": {
                    "1": "bfd_error_variable"
                },
                "bVar1": {
                    "1": "archive_flag",
                    "10": "byte_var1",
                    "3": "byte_value",
                    "8": "byte_var"
                },
                "bVar25": {
                    "1": "is_thin_archive",
                    "4": "bool_var25",
                    "7": "bool_var1"
                },
                "bVar26": {
                    "1": "byte_value",
                    "2": "zero_byte",
                    "3": "bool_var2",
                    "6": "byte_var2"
                },
                "cVar2": {
                    "1": "check_format_flag",
                    "11": "char_var1",
                    "2": "check_result",
                    "4": "char_var2"
                },
                "cVar3": {
                    "1": "file_open_flag",
                    "12": "char_var2",
                    "2": "char2",
                    "4": "char_var3"
                },
                "iVar4": {
                    "1": "format_match_error",
                    "2": "int1",
                    "4": "format_check_result"
                },
                "iVar5": {
                    "1": "stat_error_code",
                    "2": "status_var",
                    "3": "stat_result",
                    "4": "int_var2"
                },
                "lStack_98": {
                    "1": "file_size_placeholder",
                    "12": "file_size",
                    "3": "long_stack_var1"
                },
                "lVar13": {
                    "1": "loop_var4",
                    "2": "check_result",
                    "3": "file_size",
                    "4": "long_var2"
                },
                "lVar21": {
                    "1": "long4",
                    "2": "bytes_read",
                    "3": "chunk_size",
                    "4": "long_var3"
                },
                "lVar8": {
                    "1": "data_length",
                    "2": "long_var_1",
                    "4": "long_var8",
                    "5": "long_var1",
                    "6": "bytes_read"
                },
                "local_158": {
                    "1": "archive_stat_struct",
                    "2": "local_stat_structure",
                    "3": "file_stat"
                },
                "local_198": {
                    "1": "local_size",
                    "2": "long_pointer",
                    "3": "local_pointer_to_long"
                },
                "local_1a0": {
                    "1": "undefined8_pointer2",
                    "2": "output_file_handle",
                    "3": "output_file"
                },
                "local_8": {
                    "1": "ignored_error_code"
                },
                "local_c8": {
                    "1": "local_var_c8",
                    "2": "temporary_directories"
                },
                "local_c8[3]": {
                    "1": "local_variable3"
                },
                "param_1": {
                    "1": "file_path_input",
                    "15": "input_file_path",
                    "6": "input_file_name",
                    "8": "input_file"
                },
                "param_2": {
                    "1": "output_filename",
                    "15": "output_file_path",
                    "6": "output_file_name",
                    "8": "output_file"
                },
                "param_3": {
                    "1": "output_file_descriptor",
                    "25": "file_descriptor",
                    "4": "fd"
                },
                "param_4": {
                    "1": "stat_parameters",
                    "2": "file_status",
                    "4": "stat_buffer",
                    "6": "file_stat"
                },
                "param_5": {
                    "1": "target_file_attributes",
                    "2": "target_name",
                    "3": "bfd_options",
                    "8": "target_format"
                },
                "param_6": {
                    "1": "parameter6",
                    "2": "format",
                    "3": "file_mode"
                },
                "param_7": {
                    "1": "flags",
                    "2": "copy_flags",
                    "3": "debug_link",
                    "5": "copy_options"
                },
                "pcVar15": {
                    "1": "pointer_char_var15",
                    "2": "char_pointer1",
                    "3": "temp_dir_path",
                    "4": "temp_directory"
                },
                "pcVar16": {
                    "1": "archived_file"
                },
                "pcVar17": {
                    "1": "path_ptr",
                    "2": "char_var4",
                    "3": "current_path"
                },
                "pcVar18": {
                    "1": "archive_member_path",
                    "2": "char_var5"
                },
                "pcVar19": {
                    "1": "next_archived_file"
                },
                "pcVar20": {
                    "1": "pointer_to_code_function",
                    "2": "pointer_to_code",
                    "7": "close_function"
                },
                "pcVar23": {
                    "1": "loop_ptr",
                    "2": "char_pointer4",
                    "3": "char_var6"
                },
                "pcVar24": {
                    "1": "stat_pointer"
                },
                "pcVar26": {
                    "1": "temp_file_path_concat"
                },
                "pcVar27": {
                    "1": "temp_file_path_concat2"
                },
                "pcVar28": {
                    "1": "temp_file_path_concat3"
                },
                "piVar10": {
                    "1": "errno_var",
                    "2": "error_code",
                    "3": "int_pointer",
                    "5": "pointer_to_int"
                },
                "pointerToUndef8_2[1]": {
                    "1": "pointer_to_undef8_2[1]"
                },
                "ppcVar14": {
                    "1": "output_archived_file"
                },
                "ppcVar16": {
                    "1": "ppc_var_outer",
                    "2": "current_archived_file",
                    "3": "archived_file"
                },
                "ppcVar16[0x1d]": {
                    "1": "pointer_to_pointer_to_char1[0x1d]"
                },
                "ppcVar16[0x1e8]": {
                    "1": "pointer_to_pointer_to_char1[0x1e8]"
                },
                "ppcVar16[1]": {
                    "1": "pointer_to_pointer_to_char1[1]"
                },
                "ppcVar17": {
                    "1": "current_archived_file"
                },
                "ppcVar18": {
                    "1": "tempdir"
                },
                "ppcVar19": {
                    "1": "archive_file"
                },
                "ppcVar19[0x1e8]": {
                    "1": "pointer_to_pointer_to_char1[0x1e8]"
                },
                "ppcVar19[1]": {
                    "1": "pointer_to_pointer_to_char1[1]"
                },
                "ppcVar20": {
                    "1": "code_pointer1",
                    "2": "close_function"
                },
                "ppcVar6": {
                    "1": "double_pointer_char_var6",
                    "2": "pointer_to_char_1",
                    "3": "archived_files"
                },
                "ppcVar6[0x1e8]": {
                    "1": "pointer_to_char_pointer1[0x1e8]"
                },
                "ppcVar6[1]": {
                    "1": "pointer_to_char3[1]"
                },
                "psVar24": {
                    "1": "file_stat_ptr",
                    "2": "stat_pointer",
                    "3": "file_stat"
                },
                "puVar14": {
                    "1": "pointer_to_undef8_2",
                    "4": "input_bfd",
                    "6": "bfd_handle"
                },
                "puVar16": {
                    "1": "pointer4"
                },
                "puVar19": {
                    "1": "output_bfd"
                },
                "puVar9": {
                    "1": "temp_dir_info_ptr",
                    "2": "temp_dir_ptr"
                },
                "pvVar7": {
                    "1": "pointer_void_var7",
                    "10": "buffer",
                    "2": "void_pointer",
                    "6": "pointer_to_void"
                },
                "uStack_b0": {
                    "1": "uint_var1",
                    "2": "permission_mask",
                    "7": "file_permissions"
                },
                "uVar11": {
                    "1": "uint_var1",
                    "2": "message",
                    "3": "undefined8_var1",
                    "5": "error_string"
                },
                "uVar12": {
                    "1": "unsigned_long_var2",
                    "2": "error_msg",
                    "3": "undefined8_var2",
                    "7": "error_message"
                },
                "uVar22": {
                    "1": "bit_flag",
                    "2": "uint_var1"
                }
            },
            "called": [
                "FUN_0011256b",
                "__errno_location",
                "bfd_openw",
                "bfd_fdopenw",
                "strerror",
                "FUN_00114e50",
                "free",
                "FUN_001126c0",
                "FUN_0011a0e0",
                "bfd_check_format",
                "FUN_00114d50",
                "FUN_00119ed0",
                "bfd_openr_next_archived_file",
                "FUN_00119dd0",
                "bfd_set_error",
                "FUN_00104d25",
                "close",
                "bfd_openr",
                "bfd_set_format",
                "bfd_check_format_matches",
                "bfd_stat",
                "bfd_close_all_done",
                "FUN_00113f50",
                "dcgettext",
                "bfd_get_error",
                "bfd_close"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid extract_and_copy_archive_00114690(undefined8 input_file_path,undefined8 output_file_path,int file_descriptor,undefined8 file_stat,\n                 undefined8 target_format,long file_mode,undefined8 copy_options)\n\n{\n  byte byte_var1;\n  char char_var1;\n  char char_var2;\n  int int_var1;\n  int int_var2;\n  char **archived_files;\n  void *buffer;\n  long bytes_read;\n  undefined8 *undefined8_pointer1;\n  int *pointer_to_int;\n  undefined8 error_string;\n  undefined8 error_message;\n  long long_var2;\n  undefined8 *bfd_handle;\n  char *temp_directory;\n  char **archived_file;\n  char *current_path;\n  char *char_pointer3;\n  undefined8 *undefined8_pointer3;\n  char **char_pointer_pointer4;\n  code *close_function;\n  long long_var3;\n  uint uint_var1;\n  char *char_var6;\n  stat *stat_ptr;\n  bool bool_var1;\n  byte byte_var2;\n  undefined8 *output_file;\n  long *local_pointer_to_long;\n  stat file_stat;\n  void *void_pointer_array [3];\n  uint file_permissions;\n  long file_size;\n  \n  byte_var2 = 0;\n  long_var2 = check_file_00113f50();\n  if (long_var2 < 1) {\n    if (long_var2 == 0) {\n      error_message = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_00119ed0(error_message,input_file_path);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  bfd_handle = (undefined8 *)bfd_openr(input_file_path,target_format);\n  if ((bfd_handle == (undefined8 *)0x0) || (int_var2 = bfd_stat(bfd_handle,file_stat), int_var2 != 0)) {\n    print_error_message_001126c0(input_file_path,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x40000;\n  }\n  char_var1 = bfd_check_format(bfd_handle,2);\n  if (char_var1 != '\\0') {\n    if (file_mode == 0) {\n      char_var1 = '\\0';\n      file_mode = *(long *)bfd_handle[1];\n    }\n    if (file_descriptor < 0) {\n      output_file = (undefined8 *)bfd_openw(output_file_path,file_mode);\n    }\n    else {\n      output_file = (undefined8 *)bfd_fdopenw(output_file_path,file_mode,file_descriptor);\n    }\n    if (output_file != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        error_message = *bfd_handle;\n        error_string = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_00119ed0(error_string,error_message);\n        DAT_00127a10 = 0;\n      }\n      FUNC_00114d50(output_file,bfd_handle,DAT_001264b4);\n      local_pointer_to_long = output_file + 0x1f;\n      if ((*(byte *)((long)bfd_handle + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        error_message = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_error_message_001126c0(0,bfd_handle,0,error_message);\n        return;\n      }\n      temp_directory = (char *)create_temp_directory_0011a0e0(*output_file);\n      if (temp_directory == (char *)0x0) {\n        pointer_to_int = __errno_location();\n        temp_directory = strerror(*pointer_to_int);\n        error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_error_and_exit_00119dd0(error_message,temp_directory);\n      }\n      if (DAT_00127a2c == 7) {\n        byte_var1 = *(byte *)((long)bfd_handle + 0x49);\n        uint_var1 = 0;\n      }\n      else {\n        byte_var1 = *(byte *)((long)bfd_handle + 0x49);\n        uint_var1 = byte_var1 >> 3 & 1;\n      }\n      bool_var1 = _DAT_001264b0 != 0;\n      *(byte *)((long)output_file + 0x49) =\n           byte_var1 & 0x10 | (byte)(uint_var1 << 3) | *(byte *)((long)output_file + 0x49) & 0xe7;\n      if (bool_var1) {\n        *(uint *)((long)output_file + 0x44) = *(uint *)((long)output_file + 0x44) | 0x2000;\n      }\n      undefined8_pointer3 = (undefined8 *)0x0;\n      archived_file = (char **)bfd_openr_next_archived_file(bfd_handle,0);\n      char_var2 = bfd_set_format(output_file,*(byte *)(bfd_handle + 9) & 7);\n      if (char_var2 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(0,output_file,0,0);\n        FUNC_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (archived_file != (char **)0x0))) {\n        char_pointer3 = *archived_file;\n        current_path = char_pointer3;\n        if (*char_pointer3 == '/') {\nLAB_0010527d:\n          error_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_00119ed0(error_message,char_pointer3);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*current_path != '\\0') {\n          char_var6 = current_path;\n          if ((*current_path == '.') && (char_var6 = current_path + 1, current_path[1] == '.')) {\n            char_var6 = current_path + 2;\n            if ((current_path[2] == '\\0') || (current_path[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*char_var6 != '\\0' && (*char_var6 != '/')); char_var6 = char_var6 + 1) {\n          }\n          current_path = char_var6;\n          if (*char_var6 == '/') {\n            extract_and_copy_archive_00114690_001052a2();\n            return;\n          }\n        }\n        char_pointer3 = (char *)concat(temp_directory,&DAT_0011b47d);\n        int_var2 = stat(char_pointer3,&file_stat);\n        undefined8_pointer1 = undefined8_pointer3;\n        if (-1 < int_var2) {\n          long_var2 = create_temp_directory_0011a0e0(char_pointer3);\n          free(char_pointer3);\n          if (long_var2 == 0) {\n            pointer_to_int = __errno_location();\n            char_pointer3 = strerror(*pointer_to_int);\n            error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_00119ed0(error_message,char_pointer3);\n            goto LAB_00104e93;\n          }\n          undefined8_pointer1 = (undefined8 *)xmalloc(0x18);\n          char_pointer3 = *archived_file;\n          *undefined8_pointer1 = undefined8_pointer3;\n          undefined8_pointer1[2] = 0;\n          undefined8_pointer1[1] = long_var2;\n          char_pointer3 = (char *)concat(long_var2,&DAT_0011b47d,char_pointer3);\n        }\n        int_var2 = 0;\n        if (DAT_001279cb != '\\0') {\n          stat_ptr = &file_stat;\n          for (long_var2 = 0x24; long_var2 != 0; long_var2 = long_var2 + -1) {\n            *(undefined4 *)&stat_ptr->st_dev = 0;\n            stat_ptr = (stat *)((long)stat_ptr + (ulong)byte_var2 * -8 + 4);\n          }\n          char_pointer_pointer4 = (char **)pointer_to_pointer_to_char1[0x1d];\n          if ((char **)pointer_to_pointer_to_char1[0x1d] == (char **)0x0) {\n            char_pointer_pointer4 = archived_file;\n          }\n          int_var2 = (**(code **)(pointer_to_pointer_to_char1[1] + 0x1e8))(archived_file,&file_stat);\n          if (int_var2 != 0) {\n            current_path = *archived_file;\n            error_message = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_00119ed0(error_message,current_path);\n          }\n        }\n        undefined8_pointer3 = (undefined8 *)xmalloc(0x18);\n        new_pointer[1] = char_pointer3;\n        *undefined8_pointer3 = undefined8_pointer1;\n        new_pointer[2] = 0;\n        char_var2 = bfd_check_format(archived_file,1);\n        if (char_var2 == '\\0') {\n          error_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_error_message_001126c0(0,archived_file,0,error_message);\n          char_pointer_pointer4 = (char **)bfd_openw(char_pointer3,file_mode);\n          if (char_pointer_pointer4 == (char **)0x0) {\nLAB_00104e80:\n            print_error_message_001126c0(char_pointer3,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          archived_files = (char **)pointer_to_pointer_to_char1[0x1d];\n          if ((char **)pointer_to_pointer_to_char1[0x1d] == (char **)0x0) {\n            archived_files = archived_file;\n          }\n          int_var1 = (**(code **)(pointer_to_char3[1] + 0x1e8))(archived_file);\n          long_var2 = file_size;\n          if (int_var1 == 0) {\n            if (file_size < 0) {\n              get_formatted_string_001125fa(archived_file);\n              error_message = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_00119ed0(error_message);\n            }\n            else {\n              int_var1 = bfd_seek(archived_file,0,0);\n              if (int_var1 == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  current_path = *char_pointer_pointer4;\n                  error_message = get_formatted_string_001125fa(archived_file);\n                  char_var6 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(char_var6,error_message,current_path);\n                }\n                buffer = (void *)xmalloc(0x2000);\n                for (; long_var2 != 0; long_var2 = long_var2 - long_var3) {\n                  long_var3 = 0x2000;\n                  if (long_var2 < 0x2001) {\n                    long_var3 = long_var2;\n                  }\n                  bytes_read = bfd_bread(buffer,long_var3,archived_file);\n                  archived_files = archived_file;\n                  if ((long_var3 != bytes_read) ||\n                     (bytes_read = bfd_bwrite(buffer,long_var3,char_pointer_pointer4), archived_files = char_pointer_pointer4,\n                     long_var3 != bytes_read)) {\n                    print_error_message_001126c0(0,archived_files,0,0);\n                    free(buffer);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*char_pointer_pointer4,file_permissions | 0x100);\n                free(buffer);\n                char_var2 = bfd_close_all_done(char_pointer_pointer4);\n                if (char_var2 == '\\0') {\n                  print_error_message_001126c0(char_pointer3,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              error_message = get_formatted_string_001125fa(archived_file);\n              print_error_message_0011a110(error_message);\n            }\n          }\n          else {\n            print_error_message_001126c0(0,archived_file,0,0);\n          }\nLAB_00104f00:\n          char_var2 = bfd_close_all_done(char_pointer_pointer4);\n          if (char_var2 == '\\0') {\n            print_error_message_001126c0(char_pointer3,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(char_pointer3);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (char_var1 == '\\0') {\n            char_pointer_pointer4 = (char **)bfd_openw(char_pointer3,*(undefined8 *)pointer_to_pointer_to_char1[1]);\n          }\n          else {\n            char_pointer_pointer4 = (char **)bfd_openw(char_pointer3,file_mode);\n          }\n          if (char_pointer_pointer4 == (char **)0x0) goto LAB_00104e80;\n          char_var2 = FUNC_00114e50(archived_file,char_pointer_pointer4,copy_options);\n          if (char_var2 == '\\0') {\n            int_var1 = bfd_get_arch(archived_file);\n            if (int_var1 == 0) goto LAB_00104d75;\n            char_var2 = bfd_close_all_done(char_pointer_pointer4);\n            if (char_var2 == '\\0') {\n              print_error_message_001126c0(char_pointer3,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          char_var2 = bfd_close(char_pointer_pointer4);\n          if (char_var2 == '\\0') {\n            print_error_message_001126c0(char_pointer3,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (int_var2 == 0)) {\n            set_file_time_0011a350(char_pointer3,&file_stat);\n          }\n          long_var2 = bfd_openr(char_pointer3,file_mode);\n          new_pointer[2] = long_var2;\n          *local_pointer_to_long = long_var2;\n          local_pointer_to_long = (long *)(long_var2 + 0xf0);\n          char_pointer_pointer4 = (char **)bfd_openr_next_archived_file(bfd_handle);\n          bfd_close(archived_file);\n          archived_file = char_pointer_pointer4;\n        }\n      }\n      *local_pointer_to_long = 0;\n      buffer = (void *)xstrdup(*output_file);\n      if (DAT_00127a20 == 0) {\n        close_function = bfd_close;\n      }\n      else {\n        close_function = bfd_close_all_done;\n      }\n      char_var1 = (*close_function)(output_file);\n      if (char_var1 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(buffer,0,0,0);\n      }\n      free(buffer);\n      buffer = (void *)xstrdup(*bfd_handle);\n      char_var1 = bfd_close(bfd_handle);\n      if (char_var1 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(buffer,0,0,0);\n      }\n      free(buffer);\nLAB_00114b4b:\n      while (undefined8_pointer3 != (undefined8 *)0x0) {\n        if (new_pointer[2] == 0) {\n          rmdir((char *)new_pointer[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)new_pointer[1]);\n        }\n        free((void *)new_pointer[1]);\n        bfd_handle = (undefined8 *)*undefined8_pointer3;\n        free(undefined8_pointer3);\n        undefined8_pointer3 = bfd_handle;\n      }\n      rmdir(temp_directory);\n      free(temp_directory);\n      return;\n    }\nLAB_00105231:\n    close(file_descriptor);\n    print_error_message_001126c0(output_file_path,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  char_var1 = bfd_check_format_matches(bfd_handle,1,void_pointer_array);\n  if (char_var1 == '\\0') {\n    int_var2 = bfd_get_error();\n    char_var1 = bfd_check_format_matches(bfd_handle,3,&file_stat);\n    if (char_var1 == '\\0') {\n      int_var1 = bfd_get_error();\n      if (int_var2 != int_var1) {\n        bfd_set_error(int_var2);\n      }\n      print_error_message_001126c0(input_file_path,0,0,0);\n      if (int_var2 == 0xd) {\n        print_matching_formats_0011256b(void_pointer_array[0]);\n      }\n      if (int_var1 != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(file_stat.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (int_var2 == 0xd) {\n      free(void_pointer_array[0]);\n    }\n  }\n  if (file_mode == 0) {\n    file_mode = *(long *)bfd_handle[1];\n  }\n  if (file_descriptor < 0) {\n    long_var2 = bfd_openw(output_file_path,file_mode);\n  }\n  else {\n    long_var2 = bfd_fdopenw(output_file_path,file_mode,file_descriptor);\n  }\n  if (long_var2 == 0) goto LAB_00105231;\n  FUNC_00114d50(long_var2,bfd_handle,DAT_001264b4);\n  char_var1 = FUNC_00114e50(bfd_handle,long_var2,copy_options);\n  if (char_var1 == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    char_var1 = bfd_close(long_var2);\n    goto LAB_001147d5;\n  }\n  char_var1 = bfd_close_all_done(long_var2);\nLAB_001147d5:\n  if (char_var1 != '\\x01') {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(output_file_path,0,0,0);\n    return;\n  }\n  char_var1 = bfd_close(bfd_handle);\n  if (char_var1 == '\\0') {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(input_file_path,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "extract_and_copy_archive_00114690",
            "entrypoint": "0x00114690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114690": "extract_and_copy_archive_00114690",
                "__ptr": "undefined8_pointer3",
                "__ptr[1]": "new_pointer[1]",
                "__ptr[2]": "new_pointer[2]",
                "bVar1": "byte_var1",
                "bVar25": "bool_var1",
                "bVar26": "byte_var2",
                "cVar2": "char_var1",
                "cVar3": "char_var2",
                "iVar4": "int_var1",
                "iVar5": "int_var2",
                "lStack_98": "file_size",
                "lVar13": "long_var2",
                "lVar21": "long_var3",
                "lVar8": "bytes_read",
                "local_158": "file_stat",
                "local_198": "local_pointer_to_long",
                "local_1a0": "output_file",
                "local_c8": "void_pointer_array",
                "param_1": "input_file_path",
                "param_2": "output_file_path",
                "param_3": "file_descriptor",
                "param_4": "file_stat",
                "param_5": "target_format",
                "param_6": "file_mode",
                "param_7": "copy_options",
                "pcVar15": "temp_directory",
                "pcVar16": "archived_file",
                "pcVar17": "current_path",
                "pcVar18": "char_pointer3",
                "pcVar19": "next_archived_file",
                "pcVar20": "close_function",
                "pcVar23": "char_var6",
                "piVar10": "pointer_to_int",
                "ppcVar16": "archived_file",
                "ppcVar16[0x1d]": "pointer_to_pointer_to_char1[0x1d]",
                "ppcVar16[1]": "pointer_to_pointer_to_char1[1]",
                "ppcVar19": "char_pointer_pointer4",
                "ppcVar19[1]": "pointer_to_pointer_to_char1[1]",
                "ppcVar6": "archived_files",
                "ppcVar6[1]": "pointer_to_char3[1]",
                "psVar24": "stat_ptr",
                "puVar14": "bfd_handle",
                "puVar9": "undefined8_pointer1",
                "pvVar7": "buffer",
                "uStack_b0": "file_permissions",
                "uVar11": "error_string",
                "uVar12": "error_message",
                "uVar22": "uint_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114b84": {
            "called": [
                "free",
                "rmdir"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "code": "\nvoid FUNC_00114b84(void)\n\n{\n  char *param_9;\n  \n  rmdir(param_9);\n  free(param_9);\n  return;\n}\n\n",
            "current_name": "FUNC_00114b84",
            "entrypoint": "0x00114b84",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00114b84": "FUNC_00114b84"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00114c20": {
            "additional_data": {
                "&DAT_0011b499": {
                    "1": "comparison_string"
                },
                "<original_function_name>": {
                    "1": "search_and_process_entry"
                },
                "DAT_0011b499": {
                    "1": "target_substring",
                    "2": "string_to_compare",
                    "6": "comparison_string"
                },
                "DAT_001278b8": {
                    "1": "matching_entry_found",
                    "2": "result",
                    "4": "flag"
                },
                "FUN_00114c20": {
                    "1": "find_and_process_entry",
                    "10": "process_data",
                    "2": "find_and_process_entries",
                    "3": "process_entries",
                    "7": "process_entry"
                },
                "cVar1": {
                    "1": "matching_result",
                    "11": "is_match",
                    "6": "comparison_result"
                },
                "find_matching_entry_00114190": {
                    "4": "find_matching_entry"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "entry",
                    "2": "entry_pointer",
                    "3": "input",
                    "4": "data"
                },
                "pcVar2": {
                    "1": "ptr_char",
                    "10": "next_entry",
                    "2": "char_pointer",
                    "6": "next_char"
                },
                "string_comparison_00113fb0": {
                    "1": "string_comparison",
                    "3": "compare_strings"
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_00114190"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid process_data_00114c20(long entry)\n\n{\n  char is_match;\n  char *next_entry;\n  \n  find_matching_entry(entry,1,1);\n  is_match = compare_strings(entry,&DAT_0011b499);\n  if (is_match != '\\0') {\n    next_entry = (char *)(entry + 5);\n    if (*(char *)(entry + 4) != 'a') {\n      next_entry = (char *)(entry + 4);\n    }\n    if (*next_entry != '\\0') {\n      find_matching_entry(next_entry,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "current_name": "process_data_00114c20",
            "entrypoint": "0x00114c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c20": "process_data_00114c20",
                "cVar1": "is_match",
                "find_matching_entry_00114190": "find_matching_entry",
                "param_1": "entry",
                "pcVar2": "next_entry",
                "string_comparison_00113fb0": "compare_strings"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c80": {
            "additional_data": {
                "FUN_00114c80": {
                    "1": "parse_parameter_value",
                    "11": "parse_parameter",
                    "2": "parse_key_value_pair",
                    "3": "parse_assignment"
                },
                "auVar3": {
                    "1": "extracted_data",
                    "2": "result_data",
                    "3": "parsed_result",
                    "7": "parsed_data"
                },
                "auVar3 [16]": {
                    "1": "result_array"
                },
                "copy_string_0011a480": {
                    "7": "copy_string"
                },
                "dcgettext": {
                    "1": "translate_error_message",
                    "5": "get_error_message"
                },
                "param_1": {
                    "1": "query_string",
                    "2": "url",
                    "26": "input_string"
                },
                "param_2": {
                    "1": "initial_value",
                    "2": "value",
                    "3": "value_1",
                    "4": "default_value",
                    "6": "value1"
                },
                "param_3": {
                    "1": "param_b",
                    "2": "param_3",
                    "22": "error_message",
                    "3": "error_msg"
                },
                "param_4": {
                    "1": "data",
                    "2": "param4_value",
                    "3": "value_2",
                    "6": "param_4"
                },
                "pcVar1": {
                    "1": "delimiter_ptr",
                    "10": "equal_sign_position",
                    "2": "equals_sign_position",
                    "5": "equal_sign_ptr"
                },
                "print_error_and_exit_00119dd0": {
                    "8": "print_error_and_exit"
                },
                "strchr": {
                    "1": "find_char"
                },
                "uVar2": {
                    "1": "format_error_message",
                    "3": "error_string",
                    "5": "format_error",
                    "6": "copy_result"
                },
                "xmalloc": {
                    "5": "allocate_memory"
                }
            },
            "called": [
                "FUN_001053b5",
                "xmalloc",
                "strchr",
                "FUN_0011a480"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_parameter_00114c80(char *input_string,undefined8 value1,undefined8 error_message,undefined8 value2)\n\n{\n  char *equal_sign_position;\n  undefined8 copy_result;\n  undefined parsed_parameters [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    parsed_parameters._0_8_ = (undefined8 *)xmalloc(0x30);\n    copy_result = copy_string(input_string,(long)equal_sign_position - (long)input_string);\n    parsed_parameters._0_8_[2] = equal_sign_position + 1;\n    parsed_parameters._0_8_[1] = copy_result;\n    parsed_parameters._0_8_[4] = 0;\n    parsed_parameters._0_8_[3] = 0;\n    *parsed_parameters._0_8_ = value1;\n    parsed_parameters._8_8_ = value2;\n    return parsed_parameters;\n  }\n  copy_result = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit(copy_result,error_message);\n}\n\n",
            "current_name": "parse_parameter_00114c80",
            "entrypoint": "0x00114c80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c80": "parse_parameter_00114c80",
                "auVar3": "parsed_parameters",
                "copy_string_0011a480": "copy_string",
                "dcgettext": "get_error_message",
                "param_1": "input_string",
                "param_2": "value1",
                "param_3": "error_message",
                "param_4": "value2",
                "pcVar1": "equal_sign_position",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "strchr": "find_char",
                "uVar2": "copy_result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114cf0": {
            "additional_data": {
                "FUN_00114cf0": {
                    "1": "allocate_path_string",
                    "2": "extract_filename",
                    "4": "extract_file_name",
                    "5": "create_file_path"
                },
                "bVar6": {
                    "1": "slash_found",
                    "14": "found_slash",
                    "3": "is_slash_present",
                    "6": "is_slash"
                },
                "lVar2": {
                    "1": "file_name_length",
                    "3": "path_length",
                    "8": "length",
                    "9": "index"
                },
                "lVar3": {
                    "1": "directory_length",
                    "2": "length",
                    "3": "file_name_length",
                    "6": "offset",
                    "8": "prefix_length"
                },
                "lVar4": {
                    "1": "file_name_index",
                    "2": "file_name_length",
                    "4": "last_slash_index",
                    "6": "slash_index"
                },
                "param_1": {
                    "1": "filepath",
                    "16": "path",
                    "2": "filename",
                    "3": "input_path",
                    "9": "file_path"
                },
                "pcVar1": {
                    "1": "filename_start",
                    "2": "last_slash_position",
                    "23": "last_slash",
                    "4": "last_forward_slash"
                },
                "pcVar5": {
                    "1": "new_directory_name",
                    "2": "copy_ptr",
                    "4": "new_file_path",
                    "8": "new_path"
                }
            },
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "code": "\nvoid create_file_path_00114cf0(char *path)\n\n{\n  char *last_slash;\n  long index;\n  long prefix_length;\n  long slash_index;\n  char *new_path;\n  byte found_slash;\n  \n  found_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    prefix_length = 0;\n  }\n  else {\n    slash_index = (long)last_slash - (long)path;\n    last_slash = (char *)xmalloc(slash_index + 0xb);\n    prefix_length = slash_index + 1;\n    new_path = last_slash;\n    for (index = slash_index; index != 0; index = index + -1) {\n      *new_path = *path;\n      path = path + (ulong)found_slash * -2 + 1;\n      new_path = new_path + (ulong)found_slash * -2 + 1;\n    }\n    last_slash[slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + prefix_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + prefix_length) + 8) = 0;\n  return;\n}\n\n",
            "current_name": "create_file_path_00114cf0",
            "entrypoint": "0x00114cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114cf0": "create_file_path_00114cf0",
                "bVar6": "found_slash",
                "lVar2": "index",
                "lVar3": "prefix_length",
                "lVar4": "slash_index",
                "param_1": "path",
                "pcVar1": "last_slash",
                "pcVar5": "new_path"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d50": {
            "called": [
                "FUN_0010540e"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid FUNC_00114d50(long param_1,long param_2,uint param_3)\n\n{\n  if (*(int *)(*(long *)(param_1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((param_3 == 2) && (*(int *)(*(long *)(param_2 + 8) + 8) == 2)) {\n    param_3 = (uint)*(byte *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(param_1 + 8) + 0x380) + 0x78))(param_1,param_3 != 0);\n  return;\n}\n\n",
            "current_name": "FUNC_00114d50",
            "entrypoint": "0x00114d50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00114d50": "FUNC_00114d50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00114d60": {
            "additional_data": {
                "FUN_00114d60": {
                    "1": "read_and_print_file_contents",
                    "2": "read_and_store_file",
                    "3": "read_file_contents",
                    "5": "read_and_store_file_contents"
                },
                "__errno_location": {
                    "1": "get_error_code_ptr",
                    "3": "get_errno_location"
                },
                "__stream": {
                    "1": "file_ptr",
                    "18": "file_stream",
                    "5": "file_pointer",
                    "7": "file"
                },
                "dcgettext": {
                    "1": "get_translated_error_message"
                },
                "iVar1": {
                    "1": "feof_check",
                    "2": "eof_flag",
                    "3": "eof_indicator",
                    "4": "is_eof",
                    "6": "end_of_file"
                },
                "lVar7": {
                    "1": "buffer_offset",
                    "11": "total_bytes_read",
                    "2": "current_offset",
                    "3": "current_size",
                    "4": "bytes_read",
                    "7": "current_position"
                },
                "lVar8": {
                    "1": "buffer_capacity",
                    "19": "buffer_size",
                    "2": "current_buffer_size",
                    "3": "max_size"
                },
                "param_1": {
                    "1": "file_pointer",
                    "23": "file_path",
                    "5": "file_info"
                },
                "pcVar3": {
                    "1": "err_msg",
                    "20": "error_message",
                    "4": "error_string",
                    "5": "error_msg"
                },
                "piVar2": {
                    "1": "error_number",
                    "3": "error_ptr",
                    "4": "errno_loc",
                    "5": "error_location",
                    "6": "errno_location",
                    "7": "errno_ptr"
                },
                "print_error_and_exit_00119dd0": {
                    "3": "print_error_and_exit"
                },
                "sVar6": {
                    "1": "read_result",
                    "20": "bytes_read",
                    "8": "read_size"
                },
                "strerror": {
                    "1": "get_error_message"
                },
                "uVar4": {
                    "1": "error_format_string",
                    "2": "error_message_template",
                    "3": "error_message",
                    "6": "error_string",
                    "9": "error_format"
                },
                "uVar5": {
                    "1": "buffer_ptr",
                    "2": "memory_allocation",
                    "8": "allocated_memory"
                }
            },
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_and_store_file_contents_00114d60(long file_path)\n\n{\n  int end_of_file;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 error_format;\n  FILE *file_stream;\n  undefined8 allocated_memory;\n  size_t bytes_read;\n  long total_bytes_read;\n  long buffer_size;\n  \n  file_stream = fopen(*(char **)(file_path + 0x10),\"r\");\n  if (file_stream == (FILE *)0x0) {\n    errno_ptr = __errno_location();\n    error_message = strerror(*errno_ptr);\n    allocated_memory = *(undefined8 *)(file_path + 0x10);\n    error_format = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_and_exit(error_format,allocated_memory,error_message);\n  }\n  buffer_size = 0x1000;\n  total_bytes_read = 0;\n  allocated_memory = xmalloc(0x1000);\n  *(undefined8 *)(file_path + 0x20) = allocated_memory;\n  while( true ) {\n    end_of_file = feof(file_stream);\n    if (end_of_file != 0) {\n      *(long *)(file_path + 0x18) = total_bytes_read;\n      fclose(file_stream);\n      return;\n    }\n    if (total_bytes_read == buffer_size) {\n      buffer_size = total_bytes_read * 2;\n      allocated_memory = xrealloc(*(undefined8 *)(file_path + 0x20),buffer_size);\n      *(undefined8 *)(file_path + 0x20) = allocated_memory;\n    }\n    bytes_read = fread((void *)(*(long *)(file_path + 0x20) + total_bytes_read),1,buffer_size - total_bytes_read,file_stream);\n    end_of_file = ferror(file_stream);\n    if (end_of_file != 0) break;\n    total_bytes_read = total_bytes_read + bytes_read;\n  }\n  allocated_memory = *(undefined8 *)(file_path + 0x10);\n  error_format = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_error_and_exit(error_format,allocated_memory);\n}\n\n",
            "current_name": "read_and_store_file_contents_00114d60",
            "entrypoint": "0x00114d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d60": "read_and_store_file_contents_00114d60",
                "__errno_location": "get_errno_location",
                "__stream": "file_stream",
                "dcgettext": "get_translated_error_message",
                "iVar1": "end_of_file",
                "lVar7": "total_bytes_read",
                "lVar8": "buffer_size",
                "param_1": "file_path",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "sVar6": "bytes_read",
                "strerror": "get_error_string",
                "uVar4": "error_format",
                "uVar5": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114dc7": {
            "additional_data": {
                "FUN_00114dc7": {
                    "1": "read_and_allocate_memory",
                    "2": "read_and_expand_data",
                    "4": "read_and_resize_data",
                    "9": "read_and_resize_buffer"
                },
                "dcgettext": {
                    "1": "translate_message"
                },
                "fclose": {
                    "1": "close_file"
                },
                "ferror": {
                    "1": "check_error"
                },
                "fread": {
                    "1": "read_file_content"
                },
                "iVar1": {
                    "1": "error_indicator",
                    "17": "error",
                    "2": "error_occurred",
                    "5": "error_flag"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_error_message_and_exit",
                    "2": "print_error_and_exit"
                },
                "sVar4": {
                    "2": "read_bytes",
                    "22": "bytes_read",
                    "4": "read_size"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "uVar2": {
                    "1": "error_format",
                    "2": "error_string",
                    "22": "error_message"
                },
                "uVar3": {
                    "1": "error_msg",
                    "11": "translated_error_message",
                    "2": "translation",
                    "5": "error_context"
                },
                "unaff_R12": {
                    "1": "buffer_current_pos",
                    "2": "current_pos",
                    "3": "start_position",
                    "5": "start_offset",
                    "8": "current_position"
                },
                "unaff_R14": {
                    "1": "end",
                    "10": "end_position",
                    "2": "read_end",
                    "4": "end_pos",
                    "5": "end_offset"
                },
                "unaff_RBP": {
                    "1": "memory_base",
                    "11": "buffer",
                    "2": "buffer_address",
                    "3": "buffer_ptr",
                    "4": "buffer_info",
                    "6": "buffer_pointer"
                },
                "unaff_RBX": {
                    "1": "file_stream",
                    "23": "file",
                    "3": "file_ptr",
                    "4": "file_pointer"
                },
                "xrealloc": {
                    "1": "resize_buffer"
                }
            },
            "called": [
                "fread",
                "FUN_00114dc7",
                "feof",
                "FUN_00119dd0",
                "xrealloc",
                "ferror",
                "dcgettext",
                "fclose"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\nvoid read_and_resize_buffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 translated_error_message;\n  size_t bytes_read;\n  FILE *file;\n  long buffer;\n  long current_position;\n  long end_position;\n  \n  while( true ) {\n    bytes_read = fread((void *)(*(long *)(buffer + 0x20) + current_position),1,end_position - current_position,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      translated_error_message = *(undefined8 *)(buffer + 0x10);\n      error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit(error_message,translated_error_message);\n    }\n    current_position = current_position + bytes_read;\n    error = feof(file);\n    if (error != 0) break;\n    if (current_position == end_position) {\n      end_position = current_position * 2;\n      translated_error_message = xrealloc(*(undefined8 *)(buffer + 0x20),end_position);\n      *(undefined8 *)(buffer + 0x20) = translated_error_message;\n    }\n  }\n  *(long *)(buffer + 0x18) = current_position;\n  fclose(file);\n  return;\n}\n\n",
            "current_name": "read_and_resize_buffer_00114dc7",
            "entrypoint": "0x00114dc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "dcgettext": "translate_message",
                "fclose": "close_file",
                "ferror": "check_error",
                "fread": "read_file_content",
                "iVar1": "error",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "sVar4": "bytes_read",
                "uVar2": "error_message",
                "uVar3": "translated_error_message",
                "unaff_R12": "current_position",
                "unaff_R14": "end_position",
                "unaff_RBP": "buffer",
                "unaff_RBX": "file",
                "xrealloc": "resize_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e00": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nvoid FUNC_00114e00(int param_1)\n\n{\n  if (param_1 == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (param_1 == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "current_name": "FUNC_00114e00",
            "entrypoint": "0x00114e00",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00114e00": "FUNC_00114e00"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00114e50": {
            "called": [
                "bfd_set_format",
                "FUN_00119ed0",
                "FUN_001126c0",
                "dcgettext",
                "FUN_001125fa",
                "FUN_00107976"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_error_message_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = get_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = get_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = get_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = get_formatted_string_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = recognize_input_format_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = string_comparison_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = string_comparison_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,process_binary_section_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = find_matching_entry_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_matching_entry_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_matching_entry_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = process_debug_info_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)initialize_memory_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = process_debug_info_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = process_debug_data_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = initialize_memory_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_entry_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = process_debug_info_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar35 != 0) && (cVar11 = process_debug_data_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = process_parameter_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = start_debug_block_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_debug_line_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = extract_section_info_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,match_pattern_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,match_pattern_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,match_pattern_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,match_pattern_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = process_binary_section_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_pattern_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = check_pattern_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_pattern_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = check_pattern_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = extract_section_info_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = analyze_input_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,process_relocation_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_binary_section_00115dc0,param_2);\n    bfd_map_over_sections(param_1,reverse_section_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = string_comparison_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = string_comparison_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)process_build_attribute_notes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00114e50",
            "entrypoint": "0x00114e50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001152b6": {
            "called": [
                "FUN_00119ed0",
                "FUN_00107880",
                "dcgettext",
                "FUN_001125fa"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = get_formatted_string_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_input_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = process_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_memory_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_parameter_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_info_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_binary_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_info_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = analyze_input_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_section_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)process_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_001152b6",
            "entrypoint": "0x001152b6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00115530": {
            "additional_data": {
                "FUNC_00115d00": {
                    "1": "func1d00"
                },
                "FUN_00115530": {
                    "1": "process_binary",
                    "13": "process_binary_section",
                    "2": "create_output_section",
                    "3": "process_and_create_output_section",
                    "7": "process_section"
                },
                "PCVar12": {
                    "1": "new_section_name"
                },
                "bVar14": {
                    "1": "var13",
                    "2": "bool_var14",
                    "5": "flag",
                    "6": "bool_var"
                },
                "bfd_convert_section_setup": {
                    "1": "convert_section_setup_function"
                },
                "bfd_make_section_anyway_with_flags": {
                    "1": "make_section_function"
                },
                "cVar4": {
                    "1": "temp_char",
                    "13": "result",
                    "2": "char_var4",
                    "3": "flag"
                },
                "copy_private_data_0010808f": {
                    "1": "copy_private_data_function"
                },
                "drop_share_flag_if_not_coff_00115f30": {
                    "1": "drop_share_flag_function"
                },
                "find_matching_entry_00114190": {
                    "1": "find_matching_entry_function"
                },
                "flagVar": {
                    "1": "flag_var"
                },
                "flagVar2": {
                    "1": "flag_var2"
                },
                "iVar5": {
                    "1": "var4",
                    "15": "comparison_result",
                    "2": "index",
                    "4": "int_var"
                },
                "inputParam1": {
                    "1": "param1"
                },
                "inputParam2": {
                    "1": "param2"
                },
                "inputParam3": {
                    "1": "param3"
                },
                "lVar1": {
                    "1": "index",
                    "2": "length",
                    "3": "temp_var1",
                    "5": "result"
                },
                "lVar9": {
                    "1": "temp_var6",
                    "16": "matching_entry",
                    "2": "result"
                },
                "length1": {
                    "1": "s_var7"
                },
                "length2": {
                    "1": "s_var8"
                },
                "local_40": {
                    "1": "local_array_var",
                    "2": "section_size_array",
                    "4": "size_array",
                    "6": "section_size"
                },
                "local_40[2]": {
                    "1": "local_variable5"
                },
                "local_48": {
                    "1": "var_ptr6",
                    "2": "string1",
                    "3": "local_var48",
                    "4": "section_name"
                },
                "local_50": {
                    "1": "error_msg",
                    "12": "error_message",
                    "2": "error_string",
                    "3": "local_var50"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "binary_section_pointer",
                    "3": "binary_data",
                    "6": "param1"
                },
                "param_2": {
                    "1": "binary_param",
                    "2": "sections",
                    "3": "arg2",
                    "6": "param2"
                },
                "param_3": {
                    "1": "bfd",
                    "2": "input_param3",
                    "3": "output_file",
                    "6": "param3"
                },
                "pcVar10": {
                    "1": "char_ptr10",
                    "2": "pointer_var10"
                },
                "pcVar11": {
                    "1": "temp_var9",
                    "2": "pointer_var11"
                },
                "pcVar12": {
                    "1": "buffer",
                    "2": "ptr_var12"
                },
                "pcVar15": {
                    "1": "output_section"
                },
                "pcVar2": {
                    "1": "char_ptr2",
                    "2": "ptr_var2",
                    "3": "temp_var2"
                },
                "ppcVar3": {
                    "1": "entry_list",
                    "2": "temp_var3",
                    "3": "section_entry",
                    "4": "section_list"
                },
                "print_error_message_001126c0": {
                    "1": "print_error_message_function"
                },
                "sVar7": {
                    "1": "size_variable1",
                    "10": "length1",
                    "2": "size_var7",
                    "3": "size1",
                    "7": "size_var1"
                },
                "sVar8": {
                    "1": "length_2",
                    "10": "length2",
                    "2": "size_var8",
                    "3": "size2",
                    "7": "size_var2"
                },
                "set_alignment_00108179": {
                    "1": "set_alignment_function"
                },
                "set_size_and_alignment_00108072": {
                    "1": "set_size_and_alignment_function"
                },
                "sizeVar1": {
                    "1": "size_var1"
                },
                "sizeVar2": {
                    "1": "size_var2"
                },
                "tempLocalArray1": {
                    "1": "temp_local_array1"
                },
                "tempLocalVar1": {
                    "1": "temp_local_var1"
                },
                "tempLocalVar2": {
                    "1": "temp_local_var2"
                },
                "tempVar1": {
                    "1": "temp_var1"
                },
                "tempVar10": {
                    "1": "temp_var10"
                },
                "tempVar2": {
                    "1": "temp_var2"
                },
                "tempVar3": {
                    "1": "temp_var3"
                },
                "tempVar4": {
                    "1": "temp_var4"
                },
                "tempVar5": {
                    "1": "temp_var5"
                },
                "tempVar6": {
                    "1": "temp_var6"
                },
                "tempVar7": {
                    "1": "temp_var7"
                },
                "tempVar8": {
                    "1": "temp_var8"
                },
                "tempVar9": {
                    "1": "temp_var9"
                },
                "uVar13": {
                    "1": "section_flag_result",
                    "2": "flag",
                    "3": "flags",
                    "4": "uint_var2"
                },
                "uVar6": {
                    "1": "temp_var6",
                    "2": "uint_var6",
                    "3": "flag",
                    "4": "uint_var"
                }
            },
            "called": [
                "FUN_00115f30",
                "bfd_convert_section_setup",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "xmalloc",
                "strcmp",
                "FUN_00114190",
                "strcpy",
                "FUN_001159d0",
                "bfd_set_section_size",
                "strcat",
                "dcgettext",
                "strlen"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid process_binary_section_00115530(long param1,char **param2,long param3)\n\n{\n  long result;\n  char *temp_var2;\n  char **section_list;\n  char result;\n  int comparison_result;\n  uint uint_var;\n  size_t length1;\n  size_t length2;\n  long matching_entry;\n  char *ptr_var10;\n  char *ptr_var11;\n  char *ptr_var12;\n  uint uint_var2;\n  bool bool_var;\n  long error_message;\n  char *section_name;\n  long section_size [2];\n  \n  result = process_binary_section_00115530_001159d0(param2);\n  if (result != '\\0') {\n    return;\n  }\n  ptr_var10 = *param2;\n  uint_var2 = *(uint *)((long)param2 + 0x24);\n  section_name = ptr_var10;\n  section_list = DAT_001278d8;\n  if (*(int *)(*(long *)(param1 + 8) + 8) != *(int *)(*(long *)(param3 + 8) + 8)) {\n    uint_var2 = uint_var2 & *(uint *)(*(long *)(param1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param3 + 8) + 0x18);\n  }\n  for (; section_list != (char **)0x0; section_list = (char **)section_list[3]) {\n    comparison_result = strcmp(*section_list,ptr_var10);\n    if (comparison_result == 0) {\n      if (*(uint *)(section_list + 2) != 0xffffffff) {\n        uint_var2 = *(uint *)(section_list + 2);\n      }\n      if (ptr_var10 != section_list[1]) {\n        section_name = section_list[1];\n        uint_var2 = drop_share_flag_function(uint_var2,param3);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (ptr_var10 = DAT_001278f8, (*(byte *)((long)param2 + 0x24) & 1) != 0)) ||\n     (ptr_var10 = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    length1 = strlen(ptr_var10);\n    length2 = strlen(section_name);\n    ptr_var12 = (char *)xmalloc(length1 + 1 + length2);\n    ptr_var10 = strcpy(ptr_var12,ptr_var10);\n    section_name = strcat(ptr_var10,section_name);\n  }\n  matching_entry = find_matching_entry_function(*param2,0,0x80);\n  bool_var = false;\n  if (matching_entry == 0) {\n    if ((DAT_00127a2c == 4) && ((uint_var2 & 0x2000001) != 0)) {\n      comparison_result = *(int *)(*(long *)(param1 + 8) + 8);\n      if (comparison_result == 5) {\n        if (*(int *)(param2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n            bool_var = (uint_var2 & 0x2000000) == 0;\n            uint_var = ~((-(uint)((uint_var2 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param2 + 0x24) = *(uint *)((long)param2 + 0x24) & uint_var;\n          }\n          else {\n            uint_var = 0xfdfffefd;\n          }\n          uint_var2 = uint_var2 & uint_var;\n        }\n      }\n      else if ((comparison_result != 2) || (comparison_result = strcmp(*param2,\".buildid\"), comparison_result != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    uint_var2 = drop_share_flag_function(uint_var2 & 0x104 | *(uint *)(matching_entry + 0x28),param3,*param2);\n  }\n  result = bfd_convert_section_setup(param1,param2,param3,&section_name,section_size);\n  if (result == '\\0') {\n    ptr_var10 = (char *)0x0;\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  ptr_var10 = (char *)bfd_make_section_anyway_with_flags(param3,section_name,uint_var2);\n  if (ptr_var10 == (char *)0x0) {\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      section_size[0] = 0;\n      goto LAB_001158e7;\n    }\n    result = bfd_set_section_size(ptr_var10,section_size[0]);\n    if (result == '\\0') {\n      set_size_and_alignment_function();\n      return;\n    }\n  }\n  else {\n    section_size[0] = ((((long)DAT_00127a1c - 1U) + section_size[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    result = bfd_set_section_size(ptr_var10);\n    if (result == '\\0') {\n      set_size_and_alignment_function();\n      return;\n    }\n  }\n  error_message = 0;\n  ptr_var12 = param2[6];\n  matching_entry = find_matching_entry_function(*param2,0,0x18);\n  if (matching_entry == 0) {\n    ptr_var10[0x28] = ptr_var10[0x28] | 1;\n    ptr_var11 = *param2;\n    ptr_var12 = ptr_var12 + _DAT_00127990;\n    *(char **)(ptr_var10 + 0x30) = ptr_var12;\n    *(char **)(ptr_var10 + 0x38) = ptr_var12;\n    ptr_var12 = param2[7];\n    matching_entry = find_matching_entry_function(ptr_var11,0,0x60);\n    if (matching_entry == 0) goto LAB_00115695;\nLAB_00115860:\n    ptr_var11 = *(char **)(matching_entry + 0x20);\n    if ((*(byte *)(matching_entry + 0x14) & 0x40) != 0) {\n      ptr_var11 = ptr_var11 + (long)ptr_var12;\n    }\n    *(char **)(ptr_var10 + 0x38) = ptr_var11;\n    matching_entry = find_matching_entry_function(*param2,0,0x200);\n    if (matching_entry != 0) goto LAB_00115889;\nLAB_001156b8:\n    uint_var2 = *(uint *)((long)param2 + 0x7c);\n    if (uint_var2 < 0x3f) goto LAB_001156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(ptr_var10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    ptr_var10[0x28] = ptr_var10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = ptr_var10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    result = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,ptr_var10);\n    if (result == '\\0') {\n      copy_private_data_function();\n      return;\n    }\n  }\n  else {\n    ptr_var11 = *(char **)(matching_entry + 0x18);\n    if ((*(byte *)(matching_entry + 0x14) & 8) == 0) {\n      ptr_var11 = ptr_var11 + (long)ptr_var12;\n    }\n    ptr_var10[0x28] = ptr_var10[0x28] | 1;\n    temp_var2 = *param2;\n    *(char **)(ptr_var10 + 0x30) = ptr_var11;\n    *(char **)(ptr_var10 + 0x38) = ptr_var11;\n    ptr_var12 = param2[7];\n    matching_entry = find_matching_entry_function(temp_var2,0,0x60);\n    if (matching_entry != 0) goto LAB_00115860;\nLAB_00115695:\n    ptr_var11 = *param2;\n    *(char **)(ptr_var10 + 0x38) = ptr_var12 + _DAT_00127990;\n    matching_entry = find_matching_entry_function(ptr_var11,0,0x200);\n    if (matching_entry == 0) goto LAB_001156b8;\nLAB_00115889:\n    uint_var2 = *(uint *)(matching_entry + 0x2c);\n    if (0x3e < uint_var2) {\n      set_alignment_function();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(ptr_var10 + 0x7c) = uint_var2;\n    *(undefined4 *)(ptr_var10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    ptr_var10[0x28] = ptr_var10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = ptr_var10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    ptr_var12 = param2[0x1a];\n    matching_entry = FUNC_00115d00(ptr_var12,param2[0x1c]);\n    if ((matching_entry == 0) ||\n       (result = *(long *)(param1 + 8), *(uint *)(matching_entry + 0x18) = *(uint *)(matching_entry + 0x18) | 0x20,\n       *(int *)(result + 8) != 5)) goto LAB_00115700;\n    *(long *)(ptr_var12 + 0xb0) = matching_entry;\n    result = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,ptr_var10);\n    if (result == '\\0') {\n      copy_private_data_function();\n      return;\n    }\n  }\n  if (bool_var) {\n    *(undefined4 *)(*(long *)(ptr_var10 + 0xd0) + 4) = 8;\n  }\n  if (error_message == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  print_error_message_function(0,param3,ptr_var10,error_message);\n  return;\n}\n\n",
            "current_name": "process_binary_section_00115530",
            "entrypoint": "0x00115530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115530": "process_binary_section_00115530",
                "bVar14": "bool_var",
                "bfd_convert_section_setup": "convert_section_setup_function",
                "bfd_make_section_anyway_with_flags": "make_section_function",
                "cVar4": "result",
                "copy_private_data_0010808f": "copy_private_data_function",
                "drop_share_flag_if_not_coff_00115f30": "drop_share_flag_function",
                "find_matching_entry_00114190": "find_matching_entry_function",
                "iVar5": "comparison_result",
                "lVar1": "result",
                "lVar9": "matching_entry",
                "local_40": "section_size",
                "local_48": "section_name",
                "local_50": "error_message",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar10": "ptr_var10",
                "pcVar11": "ptr_var11",
                "pcVar12": "ptr_var12",
                "pcVar2": "temp_var2",
                "ppcVar3": "section_list",
                "print_error_message_001126c0": "print_error_message_function",
                "sVar7": "length1",
                "sVar8": "length2",
                "set_alignment_00108179": "set_alignment_function",
                "set_size_and_alignment_00108072": "set_size_and_alignment_function",
                "uVar13": "uint_var2",
                "uVar6": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115970": {
            "additional_data": {
                "FUN_00115970": {
                    "1": "copy_and_print_error_if_failed",
                    "12": "copy_and_delete_file",
                    "2": "copy_and_print_error",
                    "3": "copy_and_print_error_message",
                    "4": "copy_and_set_file_time"
                },
                "auVar6": {
                    "1": "return_value_struct",
                    "10": "return_value",
                    "15": "result",
                    "3": "return_data"
                },
                "copy_file_00115a90": {
                    "1": "copy_file"
                },
                "param_1": {
                    "1": "old_filepath",
                    "20": "source_file_path",
                    "4": "source_file",
                    "6": "source_path"
                },
                "param_2": {
                    "1": "new_filepath",
                    "20": "destination_file_path",
                    "4": "destination_file",
                    "6": "destination_path"
                },
                "param_3": {
                    "1": "flags",
                    "19": "file_permissions",
                    "2": "file_mode",
                    "7": "file_permission"
                },
                "param_4": {
                    "1": "file_permissions",
                    "19": "file_size",
                    "2": "file_metadata",
                    "3": "file_attributes"
                },
                "param_5": {
                    "1": "should_update_time",
                    "2": "preserve_timestamp",
                    "3": "set_time_flag",
                    "4": "should_set_time",
                    "7": "should_set_file_time"
                },
                "param_6": {
                    "1": "user_data",
                    "12": "error_code",
                    "2": "return_address",
                    "3": "original_return_value"
                },
                "pcVar3": {
                    "1": "err_string",
                    "21": "error_message",
                    "8": "error_string"
                },
                "piVar2": {
                    "1": "error_location_ptr",
                    "13": "errno_location",
                    "2": "error_number_ptr",
                    "4": "errno_ptr"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error_message"
                },
                "set_file_time_0011a350": {
                    "1": "set_file_time"
                },
                "uVar1": {
                    "1": "copy_status",
                    "30": "copy_result"
                },
                "uVar4": {
                    "1": "localized_error",
                    "2": "localized_message",
                    "3": "error_string",
                    "6": "translated_error_message",
                    "7": "localized_error_message"
                },
                "uVar5": {
                    "1": "copy_result_ulong",
                    "2": "copy_file_size",
                    "3": "copy_error",
                    "4": "copy_error_code"
                },
                "unlink": {
                    "1": "delete_file"
                }
            },
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16]\ncopy_and_delete_file_00115970(char *source_file_path,char *destination_file_path,undefined4 file_permissions,undefined8 file_size,char set_file_time,\n            undefined8 error_code)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 localized_error_message;\n  ulong copy_error_code;\n  undefined result [16];\n  \n  if (destination_file_path == source_file_path) {\n    copy_error_code = 0;\n  }\n  else {\n    copy_result = copy_file(file_permissions,destination_file_path,file_size);\n    copy_error_code = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      localized_error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message(localized_error_message,destination_file_path,error_message);\n    }\n    unlink(source_file_path);\n  }\n  if (set_file_time != '\\0') {\n    set_file_time(destination_file_path,file_size);\n  }\n  result._8_8_ = error_code;\n  result._0_8_ = copy_error_code;\n  return result;\n}\n\n",
            "current_name": "copy_and_delete_file_00115970",
            "entrypoint": "0x00115970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115970": "copy_and_delete_file_00115970",
                "auVar6": "result",
                "copy_file_00115a90": "copy_file",
                "param_1": "source_file_path",
                "param_2": "destination_file_path",
                "param_3": "file_permissions",
                "param_4": "file_size",
                "param_5": "set_file_time",
                "param_6": "error_code",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "print_error_message_00119ed0": "print_error_message",
                "set_file_time_0011a350": "set_file_time",
                "uVar1": "copy_result",
                "uVar4": "localized_error_message",
                "uVar5": "copy_error_code",
                "unlink": "delete_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001159d0": {
            "additional_data": {
                "DAT_001279f8": {
                    "1": "pattern_constant_3"
                },
                "DAT_00127a08": {
                    "1": "pattern_constant_2"
                },
                "DAT_00127a2c": {
                    "1": "pattern_constant_1"
                },
                "FUNC_00115d00": {
                    "1": "get_section_data"
                },
                "FUN_001159d0": {
                    "1": "validate_section",
                    "10": "process_binary_section",
                    "2": "process_binary",
                    "4": "process_sections",
                    "9": "process_section"
                },
                "cVar2": {
                    "1": "temp_char",
                    "2": "pattern_result",
                    "4": "is_pattern_valid",
                    "5": "pattern_match",
                    "7": "check_result"
                },
                "check_pattern_00115d70": {
                    "1": "is_pattern_valid"
                },
                "lVar4": {
                    "1": "current_section",
                    "2": "section_ptr",
                    "3": "sub_section_pointer",
                    "4": "section_address",
                    "6": "section_pointer"
                },
                "lVar5": {
                    "1": "section_2_address",
                    "2": "current_ptr",
                    "3": "temp_var2"
                },
                "param_1": {
                    "1": "section_ptr",
                    "2": "binary_offset",
                    "5": "binary_address",
                    "9": "section_address"
                },
                "process_section_00115b70": {
                    "1": "is_section_valid"
                },
                "uVar1": {
                    "1": "pattern_check_result",
                    "12": "result",
                    "3": "pattern_address",
                    "9": "return_value"
                },
                "uVar3": {
                    "1": "section_processing_result",
                    "11": "section_result",
                    "2": "status",
                    "3": "section_status",
                    "4": "section_process_result",
                    "7": "result"
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_00115b70",
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00115f50"
            ],
            "code": "\nundefined4 process_binary_section_001159d0(long section_address)\n\n{\n  undefined8 result;\n  char check_result;\n  undefined4 section_result;\n  long section_pointer;\n  long current_section;\n  \n  section_result = is_section_valid();\n  if ((char)section_result == '\\0') {\n    if ((*(byte *)(section_address + 0x27) & 2) == 0) {\n      return section_result;\n    }\n    section_pointer = FUNC_00115d00(*(undefined8 *)(section_address + 0xd0),*(undefined8 *)(section_address + 0xe0));\n    if ((section_pointer != 0) &&\n       (((result = *(undefined8 *)(section_pointer + 8), DAT_00127a2c != 7 ||\n         (check_result = is_pattern_valid(result,DAT_00127a08), check_result != '\\0')) &&\n        (check_result = is_pattern_valid(result,DAT_001279f8), check_result == '\\0')))) {\n      section_pointer = *(long *)(*(long *)(section_address + 0xd0) + 0xc0);\n      current_section = section_pointer;\n      do {\n        if (current_section == 0) {\n          return 1;\n        }\n        check_result = is_section_valid(current_section);\n        if (check_result == '\\0') {\n          return section_result;\n        }\n        current_section = *(long *)(*(long *)(current_section + 0xd0) + 0xc0);\n      } while (section_pointer != current_section);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "process_binary_section_001159d0",
            "entrypoint": "0x001159d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001159d0": "process_binary_section_001159d0",
                "cVar2": "check_result",
                "check_pattern_00115d70": "is_pattern_valid",
                "lVar4": "section_pointer",
                "lVar5": "current_section",
                "param_1": "section_address",
                "process_section_00115b70": "is_section_valid",
                "uVar1": "result",
                "uVar3": "section_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115a90": {
            "additional_data": {
                "FUN_00115a90": {
                    "1": "copy_data_to_file",
                    "13": "copy_file",
                    "2": "copy_file_contents",
                    "5": "copy_file_data"
                },
                "_Var3": {
                    "1": "source_file_position",
                    "2": "current_position",
                    "3": "seek_result",
                    "4": "current_offset",
                    "8": "file_offset"
                },
                "__fd": {
                    "1": "new_file_descriptor",
                    "16": "destination_file_descriptor",
                    "2": "output_fd",
                    "5": "output_file_descriptor"
                },
                "__off_t": {
                    "1": "file_offset"
                },
                "iVar1": {
                    "1": "original_error_value",
                    "19": "original_errno",
                    "2": "old_errno",
                    "3": "errno_value"
                },
                "iVar2": {
                    "1": "read_bytes",
                    "3": "bytes_read",
                    "9": "read_result"
                },
                "local_2038": {
                    "1": "data_buffer",
                    "29": "buffer"
                },
                "param_1": {
                    "1": "file_descriptor_in",
                    "15": "source_file_descriptor",
                    "2": "input_fd",
                    "3": "input_file_descriptor",
                    "4": "file_descriptor",
                    "5": "source_fd"
                },
                "param_2": {
                    "1": "file_name",
                    "13": "destination_file_path",
                    "2": "output_file_path",
                    "5": "destination_path"
                },
                "param_3": {
                    "1": "permission",
                    "2": "file_stats",
                    "4": "file_info"
                },
                "piVar6": {
                    "1": "error_ptr",
                    "2": "pointer_to_errno",
                    "7": "errno_pointer",
                    "8": "errno_ptr",
                    "9": "errno_location"
                },
                "sVar5": {
                    "1": "num_bytes_written",
                    "24": "bytes_written",
                    "4": "write_result"
                },
                "uVar4": {
                    "1": "read_bytes",
                    "18": "bytes_read",
                    "2": "bytes_written",
                    "3": "return_value"
                }
            },
            "called": [
                "__errno_location",
                "FUN_00108237",
                "lseek",
                "fchmod",
                "read",
                "open",
                "close",
                "write"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nulong copy_file_00115a90(int source_file_descriptor,char *destination_file_path,long file_info)\n\n{\n  int original_errno;\n  int destination_file_descriptor;\n  int read_result;\n  file_offset file_offset;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (file_offset = lseek(source_file_descriptor,0,0), file_offset == 0)) {\n    destination_file_descriptor = open(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_read = close_and_set_errno_00108237();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read(source_file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_read;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        original_errno = *errno_location;\n        fchmod(destination_file_descriptor,*(__mode_t *)(file_info + 0x18));\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (read_result != 0) {\n          *errno_location = original_errno;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write(destination_file_descriptor,buffer,(long)read_result);\n    } while (bytes_written == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "copy_file_00115a90",
            "entrypoint": "0x00115a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "_Var3": "file_offset",
                "__fd": "destination_file_descriptor",
                "__off_t": "file_offset",
                "iVar1": "original_errno",
                "iVar2": "read_result",
                "local_2038": "buffer",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "param_3": "file_info",
                "piVar6": "errno_location",
                "sVar5": "bytes_written",
                "uVar4": "bytes_read"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115b70": {
            "additional_data": {
                ".gnu_debugaltlink": {
                    "1": "section_type_string1"
                },
                ".gnu_debuglink": {
                    "1": "section_type_string2"
                },
                ".reloc": {
                    "1": "section_type_string3"
                },
                "DAT_001278b8": {
                    "1": "some_flag1"
                },
                "DAT_00127980": {
                    "1": "section_type_flag3"
                },
                "DAT_001279b8": {
                    "1": "section_list"
                },
                "DAT_00127a19": {
                    "1": "some_flag2"
                },
                "DAT_00127a28": {
                    "1": "section_type_flag2"
                },
                "DAT_00127a2c": {
                    "1": "section_type_flag"
                },
                "FUN_00115b70": {
                    "1": "check_section_properties",
                    "2": "find_matching_entry",
                    "5": "process_section_options",
                    "9": "process_section"
                },
                "calculate_flipped_value_001082b3": {
                    "2": "calculate_flipped_value"
                },
                "check_string_length_00113ede": {
                    "2": "check_string_length"
                },
                "dcgettext": {
                    "2": "get_error_message"
                },
                "find_matching_entry_00114190": {
                    "1": "find_matching_entry"
                },
                "iVar2": {
                    "1": "comparison_result1",
                    "17": "comparison_result",
                    "2": "strcmp_result",
                    "5": "section_comparison_result"
                },
                "iVar3": {
                    "1": "section_behavior",
                    "18": "section_type",
                    "2": "option",
                    "4": "section_option"
                },
                "lVar4": {
                    "1": "matching_entry_index",
                    "16": "matching_entry1",
                    "3": "matching_entry_remove",
                    "6": "matching_entry"
                },
                "lVar5": {
                    "1": "matching_entry_02",
                    "19": "matching_entry2",
                    "2": "copy_entry",
                    "3": "matching_entry_2",
                    "4": "matching_entry_copy"
                },
                "param_1": {
                    "1": "file_names",
                    "15": "section_names",
                    "2": "section_name",
                    "3": "section",
                    "5": "sections"
                },
                "pcVar1": {
                    "1": "current_file_name",
                    "16": "current_section",
                    "3": "current_section_name",
                    "8": "section_name"
                },
                "plVar7": {
                    "1": "linked_list_entry",
                    "10": "section_list",
                    "2": "entry_list",
                    "4": "entry_pointer"
                },
                "print_error_and_exit_00119dd0": {
                    "2": "print_error_and_exit"
                },
                "process_input_0010829e": {
                    "2": "process_input"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "uVar6": {
                    "1": "return_val",
                    "17": "result",
                    "2": "return_value",
                    "8": "error_message"
                }
            },
            "called": [
                "FUN_0010829e",
                "FUN_00114190",
                "FUN_00119dd0",
                "dcgettext",
                "strcmp",
                "FUN_0010827b"
            ],
            "calling": [
                "FUN_001159d0"
            ],
            "code": "\nundefined8 process_section_00115b70(char **section_names)\n\n{\n  char *current_section;\n  int comparison_result;\n  int section_type;\n  long matching_entry1;\n  long matching_entry2;\n  undefined8 result;\n  long *section_list;\n  \n  matching_entry1 = find_matching_entry(*section_names,0,4);\n  if (matching_entry1 == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      matching_entry1 = find_matching_entry(*section_names,0,1);\n      matching_entry2 = find_matching_entry(*section_names,0,2);\n      if (matching_entry1 != 0) {\n        if (matching_entry2 != 0) {\n          current_section = *section_names;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_error_and_exit(result,current_section);\n        }\n        if (matching_entry1 != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_names;\n          section_list = DAT_001279b8;\n          do {\n            section_type = strcmp(current_section,(char *)section_list[1]);\n            if (section_type == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_error_and_exit(result,current_section);\n            }\n            section_list = (long *)*section_list;\n          } while (section_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (matching_entry2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a2c;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        current_section = *section_names;\n        comparison_result = strcmp(current_section,\"section_type_string1\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\"section_type_string2\"), comparison_result != 0)) {\n          section_type = strcmp(current_section,\"section_type_string3\");\n          if (section_type != 0) {\n            return 1;\n          }\n          result = process_input();\n          return result;\n        }\n      }\n      if (section_type == 5) {\n        result = check_string_length(section_names);\n        return result;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      result = calculate_flipped_value();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_section_00115b70",
            "entrypoint": "0x00115b70",
            "imported": false,
            "improved": true,
            "renaming": {
                ".gnu_debugaltlink": "section_type_string1",
                ".gnu_debuglink": "section_type_string2",
                ".reloc": "section_type_string3",
                "FUN_00115b70": "process_section_00115b70",
                "calculate_flipped_value_001082b3": "calculate_flipped_value",
                "check_string_length_00113ede": "check_string_length",
                "dcgettext": "get_error_message",
                "find_matching_entry_00114190": "find_matching_entry",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "lVar4": "matching_entry1",
                "lVar5": "matching_entry2",
                "param_1": "section_names",
                "pcVar1": "current_section",
                "plVar7": "section_list",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "process_input_0010829e": "process_input",
                "strcmp": "compare_strings",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d00": {
            "called": [
                "FUN_001082c3"
            ],
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "code": "\nlong FUNC_00115d00(long param_1,long param_2)\n\n{\n  uint uVar1;\n  long lVar2;\n  \n  lVar2 = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n      if (*(int *)(param_1 + 0x28) == *(int *)(*(long *)(param_2 + 0x110) + 0xd40)) {\n        uVar1 = *(uint *)(param_1 + 0x2c);\n        if (uVar1 == 0) {\n          lVar2 = 0;\n        }\n        else if ((ulong)uVar1 <\n                 *(ulong *)(*(long *)(param_2 + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x340) + 5))\n        {\n          lVar2 = *(long *)(DAT_001278b0 + (ulong)(uVar1 - 1) * 8);\n        }\n        else {\n          lVar2 = 0;\n        }\n      }\n      else {\n        lVar2 = 0;\n      }\n    }\n    else {\n      lVar2 = 0;\n    }\n  }\n  return lVar2;\n}\n\n",
            "current_name": "FUNC_00115d00",
            "entrypoint": "0x00115d00",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00115d00": "FUNC_00115d00"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00115d70": {
            "additional_data": {
                "FUN_00115d70": {
                    "1": "check_for_pattern",
                    "2": "check_pattern_match",
                    "3": "check_match",
                    "7": "check_pattern"
                },
                "lVar1": {
                    "1": "key",
                    "2": "found_pattern",
                    "4": "pattern_result",
                    "5": "found_value",
                    "6": "result"
                },
                "local_10": {
                    "1": "found_match",
                    "2": "is_value_found",
                    "4": "is_pattern_found",
                    "5": "is_found",
                    "6": "result"
                },
                "local_18": {
                    "1": "current_item",
                    "2": "search_key",
                    "3": "found_value",
                    "4": "current_value"
                },
                "param_1": {
                    "1": "data",
                    "2": "key",
                    "3": "input_1",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "htable",
                    "12": "hash_table",
                    "2": "pattern_param",
                    "3": "pattern_table",
                    "7": "table"
                }
            },
            "called": [
                "htab_traverse",
                "FUN_0011a170",
                "htab_find"
            ],
            "calling": [
                "FUN_001082df",
                "FUN_001159d0",
                "FUN_0010554f"
            ],
            "code": "\nundefined check_pattern_00115d70(undefined8 input_value,undefined8 hash_table)\n\n{\n  long result;\n  undefined8 result;\n  undefined result;\n  \n  if (DAT_001279ca == '\\0') {\n    result = htab_find(hash_table,input_value);\n    result = result != 0;\n  }\n  else {\n    result = 0;\n    result = input_value;\n    htab_traverse(hash_table,match_pattern_0011a170,&result);\n  }\n  return result;\n}\n\n",
            "current_name": "check_pattern_00115d70",
            "entrypoint": "0x00115d70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d70": "check_pattern_00115d70",
                "lVar1": "result",
                "local_10": "result",
                "local_18": "result",
                "param_1": "input_value",
                "param_2": "hash_table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115dc0": {
            "additional_data": {
                "*": {
                    "1": "dereference"
                },
                "0": {
                    "1": "null_pointer"
                },
                "DAT_001278b0": {
                    "1": "canonicalize_params",
                    "2": "constant3"
                },
                "DAT_00127a08": {
                    "1": "data_value_3",
                    "2": "constant4",
                    "3": "pattern"
                },
                "DAT_00127a20": {
                    "1": "data_value_2",
                    "2": "is_error",
                    "3": "constant2"
                },
                "DAT_00127a2c": {
                    "1": "section_type",
                    "2": "constant_value",
                    "3": "constant1"
                },
                "DCGETTEXT": {
                    "1": "get_text"
                },
                "FUN_00115dc0": {
                    "1": "find_valid_entry",
                    "14": "process_binary_section",
                    "2": "process_binary_function",
                    "8": "process_binary"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jumptable_pointer",
                    "13": "jump_table",
                    "2": "jmp_table",
                    "9": "jumptable"
                },
                "bf_alloc": {
                    "1": "allocate_buffer"
                },
                "bfd_alloc": {
                    "1": "allocate_memory"
                },
                "bfd_canonicalize_reloc": {
                    "4": "canonicalize_reloc"
                },
                "bfd_get_error": {
                    "1": "get_error",
                    "2": "get_bfd_error"
                },
                "bfd_get_reloc_upper_bound": {
                    "6": "get_reloc_upper_bound"
                },
                "cVar1": {
                    "1": "section_valid",
                    "2": "section_check",
                    "3": "is_binary_section_valid",
                    "4": "result",
                    "5": "is_valid_section",
                    "8": "is_section_valid"
                },
                "check_binary_section_00115f50": {
                    "6": "check_binary_section"
                },
                "check_pattern_00115d70": {
                    "6": "check_pattern"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "get_error_message"
                },
                "find_matching_entry_00114190": {
                    "6": "find_matching_entry"
                },
                "iVar2": {
                    "1": "bfd_error",
                    "17": "error_code",
                    "3": "bfd_error_code",
                    "7": "error"
                },
                "lVar4": {
                    "1": "entry",
                    "28": "matching_entry"
                },
                "param_1": {
                    "1": "section_name",
                    "2": "binary",
                    "3": "binary_section",
                    "4": "binary_path",
                    "7": "param1"
                },
                "param_2": {
                    "1": "param2_array",
                    "2": "section_data",
                    "5": "parameters",
                    "6": "param2",
                    "7": "binary_data"
                },
                "param_3": {
                    "1": "data_length",
                    "2": "section_size",
                    "7": "param3"
                },
                "print_error_message_001126c0": {
                    "1": "print_error_message_1",
                    "5": "print_error_message"
                },
                "print_error_message_0011a110": {
                    "1": "print_error_message2"
                },
                "puVar5": {
                    "1": "reloc_data_pointer",
                    "2": "relocation_table",
                    "3": "reloc_data",
                    "4": "reloc_buffer",
                    "7": "reloc_entries"
                },
                "puVar7": {
                    "1": "filtered_reloc_array",
                    "3": "pu_var7"
                },
                "puVar8": {
                    "1": "next_valid_entry",
                    "2": "current_entry",
                    "3": "pu_var8"
                },
                "uStack_38": {
                    "1": "unknown_stack_value",
                    "2": "unused_variable",
                    "3": "stack_var",
                    "4": "stack_variable"
                },
                "uVar3": {
                    "1": "reloc_error_message",
                    "2": "entry_point",
                    "3": "reloc_error",
                    "5": "reloc_count",
                    "7": "relocation_count"
                },
                "uVar6": {
                    "1": "reloc_buffer_size",
                    "2": "relocation_count",
                    "20": "reloc_count"
                },
                "uVar9": {
                    "1": "iteration",
                    "2": "counter",
                    "4": "u_var9",
                    "5": "index"
                },
                "xexit": {
                    "1": "exit_function",
                    "3": "exit_program"
                }
            },
            "called": [
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "FUN_00114190",
                "FUN_001082df",
                "xexit",
                "FUN_001126c0",
                "bfd_get_reloc_upper_bound",
                "FUN_0011a110",
                "dcgettext",
                "bfd_get_error",
                "FUN_00115f50"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_binary_section_00115dc0(undefined8 param1,undefined8 *binary_data,long param3)\n\n{\n  char is_section_valid;\n  int error_code;\n  undefined8 relocation_count;\n  long matching_entry;\n  undefined8 *reloc_entries;\n  ulong reloc_count;\n  code *jump_table;\n  undefined8 *pu_var7;\n  undefined8 *pu_var8;\n  ulong loop_counter;\n  undefined8 u_stack_38;\n  \n  is_section_valid = check_binary_section(param1,binary_data,0);\n  if (is_section_valid != '\\0') {\n    return;\n  }\n  relocation_count = binary_data[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (matching_entry = find_matching_entry(*binary_data,0,0x100), matching_entry == 0)) {\n    matching_entry = bfd_get_reloc_upper_bound(param1,binary_data);\n    if (matching_entry < 0) {\n      if ((matching_entry != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n        DAT_00127a20 = 1;\n        relocation_count = 0;\nLAB_00108315:\n        print_error_message(0,param1,binary_data,relocation_count,u_stack_38);\n        return;\n      }\n    }\n    else if (matching_entry != 0) {\n      reloc_entries = (undefined8 *)binary_data[0xe];\n      if (reloc_entries == (undefined8 *)0x0) {\n        reloc_entries = (undefined8 *)bfd_alloc(param3);\n        if (reloc_entries == (undefined8 *)0x0) {\n          print_error_message_2(0);\n                    \n          xexit(1);\n        }\n        reloc_count = bfd_canonicalize_reloc(param1,binary_data,reloc_entries,DAT_001278b0);\n        if ((long)reloc_count < 0) {\n          DAT_00127a20 = 1;\n          relocation_count = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        reloc_count = (ulong)*(uint *)(binary_data + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        pu_var7 = reloc_entries;\n        for (loop_counter = 0; loop_counter != reloc_count; loop_counter = loop_counter + 1) {\n          pu_var8 = pu_var7;\n          if (((*(long **)reloc_entries[loop_counter] != (long *)0x0) &&\n              (matching_entry = **(long **)reloc_entries[loop_counter], matching_entry != 0)) &&\n             (is_section_valid = check_pattern(*(undefined8 *)(matching_entry + 8),DAT_00127a08), is_section_valid != '\\0')) {\n            pu_var8 = pu_var7 + 1;\n            *pu_var7 = reloc_entries[loop_counter];\n          }\n          pu_var7 = pu_var8;\n        }\n        *pu_var7 = 0;\n        reloc_count = (long)pu_var7 - (long)reloc_entries >> 3;\n      }\n      jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (reloc_count == 0) {\n        reloc_count = 0;\n        reloc_entries = (undefined8 *)0x0;\n      }\n      else {\n        reloc_count = reloc_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  reloc_count = 0;\n  reloc_entries = (undefined8 *)0x0;\n  jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(param3,relocation_count,reloc_entries,reloc_count);\n  return;\n}\n\n",
            "current_name": "process_binary_section_00115dc0",
            "entrypoint": "0x00115dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115dc0": "process_binary_section_00115dc0",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bfd_alloc": "allocate_bfd",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_error": "get_bfd_error",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "cVar1": "is_section_valid",
                "check_binary_section_00115f50": "check_binary_section",
                "check_pattern_00115d70": "check_pattern",
                "dcgettext": "get_error_message",
                "find_matching_entry_00114190": "find_matching_entry",
                "iVar2": "error_code",
                "lVar4": "matching_entry",
                "param_1": "param1",
                "param_2": "binary_data",
                "param_3": "param3",
                "print_error_message_001126c0": "print_error_message",
                "print_error_message_0011a110": "print_error_message_2",
                "puVar5": "reloc_entries",
                "puVar7": "pu_var7",
                "puVar8": "pu_var8",
                "uStack_38": "u_stack_38",
                "uVar3": "relocation_count",
                "uVar6": "reloc_count",
                "uVar9": "loop_counter",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f30": {
            "additional_data": {
                "FUN_00115f30": {
                    "1": "drop_share_flag_and_print_error_message",
                    "13": "drop_share_flag_if_not_coff",
                    "2": "remove_share_flag",
                    "3": "drop_share_flag_if_needed",
                    "5": "remove_share_flag_if_not_coff"
                },
                "param_1": {
                    "2": "input_flag",
                    "22": "flags",
                    "3": "flag",
                    "4": "input_flags"
                },
                "param_2": {
                    "1": "pointers",
                    "13": "parameters",
                    "3": "arguments",
                    "4": "args",
                    "7": "params"
                },
                "param_3": {
                    "1": "data",
                    "2": "param",
                    "23": "output_format"
                },
                "print_error_message_00119ed0": {
                    "3": "print_error_message"
                },
                "uVar1": {
                    "1": "flag_value",
                    "2": "param_2_0",
                    "3": "arg1",
                    "4": "first_param",
                    "7": "value"
                },
                "uVar2": {
                    "2": "error_msg",
                    "21": "error_message",
                    "4": "var2"
                }
            },
            "called": [
                "FUN_00108375"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "code": "\nuint drop_share_flag_if_not_coff_00115f30(uint flags,undefined8 *parameters,undefined8 output_format)\n\n{\n  undefined8 value;\n  undefined8 error_message;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    value = *parameters;\n    flags = flags & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message(error_message,value,output_format);\n  }\n  return flags;\n}\n\n",
            "current_name": "drop_share_flag_if_not_coff_00115f30",
            "entrypoint": "0x00115f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "parameters",
                "param_3": "output_format",
                "print_error_message_00119ed0": "print_error_message",
                "uVar1": "value",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f50": {
            "additional_data": {
                "(byte *)((long)param_2 + 0x27)": {
                    "1": "attributes_check"
                },
                "(ulong)param_2[0x1a]": {
                    "1": "build_attribute_ptr"
                },
                "*(long *)(param_1 + 8) + 8": {
                    "1": "current_section_type"
                },
                "CONCAT31": {
                    "1": "concatenate_boolean_and_integers"
                },
                "CONCAT31(auVar4._9_3_,param_2[0xc] == (char *)0x0)": {
                    "1": "result2"
                },
                "CONCAT71": {
                    "1": "concatenate_integers_and_boolean"
                },
                "CONCAT71(auVar4._1_7_,param_2[8] == (char *)0x0)": {
                    "1": "result1"
                },
                "DAT_001278ec": {
                    "1": "global_var2",
                    "3": "global_flag2"
                },
                "DAT_001279b8": {
                    "1": "string_data_pointer"
                },
                "DAT_00127a00": {
                    "1": "is_build_attribute",
                    "3": "global_flag3"
                },
                "DAT_00127a20": {
                    "1": "is_binary_processed",
                    "3": "global_flag1"
                },
                "FUN_00115f50": {
                    "1": "check_for_duplicate_section",
                    "11": "check_binary_section",
                    "2": "check_binary_validity",
                    "3": "check_duplicate_section"
                },
                "_1_7_": {
                    "1": "lower_byte"
                },
                "_9_3_": {
                    "1": "upper_byte"
                },
                "__s1": {
                    "1": "argument_string",
                    "2": "string1",
                    "5": "section_name",
                    "8": "current_section"
                },
                "auVar4": {
                    "1": "processing_result",
                    "2": "temp_array",
                    "4": "process_result",
                    "6": "comparison_result_array",
                    "7": "comparison_result"
                },
                "auVar4._0_4_": {
                    "1": "comparison_result"
                },
                "auVar4._4_4_": {
                    "1": "binary_process_result"
                },
                "auVar4._8_4_": {
                    "1": "comparison_extra"
                },
                "extraout_EDX": {
                    "1": "comparison_extra"
                },
                "param_1": {
                    "1": "input_address",
                    "2": "binary",
                    "6": "binary_address"
                },
                "param_1 + 8": {
                    "1": "current_section_ptr"
                },
                "param_2": {
                    "1": "section_params",
                    "2": "section_strings",
                    "4": "binary_sections",
                    "5": "section_names"
                },
                "param_2[0x1a]": {
                    "1": "param2_1a"
                },
                "param_2[0xc]": {
                    "1": "string_check"
                },
                "param_3": {
                    "1": "allow_duplicates",
                    "15": "flag",
                    "2": "is_reversed",
                    "3": "is_flag_set"
                },
                "plVar3": {
                    "1": "linked_parameters",
                    "2": "section_list_pointer",
                    "3": "section_pointer",
                    "7": "section_list"
                },
                "process_binary_section_001159d0": {
                    "5": "process_binary_section"
                },
                "string_comparison_00113fb0": {
                    "1": "compare_strings",
                    "3": "string_comparison"
                },
                "uVar1": {
                    "1": "section_comparison_result",
                    "11": "string_comparison_result",
                    "16": "comparison_result",
                    "3": "strcmp_result"
                },
                "uVar2": {
                    "1": "extra_variable",
                    "2": "return_value",
                    "3": "extra_data",
                    "4": "comparison_result",
                    "7": "extra_value"
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_001159d0",
                "strcmp"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "code": "\nuint check_binary_section_00115f50(long binary_address,char **section_names,char flag)\n\n{\n  char *current_section;\n  uint comparison_result;\n  undefined4 extra_value;\n  undefined4 comparison_extra;\n  long *section_list;\n  undefined comparison_result [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  comparison_result = process_binary_section(section_names);\n  if (comparison_result[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      current_section = *section_names;\n      section_list = DAT_001279b8;\n      do {\n        comparison_result = strcmp(current_section,(char *)section_list[1]);\n        binary_process_result = 0;\n        comparison_result = comparison_result;\n        comparison_extra = comparison_extra;\n        if (comparison_result == 0) {\n          return 1;\n        }\n        section_list = (long *)*section_list;\n      } while (section_list != (long *)0x0);\n    }\n    extra_value = comparison_extra;\n    if (((((flag == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (comparison_extra = extra_value, comparison_result._0_8_ = *(long *)(binary_address + 8),\n         *(int *)(*(long *)(binary_address + 8) + 8) != 5)) ||\n        ((comparison_result._0_8_ = build_attribute_ptr, *(int *)(param2_1a + 4) != 7 ||\n         (comparison_result = string_comparison(*section_names,\".gnu.build.attributes\"), comparison_result[0] == '\\0')))) &&\n       ((*(byte *)((long)section_names + 0x27) & 2) == 0)) {\n      return (uint)concatenate_result(comparison_result.lower_byte,section_names[8] == (char *)0x0) |\n             concatenate_result2(comparison_result.upper_byte,string_check == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_binary_section_00115f50",
            "entrypoint": "0x00115f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "(ulong)param_2[0x1a]": "build_attribute_ptr",
                "CONCAT31": "concatenate_result2",
                "CONCAT71": "concatenate_result",
                "FUN_00115f50": "check_binary_section_00115f50",
                "_1_7_": "lower_byte",
                "_9_3_": "upper_byte",
                "__s1": "current_section",
                "auVar4": "comparison_result",
                "auVar4._0_4_": "comparison_result",
                "auVar4._4_4_": "binary_process_result",
                "auVar4._8_4_": "comparison_extra",
                "extraout_EDX": "comparison_extra",
                "param_1": "binary_address",
                "param_2": "section_names",
                "param_2[0x1a]": "param2_1a",
                "param_2[0xc]": "string_check",
                "param_3": "flag",
                "plVar3": "section_list",
                "process_binary_section_001159d0": "process_binary_section",
                "string_comparison_00113fb0": "string_comparison",
                "uVar1": "comparison_result",
                "uVar2": "extra_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116030": {
            "additional_data": {
                "FUN_00116030": {
                    "1": "process_reloc_table",
                    "3": "process_reloc_data",
                    "7": "process_relocations",
                    "9": "process_relocation"
                },
                "_DAT_00128568": {
                    "1": "reserved_value_2"
                },
                "_DAT_00128680": {
                    "1": "reserved_value_1"
                },
                "__ptr": {
                    "1": "reloc_table",
                    "16": "reloc_buffer",
                    "2": "reloc_entries",
                    "3": "reloc_array",
                    "4": "reloc_ptr",
                    "5": "reloc_data"
                },
                "extraout_RAX": {
                    "1": "exiting_result",
                    "2": "exit_status",
                    "9": "return_value"
                },
                "iVar5": {
                    "1": "error",
                    "21": "error_code",
                    "7": "bfd_error"
                },
                "in_RAX": {
                    "1": "default_value",
                    "15": "result",
                    "8": "return_value"
                },
                "lVar1": {
                    "1": "reloc_size",
                    "2": "upper_bound"
                },
                "lVar1/lVar2/lVar3/lVar4/lVar5/lVar6/lVar7/lVar8": {
                    "1": "<new_variable_name>"
                },
                "lVar2": {
                    "1": "current_elem_ptr",
                    "10": "reloc_value",
                    "2": "reloc_offset",
                    "3": "current_reloc"
                },
                "lVar3": {
                    "1": "dat_00128568"
                },
                "lVar4": {
                    "1": "global_bss_offset",
                    "2": "dat_00128680"
                },
                "lVar6": {
                    "1": "fwrite_func_ptr",
                    "2": "fwrite_function",
                    "3": "fwrite_func",
                    "8": "upper_bound"
                },
                "lVar7": {
                    "1": "canonicalize_result",
                    "13": "reloc_count",
                    "2": "num_entries",
                    "8": "num_relocs"
                },
                "lVar8": {
                    "1": "counter",
                    "10": "reloc_index",
                    "2": "loop_index",
                    "6": "index",
                    "7": "i"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "file_name",
                    "3": "param_array",
                    "4": "file_path"
                },
                "param_2": {
                    "1": "relocation_size",
                    "2": "header_address",
                    "4": "bfd_handle"
                },
                "plVar1": {
                    "1": "current_reloc",
                    "5": "reloc_ptr",
                    "8": "reloc_entry"
                },
                "uStack_28": {
                    "1": "empty_return_value",
                    "2": "u_stack_28",
                    "6": "return_value"
                }
            },
            "called": [
                "bfd_canonicalize_reloc",
                "fwrite",
                "xexit",
                "free",
                "FUN_001083b7",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "FUN_0011a110"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *file_path,long bfd_handle)\n\n{\n  long *reloc_entry;\n  long reloc_value;\n  long func1_addr;\n  long dat_00128680;\n  int error_code;\n  undefined8 result;\n  long upper_bound;\n  void *reloc_buffer;\n  long reloc_count;\n  undefined8 return_value;\n  long reloc_index;\n  undefined8 return_value;\n  \n  if (*(long *)(bfd_handle + 0x60) == 0) {\n    return result;\n  }\n  upper_bound = bfd_get_reloc_upper_bound();\n  if (upper_bound < 0) {\n    if ((upper_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      print_error_message_0011a110(*file_path);\n                    \n      xexit(1);\n    }\n  }\n  else if (upper_bound != 0) {\n    reloc_buffer = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(file_path,bfd_handle,reloc_buffer);\n    dat_00128680 = _DAT_00128680;\n    func1_addr = _DAT_00128568;\n    upper_bound = _fwrite;\n    if (reloc_count < 0) {\n      print_error_message_0011a110(*file_path);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      reloc_index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + reloc_index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_value = *reloc_entry, reloc_value != 0)) && (reloc_value != upper_bound)) &&\n           ((reloc_value != dat_00128680 && (reloc_value != func1_addr)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        reloc_index = reloc_index + 1;\n      } while (reloc_count != reloc_index);\n    }\n    free(reloc_buffer);\n    return return_value;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_relocation_00116030",
            "entrypoint": "0x00116030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "__ptr": "reloc_buffer",
                "extraout_RAX": "return_value",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar1": "upper_bound",
                "lVar2": "reloc_value",
                "lVar3": "func1_addr",
                "lVar4": "dat_00128680",
                "lVar6": "upper_bound",
                "lVar7": "reloc_count",
                "lVar8": "reloc_index",
                "param_1": "file_path",
                "param_2": "bfd_handle",
                "plVar1": "reloc_entry",
                "uStack_28": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116110": {
            "additional_data": {
                "FUN_00116110": {
                    "1": "improved_code",
                    "2": "process_section",
                    "4": "reverse_section_contents",
                    "6": "reverse_section"
                },
                "__ptr": {
                    "1": "temp_buffer",
                    "15": "buffer",
                    "6": "allocated_memory"
                },
                "bVar20": {
                    "1": "zero_byte",
                    "2": "temp_byte2",
                    "4": "temp_flag",
                    "8": "flag"
                },
                "cVar6": {
                    "1": "error",
                    "16": "result",
                    "2": "temp_char",
                    "4": "check_result"
                },
                "iVar10": {
                    "1": "stride",
                    "2": "loop_var2",
                    "3": "divisor"
                },
                "iVar4": {
                    "1": "size1",
                    "2": "temp3",
                    "3": "half_size"
                },
                "iVar5": {
                    "1": "total_loops",
                    "2": "offset",
                    "3": "remainder"
                },
                "lVar13": {
                    "1": "temp_long3",
                    "2": "remaining_bytes",
                    "4": "remaining_size",
                    "8": "matching_entry"
                },
                "lVar3": {
                    "1": "offset",
                    "12": "section_size",
                    "2": "section_header",
                    "4": "section_offset",
                    "5": "section_index"
                },
                "lVar8": {
                    "1": "length",
                    "2": "loop_var",
                    "4": "loop_index"
                },
                "local_30": {
                    "1": "data",
                    "2": "data_buffer",
                    "6": "section_content",
                    "7": "section_data",
                    "9": "section_contents"
                },
                "local_38": {
                    "1": "section_size_2",
                    "17": "section_size",
                    "4": "section_size2",
                    "6": "section_length"
                },
                "param_1": {
                    "1": "section_source",
                    "12": "binary",
                    "2": "param_1",
                    "3": "input_bfd",
                    "4": "binary_handle",
                    "7": "binary_file"
                },
                "param_2": {
                    "1": "section_properties",
                    "2": "input_section",
                    "3": "section_params",
                    "4": "section",
                    "5": "section_data",
                    "6": "section_info"
                },
                "param_3": {
                    "1": "destination_bfd",
                    "14": "output_section",
                    "6": "output_bfd"
                },
                "puVar12": {
                    "1": "loop_ptr",
                    "3": "current_byte",
                    "6": "temp_ptr",
                    "7": "temp_pointer"
                },
                "puVar14": {
                    "1": "temp_ptr1",
                    "2": "buffer_end",
                    "3": "ptr1",
                    "4": "ptr2",
                    "6": "buffer_ptr"
                },
                "puVar15": {
                    "1": "loop_ptr",
                    "2": "temp_ptr",
                    "4": "ptr2"
                },
                "pvVar16": {
                    "1": "pointer_var",
                    "2": "ptr3",
                    "3": "temp_ptr2"
                },
                "uVar1": {
                    "1": "temp",
                    "15": "temp_byte",
                    "2": "byte_value",
                    "4": "temp_var1",
                    "7": "temp1"
                },
                "uVar11": {
                    "1": "temp_offset",
                    "3": "current_index",
                    "6": "offset"
                },
                "uVar17": {
                    "1": "temp_var6",
                    "2": "temp_var17",
                    "3": "temp3",
                    "5": "temp_index"
                },
                "uVar18": {
                    "1": "temp_var6",
                    "2": "division_size",
                    "3": "divisible_by",
                    "5": "alignment"
                },
                "uVar19": {
                    "1": "temp_index_4",
                    "2": "temp_var",
                    "3": "temp4"
                },
                "uVar2": {
                    "1": "file_pointer",
                    "2": "param",
                    "3": "temp_var",
                    "4": "temp_var2",
                    "8": "temp2"
                },
                "uVar7": {
                    "1": "temp5",
                    "2": "temp_var7",
                    "22": "error_message"
                },
                "uVar9": {
                    "1": "temp_var9",
                    "2": "loop_index",
                    "3": "loop_var1"
                }
            },
            "called": [
                "bfd_get_full_section_contents",
                "FUN_00108466",
                "FUN_00114190",
                "FUN_001083de",
                "free",
                "FUN_001126c0",
                "bfd_set_section_size",
                "xmalloc",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "FUN_00115f50"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid reverse_section_00116110(undefined8 binary,undefined8 *section_info,undefined8 output_section)\n\n{\n  undefined temp_byte;\n  undefined8 temp2;\n  long section_size;\n  int half_size;\n  int remainder;\n  char result;\n  undefined8 error_message;\n  undefined8 *buffer;\n  long loop_index;\n  ulong loop_var1;\n  int divisor;\n  ulong offset;\n  undefined *temp_pointer;\n  long matching_entry;\n  undefined8 *buffer_ptr;\n  undefined8 *ptr3;\n  void *temp_ptr2;\n  ulong temp_index;\n  ulong alignment;\n  ulong temp4;\n  byte flag;\n  ulong section_size;\n  void *section_contents;\n  \n  flag = 0;\n  result = check_binary_section_00115f50(binary,section_info,1);\n  if (result != '\\0') {\n    return;\n  }\n  section_size = section_info[8];\n  section_size = section_info[0xc];\n  if (((*(byte *)((long)section_info + 0x25) & 1) == 0) || ((*(byte *)(section_size + 0x25) & 1) == 0)) {\n    matching_entry = find_matching_entry_00114190(*section_info,0,0x80);\n    if (matching_entry == 0) {\n      return;\n    }\n    if ((*(byte *)(matching_entry + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(section_size);\n    ptr3 = buffer;\n    if (7 < section_size) {\n      for (alignment = section_size >> 3; alignment != 0; alignment = alignment - 1) {\n        *ptr3 = 0;\n        ptr3 = ptr3 + (ulong)flag * -2 + 1;\n      }\n    }\n    buffer_ptr = ptr3;\n    if ((section_size & 4) != 0) {\n      buffer_ptr = (undefined8 *)((long)ptr3 + (ulong)flag * -8 + 4);\n      *(undefined4 *)ptr3 = 0;\n    }\n    ptr3 = buffer_ptr;\n    if ((section_size & 2) != 0) {\n      ptr3 = (undefined8 *)((long)buffer_ptr + (ulong)flag * -4 + 2);\n      *(undefined2 *)buffer_ptr = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)ptr3 = 0;\n    }\n    result = bfd_set_section_contents(output_section,section_size,buffer,0);\n    if (result != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0,output_section,section_size,0);\n    free(buffer);\n    return;\n  }\n  section_contents = (void *)0x0;\n  result = bfd_get_full_section_contents(binary,section_info,&section_contents);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(binary,section_info,output_section,&section_contents,&section_size),\n     divisor = DAT_001278e8, result == '\\0')) {\n    bfd_set_section_size(section_size,0);\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0,binary,section_info,0);\n    free(section_contents);\n    return;\n  }\n  half_size = DAT_001264b8;\n  remainder = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    alignment = (ulong)DAT_001278e8;\n    if (section_size % alignment != 0) {\n      temp2 = *section_info;\n      error_message = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_and_exit_00119dd0(error_message,temp2,divisor);\n    }\n    divisor = DAT_001278e8 / 2;\n    offset = 0;\n    while (temp4 = offset, half_size = DAT_001264b8, remainder = DAT_001264bc, temp4 < section_size) {\n      offset = alignment + temp4;\n      temp_index = offset;\n      for (loop_var1 = 0; loop_var1 < (ulong)(long)divisor; loop_var1 = loop_var1 + 1) {\n        temp_index = temp_index - 1;\n        temp_pointer = (undefined *)(temp4 + loop_var1 + (long)section_contents);\n        temp_byte = *temp_pointer;\n        *temp_pointer = *(undefined *)((long)section_contents + temp_index);\n        *(undefined *)((long)section_contents + temp_index) = temp_byte;\n      }\n    }\n  }\n  DAT_001264b8 = half_size;\n  DAT_001264bc = remainder;\n  if (-1 < remainder) {\n    alignment = (ulong)DAT_00127a1c;\n    divisor = (int)((ulong)section_info[7] % alignment);\n    offset = ((long)remainder - (long)divisor) + (long)section_contents;\n    if (remainder < divisor) {\n      offset = offset + alignment;\n    }\n    matching_entry = (section_size + (long)section_contents) - offset;\n    temp_ptr2 = section_contents;\n    for (; offset < section_size + (long)section_contents; offset = offset + alignment) {\n      for (loop_index = 0; ((int)loop_index < half_size && (loop_index != matching_entry)); loop_index = loop_index + 1) {\n        *(undefined *)((long)temp_ptr2 + loop_index) = *(undefined *)(offset + loop_index);\n      }\n      temp_ptr2 = (void *)((long)temp_ptr2 + loop_index);\n      matching_entry = matching_entry - alignment;\n    }\n    section_size = ((((alignment - 1) + section_size) - (long)remainder) / alignment) * (long)half_size;\n    alignment = *(ulong *)(section_size + 0x38) / alignment;\n    *(ulong *)(section_size + 0x38) = alignment;\n    if (remainder < divisor) {\n      *(ulong *)(section_size + 0x38) = alignment + 1;\n      result = bfd_set_section_contents(output_section,section_size,section_contents,0,section_size);\n      if (result == '\\0') {\n        print_error_and_free_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(output_section,section_size,section_contents,0,section_size);\n  if (result == '\\0') {\n    print_error_and_free_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(section_contents);\n  return;\n}\n\n",
            "current_name": "reverse_section_00116110",
            "entrypoint": "0x00116110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116110": "reverse_section_00116110",
                "__ptr": "buffer",
                "bVar20": "flag",
                "cVar6": "result",
                "iVar10": "divisor",
                "iVar4": "half_size",
                "iVar5": "remainder",
                "lVar13": "matching_entry",
                "lVar3": "section_size",
                "lVar8": "loop_index",
                "local_30": "section_contents",
                "local_38": "section_size",
                "param_1": "binary",
                "param_2": "section_info",
                "param_3": "output_section",
                "puVar12": "temp_pointer",
                "puVar14": "buffer_ptr",
                "puVar15": "ptr3",
                "pvVar16": "temp_ptr2",
                "uVar1": "temp_byte",
                "uVar11": "offset",
                "uVar17": "temp_index",
                "uVar18": "alignment",
                "uVar19": "temp4",
                "uVar2": "temp2",
                "uVar7": "error_message",
                "uVar9": "loop_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001163d0": {
            "additional_data": {
                "FUNG_001163d0": {
                    "1": "process_gnu_build_attribute_notes"
                },
                "FUN_001163d0": {
                    "1": "extract_build_attribute_notes",
                    "25": "process_build_attribute_notes"
                },
                "__nmemb": {
                    "1": "mem_count",
                    "2": "num_records",
                    "4": "num_elements",
                    "5": "record_count"
                },
                "__ptr": {
                    "1": "temp_buffer",
                    "2": "temporary_buffer",
                    "3": "buffer",
                    "4": "ptr",
                    "9": "reloc_buffer"
                },
                "__ptr_00": {
                    "1": "new_buffer",
                    "2": "temp_buffer"
                },
                "bVar26": {
                    "1": "temp_byte",
                    "2": "byte_value",
                    "3": "byte_var"
                },
                "bVar4": {
                    "1": "is_equal",
                    "2": "is_match",
                    "4": "condition",
                    "6": "flag"
                },
                "cVar19": {
                    "1": "version_number",
                    "2": "note_type",
                    "3": "char_value",
                    "5": "temp_char"
                },
                "compare_memory_regions_0011a1b0": {
                    "1": "compare_memory_regions"
                },
                "compare_records_0011a250": {
                    "1": "compare_records"
                },
                "iVar21": {
                    "1": "temp_var",
                    "2": "var21",
                    "3": "counter",
                    "8": "loop_counter"
                },
                "iVar6": {
                    "1": "temp_var",
                    "2": "counter",
                    "5": "comparison_result",
                    "6": "index"
                },
                "lVar8": {
                    "1": "loop_var",
                    "2": "length_var",
                    "5": "message_length",
                    "7": "length"
                },
                "local_60": {
                    "1": "note_entries",
                    "2": "local_ptr",
                    "4": "record_array"
                },
                "local_68": {
                    "1": "local_var4",
                    "2": "local_var_4",
                    "5": "output_size",
                    "6": "result_size"
                },
                "local_70": {
                    "1": "local_value_3",
                    "2": "local_var_3"
                },
                "local_88": {
                    "1": "local_var",
                    "2": "local_var1"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_section_header",
                    "3": "input_param_1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "param_program_header",
                    "3": "param_section",
                    "4": "param2"
                },
                "param_3": {
                    "1": "attribute_count",
                    "2": "input_section_size",
                    "3": "param3",
                    "4": "param_section_size",
                    "6": "size"
                },
                "param_4": {
                    "1": "output_data_buf",
                    "2": "data",
                    "3": "param_output_buffer",
                    "5": "output_data",
                    "7": "output_buffer"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error_message"
                },
                "process_build_attribute_notes_001086af": {
                    "1": "process_notes_func1"
                },
                "process_build_attribute_notes_00116490": {
                    "1": "process_notes_func2"
                },
                "process_records_00116852": {
                    "1": "process_records"
                },
                "puVar17": {
                    "1": "note_ptr",
                    "2": "pointer_var17",
                    "4": "record_ptr"
                },
                "puVar18": {
                    "1": "description_ptr",
                    "2": "name_ptr",
                    "4": "temp_ptr"
                },
                "puVar20": {
                    "1": "ptr2",
                    "2": "temp_ptr_2",
                    "3": "temp_ptr"
                },
                "puVar21": {
                    "1": "temp_pointer4"
                },
                "puVar22": {
                    "1": "note_data",
                    "2": "note_data_ptr"
                },
                "puVar23": {
                    "1": "temp_ptr7",
                    "2": "pointer_var23"
                },
                "puVar24": {
                    "1": "temp_ptr3"
                },
                "puVar25": {
                    "1": "loop_ptr",
                    "2": "temp_pointer5"
                },
                "puVar26": {
                    "1": "temp_buf_3"
                },
                "puVar5": {
                    "1": "temp_pointer_1",
                    "2": "current_record",
                    "5": "temp_ptr",
                    "8": "ptr"
                },
                "uStack_80": {
                    "1": "version_2_offset",
                    "2": "value4"
                },
                "uVar1": {
                    "1": "index",
                    "26": "result"
                },
                "uVar10": {
                    "1": "var_10",
                    "2": "temp_value2",
                    "5": "var10",
                    "6": "temp2"
                },
                "uVar11": {
                    "1": "temp_var11",
                    "2": "temp_value3",
                    "3": "note_type",
                    "4": "var11",
                    "5": "temp3"
                },
                "uVar12": {
                    "1": "size1",
                    "2": "temp_value4",
                    "4": "var12",
                    "5": "temp4"
                },
                "uVar13": {
                    "1": "temp_variable_12",
                    "2": "aligned_size",
                    "4": "var13"
                },
                "uVar14": {
                    "1": "temp_variable_13",
                    "2": "temp_value6",
                    "5": "var14"
                },
                "uVar15": {
                    "1": "temp_value_7",
                    "2": "temp_value7",
                    "4": "var15"
                },
                "uVar16": {
                    "1": "remaining_section_size",
                    "2": "temp_value8",
                    "4": "var16",
                    "8": "remaining_size"
                },
                "uVar2": {
                    "1": "binary_file_name",
                    "2": "var1",
                    "4": "var2"
                },
                "uVar24": {
                    "1": "temp_value_9",
                    "6": "var24"
                },
                "uVar3": {
                    "1": "output_section_header_0",
                    "2": "var2",
                    "4": "var3"
                },
                "uVar4": {
                    "1": "condition"
                },
                "uVar7": {
                    "1": "temp_variable_6",
                    "20": "error_message",
                    "4": "var7"
                },
                "uVar9": {
                    "1": "temp_variable_8",
                    "2": "temp_value1",
                    "5": "var9",
                    "6": "temp1"
                }
            },
            "called": [
                "bfd_canonicalize_reloc",
                "FUN_00119ed0",
                "free",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "xcalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong process_build_attribute_notes_001163d0(undefined8 *param1,undefined8 *param2,ulong section_size,undefined *output_buffer)\n\n{\n  ulong result;\n  undefined8 var2;\n  undefined8 var3;\n  bool is_valid;\n  ulong *ptr;\n  int index;\n  undefined8 error_message;\n  long length;\n  void *reloc_buffer;\n  ulong temp1;\n  ulong temp2;\n  ulong temp3;\n  ulong temp4;\n  undefined *temp_buffer;\n  ulong var13;\n  ulong var14;\n  ulong var15;\n  ulong remaining_size;\n  ulong *record;\n  undefined *temp_ptr;\n  char temp_char;\n  undefined *temp_ptr;\n  int loop_counter;\n  undefined *note_data_ptr;\n  ulong *pointer_var23;\n  ulong var24;\n  size_t record_count;\n  ulong *temp_ptr2;\n  byte byte_var26;\n  ulong local_var_88;\n  ulong value4;\n  ulong local_var_70;\n  ulong result_size;\n  ulong *record_array;\n  \n  byte_var26 = 0;\n  length = bfd_get_reloc_upper_bound();\n  result_size = section_size;\n  if (0 < length) {\n    reloc_buffer = (void *)xmalloc(length);\n    length = bfd_canonicalize_reloc(param1,param2,reloc_buffer,DAT_001278b0);\n    free(reloc_buffer);\n    if (length != 0) {\n      if (_DAT_00127a24 == 0) {\n        var2 = *param1;\n        var3 = *param2;\n        error_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message(error_message,var2,var3);\n      }\n      record_array = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  record_array = (ulong *)xcalloc(section_size / 0xc,0x48,section_size % 0xc);\n  local_var_88 = 0;\n  local_var_70 = 0;\n  remaining_size = section_size;\n  var15 = 0;\n  pointer_var23 = record_array;\n  var14 = 0;\n  note_data_ptr = output_buffer;\n  while (0xb < remaining_size) {\n    temp2 = (**(code **)(param1[1] + 0x40))(note_data_ptr);\n    *pointer_var23 = temp2;\n    temp2 = (**(code **)(param1[1] + 0x40))(note_data_ptr + 4);\n    pointer_var23[1] = temp2;\n    temp3 = (**(code **)(param1[1] + 0x40))(note_data_ptr + 8);\n    temp2 = *pointer_var23;\n    pointer_var23[2] = temp3;\n    temp4 = pointer_var23[1];\n    var13 = temp2 + 3 & 0xfffffffffffffffc;\n    pointer_var23[6] = var13;\n    if (temp4 != (temp4 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp3 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var13 + temp4 + 0xc;\n    if (remaining_size < result) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp2 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    pointer_var23[3] = (ulong)(note_data_ptr + 0xc);\n    pointer_var23[4] = (ulong)(note_data_ptr + var13 + 0xc);\n    remaining_size = remaining_size + (-0xc - (var13 + temp4));\n    if (temp2 != 2) {\n      if (note_data_ptr[0xc] == '$') {\n        if ((note_data_ptr[0xd] == '\\x01') && (note_data_ptr[0xe] == '1')) {\n          remaining_size = process_notes_func2();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < temp2) && (note_data_ptr[0xc] == 'G')) && (note_data_ptr[0xd] == 'A')) &&\n              ((note_data_ptr[0xe] == '$' && (note_data_ptr[0xf] == '\\x01')))) {\n        if (note_data_ptr[0x10] == '2') {\n          remaining_size = process_notes_func2();\n          return remaining_size;\n        }\n        if (note_data_ptr[0x10] == '3') {\n          remaining_size = process_notes_func2();\n          return remaining_size;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp1 = var15;\n    var24 = var14;\n    if (temp4 == 0) {\n      if (temp3 == 0x100) {\n        pointer_var23[7] = local_var_88;\nLAB_001164af:\n        temp4 = var14;\n        var24 = var14;\n      }\n      else {\n        pointer_var23[7] = local_var_70;\nLAB_0011669e:\n        temp1 = var15;\n        temp4 = var15;\n      }\n    }\n    else {\n      if (temp4 != 0x10) {\n        if (temp4 < 0x11) {\n          if (temp4 == 4) {\n            temp3 = (**(code **)(param1[1] + 0x40))();\n            temp4 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp4 == 8) {\n            remaining_size = process_notes_func1();\n            return remaining_size;\n          }\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      temp3 = (**(code **)(param1[1] + 0x28))(note_data_ptr + var13 + 0xc);\n      temp4 = (**(code **)(param1[1] + 0x28))();\n      if (temp4 < temp3) {\n        temp3 = temp4;\n      }\nLAB_00116631:\n      if (pointer_var23[2] == 0x100) {\n        if (temp3 == 0) {\n          temp3 = local_var_88;\n        }\n        temp2 = *pointer_var23;\n        pointer_var23[7] = temp3;\n        var24 = temp4;\n        local_var_88 = temp3;\n        if (temp4 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp3 == 0) {\n          temp3 = local_var_70;\n        }\n        temp2 = *pointer_var23;\n        pointer_var23[7] = temp3;\n        temp1 = temp4;\n        local_var_70 = temp3;\n        if (temp4 == 0) goto LAB_0011669e;\n      }\n    }\n    pointer_var23[8] = temp4;\n    if (*(char *)((pointer_var23[3] - 1) + temp2) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    pointer_var23 = pointer_var23 + 9;\n    var15 = temp1;\n    var14 = var24;\n    note_data_ptr = note_data_ptr + result;\n  }\n  if (remaining_size == 0) {\n    var2 = *param1;\n    var3 = *param2;\n    error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message(error_message,var2,var3);\n    record_count = ((long)pointer_var23 - (long)record_array >> 3) * -0x71c71c71c71c71c7;\n    qsort(record_array,record_count,0x48,compare_memory_regions);\n    for (record = record_array; record < pointer_var23; record = record + 9) {\n      remaining_size = record[2];\n      if (remaining_size != 0) {\n        var15 = record[7];\n        var14 = record[8];\n        temp_ptr2 = record;\n        loop_counter = 0;\n        if (var15 == var14) {\n          record[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr = temp_ptr2;\n              temp_ptr2 = ptr + -9;\n              if (temp_ptr2 < record_array) goto LAB_001167f5;\n              temp2 = ptr[-7];\n            } while (temp2 == 0);\n            if ((*temp_ptr2 != *record) ||\n               (index = memcmp((void *)ptr[-6],(void *)record[3],*record), index != 0)) break;\n            temp4 = ptr[-2];\n            temp3 = ptr[-1];\n            if (var15 == temp4) {\n              if (var14 == temp3) {\n                record[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var14 <= temp3) {\n                record[2] = 0;\n                break;\n              }\n              if (temp3 < var15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < temp3) || (var15 <= (temp3 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (temp2 == 0x101)) {\n                if (temp3 <= var14) {\n                  temp3 = var14;\n                }\n                if (temp4 < var15) {\n                  var15 = temp4;\n                }\n                ptr[-1] = temp3;\n                ptr[-2] = var15;\n                record[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp4 <= var15) goto LAB_001167a6;\n              if (temp3 < var15) goto LAB_0010852c;\n              if (var14 < var15) {\n                if ((0xfffffffffffffff0 < var14) || (temp4 <= (var14 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records;\n                goto LAB_001167b8;\n              }\n              if (var14 != temp3) goto LAB_001167b8;\n            }\nprocess_records:\n            is_valid = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (is_valid);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(record_array,record_count,0x48,compare_records);\n    temp_buffer = (undefined *)xmalloc(section_size * 2);\n    value4 = 0;\n    local_var_70 = 0;\n    note_data_ptr = temp_buffer;\n    for (record = record_array; record < pointer_var23; record = record + 9) {\n      if (record[2] != 0) {\n        temp_ptr = note_data_ptr + 0xc;\n        if ((record[7] == local_var_70) && (record[8] == value4)) {\n          (**(code **)(param1[1] + 0x50))(*record,note_data_ptr);\n          (**(code **)(param1[1] + 0x50))(0,note_data_ptr + 4);\n          (**(code **)(param1[1] + 0x50))(record[2],note_data_ptr + 8);\n          var15 = record[6];\n          remaining_size = *record;\n          note_data_ptr = (undefined *)record[3];\n          temp_ptr = temp_ptr;\n          for (var14 = remaining_size; var14 != 0; var14 = var14 - 1) {\n            *temp_ptr = *note_data_ptr;\n            note_data_ptr = note_data_ptr + (ulong)byte_var26 * -2 + 1;\n            temp_ptr = temp_ptr + (ulong)byte_var26 * -2 + 1;\n          }\n          if (remaining_size < var15) {\n            for (length = var15 - remaining_size; length != 0; length = length + -1) {\n              *temp_ptr = 0;\n              temp_ptr = temp_ptr + (ulong)byte_var26 * -2 + 1;\n            }\n          }\n          note_data_ptr = temp_ptr + var15;\n        }\n        else {\n          (**(code **)(param1[1] + 0x50))();\n          if (*(int *)(param1[1] + 8) == 5) {\n            temp_char = (*(char *)(param1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            temp_char = '\\b';\n          }\n          (**(code **)(param1[1] + 0x50))(temp_char,note_data_ptr + 4);\n          (**(code **)(param1[1] + 0x50))(record[2],note_data_ptr + 8);\n          remaining_size = *record;\n          note_data_ptr = (undefined *)record[3];\n          temp_ptr = temp_ptr;\n          for (var15 = remaining_size; var15 != 0; var15 = var15 - 1) {\n            *temp_ptr = *note_data_ptr;\n            note_data_ptr = note_data_ptr + (ulong)byte_var26 * -2 + 1;\n            temp_ptr = temp_ptr + (ulong)byte_var26 * -2 + 1;\n          }\n          var15 = record[6];\n          if (remaining_size < var15) {\n            for (length = var15 - remaining_size; length != 0; length = length + -1) {\n              *temp_ptr = 0;\n              temp_ptr = temp_ptr + (ulong)byte_var26 * -2 + 1;\n            }\n          }\n          length = param1[1];\n          temp_ptr = temp_ptr + var15;\n          note_data_ptr = temp_ptr + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(param1[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(record[7],temp_ptr);\n            (**(code **)(param1[1] + 0x38))(record[8],note_data_ptr);\n            note_data_ptr = temp_ptr + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(record[7],temp_ptr);\n            (**(code **)(param1[1] + 0x50))(record[8],temp_ptr + 4);\n          }\n          local_var_70 = record[7];\n          value4 = record[8];\n        }\n      }\n    }\n    var15 = (long)note_data_ptr - (long)temp_buffer;\n    remaining_size = var15;\n    note_data_ptr = temp_buffer;\n    result_size = section_size;\n    if (var15 < section_size) {\n      for (; result_size = var15, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *output_buffer = *note_data_ptr;\n        note_data_ptr = note_data_ptr + (ulong)byte_var26 * -2 + 1;\n        output_buffer = output_buffer + (ulong)byte_var26 * -2 + 1;\n      }\n    }\n    free(temp_buffer);\n  }\n  else {\n    length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      bfd_set_error(0x11);\n      print_error_message_001126c0(0,param1,param2,length);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(record_array);\n  return result_size;\n}\n\n",
            "current_name": "process_build_attribute_notes_001163d0",
            "entrypoint": "0x001163d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001163d0": "process_build_attribute_notes_001163d0",
                "__nmemb": "record_count",
                "__ptr": "reloc_buffer",
                "__ptr_00": "temp_buffer",
                "bVar26": "byte_var26",
                "bVar4": "is_valid",
                "cVar19": "temp_char",
                "compare_memory_regions_0011a1b0": "compare_memory_regions",
                "compare_records_0011a250": "compare_records",
                "iVar21": "loop_counter",
                "iVar6": "index",
                "lVar8": "length",
                "local_60": "record_array",
                "local_68": "result_size",
                "local_70": "local_var_70",
                "local_88": "local_var_88",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "section_size",
                "param_4": "output_buffer",
                "print_error_message_00119ed0": "print_error_message",
                "process_build_attribute_notes_001086af": "process_notes_func1",
                "process_build_attribute_notes_00116490": "process_notes_func2",
                "process_records_00116852": "process_records",
                "puVar17": "record",
                "puVar18": "temp_ptr",
                "puVar20": "temp_ptr",
                "puVar22": "note_data_ptr",
                "puVar23": "pointer_var23",
                "puVar25": "temp_ptr2",
                "puVar5": "ptr",
                "uStack_80": "value4",
                "uVar1": "result",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar16": "remaining_size",
                "uVar2": "var2",
                "uVar24": "var24",
                "uVar3": "var3",
                "uVar7": "error_message",
                "uVar9": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116490": {
            "additional_data": {
                "FUNC_001086af": {
                    "1": "function_2"
                },
                "FUN_00116490": {
                    "1": "extract_build_attribute_note",
                    "2": "process_build_attribute_notes"
                },
                "__nmemb": {
                    "1": "buffer_length",
                    "2": "length"
                },
                "__ptr": {
                    "1": "pointer_var2",
                    "2": "pointer2",
                    "3": "buffer"
                },
                "bVar21": {
                    "1": "byte_flag",
                    "2": "flag",
                    "9": "byte_var"
                },
                "bVar24": {
                    "1": "is_equal"
                },
                "bVar26": {
                    "1": "is_valid_version"
                },
                "bVar27": {
                    "1": "is_valid_record"
                },
                "bVar28": {
                    "1": "is_new_version"
                },
                "bVar29": {
                    "1": "is_version_supported"
                },
                "bVar30": {
                    "1": "is_zero"
                },
                "bVar31": {
                    "1": "is_description_supported"
                },
                "bVar32": {
                    "1": "is_name_supported"
                },
                "bVar33": {
                    "1": "is_note_supported"
                },
                "bVar36": {
                    "1": "is_different_versions"
                },
                "bVar37": {
                    "1": "is_matched"
                },
                "bVar38": {
                    "1": "is_note_too_big"
                },
                "bVar39": {
                    "1": "is_note_type_wrong"
                },
                "bVar4": {
                    "1": "temp_flag",
                    "2": "is_equal",
                    "3": "boolean_var",
                    "5": "condition"
                },
                "bVar40": {
                    "1": "is_no_description"
                },
                "bVar41": {
                    "1": "is_name_small"
                },
                "bVar42": {
                    "1": "is_supported_version"
                },
                "cVar16": {
                    "1": "tmp_value",
                    "2": "char_var16",
                    "3": "character",
                    "8": "char_var"
                },
                "code_r0x00116490": {
                    "1": "process_records"
                },
                "compare_memory_regions_0011a1b0": {
                    "1": "compare_memory_regions"
                },
                "compare_records_0011a250": {
                    "1": "compare_records"
                },
                "dcgettext": {
                    "1": "gettext"
                },
                "free": {
                    "1": "release_memory"
                },
                "iVar22": {
                    "1": "counter",
                    "2": "counter_2"
                },
                "iVar25": {
                    "1": "counter"
                },
                "iVar6": {
                    "1": "temp_var",
                    "2": "int_var",
                    "4": "index",
                    "5": "counter"
                },
                "in_R11": {
                    "1": "input2",
                    "2": "temp_r11"
                },
                "in_RAX": {
                    "1": "input1",
                    "2": "temp_rax",
                    "3": "note_size",
                    "6": "note_type"
                },
                "in_stack_00000020": {
                    "1": "size1",
                    "2": "result",
                    "3": "output_size",
                    "4": "stack_var1"
                },
                "in_stack_00000028": {
                    "1": "note_entries",
                    "2": "record_array",
                    "3": "stack_var2"
                },
                "in_stack_00000030": {
                    "1": "record_name",
                    "2": "stack_pointer2",
                    "3": "buffer_ptr",
                    "4": "output_buffer"
                },
                "in_stack_00000038": {
                    "1": "excess_data",
                    "2": "flag3",
                    "3": "flag1"
                },
                "in_stack_00000040": {
                    "1": "no_version_note",
                    "2": "option4",
                    "3": "flag2"
                },
                "in_stack_00000048": {
                    "1": "temp_stack_00000048",
                    "2": "stack_pointer3",
                    "3": "stack_var6",
                    "4": "error_message"
                },
                "lVar7": {
                    "1": "temp_var",
                    "2": "temp",
                    "5": "length"
                },
                "memcmp": {
                    "1": "compare_memory"
                },
                "param_1": {
                    "1": "input1",
                    "12": "param1",
                    "2": "input",
                    "3": "arg1",
                    "4": "input_param",
                    "5": "param_1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "size_param",
                    "4": "note_type",
                    "5": "size",
                    "6": "param2"
                },
                "param_3": {
                    "1": "data",
                    "2": "attribute_name",
                    "3": "name",
                    "6": "param3",
                    "8": "note_name"
                },
                "param_4": {
                    "1": "buffer_length",
                    "2": "note_data",
                    "4": "note_description",
                    "7": "param4"
                },
                "param_7": {
                    "1": "new_attribute_size",
                    "3": "output_size",
                    "7": "param7"
                },
                "param_8": {
                    "1": "parameter8",
                    "2": "flag2",
                    "3": "param_8",
                    "4": "has_version_note",
                    "8": "param8"
                },
                "param_9": {
                    "1": "parameter9",
                    "2": "option2",
                    "3": "param_9",
                    "8": "param9"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error_message"
                },
                "puVar14": {
                    "1": "pointer_var2",
                    "2": "ptr2"
                },
                "puVar15": {
                    "1": "pointer_var2",
                    "2": "pointer4"
                },
                "puVar17": {
                    "1": "value_start",
                    "2": "ptr3"
                },
                "puVar18": {
                    "1": "pointer_var6",
                    "2": "ptr4"
                },
                "puVar19": {
                    "1": "pointer_variable6",
                    "2": "ptr8"
                },
                "puVar20": {
                    "1": "var10"
                },
                "puVar21": {
                    "1": "temp_pointer"
                },
                "puVar22": {
                    "1": "temp_pointer2"
                },
                "puVar23": {
                    "1": "temp_pointer3"
                },
                "puVar34": {
                    "1": "description_pointer"
                },
                "puVar35": {
                    "1": "description_end"
                },
                "puVar43": {
                    "1": "temp_attribute"
                },
                "puVar44": {
                    "1": "temp_description"
                },
                "puVar5": {
                    "1": "pointer_variable1",
                    "2": "pointer1",
                    "4": "pointer_var",
                    "5": "ptr"
                },
                "qsort": {
                    "1": "quick_sort"
                },
                "uVar1": {
                    "1": "temp1",
                    "3": "temp_var1",
                    "4": "result1"
                },
                "uVar10": {
                    "1": "tmp_value",
                    "3": "temp_var10"
                },
                "uVar11": {
                    "1": "tmp_value",
                    "2": "var4",
                    "3": "temp_var11"
                },
                "uVar12": {
                    "1": "result12",
                    "2": "var12",
                    "3": "result8"
                },
                "uVar13": {
                    "1": "tmp_value",
                    "3": "temp_var13"
                },
                "uVar14": {
                    "1": "is_current_version"
                },
                "uVar15": {
                    "1": "new_description"
                },
                "uVar2": {
                    "1": "ret_address",
                    "3": "var2",
                    "4": "result2"
                },
                "uVar3": {
                    "1": "variable3",
                    "3": "temp",
                    "4": "result3"
                },
                "uVar4": {
                    "1": "is_valid"
                },
                "uVar5": {
                    "1": "buffer_size"
                },
                "uVar6": {
                    "1": "description_size"
                },
                "uVar7": {
                    "1": "var7"
                },
                "uVar8": {
                    "1": "temp_variable7",
                    "3": "result4"
                },
                "uVar9": {
                    "1": "tmp_value",
                    "3": "temp_var9"
                },
                "unaff_R11": {
                    "1": "unaff_r11"
                },
                "unaff_R12": {
                    "1": "register_r12",
                    "2": "r12",
                    "3": "unaff_r12"
                },
                "unaff_R13": {
                    "1": "previous_value",
                    "2": "r13",
                    "4": "unaff_r13"
                },
                "unaff_R14": {
                    "1": "unaff_register_var14",
                    "2": "r14",
                    "4": "unaffected_r14"
                },
                "unaff_RBP": {
                    "1": "attribute_id",
                    "2": "unaff_rbp",
                    "4": "unaffected_rbp"
                },
                "unaff_RBX": {
                    "1": "records_count",
                    "2": "unaff_rbx",
                    "3": "remaining_note_size",
                    "4": "unaffected_rbx"
                },
                "unaff_retaddr": {
                    "1": "unaffected_ret_addr",
                    "14": "return_address",
                    "2": "retaddr"
                },
                "xmalloc": {
                    "1": "malloc"
                }
            },
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "code": "\nulong process_build_attribute_notes_00116490(undefined8 param1,ulong param2,ulong note_name,long param4)\n\n{\n  undefined8 result1;\n  undefined8 result2;\n  ulong result3;\n  bool condition;\n  ulong *ptr;\n  int counter;\n  long length;\n  undefined8 result4;\n  ulong note_type;\n  ulong result5;\n  ulong result6;\n  ulong result7;\n  ulong result8;\n  undefined *ptr;\n  ulong result9;\n  ulong unaffected_rbx;\n  ulong unaffected_rbp;\n  ulong *pointer3;\n  undefined *pointer4;\n  char char_var;\n  undefined *pointer5;\n  undefined *pointer6;\n  ulong note_description_end;\n  ulong *unaff_r12;\n  ulong *ptr8;\n  ulong unaff_r13;\n  size_t count;\n  undefined8 *unaffected_r14;\n  ulong *pointer10;\n  byte byte_var;\n  int counter2;\n  ulong return_address;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong stack_var1;\n  ulong *stack_var2;\n  undefined *output_buffer;\n  uint stack_var4;\n  uint stack_var5;\n  undefined8 *error_message;\n  \n  byte_var = 0;\nprocess_records:\n  length = param4;\n  result6 = unaffected_rbp;\n  result9 = unaff_r13;\n  if (note_type == 0) {\n    if (param2 == 0x100) {\n      unaff_r12[7] = return_address;\n      result7 = return_address;\nLAB_001164af:\n      result5 = unaff_r13;\n      result9 = unaff_r13;\n      return_address = result7;\n    }\n    else {\n      unaff_r12[7] = param9;\nLAB_0011669e:\n      result6 = unaffected_rbp;\n      result5 = unaffected_rbp;\n    }\nLAB_001164bb:\n    unaff_r12[8] = result5;\n    if (*(char *)((unaff_r12[3] - 1) + note_name) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr8 = unaff_r12 + 9;\n    if (0xb < unaffected_rbx) {\n      result5 = (**(code **)(unaffected_r14[1] + 0x40))(length);\n      *ptr8 = result5;\n      result5 = (**(code **)(unaffected_r14[1] + 0x40))(length + 4);\n      unaff_r12[10] = result5;\n      param2 = (**(code **)(unaffected_r14[1] + 0x40))(length + 8);\n      note_name = *ptr8;\n      unaff_r12[0xb] = param2;\n      note_type = unaff_r12[10];\n      result5 = note_name + 3 & 0xfffffffffffffffc;\n      unaff_r12[0xf] = result5;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param2 - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      result7 = result5 + note_type + 0xc;\n      if (unaffected_rbx < result7) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (note_name < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_r12[0xc] = length + 0xc;\n      note_description_end = length + 0xc + result5;\n      unaff_r12[0xd] = note_description_end;\n      unaffected_rbx = unaffected_rbx + (-0xc - (result5 + note_type));\n      param4 = length + result7;\n      unaffected_rbp = result6;\n      unaff_r12 = ptr8;\n      unaff_r13 = result9;\n      if (note_name != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            result6 = process_build_attribute_notes_00116490();\n            return result6;\n          }\n        }\n        else if ((((4 < note_name) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            result6 = process_build_attribute_notes_00116490();\n            return result6;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            result6 = process_build_attribute_notes_00116490();\n            return result6;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto process_records;\n    }\n    if (unaffected_rbx != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stack_var4 | stack_var5 | param8) == 0) {\n      result1 = *unaffected_r14;\n      result2 = *error_message;\n      result4 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message(result4,result1,result2);\nLAB_0011671b:\n      count = ((long)ptr8 - (long)stack_var2 >> 3) * -0x71c71c71c71c71c7;\n      qsort(stack_var2,count,0x48,memcmp_regions);\n      for (pointer3 = stack_var2; pointer3 < ptr8; pointer3 = pointer3 + 9) {\n        result6 = pointer3[2];\n        if (result6 != 0) {\n          result9 = pointer3[7];\n          result5 = pointer3[8];\n          pointer10 = pointer3;\n          counter2 = 0;\n          if (result9 == result5) {\n            pointer3[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr = pointer10;\n                pointer10 = ptr + -9;\n                if (pointer10 < stack_var2) goto LAB_001167f5;\n                result7 = ptr[-7];\n              } while (result7 == 0);\n              if ((*pointer10 != *pointer3) ||\n                 (counter = memcmp((void *)ptr[-6],(void *)pointer3[3],*pointer3), counter != 0))\n              break;\n              result3 = ptr[-2];\n              result8 = ptr[-1];\n              if (result9 == result3) {\n                if (result5 == result8) {\n                  pointer3[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (result5 <= result8) {\n                  pointer3[2] = 0;\n                  break;\n                }\n                if (result8 < result9) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < result8) ||\n                     (result9 <= (result8 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((result6 == 0x101) == (result7 == 0x101)) {\n                  if (result8 <= result5) {\n                    result8 = result5;\n                  }\n                  if (result3 < result9) {\n                    result9 = result3;\n                  }\n                  ptr[-1] = result8;\n                  ptr[-2] = result9;\n                  pointer3[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (result3 <= result9) goto LAB_001167a6;\n                if (result8 < result9) goto LAB_0010852c;\n                if (result5 < result9) {\n                  if ((0xfffffffffffffff0 < result5) || (result3 <= (result5 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (result5 != result8) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              condition = counter2 < 0x11;\n              counter2 = counter2 + 1;\n            } while (condition);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(stack_var2,count,0x48,compare_records);\n      ptr = (undefined *)xmalloc(stack_var1 * 2);\n      param7 = 0;\n      param9 = 0;\n      pointer6 = ptr;\n      for (pointer3 = stack_var2; pointer3 < ptr8; pointer3 = pointer3 + 9) {\n        if (pointer3[2] != 0) {\n          pointer5 = pointer6 + 4;\n          pointer4 = pointer6 + 0xc;\n          if ((pointer3[7] == param9) && (pointer3[8] == param7)) {\n            (**(code **)(unaffected_r14[1] + 0x50))(*pointer3,pointer6);\n            (**(code **)(unaffected_r14[1] + 0x50))(0,pointer5);\n            (**(code **)(unaffected_r14[1] + 0x50))(pointer3[2],pointer6 + 8);\n            result9 = pointer3[6];\n            result6 = *pointer3;\n            pointer6 = (undefined *)pointer3[3];\n            pointer5 = pointer4;\n            for (result5 = result6; result5 != 0; result5 = result5 - 1) {\n              *pointer5 = *pointer6;\n              pointer6 = pointer6 + (ulong)byte_var * -2 + 1;\n              pointer5 = pointer5 + (ulong)byte_var * -2 + 1;\n            }\n            if (result6 < result9) {\n              for (length = result9 - result6; length != 0; length = length + -1) {\n                *pointer5 = 0;\n                pointer5 = pointer5 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            pointer6 = pointer4 + result9;\n          }\n          else {\n            (**(code **)(unaffected_r14[1] + 0x50))();\n            if (*(int *)(unaffected_r14[1] + 8) == 5) {\n              char_var = (*(char *)(unaffected_r14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_var = '\\b';\n            }\n            (**(code **)(unaffected_r14[1] + 0x50))(char_var,pointer5);\n            (**(code **)(unaffected_r14[1] + 0x50))(pointer3[2],pointer6 + 8);\n            result6 = *pointer3;\n            pointer6 = (undefined *)pointer3[3];\n            pointer5 = pointer4;\n            for (result9 = result6; result9 != 0; result9 = result9 - 1) {\n              *pointer5 = *pointer6;\n              pointer6 = pointer6 + (ulong)byte_var * -2 + 1;\n              pointer5 = pointer5 + (ulong)byte_var * -2 + 1;\n            }\n            result9 = pointer3[6];\n            if (result6 < result9) {\n              for (length = result9 - result6; length != 0; length = length + -1) {\n                *pointer5 = 0;\n                pointer5 = pointer5 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            length = unaffected_r14[1];\n            pointer4 = pointer4 + result9;\n            pointer6 = pointer4 + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(unaffected_r14[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(pointer3[7],pointer4);\n              (**(code **)(unaffected_r14[1] + 0x38))(pointer3[8],pointer6);\n              pointer6 = pointer4 + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(pointer3[7],pointer4);\n              (**(code **)(unaffected_r14[1] + 0x50))(pointer3[8],pointer4 + 4);\n            }\n            param9 = pointer3[7];\n            param7 = pointer3[8];\n          }\n        }\n      }\n      result9 = (long)pointer6 - (long)ptr;\n      result6 = result9;\n      pointer6 = ptr;\n      if (result9 < stack_var1) {\n        for (; stack_var1 = result9, result6 != 0; result6 = result6 - 1) {\n          *output_buffer = *pointer6;\n          pointer6 = pointer6 + (ulong)byte_var * -2 + 1;\n          output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n        }\n      }\n      free(ptr);\nLAB_001166f8:\n      free(stack_var2);\n      return stack_var1;\n    }\n    if (((stack_var5 | param8) == 0) || (stack_var4 == 0)) {\n      if (stack_var5 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      result7 = (**(code **)(unaffected_r14[1] + 0x28))(note_description_end);\n      result5 = (**(code **)(unaffected_r14[1] + 0x28))(unaff_r12[4] + 8);\n      if (result5 < result7) {\n        result7 = result5;\n      }\nLAB_00116631:\n      if (unaff_r12[2] == 0x100) {\n        if (result7 == 0) {\n          result7 = return_address;\n        }\n        note_name = *unaff_r12;\n        unaff_r12[7] = result7;\n        result9 = result5;\n        return_address = result7;\n        if (result5 == 0) goto LAB_001164af;\n      }\n      else {\n        if (result7 == 0) {\n          result7 = param9;\n        }\n        note_name = *unaff_r12;\n        unaff_r12[7] = result7;\n        result6 = result5;\n        param9 = result7;\n        if (result5 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        result7 = (**(code **)(unaffected_r14[1] + 0x40))(note_description_end);\n        result5 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        result6 = process_build_attribute_notes_001086af();\n        return result6;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,unaffected_r14,error_message,length);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_memory_regions_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "current_name": "process_build_attribute_notes_00116490",
            "entrypoint": "0x00116490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116490": "process_build_attribute_notes_00116490",
                "__nmemb": "count",
                "__ptr": "ptr",
                "bVar21": "byte_var",
                "bVar4": "condition",
                "cVar16": "char_var",
                "code_r0x00116490": "process_records",
                "compare_memory_regions_0011a1b0": "compare_memory_regions",
                "compare_records_0011a250": "compare_records",
                "dcgettext": "gettext",
                "free": "release_memory",
                "iVar22": "counter2",
                "iVar6": "counter",
                "in_R11": "note_description_end",
                "in_RAX": "note_type",
                "in_stack_00000020": "stack_var1",
                "in_stack_00000028": "stack_var2",
                "in_stack_00000030": "output_buffer",
                "in_stack_00000038": "stack_var4",
                "in_stack_00000040": "stack_var5",
                "in_stack_00000048": "error_message",
                "lVar7": "length",
                "memcmp": "compare_memory",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "note_name",
                "param_4": "param4",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "print_error_message_00119ed0": "print_error_message",
                "puVar14": "pointer3",
                "puVar15": "pointer4",
                "puVar17": "pointer5",
                "puVar18": "pointer6",
                "puVar19": "ptr8",
                "puVar20": "pointer10",
                "puVar5": "ptr",
                "qsort": "quick_sort",
                "uVar1": "result1",
                "uVar10": "result6",
                "uVar11": "result7",
                "uVar12": "result8",
                "uVar13": "result9",
                "uVar14": "is_current_version",
                "uVar15": "new_description",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar5": "var5",
                "uVar8": "result4",
                "uVar9": "result5",
                "unaff_R12": "unaff_r12",
                "unaff_R13": "unaff_r13",
                "unaff_R14": "unaffected_r14",
                "unaff_RBP": "unaffected_rbp",
                "unaff_RBX": "unaffected_rbx",
                "unaff_retaddr": "return_address",
                "xmalloc": "malloc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116852": {
            "additional_data": {
                "FUN_00116852": {
                    "1": "find_and_process_records",
                    "2": "reverse_and_process_records",
                    "23": "process_records"
                },
                "__ptr": {
                    "1": "temp_array",
                    "2": "temp_buffer"
                },
                "_ptr": {
                    "1": "processed_record_array"
                },
                "bVar14": {
                    "1": "use_padding",
                    "2": "byte_value",
                    "3": "byte_var"
                },
                "cVar10": {
                    "1": "callback_result",
                    "2": "character",
                    "3": "temp_char"
                },
                "compare_records_0011a250": {
                    "1": "compare_records"
                },
                "iVar3": {
                    "1": "result",
                    "14": "comparison_result",
                    "2": "memcmp_result",
                    "3": "compare_result"
                },
                "in_R10": {
                    "1": "temp_index",
                    "3": "index",
                    "4": "counter",
                    "5": "record_count",
                    "8": "record_index"
                },
                "in_R11": {
                    "1": "temp_value",
                    "3": "record_type"
                },
                "in_R13": {
                    "1": "current_record"
                },
                "in_R14": {
                    "1": "sorted_records"
                },
                "in_R15": {
                    "1": "last_record_size"
                },
                "in_RBP": {
                    "1": "comparison_record"
                },
                "in_RBX": {
                    "1": "max_size"
                },
                "in_RCX": {
                    "1": "input_array",
                    "11": "record_array",
                    "2": "array_end",
                    "4": "record_count"
                },
                "lVar7": {
                    "1": "temp_variable",
                    "2": "loop_var",
                    "4": "difference",
                    "6": "loop_counter"
                },
                "param_10": {
                    "1": "filter_value3",
                    "2": "param3",
                    "4": "param_10",
                    "5": "result_size",
                    "6": "output_size"
                },
                "param_11": {
                    "1": "source_array",
                    "2": "temp_array",
                    "3": "input_array",
                    "4": "record_array"
                },
                "param_12": {
                    "1": "param_dest_memory",
                    "2": "param12",
                    "3": "output_ptr",
                    "4": "output_array",
                    "9": "output_buffer"
                },
                "param_13": {
                    "1": "param_ptr_struct",
                    "3": "param13",
                    "9": "context"
                },
                "param_14": {
                    "1": "param7",
                    "2": "param14",
                    "3": "input_size",
                    "4": "num_records",
                    "7": "record_count"
                },
                "param_7": {
                    "1": "param3",
                    "2": "param1",
                    "7": "param7"
                },
                "param_9": {
                    "1": "param_record_type",
                    "2": "target_value",
                    "7": "param9",
                    "8": "param_9"
                },
                "pcVar2": {
                    "1": "compare_func"
                },
                "psVar13": {
                    "1": "tmp_ptr_array",
                    "2": "current_record",
                    "4": "current_record_ptr"
                },
                "puVar11": {
                    "1": "temp_buffer",
                    "2": "ptr2",
                    "3": "temp_ptr2"
                },
                "puVar12": {
                    "1": "output_ptr",
                    "2": "ptr3",
                    "3": "temp_ptr3"
                },
                "puVar9": {
                    "1": "input_data",
                    "2": "dest_ptr",
                    "3": "temp_ptr"
                },
                "sVar1": {
                    "1": "tmp_value",
                    "10": "record_size",
                    "2": "size_var"
                },
                "uVar4": {
                    "1": "iteration_count",
                    "2": "record_index",
                    "3": "index",
                    "8": "counter"
                },
                "uVar5": {
                    "1": "tmp_size",
                    "2": "min_record_size"
                },
                "uVar6": {
                    "1": "current_record_size"
                },
                "uVar8": {
                    "1": "counter",
                    "3": "temp_value"
                },
                "unaff_R11": {
                    "1": "record_list_size"
                },
                "unaff_R13": {
                    "1": "ptr2",
                    "2": "start_record",
                    "3": "record_end"
                },
                "unaff_R13[2]": {
                    "1": "start_record_flag"
                },
                "unaff_R13[3]": {
                    "1": "start_record_data"
                },
                "unaff_R13[7]": {
                    "1": "start_record_value1"
                },
                "unaff_R13[8]": {
                    "1": "start_record_value2"
                },
                "unaff_R14": {
                    "1": "sorted_records",
                    "12": "current_record",
                    "2": "current_pointer",
                    "5": "record_ptr"
                },
                "unaff_R14[2]": {
                    "1": "current_record_flag"
                },
                "unaff_R14[3]": {
                    "1": "current_record_data"
                },
                "unaff_R14[7]": {
                    "1": "current_record_value1"
                },
                "unaff_R14[8]": {
                    "1": "current_record_value2"
                },
                "unaff_R15": {
                    "1": "current_record_size",
                    "2": "max_record_index",
                    "3": "max_record_size"
                },
                "unaff_RBP": {
                    "1": "base_pointer",
                    "2": "record_ptr",
                    "4": "record_pointer"
                },
                "unaff_RBP[2]": {
                    "1": "search_flag"
                },
                "unaff_RBP[3]": {
                    "1": "record_data"
                },
                "unaff_RBP[7]": {
                    "1": "min_width"
                },
                "unaff_RBP[8]": {
                    "1": "max_width"
                },
                "unaff_RBP[9]": {
                    "1": "max_height"
                },
                "unaff_RBX": {
                    "1": "minimum_index",
                    "2": "max_record_end",
                    "3": "min_record_size"
                }
            },
            "called": [
                "FUN_0011a250",
                "memcmp",
                "free",
                "FUN_00116852",
                "xmalloc",
                "qsort"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nulong process_records_00116852(void)\n\n{\n  size_t record_size;\n  code *function_pointer;\n  int comparison_result;\n  uint counter;\n  undefined *memory_ptr;\n  size_t *record_array;\n  ulong min_record_size;\n  ulong temp_min_value;\n  long loop_counter;\n  ulong temp_value;\n  size_t min_record_size;\n  size_t *record_pointer;\n  undefined *temp_ptr;\n  char temp_char;\n  undefined *temp_ptr2;\n  ulong record_index;\n  undefined *temp_ptr3;\n  size_t record_type;\n  size_t *record_end;\n  size_t *current_record;\n  size_t max_record_size;\n  size_t *current_record_ptr;\n  byte byte_var;\n  size_t param_7;\n  size_t param_9;\n  ulong output_size;\n  size_t *record_array;\n  undefined *output_buffer;\n  long context;\n  size_t record_count;\n  \n  byte_var = 0;\ncode_r0x00116852:\n  counter = (int)record_index + 1;\n  if (0x10 < (int)record_index) goto LAB_001167f5;\nLAB_00116863:\n  current_record = current_record + -9;\n  do {\n    if (record_end <= current_record) {\n      record_size = current_record_flag;\n      if (record_size == 0) goto LAB_00116863;\n      temp_value = (ulong)counter;\n      if ((*current_record == *record_pointer) &&\n         (comparison_result = memcmp((void *)current_record_data,(void *)record_data,*record_pointer), comparison_result == 0)) {\n        temp_min_value = current_record_value1;\n        min_record_size = current_record_value2;\n        record_index = temp_value & 0xffffffff;\n        if (max_record_size == temp_min_value) {\n          if (min_record_size != min_record_size) goto LAB_001167a6;\n          search_flag = 0;\n        }\n        else {\n          if (max_record_size < temp_min_value) {\n            if (min_record_size < max_record_size) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < min_record_size) || (max_record_size <= (min_record_size + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (min_record_size < max_record_size) {\n              if ((0xfffffffffffffff0 < min_record_size) ||\n                 (temp_min_value <= (min_record_size + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (min_record_size == min_record_size) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (min_record_size <= min_record_size) {\n              search_flag = 0;\n              goto LAB_001167f5;\n            }\n            if (min_record_size < max_record_size) goto LAB_0010852c;\n          }\n          if ((record_type == 0x101) != (record_size == 0x101)) goto code_r0x00116852;\n          if (min_record_size <= min_record_size) {\n            min_record_size = min_record_size;\n          }\n          if (temp_min_value < max_record_size) {\n            max_record_size = temp_min_value;\n          }\n          current_record_value2 = min_record_size;\n          current_record_value1 = max_record_size;\n          search_flag = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_record = record_pointer;\n        record_pointer = current_record + 9;\n        if (record_array <= record_pointer) {\n          qsort(record_array,record_count,0x48,compare_records);\n          memory_ptr = (undefined *)xmalloc(output_size * 2);\n          param_7 = 0;\n          temp_ptr3 = memory_ptr;\n          for (current_record_ptr = record_array; current_record_ptr < record_array; current_record_ptr = current_record_ptr + 9) {\n            if (current_record_ptr[2] != 0) {\n              temp_ptr2 = temp_ptr3 + 4;\n              temp_ptr = temp_ptr3 + 0xc;\n              function_pointer = *(code **)(*(long *)(context + 8) + 0x50);\n              if ((current_record_ptr[7] == param_9) && (current_record_ptr[8] == param_7)) {\n                (*function_pointer)(*current_record_ptr,temp_ptr3);\n                (**(code **)(*(long *)(context + 8) + 0x50))(0,temp_ptr2);\n                (**(code **)(*(long *)(context + 8) + 0x50))(current_record_ptr[2],temp_ptr3 + 8);\n                temp_min_value = current_record_ptr[6];\n                temp_value = *current_record_ptr;\n                temp_ptr3 = (undefined *)current_record_ptr[3];\n                temp_ptr2 = temp_ptr;\n                for (min_record_size = temp_value; min_record_size != 0; min_record_size = min_record_size - 1) {\n                  *temp_ptr2 = *temp_ptr3;\n                  temp_ptr3 = temp_ptr3 + (ulong)byte_var * -2 + 1;\n                  temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n                }\n                if (temp_value < temp_min_value) {\n                  for (loop_counter = temp_min_value - temp_value; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *temp_ptr2 = 0;\n                    temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n                  }\n                }\n                temp_ptr3 = temp_ptr + temp_min_value;\n              }\n              else {\n                (*function_pointer)();\n                if (*(int *)(*(long *)(context + 8) + 8) == 5) {\n                  temp_char = (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  temp_char = '\\b';\n                }\n                (**(code **)(*(long *)(context + 8) + 0x50))(temp_char,temp_ptr2);\n                (**(code **)(*(long *)(context + 8) + 0x50))(current_record_ptr[2],temp_ptr3 + 8);\n                temp_value = *current_record_ptr;\n                temp_ptr3 = (undefined *)current_record_ptr[3];\n                temp_ptr2 = temp_ptr;\n                for (temp_min_value = temp_value; temp_min_value != 0; temp_min_value = temp_min_value - 1) {\n                  *temp_ptr2 = *temp_ptr3;\n                  temp_ptr3 = temp_ptr3 + (ulong)byte_var * -2 + 1;\n                  temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n                }\n                temp_min_value = current_record_ptr[6];\n                if (temp_value < temp_min_value) {\n                  for (loop_counter = temp_min_value - temp_value; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *temp_ptr2 = 0;\n                    temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n                  }\n                }\n                loop_counter = *(long *)(context + 8);\n                temp_ptr = temp_ptr + temp_min_value;\n                temp_ptr3 = temp_ptr + 8;\n                if ((*(int *)(loop_counter + 8) == 5) &&\n                   (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loop_counter + 0x38))(current_record_ptr[7],temp_ptr);\n                  (**(code **)(*(long *)(context + 8) + 0x38))(current_record_ptr[8],temp_ptr3);\n                  temp_ptr3 = temp_ptr + 0x10;\n                }\n                else {\n                  (**(code **)(loop_counter + 0x50))(current_record_ptr[7],temp_ptr);\n                  (**(code **)(*(long *)(context + 8) + 0x50))(current_record_ptr[8],temp_ptr + 4);\n                }\n                param_9 = current_record_ptr[7];\n                param_7 = current_record_ptr[8];\n              }\n            }\n          }\n          temp_min_value = (long)temp_ptr3 - (long)memory_ptr;\n          temp_value = temp_min_value;\n          temp_ptr3 = memory_ptr;\n          if (temp_min_value < output_size) {\n            for (; output_size = temp_min_value, temp_value != 0; temp_value = temp_value - 1) {\n              *output_buffer = *temp_ptr3;\n              temp_ptr3 = temp_ptr3 + (ulong)byte_var * -2 + 1;\n              output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n            }\n          }\n          free(memory_ptr);\n          free(record_array);\n          return output_size;\n        }\n        record_type = current_record[0xb];\n      } while (record_type == 0);\n      max_record_size = current_record[0x10];\n      min_record_size = current_record[0x11];\n      counter = 0;\n      if (max_record_size != min_record_size) break;\n      current_record[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_records_00116852",
            "entrypoint": "0x00116852",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116852": "process_records_00116852",
                "__ptr": "memory_ptr",
                "_ptr": "processed_record_array",
                "bVar14": "byte_var",
                "cVar10": "temp_char",
                "compare_records_0011a250": "compare_records",
                "iVar3": "comparison_result",
                "in_R10": "record_index",
                "in_R11": "record_type",
                "in_RCX": "record_array",
                "lVar7": "loop_counter",
                "param_10": "output_size",
                "param_11": "record_array",
                "param_12": "output_buffer",
                "param_13": "context",
                "param_14": "record_count",
                "pcVar2": "function_pointer",
                "psVar13": "current_record_ptr",
                "puVar11": "temp_ptr2",
                "puVar12": "temp_ptr3",
                "puVar9": "temp_ptr",
                "sVar1": "record_size",
                "uVar4": "counter",
                "uVar5": "min_record_size",
                "uVar6": "temp_min_value",
                "uVar8": "temp_value",
                "unaff_R13": "record_end",
                "unaff_R14": "current_record",
                "unaff_R14[2]": "current_record_flag",
                "unaff_R14[3]": "current_record_data",
                "unaff_R14[7]": "current_record_value1",
                "unaff_R14[8]": "current_record_value2",
                "unaff_R15": "max_record_size",
                "unaff_RBP": "record_pointer",
                "unaff_RBP[2]": "search_flag",
                "unaff_RBP[3]": "record_data",
                "unaff_RBX": "min_record_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116ad0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116ad0",
            "entrypoint": "0x00116ad0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b00": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116b00",
            "entrypoint": "0x00116b00",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b90": {
            "called": [
                "fprintf",
                "strncpy",
                "FUN_00114cf0",
                "FUN_00108c86",
                "FUN_00113fe0",
                "FUN_00113f20",
                "FUN_00114460",
                "xmalloc",
                "strerror",
                "strcmp",
                "FUN_00113fb0",
                "xexit",
                "FUN_00108d9a",
                "free",
                "setlocale",
                "fread",
                "htab_elements",
                "ftell",
                "xmalloc_set_program_name",
                "xcalloc",
                "FUN_00119dd0",
                "FUN_00108a2a",
                "xstrdup",
                "xrealloc",
                "bfd_init",
                "getopt_long",
                "close",
                "strncasecmp",
                "strtol",
                "FUN_00113f50",
                "FUN_00108916",
                "bfd_scan_arch",
                "bfd_get_error",
                "strlen",
                "FUN_0011a480",
                "__errno_location",
                "memmove",
                "bfd_set_error_program_name",
                "bfd_errmsg",
                "FUN_001199d0",
                "fopen",
                "FUN_00114c20",
                "FUN_00115970",
                "FUN_00108800",
                "FUN_00114190",
                "FUN_00108898",
                "bfd_set_default_target",
                "strtoul",
                "strcpy",
                "free",
                "malloc",
                "FUN_001126c0",
                "htab_find_slot",
                "ferror",
                "FUN_00114d60",
                "bindtextdomain",
                "dup",
                "FUN_001054af",
                "FUN_00119970",
                "FUN_00114c80",
                "stat",
                "FUN_00119ed0",
                "memcpy",
                "fclose",
                "textdomain",
                "FUN_0011a390",
                "FUN_00114690",
                "filename_cmp",
                "htab_create_alloc",
                "strcasecmp",
                "getc",
                "unlink_if_ordinary",
                "dcgettext",
                "FUN_00119940",
                "mkstemp",
                "strchr",
                "fseek"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_error_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_error_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = create_hash_table_00113f20();\n  DAT_001279f0 = create_hash_table_00113f20();\n  DAT_00127a08 = create_hash_table_00113f20();\n  DAT_001279e8 = create_hash_table_00113f20();\n  DAT_001279e0 = create_hash_table_00113f20();\n  DAT_001279d8 = create_hash_table_00113f20();\n  DAT_001279d0 = create_hash_table_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,hash_string_00108800,compare_strings_00108898);\n  DAT_001278c8 = create_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = execute_function_chain_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hash_table_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        process_data_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        find_matching_entry_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        find_matching_entry_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version_info_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    print_binary_info_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version_info_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = string_comparison_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = parse_driver_info_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = string_comparison_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = parse_driver_info_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)create_file_path_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  extract_and_copy_archive_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_delete_file_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = check_file_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)create_file_path_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_error_message_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    extract_and_copy_archive_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_delete_file_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_usage_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_error_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_usage_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    process_data_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_matching_entry_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = parse_parameter_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    read_and_store_file_contents_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_string_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_string_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_error_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_string_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = check_and_print_error_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_matching_entry_00114190(pcVar32,1,uVar12);\n    lVar17 = check_and_print_error_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = check_and_print_error_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = parse_parameter_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = check_and_print_error_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)check_and_print_error_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    read_and_process_file_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = check_and_print_error_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    read_and_process_file_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_matching_entry_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    read_and_process_file_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    read_and_process_file_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = check_and_print_error_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_symbol_redefinition_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_matching_entry_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = check_and_print_error_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_matching_entry_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_matching_entry_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = check_and_print_error_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = check_and_print_error_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    read_and_process_file_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    read_and_process_file_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = parse_parameter_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    read_and_store_file_contents_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = check_and_print_error_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    read_and_process_file_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_error_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "current_name": "FUNC_00116b90",
            "entrypoint": "0x00116b90",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00119940": {
            "additional_data": {
                "FUN_00119940": {
                    "1": "process_scan_results",
                    "11": "validate_and_print_error",
                    "14": "check_and_print_error"
                },
                "local_20": {
                    "1": "scanned_results",
                    "2": "buffer",
                    "4": "scanned_values",
                    "7": "scan_result"
                },
                "param_1": {
                    "1": "scan_address",
                    "11": "address",
                    "2": "memory_address",
                    "5": "input_param",
                    "6": "input_value"
                },
                "param_2": {
                    "1": "data",
                    "12": "error_message",
                    "2": "message_param",
                    "3": "output_param",
                    "7": "message"
                },
                "uVar1": {
                    "1": "localized_error",
                    "10": "error_message",
                    "2": "localized_message",
                    "3": "error_string"
                }
            },
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid check_and_print_error_00119940(undefined8 address,undefined8 error_message)\n\n{\n  undefined8 error_message;\n  char *scan_result [2];\n  \n  bfd_scan_vma(address,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,error_message,address);\n}\n\n",
            "current_name": "check_and_print_error_00119940",
            "entrypoint": "0x00119940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119940": "check_and_print_error_00119940",
                "local_20": "scan_result",
                "param_1": "address",
                "param_2": "error_message",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119970": {
            "additional_data": {
                "FUN_00119970": {
                    "1": "print_program_details",
                    "16": "print_version_info",
                    "2": "print_binutils_version",
                    "3": "print_program_info"
                },
                "param_1": {
                    "1": "version_info",
                    "19": "version",
                    "2": "program_name",
                    "4": "version_string"
                },
                "pcVar1": {
                    "1": "localized_copyright",
                    "10": "copyright_message",
                    "2": "copyright_string",
                    "3": "copy_right_message",
                    "6": "message"
                }
            },
            "called": [
                "exit",
                "printf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_version_info_00119970(undefined8 version)\n\n{\n  char *copyright_message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyright_message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyright_message);\n  copyright_message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyright_message);\n                    \n  exit(0);\n}\n\n",
            "current_name": "print_version_info_00119970",
            "entrypoint": "0x00119970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "version",
                "pcVar1": "copyright_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001199d0": {
            "additional_data": {
                "DAT_0011b39a": {
                    "1": "default_directory"
                },
                "DAT_00120324": {
                    "1": "fallback_directory"
                },
                "DAT_001278c0": {
                    "1": "temp_directory"
                },
                "FUN_001199d0": {
                    "1": "print_bfd_header_info",
                    "2": "print_binary_targets",
                    "3": "print_binary_information",
                    "4": "print_binary_architectures",
                    "9": "print_binary_info"
                },
                "ITERATE_TARGETS": {
                    "1": "process_binary"
                },
                "_Columns": {
                    "1": "number_of_columns"
                },
                "_i": {
                    "1": "max_column_width"
                },
                "_iVar1": {
                    "1": "default_column_width"
                },
                "_iVar2, _iVar3": {
                    "1": "arch_iter"
                },
                "_iVar9": {
                    "1": "arch_mach_iter"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "_stdout": {
                    "1": "output_stream"
                },
                "iVar1": {
                    "1": "columns_count",
                    "2": "terminal_width",
                    "3": "max_columns",
                    "4": "num_columns",
                    "7": "columns"
                },
                "iVar2": {
                    "1": "arch_index2",
                    "3": "target",
                    "4": "arch_index",
                    "9": "target_index"
                },
                "iVar3": {
                    "1": "strcmp_result",
                    "10": "comparison_result",
                    "2": "compare_result",
                    "4": "arch_compare_result"
                },
                "iVar4": {
                    "1": "temp_file_descriptor"
                },
                "iVar9": {
                    "1": "counter",
                    "6": "arch_mach_index",
                    "8": "arch_index"
                },
                "lVar10": {
                    "1": "temp_path_len",
                    "2": "string_length",
                    "3": "loop_index1"
                },
                "lVar11": {
                    "1": "arch_index_index",
                    "2": "loop_var2",
                    "3": "start_index"
                },
                "local_70": {
                    "1": "loop_index",
                    "2": "loop_counter"
                },
                "pcVar12": {
                    "1": "architecture_list"
                },
                "pcVar4": {
                    "1": "header_version_msg",
                    "2": "header",
                    "3": "header_string",
                    "4": "header_format",
                    "5": "header_message"
                },
                "pcVar6": {
                    "1": "temp_dir_path",
                    "13": "temp_file_path",
                    "2": "temporary_directory",
                    "4": "temp_directory"
                },
                "piVar8": {
                    "1": "err_num",
                    "2": "error_location_ptr",
                    "3": "error_code",
                    "4": "errno_ptr",
                    "7": "errno_location",
                    "8": "error_number"
                },
                "ppcVar12": {
                    "1": "binary_info_pointer",
                    "2": "binary_targets",
                    "3": "architectures"
                },
                "sVar5": {
                    "1": "message_length",
                    "2": "str_len",
                    "4": "header_format_length",
                    "5": "header_length",
                    "7": "string_length"
                },
                "sVar5_2": {
                    "1": "string_length_2"
                },
                "sVar5_3": {
                    "1": "string_length_3"
                },
                "sVar5_4": {
                    "1": "string_length_4"
                },
                "sVar5_5": {
                    "1": "string_length_5"
                },
                "uVar13": {
                    "1": "max_message_length",
                    "10": "max_arch_length",
                    "2": "max_arch_len",
                    "5": "max_length",
                    "6": "max_arch_mach_length"
                },
                "uVar14": {
                    "1": "array_index",
                    "2": "str_len_iter",
                    "3": "str_length",
                    "4": "arch_length"
                },
                "uVar7": {
                    "1": "processed_directories",
                    "13": "access_result",
                    "2": "directory_access_result",
                    "3": "result"
                }
            },
            "called": [
                "fprintf",
                "bfd_printable_arch_mach",
                "__errno_location",
                "getenv",
                "bfd_iterate_over_targets",
                "printf",
                "xmalloc",
                "strerror",
                "close",
                "FUN_0011283f",
                "strcpy",
                "free",
                "FUN_00119f70",
                "unlink",
                "FUN_00104943",
                "dcgettext",
                "mkstemps",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid print_binary_info_001199d0(void)\n\n{\n  int columns;\n  int target_index;\n  int comparison_result;\n  char *header_message;\n  size_t string_length;\n  char *temp_file_path;\n  undefined8 access_result;\n  int *error_number;\n  int arch_index;\n  long loop_index1;\n  long line_index;\n  char **architectures;\n  uint max_arch_length;\n  ulong arch_length;\n  int current_index;\n  \n  header_message = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(header_message,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    header_message = getenv(\"TMPDIR\");\n    access_result = check_directory_access_0011283f(header_message,0);\n    header_message = getenv(\"TMP\");\n    access_result = check_directory_access_0011283f(header_message,access_result);\n    header_message = getenv(\"TEMP\");\n    access_result = check_directory_access_0011283f(header_message,access_result);\n    access_result = check_directory_access_0011283f(&DAT_0011b39a,access_result);\n    access_result = check_directory_access_0011283f(\"/var/tmp\",access_result);\n    header_message = (char *)check_directory_access_0011283f(&DAT_00120324,access_result);\n    if (header_message == (char *)0x0) {\n      header_message = \".\";\n    }\n    string_length = strlen(header_message);\n    temp_file_path = (char *)xmalloc((int)string_length + 2);\n    DAT_001278c0 = strcpy(temp_file_path,header_message);\n    DAT_001278c0[string_length & 0xffffffff] = '/';\n    DAT_001278c0[(int)string_length + 1] = '\\0';\n  }\n  header_message = DAT_001278c0;\n  string_length = strlen(DAT_001278c0);\n  loop_index1 = (long)(int)string_length;\n  temp_file_path = (char *)xmalloc(loop_index1 + 9);\n  strcpy(temp_file_path,header_message);\n  *(undefined2 *)(temp_file_path + loop_index1) = 0x6363;\n  *(undefined4 *)(temp_file_path + loop_index1 + 2) = 0x58585858;\n  *(undefined4 *)((long)(temp_file_path + loop_index1 + 2) + 3) = 0x585858;\n  temp_file_path[loop_index1 + 8] = '\\0';\n  target_index = mkstemps(temp_file_path,0);\n  if (target_index == -1) {\n    error_number = __errno_location();\n    temp_file_path = strerror(*error_number);\n    fprintf(error_stream,\"Cannot create temporary file in %s: %s\\n\",header_message,temp_file_path);\n                    \n    abort();\n  }\n  target_index = close(target_index);\n  if (target_index != 0) {\n                    \n    abort();\n  }\n  max_arch_length = 0;\n  target_index = 2;\n  bfdmax_column_widthterate_over_targets(process_binary_00119f70);\n  unlink(temp_file_path);\n  free(temp_file_path);\n  current_index = 0;\n  do {\n    header_message = (char *)bfd_printable_arch_mach(target_index);\n    string_length = strlen(header_message);\n    if ((int)max_arch_length < (int)(uint)string_length) {\n      max_arch_length = (uint)string_length;\n    }\n    target_index = target_index + 1;\n  } while (target_index != 0x57);\n  header_message = getenv(\"COLUMNS\");\n  target_index = current_index;\n  if (header_message != (char *)0x0) {\n    loop_index1 = strtol(header_message,(char **)0x0,10);\n    columns = (int)loop_index1;\n    if (columns != 0) goto LAB_00119b11;\n  }\n  columns = 0x50;\nLAB_00119b11:\n  do {\n    current_index = target_index;\n    if (-1 < current_index) {\n      return;\n    }\n    line_index = (long)current_index;\n    arch_index = (columns - max_arch_length) + -1;\n    loop_index1 = line_index;\n    do {\n      target_index = (int)loop_index1;\n      if (-1 < target_index) break;\n      string_length = strlen(*(char **)(loop_index1 * 0x60));\n      loop_index1 = loop_index1 + 1;\n      arch_index = (arch_index - (int)string_length) + -1;\n    } while (-1 < arch_index);\n    printf(\"\\n%*s\",(ulong)(max_arch_length + 1),&DAT_0011b4a1);\n    for (architectures = (char **)(line_index * 0x60);\n        ((ulong)(uint)(target_index - current_index) + line_index) * 0x60 - (long)architectures != 0;\n        architectures = architectures + 0xc) {\n      printf(\"%s \",*architectures);\n    }\n    arch_index = 2;\n    putc(10,output_stream);\n    do {\n      header_message = (char *)bfd_printable_arch_mach(arch_index,0);\n      comparison_result = strcmp(header_message,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        access_result = bfd_printable_arch_mach(arch_index,0);\n        printf(\"%*s \",(ulong)max_arch_length,access_result);\n        architectures = (char **)(line_index * 0x60);\n        comparison_result = current_index;\n        while (target_index != comparison_result) {\n          if (*(char *)((long)architectures + (ulong)(arch_index - 2) + 8) == '\\0') {\n            string_length = strlen(*architectures);\n            for (arch_length = string_length & 0xffffffff; (int)arch_length != 0; arch_length = (ulong)((int)arch_length - 1)) {\n              putc(0x2d,output_stream);\n            }\n          }\n          else {\n            fputs(*architectures,output_stream);\n          }\n          comparison_result = comparison_result + 1;\n          if (target_index != comparison_result) {\n            putc(0x20,output_stream);\n          }\n          architectures = architectures + 0xc;\n        }\n        putc(10,output_stream);\n      }\n      arch_index = arch_index + 1;\n    } while (arch_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_binary_info_001199d0",
            "entrypoint": "0x001199d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001199d0": "print_binary_info_001199d0",
                "_i": "max_column_width",
                "_stderr": "error_stream",
                "_stdout": "output_stream",
                "iVar1": "columns",
                "iVar2": "target_index",
                "iVar3": "comparison_result",
                "iVar9": "arch_index",
                "lVar10": "loop_index1",
                "lVar11": "line_index",
                "local_70": "current_index",
                "pcVar12": "binary_arch_mach",
                "pcVar4": "header_message",
                "pcVar6": "temp_file_path",
                "piVar8": "error_number",
                "ppcVar12": "architectures",
                "sVar5": "string_length",
                "uVar13": "max_arch_length",
                "uVar14": "arch_length",
                "uVar7": "access_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119dd0": {
            "additional_data": {
                "FUN_00119dd0": {
                    "1": "print_and_exit_on_error",
                    "18": "print_error_and_exit",
                    "5": "print_error_message_and_exit"
                },
                "in_AL": {
                    "1": "enable_error",
                    "15": "flag",
                    "2": "is_error",
                    "4": "condition"
                },
                "local_18": {
                    "1": "local_param_8",
                    "2": "error_code_8_copy",
                    "3": "param8",
                    "4": "param_8",
                    "5": "param_8_copy",
                    "6": "param8_copy"
                },
                "local_28": {
                    "1": "param_6_copied",
                    "2": "local_param7",
                    "3": "param7",
                    "4": "param_7",
                    "5": "param_7_copy",
                    "6": "param7_copy"
                },
                "local_38": {
                    "1": "unused_param6",
                    "2": "error_code_6_copy",
                    "3": "param6",
                    "4": "param_6",
                    "5": "param_6_copy",
                    "6": "param6_copy"
                },
                "local_48": {
                    "1": "unused_param5",
                    "2": "local_param5",
                    "3": "param5",
                    "4": "param_5",
                    "5": "param_5_copy",
                    "6": "param5_copy"
                },
                "local_58": {
                    "1": "local_param_4",
                    "2": "error_code_4_copy",
                    "3": "param4",
                    "4": "param_4",
                    "5": "param_4_copy",
                    "6": "param4_copy"
                },
                "local_68": {
                    "1": "param_2_copied",
                    "2": "error_code3_copy",
                    "3": "param3",
                    "4": "param_3",
                    "5": "param_3_copy",
                    "6": "param3_copy"
                },
                "local_78": {
                    "1": "local_var4",
                    "2": "error_code2_copy",
                    "3": "param_2",
                    "5": "param_2_copy",
                    "6": "param2_copy"
                },
                "local_88": {
                    "1": "local_var3",
                    "2": "local_error_code",
                    "4": "error_code",
                    "5": "param_1_copy"
                },
                "local_90": {
                    "1": "param_m_copy",
                    "3": "param14",
                    "4": "param_14",
                    "6": "param_14_copy",
                    "7": "param14_copy"
                },
                "local_98": {
                    "1": "param_array4",
                    "3": "param13",
                    "4": "param_13",
                    "6": "param_13_copy",
                    "7": "param13_copy"
                },
                "local_a0": {
                    "1": "unused_param12",
                    "3": "param12",
                    "4": "param_12",
                    "6": "param_12_copy",
                    "7": "param12_copy"
                },
                "local_a8": {
                    "1": "local_variable_3",
                    "3": "param11",
                    "4": "param_11",
                    "6": "param_11_copy",
                    "7": "param11_copy"
                },
                "local_b0": {
                    "1": "param_10_new",
                    "3": "param10",
                    "4": "param_10",
                    "6": "param_10_copy",
                    "7": "param10_copy"
                },
                "local_b8": {
                    "1": "new_buffer",
                    "2": "temporary_buffer",
                    "6": "local_array"
                },
                "local_c8": {
                    "1": "local_variable_3",
                    "2": "buffer",
                    "22": "local_buffer"
                },
                "local_d0": {
                    "1": "stack_pointer",
                    "11": "buffer",
                    "2": "pointer",
                    "8": "buffer_ptr"
                },
                "local_d4": {
                    "1": "local_var",
                    "2": "length",
                    "3": "buffer_length"
                },
                "local_d8": {
                    "1": "buffer_length",
                    "21": "buffer_size",
                    "3": "size"
                },
                "param_1": {
                    "1": "message_code",
                    "2": "error_code_1",
                    "23": "error_code"
                },
                "param_10": {
                    "1": "var10",
                    "12": "param_10"
                },
                "param_11": {
                    "1": "param_10",
                    "12": "param_11"
                },
                "param_12": {
                    "1": "param_12_value",
                    "12": "param12"
                },
                "param_13": {
                    "1": "param_13_value",
                    "12": "param13"
                },
                "param_14": {
                    "1": "arg5",
                    "12": "param14"
                },
                "param_2": {
                    "1": "param_1",
                    "13": "param2",
                    "2": "error_code2",
                    "9": "param_2"
                },
                "param_3": {
                    "1": "param_b",
                    "11": "param_3",
                    "13": "param3",
                    "2": "error_code_3"
                },
                "param_4": {
                    "1": "param_c",
                    "11": "param_4",
                    "13": "param4",
                    "2": "error_code4"
                },
                "param_5": {
                    "1": "param_d",
                    "11": "param_5",
                    "13": "param5",
                    "2": "error_code5"
                },
                "param_6": {
                    "1": "param_e",
                    "11": "param_6",
                    "13": "param6",
                    "2": "error_code_6"
                },
                "param_7": {
                    "1": "param_f",
                    "11": "param_7",
                    "13": "param7",
                    "2": "error_code_7"
                },
                "param_8": {
                    "1": "param_7",
                    "11": "param_8",
                    "13": "param8",
                    "2": "error_code8"
                },
                "param_9": {
                    "1": "param9",
                    "2": "param_9",
                    "20": "error_message",
                    "4": "message"
                },
                "print_error_message_00119e70": {
                    "1": "print_error_message"
                }
            },
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "calling": [
                "FUN_001053b5",
                "FUN_0010543c",
                "FUN_001083de",
                "FUN_00114460",
                "FUN_0010da0b",
                "FUN_00104920",
                "FUN_0010827b",
                "FUN_00114690",
                "FUN_00115b70",
                "FUN_00114190",
                "FUN_00104ad6",
                "FUN_00116b90",
                "FUN_00108d9a",
                "FUN_00114dc7",
                "FUN_0010554f",
                "FUN_00108808"
            ],
            "code": "\nvoid print_error_and_exit_00119dd0(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 constant;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 param_1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    param_1_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_buffer;\n  constant = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_error_message(error_message,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "print_error_and_exit_00119dd0",
            "entrypoint": "0x00119dd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119dd0": "print_error_and_exit_00119dd0",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "param_1_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "constant",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message",
                "print_error_message_00119e70": "print_error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119e70": {
            "additional_data": {
                "10": {
                    "1": "newline"
                },
                "DAT_001275e0": {
                    "1": "program_name"
                },
                "FUN_00119e70": {
                    "1": "print_error",
                    "2": "print_formatted_error_message",
                    "25": "print_error_message",
                    "3": "print_formatted_message"
                },
                "__gnuc_va_list": {
                    "1": "variable_args",
                    "2": "variadic_arguments",
                    "3": "args"
                },
                "__gnuc_va_list param_2": {
                    "1": "variable_arguments"
                },
                "_stderr": {
                    "1": "stderr_file",
                    "18": "standard_error",
                    "2": "stderr"
                },
                "_stdout": {
                    "1": "stdout_file",
                    "17": "standard_output",
                    "2": "stdout"
                },
                "fflush": {
                    "1": "flush_stdout",
                    "2": "flush_standard_output"
                },
                "fprintf": {
                    "1": "print_formatted_message",
                    "2": "print_to_standard_error"
                },
                "param_1": {
                    "1": "error_format",
                    "14": "error_message",
                    "2": "message_format",
                    "4": "format_string",
                    "9": "message"
                },
                "param_2": {
                    "1": "format_args",
                    "11": "arguments",
                    "7": "args"
                },
                "put(10, _stderr)": {
                    "1": "print_new_line"
                },
                "putc": {
                    "1": "put_character_to_stderr",
                    "2": "put_character",
                    "4": "write_character"
                },
                "putc(10,_stderr)": {
                    "1": "print_new_line"
                },
                "putchar": {
                    "1": "put_character"
                },
                "stderr": {
                    "1": "error_stream"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "vfprintf": {
                    "1": "print_to_standard_error_with_args"
                }
            },
            "called": [
                "fprintf",
                "putc",
                "vfprintf",
                "fflush"
            ],
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "code": "\n\n\nvoid print_error_message_00119e70(char *error_message,args arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_001275e0);\n  vfprintf(standard_error,error_message,arguments);\n  print_new_line;\n  return;\n}\n\n",
            "current_name": "print_error_message_00119e70",
            "entrypoint": "0x00119e70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "__gnuc_va_list": "args",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_standard_output",
                "fprintf": "print_to_standard_error",
                "param_1": "error_message",
                "param_2": "arguments",
                "putc": "write_character",
                "putc(10,_stderr)": "print_new_line",
                "stderr": "error_stream",
                "stdout": "standard_output",
                "vfprintf": "print_formatted_message_to_stderr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119ed0": {
            "additional_data": {
                "FUN_00119ed0": {
                    "1": "print_error_with_parameters",
                    "24": "print_error_message",
                    "6": "print_error"
                },
                "in_AL": {
                    "1": "boolean_condition",
                    "11": "flag",
                    "3": "is_error",
                    "4": "input_flag",
                    "5": "condition"
                },
                "local_18": {
                    "1": "local_8",
                    "11": "param8_copy",
                    "2": "param8_local",
                    "3": "param8"
                },
                "local_28": {
                    "1": "local_7",
                    "11": "param7_copy",
                    "2": "local_param7",
                    "3": "param7"
                },
                "local_38": {
                    "1": "variable38",
                    "11": "param6_copy",
                    "2": "param_6_copy",
                    "3": "param6"
                },
                "local_48": {
                    "1": "local_arg5",
                    "11": "param5_copy",
                    "2": "local_param5",
                    "3": "param5"
                },
                "local_58": {
                    "1": "error4_copy",
                    "11": "param4_copy",
                    "2": "param_4_copy",
                    "3": "param4"
                },
                "local_68": {
                    "1": "error_source_copy",
                    "11": "param3_copy",
                    "2": "error_code3_copy",
                    "3": "param3"
                },
                "local_78": {
                    "1": "local_78",
                    "10": "param2_copy",
                    "2": "error_code2_copy",
                    "3": "param2"
                },
                "local_88": {
                    "1": "local_error_code",
                    "14": "error_code_copy",
                    "2": "error_code1_copy"
                },
                "local_90": {
                    "1": "param_5_backup",
                    "13": "param14_copy",
                    "2": "param_14_copy",
                    "3": "local_param14",
                    "4": "param14"
                },
                "local_98": {
                    "1": "param13local",
                    "13": "param13_copy",
                    "2": "param_13_copy",
                    "3": "local_param13",
                    "4": "param13"
                },
                "local_a0": {
                    "1": "local_var4",
                    "13": "param12_copy",
                    "2": "param_12_copy",
                    "3": "local_param12",
                    "4": "param12"
                },
                "local_a8": {
                    "1": "local_variable4",
                    "13": "param11_copy",
                    "2": "param_11_copy",
                    "3": "local_param11",
                    "4": "param11"
                },
                "local_b0": {
                    "1": "param_10",
                    "13": "param10_copy",
                    "2": "param_10_copy",
                    "3": "local_param10",
                    "4": "param10"
                },
                "local_b8": {
                    "1": "temp_buffer",
                    "10": "local_array",
                    "2": "buffer",
                    "3": "error_buffer",
                    "7": "local_buffer"
                },
                "local_c8": {
                    "1": "local_var3",
                    "15": "local_buffer",
                    "2": "local_array2",
                    "5": "buffer"
                },
                "local_d0": {
                    "1": "stack_ptr",
                    "2": "buffer_ptr",
                    "4": "stack_pointer",
                    "8": "buffer"
                },
                "local_d4": {
                    "1": "constant",
                    "2": "local_variable2",
                    "3": "offset",
                    "4": "local_var1"
                },
                "local_d8": {
                    "1": "buffer_length",
                    "12": "buffer_size",
                    "2": "local_variable1",
                    "9": "size"
                },
                "param_1": {
                    "1": "error_type",
                    "2": "error_code1",
                    "24": "error_code"
                },
                "param_10": {
                    "1": "error_param_10",
                    "2": "param_10",
                    "24": "param10"
                },
                "param_11": {
                    "1": "error_param_11",
                    "24": "param11",
                    "3": "param_11"
                },
                "param_12": {
                    "1": "variable12",
                    "24": "param12",
                    "3": "param_12"
                },
                "param_13": {
                    "1": "error_param_13",
                    "24": "param13",
                    "3": "param_13"
                },
                "param_14": {
                    "1": "param_5",
                    "24": "param14",
                    "3": "param_14"
                },
                "param_2": {
                    "1": "message_type",
                    "16": "param2",
                    "2": "error_code2",
                    "4": "error_type"
                },
                "param_3": {
                    "1": "error_param_3",
                    "18": "param3",
                    "2": "error_message",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "error_param4",
                    "2": "error_code4",
                    "20": "param4",
                    "3": "param_4"
                },
                "param_5": {
                    "1": "arg5",
                    "2": "error_code5",
                    "20": "param5",
                    "3": "param_5"
                },
                "param_6": {
                    "1": "error_flag2",
                    "2": "error_code6",
                    "20": "param6",
                    "3": "param_6"
                },
                "param_7": {
                    "1": "error_flag3",
                    "2": "error_code7",
                    "20": "param7",
                    "3": "param_7"
                },
                "param_8": {
                    "1": "error_param8",
                    "2": "error_code8",
                    "20": "param8",
                    "3": "param_8"
                },
                "param_9": {
                    "1": "error_param_9",
                    "2": "message",
                    "21": "error_message",
                    "5": "param9"
                }
            },
            "called": [
                "FUN_00119e70"
            ],
            "calling": [
                "FUN_00104cc1",
                "FUN_00104966",
                "FUN_00105828",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_001163d0",
                "FUN_001086af",
                "FUN_0010e07c",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_0010dac0",
                "FUN_00108375",
                "FUN_0010b800",
                "FUN_001152b6",
                "FUN_0011378f",
                "FUN_00107880",
                "FUN_00104ad6",
                "FUN_00116b90",
                "FUN_0010e2f0",
                "FUN_00113f50",
                "FUN_0010554f",
                "FUN_0010ba08",
                "FUN_0010e6a8"
            ],
            "code": "\nvoid print_error_message_00119ed0(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 local_var1;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_array;\n  local_var1 = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_error_message_00119ed0_00119e70(error_message,&buffer_size);\n  return;\n}\n\n",
            "current_name": "print_error_message_00119ed0",
            "entrypoint": "0x00119ed0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119ed0": "print_error_message_00119ed0",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "local_array",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "local_var1",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119f70": {
            "additional_data": {
                "FUN_00119f70": {
                    "1": "parse_and_print_bfd_header",
                    "2": "process_and_print_file",
                    "3": "process_data",
                    "5": "process_binary"
                },
                "__format": {
                    "1": "printf_format",
                    "2": "message_format",
                    "25": "format_string",
                    "3": "print_format"
                },
                "bfd_close_all_done": {
                    "1": "close_bfd"
                },
                "bfd_get_error": {
                    "1": "get_error_code",
                    "2": "get_error"
                },
                "bfd_openw": {
                    "1": "open_write_function"
                },
                "bfd_printable_arch_mach": {
                    "1": "get_architecture_info",
                    "2": "printable_architecture_machine"
                },
                "bfd_set_format": {
                    "1": "set_output_format",
                    "2": "set_format"
                },
                "cVar2": {
                    "1": "char1",
                    "2": "is_successful",
                    "3": "success_flag",
                    "4": "result",
                    "8": "flag"
                },
                "iVar3": {
                    "1": "arch_mach_counter",
                    "14": "index",
                    "3": "count",
                    "8": "counter"
                },
                "lVar6": {
                    "1": "bfd_handle",
                    "2": "size1",
                    "5": "allocated_size",
                    "6": "allocation_size"
                },
                "lVar8": {
                    "1": "new_buffer",
                    "3": "realloc_ptr",
                    "5": "allocated_memory",
                    "7": "realloc_result"
                },
                "param_1": {
                    "1": "headers",
                    "15": "header_data",
                    "2": "input_params",
                    "3": "input_data",
                    "6": "header"
                },
                "param_2": {
                    "1": "parsed_data",
                    "2": "output_file",
                    "3": "output_params",
                    "4": "file_data",
                    "5": "data"
                },
                "print_error_message_0011a110": {
                    "5": "print_error_message"
                },
                "uVar1": {
                    "1": "format_size",
                    "2": "format",
                    "3": "header_length",
                    "4": "return_value",
                    "5": "status"
                },
                "uVar4": {
                    "1": "auxiliary_var1",
                    "2": "formatted_value1",
                    "9": "formatted_header"
                },
                "uVar5": {
                    "1": "format3",
                    "10": "formatted_data",
                    "2": "data_info",
                    "3": "data_format"
                },
                "uVar7": {
                    "1": "data",
                    "2": "header_value",
                    "3": "printable_arch_mach",
                    "5": "header"
                }
            },
            "called": [
                "bfd_set_format",
                "bfd_printable_arch_mach",
                "bfd_close_all_done",
                "printf",
                "bfd_openw",
                "FUN_0011a110",
                "xrealloc",
                "dcgettext",
                "memset",
                "bfd_get_error",
                "FUN_00114e00",
                "FUN_001053d5"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nundefined4 process_binary_00119f70(undefined8 *header_data,undefined8 *data)\n\n{\n  undefined4 result;\n  char flag;\n  int index;\n  undefined8 formatted_header;\n  undefined8 formatted_data;\n  char *format_string;\n  long buffer_size;\n  undefined8 header;\n  long realloc_result;\n  \n  index = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = index;\n  if ((ulong)data[2] < (ulong)((long)index * 0x60)) {\n    buffer_size = 0x3000;\n    if (0x3f < index) {\n      buffer_size = (long)index * 0xc0;\n    }\n    realloc_result = xrealloc(data[3]);\n    data[3] = realloc_result;\n    memset((void *)(realloc_result + data[2]),0,buffer_size - data[2]);\n    data[2] = buffer_size;\n  }\n  result = *(undefined4 *)((long)header_data + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header_data;\n  formatted_header = FUNC_00114e00(result);\n  formatted_data = FUNC_00114e00(*(undefined4 *)(header_data + 2));\n  header = *header_data;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,header,formatted_data,formatted_header);\n  buffer_size = bfd_openw(*data,*header_data);\n  if (buffer_size == 0) {\n    print_error_message(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    index = 2;\n    flag = bfd_set_format(buffer_size,1);\n    if (flag == '\\0') {\n      index = bfd_get_error();\n      if (index != 5) {\n        print_error_message(*header_data);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        flag = (**(code **)(*(long *)(buffer_size + 8) + 0x2a0))(buffer_size,index,0);\n        if (flag != '\\0') {\n          header = bfd_printable_arch_mach(index,0);\n          printf(\"  %s\\n\",header);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    bfd_close_all_done(buffer_size);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "current_name": "process_binary_00119f70",
            "entrypoint": "0x00119f70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119f70": "process_binary_00119f70",
                "__format": "format_string",
                "bfd_close_all_done": "close_bfd",
                "bfd_get_error": "get_error",
                "bfd_openw": "open_bfd_write_mode",
                "bfd_printable_arch_mach": "get_printable_arch_mach",
                "bfd_set_format": "set_format",
                "cVar2": "flag",
                "iVar3": "index",
                "lVar6": "buffer_size",
                "lVar8": "realloc_result",
                "param_1": "header_data",
                "param_2": "data",
                "print_error_message_0011a110": "print_error_message",
                "uVar1": "result",
                "uVar4": "formatted_header",
                "uVar5": "formatted_data",
                "uVar7": "header"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a0e0": {
            "additional_data": {
                "FUN_0011a0e0": {
                    "1": "create_temporary_directory",
                    "26": "create_temp_directory"
                },
                "__template": {
                    "1": "temp_file_path",
                    "18": "file_path",
                    "7": "temp_directory_path"
                },
                "create_file_path_00114cf0": {
                    "1": "create_file_path"
                },
                "mkdtemp": {
                    "1": "create_temp_directory"
                },
                "pcVar1": {
                    "1": "temp_directory_created",
                    "18": "result",
                    "2": "temp_directory_path",
                    "6": "temp_directory"
                }
            },
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *file_path;\n  char *result;\n  \n  file_path = (char *)create_file_path();\n  result = create_temp_directory_0011a0e0(file_path);\n  if (result == (char *)0x0) {\n    free(file_path);\n  }\n  return result;\n}\n\n",
            "current_name": "create_temp_directory_0011a0e0",
            "entrypoint": "0x0011a0e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "file_path",
                "create_file_path_00114cf0": "create_file_path",
                "mkdtemp": "create_temp_directory",
                "pcVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a110": {
            "additional_data": {
                "FUN_0011a110": {
                    "1": "handle_error",
                    "2": "print_bfd_error_message",
                    "23": "print_error_message",
                    "4": "print_error"
                },
                "_stderr": {
                    "1": "standard_error",
                    "4": "stderr"
                },
                "_stdout": {
                    "1": "standard_output",
                    "4": "stdout"
                },
                "iVar1": {
                    "1": "bfd_error",
                    "15": "error",
                    "5": "error_status",
                    "8": "error_code"
                },
                "in_R10": {
                    "1": "unknown_error",
                    "2": "extra_info",
                    "3": "unknown",
                    "8": "additional_info"
                },
                "param_1": {
                    "1": "file_name",
                    "2": "error_code",
                    "3": "error_type",
                    "4": "error_description",
                    "6": "error_cause",
                    "7": "error_message"
                },
                "uVar2": {
                    "1": "error_message_text",
                    "22": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "bfd_errmsg",
                "FUN_0010871c",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00116030",
                "FUN_001053d5"
            ],
            "code": "\n\n\nvoid print_error_message_0011a110(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(stdout);\n  if (error_message != 0) {\n    fprintf(stderr,\"%s: %s: %s\\n\",DAT_001275e0,error_message,error_message,additional_info);\n    return;\n  }\n  fprintf(stderr,\"%s: %s\\n\",DAT_001275e0,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_0011a110",
            "entrypoint": "0x0011a110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "_stderr": "stderr",
                "_stdout": "stdout",
                "iVar1": "error",
                "in_R10": "additional_info",
                "param_1": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a170": {
            "additional_data": {
                "*param_1": {
                    "1": "pattern"
                },
                "*param_2": {
                    "1": "input_string"
                },
                "FUN_0011a170": {
                    "1": "perform_pattern_matching",
                    "2": "pattern_matching",
                    "22": "match_pattern",
                    "4": "pattern_match"
                },
                "__pattern": {
                    "1": "first_char",
                    "2": "pattern_start",
                    "24": "current_pattern",
                    "3": "pattern"
                },
                "iVar1": {
                    "1": "matching_result",
                    "23": "match_result",
                    "6": "result"
                },
                "param_1": {
                    "2": "pattern_ptr",
                    "28": "pattern"
                },
                "param_2": {
                    "1": "input_ptr",
                    "11": "string",
                    "4": "input_string",
                    "8": "input"
                }
            },
            "called": [
                "fnmatch"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nint match_pattern_0011a170(char **pattern,char **string)\n\n{\n  char *current_pattern;\n  int match_result;\n  \n  current_pattern = *pattern;\n  if (*current_pattern == '!') {\n    match_result = fnmatch(current_pattern + 1,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 0;\n      return match_result;\n    }\n  }\n  else {\n    match_result = fnmatch(current_pattern,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "match_pattern_0011a170",
            "entrypoint": "0x0011a170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a170": "match_pattern_0011a170",
                "__pattern": "current_pattern",
                "iVar1": "match_result",
                "param_1": "pattern",
                "param_2": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a1b0": {
            "additional_data": {
                "FUN_0011a1b0": {
                    "1": "compare_memory_ranges",
                    "2": "compare_records",
                    "4": "compare_and_select",
                    "5": "compare_memory_regions"
                },
                "auVar5": {
                    "1": "result_tuple",
                    "12": "result",
                    "2": "output",
                    "8": "return_value"
                },
                "extraout_var": {
                    "1": "additional_var",
                    "2": "extra_output_var"
                },
                "iVar3": {
                    "18": "comparison_result",
                    "6": "memcmp_result"
                },
                "param_1": {
                    "1": "input1",
                    "2": "segment1",
                    "3": "list1",
                    "4": "block1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "ptr2",
                    "3": "list2",
                    "4": "block2"
                },
                "param_3": {
                    "1": "extra_arg1",
                    "2": "size1",
                    "3": "param1",
                    "5": "param3"
                },
                "param_4": {
                    "1": "length2",
                    "2": "size2",
                    "3": "var2",
                    "5": "param_4"
                },
                "uVar1": {
                    "1": "range1_end",
                    "2": "source_size",
                    "3": "array1_length",
                    "5": "block1_size"
                },
                "uVar2": {
                    "1": "record_2_size",
                    "3": "array2_length",
                    "5": "block2_size"
                },
                "uVar4": {
                    "1": "combined_value",
                    "10": "final_result",
                    "3": "comparison_result",
                    "4": "result",
                    "9": "combined_result"
                }
            },
            "called": [
                "memcmp",
                "FUN_001087da"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nundefined  [16] compare_memory_regions_0011a1b0(ulong *block1,ulong *block2,undefined8 param3,undefined8 param4)\n\n{\n  ulong block1_size;\n  ulong block2_size;\n  int comparison_result;\n  undefined4 extra_output_var;\n  ulong final_result;\n  undefined result [16];\n  \n  final_result = *block1;\n  if (*block2 <= *block1) {\n    final_result = *block2;\n  }\n  comparison_result = memcmp((void *)(block1[3] + 3),(void *)(block2[3] + 3),final_result - 3);\n  final_result = CONCAT44(extra_output_var,comparison_result);\n  if (comparison_result == 0) {\n    block1_size = block1[8];\n    if (block1_size < block2[7]) {\n      final_result = 0xffffffff;\n    }\n    else {\n      block2_size = block2[8];\n      if (block2_size < block1[7]) {\n        final_result = 1;\n      }\n      else {\n        final_result = 0xffffffff;\n        if (block2[7] <= block1[7]) {\n          if (block2_size < block1_size) {\n            final_result = 1;\n          }\n          else {\n            final_result = 0xffffffff;\n            if (block2_size <= block1_size) {\n              if (block1[2] == 0x100) {\n                final_result = (ulong)-(uint)(block2[2] != 0x100);\n              }\n              else {\n                final_result = (ulong)(block2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = param4;\n  result._0_8_ = final_result;\n  return result;\n}\n\n",
            "current_name": "compare_memory_regions_0011a1b0",
            "entrypoint": "0x0011a1b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a1b0": "compare_memory_regions_0011a1b0",
                "auVar5": "result",
                "extraout_var": "extra_output_var",
                "iVar3": "comparison_result",
                "param_1": "block1",
                "param_2": "block2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "block1_size",
                "uVar2": "block2_size",
                "uVar4": "final_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a250": {
            "additional_data": {
                "*(char *)(param_1[3] + 3)": {
                    "1": "record1_content_char"
                },
                "*(char *)(param_2[3] + 3)": {
                    "1": "record2_checksum_char"
                },
                "*(char *)(record1[3] + 3)": {
                    "1": "record1_field_3_char"
                },
                "*(char *)(record2[3] + 3)": {
                    "1": "record2_field3_char"
                },
                "*(char *)(record_1[3] + 3)": {
                    "1": "record_1_char_val"
                },
                "*(char *)(record_2[3] + 3)": {
                    "1": "record_2_char_val"
                },
                "*list_A": {
                    "1": "list_a_size"
                },
                "*list_B": {
                    "1": "list_b_size"
                },
                "*param_1": {
                    "1": "record1_data_size",
                    "2": "record1_type"
                },
                "*param_1[3]": {
                    "1": "record1_data_char"
                },
                "*param_2": {
                    "1": "record2_length",
                    "2": "record2_type"
                },
                "*param_2[3]": {
                    "1": "record2_data_char"
                },
                "-1": {
                    "1": "less_than"
                },
                "0": {
                    "1": "equal"
                },
                "1": {
                    "1": "greater_than"
                },
                "3": {
                    "1": "third_element"
                },
                "4": {
                    "1": "record_size",
                    "2": "minimum_record_size"
                },
                "4 < *record1": {
                    "1": "has_record1_field3"
                },
                "4 < *record2": {
                    "1": "has_record2_field3"
                },
                "4 < *record_1": {
                    "1": "is_record_1_valid"
                },
                "4 < *record_2": {
                    "1": "is_record_2_valid"
                },
                "7": {
                    "1": "record_1_size"
                },
                "8": {
                    "1": "record_1_property"
                },
                "FUN_0011a250": {
                    "1": "compare_parameters",
                    "2": "compare_and_order",
                    "26": "compare_records"
                },
                "list_A[2]": {
                    "1": "list_a_element_3"
                },
                "list_A[3]": {
                    "1": "list_a_element_3_3_offset"
                },
                "list_A[7]": {
                    "1": "list_a_element_7"
                },
                "list_A[8]": {
                    "1": "list_a_element_8"
                },
                "list_B[2]": {
                    "1": "list_b_element_3"
                },
                "list_B[3]": {
                    "1": "list_b_element_3_3_offset"
                },
                "list_B[7]": {
                    "1": "list_b_element_7"
                },
                "list_B[8]": {
                    "1": "list_b_element_8"
                },
                "param_1": {
                    "1": "array_1",
                    "18": "record1",
                    "8": "record_1"
                },
                "param_1[2]": {
                    "1": "record1_time_value",
                    "2": "record_1_field_2"
                },
                "param_1[3]": {
                    "1": "record1_ptr",
                    "2": "record1_data_ptr"
                },
                "param_1[7]": {
                    "1": "block1_size",
                    "2": "record_1_field_7",
                    "3": "record1_size"
                },
                "param_1[8]": {
                    "1": "record1_length",
                    "2": "record_1_field_8"
                },
                "param_2": {
                    "1": "data_set_2",
                    "18": "record2",
                    "8": "record_2"
                },
                "param_2[2]": {
                    "1": "record2_field2",
                    "2": "record_2_field_2"
                },
                "param_2[3]": {
                    "1": "record2_fourth_value",
                    "2": "record2_data"
                },
                "param_2[7]": {
                    "1": "record2_field7",
                    "2": "record_2_size",
                    "4": "record2_size"
                },
                "param_2[8]": {
                    "1": "record2_length",
                    "2": "record_2_field_8"
                },
                "record1[2]": {
                    "1": "record1_size",
                    "2": "record1_field2"
                },
                "record1[3]": {
                    "1": "record1_field_3"
                },
                "record1[7]": {
                    "1": "record1_quantity"
                },
                "record1[8]": {
                    "1": "record1_field8"
                },
                "record2[2]": {
                    "1": "record2_field2"
                },
                "record2[3]": {
                    "1": "record2_field_3"
                },
                "record2[7]": {
                    "1": "record2_field7"
                },
                "record2[8]": {
                    "1": "record2_field_8"
                },
                "record_1[2]": {
                    "1": "record_1_flag"
                },
                "record_1[7]": {
                    "1": "record_1_size"
                },
                "record_1[8]": {
                    "1": "record_1_value"
                },
                "record_2[2]": {
                    "1": "record_2_flag"
                },
                "return": {
                    "1": "result",
                    "2": "comparison_result"
                },
                "uVar1": {
                    "1": "record_1_version",
                    "2": "record1_value",
                    "3": "record1_flag",
                    "4": "record1_value2"
                }
            },
            "called": [
                "FUN_001087fd"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nint compare_records_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_value2;\n  \n  record1_value2 = record_1_field_2;\n  if (record1_value2 == record_2_field_2) {\n    if (record2_size <= record1_size) {\n      if (record1_size <= record2_size) {\n        if (record_2_field_8 < record_1_field_8) {\n          comparison_result -1;\n        }\n        if (record_2_field_8 <= record_1_field_8) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1_data_ptr + 3) != *(char *)(record2_data_ptr + 3)) {\n              comparison_result (int)*(char *)(record1_data_ptr + 3) - (int)*(char *)(record2_data_ptr + 3);\n            }\n          }\n          comparison_result 0;\n        }\n      }\n      comparison_result 1;\n    }\n  }\n  else if ((record1_value2 == 0) || ((record1_value2 != 0x100 && (record_2_field_2 != 0)))) {\n    comparison_result 1;\n  }\n  comparison_result -1;\n}\n\n",
            "current_name": "compare_records_0011a250",
            "entrypoint": "0x0011a250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_1[2]": "record_1_field_2",
                "param_1[3]": "record1_data_ptr",
                "param_1[7]": "record1_size",
                "param_1[8]": "record_1_field_8",
                "param_2": "record2",
                "param_2[2]": "record_2_field_2",
                "param_2[3]": "record2_data_ptr",
                "param_2[7]": "record2_size",
                "param_2[8]": "record_2_field_8",
                "return": "comparison_result",
                "uVar1": "record1_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a2e0": {
            "additional_data": {
                "FUN_0011a2e0": {
                    "1": "copy_section_data",
                    "11": "extract_section_info",
                    "2": "extract_section_from_binary",
                    "5": "extract_section",
                    "6": "extract_section_data"
                },
                "bfd_get_section_by_name": {
                    "1": "find_section_by_name"
                },
                "lVar3": {
                    "1": "section_header",
                    "2": "extracted_data",
                    "3": "section_info_ptr",
                    "4": "section_ptr",
                    "5": "section_data",
                    "9": "section_info"
                },
                "lVar4": {
                    "1": "section_entry",
                    "10": "section_ptr",
                    "2": "section_pointer",
                    "3": "section_name",
                    "4": "section_name_ptr",
                    "5": "section_address"
                },
                "param_1": {
                    "1": "section_data_pointer",
                    "2": "input_data",
                    "3": "binary_header",
                    "4": "section_info"
                },
                "param_2": {
                    "1": "section_header",
                    "2": "binary_data",
                    "5": "binary_file",
                    "6": "binary_ptr",
                    "7": "binary"
                },
                "print_error_and_exit_00119dd0": {
                    "1": "print_section_error_and_exit",
                    "2": "print_error_and_exit"
                },
                "uVar1": {
                    "1": "section_data_offset",
                    "2": "section_data",
                    "5": "section_name"
                },
                "uVar2": {
                    "1": "section_name",
                    "11": "error_message"
                }
            },
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nlong extract_section_info_0011a2e0(long section_info,long binary)\n\n{\n  undefined8 section_name;\n  undefined8 error_message;\n  long section_info;\n  long section_ptr;\n  \n  section_info = (**(code **)(*(long *)(binary + 8) + 0x208))(binary);\n  section_ptr = *(long *)(section_info + 0x20);\n  *(undefined8 *)(section_info + 8) = *(undefined8 *)(section_info + 8);\n  *(undefined8 *)(section_info + 0x10) = *(undefined8 *)(section_info + 0x10);\n  *(undefined4 *)(section_info + 0x18) = *(undefined4 *)(section_info + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = bfd_get_section_by_name(binary);\n    if (section_ptr == 0) {\n      section_name = *(undefined8 *)(section_info + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_error_and_exit(error_message,section_name);\n    }\n  }\n  *(long *)(section_info + 0x20) = section_ptr;\n  return section_info;\n}\n\n",
            "current_name": "extract_section_info_0011a2e0",
            "entrypoint": "0x0011a2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "bfd_get_section_by_name": "find_section_by_name",
                "lVar3": "section_info",
                "lVar4": "section_ptr",
                "param_1": "section_info",
                "param_2": "binary",
                "print_error_and_exit_00119dd0": "print_error_and_exit",
                "uVar1": "section_name",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a350": {
            "additional_data": {
                "FUN_0011a350": {
                    "18": "set_file_time",
                    "3": "set_file_modification_time",
                    "5": "set_file_timestamps"
                },
                "iVar1": {
                    "1": "return_code",
                    "25": "result"
                },
                "local_28": {
                    "1": "atime_tv_sec",
                    "2": "creation_time",
                    "4": "modification_time"
                },
                "local_38": {
                    "1": "time_spec1",
                    "13": "access_time"
                },
                "param_1": {
                    "1": "file_name",
                    "2": "filename",
                    "28": "file_path"
                },
                "param_2": {
                    "1": "file_data",
                    "2": "file_metadata",
                    "21": "file_info",
                    "3": "file_info_ptr"
                },
                "pcVar3": {
                    "1": "error_description",
                    "14": "error_message",
                    "2": "error_str",
                    "8": "error_string"
                },
                "piVar2": {
                    "1": "errno_location_ptr",
                    "2": "error_num",
                    "3": "error",
                    "5": "errno_ptr"
                },
                "print_error_message_00119ed0": {
                    "1": "print_error_message"
                },
                "uStack_2c": {
                    "1": "time_spec4",
                    "5": "creation_time"
                },
                "uStack_30": {
                    "1": "file_time3",
                    "8": "change_time"
                },
                "uStack_34": {
                    "1": "old_time2",
                    "7": "modification_time"
                },
                "uVar4": {
                    "1": "localized_string",
                    "2": "translated_string",
                    "3": "localized_error_message",
                    "4": "error_msg",
                    "5": "translated_message"
                }
            },
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "code": "\nvoid set_file_time_0011a350(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 translated_message;\n  undefined4 access_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 creation_time;\n  undefined4 modification_time;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  modification_time = *(undefined4 *)(file_info + 0x58);\n  uStack_24 = *(undefined4 *)(file_info + 0x5c);\n  uStack_20 = *(undefined4 *)(file_info + 0x60);\n  uStack_1c = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  modification_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  creation_time = *(undefined4 *)(file_info + 0x54);\n  result = utimensat(-100,file_path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_message = strerror(*errno_ptr);\n    translated_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message(translated_message,file_path,error_message);\n  }\n  return;\n}\n\n",
            "current_name": "set_file_time_0011a350",
            "entrypoint": "0x0011a350",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "iVar1": "result",
                "local_28": "modification_time",
                "local_38": "access_time",
                "param_1": "file_path",
                "param_2": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "print_error_message_00119ed0": "print_error_message",
                "uStack_2c": "creation_time",
                "uStack_30": "change_time",
                "uStack_34": "modification_time",
                "uVar4": "translated_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a390": {
            "additional_data": {
                "(*(code *)plVar4[lVar1 + 1])": {
                    "1": "execute_previous_function"
                },
                "(*(code *)plVar4[lVar1 + 2])": {
                    "1": "execute_function"
                },
                "(*(code *)plVar4[lVar1])()": {
                    "1": "execute_function(function_pointer_list[current_index])"
                },
                "(*(code *)plVar4[lVar2 + 2])": {
                    "1": "execute_previous2_functions"
                },
                "(*(code *)plVar4[lVar2])": {
                    "1": "execute_previous3_functions"
                },
                "(*(code *)plVar4[lVar3 + -2])": {
                    "1": "execute_temp_previous3_functions"
                },
                "(*(code *)plVar4[lVar3 + -3])": {
                    "1": "execute_temp_previous4_functions"
                },
                "(*(code *)plVar4[lVar3 + -4])": {
                    "1": "execute_temp_previous5_functions"
                },
                "(*(code *)plVar4[lVar3 + -5])": {
                    "1": "execute_temp_previous6_functions"
                },
                "(*(code *)plVar4[lVar3 + 1])": {
                    "1": "execute_temp_previous_function"
                },
                "(*(code *)plVar4[lVar3 + 2])": {
                    "1": "execute_temp_function"
                },
                "(*(code *)plVar4[lVar3])": {
                    "1": "execute_temp_previous2_functions"
                },
                "(*(code *)plVar4[lVar3])()": {
                    "1": "execute_function(function_pointer_list[temp_index])"
                },
                "(*plVar4)": {
                    "1": "next_function_chain"
                },
                "*plVar4": {
                    "1": "function_pointer"
                },
                "FUN_0011a390": {
                    "1": "execute_functions_in_linked_list",
                    "2": "execute_functions",
                    "7": "execute_function_chain"
                },
                "PTR_DAT_001264c0": {
                    "1": "function_chain_start"
                },
                "lVar1": {
                    "1": "counter",
                    "10": "index",
                    "14": "current_index",
                    "2": "current_function_index"
                },
                "lVar2": {
                    "1": "index2",
                    "14": "previous_index",
                    "2": "previous_function_index",
                    "8": "prev_index"
                },
                "lVar3": {
                    "1": "index3",
                    "2": "loop_index",
                    "21": "temp_index"
                },
                "plVar4": {
                    "1": "function_list_ptr",
                    "10": "function_list",
                    "2": "callback_list",
                    "4": "function_pointers",
                    "6": "function_chain"
                },
                "uVar5": {
                    "1": "nested_function_count",
                    "2": "counter",
                    "3": "function_index",
                    "4": "index"
                },
                "uVar5 & 7": {
                    "1": "remainder"
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid execute_function_chain_0011a390(void)\n\n{\n  long current_index;\n  long previous_index;\n  long temp_index;\n  long *function_list;\n  uint index;\n  \n  function_list = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      index = *(int *)(function_list + 1) - 1;\n      if (-1 < (int)index) {\n        current_index = (long)(int)index;\n        index = index & 7;\n        (*(code *)function_list[current_index + 2])();\n        previous_index = current_index + -1;\n        if (-1 < (int)previous_index) {\n          temp_index = previous_index;\n          if (index != 0) {\n            if (index != 1) {\n              if (index != 2) {\n                if (index != 3) {\n                  if (index != 4) {\n                    if (index != 5) {\n                      if (index != 6) {\n                        (*(code *)function_list[current_index + 1])();\n                        previous_index = current_index + -2;\n                      }\n                      (*(code *)function_list[previous_index + 2])();\n                      previous_index = previous_index + -1;\n                    }\n                    (*(code *)function_list[previous_index + 2])();\n                    previous_index = previous_index + -1;\n                  }\n                  (*(code *)function_list[previous_index + 2])();\n                  previous_index = previous_index + -1;\n                }\n                (*(code *)function_list[previous_index + 2])();\n                previous_index = previous_index + -1;\n              }\n              (*(code *)function_list[previous_index + 2])();\n              previous_index = previous_index + -1;\n            }\n            (*(code *)function_list[previous_index + 2])();\n            temp_index = previous_index + -1;\n            if ((int)(previous_index + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)function_list[temp_index + 2])();\n            current_index = temp_index + -1;\n            (*(code *)function_list[temp_index + 1])();\n            (*(code *)function_list[temp_index])();\n            (*(code *)function_list[current_index])();\n            (*(code *)function_list[temp_index + -2])();\n            (*(code *)function_list[temp_index + -3])();\n            (*(code *)function_list[temp_index + -4])();\n            (*(code *)function_list[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)current_index + -7);\n        }\n      }\nLAB_0011a466:\n      function_list = (long *)*function_list;\n    } while (function_list != (long *)0x0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_chain_0011a390",
            "entrypoint": "0x0011a390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a390": "execute_function_chain_0011a390",
                "lVar1": "current_index",
                "lVar2": "previous_index",
                "lVar3": "temp_index",
                "plVar4": "function_list",
                "uVar5": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a480": {
            "additional_data": {
                "FUN_0011a480": {
                    "1": "reverse_string",
                    "2": "copy_string_and_null_terminate",
                    "22": "copy_string",
                    "4": "copy_string_with_null_terminator"
                },
                "__dest": {
                    "1": "reversed_string",
                    "10": "copied_string",
                    "11": "destination_string",
                    "7": "new_string"
                },
                "__n": {
                    "1": "input_length",
                    "23": "string_length",
                    "6": "length"
                },
                "param_1": {
                    "1": "source",
                    "14": "input_string"
                },
                "param_2": {
                    "1": "length",
                    "25": "max_length",
                    "4": "max_size"
                }
            },
            "called": [
                "memcpy",
                "xmalloc",
                "strnlen"
            ],
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "code": "\nvoid copy_string_0011a480(char *input_string,size_t max_length)\n\n{\n  size_t string_length;\n  void *destination_string;\n  \n  string_length = strnlen(input_string,max_length);\n  destination_string = (void *)xmalloc(string_length + 1);\n  *(undefined *)((long)destination_string + string_length) = 0;\n  memcpy(destination_string,input_string,string_length);\n  return;\n}\n\n",
            "current_name": "copy_string_0011a480",
            "entrypoint": "0x0011a480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "__dest": "destination_string",
                "__n": "string_length",
                "param_1": "input_string",
                "param_2": "max_length"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x0011a4b4",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00104000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "__cxa_finalize",
                "FUN_00116ad0"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00116b40",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00116b00"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00116b80",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__assert_fail": {
            "called": [
                "__assert_fail"
            ],
            "calling": [
                "FUN_0010c7a0",
                "FUN_00112c1f",
                "FUN_0010bbd3",
                "FUN_001125fa"
            ],
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "current_name": "__assert_fail",
            "entrypoint": "0x00104300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00104910",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00104966",
                "FUN_0010543c",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_00109a32",
                "FUN_00114690",
                "FUN_00107880",
                "FUN_00115a90",
                "FUN_00116b90"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x001040b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "abort": {
            "called": [
                "abort"
            ],
            "calling": [
                "FUN_0010a94e",
                "FUN_00112c1f",
                "FUN_001135a5",
                "FUN_0010e9a0",
                "FUN_001199d0",
                "FUN_0010d21c",
                "FUN_0010b0fa",
                "FUN_0010aa53",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010922b",
                "FUN_0010ebb0"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "abort",
            "entrypoint": "0x001040a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "access": {
            "called": [
                "access"
            ],
            "calling": [
                "FUN_0011283f"
            ],
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "current_name": "access",
            "entrypoint": "0x00104740",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_alloc": {
            "called": [
                "bfd_alloc"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "current_name": "bfd_alloc",
            "entrypoint": "0x00104250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_alt_mach_code": {
            "called": [
                "bfd_alt_mach_code"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "current_name": "bfd_alt_mach_code",
            "entrypoint": "0x00104590",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bread": {
            "called": [
                "bfd_bread"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "current_name": "bfd_bread",
            "entrypoint": "0x00104870",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bwrite": {
            "called": [
                "bfd_bwrite"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "current_name": "bfd_bwrite",
            "entrypoint": "0x00104530",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_canonicalize_reloc": {
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116030",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "current_name": "bfd_canonicalize_reloc",
            "entrypoint": "0x001047b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00104810",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "called": [
                "bfd_check_format_matches"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "bfd_check_format_matches",
            "entrypoint": "0x00104780",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00104908",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close_all_done": {
            "called": [
                "bfd_close_all_done"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "current_name": "bfd_close_all_done",
            "entrypoint": "0x00104900",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_coff_get_auxent": {
            "called": [
                "bfd_coff_get_auxent"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c"
            ],
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "current_name": "bfd_coff_get_auxent",
            "entrypoint": "0x001045b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_coff_get_syment": {
            "called": [
                "bfd_coff_get_syment"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010554f",
                "FUN_0010e07c"
            ],
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "current_name": "bfd_coff_get_syment",
            "entrypoint": "0x001046a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_convert_section_contents": {
            "called": [
                "bfd_convert_section_contents"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_convert_section_contents",
            "entrypoint": "0x001042f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_convert_section_setup": {
            "called": [
                "bfd_convert_section_setup"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "current_name": "bfd_convert_section_setup",
            "entrypoint": "0x001040f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_create_gnu_debuglink_section": {
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "bfd_create_gnu_debuglink_section",
            "entrypoint": "0x00104180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_decode_symclass": {
            "called": [
                "bfd_decode_symclass"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "current_name": "bfd_decode_symclass",
            "entrypoint": "0x00104490",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_00116b90",
                "FUN_001126c0",
                "FUN_0010e2f0",
                "FUN_0011a110",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_0010e07c"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001047a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fdopenw": {
            "called": [
                "bfd_fdopenw"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "current_name": "bfd_fdopenw",
            "entrypoint": "0x001048d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "bfd_fill_in_gnu_debuglink_section",
            "entrypoint": "0x00104600",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_arch": {
            "called": [
                "bfd_get_arch"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00105828",
                "FUN_00104ea2",
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "current_name": "bfd_get_arch",
            "entrypoint": "0x00104570",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_00116b90",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010e2f0",
                "FUN_0011a110",
                "FUN_0010554f",
                "FUN_0010e6a8"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00104370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_full_section_contents": {
            "called": [
                "bfd_get_full_section_contents"
            ],
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_get_full_section_contents",
            "entrypoint": "0x00104440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_mach": {
            "called": [
                "bfd_get_mach"
            ],
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "current_name": "bfd_get_mach",
            "entrypoint": "0x00104650",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_reloc_upper_bound": {
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116030",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "current_name": "bfd_get_reloc_upper_bound",
            "entrypoint": "0x00104840",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_section_by_name": {
            "called": [
                "bfd_get_section_by_name"
            ],
            "calling": [
                "FUN_0011a2e0",
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "current_name": "bfd_get_section_by_name",
            "entrypoint": "0x00104400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_section_contents": {
            "called": [
                "bfd_get_section_contents"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_get_section_contents",
            "entrypoint": "0x00104260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_stab_name": {
            "called": [
                "bfd_get_stab_name"
            ],
            "calling": [
                "FUN_00108b3e"
            ],
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "current_name": "bfd_get_stab_name",
            "entrypoint": "0x00104110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_allocate": {
            "called": [
                "bfd_hash_allocate"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "current_name": "bfd_hash_allocate",
            "entrypoint": "0x00104450",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_lookup": {
            "called": [
                "bfd_hash_lookup"
            ],
            "calling": [
                "FUN_0010bba1",
                "FUN_0010e2f0",
                "FUN_0010e6a8"
            ],
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "current_name": "bfd_hash_lookup",
            "entrypoint": "0x00104560",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_newfunc": {
            "called": [
                "bfd_hash_newfunc"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "current_name": "bfd_hash_newfunc",
            "entrypoint": "0x00104200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_table_init": {
            "called": [
                "bfd_hash_table_init"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "current_name": "bfd_hash_table_init",
            "entrypoint": "0x00104830",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x00104430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_is_local_label": {
            "called": [
                "bfd_is_local_label"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "current_name": "bfd_is_local_label",
            "entrypoint": "0x001048a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_iterate_over_targets": {
            "called": [
                "bfd_iterate_over_targets"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "current_name": "bfd_iterate_over_targets",
            "entrypoint": "0x00104620",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_section_anyway_with_flags": {
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "current_name": "bfd_make_section_anyway_with_flags",
            "entrypoint": "0x00104190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_section_with_flags": {
            "called": [
                "bfd_make_section_with_flags"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "current_name": "bfd_make_section_with_flags",
            "entrypoint": "0x00104120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_malloc_and_get_section": {
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "bfd_malloc_and_get_section",
            "entrypoint": "0x001041e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_map_over_sections": {
            "called": [
                "bfd_map_over_sections"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "bfd_map_over_sections",
            "entrypoint": "0x00104850",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_octets_per_byte": {
            "called": [
                "bfd_octets_per_byte"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "current_name": "bfd_octets_per_byte",
            "entrypoint": "0x00104520",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x001041f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "bfd_openr_next_archived_file",
            "entrypoint": "0x00104820",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openw": {
            "called": [
                "bfd_openw"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "current_name": "bfd_openw",
            "entrypoint": "0x00104690",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_printable_arch_mach": {
            "called": [
                "bfd_printable_arch_mach"
            ],
            "calling": [
                "FUN_00105828",
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00104943"
            ],
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "current_name": "bfd_printable_arch_mach",
            "entrypoint": "0x001045a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_scan_arch": {
            "called": [
                "bfd_scan_arch"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "current_name": "bfd_scan_arch",
            "entrypoint": "0x00104710",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_scan_vma": {
            "called": [
                "bfd_scan_vma"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "current_name": "bfd_scan_vma",
            "entrypoint": "0x00104070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_seek": {
            "called": [
                "bfd_seek"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "current_name": "bfd_seek",
            "entrypoint": "0x001048e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x00104150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error": {
            "called": [
                "bfd_set_error"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_0010554f",
                "FUN_001086af"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "bfd_set_error",
            "entrypoint": "0x001043a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x001046e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_file_flags": {
            "called": [
                "bfd_set_file_flags"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "current_name": "bfd_set_file_flags",
            "entrypoint": "0x00104630",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_format": {
            "called": [
                "bfd_set_format"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00107880",
                "FUN_00119f70",
                "FUN_00114e50"
            ],
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "current_name": "bfd_set_format",
            "entrypoint": "0x00104500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_section_contents": {
            "called": [
                "bfd_set_section_contents"
            ],
            "calling": [
                "FUN_00116110",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_set_section_contents",
            "entrypoint": "0x00104330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_section_size": {
            "called": [
                "bfd_set_section_size"
            ],
            "calling": [
                "FUN_00116110",
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "current_name": "bfd_set_section_size",
            "entrypoint": "0x001045f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_start_address": {
            "called": [
                "bfd_set_start_address"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "current_name": "bfd_set_start_address",
            "entrypoint": "0x00104860",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_symtab": {
            "called": [
                "bfd_set_symtab"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "current_name": "bfd_set_symtab",
            "entrypoint": "0x00104460",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_stat": {
            "called": [
                "bfd_stat"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "current_name": "bfd_stat",
            "entrypoint": "0x001041b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_00104a35"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00104350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x00104220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "chmod": {
            "called": [
                "chmod"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "chmod",
            "entrypoint": "0x001046d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "close": {
            "called": [
                "close"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_001199d0"
            ],
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "close",
            "entrypoint": "0x001043c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "concat": {
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010d21c",
                "FUN_00104ea2",
                "FUN_0010ee3f",
                "FUN_0010554f"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "concat",
            "entrypoint": "0x00104320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle": {
            "called": [
                "cplus_demangle"
            ],
            "calling": [
                "FUN_0010d21c"
            ],
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "current_name": "cplus_demangle",
            "entrypoint": "0x001046b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_init_info": {
            "called": [
                "cplus_demangle_init_info"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_init_info",
            "entrypoint": "0x00104550",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_mangled_name": {
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_mangled_name",
            "entrypoint": "0x00104700",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_print": {
            "called": [
                "cplus_demangle_print"
            ],
            "calling": [
                "FUN_0010b0fa"
            ],
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_print",
            "entrypoint": "0x00104050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_0010543c",
                "FUN_001083de",
                "FUN_00114460",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_00104920",
                "FUN_0010bf86",
                "FUN_00115b70",
                "FUN_0010808f",
                "FUN_00104ad6",
                "FUN_0010bc80",
                "FUN_00108d9a",
                "FUN_0010c892",
                "FUN_00115dc0",
                "FUN_00104cc1",
                "FUN_00112996",
                "FUN_00105828",
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_00108fb9",
                "FUN_00108a2a",
                "FUN_001163d0",
                "FUN_00109a32",
                "FUN_0010827b",
                "FUN_0010911f",
                "FUN_0010dac0",
                "FUN_0010be1a",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00108b3e",
                "FUN_0010871c",
                "FUN_0010ee3f",
                "FUN_0010e2f0",
                "FUN_00113f50",
                "FUN_00108916",
                "FUN_00108fe8",
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_001053b5",
                "FUN_00112c1f",
                "FUN_00104966",
                "FUN_0010be88",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00108072",
                "FUN_0010b6ea",
                "FUN_00104a35",
                "FUN_00116490",
                "FUN_0010914e",
                "FUN_0010b800",
                "FUN_001152b6",
                "FUN_00114190",
                "FUN_0010551d",
                "FUN_0010bd62",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_00109022",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00108808",
                "FUN_00115530",
                "FUN_00119970",
                "FUN_00108179",
                "FUN_0010bf20",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "FUN_00107976",
                "FUN_00114690",
                "FUN_00108375",
                "FUN_00112b6e",
                "FUN_0010c05d",
                "FUN_00114dc7",
                "FUN_0010b0fa",
                "FUN_00119f70",
                "FUN_0010c218",
                "FUN_0010ba08",
                "FUN_0010c2d2",
                "FUN_00114e00"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x00104240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dup": {
            "called": [
                "dup"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "dup",
            "entrypoint": "0x001042d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00116b90"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00116aa0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_00119970",
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x001047f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fchmod": {
            "called": [
                "fchmod"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "fchmod",
            "entrypoint": "0x001046c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x00104210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "feof": {
            "called": [
                "feof"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "feof",
            "entrypoint": "0x001044d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00104130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_001126c0",
                "FUN_0010871c"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001045e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "filename_cmp": {
            "called": [
                "filename_cmp"
            ],
            "calling": [
                "FUN_00108f08",
                "FUN_0010edb4",
                "FUN_00116b90"
            ],
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "current_name": "filename_cmp",
            "entrypoint": "0x001041a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fnmatch": {
            "called": [
                "fnmatch"
            ],
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "fnmatch",
            "entrypoint": "0x00104340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114d60"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00104750",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0010be88",
                "FUN_001199d0",
                "FUN_0010b6ea",
                "FUN_00104a35",
                "FUN_0010bf86",
                "FUN_0010914e",
                "FUN_0010bd62",
                "FUN_0010bc80",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_00109022",
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_00112996",
                "FUN_00119e70",
                "FUN_0010bf20",
                "FUN_00108a2a",
                "FUN_00108fb9",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_00112b6e",
                "FUN_0010c05d",
                "FUN_00116b90",
                "FUN_00108b3e",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010871c",
                "FUN_0010c218",
                "FUN_00108916",
                "FUN_0010c2d2",
                "FUN_00108fe8"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x001044b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_00108b3e",
                "FUN_00104a35"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x001043f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x00104310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00104160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_00108466",
                "FUN_0010c95e",
                "FUN_0010d21c",
                "FUN_001125fa",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_00116852",
                "FUN_0010d559",
                "FUN_00109b2f",
                "FUN_00104ea2",
                "FUN_001163d0",
                "FUN_00108863",
                "FUN_0010a77a",
                "FUN_0010dac0",
                "FUN_0010e5db",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00116030",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_0010a424",
                "FUN_0010c1c6",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_0010b6ea",
                "FUN_001081e9",
                "FUN_0010a83e",
                "FUN_0010ebb0",
                "FUN_00104a35",
                "FUN_0010ae0e",
                "FUN_0010e7c2",
                "FUN_0010551d",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_0010a2b9",
                "FUN_0010a0e9",
                "FUN_0010e9a0",
                "FUN_0010afd5",
                "FUN_00114b84",
                "FUN_0010e8a9",
                "FUN_0010e07c",
                "FUN_0010a94e",
                "FUN_00114690",
                "FUN_00116110",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010aa53",
                "FUN_0010eafe",
                "FUN_0010a377",
                "FUN_0010ba08",
                "FUN_001088ae",
                "FUN_0010e453"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x001048f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x00104660",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x001044c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_001126c0",
                "FUN_00108b3e"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00104800",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x001048b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getenv": {
            "called": [
                "getenv"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "current_name": "getenv",
            "entrypoint": "0x00104040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00104280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_create_alloc": {
            "called": [
                "htab_create_alloc"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "current_name": "htab_create_alloc",
            "entrypoint": "0x00104720",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_delete": {
            "called": [
                "htab_delete"
            ],
            "calling": [
                "FUN_001054af"
            ],
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "current_name": "htab_delete",
            "entrypoint": "0x00104090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_elements": {
            "called": [
                "htab_elements"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "current_name": "htab_elements",
            "entrypoint": "0x001044e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_find": {
            "called": [
                "htab_find"
            ],
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "current_name": "htab_find",
            "entrypoint": "0x001047d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_find_slot": {
            "called": [
                "htab_find_slot"
            ],
            "calling": [
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_00108d9a"
            ],
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "current_name": "htab_find_slot",
            "entrypoint": "0x001044a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_hash_string": {
            "called": [
                "htab_hash_string"
            ],
            "calling": [
                "FUN_00108800"
            ],
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "current_name": "htab_hash_string",
            "entrypoint": "0x001048f8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_traverse": {
            "called": [
                "htab_traverse"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "current_name": "htab_traverse",
            "entrypoint": "0x00104580",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "lseek": {
            "called": [
                "lseek"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "current_name": "lseek",
            "entrypoint": "0x001042e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "malloc": {
            "called": [
                "malloc"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "malloc",
            "entrypoint": "0x001045c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcmp": {
            "called": [
                "memcmp"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "memcmp",
            "entrypoint": "0x00104420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00104540",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x001046f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memset": {
            "called": [
                "memset"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memset",
            "entrypoint": "0x00104360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkdtemp": {
            "called": [
                "mkdtemp"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "current_name": "mkdtemp",
            "entrypoint": "0x00104670",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemp": {
            "called": [
                "mkstemp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemp",
            "entrypoint": "0x00104640",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemps": {
            "called": [
                "mkstemps"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemps",
            "entrypoint": "0x00104030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "open": {
            "called": [
                "open"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "current_name": "open",
            "entrypoint": "0x00104730",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00119970",
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00104943",
                "FUN_00107976"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x001042a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x00104480",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "qsort": {
            "called": [
                "qsort"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_0010554f",
                "FUN_001086af"
            ],
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "current_name": "qsort",
            "entrypoint": "0x00104140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "read": {
            "called": [
                "read"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "current_name": "read",
            "entrypoint": "0x00104410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "rmdir": {
            "called": [
                "rmdir"
            ],
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "current_name": "rmdir",
            "entrypoint": "0x00104230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00104680",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sprintf": {
            "called": [
                "sprintf"
            ],
            "calling": [
                "FUN_001125fa",
                "FUN_00109dfe",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010ae0e",
                "FUN_0010b948",
                "FUN_0010e7c2",
                "FUN_0010b800",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_0010e6a8",
                "FUN_0010a2b9",
                "FUN_0010a0e9",
                "FUN_0010ab4d",
                "FUN_0010e9a0",
                "FUN_00109cf4",
                "FUN_0010e8a9",
                "FUN_0010a69a",
                "FUN_00109e76",
                "FUN_0010a77a",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010ee3f",
                "FUN_0010eafe",
                "FUN_0010a377",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_00109d97",
                "FUN_0010a424",
                "FUN_0010e453"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "sprintf",
            "entrypoint": "0x001047e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_0011283f",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00113f50"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x001044f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcasecmp": {
            "called": [
                "strcasecmp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcasecmp",
            "entrypoint": "0x00104080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcat": {
            "called": [
                "strcat"
            ],
            "calling": [
                "FUN_0010ae0e",
                "FUN_0010ee3f",
                "FUN_00115530"
            ],
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "strcat",
            "entrypoint": "0x001047c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strchr": {
            "called": [
                "strchr"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00114c80",
                "FUN_00104ad6",
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strchr",
            "entrypoint": "0x00104290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00108c86",
                "FUN_0010afd5",
                "FUN_00115f50",
                "FUN_0010c7a0",
                "FUN_0010914e",
                "FUN_00115b70",
                "FUN_00114190",
                "FUN_00108898",
                "FUN_00116b90",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_0010922b"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x00104470",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcpy": {
            "called": [
                "strcpy"
            ],
            "calling": [
                "FUN_0010ae0e",
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010554f",
                "FUN_0010a424",
                "FUN_00115530"
            ],
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "strcpy",
            "entrypoint": "0x00104100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strdup": {
            "called": [
                "strdup"
            ],
            "calling": [
                "FUN_00108d9a"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "strdup",
            "entrypoint": "0x00104880",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104966",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00104890",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010c95e",
                "FUN_001199d0",
                "FUN_00109bbb",
                "FUN_0010d21c",
                "FUN_001125fa",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010ae0e",
                "FUN_00113fb0",
                "FUN_0010e7c2",
                "FUN_0010b800",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_00104ad6",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00115530",
                "FUN_0010d559",
                "FUN_0010a2b9",
                "FUN_0010a0e9",
                "FUN_0010ab4d",
                "FUN_0010e9a0",
                "FUN_0010e8a9",
                "FUN_0010a69a",
                "FUN_0010a77a",
                "FUN_0010a94e",
                "FUN_0011378f",
                "FUN_0010e5db",
                "FUN_00116b90",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010e2f0",
                "FUN_0010aa53",
                "FUN_0010ee3f",
                "FUN_0010eafe",
                "FUN_00104943",
                "FUN_00113ede",
                "FUN_0010a377",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010a424",
                "FUN_0010e453"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00104270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncasecmp": {
            "called": [
                "strncasecmp"
            ],
            "calling": [
                "FUN_00104ad6",
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncasecmp",
            "entrypoint": "0x001045d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncmp": {
            "called": [
                "strncmp"
            ],
            "calling": [
                "FUN_00113fb0",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncmp",
            "entrypoint": "0x001040e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncpy": {
            "called": [
                "strncpy"
            ],
            "calling": [
                "FUN_00104ad6",
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "current_name": "strncpy",
            "entrypoint": "0x001040d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strnlen": {
            "called": [
                "strnlen"
            ],
            "calling": [
                "FUN_0011a480"
            ],
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "current_name": "strnlen",
            "entrypoint": "0x00104380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strrchr": {
            "called": [
                "strrchr"
            ],
            "calling": [
                "FUN_00114cf0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strrchr",
            "entrypoint": "0x001042c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strspn": {
            "called": [
                "strspn"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "current_name": "strspn",
            "entrypoint": "0x001043e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strstr": {
            "called": [
                "strstr"
            ],
            "calling": [
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "current_name": "strstr",
            "entrypoint": "0x001048c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtod": {
            "called": [
                "strtod"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "current_name": "strtod",
            "entrypoint": "0x00104170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtol": {
            "called": [
                "strtol"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00104943"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "strtol",
            "entrypoint": "0x00104510",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x00104790",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001041d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0010e439": {
            "additional_data": {
                "0x210": {
                    "1": "param_offset",
                    "2": "offset"
                },
                "0x84": {
                    "1": "length"
                },
                "param_1": {
                    "1": "data",
                    "14": "base_address",
                    "3": "target_address",
                    "4": "object_address"
                },
                "param_2": {
                    "1": "data_value",
                    "13": "new_value",
                    "2": "new_param_value",
                    "3": "data",
                    "6": "value"
                },
                "process_string_0010e2f0": {
                    "20": "process_string"
                },
                "thunk_FUN_0010e439": {
                    "1": "update_string_value",
                    "11": "set_param_and_process_string",
                    "2": "set_param",
                    "3": "set_param_value"
                }
            },
            "called": [
                "FUN_0010e439"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid set_param_and_process_string_thunk_0010e439(long base_address,undefined8 new_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = new_value;\n  process_string(base_address,0x84,0,0,new_value);\n  return;\n}\n\n",
            "current_name": "set_param_and_process_string_thunk_0010e439",
            "entrypoint": "0x0010e451",
            "imported": false,
            "improved": true,
            "renaming": {
                "param_1": "base_address",
                "param_2": "new_value",
                "process_string_0010e2f0": "process_string",
                "thunk_FUN_0010e439": "set_param_and_process_string_thunk_0010e439"
            },
            "skipped": false,
            "tags": []
        },
        "unlink": {
            "called": [
                "unlink"
            ],
            "calling": [
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "current_name": "unlink",
            "entrypoint": "0x001040c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "unlink_if_ordinary": {
            "called": [
                "unlink_if_ordinary"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "current_name": "unlink_if_ordinary",
            "entrypoint": "0x00104610",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "utimensat": {
            "called": [
                "utimensat"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "utimensat",
            "entrypoint": "0x00104060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x00104770",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "write": {
            "called": [
                "write"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "current_name": "write",
            "entrypoint": "0x001041c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xcalloc": {
            "called": [
                "xcalloc"
            ],
            "calling": [
                "FUN_001163d0"
            ],
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "current_name": "xcalloc",
            "entrypoint": "0x00104918",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116b90",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_00119dd0"
            ],
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00104760",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00108c86",
                "FUN_00114cf0",
                "FUN_00114460",
                "FUN_001125fa",
                "FUN_0010a181",
                "FUN_00109b52",
                "FUN_0010bf86",
                "FUN_0010c7a0",
                "FUN_00104ad6",
                "FUN_0010bc80",
                "FUN_00116852",
                "FUN_00108d9a",
                "FUN_00113b98",
                "FUN_00112925",
                "FUN_0010ab4d",
                "FUN_00113bfa",
                "FUN_00104ea2",
                "FUN_001163d0",
                "FUN_0010a69a",
                "FUN_0010a77a",
                "FUN_0010dac0",
                "FUN_0010e5db",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00116030",
                "FUN_0010a424",
                "FUN_0011a480",
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_0010be88",
                "FUN_001199d0",
                "FUN_0010d882",
                "FUN_0010b6ea",
                "FUN_00109a0b",
                "FUN_0010a83e",
                "FUN_0010ebb0",
                "FUN_0010ae0e",
                "FUN_0010e7c2",
                "FUN_00114190",
                "FUN_0010bd62",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_00113c43",
                "FUN_0010c6be",
                "FUN_00113da9",
                "FUN_00109022",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00113d6e",
                "FUN_00114d60",
                "FUN_00115530",
                "FUN_0010a2b9",
                "FUN_00114c80",
                "FUN_0010a0e9",
                "FUN_0010e9a0",
                "FUN_0010afd5",
                "FUN_0010bbd3",
                "FUN_0010c139",
                "FUN_00112894",
                "FUN_0010e8a9",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "FUN_0010a94e",
                "FUN_00116110",
                "FUN_0011378f",
                "FUN_0010c05d",
                "FUN_00113ce0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010a377",
                "FUN_0010ba08",
                "FUN_00113e23",
                "FUN_00112904",
                "FUN_0010e453"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00104390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x001043b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ab4d",
                "FUN_00109c2e",
                "FUN_0010b6ea",
                "FUN_0010e07c",
                "FUN_0010d7d4",
                "FUN_0010dac0",
                "FUN_00109be3",
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00109ed3",
                "FUN_00119f70",
                "FUN_0010e2f0",
                "FUN_0010aa53",
                "FUN_0010ee3f",
                "FUN_0010abdd"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x001042b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_001088ae",
                "FUN_00109b52"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x001043d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00104020",
            "FUN_00104943",
            "FUN_00104a35",
            "FUN_00104bba",
            "FUN_00104c36",
            "FUN_00104d1c",
            "FUN_001052a2",
            "FUN_0010540e",
            "FUN_001054af",
            "FUN_001081e9",
            "FUN_00108237",
            "FUN_001082c3",
            "FUN_0010870e",
            "FUN_0010871c",
            "FUN_0010875d",
            "FUN_001087da",
            "FUN_001087fd",
            "FUN_00108800",
            "FUN_00108863",
            "FUN_00108898",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00108e76",
            "FUN_00108ea1",
            "FUN_00108f05",
            "FUN_00108f08",
            "FUN_00108fb9",
            "FUN_00108fe8",
            "FUN_00109022",
            "FUN_0010911f",
            "FUN_0010914e",
            "FUN_00109a0b",
            "FUN_00109b2f",
            "FUN_00109b52",
            "FUN_00109bbb",
            "FUN_00109be3",
            "FUN_00109c2e",
            "FUN_0010ab4d",
            "FUN_0010ae0e",
            "FUN_0010bb52",
            "FUN_0010bbd3",
            "FUN_0010bd62",
            "FUN_0010be1a",
            "FUN_0010be88",
            "FUN_0010bf20",
            "FUN_0010bf86",
            "FUN_0011256b",
            "FUN_001125fa",
            "FUN_0011283f",
            "FUN_00112894",
            "FUN_00112904",
            "FUN_00112925",
            "FUN_001129f4",
            "FUN_00113f20",
            "FUN_00113fb0",
            "FUN_00113fe0",
            "FUN_00114b84",
            "FUN_00114cf0",
            "FUN_00114d50",
            "FUN_00114e00",
            "FUN_00115d00",
            "FUN_00119970",
            "FUN_00119e70",
            "FUN_0011a110",
            "FUN_0011a170",
            "FUN_0011a1b0",
            "FUN_0011a250",
            "FUN_0011a390",
            "FUN_0011a480"
        ],
        [
            "FUN_001053d5",
            "FUN_001083b7",
            "FUN_00108916",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_00109a32",
            "FUN_00109cf4",
            "FUN_00109e76",
            "FUN_0010a0e9",
            "FUN_0010a181",
            "FUN_0010a2b9",
            "FUN_0010a377",
            "FUN_0010a69a",
            "FUN_0010a77a",
            "FUN_0010a94e",
            "FUN_0010aa53",
            "FUN_0010abdd",
            "FUN_0010bc80",
            "FUN_0010c05d",
            "FUN_0010c218",
            "FUN_0010c6be",
            "FUN_001126c0",
            "FUN_00112996",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00113b98",
            "FUN_00113bfa",
            "FUN_00113c43",
            "FUN_00113cb9",
            "FUN_00113ce0",
            "FUN_00113d3a",
            "FUN_00113d6e",
            "FUN_00113da9",
            "FUN_00113df2",
            "FUN_00113dfe",
            "FUN_00113e17",
            "FUN_00113e23",
            "FUN_00113ede",
            "FUN_00115a90",
            "FUN_00115d70",
            "FUN_00116030",
            "FUN_00116852",
            "FUN_00119dd0",
            "FUN_00119ed0",
            "FUN_00119f70",
            "FUN_0011a0e0"
        ],
        [
            "FUN_00104920",
            "FUN_00104966",
            "FUN_00104ad6",
            "FUN_00104cc1",
            "FUN_00104d25",
            "FUN_001053b5",
            "FUN_0010543c",
            "FUN_00105828",
            "FUN_0010808f",
            "FUN_0010827b",
            "FUN_001082b3",
            "FUN_001082df",
            "FUN_00108375",
            "FUN_001083de",
            "FUN_00108466",
            "FUN_00108808",
            "FUN_0010882c",
            "FUN_00108d9a",
            "FUN_00109ab1",
            "FUN_00109d3e",
            "FUN_00109d5c",
            "FUN_00109d97",
            "FUN_00109dfe",
            "FUN_00109ed3",
            "FUN_0010a83e",
            "FUN_0010add5",
            "FUN_0010adf2",
            "FUN_0010afd5",
            "FUN_0010b800",
            "FUN_0010ba08",
            "FUN_0010bba1",
            "FUN_0010c139",
            "FUN_0010c1c6",
            "FUN_0010c2d2",
            "FUN_0010da0b",
            "FUN_0010e2f0",
            "FUN_00113f50",
            "FUN_00114190",
            "FUN_00114c80",
            "FUN_00114d60",
            "FUN_00114dc7",
            "FUN_00115f30",
            "FUN_00119940",
            "FUN_001199d0",
            "FUN_0011a2e0",
            "FUN_0011a350"
        ],
        [
            "FUN_00104ea2",
            "FUN_00108179",
            "FUN_00108200",
            "FUN_0010829e",
            "FUN_0010a083",
            "FUN_0010a0a0",
            "FUN_0010a0bd",
            "FUN_0010a0d3",
            "FUN_0010a424",
            "FUN_0010b948",
            "FUN_0010c892",
            "FUN_0010e439",
            "thunk_FUN_0010e439",
            "FUN_0010e453",
            "FUN_0010e5db",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010e842",
            "FUN_0010e8a9",
            "FUN_0010e918",
            "FUN_0010e9a0",
            "FUN_0010eafe",
            "FUN_0010ebb0",
            "FUN_0010ec73",
            "FUN_0010ed2c",
            "FUN_0010edb4",
            "FUN_0011173a",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114690",
            "FUN_00114c20",
            "FUN_00115970"
        ],
        [
            "FUN_00108072",
            "FUN_00112502",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 1147897
}