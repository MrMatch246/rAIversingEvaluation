{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_debug_data_00113dfe",
                "param_1": "inputValue",
                "param_2": "newValue",
                "lVar1": "typePointer"
            },
            "code": "\nvoid updateDebugData_00113dfe(undefined4 inputValue,undefined newValue)\n\n{\n  long typePointer;\n  \n  typePointer = debug_make_type_constprop_0(3,inputValue);\n  if (typePointer != 0) {\n    *(undefined *)(typePointer + 0x10) = newValue;\n  }\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_type",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "update_debug_data_00113dfe"
        },
        "FUN_001045d0": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001045d0"
        },
        "FUN_001044b0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "bfd_nonfatal.cold",
                "debug_find_named_type",
                "display_info.isra.0",
                "debug_record_function",
                "stab_demangle_v3_arglist",
                "debug_add_to_current_namespace.constprop.0",
                "stab_find_type",
                "stab_demangle_v3_arg",
                "debug_tag_type",
                "debug_get_real_type.isra.0",
                "stab_context",
                "debug_record_variable",
                "parse_stab",
                "list_supported_targets",
                "debug_name_type",
                "list_matching_formats",
                "finish_stab",
                "parse_stab_type",
                "debug_record_parameter",
                "copy_usage",
                "debug_end_block",
                "main",
                "debug_end_function",
                "bad_stab",
                "warn_stab",
                "stab_bad_demangle",
                "debug_start_block",
                "report",
                "bfd_nonfatal_message",
                "strip_usage",
                "debug_record_line",
                "debug_write_type.constprop.0",
                "FUN_0010554f",
                "debug_start_source",
                "stab_find_slot"
            ],
            "imported": false,
            "current_name": "FUN_001044b0"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_string_0010ab4d",
                "param_1": "ptr_struct",
                "param_2": "input_string",
                "param_3": "ptr_value1",
                "param_4": "ptr_value2",
                "uVar1": "ptr_struct_value",
                "lVar2": "ptr_struct_value2",
                "auVar3": "return_value1",
                "auVar7": "return_value2",
                "sVar4": "input_length",
                "pcVar5": "output_string",
                "sVar6": "output_length"
            },
            "code": "\nundefined  [16] updateString_0010ab4d(long ptr_struct,char *input_string,undefined8 ptr_value1,undefined8 ptr_value2)\n\n{\n  ulong ptr_struct_value;\n  long ptr_struct_value2;\n  undefined return_value1 [16];\n  size_t input_length;\n  char *output_string;\n  size_t output_length;\n  undefined return_value2 [16];\n  \n  ptr_struct_value = *(ulong *)(ptr_struct + 0x60);\n  if ((ptr_struct_value != 0) && (*(long *)(ptr_struct_value + 0x20) != 0)) {\n    output_string = *(char **)(ptr_struct_value + 0x30);\n    input_length = strlen(input_string);\n    if (output_string == (char *)0x0) {\n      output_string = (char *)xmalloc(input_length + 3);\n      *output_string = '\\0';\n    }\n    else {\n      output_length = strlen(output_string);\n      output_string = (char *)xrealloc(output_string,input_length + 4 + output_length);\n    }\n    input_length = strlen(output_string);\n    sprintf(output_string + input_length,\"%s::\",input_string);\n    ptr_struct_value2 = *(long *)(ptr_struct + 0x60);\n    *(char **)(ptr_struct_value2 + 0x30) = output_string;\n    return_value2._1_7_ = (undefined7)((ulong)ptr_struct_value2 >> 8);\n    return_value2[0] = 1;\n    return_value2._8_8_ = ptr_value2;\n    return return_value2;\n  }\n  return_value1._8_8_ = 0;\n  return_value1._0_8_ = ptr_struct_value;\n  return return_value1 << 0x40;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_string_0010ab4d"
        },
        "FUN_001046f0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046f0"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "add_type_to_namespace_0010c218",
                "param_1": "filePtr",
                "param_2": "nameType",
                "param_3": "debugPtr",
                "uVar1": "errorMessage",
                "lVar2": "typePtr",
                "pauVar3": "dynamicArray",
                "lVar4": "namespaceEntry"
            },
            "code": "\n\n\nlong addTypeToNamespace_0010c218(long filePtr,long nameType,long debugPtr)\n\n{\n  undefined8 errorMessage;\n  long typePtr;\n  undefined (*dynamicArray) [16];\n  long namespaceEntry;\n  \n  if ((nameType != 0) && (debugPtr != 0)) {\n    if ((*(long *)(filePtr + 8) == 0) || (*(long *)(filePtr + 0x10) == 0)) {\n      errorMessage = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      typePtr = debug_make_type_constprop_0(0x16,0);\n      if (typePtr != 0) {\n        dynamicArray = (undefined (*) [16])xmalloc(0x10);\n        namespaceEntry = *(long *)(filePtr + 0x10);\n        *dynamicArray = ZEXT816(0);\n        *(long *)(*dynamicArray + 8) = debugPtr;\n        *(undefined (**) [16])(typePtr + 0x10) = dynamicArray;\n        namespaceEntry = debug_add_to_namespace_constprop_0(namespaceEntry + 0x10,nameType,0,3);\n        if (namespaceEntry != 0) {\n          *(long *)(namespaceEntry + 0x20) = typePtr;\n          *(long *)*dynamicArray = namespaceEntry;\n          return typePtr;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_find_type",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "add_type_to_namespace_0010c218"
        },
        "FUN_00128060": {
            "renaming": {},
            "code": "\n\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128060",
            "calling": [
                "strncpy"
            ],
            "imported": false,
            "current_name": "FUN_00128060"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  strip_symbols = 0;\n  discard_locals = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = program_name;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = is_strip;\n  if ((int)is_strip < 0) {\n    sVar15 = strlen(program_name);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  is_strip = uVar10;\n  strip_specific_htab = create_symbol_htab();\n  strip_unneeded_htab = create_symbol_htab();\n  keep_specific_htab = create_symbol_htab();\n  localize_specific_htab = create_symbol_htab();\n  globalize_specific_htab = create_symbol_htab();\n  keepglobal_specific_htab = create_symbol_htab();\n  weaken_specific_htab = create_symbol_htab();\n  redefine_specific_htab = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  redefine_specific_reverse_htab = create_symbol_htab();\n  puVar6 = xatexit_head_lto_priv_0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(xatexit_head_lto_priv_0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    xatexit_head_lto_priv_0 = (undefined *)puVar20;\n  }\n  puVar6 = xatexit_head_lto_priv_0;\n  iVar11 = *(int *)(xatexit_head_lto_priv_0 + 8);\n  *(int *)(xatexit_head_lto_priv_0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (is_strip != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",strip_options);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        deterministic = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        merge_notes = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        strip_symbols = 2;\n        break;\n      case 0x55:\n        deterministic = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        discard_locals = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        preserve_dates = 1;\n        break;\n      case 0x73:\n        strip_symbols = 7;\n        break;\n      case 0x76:\n        verbose = 1;\n        break;\n      case 0x77:\n        wildcard = 1;\n        break;\n      case 0x78:\n        discard_locals = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        keep_file_symbols = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        keep_section_symbols = 1;\n        break;\n      case 0xba:\n        merge_notes = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        strip_symbols = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        strip_symbols = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (strip_symbols < 8)) &&\n           ((-0xdaL >> ((byte)strip_symbols & 0x3f) & 1U) == 0)) {\n          merge_notes = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (deterministic < 0) {\n          deterministic = 1;\n        }\n        if (((strip_symbols | discard_locals) == 0) &&\n           (lVar30 = htab_elements(strip_specific_htab), lVar30 == 0)) {\n          strip_symbols = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = strip_options;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",copy_options);\n  pFVar14 = _optarg;\n  uVar10 = reverse_bytes;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return status;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((interleave != 0) && (copy_byte == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (interleave <= copy_byte) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (interleave - copy_byte < copy_width) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (deterministic < 0) {\n    deterministic = 1;\n  }\n  if ((strip_symbols | discard_locals) == 0) {\n    strip_symbols = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (pe_subsystem == -1) {\n        pe_subsystem = (short)iVar11;\n      }\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (status == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,preserve_dates);\n    status = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = change_sections;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(strip_specific_buffer);\n  free(strip_unneeded_buffer);\n  free(keep_specific_buffer);\n  free(localize_specific_buffer);\n  free(globalize_specific_buffer);\n  free(keepglobal_specific_buffer);\n  free(weaken_specific_buffer);\n  return status;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = status;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return status;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    status = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    status = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (status == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,preserve_dates);\n      status = uVar10;\n      if (iVar11 != 0) {\n        status = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  strip_symbols = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)section_rename_list;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)section_rename_list;\n    section_rename_list = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    deterministic = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(keepglobal_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(localize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    merge_notes = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    strip_symbols = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    deterministic = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(weaken_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    discard_locals = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_byte = (int)lVar30;\n    if (copy_byte < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    strip_symbols = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      interleave = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      interleave = (int)lVar30;\n      if (interleave < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    sections_copied = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    preserve_dates = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    verbose = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    wildcard = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    discard_locals = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    add_sections = init_section_add(_optarg,add_sections,\"--add-section\");\n    section_add_load_file(add_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    long_section_names = 1;\n    gnu_debuglink_filename = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = add_sym_list;\n        bVar39 = add_sym_list == (undefined8 *)0x0;\n        add_sym_list = puVar20;\n        if (bVar39) {\n          add_sym_tail = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)add_sym_tail = puVar20;\n    add_sym_tail = (undefined *)puVar20;\nLAB_00117e65:\n    add_symbols = add_symbols + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    use_alt_mach_code = strtoul((char *)_optarg,(char **)0x0,0);\n    if (use_alt_mach_code == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    change_section_address = parse_vma(_optarg,\"--change-addresses\");\n    change_start = change_section_address;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    change_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    change_start = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      do_debug_sections = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      do_debug_sections = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      do_debug_sections = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      do_debug_sections = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    convert_debugging = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    do_debug_sections = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    dump_sections = init_section_add(_optarg,dump_sections,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    strip_symbols = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    extract_symbol = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    pe_file_alignment = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    gap_fill = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    gap_fill_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(globalize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,globalize_specific_htab,&globalize_specific_buffer);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    pe_heap_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_heap_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    pe_image_base = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x100;\n    bfd_flags_to_set = bfd_flags_to_set & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_width = (int)lVar30;\n    if (copy_width < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,keepglobal_specific_htab,&keepglobal_specific_buffer);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    keep_file_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,keep_specific_htab,&keep_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    keep_section_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    localize_hidden = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,localize_specific_htab,&localize_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      long_section_names = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    merge_notes = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    strip_symbols = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    pad_to = parse_vma(_optarg,\"--pad-to\");\n    pad_to_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    prefix_alloc_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    prefix_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    prefix_symbols_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    bfd_flags_to_set = bfd_flags_to_set | 0x100;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    bfd_flags_to_set = bfd_flags_to_set | 0x80;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    remove_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)reverse_bytes;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    reverse_bytes = (uint)uVar27;\n    if (((int)reverse_bytes < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != reverse_bytes) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    pe_section_alignment = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    set_start = parse_vma(_optarg,\"--set-start\");\n    set_start_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    pe_stack_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_stack_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    strip_symbols = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,strip_specific_htab,&strip_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    strip_symbols = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(strip_unneeded_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,strip_unneeded_htab,&strip_unneeded_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      pe_major_subsystem_version = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        pe_minor_subsystem_version = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      pe_subsystem = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&v_0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0 + (long)unaff_R13 * 2;\n      pe_subsystem = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    update_sections = init_section_add(_optarg,update_sections,\"--update-section\");\n    section_add_load_file(update_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    weaken = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,weaken_specific_htab,&weaken_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x80;\n    bfd_flags_to_set = bfd_flags_to_set & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "called": [
                "fseek",
                "xstrdup",
                "bfd_set_default_target",
                "delete_symbol_htabs",
                "display_info.isra.0",
                "xatexit_cleanup.lto_priv.0",
                "setlocale",
                "filename_cmp",
                "textdomain",
                "parse_flags",
                "getc",
                "htab_create_alloc",
                "section_add_load_file",
                "malloc",
                "bfd_set_error_program_name",
                "non_fatal",
                "fopen",
                "smart_rename",
                "xcalloc",
                "fread",
                "bfd_scan_arch",
                "strlen",
                "dcgettext",
                "memcpy",
                "mkstemp",
                "strcpy",
                "xmalloc",
                "htab_hash_redefnode",
                "bfd_nonfatal_message",
                "close",
                "bfd_init",
                "create_symbol_htab",
                "strchr",
                "bfd_errmsg",
                "startswith.lto_priv.0.lto_priv.0",
                "htab_find_slot",
                "template_in_dir",
                "print_version",
                "stat",
                "ftell",
                "add_redefine_and_check",
                "xexit",
                "xrealloc",
                "htab_elements",
                "copy_file",
                "find_section_list",
                "strtoul",
                "strcasecmp",
                "get_file_size",
                "unlink_if_ordinary",
                "strtol",
                "xmalloc_set_program_name",
                "ferror",
                "strncasecmp",
                "dup",
                "strncpy",
                "free",
                "add_specific_symbols",
                "bindtextdomain",
                "strerror",
                "fprintf",
                "init_section_add",
                "copy_usage",
                "memmove",
                "fatal",
                "strcmp",
                "__errno_location",
                "eq_string_redefnode",
                "handle_remove_section_option",
                "bfd_get_error",
                "strip_usage",
                "fclose",
                "getopt_long",
                "parse_vma",
                "xstrndup",
                "convert_efi_target",
                "free"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_00128180": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128180",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_00128180"
        },
        "FUN_00104090": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "delete_symbol_htabs"
            ],
            "imported": false,
            "current_name": "FUN_00104090"
        },
        "FUN_00128068": {
            "renaming": {},
            "code": "\n\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128068",
            "calling": [
                "strncmp"
            ],
            "imported": false,
            "current_name": "FUN_00128068"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_debugging_0010be88",
                "param_1": "block_address",
                "param_2": "debugger_handle",
                "puVar1": "current_block",
                "uVar2": "result",
                "puVar3": "new_block",
                "puVar4": "next_block",
                "lVar5": "block_address_2",
                "puVar6": "block_address_iter",
                "puVar7": "new_block_iter",
                "bVar8": "flag",
                "auVar9": "return_value"
            },
            "code": "\n\n\nundefined  [16] start_block_debugging_0010be88(long block_address,undefined8 debugger_handle,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *current_block;\n  undefined8 result;\n  undefined4 *new_block;\n  undefined8 *next_block;\n  long block_address_2;\n  undefined8 *block_address_iter;\n  undefined4 *new_block_iter;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if ((*(long *)(block_address + 8) == 0) || (*(long *)(block_address + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    new_block = (undefined4 *)xmalloc(0x30);\n    new_block_iter = new_block;\n    for (block_address_2 = 0xc; block_address_2 != 0; block_address_2 = block_address_2 + -1) {\n      *new_block_iter = 0;\n      new_block_iter = new_block_iter + (ulong)flag * -2 + 1;\n    }\n    block_address_2 = *(long *)(block_address + 0x20);\n    *(undefined8 *)(new_block + 6) = debugger_handle;\n    *(undefined8 *)(new_block + 8) = 0xffffffffffffffff;\n    *(long *)(new_block + 2) = block_address_2;\n    current_block = *(undefined8 **)(block_address_2 + 0x10);\n    block_address_iter = (undefined8 *)(block_address_2 + 0x10);\n    while (next_block = current_block, next_block != (undefined8 *)0x0) {\n      block_address_iter = next_block;\n      current_block = (undefined8 *)*next_block;\n    }\n    *block_address_iter = new_block;\n    result = 1;\n    *(undefined4 **)(block_address + 0x20) = new_block;\n  }\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_block_debugging_0010be88"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_struct_field_string_0010ba08",
                "param_1": "paramList",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "cVar1": "flag",
                "iVar2": "size",
                "lVar3": "length",
                "__s": "field",
                "sVar4": "param2Length",
                "sVar5": "fieldNameLength",
                "sVar6": "fieldLength",
                "__s_00": "formattedField",
                "uVar7": "warningMsg",
                "uVar8": "returnValue",
                "pcVar9": "flagStr"
            },
            "code": "\nundefined8\ngenerateStructFieldString_0010ba08(undefined8 *paramList,char *fieldName,undefined8 param3,ulong param4,int param5)\n\n{\n  char flag;\n  int size;\n  long length;\n  char *field;\n  size_t param2Length;\n  size_t fieldNameLength;\n  size_t fieldLength;\n  char *formattedField;\n  undefined8 warningMsg;\n  undefined8 returnValue;\n  char *flagStr;\n  \n  flag = *(char *)(paramList[0xc] + 0x1c);\n  size = *(int *)(paramList[0xc] + 0x18);\n  field = (char *)stab_pop_type();\n  if (*(char **)(paramList[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    param2Length = strlen(*(char **)(paramList[0xc] + 0x20));\n    fieldNameLength = strlen(fieldName);\n    fieldLength = strlen(field);\n    formattedField = (char *)xmalloc(param2Length + 0x32 + fieldNameLength + fieldLength);\n    if (param5 == 1) {\n      flagStr = \"/1\";\n    }\n    else {\n      flagStr = \"/0\";\n      if ((param5 != 2) && (flagStr = \"\", param5 != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((param4 == 0) && (param4 = (ulong)(uint)(size * 8), param4 == 0)) {\n      returnValue = *(undefined8 *)*paramList;\n      warningMsg = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      non_fatal(warningMsg,returnValue,fieldName);\n    }\n    sprintf(formattedField,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(paramList[0xc] + 0x20),fieldName,flagStr,field,\n            param3,param4);\n    free(*(void **)(paramList[0xc] + 0x20));\n    length = paramList[0xc];\n    *(char **)(length + 0x20) = formattedField;\n    if (flag != '\\0') {\n      *(undefined *)(length + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)length >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "non_fatal",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "dcgettext",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_struct_field_string_0010ba08"
        },
        "FUN_00128188": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128188",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_00128188"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "option",
                "cVar1": "flagValue",
                "__s": "string",
                "sVar5": "stringLength",
                "pcVar6": "newString",
                "cVar3": "optionChar",
                "lVar2": "ptrData",
                "uVar8": "result",
                "uVar9": "loopIndex",
                "uVar10": "lastIndex",
                "uVar4": "counter",
                "lVar7": "ptrNewData"
            },
            "code": "\nundefined8 processData_0010aa53(long data,undefined8 value,char flag,int option)\n\n{\n  char flagValue;\n  long ptrData;\n  char optionChar;\n  uint counter;\n  char *string;\n  size_t stringLength;\n  char *newString;\n  long ptrNewData;\n  undefined8 result;\n  ulong loopIndex;\n  ulong lastIndex;\n  \n  flagValue = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string = (char *)stab_pop_type();\n  stringLength = strlen(string);\n  newString = (char *)xmalloc(stringLength + 0x19);\n  *newString = flag + '0';\n  if (option == 1) {\n    optionChar = '1';\n  }\n  else {\n    optionChar = '0';\n    if ((option != 2) && (optionChar = '2', option != 0)) {\n                    \n      abort();\n    }\n  }\n  newString[1] = optionChar;\n  sprintf(newString + 2,\"%ld,%s;\",value);\n  free(string);\n  ptrData = *(long *)(data + 0x60);\n  result = 0;\n  if ((ptrData != 0) && (*(long *)(ptrData + 0x20) != 0)) {\n    ptrData = *(long *)(ptrData + 0x28);\n    lastIndex = 0;\n    if (ptrData != 0) {\n      counter = 0;\n      do {\n        loopIndex = (ulong)counter;\n        lastIndex = (ulong)counter;\n        counter = counter + 1;\n      } while (*(long *)(ptrData + loopIndex * 8) != 0);\n    }\n    ptrNewData = xrealloc(ptrData,(ulong)((int)lastIndex + 2) << 3);\n    *(char **)(ptrNewData + lastIndex * 8) = newString;\n    *(undefined8 *)(ptrNewData + (ulong)((int)lastIndex + 1) * 8) = 0;\n    ptrData = *(long *)(data + 0x60);\n    *(long *)(ptrData + 0x28) = ptrNewData;\n    if (flagValue != '\\0') {\n      *(undefined *)(ptrData + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "abort",
                "sprintf",
                "xmalloc",
                "free",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "parse_stab_0011173a",
                "param_1": "param",
                "param_2": "param_array",
                "param_3": "type",
                "param_4": "is_within_function",
                "param_5": "line_number",
                "param_6": "name",
                "cVar1": "character_var_1",
                "bVar2": "byte_var_2",
                "__ptr": "ptr",
                "cVar3": "character_var_3",
                "uVar4": "undefined_var_4",
                "iVar5": "int_var_5",
                "puVar6": "ptr_var_6",
                "plVar7": "ptr_list_var_7",
                "pcVar8": "ptr_to_character_8",
                "uVar9": "undefined_var_9",
                "lVar10": "long_var_10",
                "lVar11": "long_var_11",
                "lVar12": "long_var_12",
                "lVar13": "long_var_13",
                "uVar14": "ulong_var_14",
                "uVar15": "ulong_var_15",
                "pcVar16": "ptr_to_character_16",
                "uVar17": "uint_var_17",
                "pplVar13": "ptr_ptr_list_var_13",
                "local_48": "local_ptr_48",
                "local_40": "local_ptr_array_40",
                "dVar19": "double_var_19"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parse_stab_0011173a(undefined8 param,long *param_array,int type,int is_within_function,ulong line_number,\n                      char *name)\n\n{\n  char character_var_1;\n  byte byte_var_2;\n  void *ptr;\n  char character_var_3;\n  undefined undefined_var_4;\n  int int_var_5;\n  undefined8 *ptr_var_6;\n  long *ptr_list_var_7;\n  char *ptr_to_character_8;\n  undefined8 undefined_var_9;\n  long long_var_10;\n  long long_var_11;\n  long long_var_12;\n  long **ptr_ptr_list_var_13;\n  ulong ulong_var_14;\n  ulong ulong_var_15;\n  char *ptr_to_character_16;\n  uint uint_var_17;\n  long **pplVar18;\n  double double_var_19;\n  char *local_ptr_48;\n  long **local_ptr_array_40 [2];\n  \n  if (param_array[4] != 0) {\n    if (((type == 100) && (*name != '\\0')) && (param_array[5] == line_number)) goto LAB_00111a06;\n    character_var_3 = debug_set_filename(param);\n    if (character_var_3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param_array + 0x44) = 0;\n    *(undefined4 *)(param_array + 8) = 0;\n    param_array[9] = param_array[4];\n    if (*(char *)(param_array + 1) == '\\0') {\n      param_array[6] = param_array[5];\n    }\n    *(undefined4 *)(param_array + 0x10) = 1;\n    ptr_var_6 = (undefined8 *)xmalloc(8);\n    param_array[0x11] = (long)ptr_var_6;\n    *ptr_var_6 = 0;\n    param_array[4] = 0;\n  }\n  strlen(name);\n  if (type == 0x84) {\nLAB_00111ab7:\n    undefined_var_4 = debug_start_source(param,name);\n    return undefined_var_4;\n  }\n  if (type < 0x85) {\n    if (type == 0x3c) {\n      int_var_5 = strcmp(name,\"gcc2_compiled.\");\n      if (int_var_5 == 0) {\n        *(undefined4 *)(param_array + 8) = 2;\n        return 1;\n      }\n      int_var_5 = strcmp(name,\"gcc_compiled.\");\n      if (int_var_5 == 0) {\n        *(undefined4 *)(param_array + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param_array + 0x44) = 1;\n      return 1;\n    }\n    if (type < 0x3d) {\n      if (type == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(param_array + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param_array + 1) != '\\0') {\n            line_number = line_number + param_array[7];\n          }\n          character_var_3 = stab_emit_pending_vars(param,param_array);\n          if (character_var_3 != '\\0') {\n            character_var_3 = debug_end_function(param,line_number);\n            if (character_var_3 != '\\0') {\n              *(undefined *)(param_array + 0xc) = 0;\n              param_array[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param_array + 0xc) != '\\0') &&\n           ((line_number < (ulong)param_array[0xd] || (param_array[0xd] == 0xffffffffffffffff)))) {\n          param_array[0xd] = line_number;\n        }\n      }\n      else if (type < 0x25) {\n        if (type == 0xc) {\n          return 1;\n        }\n        if (type - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (type == 0x2a) {\n          return 1;\n        }\n        if (type == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (type == 100) {\nLAB_00111a06:\n        if (*(char *)(param_array + 0xc) != '\\0') {\n          ulong_var_14 = line_number;\n          if (((*name != '\\0') && (ulong_var_15 = param_array[0xd], ulong_var_15 != 0xffffffffffffffff)) &&\n             (ulong_var_14 = ulong_var_15, line_number < ulong_var_15)) {\n            ulong_var_14 = line_number;\n          }\n          character_var_3 = stab_emit_pending_vars(param,param_array);\n          if (character_var_3 == '\\0') {\n            return 0;\n          }\n          character_var_3 = debug_end_function(param,ulong_var_14);\n          if (character_var_3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param_array + 0xc) = 0;\n          param_array[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        ptr = (void *)param_array[4];\n        if (ptr == (void *)0x0) {\n          long_var_12 = xstrdup(name);\n          param_array[4] = long_var_12;\n        }\n        else {\n          if (*name == '/') {\n            long_var_12 = xstrdup(name);\n          }\n          else {\n            long_var_12 = concat(ptr,name,0);\n          }\n          param_array[4] = long_var_12;\n          free(ptr);\n        }\n        param_array[5] = line_number;\n        return 1;\n      }\n      if (type < 0x65) {\n        if (type == 0x44) {\n          long_var_12 = 0;\n          if (*(char *)(param_array + 0xc) != '\\0') {\n            long_var_12 = param_array[7];\n          }\n          undefined_var_4 = debug_record_line(param,(long)is_within_function,long_var_12 + line_number);\n          return undefined_var_4;\n        }\n        if (type == 0x62) {\n          return 1;\n        }\n      }\n      else if (type == 0x82) {\n        ptr_list_var_7 = (long *)xmalloc();\n        int_var_5 = *(int *)(param_array + 0x10);\n        long_var_10 = param_array[10];\n        long_var_11 = param_array[0xb];\n        ptr_list_var_7[5] = 0;\n        long_var_12 = param_array[0x11];\n        *(int *)(ptr_list_var_7 + 4) = int_var_5;\n        uint_var_17 = int_var_5 + 1;\n        *(uint *)(param_array + 0x10) = uint_var_17;\n        *ptr_list_var_7 = long_var_11;\n        ptr_list_var_7[1] = long_var_10;\n        ptr_list_var_7[2] = (long)name;\n        ptr_list_var_7[3] = line_number;\n        param_array[10] = (long)ptr_list_var_7;\n        param_array[0xb] = (long)ptr_list_var_7;\n        long_var_12 = xrealloc(long_var_12,(ulong)uint_var_17 << 3);\n        uint_var_17 = *(uint *)(ptr_list_var_7 + 4);\n        param_array[0x11] = long_var_12;\n        *(undefined8 *)(long_var_12 + (ulong)uint_var_17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    ptr_to_character_8 = strchr(name,0x3a);\n    if ((ptr_to_character_8 != (char *)0x0) && ((ptr_to_character_8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param_array + 0xc) != '\\0') {\n        ulong_var_14 = param_array[0xd];\n        ulong_var_15 = line_number;\n        if ((ulong_var_14 != 0xffffffffffffffff) && (ulong_var_15 = ulong_var_14, line_number < ulong_var_14)) {\n          ulong_var_15 = line_number;\n        }\n        character_var_3 = stab_emit_pending_vars(param,param_array);\n        if (character_var_3 == '\\0') {\n          return 0;\n        }\n        character_var_3 = debug_end_function(param,ulong_var_15);\n        if (character_var_3 == '\\0') {\n          return 0;\n        }\n        param_array[0xd] = -1;\n      }\n      if (*(char *)(param_array + 1) != '\\0') {\n        param_array[7] = line_number;\n      }\n      *(undefined *)(param_array + 0xc) = 1;\n    }\n    local_ptr_48 = strchr(name,0x3a);\n    if (local_ptr_48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_ptr_48[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      character_var_3 = name[1];\n      ptr_to_character_16 = \"eh_throw\";\n      if (character_var_3 != 'e') {\n        if (character_var_3 < 'f') {\n          if ((character_var_3 != 'X') && (character_var_3 != '_')) {\nLAB_00111d1a:\n            undefined_var_9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            warn_stab(name,undefined_var_9);\n          }\n        }\n        else {\n          ptr_to_character_16 = \"this\";\n          if (character_var_3 == 't') goto LAB_00111d62;\n          if (character_var_3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      ptr_to_character_16 = (char *)0x0;\n      if ((name != local_ptr_48) && ((*name != ' ' || (local_ptr_48 != name + 1)))) {\n        ptr_to_character_16 = (char *)savestring(name,(int)local_ptr_48 - (int)name);\n      }\n    }\nLAB_00111d62:\n    byte_var_2 = local_ptr_48[1];\n    ptr_to_character_8 = local_ptr_48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte_var_2 * 2) >> 2) & 1 |\n        (byte_var_2 == 0x2d || byte_var_2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      undefined_var_9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var_2 == 0) goto switchD_00111de5_caseD_44;\n    ptr_to_character_8 = local_ptr_48 + 2;\n    character_var_3 = local_ptr_48[1];\n    switch(character_var_3) {\n    case 'C':\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      ptr_to_character_8 = \"debug_record_label: not implemented\";\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      character_var_3 = debug_record_function(param,ptr_to_character_16,long_var_12,character_var_3 == 'F',line_number);\n      if (character_var_3 != '\\0') {\n        do {\n          if (*local_ptr_48 != ';') {\n            return 1;\n          }\n          local_ptr_48 = local_ptr_48 + 1;\n          long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n        } while (long_var_12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      if (ptr_to_character_16 == (char *)0x0) goto LAB_0011208f;\n      long_var_10 = param_array[3];\n      ptr_list_var_7 = (long *)param_array[2];\n      character_var_3 = *(char *)(*(long *)(*param_array + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (type == 0x24) {\n        local_ptr_48 = ptr_to_character_8;\n        do {\n          if (*local_ptr_48 != ';') {\n            return 1;\n          }\n          local_ptr_48 = local_ptr_48 + 1;\n          long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n        } while (long_var_12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      undefined_var_9 = 2;\n      break;\n    case 'S':\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      undefined_var_9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      character_var_3 = local_ptr_48[2];\n      if (character_var_3 == 't') {\n        ptr_to_character_8 = local_ptr_48 + 3;\n      }\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,ptr_to_character_16,&local_ptr_48,local_ptr_array_40);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      if (ptr_to_character_16 == (char *)0x0) {\n        return 1;\n      }\n      character_var_1 = *(char *)(param_array + 0x35);\n      ptr_list_var_7 = (long *)debug_tag_type(param,ptr_to_character_16,long_var_12);\n      if (ptr_list_var_7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_array_40[0] != (long **)0x0) {\n        *local_ptr_array_40[0] = ptr_list_var_7;\n      }\n      if (character_var_1 != '\\0') goto LAB_001122f0;\n      ptr_ptr_list_var_13 = (long **)(param_array + 0x34);\n      pplVar18 = (long **)param_array[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      undefined_var_9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      ptr_to_character_8 = local_ptr_48 + 3;\n      if (((local_ptr_48[2] != '\\0') && (ptr_to_character_8 = local_ptr_48 + 4, local_ptr_48[3] == 'n')) &&\n         (ptr_to_character_8 = local_ptr_48 + 5, ptr_to_character_16 = local_ptr_48 + 4, local_ptr_48 = ptr_to_character_8, *ptr_to_character_16 == '0')) {\n        for (; ptr_to_character_8 = local_ptr_48, *local_ptr_48 != '\\0'; local_ptr_48 = local_ptr_48 + 1) {\n          if (*local_ptr_48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      undefined_var_9 = 4;\n      break;\n    case 'c':\n      if (local_ptr_48[2] == '=') {\n        ptr_to_character_8 = local_ptr_48 + 4;\n        character_var_3 = local_ptr_48[3];\n        local_ptr_48 = ptr_to_character_8;\n        if (character_var_3 == 'i') {\n          long_var_12 = strtol(ptr_to_character_8,(char **)0x0,10);\n          if (ptr_to_character_16 == (char *)0x0) {\n            return 0;\n          }\n          long_var_10 = debug_add_to_current_namespace_constprop_0(param,ptr_to_character_16,4);\n          if (long_var_10 != 0) {\n            *(long *)(long_var_10 + 0x20) = (long)(int)long_var_12;\n            return 1;\n          }\n          return 0;\n        }\n        if (character_var_3 == 'r') {\n          double_var_19 = strtod(ptr_to_character_8,(char **)0x0);\n          if (ptr_to_character_16 == (char *)0x0) {\n            return 0;\n          }\n          long_var_12 = debug_add_to_current_namespace_constprop_0(param,ptr_to_character_16,5);\n          if (long_var_12 != 0) {\n            *(double *)(long_var_12 + 0x20) = double_var_19;\n            return 1;\n          }\n          return 0;\n        }\n        if (character_var_3 == 'e') {\n          long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n          if (long_var_12 == 0) {\n            return 0;\n          }\n          ptr_to_character_8 = local_ptr_48;\n          if (*local_ptr_48 == ',') {\n            long_var_10 = strtol(local_ptr_48,(char **)0x0,10);\n            if (ptr_to_character_16 == (char *)0x0) {\n              return 0;\n            }\n            long_var_11 = debug_add_to_current_namespace_constprop_0(param,ptr_to_character_16,6);\n            if (long_var_11 != 0) {\n              ptr_list_var_7 = (long *)xmalloc(0x10);\n              *ptr_list_var_7 = long_var_12;\n              ptr_list_var_7[1] = (long)(int)long_var_10;\n              *(long **)(long_var_11 + 0x20) = ptr_list_var_7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_ptr_48[2] == 'F') {\n        local_ptr_48 = local_ptr_48 + 3;\n        long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n        if (long_var_12 == 0) {\n          return 0;\n        }\n        undefined_var_9 = debug_make_function_type_isra_0(long_var_12,0,0);\n        long_var_12 = debug_make_pointer_type_isra_0(undefined_var_9);\n      }\n      else {\n        local_ptr_48 = ptr_to_character_8;\n        long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      }\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      undefined_var_9 = 1;\n      break;\n    case 'r':\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      undefined_var_9 = 5;\nLAB_001123e8:\n      character_var_3 = stab_record_variable(param,param_array,ptr_to_character_16,long_var_12,undefined_var_9,line_number);\n      goto joined_r0x001123f8;\n    case 't':\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,ptr_to_character_16,&local_ptr_48,local_ptr_array_40);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      if (ptr_to_character_16 == (char *)0x0) {\n        return 1;\n      }\n      ptr_list_var_7 = (long *)debug_name_type(param,ptr_to_character_16,long_var_12);\n      if (ptr_list_var_7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_array_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_array_40[0] = ptr_list_var_7;\n      return 1;\n    case 'v':\n      local_ptr_48 = ptr_to_character_8;\n      long_var_12 = parse_stab_0011173a_type(param,param_array,0,&local_ptr_48,0);\n      if (long_var_12 == 0) {\n        return 0;\n      }\n      undefined_var_9 = 3;\n    }\n    character_var_3 = debug_record_parameter(param,ptr_to_character_16,long_var_12,undefined_var_9,line_number);\n    goto joined_r0x001123f8;\n  }\n  if (type == 0xe0) {\n    if ((*(char *)((long)param_array + 0x44) != '\\0') && (is_within_function == 1)) {\n      return 1;\n    }\n    character_var_3 = stab_emit_pending_vars(param,param_array);\n    if (character_var_3 == '\\0') {\n      return 0;\n    }\n    character_var_3 = debug_end_block(param,param_array[7] + param_array[6] + line_number);\n    if (character_var_3 == '\\0') {\n      return 0;\n    }\n    param_array = param_array + 0xe;\n    *(int *)param_array = *(int *)param_array + -1;\n    ptr_to_character_8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param_array) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < type) {\n      if (type == 0xe2) {\n        ptr_to_character_8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        ptr_to_character_8 = \"debug_end_common_block: not implemented\";\n        if (type != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var_9 = dcgettext(0,ptr_to_character_8,5);\n      fprintf(_stderr,\"%s\\n\",undefined_var_9);\n      return 0;\n    }\n    if (type != 0xc0) {\n      if (type == 0xc2) {\n        int_var_5 = *(int *)(param_array + 0x10);\n        *(uint *)(param_array + 0x10) = int_var_5 + 1U;\n        long_var_12 = xrealloc(param_array[0x11],(ulong)(int_var_5 + 1U) << 3);\n        ptr_var_6 = (undefined8 *)param_array[0xb];\n        param_array[0x11] = long_var_12;\n        while( true ) {\n          if (ptr_var_6 == (undefined8 *)0x0) {\n            undefined_var_9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            warn_stab(name,undefined_var_9);\n            *(undefined8 *)(param_array[0x11] + (ulong)(*(int *)(param_array + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((line_number == ptr_var_6[3]) && (int_var_5 = strcmp((char *)ptr_var_6[2],name), int_var_5 == 0))\n          break;\n          ptr_var_6 = (undefined8 *)*ptr_var_6;\n        }\n        *(undefined8 *)(long_var_12 + (ulong)(*(int *)(param_array + 0x10) - 1) * 8) = ptr_var_6[5];\n        return 1;\n      }\n      if (type == 0xa2) {\n        long_var_12 = param_array[10];\n        if (long_var_12 != 0) {\n          long_var_10 = *(long *)(long_var_12 + 8);\n          uint_var_17 = *(uint *)(long_var_12 + 0x20);\n          param_array[10] = long_var_10;\n          if ((uint_var_17 < *(uint *)(param_array + 0x10)) &&\n             (*(undefined8 *)(long_var_12 + 0x28) = *(undefined8 *)(param_array[0x11] + (ulong)uint_var_17 * 8),\n             long_var_10 != 0)) {\n            name = *(char **)(long_var_10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)param_array[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param_array + 0x44) != '\\0') && (is_within_function == 1)) {\n      return 1;\n    }\n    if (*(char *)(param_array + 0xc) != '\\0') {\n      character_var_3 = debug_start_block(param,param_array[7] + param_array[6] + line_number);\n      if (character_var_3 == '\\0') {\n        return 0;\n      }\n      character_var_3 = stab_emit_pending_vars(param,param_array);\n      if (character_var_3 != '\\0') {\n        *(int *)(param_array + 0xe) = *(int *)(param_array + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    ptr_to_character_8 = \"N_LBRAC not within function\\n\";\n  }\n  ptr_to_character_8 = (char *)dcgettext(0,ptr_to_character_8,5);\n  fprintf(_stderr,ptr_to_character_8);\n  return 0;\ncode_r0x00111cc7:\n  local_ptr_48 = local_ptr_48 + 2;\n  local_ptr_48 = strchr(local_ptr_48,0x3a);\n  if (local_ptr_48 == (char *)0x0) {\n    ptr_to_character_8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_ptr_48 = ptr_to_character_8;\n    bad_stab(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (character_var_3 != 't') {\n      return 1;\n    }\n    ptr_list_var_7 = (long *)debug_name_type(param,ptr_to_character_16,ptr_list_var_7);\n    if (ptr_list_var_7 != (long *)0x0) {\n      if (local_ptr_array_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_array_40[0] = ptr_list_var_7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *ptr_to_character_16) &&\n     (int_var_5 = strcmp((char *)pplVar18[1],ptr_to_character_16), int_var_5 == 0)) {\n    pplVar18[3] = ptr_list_var_7;\n    *ptr_ptr_list_var_13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  ptr_ptr_list_var_13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var_10 < 1) {\nLAB_0011208f:\n    undefined_var_9 = 1;\nLAB_001121c4:\n    character_var_3 = debug_record_variable(param,ptr_to_character_16,long_var_12,undefined_var_9,line_number);\njoined_r0x001123f8:\n    if (character_var_3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  ptr_to_character_8 = *(char **)(*ptr_list_var_7 + 8);\n  if ((character_var_3 != '\\0') && (character_var_3 == *ptr_to_character_8)) {\n    ptr_to_character_8 = ptr_to_character_8 + 1;\n  }\n  if ((*ptr_to_character_8 == *ptr_to_character_16) && (int_var_5 = strcmp(ptr_to_character_8,ptr_to_character_16), int_var_5 == 0)) {\n    line_number = *(long *)(*ptr_list_var_7 + 0x10) + *(long *)(*(long *)(*ptr_list_var_7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var_10 = long_var_10 + -1;\n  ptr_list_var_7 = ptr_list_var_7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "xstrdup",
                "debug_record_function",
                "strtod",
                "stab_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "debug_tag_type",
                "strtol",
                "debug_record_variable",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "free",
                "parse_stab_type",
                "fprintf",
                "debug_record_parameter",
                "savestring",
                "debug_end_block",
                "debug_end_function",
                "strlen",
                "bad_stab",
                "dcgettext",
                "strcmp",
                "xmalloc",
                "warn_stab",
                "debug_start_block",
                "stab_emit_pending_vars",
                "strchr",
                "concat",
                "debug_set_filename",
                "debug_record_line",
                "debug_start_source",
                "debug_make_function_type.isra.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_stab_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "decode_and_process_binary_00115dc0",
                "param_1": "input_file",
                "param_2": "binary_info",
                "param_3": "output_buffer",
                "cVar1": "skip_result",
                "iVar2": "error_code",
                "uVar3": "relocation_section",
                "lVar4": "section_offset",
                "puVar5": "relocation_entries",
                "uVar6": "relocation_count",
                "UNRECOVERED_JUMPTABLE": "dynamic_function_pointer",
                "puVar7": "processed_entries",
                "puVar8": "new_entries",
                "uVar9": "iteration_count",
                "uStack_38": "error_message"
            },
            "code": "\nvoid decode_and_process_binary_00115dc0(undefined8 input_file,undefined8 *binary_info,long output_buffer)\n\n{\n  char skip_result;\n  int error_code;\n  undefined8 relocation_section;\n  long section_offset;\n  undefined8 *relocation_entries;\n  ulong relocation_count;\n  code *dynamic_function_pointer;\n  undefined8 *processed_entries;\n  undefined8 *new_entries;\n  ulong iteration_count;\n  undefined8 error_message;\n  \n  skip_result = skip_section(input_file,binary_info,0);\n  if (skip_result != '\\0') {\n    return;\n  }\n  relocation_section = binary_info[0xc];\n  if ((((*(byte *)(output_buffer + 0x48) & 7) != 3) && (strip_symbols != 6)) &&\n     (section_offset = find_section_list(*binary_info,0,0x100), section_offset == 0)) {\n    section_offset = bfd_get_reloc_upper_bound(input_file,binary_info);\n    if (section_offset < 0) {\n      if ((section_offset != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n        status = 1;\n        relocation_section = 0;\nLAB_00108315:\n        bfd_nonfatal_message(0,input_file,binary_info,relocation_section,error_message);\n        return;\n      }\n    }\n    else if (section_offset != 0) {\n      relocation_entries = (undefined8 *)binary_info[0xe];\n      if (relocation_entries == (undefined8 *)0x0) {\n        relocation_entries = (undefined8 *)bfd_alloc(output_buffer);\n        if (relocation_entries == (undefined8 *)0x0) {\n          bfd_nonfatal(0);\n                    \n          xexit(1);\n        }\n        relocation_count = bfd_canonicalize_reloc(input_file,binary_info,relocation_entries,isympp);\n        if ((long)relocation_count < 0) {\n          status = 1;\n          relocation_section = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocation_count = (ulong)*(uint *)(binary_info + 0xf);\n      }\n      if (strip_symbols == 7) {\n        processed_entries = relocation_entries;\n        for (iteration_count = 0; iteration_count != relocation_count; iteration_count = iteration_count + 1) {\n          new_entries = processed_entries;\n          if (((*(long **)relocation_entries[iteration_count] != (long *)0x0) &&\n              (section_offset = **(long **)relocation_entries[iteration_count], section_offset != 0)) &&\n             (skip_result = is_specified_symbol(*(undefined8 *)(section_offset + 8),keep_specific_htab),\n             skip_result != '\\0')) {\n            new_entries = processed_entries + 1;\n            *processed_entries = relocation_entries[iteration_count];\n          }\n          processed_entries = new_entries;\n        }\n        *processed_entries = 0;\n        relocation_count = (long)processed_entries - (long)relocation_entries >> 3;\n      }\n      dynamic_function_pointer = *(code **)(*(long *)(output_buffer + 8) + 0x288);\n      if (relocation_count == 0) {\n        relocation_count = 0;\n        relocation_entries = (undefined8 *)0x0;\n      }\n      else {\n        relocation_count = relocation_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocation_count = 0;\n  relocation_entries = (undefined8 *)0x0;\n  dynamic_function_pointer = *(code **)(*(long *)(output_buffer + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*dynamic_function_pointer)(output_buffer,relocation_section,relocation_entries,relocation_count);\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "bfd_nonfatal_message",
                "bfd_get_error",
                "skip_section",
                "dcgettext",
                "copy_relocations_in_section.cold",
                "bfd_get_reloc_upper_bound",
                "xexit",
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decode_and_process_binary_00115dc0"
        },
        "FUN_001044c0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001044c0"
        },
        "FUN_001043a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "copy_file",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001043a0"
        },
        "FUN_001045e0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "bfd_nonfatal.cold",
                "report",
                "bfd_nonfatal_message",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001045e0"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "find_tagged_type_0010d559",
                "param_1": "taggedTypes",
                "param_2": "input",
                "param_3": "count",
                "bVar1": "firstChar",
                "pbVar2": "ptr",
                "cVar3": "result",
                "uVar4": "demangledCount",
                "iVar5": "comparison",
                "ppcVar6": "stringsArr",
                "sVar7": "strLength",
                "lVar8": "taggedType",
                "plVar9": "fields",
                "pcVar10": "str",
                "__s1": "typeName",
                "__ptr": "stringPtr",
                "pbVar11": "nextPtr",
                "uVar12": "taggedTypeCondition",
                "__nptr": "nextInputPtr",
                "local_64": "iterations",
                "local_40": "localStringsArr"
            },
            "code": "\nundefined8 findTaggedType_0010d559(undefined8 *taggedTypes,byte **input,long *count)\n\n{\n  byte firstChar;\n  byte *ptr;\n  char result;\n  uint demangledCount;\n  int comparison;\n  char **stringsArr;\n  size_t strLength;\n  long taggedType;\n  long *fields;\n  char *str;\n  char *typeName;\n  void *stringPtr;\n  byte *nextPtr;\n  undefined8 taggedTypeCondition;\n  byte *nextInputPtr;\n  int iterations;\n  char *localStringsArr [2];\n  \n  ptr = *input;\n  firstChar = ptr[1];\n  if ((char)firstChar < ':') {\n    if ((char)firstChar < '1') goto LAB_0010d5d8;\n    iterations = (char)firstChar + -0x30;\n    if (ptr[2] == 0x5f) {\n      *input = ptr + 1;\n    }\n    nextPtr = *input + 2;\n  }\n  else {\n    if (((firstChar != 0x5f) || (((&_sch_istable)[(ulong)ptr[2] * 2] & 4) == 0)) ||\n       (ptr[2] == 0x30)) goto LAB_0010d5d8;\n    nextInputPtr = ptr + 2;\n    taggedType = strtol((char *)nextInputPtr,(char **)0x0,10);\n    iterations = (int)taggedType;\n    while (((&_sch_istable)[(ulong)*nextInputPtr * 2] & 4) != 0) {\n      nextInputPtr = nextInputPtr + 1;\n    }\n    nextPtr = nextInputPtr + 1;\n    if (*nextInputPtr != 0x5f) goto LAB_0010d5d8;\n  }\n  *input = nextPtr;\n  stringsArr = (char **)0x0;\n  if (count != (long *)0x0) {\n    stringsArr = localStringsArr;\n  }\n  taggedType = 0;\n  while( true ) {\n    while( true ) {\n      iterations = iterations + -1;\n      if (iterations == -1) {\n        if (count != (long *)0x0) {\n          *count = taggedType;\n        }\n        return 1;\n      }\n      if (**input == 0x5f) {\n        *input = *input + 1;\n      }\n      if (**input != 0x74) break;\n      result = stab_demangle_template(taggedTypes,input,stringsArr);\n      str = localStringsArr[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (count != (long *)0x0) {\n        strLength = strlen(localStringsArr[0]);\n        taggedType = stab_find_tagged_type(*taggedTypes,taggedTypes[1],str,strLength & 0xffffffff,9);\n        free(str);\n        if (taggedType == 0) {\n          return 0;\n        }\n      }\n    }\n    demangledCount = stab_demangle_count(input);\n    strLength = strlen((char *)*input);\n    if (strLength < demangledCount) break;\n    if (count != (long *)0x0) {\n      if ((taggedType != 0) && (fields = (long *)debug_get_fields_isra_0(taggedType), fields != (long *)0x0))\n      {\n        str = (char *)savestring(*input,demangledCount);\n        for (; taggedType = *fields, taggedType != 0; fields = fields + 1) {\n          taggedType = *(long *)(taggedType + 8);\n          if (taggedType == 0) {\n            free(str);\n            return 0;\n          }\n          typeName = (char *)debug_get_type_name_constprop_0(taggedType);\n          if ((typeName != (char *)0x0) && (comparison = strcmp(typeName,str), comparison == 0)) break;\n        }\n        free(str);\n        if (taggedType != 0) goto LAB_0010d7ad;\n      }\n      taggedTypeCondition = 9;\n      if (iterations == 0) {\n        stringPtr = (void *)savestring(*input,demangledCount);\n        taggedType = debug_find_named_type(*taggedTypes,stringPtr);\n        free(stringPtr);\n        if (taggedType != 0) goto LAB_0010d7ad;\n        taggedTypeCondition = 0;\n      }\n      taggedType = stab_find_tagged_type(*taggedTypes,taggedTypes[1],*input,demangledCount,taggedTypeCondition);\n      if (taggedType == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input = *input + demangledCount;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(ptr);\n  return 0;\n}\n\n",
            "called": [
                "debug_find_named_type",
                "savestring",
                "debug_get_fields.isra.0",
                "strlen",
                "stab_find_tagged_type",
                "stab_demangle_template",
                "free",
                "debug_get_type_name.constprop.0",
                "stab_demangle_count",
                "strcmp",
                "strtol",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_tagged_type_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "formatArgs",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "formattedPrint",
                "putc": "putCharacter",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list formatArgs)\n\n{\n  fflush(standardOutput);\n  formattedPrint(standardError,\"%s: \",programName);\n  vformattedPrint(standardError,errorMessage,formatArgs);\n  putCharacter(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00128290": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128290",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00128290"
        },
        "FUN_00128050": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128050",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00128050"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memoryToFree"
            },
            "code": "\nvoid cleanupAndFreeMemory_00108466(void)\n\n{\n  void *memoryToFree;\n  \n  status = 1;\n  bfd_nonfatal_message(0);\n  free(memoryToFree);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "FUN_00128298": {
            "renaming": {},
            "code": "\n\n\n\nint feof(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* feof@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128298",
            "calling": [
                "feof"
            ],
            "imported": false,
            "current_name": "FUN_00128298"
        },
        "FUN_00128058": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128058",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_00128058"
        },
        "FUN_00128178": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128178",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_00128178"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_integer_from_string_00108e76",
                "param_1": "stringPtr",
                "bVar1": "currentChar",
                "iVar2": "parsedInteger"
            },
            "code": "\nint parseIntegerFromString_00108e76(byte **stringPtr)\n\n{\n  byte currentChar;\n  int parsedInteger;\n  \n  parsedInteger = 0;\n  while( true ) {\n    currentChar = **stringPtr;\n    if (((&_sch_istable)[(ulong)currentChar * 2] & 4) == 0) break;\n    *stringPtr = *stringPtr + 1;\n    parsedInteger = parsedInteger * 10 + -0x30 + (int)(char)currentChar;\n  }\n  return parsedInteger;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_integer_from_string_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_hash_function_0010bb52",
                "param_1": "hash_value",
                "lVar1": "hash_func",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "create_new_function"
            },
            "code": "\nlong allocate_hash_function_0010bb52(long hash_value,undefined8 param_2,undefined8 param_3)\n\n{\n  long hash_func;\n  \n  if (((hash_value != 0) || (hash_value = allocate_hash(param_2,0x30), hash_value != 0)) &&\n     (hash_func = create_new_function(hash_value,param_2,param_3), hash_func != 0)) {\n    *(undefined8 *)(hash_func + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_func + 0x18) = 0;\n    *(undefined4 *)(hash_func + 0x28) = 0;\n    return hash_func;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "allocate_hash_function_0010bb52"
        },
        "FUN_001043b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001043b0"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "input_directory",
                "param_2": "output_directory",
                "iVar1": "access_result",
                "sStack_a8": "file_info"
            },
            "code": "\nchar * check_directory_access_0011283f(char *input_directory,char *output_directory)\n\n{\n  int access_result;\n  stat file_info;\n  \n  if ((output_directory == (char *)0x0) && (input_directory != (char *)0x0)) {\n    access_result = access(input_directory,7);\n    if (access_result == 0) {\n      access_result = stat(input_directory,&file_info);\n      if ((access_result == 0) && ((file_info.st_mode & 0xf000) == 0x4000)) {\n        output_directory = input_directory;\n      }\n    }\n  }\n  return output_directory;\n}\n\n",
            "called": [
                "access",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "FUN_001045f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "copy_section",
                "FUN_00107880",
                "FUN_0010554f",
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001045f0"
        },
        "FUN_001044d0": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "FUN_001044d0"
        },
        "FUN_001284a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284a8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001284a8"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_with_error_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPointer",
                "iVar1": "errnoValue"
            },
            "code": "\nundefined8 closeFileWithError_00108237(void)\n\n{\n  int errnoValue;\n  int *errnoPointer;\n  int fileDescriptor;\n  \n  errnoPointer = __errno_location();\n  errnoValue = *errnoPointer;\n  close(fileDescriptor);\n  *errnoPointer = errnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "close_file_with_error_00108237"
        },
        "FUN_00128088": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128088",
            "calling": [
                "strcpy"
            ],
            "imported": false,
            "current_name": "FUN_00128088"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "param_1": "filename_ptr",
                "param_2": "debug_msg_ptr",
                "param_3": "data_ptr",
                "param_4": "flag",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "result",
                "plVar2": "data_header_ptr",
                "puVar3": "memory_ptr",
                "lVar4": "loop_counter",
                "puVar5": "memory_ptr2",
                "pcVar6": "debug_msg",
                "bVar7": "flag",
                "auVar8": "return_value"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long filename_ptr,char *debug_msg_ptr,long data_ptr,uint flag,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined8 result;\n  long *data_header_ptr;\n  undefined4 *memory_ptr;\n  long loop_counter;\n  undefined4 *memory_ptr2;\n  char *debug_msg;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  debug_msg = \"\";\n  if (debug_msg_ptr != (char *)0x0) {\n    debug_msg = debug_msg_ptr;\n  }\n  if (data_ptr != 0) {\n    if (*(long *)(filename_ptr + 8) == 0) {\n      result = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      data_header_ptr = (long *)xmalloc(0x18);\n      *data_header_ptr = data_ptr;\n      *(undefined (*) [16])(data_header_ptr + 1) = ZEXT816(0);\n      memory_ptr = (undefined4 *)xmalloc(0x30);\n      *(long **)(filename_ptr + 0x18) = data_header_ptr;\n      data_header_ptr[2] = (long)memory_ptr;\n      memory_ptr2 = memory_ptr;\n      for (loop_counter = 0xc; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *memory_ptr2 = 0;\n        memory_ptr2 = memory_ptr2 + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(filename_ptr + 0x20) = memory_ptr;\n      loop_counter = *(long *)(filename_ptr + 0x10);\n      *(undefined8 *)(memory_ptr + 6) = param5;\n      *(undefined8 *)(memory_ptr + 8) = 0xffffffffffffffff;\n      loop_counter = debug_add_to_namespace_constprop_0(loop_counter + 0x10,debug_msg,3,(flag & 0xff) + 1);\n      if (loop_counter != 0) {\n        *(long **)(loop_counter + 0x20) = data_header_ptr;\n        result = CONCAT71((int7)((ulong)loop_counter >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  result = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_record_function_0010bc80"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_input_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = improve_code_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = isympp + uStack0000000000000010;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00107880",
                "non_fatal",
                "dcgettext",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_001042a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "display_info.isra.0.cold",
                "FUN_00107976",
                "print_version",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042a0"
        },
        "FUN_001044e0": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "main",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001044e0"
        },
        "FUN_001043c0": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "copy_file",
                "display_info.isra.0",
                "main",
                "simple_copy.cold",
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001043c0"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "extract_and_modify_path_00114cf0",
                "param_1": "path",
                "pcVar1": "last_slash",
                "lVar2": "path_length",
                "lVar3": "prefix_length",
                "lVar4": "slash_index",
                "pcVar5": "new_path",
                "bVar6": "found_slash"
            },
            "code": "\nvoid extract_and_modify_path_00114cf0(char *path)\n\n{\n  char *last_slash;\n  long path_length;\n  long prefix_length;\n  long slash_index;\n  char *new_path;\n  byte found_slash;\n  \n  found_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    prefix_length = 0;\n  }\n  else {\n    slash_index = (long)last_slash - (long)path;\n    last_slash = (char *)xmalloc(slash_index + 0xb);\n    prefix_length = slash_index + 1;\n    new_path = last_slash;\n    for (path_length = slash_index; path_length != 0; path_length = path_length + -1) {\n      *new_path = *path;\n      path = path + (ulong)found_slash * -2 + 1;\n      new_path = new_path + (ulong)found_slash * -2 + 1;\n    }\n    last_slash[slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + prefix_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + prefix_length) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "main",
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "extract_and_modify_path_00114cf0"
        },
        "FUN_0011a4b4": {
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_0011a4b4"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "generate_stab_string_0010a181",
                "param_1": "binaryData",
                "param_2": "startAddress",
                "param_3": "endAddress",
                "param_4": "isReversed",
                "cVar1": "isNull",
                "iVar2": "constant",
                "iVar3": "result",
                "uVar4": "output",
                "__s": "typeString",
                "__s_00": "popType",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "stabString",
                "lVar7": "counter",
                "local_41": "flag"
            },
            "code": "\nundefined4 generateStabString_0010a181(long binaryData,long startAddress,long endAddress,byte isReversed)\n\n{\n  char isNull;\n  int constant;\n  int result;\n  undefined4 output;\n  char *typeString;\n  char *popType;\n  size_t length1;\n  size_t length2;\n  char *stabString;\n  long counter;\n  byte flag;\n  \n  isNull = *(char *)(*(long *)(binaryData + 0x60) + 0x1c);\n  typeString = (char *)stab_pop_type();\n  flag = 1;\n  if (isNull == '\\0') {\n    flag = *(byte *)(*(long *)(binaryData + 0x60) + 0x1c);\n  }\n  constant = *(int *)(*(long *)(binaryData + 0x60) + 0x18);\n  popType = (char *)stab_pop_type(binaryData);\n  length1 = strlen(typeString);\n  length2 = strlen(popType);\n  stabString = (char *)xmalloc(length1 + 100 + length2);\n  if (isReversed == 0) {\n    *stabString = '\\0';\n    counter = 0;\n    flag = flag & 1;\n  }\n  else {\n    counter = *(long *)(binaryData + 0x68);\n    *(long *)(binaryData + 0x68) = counter + 1;\n    sprintf(stabString,\"%ld=@S;\",counter);\n    flag = isReversed;\n  }\n  length1 = strlen(stabString);\n  sprintf(stabString + length1,\"ar%s;%ld;%ld;%s\",typeString,startAddress,endAddress,popType);\n  free(typeString);\n  free(popType);\n  result = 0;\n  if (startAddress <= endAddress) {\n    result = constant * (((int)endAddress - (int)startAddress) + 1);\n  }\n  output = stab_push_string(binaryData,stabString,counter,flag,result);\n  if ((char)output != '\\0') {\n    free(stabString);\n  }\n  return output;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_stab_string_0010a181"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "display_architectures_001199d0",
                "pcVar4": "header",
                "sVar5": "headerSize",
                "pcVar6": "tempDir",
                "uVar7": "result",
                "piVar8": "errorNum",
                "iVar2": "target",
                "iVar3": "isUnknown",
                "ppcVar12": "archList",
                "uVar13": "maxArchLength",
                "uVar14": "archLength",
                "local_70": "paddingCount",
                "memoized_tmpdir": "cachedTempDir",
                "lVar10": "dirLength",
                "lVar11": "lineIndex",
                "iVar9": "archIndex",
                "iVar1": "columns"
            },
            "code": "\n\n\nvoid displayArchitectures_001199d0(void)\n\n{\n  int columns;\n  int target;\n  int isUnknown;\n  char *header;\n  size_t headerSize;\n  char *tempDir;\n  undefined8 result;\n  int *errorNum;\n  int archIndex;\n  long dirLength;\n  long lineIndex;\n  char **archList;\n  uint maxArchLength;\n  ulong archLength;\n  int paddingCount;\n  \n  header = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(header,\"(GNU Binutils for Debian) 2.40\");\n  if (cachedTempDir == (char *)0x0) {\n    header = getenv(\"TMPDIR\");\n    result = try_dir_lto_priv_0(header,0);\n    header = getenv(\"TMP\");\n    result = try_dir_lto_priv_0(header,result);\n    header = getenv(\"TEMP\");\n    result = try_dir_lto_priv_0(header,result);\n    result = try_dir_lto_priv_0(&DAT_0011b39a,result);\n    result = try_dir_lto_priv_0(vartmp,result);\n    header = (char *)try_dir_lto_priv_0(&tmp,result);\n    if (header == (char *)0x0) {\n      header = \".\";\n    }\n    headerSize = strlen(header);\n    tempDir = (char *)xmalloc((int)headerSize + 2);\n    cachedTempDir = strcpy(tempDir,header);\n    cachedTempDir[headerSize & 0xffffffff] = '/';\n    cachedTempDir[(int)headerSize + 1] = '\\0';\n  }\n  header = cachedTempDir;\n  headerSize = strlen(cachedTempDir);\n  dirLength = (long)(int)headerSize;\n  tempDir = (char *)xmalloc(dirLength + 9);\n  strcpy(tempDir,header);\n  *(undefined2 *)(tempDir + dirLength) = 0x6363;\n  *(undefined4 *)(tempDir + dirLength + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempDir + dirLength + 2) + 3) = 0x585858;\n  tempDir[dirLength + 8] = '\\0';\n  target = mkstemps(tempDir,0);\n  if (target == -1) {\n    errorNum = __errno_location();\n    tempDir = strerror(*errorNum);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",header,tempDir);\n                    \n    abort();\n  }\n  target = close(target);\n  if (target != 0) {\n                    \n    abort();\n  }\n  maxArchLength = 0;\n  target = 2;\n  bfd_iterate_over_targets(do_display_target);\n  unlink(tempDir);\n  free(tempDir);\n  paddingCount = 0;\n  do {\n    header = (char *)bfd_printable_arch_mach(target);\n    headerSize = strlen(header);\n    if ((int)maxArchLength < (int)(uint)headerSize) {\n      maxArchLength = (uint)headerSize;\n    }\n    target = target + 1;\n  } while (target != 0x57);\n  header = getenv(\"COLUMNS\");\n  target = paddingCount;\n  if (header != (char *)0x0) {\n    dirLength = strtol(header,(char **)0x0,10);\n    columns = (int)dirLength;\n    if (columns != 0) goto LAB_00119b11;\n  }\n  columns = 0x50;\nLAB_00119b11:\n  do {\n    paddingCount = target;\n    if (-1 < paddingCount) {\n      return;\n    }\n    lineIndex = (long)paddingCount;\n    archIndex = (columns - maxArchLength) + -1;\n    dirLength = lineIndex;\n    do {\n      target = (int)dirLength;\n      if (-1 < target) break;\n      headerSize = strlen(*(char **)(dirLength * 0x60));\n      dirLength = dirLength + 1;\n      archIndex = (archIndex - (int)headerSize) + -1;\n    } while (-1 < archIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchLength + 1),&DAT_0011b4a1);\n    for (archList = (char **)(lineIndex * 0x60);\n        ((ulong)(uint)(target - paddingCount) + lineIndex) * 0x60 - (long)archList != 0;\n        archList = archList + 0xc) {\n      printf(\"%s \",*archList);\n    }\n    archIndex = 2;\n    putc(10,_stdout);\n    do {\n      header = (char *)bfd_printable_arch_mach(archIndex,0);\n      isUnknown = strcmp(header,\"UNKNOWN!\");\n      if (isUnknown != 0) {\n        result = bfd_printable_arch_mach(archIndex,0);\n        printf(\"%*s \",(ulong)maxArchLength,result);\n        archList = (char **)(lineIndex * 0x60);\n        isUnknown = paddingCount;\n        while (target != isUnknown) {\n          if (*(char *)((long)archList + (ulong)(archIndex - 2) + 8) == '\\0') {\n            headerSize = strlen(*archList);\n            for (archLength = headerSize & 0xffffffff; (int)archLength != 0; archLength = (ulong)((int)archLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archList,_stdout);\n          }\n          isUnknown = isUnknown + 1;\n          if (target != isUnknown) {\n            putc(0x20,_stdout);\n          }\n          archList = archList + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      archIndex = archIndex + 1;\n    } while (archIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "try_dir.lto_priv.0",
                "strlen",
                "dcgettext",
                "getenv",
                "strcpy",
                "display_info.isra.0.cold",
                "do_display_target",
                "xmalloc",
                "__errno_location",
                "bfd_printable_arch_mach",
                "mkstemps",
                "close",
                "abort",
                "bfd_iterate_over_targets",
                "unlink",
                "free",
                "printf",
                "strerror",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_architectures_001199d0"
        },
        "FUN_00128198": {
            "renaming": {},
            "code": "\n\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128198",
            "calling": [
                "__assert_fail"
            ],
            "imported": false,
            "current_name": "FUN_00128198"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "extract_gnu_build_attributes_0010847a",
                "extract_gnu_build_attribute_notes_00116490": "extract_notes"
            },
            "code": "\nvoid extract_gnu_build_attributes_0010847a(void)\n\n{\n  extract_notes();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "extract_gnu_build_attributes_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "extract_string_0010d21c",
                "param_1": "arg1",
                "param_2": "byteArray",
                "param_3": "outputString",
                "bVar1": "byteVar1",
                "pbVar2": "bytePtr",
                "bVar3": "byteVar2",
                "cVar4": "charVar1",
                "bVar5": "byteVar3",
                "uVar6": "returnValue",
                "iVar7": "intVar1",
                "uVar8": "uintVar1",
                "sVar9": "size",
                "pbVar10": "bytePtr2",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "ptr3",
                "uVar12": "result",
                "pcVar13": "ptr4",
                "bVar14": "byteVar4",
                "pcVar15": "ptr5",
                "bVar16": "byteVar6",
                "bVar17": "byteVar7",
                "bVar18": "byteVar8",
                "bVar19": "byteVar9",
                "uVar20": "count",
                "uVar21": "ulongVal",
                "local_3c": "countArray"
            },
            "code": "\nundefined4 extractString_0010d21c(undefined8 arg1,byte **byteArray,undefined8 *outputString)\n\n{\n  byte byteVar1;\n  byte *bytePtr;\n  byte byteVar2;\n  char charVar1;\n  byte byteVar3;\n  undefined4 returnValue;\n  int intVar1;\n  uint uintVar1;\n  size_t size;\n  byte *bytePtr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *ptr3;\n  undefined8 result;\n  char *ptr4;\n  byte byteVar4;\n  char *ptr5;\n  byte byteVar6;\n  byte byteVar7;\n  byte byteVar8;\n  byte byteVar9;\n  uint count;\n  ulong ulongVal;\n  uint countArray [3];\n  \n  bytePtr = *byteArray;\n  *byteArray = bytePtr + 1;\n  countArray[0] = stab_demangle_count(byteArray);\n  ulongVal = (ulong)countArray[0];\n  if (countArray[0] != 0) {\n    bytePtr2 = *byteArray;\n    size = strlen((char *)bytePtr2);\n    if (ulongVal <= size) {\n      *byteArray = bytePtr2 + ulongVal;\n      count = 0;\n      returnValue = stab_demangle_get_count(byteArray,countArray);\n      if ((char)returnValue != '\\0') {\nLAB_0010d2b4:\n        if (countArray[0] <= count) {\n          if (outputString == (undefined8 *)0x0) {\n            return returnValue;\n          }\n          ptr1 = (void *)savestring(bytePtr,(int)*byteArray - (int)bytePtr);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (ptr3 = strstr(haystack,\"::NoSuchStrinG\"), ptr4 = haystack,\n             ptr5 = haystack, ptr3 != (char *)0x0)) {\n            for (; ptr4 != ptr3; ptr4 = ptr4 + 1) {\n              if ((*ptr4 != ' ') ||\n                 (((ptr4[1] == '>' && (haystack < ptr4)) && (ptr4[-1] == '>')))) {\n                *ptr5 = *ptr4;\n                ptr5 = ptr5 + 1;\n              }\n            }\n            result = savestring(haystack,(int)ptr5 - (int)haystack);\n            *outputString = result;\n            free(haystack);\n            return returnValue;\n          }\n          stab_bad_demangle(bytePtr);\n          free(haystack);\n          return 0;\n        }\n        bytePtr2 = *byteArray;\n        if (*bytePtr2 != 0x5a) {\n          byteVar3 = stab_demangle_type_lto_priv_0(arg1,byteArray,0);\n          if (byteVar3 == 0) {\n            return 0;\n          }\n          byteVar2 = 0;\n          byteVar4 = 0;\n          byteVar8 = 0;\n          byteVar7 = 0;\n          byteVar9 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byteVar6 = byteVar2;\n              byteVar1 = *bytePtr2;\n              if ((byteVar4 | byteVar1 == 0) != 0) {\n                byteVar3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byteVar2 = byteVar3;\n              byteVar4 = byteVar3;\n            } while ('v' < (char)byteVar1);\n            if ((char)byteVar1 < 'b') {\n              if ((char)byteVar1 < 'U') {\n                if ((char)byteVar1 < 'C') goto LAB_0010d2e9;\n                ulongVal = 1L << (byteVar1 + 0xbd & 0x3f);\n                if ((ulongVal & 0x11409) == 0) {\n                  if ((ulongVal & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byteVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byteVar1 + 0xab)) goto LAB_0010d2e9;\n              bytePtr2 = bytePtr2 + 1;\n              byteVar2 = byteVar6;\n              byteVar4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byteVar1) {\n            case 0x62:\n              byteVar2 = byteVar6;\n              byteVar8 = byteVar3;\n              break;\n            case 99:\n              byteVar2 = byteVar6;\n              byteVar9 = byteVar3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byteVar2 = byteVar6;\n              byteVar7 = byteVar3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *byteArray = bytePtr2 + 1;\n        charVar1 = stab_demangle_type_lto_priv_0(arg1,byteArray,0);\n        if (charVar1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  stab_bad_demangle(bytePtr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byteVar6 == 0) {\n    if (byteVar9 == 0) {\n      if (byteVar8 == 0) {\n        if (byteVar7 == 0) {\n          if (byteVar3 != 0) {\n            uintVar1 = stab_demangle_count(byteArray);\n            if (uintVar1 == 0) goto LAB_0010d280;\n            *byteArray = *byteArray + uintVar1;\n          }\n        }\n        else {\n          if (**byteArray == 0x6d) {\n            *byteArray = *byteArray + 1;\n          }\n          while( true ) {\n            bytePtr2 = *byteArray;\n            if (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) == 0) break;\n            *byteArray = bytePtr2 + 1;\n          }\n          if (*bytePtr2 == 0x2e) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *byteArray = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n          bytePtr2 = *byteArray;\n          if (*bytePtr2 == 0x65) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *byteArray = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar1 = stab_demangle_count(byteArray);\n        if (1 < uintVar1) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**byteArray == 0x6d) {\n        *byteArray = *byteArray + 1;\n      }\n      intVar1 = stab_demangle_count(byteArray);\n      if (intVar1 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**byteArray == 0x6d) {\n      *byteArray = *byteArray + 1;\n    }\n    while (((&_sch_istable)[(ulong)**byteArray * 2] & 4) != 0) {\n      *byteArray = *byteArray + 1;\n    }\n  }\nLAB_0010d2b1:\n  count = count + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "cplus_demangle",
                "savestring",
                "strlen",
                "abort",
                "strstr",
                "concat",
                "stab_demangle_type.lto_priv.0",
                "free",
                "stab_demangle_count",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "extract_string_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hastables_001054af",
                "param_1": "unused_param",
                "param_2": "unused_param",
                "in_RAX": "temp_variable_1",
                "strip_specific_htab": "specific_strip_table",
                "strip_unneeded_htab": "unneeded_strip_table",
                "keep_specific_htab": "specific_keep_table",
                "localize_specific_htab": "specific_localize_table",
                "globalize_specific_htab": "specific_globalize_table",
                "keepglobal_specific_htab": "specific_keepglobal_table",
                "weaken_specific_htab": "specific_weaken_table",
                "redefine_specific_htab": "specific_redefine_table",
                "redefine_specific_reverse_htab": "specific_reverse_redefine_table"
            },
            "code": "\nvoid cleanup_hastables_001054af(undefined8 unused_param,undefined8 unused_param)\n\n{\n  undefined8 temp_variable_1;\n  \n  htab_delete(specific_strip_table);\n  htab_delete(unneeded_strip_table);\n  htab_delete(specific_keep_table);\n  htab_delete(specific_localize_table);\n  htab_delete(specific_globalize_table);\n  htab_delete(specific_keepglobal_table);\n  htab_delete(specific_weaken_table);\n  htab_delete(specific_redefine_table);\n  htab_delete(specific_reverse_redefine_table,unused_param,temp_variable_1);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_hastables_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "process_record_0010c139",
                "param_1": "record",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "oldRecord",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "newRecord",
                "in_R10": "param7",
                "unaff_R15": "param8"
            },
            "code": "\nulong processRecord_0010c139(undefined8 record,long data,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 oldRecord;\n  char flag;\n  ulong result;\n  undefined8 *newRecord;\n  undefined8 param7;\n  undefined8 param8;\n  \n  flag = *(char *)(data + 0x60);\n  if ((flag != '\\0') && ((*(int *)(data + 0x40) != 0 || (*(char *)(data + 0x44) == '\\0')))) {\n    newRecord = (undefined8 *)xmalloc(0x28);\n    oldRecord = *(undefined8 *)(data + 0x78);\n    *(undefined8 *)((long)newRecord + 0x1c) = 0;\n    newRecord[2] = param4;\n    *(undefined4 *)(newRecord + 3) = param5;\n    newRecord[4] = param6;\n    *(undefined8 **)(data + 0x78) = newRecord;\n    *newRecord = oldRecord;\n    newRecord[1] = param3;\n    return CONCAT71((int7)((ulong)param8 >> 8),flag) & 0xffffffff;\n  }\n  result = debug_record_variable(record,param3,param4,param5,param6,param7);\n  return result;\n}\n\n",
            "called": [
                "debug_record_variable",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "process_record_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "write_symbol_to_memory_0010e439",
                "param_1": "memoryAddress",
                "param_2": "symbolValue",
                "stab_write_symbol_lto_priv_0": "storeSymbolInMemory"
            },
            "code": "\nvoid writeSymbolToMemory_0010e439(long memoryAddress,undefined8 symbolValue)\n\n{\n  *(undefined8 *)(memoryAddress + 0x210) = symbolValue;\n  storeSymbolInMemory(memoryAddress,0x84,0,0,symbolValue);\n  return;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_start_compilation_unit.lto_priv.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_memory_0010e439"
        },
        "FUN_001043d0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00104ea2",
                "main",
                "parse_stab",
                "stab_push_string",
                "FUN_0010554f",
                "save_stab"
            ],
            "imported": false,
            "current_name": "FUN_001043d0"
        },
        "FUN_001042b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "stab_modify_type",
                "FUN_00114dc7",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "stab_class_start_method.lto_priv.0",
                "stab_demangle_remember_type",
                "stab_demangle_v3_arglist",
                "do_display_target",
                "stab_class_baseclass.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "stab_class_method_var",
                "stab_demangle_arg",
                "stab_get_struct_index",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001042b0"
        },
        "FUN_001284c0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284c0",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_001284c0"
        },
        "FUN_001044f0": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "try_dir.lto_priv.0",
                "FUN_00104ea2",
                "main",
                "get_file_size"
            ],
            "imported": false,
            "current_name": "FUN_001044f0"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid pushDefinedType_00109d3e(undefined8 param1,int param2)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (param2 - 1U < 8) {\n    defaultValue = *(undefined8 *)(CSWTCH_58 + (ulong)(param2 - 1U) * 8);\n  }\n  stab_push_defined_type(param1,defaultValue,param2);\n  return;\n}\n\n",
            "called": [
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_threshold_00112502",
                "param_1": "data",
                "param_2": "config",
                "param_3": "threshold",
                "uVar1": "counter",
                "puVar2": "array_ptr",
                "uVar3": "temp",
                "cVar4": "result"
            },
            "code": "\nundefined check_threshold_00112502(long data,undefined8 config,ulong threshold)\n\n{\n  uint counter;\n  undefined8 *array_ptr;\n  undefined8 temp;\n  char result;\n  \n  do {\n    array_ptr = *(undefined8 **)(data + 0x40);\n    if (array_ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((counter = *(uint *)(data + 0x48), counter < 10 && (array_ptr[(ulong)counter + 2] != -1))) {\n      if (threshold <= (ulong)array_ptr[(ulong)counter + 0xc]) {\n        return 1;\n      }\n      result = stab_lineno_lto_priv_0(config,*(undefined8 *)(array_ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data + 0x48) = *(int *)(data + 0x48) + 1;\n    }\n    temp = *array_ptr;\n    *(undefined4 *)(data + 0x48) = 0;\n    *(undefined8 *)(data + 0x40) = temp;\n  } while( true );\n}\n\n",
            "called": [
                "stab_lineno.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "debug_write_block.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "check_threshold_00112502"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "unaff_EBP": "counter",
                "unaff_RBX": "tempPtr",
                "in_R10": "linePtr",
                "unaff_R13": "param7",
                "unaff_R14": "currentCharPtr",
                "unaff_R15": "foundCharsPtr",
                "param_7": "msg",
                "param_8": "resultPtr",
                "param_9": "inputLine"
            },
            "code": "\nvoid processLines_00104cc1(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte bVar4;\n  byte *tempPtr;\n  byte *pbVar5;\n  int counter;\n  byte *linePtr;\n  undefined8 param7;\n  byte *currentCharPtr;\n  byte *foundCharsPtr;\n  undefined8 msg;\n  undefined8 *resultPtr;\n  byte *inputLine;\n  \ncode_r0x00104cc1:\n  inputLine = linePtr;\n  uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  non_fatal(uVar1,msg,counter);\n  pbVar5 = tempPtr;\n  linePtr = inputLine;\nLAB_00114599:\n  do {\n    *linePtr = 0;\n    if (foundCharsPtr < linePtr) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = foundCharsPtr;\n    }\n    counter = counter + 1;\n    pbVar3 = pbVar5;\n    if (currentCharPtr[1] == 0) {\n      *resultPtr = param7;\n      return;\n    }\n    for (; bVar4 = *pbVar3, currentCharPtr = pbVar3, bVar4 != 10; pbVar3 = pbVar3 + 1) {\n      if ((char)bVar4 < '\\v') {\n        if (bVar4 == 0) {\n          tempPtr = pbVar3 + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (bVar4 == 0xd) {\n          *pbVar3 = 0;\n          tempPtr = pbVar3 + 1;\n          if (pbVar3[1] == 10) {\n            tempPtr = pbVar3 + 2;\n            currentCharPtr = pbVar3 + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (bVar4 == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *pbVar3 = 0;\n    if (pbVar3[1] == 0xd) {\n      currentCharPtr = pbVar3 + 1;\n      tempPtr = pbVar3 + 2;\n    }\n    else {\n      tempPtr = pbVar3 + 1;\n    }\nLAB_00114553:\n    bVar4 = *pbVar5;\n    foundCharsPtr = pbVar5;\n    while ((bVar4 == 0x20 || (linePtr = foundCharsPtr, bVar4 == 9))) {\n      pbVar5 = foundCharsPtr + 1;\n      foundCharsPtr = foundCharsPtr + 1;\n      bVar4 = *pbVar5;\n    }\n    do {\n      pbVar5 = tempPtr;\n      if ((bVar4 == 10) || (bVar4 == 0xd)) goto LAB_00114676;\n      if (bVar4 == 0) goto LAB_00114599;\n      bVar4 = linePtr[1];\n      linePtr = linePtr + 1;\n    } while ((bVar4 != 0x20) && (bVar4 != 9));\n    if ((char)bVar4 < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (bVar4 & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    bVar4 = linePtr[1];\n    if ((((((bVar4 == 9) || (bVar4 == 0x20)) && ((bVar4 = linePtr[2], bVar4 == 9 || (bVar4 == 0x20)))\n          ) && ((bVar4 = linePtr[3], bVar4 == 9 || (bVar4 == 0x20)))) &&\n        ((bVar4 = linePtr[4], bVar4 == 9 || (bVar4 == 0x20)))) &&\n       ((bVar4 = linePtr[5], bVar4 == 9 || (bVar4 == 0x20)))) {\n      bVar4 = linePtr[6];\n      pbVar3 = linePtr + 6;\n      if ((bVar4 == 9) || (bVar4 == 0x20)) {\n        do {\n          do {\n            bVar4 = pbVar3[1];\n            pbVar3 = pbVar3 + 1;\n          } while (bVar4 == 0x20);\n        } while (bVar4 == 9);\n      }\n    }\n    if ((0xd < bVar4) || ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "FUN_00104d1c",
                "non_fatal",
                "htab_find_slot",
                "dcgettext",
                "add_specific_symbols.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104cc1"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_debug_type_00113bfa",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "debugType",
                "plVar2": "debugTypePtr"
            },
            "code": "\nlong createDebugType_00113bfa(long input1,long input2)\n\n{\n  long debugType;\n  long *debugTypePtr;\n  \n  if (((input1 != 0) && (input2 != 0)) &&\n     (debugType = debug_make_type_constprop_0(0x12,0), debugType != 0)) {\n    debugTypePtr = (long *)xmalloc(0x10);\n    *debugTypePtr = input1;\n    debugTypePtr[1] = input2;\n    *(long **)(debugType + 0x10) = debugTypePtr;\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_type_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_and_drop_share_flag_00108375",
                "param_1": "param",
                "param_2": "parameters",
                "param_3": "format",
                "uVar1": "value1",
                "uVar2": "message",
                "unaff_EBX": "ebx"
            },
            "code": "\nuint check_and_drop_share_flag_00108375(undefined8 param,undefined8 *parameters,undefined8 format)\n\n{\n  undefined8 value1;\n  undefined8 message;\n  uint ebx;\n  \n  if (*(int *)(parameters[1] + 8) != 2) {\n    value1 = *parameters;\n    ebx = ebx & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(message,value1,format);\n  }\n  return ebx;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "check_new_section_flags"
            ],
            "imported": false,
            "current_name": "check_and_drop_share_flag_00108375"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "log_and_format_00109e76",
                "param_1": "logPtr",
                "param_2": "value",
                "lVar1": "previousValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid logAndFormat_00109e76(long logPtr,uint value)\n\n{\n  long previousValue;\n  char formattedString [58];\n  \n  previousValue = *(long *)(logPtr + 0x68);\n  *(long *)(logPtr + 0x68) = previousValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",previousValue,previousValue,(ulong)value);\n  stab_push_string(logPtr,formattedString,previousValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "log_and_format_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_saved_stabs_001088ae",
                "param_1": "newParam1",
                "param_2": "newParam2",
                "param_3": "newParam3",
                "param_4": "newParam4",
                "iVar1": "index",
                "lVar2": "stabIndex",
                "uVar3": "duplicatedStr"
            },
            "code": "\nulong updateSavedStabs_001088ae(undefined4 newParam1,undefined4 newParam2,undefined8 newParam3,undefined8 newParam4)\n\n{\n  int index;\n  long stabIndex;\n  undefined8 duplicatedStr;\n  \n  stabIndex = (long)saved_stabs_index * 0x18;\n  free(*(void **)(saved_stabs + stabIndex + 0x10));\n  *(undefined4 *)(saved_stabs + stabIndex) = newParam1;\n  *(undefined4 *)(saved_stabs + stabIndex + 4) = newParam2;\n  *(undefined8 *)(saved_stabs + stabIndex + 8) = newParam3;\n  duplicatedStr = xstrdup(newParam4);\n  *(undefined8 *)(saved_stabs + stabIndex + 0x10) = duplicatedStr;\n  index = saved_stabs_index + 1;\n  saved_stabs_index = index % 0x10;\n  return (long)index / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_saved_stabs_001088ae"
        },
        "FUN_001042c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "template_in_dir"
            ],
            "imported": false,
            "current_name": "FUN_001042c0"
        },
        "FUN_001041a0": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "main",
                "stab_lineno.lto_priv.0",
                "debug_start_source"
            ],
            "imported": false,
            "current_name": "FUN_001041a0"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_nested_string_0010afd5",
                "param_1": "ptr_list",
                "param_2": "data",
                "param_3": "str",
                "param_4": "len",
                "param_5": "type",
                "param_6": "result",
                "__s2": "search_str",
                "puVar2": "ptr",
                "uVar3": "var",
                "lVar4": "length",
                "puVar5": "nested_ptr",
                "puVar6": "nested_ptr_type",
                "bVar7": "flag",
                "auVar8": "return_val"
            },
            "code": "\nundefined  [16]\nfind_nested_string_0010afd5(undefined8 *ptr_list,long data,undefined8 str,undefined4 len,\n            undefined4 type,undefined8 result)\n\n{\n  int iVar1;\n  char *search_str;\n  undefined8 *ptr;\n  undefined8 var;\n  long length;\n  undefined8 *nested_ptr;\n  undefined4 *nested_ptr_type;\n  byte flag;\n  undefined return_val [16];\n  \n  flag = 0;\n  search_str = (char *)savestring(str,len);\n  for (ptr_list = (undefined8 *)*ptr_list; ptr_list != (undefined8 *)0x0;\n      ptr_list = (undefined8 *)*ptr_list) {\n    for (ptr = (undefined8 *)ptr_list[1]; ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      if ((undefined8 *)ptr[2] != (undefined8 *)0x0) {\n        for (nested_ptr = *(undefined8 **)(undefined8 *)ptr[2]; nested_ptr != (undefined8 *)0x0;\n            nested_ptr = (undefined8 *)*nested_ptr) {\n          if ((*(int *)((long)nested_ptr + 0x14) == 1) && (*(char *)nested_ptr[1] == *search_str)) {\n            iVar1 = strcmp((char *)nested_ptr[1],search_str);\n            if (iVar1 == 0) {\n              length = nested_ptr[4];\n              if (length == 0) goto LAB_0010b05b;\n              free(search_str);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  ptr = *(undefined8 **)(data + 0x1a0);\n  do {\n    if (ptr == (undefined8 *)0x0) {\n      ptr = (undefined8 *)xmalloc(0x28);\n      var = *(undefined8 *)(data + 0x1a0);\n      nested_ptr_type = (undefined4 *)((long)ptr + 0x14);\n      for (length = 5; length != 0; length = length + -1) {\n        *nested_ptr_type = 0;\n        nested_ptr_type = nested_ptr_type + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 *)(ptr + 2) = type;\n      *ptr = var;\n      ptr[1] = search_str;\n      var = debug_make_indirect_type_isra_0(ptr + 3,search_str);\n      *(undefined8 **)(data + 0x1a0) = ptr;\n      ptr[4] = var;\nLAB_0010b0e7:\n      length = ptr[4];\nLAB_0010b0eb:\n      return_val._8_8_ = result;\n      return_val._0_8_ = length;\n      return return_val;\n    }\n    if (*(char *)ptr[1] == *search_str) {\n      iVar1 = strcmp((char *)ptr[1],search_str);\n      if (iVar1 == 0) {\n        if (*(int *)(ptr + 2) == 0) {\n          *(undefined4 *)(ptr + 2) = type;\n        }\n        free(search_str);\n        goto LAB_0010b0e7;\n      }\n    }\n    ptr = (undefined8 *)*ptr;\n  } while( true );\n}\n\n",
            "called": [
                "savestring",
                "debug_make_indirect_type.isra.0",
                "free",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_nested_string_0010afd5"
        },
        "FUN_001043e0": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001043e0"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "debug_make_struct_type.isra.0",
                "debug_make_reference_type.isra.0",
                "stab_demangle_count",
                "debug_get_real_type.isra.0",
                "debug_make_type.constprop.0",
                "malloc",
                "sprintf",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_qualified",
                "debug_make_float_type.isra.0",
                "parse_number",
                "cplus_demangle_init_info",
                "debug_make_void_type.isra.0",
                "savestring",
                "strlen",
                "dcgettext",
                "strcpy",
                "xmalloc",
                "warn_stab",
                "parse_stab_type_number",
                "debug_make_enum_type.isra.0",
                "cplus_demangle_mangled_name",
                "startswith.lto_priv.0.lto_priv.0",
                "strchr",
                "stab_find_tagged_type",
                "xrealloc",
                "debug_find_named_type",
                "stab_demangle_v3_arglist",
                "stab_demangle_args",
                "stab_find_type",
                "stab_demangle_template",
                "strtol",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_make_const_type.isra.0",
                "free",
                "parse_stab_type",
                "strncmp",
                "fprintf",
                "debug_make_method_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "stab_demangle_remember_type",
                "bad_stab",
                "strcat",
                "debug_make_offset_type.isra.0",
                "strcmp",
                "stab_bad_demangle",
                "strstr",
                "strspn",
                "concat",
                "debug_make_function_type.isra.0",
                "stab_find_slot",
                "debug_get_type_name.constprop.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "offset",
                "piVar3": "stabEntry",
                "iVar4": "index"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long offset;\n  int *stabEntry;\n  int index;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  index = saved_stabs_index;\n  do {\n    offset = (long)index * 0x18;\n    stabEntry = (int *)(saved_stabs + offset);\n    if (*(long *)(saved_stabs + offset + 0x10) != 0) {\n      stabName = bfd_get_stab_name(*stabEntry);\n      if (stabName == 0) {\n        if (*stabEntry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(saved_stabs + offset + 4));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(saved_stabs + offset + 8));\n      if (*stabEntry != 0) {\n        fprintf(_stderr,\" %s\",*(undefined8 *)(saved_stabs + offset + 0x10));\n      }\n      fputc(10,_stderr);\n    }\n    index = (index + 1) % 0x10;\n  } while (saved_stabs_index != index);\n  return param_3;\n}\n\n",
            "called": [
                "fwrite",
                "fputc",
                "dcgettext",
                "bfd_get_stab_name",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "modify_stab_type_0010a083",
                "param_1": "data",
                "stab_modify_type": "modifyStabType"
            },
            "code": "\nvoid modifyStabType_0010a083(long data)\n\n{\n  modifyStabType_0010a083(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a083"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_update_array_00109c2e",
                "param_1": "array",
                "param_2": "data",
                "param_3": "array_size",
                "param_4": "flag",
                "param_5": "output",
                "param_6": "value",
                "lVar1": "new_array",
                "plVar2": "array_element",
                "lVar3": "remaining_elements",
                "puVar4": "current_element",
                "uVar5": "current_size",
                "bVar6": "is_allocated",
                "auVar7": "result"
            },
            "code": "\nundefined  [16]\nresize_and_update_array_00109c2e(long array,long data,ulong array_size,int flag,undefined4 *output,\n            undefined8 value)\n\n{\n  long new_array;\n  long *array_element;\n  long remaining_elements;\n  undefined *current_element;\n  ulong current_size;\n  byte is_allocated;\n  undefined result [16];\n  \n  is_allocated = 0;\n  array_size = array_size & 0xffffffff;\n  current_size = *(ulong *)(array + 0x1b0);\n  if (current_size <= array_size) {\n    if (current_size == 0) {\n      current_size = 10;\n    }\n    for (; current_size <= array_size; current_size = current_size * 2) {\n    }\n    new_array = xrealloc(*(undefined8 *)(array + 0x1a8),current_size * 0x18);\n    *(long *)(array + 0x1a8) = new_array;\n    current_element = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + new_array);\n    for (remaining_elements = (current_size - *(long *)(array + 0x1b0)) * 0x18; remaining_elements != 0; remaining_elements = remaining_elements + -1) {\n      *current_element = 0;\n      current_element = current_element + (ulong)is_allocated * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = current_size;\n  }\n  array_element = (long *)(array_size * 0x18 + *(long *)(array + 0x1a8));\n  if (*array_element == 0) {\n    new_array = *(long *)(array + 0x68);\n    *array_element = new_array;\n    *(long *)(array + 0x68) = new_array + 1;\n    array_element[1] = data;\n    *(int *)(array_element + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(array_element + 2) = 0;\n    *(undefined4 *)((long)array_element + 0x14) = *output;\n  }\n  else {\n    *output = *(undefined4 *)((long)array_element + 0x14);\n  }\n  result._8_8_ = value;\n  result._0_8_ = *array_element;\n  return result;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "stab_start_struct_type.lto_priv.0",
                "stab_tag_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "resize_and_update_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_bad_format_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nvoid printBadFormatErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = getErrorMessage(0,\"bad format for %s\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "init_section_add"
            ],
            "imported": false,
            "current_name": "print_bad_format_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_const_to_namespace_00112996",
                "param_1": "namespace",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "offset"
            },
            "code": "\n\n\nundefined8 addConstToNamespace_00112996(long namespace,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(namespace + 8) != 0) && (*(long *)(namespace + 0x10) != 0)) {\n    offset = *(long *)(namespace + 0x10) + 0x10;\n    if (*(long *)(namespace + 0x20) != 0) {\n      offset = *(long *)(namespace + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(offset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "add_const_to_namespace_00112996"
        },
        "FUN_001284b8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284b8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_001284b8"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "param_1": "debug_info_ptr",
                "param_2": "class_name",
                "param_3": "class_id",
                "uVar1": "result",
                "uVar2": "temp_var",
                "lVar3": "struct_ptr",
                "piVar4": "temp_ptr",
                "__s1": "existing_class_name",
                "cVar5": "is_same_debug_type",
                "iVar6": "counter",
                "puVar7": "new_struct_ptr",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long debug_info_ptr,char *class_name,int *class_id,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint temp_var;\n  long struct_ptr;\n  int *temp_ptr;\n  char *existing_class_name;\n  char is_same_debug_type;\n  int counter;\n  undefined8 *new_struct_ptr;\n  undefined return_value [16];\n  \n  if (3 < *class_id - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  struct_ptr = *(long *)(class_id + 4);\n  new_struct_ptr = (undefined8 *)(ulong)*(uint *)(struct_ptr + 0xc);\n  if (*(uint *)(struct_ptr + 0xc) <= *(uint *)(debug_info_ptr + 0x38)) {\n    for (new_struct_ptr = *(undefined8 **)(debug_info_ptr + 0x50); new_struct_ptr != (undefined8 *)0x0;\n        new_struct_ptr = (undefined8 *)*new_struct_ptr) {\n      temp_ptr = (int *)new_struct_ptr[1];\n      if (*temp_ptr == *class_id) {\n        existing_class_name = (char *)new_struct_ptr[2];\n        if (class_name == (char *)0x0) {\n          if (existing_class_name == (char *)0x0) {\nLAB_0010c82c:\n            is_same_debug_type = debug_type_samep(debug_info_ptr,temp_ptr,class_id);\n            if (is_same_debug_type != '\\0') {\n              temp_var = *(uint *)(*(long *)(new_struct_ptr[1] + 0x10) + 0xc);\n              new_struct_ptr = (undefined8 *)(ulong)temp_var;\n              *(uint *)(struct_ptr + 0xc) = temp_var;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_class_name != (char *)0x0) && (*existing_class_name == *class_name)) &&\n                (counter = strcmp(existing_class_name,class_name), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(debug_info_ptr + 0x34) + 1;\n    *(int *)(debug_info_ptr + 0x34) = counter;\n    *(int *)(struct_ptr + 0xc) = counter;\n    new_struct_ptr = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(debug_info_ptr + 0x50);\n    new_struct_ptr[2] = class_name;\n    *(undefined8 **)(debug_info_ptr + 0x50) = new_struct_ptr;\n    *new_struct_ptr = result;\n    new_struct_ptr[1] = class_id;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)new_struct_ptr >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "called": [
                "__assert_fail",
                "debug_type_samep",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "debug_set_class_id_0010c7a0"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "param1",
                "param_2": "array1",
                "param_3": "array2",
                "uVar1": "value1",
                "uVar2": "value2",
                "pplVar3": "pointerArray1",
                "ppcVar4": "pointerPointerChar1",
                "ppcVar5": "pointerPointerChar2",
                "lVar6": "length1",
                "lVar7": "length2",
                "lVar8": "length3",
                "pcVar9": "charPointer1",
                "pcVar10": "charPointer2",
                "cVar11": "result",
                "bVar12": "isEqual",
                "iVar13": "comparisonResult",
                "uVar14": "realType1",
                "uVar15": "realType2",
                "puVar16": "pointer1",
                "puVar17": "pointer2",
                "plVar18": "pointer3",
                "lVar19": "offset",
                "plVar20": "pointer4",
                "plVar21": "pointer5",
                "lVar22": "offset2",
                "local_70": "localArray1",
                "local_58": "localPointerArray1",
                "plStack_50": "stackPointer1",
                "local_48": "localArray2"
            },
            "code": "\nbyte checkEquality_0010922b(long param1,long *array1,long *array2)\n\n{\n  uint value1;\n  uint value2;\n  long **pointerArray1;\n  char **pointerPointerChar1;\n  char **pointerPointerChar2;\n  long length1;\n  long length2;\n  long length3;\n  char *charPointer1;\n  char *charPointer2;\n  char result;\n  byte isEqual;\n  int comparisonResult;\n  undefined8 realType1;\n  undefined8 realType2;\n  undefined8 *pointer1;\n  undefined8 *pointer2;\n  long *pointer3;\n  long offset;\n  long *pointer4;\n  long *pointer5;\n  long offset2;\n  long *localArray1;\n  undefined8 *localPointerArray1;\n  long *stackPointer1;\n  long *localArray2;\n  \n  pointer3 = array2;\n  if (array1 == (long *)0x0) {\nLAB_00109241:\n    return array2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (pointer3 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1 = *(uint *)array1;\n    if (value1 == 1) goto code_r0x00109263;\n    while (value2 = *(uint *)array2, value2 == 1) {\n      array2 = **(long ***)array2[2];\n      if (array2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (value1 != 0x16) break;\n    if (value2 != 0x17) goto LAB_001092cb;\n    array1 = *(long **)(array1[2] + 8);\n    if (array1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((value1 == 0x17) && (value2 == 0x16)) {\n    array2 = *(long **)(array2[2] + 8);\n    pointer3 = array2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (value1 == 3) {\n    return *(char *)(array1 + 2) == *(char *)(array2 + 2);\n  }\n  if (value1 < 4) {\n    if (value1 == 2) {\n      return true;\n    }\n  }\n  else if (value1 - 4 < 3) {\n    return true;\n  }\n  localPointerArray1 = *(undefined8 **)(param1 + 0x58);\n  for (pointer2 = localPointerArray1; pointer2 != (undefined8 *)0x0; pointer2 = (undefined8 *)*pointer2) {\n    if (((long *)pointer2[1] == array1) && ((long *)pointer2[2] == array2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &localPointerArray1;\n  stackPointer1 = array1;\n  localArray2 = array2;\n  switch(value1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    pointer3 = (long *)array1[2];\n    pointerArray1 = (long **)array2[2];\n    if (pointer3 == (long *)0x0) {\n      isEqual = pointerArray1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (pointerArray1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)pointer3 + 0xc)) &&\n       (*(uint *)((long)pointer3 + 0xc) == *(uint *)((long)pointerArray1 + 0xc))) goto LAB_001097af;\n    pointer2 = (undefined8 *)*pointer3;\n    localArray1 = *pointerArray1;\n    if (((pointer2 == (undefined8 *)0x0) == (localArray1 == (long *)0x0)) &&\n       ((((pointer3[2] == 0) == (pointerArray1[2] == (long *)0x0) &&\n         ((pointer3[3] == 0) == (pointerArray1[3] == (long *)0x0))) &&\n        ((pointer3[4] == 0) == (pointerArray1[4] == (long *)0x0))))) {\n      if (pointer2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((pointer3[4] != 0) &&\n           (result = checkEquality_0010922b(param1,pointer3[4],pointerArray1[4]), result == '\\0'))\n        goto LAB_00109382;\n        pointer5 = (long *)pointer3[2];\n        if (pointer5 == (long *)0x0) {\nLAB_00109540:\n          pointer2 = (undefined8 *)pointer3[3];\n          if (pointer2 == (undefined8 *)0x0) goto LAB_001097af;\n          pointer3 = pointerArray1[3];\n          while( true ) {\n            pointerPointerChar2 = (char **)*pointer2;\n            if (pointerPointerChar2 == (char **)0x0) {\n              isEqual = *pointer3 == 0;\n              goto LAB_001099c4;\n            }\n            pointerPointerChar1 = (char **)*pointer3;\n            if (pointerPointerChar1 == (char **)0x0) break;\n            if ((**pointerPointerChar2 != **pointerPointerChar1) || (comparisonResult = strcmp(*pointerPointerChar2,*pointerPointerChar1), comparisonResult != 0))\n            break;\n            charPointer1 = pointerPointerChar2[1];\n            charPointer2 = pointerPointerChar1[1];\n            if ((charPointer1 == (char *)0x0) != (charPointer2 == (char *)0x0)) break;\n            if (charPointer1 != (char *)0x0) {\n              offset2 = 0;\n              while( true ) {\n                pointerPointerChar2 = *(char ***)(charPointer1 + offset2);\n                pointerPointerChar1 = *(char ***)(charPointer2 + offset2);\n                if (pointerPointerChar2 == (char **)0x0) break;\n                if (pointerPointerChar1 == (char **)0x0) goto LAB_00109382;\n                if ((((**pointerPointerChar2 != **pointerPointerChar1) ||\n                     ((((ulong)pointerPointerChar2[2] ^ (ulong)pointerPointerChar1[2]) & 0xffffffffffff) != 0)) ||\n                    ((pointerPointerChar2[3] != pointerPointerChar1[3] ||\n                     ((((pointerPointerChar2[4] == (char *)0x0) != (pointerPointerChar1[4] == (char *)0x0) ||\n                       (comparisonResult = strcmp(*pointerPointerChar2,*pointerPointerChar1), comparisonResult != 0)) ||\n                      (result = checkEquality_0010922b(param1,pointerPointerChar2[1],pointerPointerChar1[1]), result == '\\0')))))) ||\n                   ((pointerPointerChar2[4] != (char *)0x0 &&\n                    (result = checkEquality_0010922b(param1,pointerPointerChar2[4],pointerPointerChar1[4]), result == '\\0'))))\n                goto LAB_00109382;\n                offset2 = offset2 + 8;\n              }\n              if (pointerPointerChar1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            pointer2 = pointer2 + 1;\n            pointer3 = pointer3 + 1;\n          }\n        }\n        else {\n          pointer4 = pointerArray1[2];\n          for (; pointer2 = (undefined8 *)*pointer5, pointer2 != (undefined8 *)0x0;\n              pointer5 = pointer5 + 1) {\n            pointer1 = (undefined8 *)*pointer4;\n            if ((((pointer1 == (undefined8 *)0x0) ||\n                 (((pointer2[1] ^ pointer1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(pointer2 + 2) != *(int *)(pointer1 + 2))) ||\n               (result = checkEquality_0010922b(param1,*pointer2,*pointer1), result == '\\0'))\n            goto LAB_00109382;\n            pointer4 = pointer4 + 1;\n          }\n          if (*pointer4 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; pointerPointerChar2 = (char **)*pointer2, pointerPointerChar2 != (char **)0x0; pointer2 = pointer2 + 1) {\n          pointerPointerChar1 = (char **)*localArray1;\n          if (pointerPointerChar1 == (char **)0x0) goto LAB_00109382;\n          charPointer1 = *pointerPointerChar1;\n          charPointer2 = *pointerPointerChar2;\n          if ((*charPointer2 != *charPointer1) ||\n             ((((ulong)pointerPointerChar2[2] ^ (ulong)pointerPointerChar1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)pointerPointerChar2 + 0x14) == '\\0') {\n            if (pointerPointerChar2[3] == pointerPointerChar1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparisonResult = strcmp(pointerPointerChar2[3],pointerPointerChar1[3]);\n          if (comparisonResult != 0) goto LAB_00109382;\nLAB_00109480:\n          comparisonResult = strcmp(charPointer2,charPointer1);\n          if (((comparisonResult != 0) || (pointerPointerChar2[1] == (char *)0x0)) || (pointerPointerChar1[1] == (char *)0x0))\n          goto LAB_00109382;\n          realType1 = debug_get_real_type_isra_0(pointerPointerChar1[1],0);\n          realType2 = debug_get_real_type_isra_0(pointerPointerChar2[1],0);\n          result = checkEquality_0010922b(param1,realType2,realType1);\n          if (result == '\\0') goto LAB_00109382;\n          localArray1 = localArray1 + 1;\n        }\n        if (*localArray1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    pointer3 = (long *)array1[2];\n    pointer5 = (long *)array2[2];\n    if (pointer3 == (long *)0x0) {\n      isEqual = pointer5 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (pointer5 == (long *)0x0) goto LAB_00109382;\n    offset2 = *pointer3;\n    length1 = *pointer5;\n    offset = 0;\n    length2 = pointer3[1];\n    length3 = pointer5[1];\n    do {\n      charPointer1 = *(char **)(offset2 + offset);\n      if (charPointer1 == (char *)0x0) {\n        isEqual = *(long *)(length1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      charPointer2 = *(char **)(length1 + offset);\n      if (((charPointer2 == (char *)0x0) || (*charPointer1 != *charPointer2)) ||\n         (*(long *)(length2 + offset) != *(long *)(length3 + offset))) break;\n      comparisonResult = strcmp(charPointer1,charPointer2);\n      offset = offset + 8;\n    } while (comparisonResult == 0);\nLAB_00109964:\n    isEqual = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    isEqual = checkEquality_0010922b(param1,array1[2],array2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)array1[2] + 2) == *(char *)((undefined8 *)array2[2] + 2)) &&\n       (result = checkEquality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n       result != '\\0')) {\n      pointer3 = *(long **)(array1[2] + 8);\n      pointer5 = *(long **)(array2[2] + 8);\n      if ((pointer3 == (long *)0x0) == (pointer5 == (long *)0x0)) {\n        if (pointer3 == (long *)0x0) goto LAB_001097af;\n        while (((*pointer3 != 0 && (*pointer5 != 0)) &&\n               (result = checkEquality_0010922b(param1), result != '\\0'))) {\n          pointer3 = pointer3 + 1;\n          pointer5 = pointer5 + 1;\n        }\nLAB_0010995d:\n        if (*pointer3 != 0) goto LAB_00109964;\n        isEqual = *pointer5 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    pointer2 = (undefined8 *)array2[2];\n    pointer1 = (undefined8 *)array1[2];\n    isEqual = 0;\n    if ((pointer1[1] == pointer2[1]) && (pointer1[2] == pointer2[2])) {\nLAB_00109862:\n      isEqual = checkEquality_0010922b(param1,*pointer1,*pointer2);\n    }\n    break;\n  case 0x10:\n    pointer2 = (undefined8 *)array2[2];\n    pointer1 = (undefined8 *)array1[2];\n    isEqual = 0;\n    if (((pointer1[2] == pointer2[2]) && (pointer1[3] == pointer2[3])) &&\n       (*(char *)(pointer1 + 4) == *(char *)(pointer2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    pointer2 = (undefined8 *)array2[2];\n    pointer1 = (undefined8 *)array1[2];\n    isEqual = 0;\n    if (*(char *)(pointer1 + 1) == *(char *)(pointer2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = checkEquality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]);\n    isEqual = 0;\n    if (result != '\\0') {\n      isEqual = checkEquality_0010922b(param1,*(undefined8 *)(array1[2] + 8),*(undefined8 *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)array1[2] + 3) == *(char *)((undefined8 *)array2[2] + 3)) &&\n        (result = checkEquality_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n        result != '\\0')) &&\n       (result = checkEquality_0010922b(param1,*(undefined8 *)(array1[2] + 8),\n                              *(undefined8 *)(array2[2] + 8)), result != '\\0')) {\n      pointer3 = *(long **)(array1[2] + 0x10);\n      pointer5 = *(long **)(array2[2] + 0x10);\n      if ((pointer3 == (long *)0x0) == (pointer5 == (long *)0x0)) {\n        if (pointer3 != (long *)0x0) {\n          while (((*pointer3 != 0 && (*pointer5 != 0)) &&\n                 (result = checkEquality_0010922b(param1), result != '\\0'))) {\n            pointer3 = pointer3 + 1;\n            pointer5 = pointer5 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        isEqual = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    isEqual = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    pointer3 = (long *)array2[2];\n    pointer5 = (long *)array1[2];\n    comparisonResult = strcmp(*(char **)(*pointer5 + 8),*(char **)(*pointer3 + 8));\n    isEqual = 0;\n    if (comparisonResult == 0) {\n      isEqual = checkEquality_0010922b(param1,pointer5[1],pointer3[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  isEqual = isEqual & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = localPointerArray1;\n  return isEqual;\ncode_r0x00109263:\n  array1 = **(long ***)array1[2];\n  pointer3 = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "abort",
                "debug_type_samep",
                "strcmp",
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "debug_set_class_id.lto_priv.0",
                "debug_type_samep"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "FUN_00104900": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104900"
        },
        "FUN_00104908": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104908"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "archivePath",
                "cVar1": "formatValid",
                "iVar2": "arch",
                "iVar3": "statResult",
                "ppcVar4": "archiveList",
                "lVar5": "readResult",
                "uVar6": "errorStr",
                "__format": "messageFormat",
                "puVar7": "tempDir",
                "piVar8": "errnoLoc",
                "uVar9": "translatedError",
                "in_RAX": "fileDesc",
                "pcVar10": "filePath",
                "ppcVar11": "nextArchiveFile",
                "lVar12": "fileSize",
                "pvVar13": "tempMemory",
                "pcVar14": "closeFunc",
                "lVar15": "bytesRemaining",
                "pcVar16": "currentChar",
                "psVar17": "currentStat",
                "unaff_R14": "tempDirList",
                "unaff_R15": "archiveFileList",
                "bVar18": "zeroByte",
                "unaff_retaddr": "returnAddr",
                "in_stack_00000008": "archiveNamePtr",
                "in_stack_00000010": "lvar10",
                "in_stack_00000018": "tempDirName",
                "in_stack_00000020": "lvar20",
                "in_stack_00000028": "copyOptions",
                "in_stack_00000030": "flag",
                "in_stack_000000f8": "filePermission",
                "in_stack_00000110": "totalSize",
                "status": "statusCode"
            },
            "code": "\nvoid extractArchive_001052a2(undefined8 param1,undefined8 param2,char *archivePath)\n\n{\n  char formatValid;\n  int arch;\n  int statResult;\n  char **archiveList;\n  long readResult;\n  undefined8 errorStr;\n  char *messageFormat;\n  undefined8 *tempDir;\n  int *errnoLoc;\n  undefined8 translatedError;\n  long fileDesc;\n  char *filePath;\n  char **nextArchiveFile;\n  long fileSize;\n  void *tempMemory;\n  code *closeFunc;\n  long bytesRemaining;\n  char *currentChar;\n  stat *currentStat;\n  undefined8 *tempDirList;\n  char **archiveFileList;\n  byte zeroByte;\n  undefined8 returnAddr;\n  undefined8 *archiveNamePtr;\n  long *lvar10;\n  char *tempDirName;\n  undefined8 *lvar20;\n  undefined8 copyOptions;\n  undefined8 flag;\n  uint filePermission;\n  long totalSize;\n  \n  zeroByte = 0;\n  filePath = (char *)(fileDesc + 1);\n  do {\n    if (*filePath == '/') {\n      extractArchive_001052a2();\n      return;\n    }\n    while (*filePath == '\\0') {\n      filePath = (char *)concat(tempDirName,&DAT_0011b47d);\n      statResult = stat(filePath,(stat *)&stack0x00000050);\n      tempDir = tempDirList;\n      if (-1 < statResult) {\n        fileSize = make_tempdir(filePath);\n        free(filePath);\n        if (fileSize == 0) {\n          errnoLoc = __errno_location();\n          filePath = strerror(*errnoLoc);\n          translatedError = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(translatedError,filePath);\n          goto LAB_00104e93;\n        }\n        tempDir = (undefined8 *)xmalloc(0x18);\n        filePath = *archiveFileList;\n        *tempDir = tempDirList;\n        tempDir[2] = 0;\n        tempDir[1] = fileSize;\n        filePath = (char *)concat(fileSize,&DAT_0011b47d,filePath);\n      }\n      statResult = 0;\n      if (preserve_dates != '\\0') {\n        currentStat = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&currentStat->st_dev = 0;\n          currentStat = (stat *)((long)currentStat + (ulong)zeroByte * -8 + 4);\n        }\n        nextArchiveFile = (char **)archiveFileList[0x1d];\n        if ((char **)archiveFileList[0x1d] == (char **)0x0) {\n          nextArchiveFile = archiveFileList;\n        }\n        statResult = (**(code **)(nextArchiveFile[1] + 0x1e8))(archiveFileList,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          currentChar = *archiveFileList;\n          translatedError = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(translatedError,currentChar);\n        }\n      }\n      tempDirList = (undefined8 *)xmalloc(0x18);\n      tempDirList[1] = filePath;\n      *tempDirList = tempDir;\n      tempDirList[2] = 0;\n      formatValid = bfd_check_format(archiveFileList,1);\n      if (formatValid == '\\0') {\n        translatedError = dcgettext(0,\"Unable to recognise the format of file\",5);\n        bfd_nonfatal_message(0,archiveFileList,0,translatedError);\n        nextArchiveFile = (char **)bfd_openw(filePath,copyOptions);\n        if (nextArchiveFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        archiveList = (char **)archiveFileList[0x1d];\n        if ((char **)archiveFileList[0x1d] == (char **)0x0) {\n          archiveList = archiveFileList;\n        }\n        arch = (**(code **)(archiveList[1] + 0x1e8))(archiveFileList,&stack0x000000e0);\n        fileSize = totalSize;\n        if (arch == 0) {\n          if (totalSize < 0) {\n            translatedError = bfd_get_archive_filename(archiveFileList);\n            errorStr = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            non_fatal(errorStr,translatedError);\n          }\n          else {\n            arch = bfd_seek(archiveFileList,0,0);\n            if (arch == 0) {\n              if (verbose != '\\0') {\n                currentChar = *nextArchiveFile;\n                translatedError = bfd_get_archive_filename(archiveFileList);\n                messageFormat = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(messageFormat,translatedError,currentChar);\n              }\n              tempMemory = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - bytesRemaining) {\n                bytesRemaining = 0x2000;\n                if (fileSize < 0x2001) {\n                  bytesRemaining = fileSize;\n                }\n                readResult = bfd_bread(tempMemory,bytesRemaining,archiveFileList);\n                archiveList = archiveFileList;\n                if ((bytesRemaining != readResult) ||\n                   (readResult = bfd_bwrite(tempMemory,bytesRemaining,nextArchiveFile), archiveList = nextArchiveFile, bytesRemaining != readResult\n                   )) {\n                  bfd_nonfatal_message(0,archiveList,0,0);\n                  free(tempMemory);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*nextArchiveFile,filePermission | 0x100);\n              free(tempMemory);\n              formatValid = bfd_close_all_done(nextArchiveFile);\n              if (formatValid == '\\0') {\n                bfd_nonfatal_message(filePath,0,0,0);\n                statusCode = 1;\n              }\n              goto LAB_00114a86;\n            }\n            translatedError = bfd_get_archive_filename(archiveFileList);\n            bfd_nonfatal(translatedError);\n          }\n        }\n        else {\n          bfd_nonfatal_message(0,archiveFileList,0,0);\n        }\nLAB_00104f00:\n        formatValid = bfd_close_all_done(nextArchiveFile);\n        if (formatValid == '\\0') {\n          bfd_nonfatal_message(filePath,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(filePath);\n        statusCode = 1;\n      }\n      else {\n        if (flag._7_1_ == '\\0') {\n          nextArchiveFile = (char **)bfd_openw(filePath,*(undefined8 *)archiveFileList[1]);\n        }\n        else {\n          nextArchiveFile = (char **)bfd_openw(filePath,copyOptions);\n        }\n        if (nextArchiveFile == (char **)0x0) {\nLAB_00104e80:\n          bfd_nonfatal_message(filePath,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatValid = copy_object(archiveFileList,nextArchiveFile,returnAddr);\n        if (formatValid == '\\0') {\n          arch = bfd_get_arch(archiveFileList);\n          if (arch == 0) goto LAB_00104d75;\n          formatValid = bfd_close_all_done(nextArchiveFile);\n          if (formatValid == '\\0') {\n            bfd_nonfatal_message(filePath,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatValid = bfd_close(nextArchiveFile);\n        if (formatValid == '\\0') {\n          bfd_nonfatal_message(filePath,0,0,0);\n          statusCode = 1;\n        }\nLAB_00114a86:\n        if ((preserve_dates != '\\0') && (statResult == 0)) {\n          set_times(filePath,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(filePath,copyOptions);\n        tempDirList[2] = fileSize;\n        *lvar10 = fileSize;\n        lvar10 = (long *)(fileSize + 0xf0);\n        nextArchiveFile = (char **)bfd_openr_next_archived_file(lvar20,archiveFileList);\n        bfd_close(archiveFileList);\n        archiveFileList = nextArchiveFile;\n      }\n      if ((statusCode != 0) || (archiveFileList == (char **)0x0)) {\n        *lvar10 = 0;\n        tempMemory = (void *)xstrdup(*archiveNamePtr);\n        if (statusCode == 0) {\n          closeFunc = bfd_close;\n        }\n        else {\n          closeFunc = bfd_close_all_done;\n        }\n        formatValid = (*closeFunc)(archiveNamePtr);\n        if (formatValid == '\\0') {\n          statusCode = 1;\n          bfd_nonfatal_message(tempMemory,0,0,0);\n        }\n        free(tempMemory);\n        tempMemory = (void *)xstrdup(*lvar20);\n        formatValid = bfd_close(lvar20);\n        if (formatValid == '\\0') {\n          statusCode = 1;\n          bfd_nonfatal_message(tempMemory,0,0,0);\n        }\n        free(tempMemory);\n        goto LAB_00114b4b;\n      }\n      filePath = *archiveFileList;\n      archivePath = filePath;\n      if (*filePath == '/') goto LAB_0010527d;\n    }\n    currentChar = filePath;\n    if ((*filePath == '.') && (currentChar = filePath + 1, filePath[1] == '.')) {\n      currentChar = filePath + 2;\n      if ((filePath[2] == '\\0') || (filePath[2] == '/')) {\nLAB_0010527d:\n        translatedError = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(translatedError,archivePath);\nLAB_00104e93:\n        statusCode = 1;\nLAB_00114b4b:\n        while (tempDirList != (undefined8 *)0x0) {\n          if (tempDirList[2] == 0) {\n            rmdir((char *)tempDirList[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)tempDirList[1]);\n          }\n          free((void *)tempDirList[1]);\n          tempDir = (undefined8 *)*tempDirList;\n          free(tempDirList);\n          tempDirList = tempDir;\n        }\n        rmdir(tempDirName);\n        free(tempDirName);\n        return;\n      }\n    }\n    for (; (filePath = currentChar, *currentChar != '\\0' && (*currentChar != '/')); currentChar = currentChar + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_archive_001052a2"
        },
        "FUN_001041b0": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001041b0"
        },
        "FUN_001043f0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "list_supported_targets",
                "list_matching_formats",
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_001043f0"
        },
        "FUN_001042d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001042d0"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "process_stab_data_0010e453",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "lVar1": "currentPointer",
                "cVar2": "result",
                "sVar3": "length",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "tempLength",
                "ppcVar6": "currentString",
                "lVar7": "offset"
            },
            "code": "\nundefined8 processStabData_0010e453(long arg1,char *arg2,char **arg3)\n\n{\n  long currentPointer;\n  char result;\n  size_t length;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long tempLength;\n  char **currentString;\n  long offset;\n  \n  if (arg3 == (char **)0x0) {\n    if (arg2 != (char *)0x0) {\n      length = strlen(arg2);\n      formattedString = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)formattedString,\"xe%s:\",arg2);\nLAB_0010e578:\n      result = stab_push_string(arg1,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    tempLength = 10;\n    currentString = arg3;\n    if (arg2 != (char *)0x0) {\n      length = strlen(arg2);\n      tempLength = length + 10;\n    }\n    for (; *currentString != (char *)0x0; currentString = currentString + 1) {\n      length = strlen(*currentString);\n      tempLength = tempLength + 0x14 + length;\n    }\n    formattedString = (undefined2 *)xmalloc(tempLength);\n    if (arg2 == (char *)0x0) {\n      *formattedString = 0x65;\n      tempLength = 0;\n    }\n    else {\n      tempLength = *(long *)(arg1 + 0x68);\n      *(long *)(arg1 + 0x68) = tempLength + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",arg2,tempLength);\n    }\n    offset = 0;\n    while( true ) {\n      currentPointer = *(long *)((long)arg3 + offset);\n      length = strlen((char *)formattedString);\n      if (currentPointer == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + length) = 0x3b;\n    if (arg2 == (char *)0x0) goto LAB_0010e578;\n    result = stab_write_symbol_lto_priv_0(arg1,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = stab_push_defined_type(arg1,tempLength,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_stab_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "param_1": "input",
                "lVar1": "structIndex",
                "uVar2": "result"
            },
            "code": "\nundefined8 pushDefinedType_00109d5c(undefined8 input)\n\n{\n  long structIndex;\n  undefined8 result;\n  \n  structIndex = stab_get_struct_index();\n  if (-1 < structIndex) {\n    result = stab_push_defined_type(input,structIndex,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "stab_get_struct_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_symbol_value_0010ed2c",
                "param_1": "symbol_table_ptr",
                "param_2": "new_value",
                "param_3": "extra_info",
                "cVar1": "is_write_successful",
                "iVar2": "count",
                "uVar3": "updated_value",
                "in_R10": "additional_info",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] update_symbol_value_0010ed2c(long symbol_table_ptr,ulong new_value,undefined8 extra_info)\n\n{\n  char is_write_successful;\n  int count;\n  undefined8 extraout_RDX;\n  ulong updated_value;\n  undefined8 additional_info;\n  undefined result [16];\n  \n  if (*(ulong *)(symbol_table_ptr + 0x1f0) < new_value) {\n    *(ulong *)(symbol_table_ptr + 0x1f0) = new_value;\n  }\n  if (*(long *)(symbol_table_ptr + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(symbol_table_ptr + 0x1f8) != 0) {\n      count = *(int *)(symbol_table_ptr + 0x1f8) + -1;\n      updated_value = CONCAT71((int7)((ulong)extra_info >> 8),1);\n      *(int *)(symbol_table_ptr + 0x1f8) = count;\n      if (count != 0) {\n        result = stab_write_symbol_lto_priv_0\n                           (symbol_table_ptr,0xe0,0,new_value - *(long *)(symbol_table_ptr + 0x200),0,additional_info);\n        return result;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    is_write_successful = stab_write_symbol_lto_priv_0(symbol_table_ptr,0xc0,0,*(long *)(symbol_table_ptr + 0x208),0);\n    if (is_write_successful != '\\0') {\n      *(undefined8 *)(symbol_table_ptr + 0x208) = 0xffffffffffffffff;\n      extra_info = extraout_RDX;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_value = 0;\nLAB_0010edae:\n  result._0_8_ = updated_value & 0xffffffff;\n  result._8_8_ = additional_info;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_value_0010ed2c"
        },
        "FUN_001284e8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284e8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001284e8"
        },
        "FUN_001283c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283c8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_001283c8"
        },
        "FUN_0010e451": {
            "renaming": {},
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_0010e451"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "memBlock1",
                "param_2": "memBlock2",
                "param_3": "paramA",
                "param_4": "paramB",
                "uVar1": "sizeBlock1",
                "uVar2": "sizeBlock2",
                "iVar3": "result",
                "extraout_var": "comparisonResult",
                "uVar4": "combinedResult",
                "auVar5": "returnVal"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *memBlock1,ulong *memBlock2,undefined8 paramA,undefined8 paramB)\n\n{\n  ulong sizeBlock1;\n  ulong sizeBlock2;\n  int result;\n  undefined4 comparisonResult;\n  ulong combinedResult;\n  undefined returnVal [16];\n  \n  combinedResult = *memBlock1;\n  if (*memBlock2 <= *memBlock1) {\n    combinedResult = *memBlock2;\n  }\n  result = memcmp((void *)(memBlock1[3] + 3),(void *)(memBlock2[3] + 3),combinedResult - 3);\n  combinedResult = CONCAT44(comparisonResult,result);\n  if (result == 0) {\n    sizeBlock1 = memBlock1[8];\n    if (sizeBlock1 < memBlock2[7]) {\n      combinedResult = 0xffffffff;\n    }\n    else {\n      sizeBlock2 = memBlock2[8];\n      if (sizeBlock2 < memBlock1[7]) {\n        combinedResult = 1;\n      }\n      else {\n        combinedResult = 0xffffffff;\n        if (memBlock2[7] <= memBlock1[7]) {\n          if (sizeBlock2 < sizeBlock1) {\n            combinedResult = 1;\n          }\n          else {\n            combinedResult = 0xffffffff;\n            if (sizeBlock2 <= sizeBlock1) {\n              if (memBlock1[2] == 0x100) {\n                combinedResult = (ulong)-(uint)(memBlock2[2] != 0x100);\n              }\n              else {\n                combinedResult = (ulong)(memBlock2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  returnVal._8_8_ = paramB;\n  returnVal._0_8_ = combinedResult;\n  return returnVal;\n}\n\n",
            "called": [
                "compare_gnu_build_notes.cold",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "extract_gnu_build_attribute_notes_001163d0",
                "param_1": "param_src",
                "param_2": "param_dst",
                "param_3": "size",
                "param_4": "data",
                "uVar1": "result",
                "uVar2": "var_a",
                "uVar3": "var_b",
                "bVar4": "is_true",
                "puVar5": "ptr_values",
                "iVar6": "var_i",
                "uVar7": "var_msg",
                "lVar8": "var_len",
                "__ptr": "alloc_ptr",
                "uVar9": "var_u9",
                "uVar10": "var_10",
                "uVar11": "var_11",
                "uVar12": "var_12",
                "uVar13": "var_13",
                "uVar14": "var_14",
                "uVar15": "var_15",
                "uVar16": "var_16",
                "puVar17": "ptr_notes",
                "puVar18": "ptr_cur",
                "cVar19": "var_c",
                "puVar20": "ptr_temp",
                "iVar21": "var_inner",
                "puVar22": "ptr_data",
                "puVar23": "ptr_data_iter",
                "uVar24": "var_24",
                "__nmemb": "var_nmemb",
                "puVar25": "ptr_notes_iter",
                "bVar26": "var_b2",
                "local_88": "var_local_88",
                "uStack_80": "var_uStack_80",
                "local_70": "var_local_70",
                "local_68": "var_local_68",
                "local_60": "ptr_mem",
                "isympp": "var_isympp",
                "is_strip": "var_is_strip",
                "compare_gnu_build_notes": "compare_notes",
                "sort_gnu_build_notes": "sort_notes",
                "non_fatal": "show_warning",
                "status": "var_status"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\nulong extract_gnu_build_attribute_notes_001163d0(undefined8 *param_src,undefined8 *param_dst,ulong size,undefined *data)\n\n{\n  ulong result;\n  undefined8 var_a;\n  undefined8 var_b;\n  bool is_true;\n  ulong *ptr_values;\n  int var_i;\n  undefined8 var_msg;\n  long var_len;\n  void *alloc_ptr;\n  ulong var_u9;\n  ulong var_10;\n  ulong var_11;\n  ulong var_12;\n  undefined *alloc_ptr_00;\n  ulong var_13;\n  ulong var_14;\n  ulong var_15;\n  ulong var_16;\n  ulong *ptr_notes;\n  undefined *ptr_cur;\n  char var_c;\n  undefined *ptr_temp;\n  int var_inner;\n  undefined *ptr_data;\n  ulong *ptr_data_iter;\n  ulong var_24;\n  size_t var_nmemb;\n  ulong *ptr_notes_iter;\n  byte var_b2;\n  ulong var_local_88;\n  ulong var_uStack_80;\n  ulong var_local_70;\n  ulong var_local_68;\n  ulong *ptr_mem;\n  \n  var_b2 = 0;\n  var_len = bfd_get_reloc_upper_bound();\n  var_local_68 = size;\n  if (0 < var_len) {\n    alloc_ptr = (void *)xmalloc(var_len);\n    var_len = bfd_canonicalize_reloc(param_src,param_dst,alloc_ptr,var_isympp);\n    free(alloc_ptr);\n    if (var_len != 0) {\n      if (var_is_strip == 0) {\n        var_a = *param_src;\n        var_b = *param_dst;\n        var_msg = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        show_warning(var_msg,var_a,var_b);\n      }\n      ptr_mem = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  ptr_mem = (ulong *)xcalloc(size / 0xc,0x48,size % 0xc);\n  var_local_88 = 0;\n  var_local_70 = 0;\n  var_16 = size;\n  var_15 = 0;\n  ptr_data_iter = ptr_mem;\n  var_14 = 0;\n  ptr_data = data;\n  while (0xb < var_16) {\n    var_10 = (**(code **)(param_src[1] + 0x40))(ptr_data);\n    *ptr_data_iter = var_10;\n    var_10 = (**(code **)(param_src[1] + 0x40))(ptr_data + 4);\n    ptr_data_iter[1] = var_10;\n    var_11 = (**(code **)(param_src[1] + 0x40))(ptr_data + 8);\n    var_10 = *ptr_data_iter;\n    ptr_data_iter[2] = var_11;\n    var_12 = ptr_data_iter[1];\n    var_13 = var_10 + 3 & 0xfffffffffffffffc;\n    ptr_data_iter[6] = var_13;\n    if (var_12 != (var_12 + 3 & 0xfffffffffffffffc)) {\n      var_len = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var_11 - 0x100) {\n      var_len = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var_13 + var_12 + 0xc;\n    if (var_16 < result) {\n      var_len = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var_10 < 2) {\n      var_len = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr_data_iter[3] = (ulong)(ptr_data + 0xc);\n    ptr_data_iter[4] = (ulong)(ptr_data + var_13 + 0xc);\n    var_16 = var_16 + (-0xc - (var_13 + var_12));\n    if (var_10 != 2) {\n      if (ptr_data[0xc] == '$') {\n        if ((ptr_data[0xd] == '\\x01') && (ptr_data[0xe] == '1')) {\n          var_16 = extract_gnu_build_attribute_notes_001163d0_00116490();\n          return var_16;\n        }\n      }\n      else if ((((4 < var_10) && (ptr_data[0xc] == 'G')) && (ptr_data[0xd] == 'A')) &&\n              ((ptr_data[0xe] == '$' && (ptr_data[0xf] == '\\x01')))) {\n        if (ptr_data[0x10] == '2') {\n          var_16 = extract_gnu_build_attribute_notes_001163d0_00116490();\n          return var_16;\n        }\n        if (ptr_data[0x10] == '3') {\n          var_16 = extract_gnu_build_attribute_notes_001163d0_00116490();\n          return var_16;\n        }\n        var_len = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var_u9 = var_15;\n    var_24 = var_14;\n    if (var_12 == 0) {\n      if (var_11 == 0x100) {\n        ptr_data_iter[7] = var_local_88;\nLAB_001164af:\n        var_12 = var_14;\n        var_24 = var_14;\n      }\n      else {\n        ptr_data_iter[7] = var_local_70;\nLAB_0011669e:\n        var_u9 = var_15;\n        var_12 = var_15;\n      }\n    }\n    else {\n      if (var_12 != 0x10) {\n        if (var_12 < 0x11) {\n          if (var_12 == 4) {\n            var_11 = (**(code **)(param_src[1] + 0x40))();\n            var_12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var_12 == 8) {\n            var_16 = FUNC_001086af();\n            return var_16;\n          }\n        }\n        var_len = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var_11 = (**(code **)(param_src[1] + 0x28))(ptr_data + var_13 + 0xc);\n      var_12 = (**(code **)(param_src[1] + 0x28))();\n      if (var_12 < var_11) {\n        var_11 = var_12;\n      }\nLAB_00116631:\n      if (ptr_data_iter[2] == 0x100) {\n        if (var_11 == 0) {\n          var_11 = var_local_88;\n        }\n        var_10 = *ptr_data_iter;\n        ptr_data_iter[7] = var_11;\n        var_24 = var_12;\n        var_local_88 = var_11;\n        if (var_12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var_11 == 0) {\n          var_11 = var_local_70;\n        }\n        var_10 = *ptr_data_iter;\n        ptr_data_iter[7] = var_11;\n        var_u9 = var_12;\n        var_local_70 = var_11;\n        if (var_12 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr_data_iter[8] = var_12;\n    if (*(char *)((ptr_data_iter[3] - 1) + var_10) != '\\0') {\n      var_len = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr_data_iter = ptr_data_iter + 9;\n    var_15 = var_u9;\n    var_14 = var_24;\n    ptr_data = ptr_data + result;\n  }\n  if (var_16 == 0) {\n    var_a = *param_src;\n    var_b = *param_dst;\n    var_msg = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    show_warning(var_msg,var_a,var_b);\n    var_nmemb = ((long)ptr_data_iter - (long)ptr_mem >> 3) * -0x71c71c71c71c71c7;\n    qsort(ptr_mem,var_nmemb,0x48,compare_notes);\n    for (ptr_notes = ptr_mem; ptr_notes < ptr_data_iter; ptr_notes = ptr_notes + 9) {\n      var_16 = ptr_notes[2];\n      if (var_16 != 0) {\n        var_15 = ptr_notes[7];\n        var_14 = ptr_notes[8];\n        ptr_notes_iter = ptr_notes;\n        var_inner = 0;\n        if (var_15 == var_14) {\n          ptr_notes[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr_values = ptr_notes_iter;\n              ptr_notes_iter = ptr_values + -9;\n              if (ptr_notes_iter < ptr_mem) goto LAB_001167f5;\n              var_10 = ptr_values[-7];\n            } while (var_10 == 0);\n            if ((*ptr_notes_iter != *ptr_notes) ||\n               (var_i = memcmp((void *)ptr_values[-6],(void *)ptr_notes[3],*ptr_notes), var_i != 0)) break;\n            var_12 = ptr_values[-2];\n            var_11 = ptr_values[-1];\n            if (var_15 == var_12) {\n              if (var_14 == var_11) {\n                ptr_notes[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var_14 <= var_11) {\n                ptr_notes[2] = 0;\n                break;\n              }\n              if (var_11 < var_15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var_11) || (var_15 <= (var_11 + 0xf & 0xfffffffffffffff0))\n                   ) goto extract_notes_00116852;\n              }\nLAB_001167b8:\n              if ((var_16 == 0x101) == (var_10 == 0x101)) {\n                if (var_11 <= var_14) {\n                  var_11 = var_14;\n                }\n                if (var_12 < var_15) {\n                  var_15 = var_12;\n                }\n                ptr_values[-1] = var_11;\n                ptr_values[-2] = var_15;\n                ptr_notes[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var_12 <= var_15) goto LAB_001167a6;\n              if (var_11 < var_15) goto LAB_0010852c;\n              if (var_14 < var_15) {\n                if ((0xfffffffffffffff0 < var_14) || (var_12 <= (var_14 + 0xf & 0xfffffffffffffff0))\n                   ) goto extract_notes_00116852;\n                goto LAB_001167b8;\n              }\n              if (var_14 != var_11) goto LAB_001167b8;\n            }\nextract_notes_00116852:\n            is_true = var_inner < 0x11;\n            var_inner = var_inner + 1;\n          } while (is_true);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(ptr_mem,var_nmemb,0x48,sort_notes);\n    alloc_ptr_00 = (undefined *)xmalloc(size * 2);\n    var_uStack_80 = 0;\n    var_local_70 = 0;\n    ptr_data = alloc_ptr_00;\n    for (ptr_notes = ptr_mem; ptr_notes < ptr_data_iter; ptr_notes = ptr_notes + 9) {\n      if (ptr_notes[2] != 0) {\n        ptr_cur = ptr_data + 0xc;\n        if ((ptr_notes[7] == var_local_70) && (ptr_notes[8] == var_uStack_80)) {\n          (**(code **)(param_src[1] + 0x50))(*ptr_notes,ptr_data);\n          (**(code **)(param_src[1] + 0x50))(0,ptr_data + 4);\n          (**(code **)(param_src[1] + 0x50))(ptr_notes[2],ptr_data + 8);\n          var_15 = ptr_notes[6];\n          var_16 = *ptr_notes;\n          ptr_data = (undefined *)ptr_notes[3];\n          ptr_temp = ptr_cur;\n          for (var_14 = var_16; var_14 != 0; var_14 = var_14 - 1) {\n            *ptr_temp = *ptr_data;\n            ptr_data = ptr_data + (ulong)var_b2 * -2 + 1;\n            ptr_temp = ptr_temp + (ulong)var_b2 * -2 + 1;\n          }\n          if (var_16 < var_15) {\n            for (var_len = var_15 - var_16; var_len != 0; var_len = var_len + -1) {\n              *ptr_temp = 0;\n              ptr_temp = ptr_temp + (ulong)var_b2 * -2 + 1;\n            }\n          }\n          ptr_data = ptr_cur + var_15;\n        }\n        else {\n          (**(code **)(param_src[1] + 0x50))();\n          if (*(int *)(param_src[1] + 8) == 5) {\n            var_c = (*(char *)(param_src[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            var_c = '\\b';\n          }\n          (**(code **)(param_src[1] + 0x50))(var_c,ptr_data + 4);\n          (**(code **)(param_src[1] + 0x50))(ptr_notes[2],ptr_data + 8);\n          var_16 = *ptr_notes;\n          ptr_data = (undefined *)ptr_notes[3];\n          ptr_temp = ptr_cur;\n          for (var_15 = var_16; var_15 != 0; var_15 = var_15 - 1) {\n            *ptr_temp = *ptr_data;\n            ptr_data = ptr_data + (ulong)var_b2 * -2 + 1;\n            ptr_temp = ptr_temp + (ulong)var_b2 * -2 + 1;\n          }\n          var_15 = ptr_notes[6];\n          if (var_16 < var_15) {\n            for (var_len = var_15 - var_16; var_len != 0; var_len = var_len + -1) {\n              *ptr_temp = 0;\n              ptr_temp = ptr_temp + (ulong)var_b2 * -2 + 1;\n            }\n          }\n          var_len = param_src[1];\n          ptr_cur = ptr_cur + var_15;\n          ptr_data = ptr_cur + 8;\n          if ((*(int *)(var_len + 8) == 5) && (*(char *)(param_src[0x22] + 4) == '\\x02')) {\n            (**(code **)(var_len + 0x38))(ptr_notes[7],ptr_cur);\n            (**(code **)(param_src[1] + 0x38))(ptr_notes[8],ptr_data);\n            ptr_data = ptr_cur + 0x10;\n          }\n          else {\n            (**(code **)(var_len + 0x50))(ptr_notes[7],ptr_cur);\n            (**(code **)(param_src[1] + 0x50))(ptr_notes[8],ptr_cur + 4);\n          }\n          var_local_70 = ptr_notes[7];\n          var_uStack_80 = ptr_notes[8];\n        }\n      }\n    }\n    var_15 = (long)ptr_data - (long)alloc_ptr_00;\n    var_16 = var_15;\n    ptr_data = alloc_ptr_00;\n    var_local_68 = size;\n    if (var_15 < size) {\n      for (; var_local_68 = var_15, var_16 != 0; var_16 = var_16 - 1) {\n        *data = *ptr_data;\n        ptr_data = ptr_data + (ulong)var_b2 * -2 + 1;\n        data = data + (ulong)var_b2 * -2 + 1;\n      }\n    }\n    free(alloc_ptr_00);\n  }\n  else {\n    var_len = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (var_len != 0) {\n      bfd_set_error(0x11);\n      bfd_nonfatal_message(0,param_src,param_dst,var_len);\n      var_status = 1;\n    }\n  }\nLAB_001166f8:\n  free(ptr_mem);\n  return var_local_68;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "free",
                "bfd_canonicalize_reloc",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_gnu_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_and_exit_00108a2a",
                "param_1": "fileStream",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsageAndExit_00108a2a(FILE *fileStream,int exitCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(fileStream,message,programName);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(fileStream,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(fileStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(fileStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(fileStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(fileStream,message);\n  list_supported_targets(program_name,fileStream);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(fileStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "list_supported_targets",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_and_exit_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "parse_driver_name_00108c86",
                "param_1": "driver_name_ptr",
                "cVar1": "startsWithLtoPriv",
                "iVar2": "comparisonResult",
                "sVar3": "nameLength",
                "puVar4": "parsedName",
                "lVar5": "nameIndex",
                "__s": "namePtr",
                "__s1": "archPtr",
                "puVar6": "parsedNameIndex",
                "uVar7": "returnVal",
                "bVar8": "isLowerCase",
                "strcmp": "compareStrings"
            },
            "code": "\nundefined8 parse_driver_name_00108c86(long *driver_name_ptr)\n\n{\n  char startsWithLtoPriv;\n  int comparisonResult;\n  size_t nameLength;\n  undefined2 *parsedName;\n  long nameIndex;\n  char *namePtr;\n  char *archPtr;\n  undefined2 *parsedNameIndex;\n  undefined8 returnVal;\n  byte isLowerCase;\n  \n  isLowerCase = 0;\n  nameIndex = *driver_name_ptr;\n  namePtr = (char *)(nameIndex + 4);\n  startsWithLtoPriv = startswith_lto_priv_0_lto_priv_0(namePtr,&DAT_0011b73b);\n  if (startsWithLtoPriv == '\\0') {\n    startsWithLtoPriv = startswith_lto_priv_0_lto_priv_0(namePtr,\"bsdrv-\");\n    if (startsWithLtoPriv == '\\0') {\n      startsWithLtoPriv = startswith_lto_priv_0_lto_priv_0(namePtr,\"rtdrv-\");\n      if (startsWithLtoPriv == '\\0') {\n        return 0xffffffff;\n      }\n      namePtr = (char *)(nameIndex + 6);\n      returnVal = 0xc;\n    }\n    else {\n      namePtr = (char *)(nameIndex + 6);\n      returnVal = 0xb;\n    }\n  }\n  else {\n    returnVal = 10;\n  }\n  nameLength = strlen(namePtr);\n  parsedName = (undefined2 *)xmalloc(nameLength + 8);\n  archPtr = namePtr + 4;\n  parsedNameIndex = parsedName;\n  for (nameIndex = nameLength + 1; nameIndex != 0; nameIndex = nameIndex + -1) {\n    *(char *)parsedNameIndex = *namePtr;\n    namePtr = namePtr + (ulong)isLowerCase * -2 + 1;\n    parsedNameIndex = (undefined2 *)((long)parsedNameIndex + (ulong)isLowerCase * -2 + 1);\n  }\n  *(undefined *)(parsedName + 1) = 0x69;\n  *parsedName = 0x6570;\n  comparisonResult = compareStrings(archPtr,\"ia32\");\n  if (comparisonResult == 0) {\n    *(undefined *)((long)parsedName + 7) = 0x36;\n    *(undefined2 *)((long)parsedName + 5) = 0x3833;\n  }\n  else {\n    comparisonResult = compareStrings(archPtr,\"x86_64\");\n    if (comparisonResult == 0) {\n      *(undefined *)((long)parsedName + 7) = 0x2d;\n    }\n    else {\n      comparisonResult = compareStrings(archPtr,\"aarch64\");\n      if (comparisonResult == 0) {\n        *(undefined8 *)((long)parsedName + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *driver_name_ptr = (long)parsedName;\n  return returnVal;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strlen",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_driver_name_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "FUN_00104910": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00104910"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_bfd_001053d5",
                "unaff_R12": "ptr_r12",
                "unaff_R14": "ptr_r14"
            },
            "code": "\nundefined4 closeBFD_001053d5(void)\n\n{\n  long ptr_r12;\n  undefined8 *ptr_r14;\n  \n  bfd_nonfatal(*ptr_r14);\n  *(undefined4 *)(ptr_r12 + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(ptr_r12 + 8);\n}\n\n",
            "called": [
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "close_bfd_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_set_memory_permissions_00104bba",
                "in_EAX": "eaxValue",
                "unaff_EBP": "ebpValue",
                "unaff_R14": "r14Address",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid checkAndSetMemoryPermissions_00104bba(void)\n\n{\n  uint eaxValue;\n  undefined8 errorMessage;\n  uint ebpValue;\n  long r14Address;\n  \n  if ((eaxValue & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    fatal(errorMessage);\n  }\n  if ((((eaxValue & 8) == 0) || ((ebpValue & 0x10) == 0)) && ((ebpValue & 0x18) != 0x18)) {\n    if ((((eaxValue & 0x20) == 0) || ((ebpValue & 0x40) == 0)) && ((ebpValue & 0x60) != 0x60)) {\n      *(uint *)(r14Address + 0x14) = eaxValue | ebpValue;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    fatal(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "find_section_list"
            ],
            "imported": false,
            "current_name": "check_and_set_memory_permissions_00104bba"
        },
        "FUN_001040a0": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "stab_class_baseclass.lto_priv.0",
                "display_info.isra.0",
                "stab_class_static_member.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_template",
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0",
                "debug_type_samep"
            ],
            "imported": false,
            "current_name": "FUN_001040a0"
        },
        "FUN_00104918": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "merge_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104918"
        },
        "FUN_001042e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001042e0"
        },
        "FUN_001283b0": {
            "renaming": {},
            "code": "\n\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fchmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b0",
            "calling": [
                "fchmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b0"
        },
        "FUN_001041c0": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001041c0"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "counter",
                "puVar3": "destPtr",
                "bVar4": "increment"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long counter;\n  undefined *destPtr;\n  byte increment;\n  \n  increment = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPtr = destination;\n  for (counter = (long)length; counter != 0; counter = counter + -1) {\n    *destPtr = *source;\n    source = source + (ulong)increment * -2 + 1;\n    destPtr = destPtr + (ulong)increment * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "parse_stab",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slot_0010da0b",
                "param_1": "slot_pointer",
                "param_2": "slot_index",
                "uVar1": "error_message",
                "plVar2": "new_slot",
                "lVar3": "offset",
                "lVar4": "offset2",
                "uVar5": "temp_index",
                "bVar6": "counter",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slot_0010da0b(long **slot_pointer,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 error_message;\n  long *new_slot;\n  long offset;\n  long offset2;\n  ulong temp_index;\n  byte counter;\n  undefined result [16];\n  \n  counter = 0;\n  temp_index = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)temp_index; temp_index = temp_index - 0x10) {\n      if (*slot_pointer == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_pointer = new_slot;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)counter * -8 + 4);\n        }\n      }\n      slot_pointer = (long **)*slot_pointer;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*slot_pointer == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_pointer = new_slot;\n      for (offset2 = 0x22; offset2 != 0; offset2 = offset2 + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)counter * -8 + 4);\n      }\n    }\n    result._8_8_ = param_4;\n    result._0_8_ = *slot_pointer + slot_index + offset + 1;\n    return result;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(error_message,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slot_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_struct_00112894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "structure",
                "puVar2": "tempPtr",
                "lVar3": "count",
                "bVar4": "byteValue"
            },
            "code": "\nundefined8 *\ninitializeStruct_00112894(undefined8 input1,undefined input2,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *structure;\n  undefined8 *tempPtr;\n  long count;\n  byte byteValue;\n  \n  byteValue = 0;\n  structure = (undefined8 *)xmalloc(0x1b0);\n  tempPtr = structure;\n  for (count = 0x6c; count != 0; count = count + -1) {\n    *(undefined4 *)tempPtr = 0;\n    tempPtr = (undefined8 *)((long)tempPtr + (ulong)byteValue * -8 + 4);\n  }\n  *structure = input1;\n  *(undefined *)(structure + 1) = input2;\n  structure[2] = input3;\n  structure[3] = input4;\n  *(undefined4 *)(structure + 0x10) = 1;\n  tempPtr = (undefined8 *)xmalloc(8);\n  structure[0xd] = 0xffffffffffffffff;\n  structure[0x11] = tempPtr;\n  *tempPtr = 0;\n  return structure;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_struct_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_next_pointer_00109b2f",
                "param_1": "ptr",
                "__ptr": "nextPtr",
                "puVar1": "returnValue"
            },
            "code": "\nundefined8 * extractNextPointer_00109b2f(long ptr)\n\n{\n  undefined8 *nextPtr;\n  undefined8 *returnValue;\n  \n  nextPtr = *(undefined8 **)(ptr + 0x60);\n  if (nextPtr != (undefined8 *)0x0) {\n    returnValue = (undefined8 *)nextPtr[1];\n    *(undefined8 *)(ptr + 0x60) = *nextPtr;\n    free(nextPtr);\n    return returnValue;\n  }\n  return nextPtr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "stab_modify_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extract_next_pointer_00109b2f"
        },
        "FUN_001283b8": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b8",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b8"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_redefined_symbols_00108d9a",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "return_value",
                "ppcVar1": "symbol",
                "pcVar2": "symbol_copy",
                "lVar3": "result",
                "uVar4": "error_message",
                "plVar5": "slot",
                "xmalloc": "allocate_memory",
                "strdup": "duplicate_string",
                "redefine_specific_htab": "specific_symbols_htab",
                "htab_find": "find_in_htab",
                "redefine_specific_reverse_htab": "specific_reverse_htab",
                "dcgettext": "get_text",
                "fatal": "handle_fatal_error"
            },
            "code": "\nundefined8 check_redefined_symbols_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 return_value)\n\n{\n  char **symbol;\n  char *symbol_copy;\n  long result;\n  undefined8 error_message;\n  long *slot;\n  \n  symbol = (char **)allocate_memory(0x10);\n  symbol_copy = duplicate_string(symbol_name);\n  *symbol = symbol_copy;\n  symbol_copy = duplicate_string(target_symbol);\n  error_message = specific_symbols_htab;\n  symbol[1] = symbol_copy;\n  result = find_in_htab(error_message,symbol);\n  if (result != 0) {\n    error_message = get_text(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    handle_fatal_error(error_message,error_message,symbol_name);\n  }\n  result = find_in_htab(specific_reverse_htab,target_symbol);\n  if (result != 0) {\n    error_message = get_text(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    handle_fatal_error(error_message,error_message,target_symbol);\n  }\n  slot = (long *)find_in_htab_slot(specific_symbols_htab,symbol,1);\n  error_message = specific_reverse_htab;\n  *slot = (long)symbol;\n  symbol_copy = symbol[1];\n  symbol = (char **)find_in_htab_slot(error_message,symbol_copy,1);\n  *symbol = symbol_copy;\n  return return_value;\n}\n\n",
            "called": [
                "htab_find",
                "strdup",
                "htab_find_slot",
                "dcgettext",
                "fatal",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_redefined_symbols_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "write_symbol_0010e9a0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "poppedType",
                "__s_00": "modifiedType",
                "sVar3": "param2Length",
                "sVar4": "modifiedTypeLength",
                "__s_01": "newSymbol",
                "pcVar5": "symbolType",
                "uVar6": "symbolFlag",
                "lVar1": "typeCount",
                "stab_pop_type": "getPoppedType",
                "&_sch_istable": "characterTable",
                "xmalloc": "allocateMemory",
                "free": "deallocateMemory",
                "strlen": "getStringLength",
                "sprintf": "formatString",
                "stab_write_symbol_lto_priv_0": "writeSymbolLTO"
            },
            "code": "\nundefined4 writeSymbol_0010e9a0(long param1,char *param2,undefined4 param3,undefined8 param4)\n\n{\n  long typeCount;\n  undefined4 uVar2;\n  byte *poppedType;\n  byte *modifiedType;\n  size_t param2Length;\n  size_t modifiedTypeLength;\n  char *newSymbol;\n  char *symbolType;\n  undefined8 symbolFlag;\n  \n  poppedType = (byte *)getPoppedType();\n  switch(param3) {\n  case 1:\n    symbolType = \"G\";\n    symbolFlag = 0x20;\n    break;\n  case 2:\n    symbolType = \"S\";\n    symbolFlag = 0x26;\n    break;\n  case 3:\n    symbolType = \"V\";\n    symbolFlag = 0x26;\n    break;\n  case 4:\n    symbolType = \"\";\n    symbolFlag = 0x80;\n    if (((characterTable)[(ulong)*poppedType * 2] & 4) == 0) {\n      typeCount = *(long *)(param1 + 0x68);\n      *(long *)(param1 + 0x68) = typeCount + 1;\n      param2Length = getStringLength((char *)poppedType);\n      modifiedType = (byte *)allocateMemory(param2Length + 0x14);\n      formatString((char *)modifiedType,\"%ld=%s\",typeCount,poppedType);\n      deallocateMemory(poppedType);\n      poppedType = modifiedType;\n    }\n    break;\n  case 5:\n    symbolType = \"r\";\n    symbolFlag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  param2Length = getStringLength(param2);\n  modifiedTypeLength = getStringLength((char *)poppedType);\n  newSymbol = (char *)allocateMemory(param2Length + 3 + modifiedTypeLength);\n  formatString(newSymbol,\"%s:%s%s\",param2,symbolType,poppedType);\n  deallocateMemory(poppedType);\n  uVar2 = writeSymbol_0010e9a0LTO(param1,symbolFlag,0,param4,newSymbol);\n  if ((char)uVar2 != '\\0') {\n    deallocateMemory(newSymbol);\n  }\n  return uVar2;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_0010e9a0"
        },
        "FUN_001042f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001042f0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "report_error_0010827b",
                "unaff_RBX": "sectionPointer",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid reportError_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  fatal(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "report_error_0010827b"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_bad_number_00104920",
                "uVar1": "errorString"
            },
            "code": "\nvoid handleBadNumber_00104920(void)\n\n{\n  undefined8 errorString;\n  \n  errorString = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorString);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "handle_bad_number_00104920"
        },
        "FUN_00104800": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "bfd_nonfatal_message",
                "FUN_00107880",
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104800"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTableWithAlloc",
                "htab_hash_string": "stringHashFunction",
                "htab_eq_string": "stringEqualityFunction",
                "xcalloc": "allocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  createHashTableWithAlloc(0x10,stringHashFunction,stringEqualityFunction,0,allocateMemory,deallocateMemory);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string",
                "htab_eq_string",
                "htab_create_alloc",
                "free",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "FUN_001283e8": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283e8",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_001283e8"
        },
        "FUN_001282c0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282c0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_001282c0"
        },
        "FUN_001281a0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281a0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001281a0"
        },
        "FUN_001041d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001041d0"
        },
        "FUN_001040b0": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "copy_file",
                "display_info.isra.0",
                "get_file_size.cold",
                "smart_rename.cold",
                "main",
                "simple_copy.cold",
                "simple_copy",
                "set_times.cold",
                "FUN_00104ea2",
                "FUN_00107880",
                "section_add_load_file.cold",
                "add_specific_symbols",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_001040b0"
        },
        "FUN_00116aa0": {
            "renaming": {
                "FUN_00116aa0": "start_main_loop_00116aa0",
                "param_1": "start_main_param_1",
                "param_2": "start_main_param_2",
                "auStack_8": "start_main_stack_8"
            },
            "code": "\nvoid processEntry start_main_loop_00116aa0(undefined8 start_main_param_1,undefined8 start_main_param_2)\n\n{\n  undefined start_main_stack_8 [8];\n  \n  __libc_start_main(main,start_main_param_2,&stack0x00000008,0,0,start_main_param_1,start_main_stack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_loop_00116aa0"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "lVar1": "message",
                "lVar2": "signature",
                "cVar3": "result",
                "lVar4": "error",
                "lVar5": "groupSignature",
                "unaff_RBX": "pointerRBX",
                "unaff_RBP": "pointerRBP",
                "unaff_R12": "pointerR12",
                "unaff_R14B": "flagR14B",
                "unaff_R15": "pointerR15"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long message;\n  long signature;\n  char result;\n  long error;\n  long groupSignature;\n  long pointerRBX;\n  long pointerRBP;\n  long pointerR12;\n  char flagR14B;\n  long pointerR15;\n  \n  error = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(pointerR15 + 0xb4) = *(undefined4 *)(pointerRBX + 0xb4);\n  *(byte *)(pointerR15 + 0x28) =\n       *(byte *)(pointerR15 + 0x28) & 0xcf | *(byte *)(pointerRBX + 0x28) & 0x30;\n  *(long *)(pointerRBX + 0x60) = pointerR15;\n  *(undefined8 *)(pointerRBX + 0x58) = 0;\n  if ((*(byte *)(pointerRBX + 0x27) & 2) != 0) {\n    message = *(long *)(pointerRBX + 0xd0);\n    groupSignature = group_signature_isra_0(message,*(undefined8 *)(pointerRBX + 0xe0));\n    if ((groupSignature != 0) &&\n       (signature = *(long *)(pointerR12 + 8), *(uint *)(groupSignature + 0x18) = *(uint *)(groupSignature + 0x18) | 0x20,\n       *(int *)(signature + 8) == 5)) {\n      *(long *)(message + 0xb0) = groupSignature;\n      result = (**(code **)(*(long *)(pointerRBP + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(pointerRBP + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flagR14B != '\\0') {\n    *(undefined4 *)(*(long *)(pointerR15 + 0xd0) + 4) = 8;\n  }\n  if (error != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010808f",
                "group_signature.isra.0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "setup_section.cold"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "validate_and_get_type_file_00109022",
                "param_1": "file_list",
                "param_2": "indexes",
                "param_3": "output",
                "param_4": "result",
                "uVar1": "file_index",
                "pcVar2": "error_message",
                "plVar3": "type_entry",
                "lVar4": "loop_counter",
                "uVar5": "type_index",
                "pplVar6": "type_list",
                "bVar7": "byte_var",
                "auVar8": "return_value"
            },
            "code": "\n\n\nundefined  [16] validate_and_get_type_file_00109022(long file_list,uint *indexes,undefined8 output,undefined8 result)\n\n{\n  uint file_index;\n  char *error_message;\n  long *type_entry;\n  long loop_counter;\n  uint type_index;\n  long **type_list;\n  byte byte_var;\n  undefined return_value [16];\n  \n  byte_var = 0;\n  type_index = *indexes;\n  file_index = indexes[1];\n  if (((int)type_index < 0) || (*(uint *)(file_list + 0x80) <= type_index)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  else {\n    if (-1 < (int)file_index) {\n      type_list = (long **)(*(long *)(file_list + 0x88) + (long)(int)type_index * 8);\n      for (type_index = file_index; 0xf < (int)type_index; type_index = type_index - 0x10) {\n        if (*type_list == (long *)0x0) {\n          type_entry = (long *)xmalloc(0x88);\n          *type_list = type_entry;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)type_entry = 0;\n            type_entry = (long *)((long)type_entry + (ulong)byte_var * -8 + 4);\n          }\n        }\n        type_list = (long **)*type_list;\n      }\n      if (*type_list == (long *)0x0) {\n        type_entry = (long *)xmalloc(0x88);\n        *type_list = type_entry;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)type_entry = 0;\n          type_entry = (long *)((long)type_entry + (ulong)byte_var * -8 + 4);\n        }\n      }\n      type_entry = *type_list + (long)(int)((file_index >> 4) * -0x10 + file_index) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)file_index);\n  }\n  type_entry = (long *)0x0;\nLAB_00109117:\n  return_value._8_8_ = result;\n  return_value._0_8_ = type_entry;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "stab_find_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "validate_and_get_type_file_00109022"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_debug_0010c05d",
                "param_1": "file",
                "param_2": "variable",
                "param_3": "namespace",
                "param_4": "mode",
                "param_5": "param5",
                "param_6": "param6",
                "auVar1": "result",
                "uVar2": "returnValue",
                "piVar3": "ptr",
                "cVar4": "flag",
                "lVar5": "counter",
                "lVar6": "currentFile",
                "piVar7": "ptr2",
                "bVar8": "byteVar",
                "auVar9": "result2"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariableDebug_0010c05d(long file,long variable,ulong namespace,int mode,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined result [16];\n  undefined8 returnValue;\n  int *ptr;\n  char flag;\n  long counter;\n  long currentFile;\n  int *ptr2;\n  byte byteVar;\n  undefined result2 [16];\n  \n  byteVar = 0;\n  if (variable == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = namespace;\n    return result << 0x40;\n  }\n  if (namespace != 0) {\n    if ((*(long *)(file + 8) == 0) || (currentFile = *(long *)(file + 0x10), currentFile == 0)) {\n      returnValue = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",returnValue);\n    }\n    else {\n      if (mode - 1U < 2) {\n        currentFile = currentFile + 0x10;\n        flag = (mode == 1) + '\\x01';\n      }\n      else if (*(long *)(file + 0x20) == 0) {\n        currentFile = currentFile + 0x10;\n        flag = '\\0';\n      }\n      else {\n        currentFile = *(long *)(file + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      currentFile = debug_add_to_namespace_constprop_0(currentFile,variable,2,flag);\n      if (currentFile != 0) {\n        ptr = (int *)xmalloc(0x18);\n        ptr2 = ptr + 1;\n        for (counter = 5; counter != 0; counter = counter + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)byteVar * -2 + 1;\n        }\n        *ptr = mode;\n        returnValue = 1;\n        *(ulong *)(ptr + 2) = namespace;\n        *(undefined8 *)(ptr + 4) = param5;\n        *(int **)(currentFile + 0x20) = ptr;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  returnValue = 0;\nLAB_0010c12e:\n  result2._8_8_ = param6;\n  result2._0_8_ = returnValue;\n  return result2;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "stab_emit_pending_vars",
                "stab_record_variable",
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "record_variable_debug_0010c05d"
        },
        "FUN_001041e0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_001041e0"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "process_parameter_00109d97",
                "param_1": "param",
                "lVar1": "count",
                "local_40": "outputString"
            },
            "code": "\nvoid processParameter_00109d97(long param)\n\n{\n  long count;\n  char outputString [40];\n  \n  if (*(long *)(param + 0x70) != 0) {\n    stab_push_defined_type(param,*(long *)(param + 0x70),0);\n    return;\n  }\n  count = *(long *)(param + 0x68);\n  *(long *)(param + 0x68) = count + 1;\n  sprintf(outputString,\"%ld=%ld\",count,count);\n  stab_push_string(param,outputString,count,0,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_parameter_00109d97"
        },
        "FUN_001284f0": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284f0",
            "calling": [
                "create_symbol_htab",
                "main",
                "free"
            ],
            "imported": false,
            "current_name": "FUN_001284f0"
        },
        "FUN_00104810": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104810"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "FUNC_001086af"
            },
            "code": "\nulong FUNC_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *unaff_R12;\n  ulong unaff_R13;\n  ulong uVar20;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *param_14;\n  \n  bVar22 = 0;\n  param_7 = in_RCX;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n  uVar10 = (**(code **)(unaff_R14[1] + 0x40))(unaff_R12[4] + 4);\nLAB_0011662a:\n  uVar13 = unaff_RBP;\n  uVar20 = unaff_R13;\n  if (uVar10 < uVar9) {\n    uVar9 = uVar10;\n  }\n  do {\n    uVar11 = param_7;\n    uVar12 = param_7;\n    puVar15 = unaff_R12;\n    if (unaff_R12[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = unaff_retaddr;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar13;\n      unaff_R13 = uVar10;\n      unaff_retaddr = uVar9;\n      if (uVar10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = param_9;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar10;\n      unaff_R13 = uVar20;\n      param_9 = uVar9;\n      if (uVar10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = uVar10;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12 = puVar15 + 9;\n    if (unaff_RBX < 0xc) {\n      if (unaff_RBX != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *unaff_R14;\n      uVar3 = *param_14;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)unaff_R12 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,__nmemb,0x48,compare_gnu_build_notes);\n      puVar15 = param_11;\n      goto LAB_001167f9;\n    }\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12);\n    *unaff_R12 = uVar10;\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = uVar10;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 8);\n    uVar14 = *unaff_R12;\n    puVar15[0xb] = uVar9;\n    uVar10 = puVar15[10];\n    uVar13 = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = uVar13;\n    if (uVar10 != (uVar10 + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = uVar13 + uVar10 + 0xc;\n    if (unaff_RBX < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + uVar13;\n    puVar15[0xd] = uVar1;\n    unaff_RBX = unaff_RBX + (-0xc - (uVar13 + uVar10));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          uVar10 = extract_gnu_build_attribute_notes_00116490();\n          return uVar10;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          uVar10 = extract_gnu_build_attribute_notes_00116490();\n          return uVar10;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          uVar10 = extract_gnu_build_attribute_notes_00116490();\n          return uVar10;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    uVar13 = unaff_RBP;\n    uVar20 = unaff_R13;\n    if (uVar10 == 0) {\n      if (uVar9 == 0x100) {\n        puVar15[0x10] = unaff_retaddr;\nLAB_001164af:\n        uVar12 = uVar11;\n        uVar10 = uVar20;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      else {\n        puVar15[0x10] = param_9;\nLAB_0011669e:\n        unaff_RBP = uVar13;\n        uVar12 = uVar11;\n        uVar10 = uVar13;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      goto LAB_001164bb;\n    }\n    if (uVar10 == 0x10) break;\n    if (0x10 < uVar10) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        bfd_nonfatal_message(0,unaff_R14,param_14,lVar7);\n        status = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (uVar10 != 4) {\n      if (uVar10 == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = uVar11;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n    uVar10 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = uVar11;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x28))(uVar1);\n  uVar10 = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_R12 <= puVar15) {\n    qsort(param_11,__nmemb,0x48,sort_gnu_build_notes);\n    __ptr = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    puVar19 = __ptr;\n    for (puVar15 = param_11; puVar15 < unaff_R12; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == param_9) && (puVar15[8] == param_7)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(unaff_R14[1] + 0x50))(0,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar9 = puVar15[6];\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + uVar9;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            cVar17 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          uVar9 = puVar15[6];\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = unaff_R14[1];\n          puVar16 = puVar16 + uVar9;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          param_9 = puVar15[7];\n          param_7 = puVar15[8];\n        }\n      }\n    }\n    uVar9 = (long)puVar19 - (long)__ptr;\n    uVar10 = uVar9;\n    puVar19 = __ptr;\n    if (uVar9 < param_10) {\n      for (; param_10 = uVar9, uVar10 != 0; uVar10 = uVar10 - 1) {\n        *in_stack_00000030 = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (puVar15[2] != 0) {\n    uVar10 = puVar15[7];\n    uVar9 = puVar15[8];\n    uVar13 = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (uVar10 == uVar9) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < param_11) goto LAB_001167f5;\n          uVar20 = puVar5[-7];\n        } while (uVar20 == 0);\n        param_7 = uVar13;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        uVar13 = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (uVar10 == uVar13) {\n          if (uVar9 == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < uVar10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (uVar10 <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto extract_notes_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (uVar20 == 0x101)) {\n            if (uVar11 <= uVar9) {\n              uVar11 = uVar9;\n            }\n            if (uVar13 < uVar10) {\n              uVar10 = uVar13;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = uVar10;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (uVar13 <= uVar10) goto LAB_001167a6;\n          if (uVar11 < uVar10) goto LAB_0010852c;\n          if (uVar9 < uVar10) {\n            if ((0xfffffffffffffff0 < uVar9) || (uVar13 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto extract_notes_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != uVar11) goto LAB_001167b8;\n        }\nextract_notes_00116852:\n        bVar4 = iVar23 < 0x11;\n        uVar13 = param_7;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "non_fatal",
                "FUN_00116490",
                "dcgettext",
                "qsort",
                "merge_gnu_build_notes.cold",
                "bfd_set_error",
                "compare_gnu_build_notes"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "FUNC_001086af"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_class_method_var_0010add5",
                "stab_class_method_var": "initializeStabClassMethodVar"
            },
            "code": "\nvoid initializeClassMethodVar_0010add5(void)\n\n{\n  initializeStabClassMethodVar();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_method_var_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_const_type_00113e17",
                "debug_make_type_constprop_0": "debugMakeTypeConstprop"
            },
            "code": "\nvoid initializeConstType_00113e17(void)\n\n{\n  debugMakeTypeConstprop(2,0);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_find_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_const_type_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "dataStructureBase",
                "param_2": "stringParam",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "oldData",
                "puVar2": "newDataStructure",
                "uVar3": "duplicatedString",
                "xmalloc": "allocateMemory",
                "xstrdup": "duplicateString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long dataStructureBase,undefined8 stringParam,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 oldData;\n  undefined8 *newDataStructure;\n  undefined8 duplicatedString;\n  \n  newDataStructure = (undefined8 *)allocateMemory(0x40);\n  duplicatedString = duplicateString(stringParam);\n  newDataStructure[2] = param3;\n  *(undefined (*) [16])(newDataStructure + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newDataStructure + 6) = ZEXT816(0);\n  oldData = *(undefined8 *)(dataStructureBase + 0x60);\n  *(undefined *)((long)newDataStructure + 0x1c) = param4;\n  *(undefined4 *)(newDataStructure + 3) = param5;\n  *(undefined8 **)(dataStructureBase + 0x60) = newDataStructure;\n  *newDataStructure = oldData;\n  newDataStructure[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "stab_modify_type",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_001282b0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282b0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_001282b0"
        },
        "FUN_001040c0": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040c0"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "param_1": "string",
                "param_2": "out_of_range",
                "param_3": "end_of_string",
                "param_4": "unused_param_4",
                "param_5": "unused_param_5",
                "__nptr": "current_char",
                "piVar1": "error_flag",
                "uVar2": "number",
                "uVar3": "error_message",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **string,undefined *out_of_range,char *end_of_string,undefined8 unused_param_4,undefined8 unused_param_5)\n\n{\n  char *current_char;\n  int *error_flag;\n  ulong number;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (out_of_range != (undefined *)0x0) {\n    *out_of_range = 0;\n  }\n  current_char = *string;\n  if ((current_char < end_of_string) && (*current_char != '\\0')) {\n    error_flag = __errno_location();\n    *error_flag = 0;\n    number = strtoul(current_char,string,0);\n    if ((number != 0xffffffffffffffff) || (*error_flag == 0)) goto LAB_00109aa9;\n    if (out_of_range == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(current_char,error_message);\n    }\n    else {\n      *out_of_range = 1;\n    }\n  }\n  number = 0;\nLAB_00109aa9:\n  result._8_8_ = unused_param_5;\n  result._0_8_ = number;\n  return result;\n}\n\n",
            "called": [
                "__errno_location",
                "strtoul",
                "dcgettext",
                "warn_stab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "parse_stab_type_number",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_numeric_string_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "debug_tag_type_check_0010c6be",
                "param_1": "file_handle",
                "param_2": "tag_name",
                "param_3": "tag_list",
                "iVar1": "comparison_result",
                "uVar2": "localized_message",
                "piVar3": "new_tag_list",
                "pauVar4": "dynamic_array",
                "lVar5": "address_offset",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * debug_tag_type_check_0010c6be(long file_handle,char *tag_name,int *tag_list)\n\n{\n  int comparison_result;\n  undefined8 localized_message;\n  int *new_tag_list;\n  undefined (*dynamic_array) [16];\n  long address_offset;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_list != (int *)0x0)) {\n    if (*(long *)(file_handle + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tag_list != 0x17) {\n        new_tag_list = (int *)debug_make_type_constprop_0(0x17,0);\n        if (new_tag_list == (int *)0x0) {\n          return (int *)0x0;\n        }\n        dynamic_array = (undefined (*) [16])xmalloc(0x10);\n        address_offset = *(long *)(file_handle + 0x10);\n        *dynamic_array = ZEXT816(0);\n        *(int **)(*dynamic_array + 8) = tag_list;\n        *(undefined (**) [16])(new_tag_list + 4) = dynamic_array;\n        address_offset = debug_add_to_namespace_constprop_0(address_offset + 0x10,tag_name,1,3);\n        if (address_offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(address_offset + 0x20) = new_tag_list;\n        *(long *)*dynamic_array = address_offset;\n        return new_tag_list;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag_list + 4) + 8),tag_name);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag_list;\n      }\n    }\n    localized_message = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",localized_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "dcgettext",
                "strcmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "parse_stab",
                "finish_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "debug_tag_type_check_0010c6be"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "__ptr": "result_ptr",
                "__format": "error_message",
                "lVar1": "demangled_arg",
                "uVar2": "arg_count",
                "uVar3": "initial_capacity",
                "uVar4": "new_arg_count",
                "local_39": "demangled_arg_buffer"
            },
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result_ptr;\n  char *error_message;\n  long demangled_arg;\n  ulong arg_count;\n  ulong initial_capacity;\n  uint new_arg_count;\n  char demangled_arg_buffer [9];\n  \n  initial_capacity = 10;\n  arg_count = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangled_arg = stab_demangle_v3_arg(arg1,arg2,*(long *)(arglist + 4),0,demangled_arg_buffer);\n    if (demangled_arg == 0) {\n      if (demangled_arg_buffer[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      new_arg_count = (int)arg_count + 1;\n      if ((uint)initial_capacity <= new_arg_count) {\n        initial_capacity = (ulong)((uint)initial_capacity + 10);\n        result_ptr = (void *)xrealloc(result_ptr,initial_capacity << 3);\n      }\n      *(long *)((long)result_ptr + arg_count * 8) = demangled_arg;\n      arg_count = (ulong)new_arg_count;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + arg_count * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "dcgettext",
                "stab_demangle_v3_arg",
                "xmalloc",
                "free",
                "xrealloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_v3_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "update_section_info_0011a2e0",
                "param_1": "sectionInfoPtr",
                "param_2": "binaryPtr",
                "uVar1": "sectionInfoPtrCopy",
                "uVar2": "errorMsg",
                "lVar3": "updatedSectionInfo",
                "lVar4": "sectionPtr"
            },
            "code": "\nlong updateSectionInfo_0011a2e0(long sectionInfoPtr,long binaryPtr)\n\n{\n  undefined8 sectionInfoPtrCopy;\n  undefined8 errorMsg;\n  long updatedSectionInfo;\n  long sectionPtr;\n  \n  updatedSectionInfo = (**(code **)(*(long *)(binaryPtr + 8) + 0x208))(binaryPtr);\n  sectionPtr = *(long *)(sectionInfoPtr + 0x20);\n  *(undefined8 *)(updatedSectionInfo + 8) = *(undefined8 *)(sectionInfoPtr + 8);\n  *(undefined8 *)(updatedSectionInfo + 0x10) = *(undefined8 *)(sectionInfoPtr + 0x10);\n  *(undefined4 *)(updatedSectionInfo + 0x18) = *(undefined4 *)(sectionInfoPtr + 0x18);\n  if (sectionPtr == 0) {\n    sectionPtr = 0x128598;\n  }\n  else {\n    sectionPtr = bfd_get_section_by_name(binaryPtr);\n    if (sectionPtr == 0) {\n      sectionInfoPtrCopy = *(undefined8 *)(sectionInfoPtr + 0x20);\n      errorMsg = dcgettext(0,\"Section %s not found\",5);\n                    \n      fatal(errorMsg,sectionInfoPtrCopy);\n    }\n  }\n  *(long *)(updatedSectionInfo + 0x20) = sectionPtr;\n  return updatedSectionInfo;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "create_new_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_section_info_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "write_symbol_with_format_0010e8a9",
                "param_1": "symbolName",
                "param_2": "fileDescriptor",
                "param_3": "data",
                "__s": "formattedSymbol",
                "uVar1": "result",
                "sVar2": "dataLength"
            },
            "code": "\nundefined4 writeSymbolWithFormat_0010e8a9(undefined8 symbolName,undefined8 fileDescriptor,char *data)\n\n{\n  undefined4 result;\n  size_t dataLength;\n  char *formattedSymbol;\n  \n  dataLength = strlen(data);\n  formattedSymbol = (char *)xmalloc(dataLength + 0x14);\n  sprintf(formattedSymbol,\"%s:c=f%g\",symbolName,data);\n  result = stab_write_symbol_lto_priv_0(fileDescriptor,0x80,0,0,formattedSymbol);\n  if ((char)result != '\\0') {\n    free(formattedSymbol);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_format_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "iVar1": "comparisonResult",
                "uVar2": "errorString",
                "pcVar3": "commaPtr",
                "unaff_RBP": "currentSectionFlag",
                "__s": "sectionFlagString",
                "sVar4": "sectionFlagLength",
                "iVar5": "sectionFlagLengthInt",
                "unaff_R14D": "currentSectionFlagValue",
                "unaff_R15": "comparisonString",
                "auVar6": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] parseSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 errorString;\n  char *commaPtr;\n  char *currentSectionFlag;\n  char *sectionFlagString;\n  size_t sectionFlagLength;\n  int sectionFlagLengthInt;\n  uint currentSectionFlagValue;\n  char *comparisonString;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    currentSectionFlagValue = currentSectionFlagValue | 0x2000;\n    sectionFlagString = currentSectionFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionFlagString == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = currentSectionFlagValue;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              commaPtr = strchr(sectionFlagString,0x2c);\n              if (commaPtr == (char *)0x0) {\n                sectionFlagLength = strlen(sectionFlagString);\n                sectionFlagLengthInt = (int)sectionFlagLength;\n                currentSectionFlag = (char *)0x0;\n              }\n              else {\n                currentSectionFlag = commaPtr + 1;\n                sectionFlagLengthInt = (int)commaPtr - (int)sectionFlagString;\n              }\n              sectionFlagLength = (size_t)sectionFlagLengthInt;\n              comparisonResult = strncasecmp(comparisonString,sectionFlagString,sectionFlagLength);\n              if (comparisonResult != 0) break;\n              currentSectionFlagValue = currentSectionFlagValue | 1;\n              sectionFlagString = currentSectionFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionFlagString,sectionFlagLength);\n            if (comparisonResult != 0) break;\n            currentSectionFlagValue = currentSectionFlagValue | 2;\n            sectionFlagString = currentSectionFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionFlagString,sectionFlagLength);\n          if (comparisonResult != 0) break;\n          currentSectionFlagValue = currentSectionFlagValue | 0x200;\n          sectionFlagString = currentSectionFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionFlagString,sectionFlagLength);\n        if (comparisonResult != 0) break;\n        currentSectionFlagValue = currentSectionFlagValue | 8;\n        sectionFlagString = currentSectionFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionFlagString,sectionFlagLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionFlagString,sectionFlagLength);\n      if (comparisonResult == 0) {\n        currentSectionFlagValue = currentSectionFlagValue | 0x10;\n        sectionFlagString = currentSectionFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionFlagString,sectionFlagLength);\n        if (comparisonResult == 0) {\n          currentSectionFlagValue = currentSectionFlagValue | 0x20;\n          sectionFlagString = currentSectionFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionFlagString,sectionFlagLength);\n          if (comparisonResult == 0) {\n            currentSectionFlagValue = currentSectionFlagValue | 0x40;\n            sectionFlagString = currentSectionFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionFlagString,sectionFlagLength);\n            if (comparisonResult == 0) {\n              currentSectionFlagValue = currentSectionFlagValue | 0x8000;\n              sectionFlagString = currentSectionFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionFlagString,sectionFlagLength);\n              if (comparisonResult == 0) {\n                currentSectionFlagValue = currentSectionFlagValue | 0x8000000;\n                sectionFlagString = currentSectionFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionFlagString,sectionFlagLength);\n                if (comparisonResult == 0) {\n                  currentSectionFlagValue = currentSectionFlagValue | 0x100;\n                  sectionFlagString = currentSectionFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionFlagString,sectionFlagLength);\n                  if (comparisonResult == 0) {\n                    currentSectionFlagValue = currentSectionFlagValue | 0x800000;\n                    sectionFlagString = currentSectionFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionFlagString,sectionFlagLength);\n                    if (comparisonResult != 0) {\n                      commaPtr = (char *)xmalloc((long)(sectionFlagLengthInt + 1));\n                      strncpy(commaPtr,sectionFlagString,sectionFlagLength);\n                      commaPtr[sectionFlagLength] = '\\0';\n                      errorString = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      non_fatal(errorString,commaPtr);\n                      errorString = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      fatal(errorString,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    currentSectionFlagValue = currentSectionFlagValue | 0x1000000;\n                    sectionFlagString = currentSectionFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strncasecmp",
                "strchr",
                "non_fatal",
                "strlen",
                "dcgettext",
                "parse_flags.cold",
                "fatal",
                "strncpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00104ad6"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_equals100_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXEquals100_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "check_if_rax_equals100_001087da"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "currentCompilationUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errorMessage",
                "puVar4": "currentVar",
                "lVar5": "varIterator",
                "puVar6": "compilationUnitIterator",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long param1,char *param2,undefined8 param3,undefined8 param4)\n\n{\n  long currentCompilationUnit;\n  int comparisonResult;\n  undefined8 errorMessage;\n  undefined8 *currentVar;\n  long varIterator;\n  undefined8 *compilationUnitIterator;\n  undefined result [16];\n  \n  currentCompilationUnit = *(long *)(param1 + 8);\n  if (currentCompilationUnit == 0) {\n    errorMessage = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  else {\n    for (varIterator = *(long *)(param1 + 0x20); varIterator != 0; varIterator = *(long *)(varIterator + 8)) {\n      if (*(undefined8 **)(varIterator + 0x28) != (undefined8 *)0x0) {\n        for (currentVar = (undefined8 *)**(undefined8 **)(varIterator + 0x28); currentVar != (undefined8 *)0x0;\n            currentVar = (undefined8 *)*currentVar) {\n          if (*(int *)((long)currentVar + 0x14) == 0) {\n            if (*(char *)currentVar[1] == *param2) {\n              comparisonResult = strcmp((char *)currentVar[1],param2);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (compilationUnitIterator = *(undefined8 **)(currentCompilationUnit + 8); compilationUnitIterator != (undefined8 *)0x0;\n        compilationUnitIterator = (undefined8 *)*compilationUnitIterator) {\n      if ((undefined8 *)compilationUnitIterator[2] != (undefined8 *)0x0) {\n        for (currentVar = *(undefined8 **)(undefined8 *)compilationUnitIterator[2]; currentVar != (undefined8 *)0x0;\n            currentVar = (undefined8 *)*currentVar) {\n          if (*(int *)((long)currentVar + 0x14) == 0) {\n            if (*(char *)currentVar[1] == *param2) {\n              comparisonResult = strcmp((char *)currentVar[1],param2);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_00109223:\n  result._8_8_ = param4;\n  result._0_8_ = errorMessage;\n  return result;\nLAB_00109216:\n  errorMessage = currentVar[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "dcgettext",
                "strcmp",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_001041f0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001041f0"
        },
        "FUN_001040d0": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040d0"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_section_and_return_result_0010829e",
                "unaff_EBP": "section_id",
                "uVar1": "result"
            },
            "code": "\nundefined8 check_section_and_return_result_0010829e(void)\n\n{\n  undefined8 result;\n  int section_id;\n  \n  if (section_id == 5) {\n    result = is_dwo_section_constprop_0();\n    return result;\n  }\n  if ((section_id != 4) && (section_id == 6)) {\n    result = invert_result_and_return_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "check_section_and_return_result_0010829e"
        },
        "FUN_001281c0": {
            "renaming": {},
            "code": "\n\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fnmatch@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281c0",
            "calling": [
                "fnmatch"
            ],
            "imported": false,
            "current_name": "FUN_001281c0"
        },
        "FUN_00104700": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104700"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_binary_info_00104943",
                "iVar1": "inputValue",
                "iVar2": "archIndex",
                "in_RAX": "inputString",
                "lVar3": "convertedValue",
                "sVar4": "stringLength",
                "pcVar5": "archString",
                "uVar6": "printableString",
                "iVar7": "archCounter",
                "lVar8": "paramCounter",
                "iVar9": "innerCounter",
                "unaff_R15D": "indentationLength",
                "uVar10": "loopCounter",
                "uVar11": "archIndexMinusTwo",
                "param_7": "maxParam",
                "uStack000000000000000c": "loopCounterStack",
                "param_11": "functionArray",
                "param_13": "dataArray"
            },
            "code": "\n\n\nvoid printBinaryInfo_00104943(void)\n\n{\n  int inputValue;\n  int archIndex;\n  char *inputString;\n  long convertedValue;\n  size_t stringLength;\n  char *archString;\n  undefined8 printableString;\n  int archCounter;\n  long paramCounter;\n  int innerCounter;\n  uint indentationLength;\n  ulong loopCounter;\n  uint archIndexMinusTwo;\n  int maxParam;\n  uint loopCounterStack;\n  undefined8 functionArray;\n  long dataArray;\n  \n  convertedValue = strtol(inputString,(char **)0x0,10);\n  inputValue = (int)convertedValue;\n  innerCounter = maxParam;\n  loopCounterStack = indentationLength;\n  if (inputValue == 0) {\n    inputValue = 0x50;\n  }\n  do {\n    maxParam = innerCounter;\n    if (functionArray._4_4_ <= maxParam) {\n      return;\n    }\n    paramCounter = (long)maxParam;\n    archCounter = (inputValue - loopCounterStack) + -1;\n    convertedValue = paramCounter;\n    do {\n      innerCounter = (int)convertedValue;\n      if (functionArray._4_4_ <= innerCounter) break;\n      stringLength = strlen(*(char **)(dataArray + convertedValue * 0x60));\n      convertedValue = convertedValue + 1;\n      archCounter = (archCounter - (int)stringLength) + -1;\n    } while (-1 < archCounter);\n    printf(\"\\n%*s\",(ulong)(loopCounterStack + 1),&DAT_0011b4a1);\n    for (convertedValue = paramCounter * 0x60; ((ulong)(uint)(innerCounter - maxParam) + paramCounter) * 0x60 - convertedValue != 0;\n        convertedValue = convertedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(dataArray + convertedValue));\n    }\n    archCounter = 2;\n    putc(10,_stdout);\n    do {\n      archString = (char *)bfd_printable_arch_mach(archCounter,0);\n      archIndex = strcmp(archString,\"UNKNOWN!\");\n      if (archIndex != 0) {\n        printableString = bfd_printable_arch_mach(archCounter,0);\n        printf(\"%*s \",(ulong)loopCounterStack,printableString);\n        archIndexMinusTwo = archCounter - 2;\n        convertedValue = paramCounter * 0x60;\n        archIndex = maxParam;\n        while (innerCounter != archIndex) {\n          archString = *(char **)(dataArray + convertedValue);\n          if (*(char *)((long)(char **)(dataArray + convertedValue) + (ulong)archIndexMinusTwo + 8) == '\\0') {\n            stringLength = strlen(archString);\n            for (loopCounter = stringLength & 0xffffffff; (int)loopCounter != 0; loopCounter = (ulong)((int)loopCounter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archString,_stdout);\n          }\n          archIndex = archIndex + 1;\n          if (innerCounter != archIndex) {\n            putc(0x20,_stdout);\n          }\n          convertedValue = convertedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archCounter = archCounter + 1;\n    } while (archCounter != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "putc",
                "strlen",
                "fputs",
                "strcmp",
                "printf",
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "print_binary_info_00104943"
        },
        "FUN_00104820": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104820"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_type_const_00113e23",
                "param_1": "value1",
                "param_2": "value2",
                "lVar1": "typeConst",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong create_type_const_00113e23(undefined8 value1,undefined8 value2)\n\n{\n  long typeConst;\n  undefined8 *allocatedMemory;\n  \n  typeConst = debug_make_type_constprop_0(1,0);\n  if (typeConst != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = value1;\n    allocatedMemory[1] = value2;\n    *(undefined8 **)(typeConst + 0x10) = allocatedMemory;\n  }\n  return typeConst;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_tagged_type",
                "stab_find_type"
            ],
            "imported": false,
            "current_name": "create_type_const_00113e23"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStab_00108fb9(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "parse_stab_type_number",
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_bad_stab_00108fb9"
        },
        "FUN_001280a0": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a0",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_001280a0"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "iVar1": "current_digit",
                "pbVar2": "current_char",
                "pbVar3": "next_char",
                "uVar4": "result",
                "&_sch_istable": "&is_table"
            },
            "code": "\nulong parse_number_00108ea1(byte **input_ptr,int *output_ptr)\n\n{\n  int current_digit;\n  byte *current_char;\n  byte *next_char;\n  ulong result;\n  \n  current_char = *input_ptr;\n  result = 0;\n  if (((&is_table)[(ulong)*current_char * 2] & 4) != 0) {\n    next_char = current_char + 1;\n    current_digit = (char)*current_char + -0x30;\n    *output_ptr = current_digit;\n    *input_ptr = next_char;\n    if (((&is_table)[(ulong)current_char[1] * 2] & 4) != 0) {\n      do {\n        current_char = next_char;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*current_char;\n        next_char = current_char + 1;\n      } while (((&is_table)[(ulong)current_char[1] * 2] & 4) != 0);\n      if (current_char[1] == 0x5f) {\n        next_char = current_char + 2;\n        *input_ptr = next_char;\n        *output_ptr = current_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_char >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_001280a8": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a8",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_001280a8"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_section_sizes_00108072",
                "bVar1": "section_flags",
                "uVar2": "binary",
                "cVar3": "result",
                "uVar4": "alignment",
                "lVar5": "error_message",
                "lVar6": "section_list_1",
                "lVar7": "section_list_2",
                "lVar8": "change_section_address",
                "unaff_RBX": "parameters",
                "unaff_RBP": "base_pointer",
                "unaff_R14B": "flag",
                "dcgettext": "get_text",
                "find_section_list": "search_sections",
                "set_alignment_00108179": "set_alignment",
                "group_signature_isra_0": "signature_check",
                "copy_private_data_0010808f": "copy_private_data",
                "bfd_nonfatal_message": "print_error"
            },
            "code": "\nvoid set_section_sizes_00108072(void)\n\n{\n  byte section_flags;\n  undefined8 binary;\n  char result;\n  uint alignment;\n  long error_message;\n  long section_list_1;\n  long section_list_2;\n  undefined8 *parameters;\n  long base_pointer;\n  long unaff_R12;\n  long change_section_address;\n  char flag;\n  long unaff_R15;\n  \n  error_message = get_text(0,\"failed to set size\",5);\n  change_section_address = parameters[6];\n  section_list_1 = search_sections(*parameters,0,0x18);\n  if (section_list_1 == 0) {\n    *(byte *)(unaff_R15 + 0x28) = *(byte *)(unaff_R15 + 0x28) | 1;\n    binary = *parameters;\n    change_section_address = change_section_address + change_section_address;\n    *(long *)(unaff_R15 + 0x30) = change_section_address;\n    *(long *)(unaff_R15 + 0x38) = change_section_address;\n    change_section_address = parameters[7];\n    section_list_1 = search_sections(binary,0,0x60);\n    if (section_list_1 == 0) goto LAB_00115695;\nLAB_00115860:\n    section_list_2 = *(long *)(section_list_1 + 0x20);\n    if ((*(byte *)(section_list_1 + 0x14) & 0x40) != 0) {\n      section_list_2 = section_list_2 + change_section_address;\n    }\n    *(long *)(unaff_R15 + 0x38) = section_list_2;\n    change_section_address = search_sections(*parameters,0,0x200);\n    if (change_section_address != 0) goto LAB_00115889;\nLAB_001156b8:\n    alignment = *(uint *)((long)parameters + 0x7c);\n    if (alignment < 0x3f) goto LAB_001156c4;\n    error_message = get_text(0,\"failed to set alignment\",5);\n    *(undefined4 *)(unaff_R15 + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(unaff_R15 + 0x28) =\n         *(byte *)(unaff_R15 + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = unaff_R15;\n    parameters[0xb] = 0;\n    section_flags = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    section_list_2 = *(long *)(section_list_1 + 0x18);\n    if ((*(byte *)(section_list_1 + 0x14) & 8) == 0) {\n      section_list_2 = section_list_2 + change_section_address;\n    }\n    *(byte *)(unaff_R15 + 0x28) = *(byte *)(unaff_R15 + 0x28) | 1;\n    binary = *parameters;\n    *(long *)(unaff_R15 + 0x30) = section_list_2;\n    *(long *)(unaff_R15 + 0x38) = section_list_2;\n    change_section_address = parameters[7];\n    section_list_1 = search_sections(binary,0,0x60);\n    if (section_list_1 != 0) goto LAB_00115860;\nLAB_00115695:\n    binary = *parameters;\n    *(long *)(unaff_R15 + 0x38) = change_section_address + change_section_address;\n    change_section_address = search_sections(binary,0,0x200);\n    if (change_section_address == 0) goto LAB_001156b8;\nLAB_00115889:\n    alignment = *(uint *)(change_section_address + 0x2c);\n    if (0x3e < alignment) {\n      set_alignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(unaff_R15 + 0x7c) = alignment;\n    *(undefined4 *)(unaff_R15 + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(unaff_R15 + 0x28) =\n         *(byte *)(unaff_R15 + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = unaff_R15;\n    parameters[0xb] = 0;\n    section_flags = *(byte *)((long)parameters + 0x27);\n  }\n  if ((section_flags & 2) != 0) {\n    change_section_address = parameters[0x1a];\n    section_list_1 = signature_check(change_section_address,parameters[0x1c]);\n    if ((section_list_1 != 0) &&\n       (section_list_2 = *(long *)(unaff_R12 + 8), *(uint *)(section_list_1 + 0x18) = *(uint *)(section_list_1 + 0x18) | 0x20,\n       *(int *)(section_list_2 + 8) == 5)) {\n      *(long *)(change_section_address + 0xb0) = section_list_1;\n      result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(unaff_R15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    status = 1;\n    print_error(0);\n  }\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "FUN_00108179",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "set_section_sizes_00108072"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "param1",
                "param_4": "param2",
                "cVar1": "char1",
                "__s": "string1",
                "sVar2": "length",
                "__s_00": "new_string",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] processData_0010a2b9(long data_ptr,char flag,undefined8 param1,undefined8 param2)\n\n{\n  char char1;\n  char *string1;\n  size_t length;\n  char *new_string;\n  long counter;\n  undefined result [16];\n  \n  char1 = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  length = strlen(string1);\n  new_string = (char *)xmalloc(length + 0x1e);\n  if (flag == '\\0') {\n    *new_string = '\\0';\n    counter = 0;\n    flag = char1;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(new_string,\"%ld=@S;\",counter);\n  }\n  length = strlen(new_string);\n  sprintf(new_string + length,\"S%s\",string1);\n  free(string1);\n  result._0_4_ = stab_push_string(data_ptr,new_string,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(new_string);\n  }\n  result._8_8_ = param2;\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010a2b9"
        },
        "FUN_001040e0": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001040e0"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_001283f0": {
            "renaming": {},
            "code": "\n\n\n\nint access(char *__name,int __type)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* access@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f0",
            "calling": [
                "access"
            ],
            "imported": false,
            "current_name": "FUN_001283f0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_data_and_return_status_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2",
                "param_5": "param3",
                "param_6": "param4",
                "iVar1": "count",
                "cVar2": "status"
            },
            "code": "\nundefined updateDataAndReturnStatus_0010ec73(long *data,long value,undefined8 param1,undefined8 param2,\n                      undefined8 param3,undefined8 param4)\n\n{\n  int count;\n  char status;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  count = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = count + 1;\n  if (count == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (status = stab_write_symbol_lto_priv_0(data,0xc0,0,data[0x41],0,param4,param2),\n       status == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_data_and_return_status_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endianness"
            },
            "code": "\nvoid getEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00104830": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104830"
        },
        "FUN_00104710": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104710"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_remove_file_00115970",
                "param_1": "sourceFile",
                "param_2": "destinationFile",
                "param_3": "bufferSize",
                "param_4": "permissions",
                "param_5": "setTimesFlag",
                "param_6": "errorFlag",
                "uVar1": "copyResult",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "uVar4": "localizedErrorMessage",
                "uVar5": "bytesCopied",
                "auVar6": "returnData"
            },
            "code": "\nundefined  [16]\ncopyAndRemoveFile_00115970(char *sourceFile,char *destinationFile,undefined4 bufferSize,undefined8 permissions,char setTimesFlag,\n            undefined8 errorFlag)\n\n{\n  uint copyResult;\n  int *errorLocation;\n  char *errorMessage;\n  undefined8 localizedErrorMessage;\n  ulong bytesCopied;\n  undefined returnData [16];\n  \n  if (destinationFile == sourceFile) {\n    bytesCopied = 0;\n  }\n  else {\n    copyResult = simple_copy(bufferSize,destinationFile,permissions);\n    bytesCopied = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorLocation = __errno_location();\n      errorMessage = strerror(*errorLocation);\n      localizedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(localizedErrorMessage,destinationFile,errorMessage);\n    }\n    unlink(sourceFile);\n  }\n  if (setTimesFlag != '\\0') {\n    set_times(destinationFile,permissions);\n  }\n  returnData._8_8_ = errorFlag;\n  returnData._0_8_ = bytesCopied;\n  return returnData;\n}\n\n",
            "called": [
                "smart_rename.cold",
                "simple_copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_and_remove_file_00115970"
        },
        "FUN_001283f8": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f8",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_001283f8"
        },
        "FUN_001282d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282d8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_001282d8"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_class_method_variable_0010adf2"
            },
            "code": "\nvoid initializeClassMethodVariable_0010adf2(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_method_variable_0010adf2"
        },
        "FUN_00104840": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "copy_relocations_in_section",
                "merge_gnu_build_notes",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00104840"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "demangle_and_remember_type_0010d7d4",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "output_param_1",
                "param_4": "output_param_2",
                "param_5": "output_param_3",
                "uVar1": "input_value",
                "cVar2": "result_char",
                "uVar3": "result",
                "lVar4": "temp_var_1",
                "plVar5": "temp_var_2",
                "uVar6": "temp_var_3",
                "local_40": "local_array"
            },
            "code": "\nundefined4\ndemangle_and_remember_type_0010d7d4(undefined8 input_param_1,undefined8 *input_param_2,long *output_param_1,uint *output_param_2,uint *output_param_3)\n\n{\n  undefined8 input_value;\n  char result_char;\n  undefined4 result;\n  long temp_var_1;\n  long *temp_var_2;\n  uint temp_var_3;\n  long local_array [2];\n  \n  input_value = *input_param_2;\n  temp_var_2 = local_array;\n  if (output_param_1 == (long *)0x0) {\n    temp_var_2 = (long *)0x0;\n  }\n  result_char = stab_demangle_type_lto_priv_0(input_param_1,input_param_2,temp_var_2);\n  if ((result_char != '\\0') &&\n     (result = stab_demangle_remember_type(input_param_1,input_value,(int)*input_param_2 - (int)input_value),\n     (char)result != '\\0')) {\n    if (output_param_1 == (long *)0x0) {\n      return result;\n    }\n    if (local_array[0] != 0) {\n      if (*output_param_3 <= *output_param_2 + 1) {\n        temp_var_3 = *output_param_3 + 10;\n        temp_var_1 = *output_param_1;\n        *output_param_3 = temp_var_3;\n        temp_var_1 = xrealloc(temp_var_1,(ulong)temp_var_3 << 3);\n        *output_param_1 = temp_var_1;\n      }\n      temp_var_3 = *output_param_2;\n      *(long *)(*output_param_1 + (ulong)temp_var_3 * 8) = local_array[0];\n      *output_param_2 = temp_var_3 + 1;\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_remember_type",
                "stab_demangle_type.lto_priv.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "stab_demangle_args"
            ],
            "imported": false,
            "current_name": "demangle_and_remember_type_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "get_file_information_00113f50",
                "param_1": "filePath",
                "iVar1": "statResult",
                "piVar2": "errnoPtr",
                "uVar3": "errorMsg",
                "pcVar4": "errorStr",
                "sStack_a8": "statBuffer"
            },
            "code": "\nlong getFileInformation_00113f50(char *filePath)\n\n{\n  int statResult;\n  int *errnoPtr;\n  undefined8 errorMsg;\n  char *errorStr;\n  stat statBuffer;\n  \n  if (filePath != (char *)0x0) {\n    statResult = stat(filePath,&statBuffer);\n    if (statResult < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMsg = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(errorMsg,filePath);\n      }\n      else {\n        errorStr = strerror(*errnoPtr);\n        errorMsg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(errorMsg,filePath,errorStr);\n      }\n    }\n    else if ((statBuffer.st_mode & 0xf000) == 0x4000) {\n      errorMsg = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(errorMsg,filePath);\n    }\n    else if ((statBuffer.st_mode & 0xf000) == 0x8000) {\n      if (-1 < statBuffer.st_size) {\n        return statBuffer.st_size;\n      }\n      errorMsg = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(errorMsg,filePath);\n    }\n    else {\n      errorMsg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(errorMsg,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "get_file_size.cold",
                "non_fatal",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "copy_file",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "get_file_information_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd",
                "undefined8": "void"
            },
            "code": "\nvoid initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "sort_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStringsArray",
                "uVar1": "programName",
                "__format": "matchingFormatsFormatString",
                "plVar2": "currentFormatString"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStringsArray)\n\n{\n  undefined8 programName;\n  char *matchingFormatsFormatString;\n  long *currentFormatString;\n  \n  fflush(_stdout);\n  programName = program_name;\n  matchingFormatsFormatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,matchingFormatsFormatString,programName);\n  for (currentFormatString = formatStringsArray; *currentFormatString != 0; currentFormatString = currentFormatString + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStringsArray);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "process_binary_0011378f",
                "param_1": "inputList",
                "param_2": "outputList",
                "param_3": "memoryLocations",
                "param_4": "outputVar1",
                "param_5": "outputVar2",
                "param_6": "outputVar3",
                "auVar1": "tempVar1",
                "cVar2": "charFlag",
                "uVar3": "returnValue",
                "uVar4": "errorString",
                "puVar5": "tempPtr1",
                "sVar6": "stringLength",
                "lVar7": "loopCounter",
                "puVar8": "tempPtr2",
                "puVar9": "symbolArray",
                "__dest": "destinationStr",
                "puVar10": "ptr",
                "plVar11": "tempPtr3",
                "bVar12": "byteFlag",
                "local_258": "inputListLocal",
                "local_250": "memorySize",
                "local_248": "var1",
                "uStack_244": "var2",
                "uStack_240": "var3",
                "uStack_23c": "var4",
                "local_238": "tempArray",
                "local_228": "var5",
                "local_220": "strArray",
                "local_1f8": "var6",
                "local_1f0": "var7",
                "local_1e8": "symbolArrayLocal",
                "local_a0": "tempArray2",
                "local_78": "tempArray3",
                "uStack_70": "var8",
                "local_68": "var9",
                "local_60": "var10",
                "local_58": "var11",
                "uStack_54": "var12",
                "uStack_50": "var13",
                "uStack_4c": "var14"
            },
            "code": "\nundefined4\nprocessBinary_0011378f(undefined8 *inputList,undefined8 *outputList,long *memoryLocations,undefined8 *outputVar1,\n            undefined8 *outputVar2,undefined8 *outputVar3)\n\n{\n  undefined tempVar1 [16];\n  char charFlag;\n  undefined4 returnValue;\n  undefined8 errorString;\n  undefined *tempPtr1;\n  size_t stringLength;\n  long loopCounter;\n  undefined8 *tempPtr2;\n  undefined4 *symbolArray;\n  char *destinationStr;\n  undefined8 *ptr;\n  long *tempPtr3;\n  byte byteFlag;\n  undefined8 *inputListLocal;\n  long memorySize;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined tempArray [16];\n  undefined8 var5;\n  undefined strArray [40];\n  undefined8 var6;\n  undefined8 var7;\n  undefined4 symbolArrayLocal [82];\n  undefined tempArray2 [40];\n  undefined tempArray3 [8];\n  undefined8 var8;\n  undefined8 var9;\n  undefined4 var10;\n  undefined4 var11;\n  undefined4 var12;\n  undefined4 var13;\n  undefined4 var14;\n  \n  byteFlag = 0;\n  var1 = 0;\n  var2 = 0;\n  var3 = 500;\n  var4 = 0;\n  inputListLocal = inputList;\n  memorySize = xmalloc(500);\n  var5 = 1;\n  tempArray = ZEXT816(0);\n  charFlag = bfd_hash_table_init(strArray,string_hash_newfunc_lto_priv_0,0x30);\n  if ((charFlag == '\\0') ||\n     (charFlag = bfd_hash_table_init(tempArray2,string_hash_newfunc_lto_priv_0,0x30), charFlag == '\\0')) {\n    returnValue = bfd_get_error();\n    errorString = bfd_errmsg(returnValue);\n    non_fatal(\"bfd_hash_table_init_failed: %s\",errorString);\n  }\n  else {\n    var6 = 0;\n    unique0x100000e9 = 0xffffffff;\n    tempArray3 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    symbolArray = symbolArrayLocal;\n    for (loopCounter = 0x52; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *symbolArray = 0;\n      symbolArray = symbolArray + (ulong)byteFlag * -2 + 1;\n    }\n    var9 = 0;\n    var10 = 0;\n    var7 = 1;\n    var11 = 0;\n    var12 = 0;\n    var13 = 0xffffffff;\n    var14 = 0xffffffff;\n    charFlag = stab_write_symbol_lto_priv_0(&inputListLocal,0,0,0,0);\n    tempVar1 = _tempArray3;\n    if (charFlag != '\\0') {\n      tempArray3._4_4_ = var2;\n      tempArray3._0_4_ = var1;\n      var8 = tempVar1._8_8_;\n      charFlag = stab_write_symbol_lto_priv_0(&inputListLocal,100,0,0,*inputList);\n      if (charFlag != '\\0') {\n        *(int *)(outputList + 6) = *(int *)(outputList + 6) + 1;\n        outputList[10] = 0;\n        ptr = (undefined8 *)*outputList;\n        *(undefined4 *)(outputList + 7) = *(undefined4 *)((long)outputList + 0x34);\n        for (; ptr != (undefined8 *)0x0; ptr = (undefined8 *)*ptr) {\n          outputList[8] = ptr[2];\n          *(undefined4 *)(outputList + 9) = 0;\n          charFlag = stab_start_compilation_unit_lto_priv_0(&inputListLocal,*(undefined8 *)(ptr[1] + 8))\n          ;\n          if (charFlag == '\\0') {\n            return 0;\n          }\n          tempPtr3 = (long *)ptr[1];\n          if (tempPtr3 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)tempPtr3[2] != (undefined8 *)0x0) {\n                for (tempPtr2 = *(undefined8 **)(undefined8 *)tempPtr3[2]; tempPtr2 != (undefined8 *)0x0;\n                    tempPtr2 = (undefined8 *)*tempPtr2) {\n                  charFlag = debug_write_name_constprop_0(outputList,&inputListLocal);\n                  if (charFlag == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              tempPtr3 = (long *)*tempPtr3;\n              if (tempPtr3 == (long *)0x0) break;\n              charFlag = stab_start_source_lto_priv_0(&inputListLocal,tempPtr3[1]);\n              if (charFlag == '\\0') {\n                return 0;\n              }\n            }\n          }\n          charFlag = debug_write_linenos_constprop_0(outputList,&inputListLocal,0xffffffffffffffff);\n          if (charFlag == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var14,var13) == -1) &&\n           (returnValue = stab_write_symbol_lto_priv_0(&inputListLocal,100,0,var9,0), (char)returnValue != '\\0'))\n        {\n          (**(code **)(inputList[1] + 0x50))(var5,memorySize + 8);\n          *memoryLocations = memorySize;\n          *outputVar1 = CONCAT44(var2,var1);\n          *outputVar3 = var5;\n          tempPtr1 = (undefined *)xmalloc();\n          *tempPtr1 = 0;\n          destinationStr = tempPtr1 + 1;\n          *outputVar2 = tempPtr1;\n          for (loopCounter = tempArray._0_8_; loopCounter != 0; loopCounter = *(long *)(loopCounter + 0x18)) {\n            strcpy(destinationStr,*(char **)(loopCounter + 8));\n            stringLength = strlen(destinationStr);\n            destinationStr = destinationStr + stringLength + 1;\n          }\n          return returnValue;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "bfd_hash_table_init",
                "strlen",
                "debug_write_linenos.constprop.0",
                "string_hash_newfunc.lto_priv.0",
                "strcpy",
                "debug_write_name.constprop.0",
                "xmalloc",
                "bfd_get_error",
                "bfd_errmsg",
                "non_fatal",
                "stab_start_compilation_unit.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_0011378f"
        },
        "FUN_001281e0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strnlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281e0",
            "calling": [
                "strnlen"
            ],
            "imported": false,
            "current_name": "FUN_001281e0"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "file_not_found_error_00104966",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 fileNotFoundError_00104966(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(errorMessage);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "file_not_found_error_00104966"
        },
        "FUN_001280c0": {
            "renaming": {},
            "code": "\n\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280c0",
            "calling": [
                "strtod"
            ],
            "imported": false,
            "current_name": "FUN_001280c0"
        },
        "FUN_001040f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001040f0"
        },
        "FUN_00104720": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "main",
                "create_symbol_htab"
            ],
            "imported": false,
            "current_name": "FUN_00104720"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "modify_stab_type_0010a0a0",
                "param_1": "base_address",
                "stab_modify_type": "modify_stab_type"
            },
            "code": "\nvoid modify_stab_type_0010a0a0(long base_address)\n\n{\n  modify_stab_type_0010a0a0(base_address,0x26,4,base_address + 0x198,base_address + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0a0"
        },
        "FUN_00104600": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104600"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "report_data_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "output1",
                "param_10": "output2",
                "param_11": "output3",
                "param_12": "output4",
                "param_13": "output5",
                "param_14": "output6",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "offset",
                "local_d0": "dataPtr",
                "local_c8": "bufferPtr",
                "local_b8": "buffer",
                "local_b0": "temp1",
                "local_a8": "temp2",
                "local_a0": "temp3",
                "local_98": "temp4",
                "local_90": "temp5",
                "local_88": "temp6",
                "local_78": "temp7",
                "local_68": "temp8",
                "local_58": "temp9",
                "local_48": "temp10",
                "local_38": "temp11",
                "local_28": "temp12",
                "local_18": "temp13"
            },
            "code": "\nvoid reportData_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 output1,undefined8 output2,undefined8 output3,undefined8 output4,\n                 undefined8 output5,undefined8 output6)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 offset;\n  undefined *dataPtr;\n  undefined *bufferPtr;\n  undefined buffer [8];\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  undefined8 temp4;\n  undefined8 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined4 temp11;\n  undefined4 temp12;\n  undefined4 temp13;\n  \n  if (condition != '\\0') {\n    temp6 = input1;\n    temp7 = input2;\n    temp8 = input3;\n    temp9 = input4;\n    temp10 = input5;\n    temp11 = input6;\n    temp12 = input7;\n    temp13 = input8;\n  }\n  dataPtr = &stack0x00000008;\n  size = 8;\n  bufferPtr = buffer;\n  offset = 0x30;\n  temp1 = output2;\n  temp2 = output3;\n  temp3 = output4;\n  temp4 = output5;\n  temp5 = output6;\n  report(output1,&size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "check_new_section_flags.cold",
                "get_file_size.cold",
                "stab_write_symbol.lto_priv.0",
                "smart_rename.cold",
                "main",
                "merge_gnu_build_notes",
                "get_file_size",
                "parse_flags.cold",
                "FUN_001086af",
                "stab_int_type.lto_priv.0",
                "set_times.cold",
                "FUN_00105828",
                "FUN_00104cc1",
                "FUN_001152b6",
                "FUN_00104ea2",
                "FUN_00107880",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "copy_object",
                "stab_struct_field.lto_priv.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "report_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "generate_type_info_00112c1f",
                "param_1": "info",
                "param_2": "output",
                "param_3": "typeList",
                "param_4": "baseType",
                "plVar1": "ptr",
                "lVar2": "data",
                "puVar3": "ptr1",
                "puVar4": "ptr2",
                "cVar5": "flag",
                "piVar6": "ptr3",
                "uVar7": "result",
                "uVar8": "value1",
                "uVar10": "count",
                "uVar11": "value2",
                "uVar12": "iterator",
                "uVar13": "count2",
                "bVar14": "flag2",
                "local_3c": "var"
            },
            "code": "\n\n\nundefined8 generateTypeInfo_00112c1f(ulong info,undefined8 output,int *typeList,long baseType)\n\n{\n  long *ptr;\n  long data;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  char flag;\n  int *ptr3;\n  undefined8 result;\n  undefined8 value1;\n  int iVar9;\n  undefined4 count;\n  undefined8 value2;\n  ulong iterator;\n  uint count2;\n  bool flag2;\n  uint var;\n  \n  iterator = info;\nLAB_00112c39:\n  if (typeList != (int *)0x0) {\n    iVar9 = *typeList;\n    if (iVar9 - 0x16U < 2) {\n      do {\n        ptr = *(long **)(typeList + 4);\n        count2 = *(uint *)(info + 0x30);\n        iterator = (ulong)count2;\n        data = *ptr;\n        if (*(uint *)(data + 0x10) == count2) {\n          if (iVar9 == 0x16) {\n            result = stab_typedef_type_lto_priv_0(output,*(undefined8 *)(data + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptr3 = (int *)debug_get_real_type_isra_0(typeList,0);\n          if (ptr3 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr3 - 7U < 4) && (*(long *)(ptr3 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr3 + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (flag = debug_set_class_id_lto_priv_0\n                                  (info,*(undefined8 *)(**(long **)(typeList + 4) + 8),ptr3),\n               flag == '\\0')) {\n              return 0;\n            }\n            count2 = *(uint *)(*(long *)(ptr3 + 4) + 0xc);\n          }\n          else {\n            count2 = 0;\n          }\n          iVar9 = *ptr3;\n          result = *(undefined8 *)(**(long **)(typeList + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (iVar9 == 0x17) {\n          if (data != baseType) goto LAB_00112c94;\n          *(uint *)(baseType + 0x10) = count2;\n          baseType = *ptr;\n          typeList = (int *)ptr[1];\n          goto LAB_00112c39;\n        }\n        if (baseType != 0) {\n          *(uint *)(baseType + 0x10) = count2;\n        }\n        typeList = (int *)ptr[1];\n        if (typeList == (int *)0x0) goto LAB_00112dd6;\n        iVar9 = *typeList;\n        baseType = 0;\n      } while (iVar9 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (baseType == 0) goto LAB_00112d74;\n      *(undefined4 *)(baseType + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(baseType + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(baseType + 8);\n    }\n    switch(iVar9) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = stab_void_type_lto_priv_0(output);\n      return result;\n    case 3:\n      result = stab_int_type_lto_priv_0(output,typeList[1],*(undefined *)(typeList + 4));\n      return result;\n    case 4:\n      result = stab_float_type_lto_priv_0(output,typeList[1]);\n      return result;\n    case 5:\n      result = stab_complex_type_lto_priv_0(output,typeList[1]);\n      return result;\n    case 6:\n      result = stab_bool_type_lto_priv_0(output,typeList[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(typeList + 4) != 0) {\n        if ((*(uint *)(*(long *)(typeList + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (flag = debug_set_class_id_lto_priv_0(info,result,typeList), flag == '\\0')) {\n          return 0;\n        }\n        data = *(long *)(typeList + 4);\n        if (*(int *)(info + 0x30) == *(int *)(data + 8)) {\n          count2 = *(uint *)(data + 0xc);\n          if (count2 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          iVar9 = *typeList;\nLAB_00112ed2:\n          result = stab_tag_type_lto_priv_0(output,result,count2,iVar9);\n          return result;\n        }\n        *(int *)(data + 8) = *(int *)(info + 0x30);\n      }\n      count = 0;\n      if (*(long *)(typeList + 4) != 0) {\n        count = *(undefined4 *)(*(long *)(typeList + 4) + 0xc);\n      }\n      flag = stab_start_struct_type_lto_priv_0(output,result,count,*typeList == 7,typeList[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(typeList + 4) != (long *)0x0) && (iterator = 0, **(long **)(typeList + 4) != 0)) {\n        while( true ) {\n          ptr2 = *(undefined8 **)(**(long **)(typeList + 4) + iterator * 8);\n          if (ptr2 == (undefined8 *)0x0) break;\n          flag = generateTypeInfo_00112c1f(info,output,ptr2[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = stab_struct_field_lto_priv_0\n                            (output,*ptr2,*(undefined4 *)(ptr2 + 3),\n                             *(undefined4 *)((long)ptr2 + 0x1c),*(undefined4 *)(ptr2 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          iterator = (ulong)((int)iterator + 1);\n        }\n      }\n      result = stab_end_struct_type_lto_priv_0(output);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(typeList + 4) == 0) {\n        count2 = 0;\n        ptr3 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(typeList + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (iterator = info, flag = debug_set_class_id_lto_priv_0(info,result,typeList),\n           flag == '\\0')) {\n          return 0;\n        }\n        data = *(long *)(typeList + 4);\n        count2 = *(uint *)(data + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(data + 8)) {\n          if (count2 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          iVar9 = *typeList;\n          goto LAB_00112ed2;\n        }\n        ptr3 = *(int **)(data + 0x20);\n        *(int *)(data + 8) = *(int *)(info + 0x30);\n        if (((ptr3 != (int *)0x0) && (typeList != ptr3)) &&\n           (iterator = info, flag = generateTypeInfo_00112c1f(info,output,ptr3,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = stab_start_class_type_lto_priv_0\n                        (output,result,count2,*typeList == 9,typeList[1],ptr3 != (int *)0x0,\n                         typeList == ptr3,iterator);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(typeList + 4) != (long *)0x0) {\n        count2 = 0;\n        if (**(long **)(typeList + 4) != 0) {\n          while (ptr2 = *(undefined8 **)(**(long **)(typeList + 4) + (ulong)count2 * 8),\n                ptr2 != (undefined8 *)0x0) {\n            flag = generateTypeInfo_00112c1f(info,output,ptr2[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr2 + 0x14) == '\\0') {\n              flag = stab_struct_field_lto_priv_0(output,*ptr2,*(undefined4 *)(ptr2 + 3));\n            }\n            else {\n              flag = stab_class_static_member_lto_priv_0(output,*ptr2,ptr2[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            count2 = count2 + 1;\n          }\n        }\n        count2 = 0;\n        if (*(long *)(*(long *)(typeList + 4) + 0x10) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(typeList + 4) + 0x10) + (ulong)count2 * 8),\n                ptr2 != (undefined8 *)0x0) {\n            flag = generateTypeInfo_00112c1f(info,output,*ptr2,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = stab_class_baseclass_lto_priv_0\n                              (output,*(undefined4 *)(ptr2 + 1),\n                               *(undefined *)((long)ptr2 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            count2 = count2 + 1;\n          }\n        }\n        var = 0;\n        if (*(long *)(*(long *)(typeList + 4) + 0x18) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(typeList + 4) + 0x18) + (ulong)var * 8),\n                ptr2 != (undefined8 *)0x0) {\n            flag = stab_class_start_method_lto_priv_0(output,*ptr2);\n            if (flag == '\\0') {\n              return 0;\n            }\n            count2 = 0;\n            while (ptr1 = *(undefined8 **)(ptr2[1] + (ulong)count2 * 8),\n                  ptr1 != (undefined8 *)0x0) {\n              if ((ptr1[4] != 0) &&\n                 (flag = generateTypeInfo_00112c1f(info,output,ptr1[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = generateTypeInfo_00112c1f(info,output,ptr1[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (ptr1[3] == -1) {\n                flag = stab_class_static_method_variant_lto_priv_0\n                                  (output,*ptr1,*(undefined4 *)(ptr1 + 2),\n                                   *(undefined *)((long)ptr1 + 0x14),\n                                   *(undefined *)((long)ptr1 + 0x15));\n              }\n              else {\n                flag = stab_class_method_variant_lto_priv_0(output);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              count2 = count2 + 1;\n            }\n            flag = stab_class_end_method_lto_priv_0(output);\n            if (flag == '\\0') {\n              return 0;\n            }\n            var = var + 1;\n          }\n        }\n      }\n      result = stab_end_class_type_lto_priv_0(output);\n      return result;\n    case 0xb:\n      ptr2 = *(undefined8 **)(typeList + 4);\n      if (ptr2 == (undefined8 *)0x0) {\n        value1 = 0;\n        value2 = 0;\n      }\n      else {\n        value1 = ptr2[1];\n        value2 = *ptr2;\n      }\n      result = stab_enum_type_lto_priv_0(output,result,value2,value1);\n      return result;\n    case 0xc:\n      flag = generateTypeInfo_00112c1f(info,output,*(undefined8 *)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_pointer_type_lto_priv_0(output);\n      return result;\n    case 0xd:\n      flag = generateTypeInfo_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      iterator = 0;\n      if (*(long *)(*(long *)(typeList + 4) + 8) == 0) {\n        iterator = 0xffffffff;\n      }\n      else {\n        while (data = *(long *)(*(long *)(*(long *)(typeList + 4) + 8) + iterator * 8), data != 0) {\n          iterator = iterator + 1;\n          flag = generateTypeInfo_00112c1f(info,output,data,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        iterator = iterator & 0xffffffff;\n      }\n      result = stab_function_type_lto_priv_0\n                        (output,iterator,*(undefined *)(*(long *)(typeList + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = generateTypeInfo_00112c1f(info,output,*(undefined8 *)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_reference_type_lto_priv_0(output);\n      return result;\n    case 0xf:\n      flag = generateTypeInfo_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_range_type_lto_priv_0\n                        (output,*(undefined8 *)(*(long *)(typeList + 4) + 8),\n                         *(undefined8 *)(*(long *)(typeList + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = generateTypeInfo_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = generateTypeInfo_00112c1f(info,output,*(undefined8 *)(*(long *)(typeList + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      data = *(long *)(typeList + 4);\n      result = stab_array_type_lto_priv_0\n                        (output,*(undefined8 *)(data + 0x10),*(undefined8 *)(data + 0x18),\n                         *(undefined *)(data + 0x20));\n      return result;\n    case 0x11:\n      flag = generateTypeInfo_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_set_type_lto_priv_0(output,*(undefined *)(*(long *)(typeList + 4) + 8));\n      return result;\n    case 0x12:\n      flag = generateTypeInfo_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = generateTypeInfo_00112c1f(info,output,*(undefined8 *)(*(long *)(typeList + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_offset_type_lto_priv_0(output);\n      return result;\n    case 0x13:\n      flag = generateTypeInfo_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      iterator = 0;\n      if (*(long *)(*(long *)(typeList + 4) + 0x10) == 0) {\n        iterator = 0xffffffff;\n      }\n      else {\n        while (data = *(long *)(*(long *)(*(long *)(typeList + 4) + 0x10) + iterator * 8), data != 0)\n        {\n          iterator = iterator + 1;\n          flag = generateTypeInfo_00112c1f(info,output,data,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(typeList + 4) + 8) != 0) &&\n         (flag = generateTypeInfo_00112c1f(info,output,*(long *)(*(long *)(typeList + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = stab_method_type_lto_priv_0\n                        (output,*(long *)(*(long *)(typeList + 4) + 8) != 0,iterator & 0xffffffff,\n                         *(undefined *)(*(long *)(typeList + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = generateTypeInfo_00112c1f(info,output,*(undefined8 *)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_const_type_lto_priv_0(output);\n      return result;\n    case 0x15:\n      flag = generateTypeInfo_00112c1f(info,output,*(undefined8 *)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_volatile_type_lto_priv_0(output);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  flag2 = *(int **)**(undefined8 **)(typeList + 4) == typeList;\n  typeList = *(int **)**(undefined8 **)(typeList + 4);\n  if (flag2) {\nLAB_00112dd6:\n    result = stab_empty_type_lto_priv_0(output);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "__assert_fail",
                "stab_set_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "debug_get_real_type.isra.0",
                "stab_tag_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "abort",
                "stab_struct_field.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "fprintf",
                "stab_function_type.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "stab_class_method_variant.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_reference_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "dcgettext",
                "stab_int_type.lto_priv.0",
                "debug_set_class_id.lto_priv.0",
                "stab_bool_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_type_info_00112c1f"
        },
        "FUN_00104850": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104850"
        },
        "FUN_00104730": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104730"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "flag",
                "unaff_R15": "dataPointer",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char flag;\n  long dataPointer;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(dataPointer + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "FUN_001281d0": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281d0",
            "calling": [
                "memset"
            ],
            "imported": false,
            "current_name": "FUN_001281d0"
        },
        "FUN_00104610": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104610"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_message_00108fe8",
                "param_1": "errorMessage",
                "param_2": "warningMessage",
                "in_RAX": "formattedMessage",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid printWarningMessage_00108fe8(undefined8 errorMessage,undefined8 warningMessage)\n\n{\n  undefined8 formattedMessage;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,warningMessage,errorMessage,formattedMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "parse_stab",
                "parse_number",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_warning_message_00108fe8"
        },
        "FUN_001280b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280b8",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_001280b8"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_input_file_format_00105828",
                "iVar1": "architecture",
                "uVar2": "file_arch",
                "uVar3": "arch_mach",
                "uVar4": "error_msg"
            },
            "code": "\nundefined8 check_input_file_format_00105828(void)\n\n{\n  int architecture;\n  undefined4 file_arch;\n  undefined8 arch_mach;\n  undefined8 error_msg;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    arch_mach = bfd_get_archive_filename();\n    error_msg = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    non_fatal(error_msg,arch_mach);\n  }\n  else {\n    arch_mach = bfd_get_mach();\n    file_arch = bfd_get_arch();\n    arch_mach = bfd_printable_arch_mach(file_arch,arch_mach);\n    error_msg = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    non_fatal(error_msg,arch_mach);\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "non_fatal",
                "bfd_get_arch",
                "bfd_get_mach",
                "dcgettext",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_input_file_format_00105828"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template_directory",
                "pcVar1": "temp_directory",
                "template_in_dir": "get_template_directory",
                "mkdtemp": "make_temp_directory",
                "free": "release_directory"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template_directory;\n  char *temp_directory;\n  \n  template_directory = (char *)get_template_directory();\n  temp_directory = make_temp_directory(template_directory);\n  if (temp_directory == (char *)0x0) {\n    release_directory(template_directory);\n  }\n  return temp_directory;\n}\n\n",
            "called": [
                "make_tempdir.cold",
                "template_in_dir",
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_push_defined_type_0010bba1",
                "param_1": "base_address",
                "param_2": "type",
                "lVar1": "hash_result",
                "uVar2": "push_result"
            },
            "code": "\nundefined8 lookup_and_push_defined_type_0010bba1(long base_address,undefined8 type)\n\n{\n  long hash_result;\n  undefined8 push_result;\n  \n  hash_result = bfd_hash_lookup(base_address + 0x1b8,type,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    push_result = stab_push_defined_type(base_address,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return push_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "lookup_and_push_defined_type_0010bba1"
        },
        "FUN_00104740": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "try_dir.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104740"
        },
        "FUN_00104620": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104620"
        },
        "FUN_00104860": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104860"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "write_symbol_0010e6a8",
                "param_1": "param1",
                "param_2": "symbolName",
                "param_3": "param3",
                "param_4": "result",
                "__s": "type",
                "__s_00": "formattedSymbol",
                "lVar5": "lookupResult",
                "lVar8": "nextIndex",
                "sVar3": "symbolNameLength",
                "sVar4": "typeLength",
                "uVar1": "writeResult",
                "uVar2": "symbolType",
                "uVar6": "error",
                "uVar7": "errorString",
                "uVar9": "returnValue",
                "auVar10": "returnVal"
            },
            "code": "\nundefined  [16] writeSymbol_0010e6a8(long param1,char *symbolName,undefined8 param3,undefined8 result)\n\n{\n  uint writeResult;\n  undefined4 symbolType;\n  char *type;\n  size_t symbolNameLength;\n  size_t typeLength;\n  char *formattedSymbol;\n  long lookupResult;\n  undefined8 error;\n  undefined8 errorString;\n  long nextIndex;\n  ulong returnValue;\n  undefined returnVal [16];\n  \n  nextIndex = *(long *)(*(long *)(param1 + 0x60) + 0x10);\n  symbolType = *(undefined4 *)(*(long *)(param1 + 0x60) + 0x18);\n  type = (char *)stab_pop_type();\n  symbolNameLength = strlen(symbolName);\n  typeLength = strlen(type);\n  formattedSymbol = (char *)xmalloc(symbolNameLength + 0x14 + typeLength);\n  if (nextIndex < 1) {\n    nextIndex = *(long *)(param1 + 0x68);\n    *(long *)(param1 + 0x68) = nextIndex + 1;\n    sprintf(formattedSymbol,\"%s:t%ld=%s\",symbolName,nextIndex,type);\n  }\n  else {\n    sprintf(formattedSymbol,\"%s:t%s\",symbolName,type);\n  }\n  free(type);\n  writeResult = stab_write_symbol_lto_priv_0(param1,0x80,0,0,formattedSymbol);\n  returnValue = (ulong)writeResult;\n  if ((char)writeResult != '\\0') {\n    free(formattedSymbol);\n    lookupResult = bfd_hash_lookup(param1 + 0x1b8,symbolName,1,0);\n    if (lookupResult != 0) {\n      *(long *)(lookupResult + 0x20) = nextIndex;\n      *(undefined4 *)(lookupResult + 0x28) = symbolType;\n      goto LAB_0010e7b3;\n    }\n    symbolType = bfd_get_error();\n    error = bfd_errmsg(symbolType);\n    errorString = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    non_fatal(errorString,error);\n  }\n  returnValue = 0;\nLAB_0010e7b3:\n  returnVal._8_8_ = result;\n  returnVal._0_8_ = returnValue;\n  return returnVal;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "bfd_get_error",
                "stab_pop_type",
                "non_fatal",
                "bfd_errmsg",
                "strlen",
                "sprintf",
                "dcgettext",
                "bfd_hash_lookup",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "reverse_and_write_symbol_0010e7c2",
                "param_1": "inputValue",
                "param_2": "string1",
                "param_3": "unused1",
                "param_4": "unused2",
                "__s": "poppedSymbol",
                "sVar1": "length1",
                "sVar2": "length2",
                "__s_00": "concatenatedString",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] reverseAndWriteSymbol_0010e7c2(undefined8 inputValue,char *string1,undefined8 unused1,undefined8 unused2)\n\n{\n  char *poppedSymbol;\n  size_t length1;\n  size_t length2;\n  char *concatenatedString;\n  undefined result [16];\n  \n  poppedSymbol = (char *)stab_pop_type();\n  length1 = strlen(string1);\n  length2 = strlen(poppedSymbol);\n  concatenatedString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(concatenatedString,\"%s:T%s\",string1,poppedSymbol);\n  free(poppedSymbol);\n  result._0_4_ = stab_write_symbol_lto_priv_0(inputValue,0x80,0,0,concatenatedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(concatenatedString);\n  }\n  result._8_8_ = unused2;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_and_write_symbol_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "report_and_exit_00119dd0",
                "param_1": "report_param_1",
                "param_2": "report_param_2",
                "param_3": "report_param_3",
                "param_4": "report_param_4",
                "param_5": "report_param_5",
                "param_6": "report_param_6",
                "param_7": "report_param_7",
                "param_8": "report_param_8",
                "param_9": "report_param_9",
                "param_10": "report_param_10",
                "param_11": "report_param_11",
                "param_12": "report_param_12",
                "param_13": "report_param_13",
                "param_14": "report_param_14",
                "in_AL": "input_flag",
                "local_d8": "buffer_length",
                "local_d4": "local_var_d4",
                "local_d0": "local_var_d0",
                "local_c8": "local_var_c8",
                "local_b8": "local_buffer_b8",
                "local_b0": "local_var_b0",
                "local_a8": "local_var_a8",
                "local_a0": "local_var_a0",
                "local_98": "local_var_98",
                "local_90": "local_var_90",
                "local_88": "local_var_88",
                "local_78": "local_var_78",
                "local_68": "local_var_68",
                "local_58": "local_var_58",
                "local_48": "local_var_48",
                "local_38": "local_var_38",
                "local_28": "local_var_28",
                "local_18": "local_var_18",
                "report": "reportFunction",
                "xexit": "exitFunction"
            },
            "code": "\nvoid reportAndExit_00119dd0(undefined4 report_param_1,undefined4 report_param_2,undefined4 report_param_3,undefined4 report_param_4,\n                 undefined4 report_param_5,undefined4 report_param_6,undefined4 report_param_7,undefined4 report_param_8,\n                 undefined8 report_param_9,undefined8 report_param_10,undefined8 report_param_11,undefined8 report_param_12,\n                 undefined8 report_param_13,undefined8 report_param_14)\n\n{\n  char input_flag;\n  undefined4 buffer_length;\n  undefined4 local_var_d4;\n  undefined *local_var_d0;\n  undefined *local_var_c8;\n  undefined local_buffer_b8 [8];\n  undefined8 local_var_b0;\n  undefined8 local_var_a8;\n  undefined8 local_var_a0;\n  undefined8 local_var_98;\n  undefined8 local_var_90;\n  undefined4 local_var_88;\n  undefined4 local_var_78;\n  undefined4 local_var_68;\n  undefined4 local_var_58;\n  undefined4 local_var_48;\n  undefined4 local_var_38;\n  undefined4 local_var_28;\n  undefined4 local_var_18;\n  \n  if (input_flag != '\\0') {\n    local_var_88 = report_param_1;\n    local_var_78 = report_param_2;\n    local_var_68 = report_param_3;\n    local_var_58 = report_param_4;\n    local_var_48 = report_param_5;\n    local_var_38 = report_param_6;\n    local_var_28 = report_param_7;\n    local_var_18 = report_param_8;\n  }\n  local_var_d0 = &stack0x00000008;\n  buffer_length = 8;\n  local_var_c8 = local_buffer_b8;\n  local_var_d4 = 0x30;\n  local_var_b0 = report_param_10;\n  local_var_a8 = report_param_11;\n  local_var_a0 = report_param_12;\n  local_var_98 = report_param_13;\n  local_var_90 = report_param_14;\n  reportFunction(report_param_9,&buffer_length);\n                    \n  exitFunction(1);\n}\n\n",
            "called": [
                "report",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "copy_file",
                "find_section_list",
                "FUN_00114dc7",
                "copy_section.cold",
                "main",
                "parse_flags.cold",
                "parse_vma.cold",
                "create_new_symbol.cold",
                "coff_get_slot.lto_priv.0",
                "init_section_add.cold",
                "section_add_load_file.cold",
                "FUN_0010554f",
                "add_redefine_and_check",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "report_and_exit_00119dd0"
        },
        "FUN_00104500": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "copy_file",
                "FUN_00107880",
                "copy_object",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104500"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_bfd_error_001083b7",
                "param_1": "error_code",
                "iVar1": "bfd_error",
                "unaff_RBP": "ptr_unaff_RBP",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined8 handle_bfd_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *ptr_unaff_RBP;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  bfd_nonfatal(*ptr_unaff_RBP);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "handle_bfd_error_001083b7"
        },
        "FUN_001280e8": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280e8",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_001280e8"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "extract_notes_00116852",
                "in_RCX": "notes_array",
                "unaff_RBX": "min_offset",
                "unaff_RBP": "sorted_notes",
                "puVar9": "dest_ptr",
                "puVar11": "dest_ptr_plus_4",
                "unaff_R15": "max_offset",
                "unaff_R14": "current_note",
                "in_R10": "note_index",
                "uVar4": "counter",
                "unaff_R13": "end_of_array",
                "sVar1": "current_note_size",
                "uVar8": "current_offset",
                "uVar5": "current_size",
                "__ptr": "temp_ptr",
                "bVar14": "temp_byte",
                "pcVar2": "function_ptr",
                "lVar7": "loop_counter",
                "cVar10": "byte_var"
            },
            "code": "\nulong extract_notes_00116852(void)\n\n{\n  size_t current_note_size;\n  code *function_ptr;\n  int iVar3;\n  uint counter;\n  undefined *temp_ptr;\n  size_t *notes_array;\n  ulong current_size;\n  ulong uVar6;\n  long loop_counter;\n  ulong current_offset;\n  size_t min_offset;\n  size_t *sorted_notes;\n  undefined *dest_ptr;\n  char byte_var;\n  undefined *dest_ptr_plus_4;\n  ulong note_index;\n  undefined *puVar12;\n  size_t in_R11;\n  size_t *end_of_array;\n  size_t *current_note;\n  size_t max_offset;\n  size_t *pcurrent_note_size3;\n  byte temp_byte;\n  size_t param_7;\n  size_t param_9;\n  ulong param_10;\n  size_t *param_11;\n  undefined *param_12;\n  long param_13;\n  size_t param_14;\n  \n  temp_byte = 0;\ncode_r0x00116852:\n  counter = (int)note_index + 1;\n  if (0x10 < (int)note_index) goto LAB_001167f5;\nLAB_00116863:\n  current_note = current_note + -9;\n  do {\n    if (end_of_array <= current_note) {\n      current_note_size = current_note[2];\n      if (current_note_size == 0) goto LAB_00116863;\n      current_offset = (ulong)counter;\n      if ((*current_note == *sorted_notes) &&\n         (iVar3 = memcmp((void *)current_note[3],(void *)sorted_notes[3],*sorted_notes), iVar3 == 0)) {\n        uVar6 = current_note[7];\n        current_size = current_note[8];\n        note_index = current_offset & 0xffffffff;\n        if (max_offset == uVar6) {\n          if (min_offset != current_size) goto LAB_001167a6;\n          sorted_notes[2] = 0;\n        }\n        else {\n          if (max_offset < uVar6) {\n            if (current_size < max_offset) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < current_size) || (max_offset <= (current_size + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (min_offset < max_offset) {\n              if ((0xfffffffffffffff0 < min_offset) ||\n                 (uVar6 <= (min_offset + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (min_offset == current_size) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (min_offset <= current_size) {\n              sorted_notes[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (current_size < max_offset) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (current_note_size == 0x101)) goto code_r0x00116852;\n          if (current_size <= min_offset) {\n            current_size = min_offset;\n          }\n          if (uVar6 < max_offset) {\n            max_offset = uVar6;\n          }\n          current_note[8] = current_size;\n          current_note[7] = max_offset;\n          sorted_notes[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_note = sorted_notes;\n        sorted_notes = current_note + 9;\n        if (notes_array <= sorted_notes) {\n          qsort(param_11,param_14,0x48,sort_gnu_build_notes);\n          temp_ptr = (undefined *)xmalloc(param_10 * 2);\n          param_7 = 0;\n          puVar12 = temp_ptr;\n          for (pcurrent_note_size3 = param_11; pcurrent_note_size3 < notes_array; pcurrent_note_size3 = pcurrent_note_size3 + 9) {\n            if (pcurrent_note_size3[2] != 0) {\n              dest_ptr_plus_4 = puVar12 + 4;\n              dest_ptr = puVar12 + 0xc;\n              function_ptr = *(code **)(*(long *)(param_13 + 8) + 0x50);\n              if ((pcurrent_note_size3[7] == param_9) && (pcurrent_note_size3[8] == param_7)) {\n                (*function_ptr)(*pcurrent_note_size3,puVar12);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(0,dest_ptr_plus_4);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(pcurrent_note_size3[2],puVar12 + 8);\n                uVar6 = pcurrent_note_size3[6];\n                current_offset = *pcurrent_note_size3;\n                puVar12 = (undefined *)pcurrent_note_size3[3];\n                dest_ptr_plus_4 = dest_ptr;\n                for (current_size = current_offset; current_size != 0; current_size = current_size - 1) {\n                  *dest_ptr_plus_4 = *puVar12;\n                  puVar12 = puVar12 + (ulong)temp_byte * -2 + 1;\n                  dest_ptr_plus_4 = dest_ptr_plus_4 + (ulong)temp_byte * -2 + 1;\n                }\n                if (current_offset < uVar6) {\n                  for (loop_counter = uVar6 - current_offset; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *dest_ptr_plus_4 = 0;\n                    dest_ptr_plus_4 = dest_ptr_plus_4 + (ulong)temp_byte * -2 + 1;\n                  }\n                }\n                puVar12 = dest_ptr + uVar6;\n              }\n              else {\n                (*function_ptr)();\n                if (*(int *)(*(long *)(param_13 + 8) + 8) == 5) {\n                  byte_var = (*(char *)(*(long *)(param_13 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  byte_var = '\\b';\n                }\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(byte_var,dest_ptr_plus_4);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(pcurrent_note_size3[2],puVar12 + 8);\n                current_offset = *pcurrent_note_size3;\n                puVar12 = (undefined *)pcurrent_note_size3[3];\n                dest_ptr_plus_4 = dest_ptr;\n                for (uVar6 = current_offset; uVar6 != 0; uVar6 = uVar6 - 1) {\n                  *dest_ptr_plus_4 = *puVar12;\n                  puVar12 = puVar12 + (ulong)temp_byte * -2 + 1;\n                  dest_ptr_plus_4 = dest_ptr_plus_4 + (ulong)temp_byte * -2 + 1;\n                }\n                uVar6 = pcurrent_note_size3[6];\n                if (current_offset < uVar6) {\n                  for (loop_counter = uVar6 - current_offset; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *dest_ptr_plus_4 = 0;\n                    dest_ptr_plus_4 = dest_ptr_plus_4 + (ulong)temp_byte * -2 + 1;\n                  }\n                }\n                loop_counter = *(long *)(param_13 + 8);\n                dest_ptr = dest_ptr + uVar6;\n                puVar12 = dest_ptr + 8;\n                if ((*(int *)(loop_counter + 8) == 5) &&\n                   (*(char *)(*(long *)(param_13 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loop_counter + 0x38))(pcurrent_note_size3[7],dest_ptr);\n                  (**(code **)(*(long *)(param_13 + 8) + 0x38))(pcurrent_note_size3[8],puVar12);\n                  puVar12 = dest_ptr + 0x10;\n                }\n                else {\n                  (**(code **)(loop_counter + 0x50))(pcurrent_note_size3[7],dest_ptr);\n                  (**(code **)(*(long *)(param_13 + 8) + 0x50))(pcurrent_note_size3[8],dest_ptr + 4);\n                }\n                param_9 = pcurrent_note_size3[7];\n                param_7 = pcurrent_note_size3[8];\n              }\n            }\n          }\n          uVar6 = (long)puVar12 - (long)temp_ptr;\n          current_offset = uVar6;\n          puVar12 = temp_ptr;\n          if (uVar6 < param_10) {\n            for (; param_10 = uVar6, current_offset != 0; current_offset = current_offset - 1) {\n              *param_12 = *puVar12;\n              puVar12 = puVar12 + (ulong)temp_byte * -2 + 1;\n              param_12 = param_12 + (ulong)temp_byte * -2 + 1;\n            }\n          }\n          free(temp_ptr);\n          free(param_11);\n          return param_10;\n        }\n        in_R11 = current_note[0xb];\n      } while (in_R11 == 0);\n      max_offset = current_note[0x10];\n      min_offset = current_note[0x11];\n      counter = 0;\n      if (max_offset != min_offset) break;\n      current_note[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116852",
                "sort_gnu_build_notes",
                "qsort",
                "xmalloc",
                "free",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "extract_notes_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_type_property_00113d3a",
                "param_1": "input_value",
                "lVar1": "type_property"
            },
            "code": "\nlong initialize_type_property_00113d3a(long input_value)\n\n{\n  long type_property;\n  \n  if (input_value != 0) {\n    type_property = *(long *)(input_value + 8);\n    if (type_property == 0) {\n      type_property = debug_make_type_constprop_0(0xc,0);\n      if (type_property == 0) {\n        type_property = 0;\n      }\n      else {\n        *(long *)(type_property + 0x10) = input_value;\n        *(long *)(input_value + 8) = type_property;\n      }\n    }\n    return type_property;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_type_property_00113d3a"
        },
        "FUN_00104630": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104630"
        },
        "FUN_00104510": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "main",
                "parse_stab",
                "display_info.isra.0.cold",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104510"
        },
        "FUN_00104870": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104870"
        },
        "FUN_00104750": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "section_add_load_file",
                "FUN_00107880",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104750"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "modify_stab_type_0010a0d3",
                "param_1": "function_ptr",
                "stab_modify_type": "modify_stab_type_in_binary"
            },
            "code": "\nvoid modify_stab_type_0010a0d3(long function_ptr)\n\n{\n  modify_stab_type_0010a0d3_in_binary(function_ptr,0x42,*(undefined4 *)(*(long *)(function_ptr + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "decompiled_function_00115530",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "lVar1": "temp_var1",
                "pcVar2": "temp_var2",
                "ppcVar3": "temp_var3",
                "cVar4": "temp_var4",
                "iVar5": "temp_var5",
                "uVar6": "temp_var6",
                "sVar7": "temp_var7",
                "sVar8": "temp_var8",
                "lVar9": "temp_var9",
                "pcVar10": "temp_var10",
                "pcVar11": "temp_var11",
                "pcVar12": "temp_var12",
                "uVar13": "temp_var13",
                "bVar14": "temp_var14",
                "local_50": "local_error_msg",
                "local_48": "local_section_name",
                "local_40": "local_sizes_array"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nvoid decompiled_function_00115530(long arg1,char **arg2,long arg3)\n\n{\n  long temp_var1;\n  char *temp_var2;\n  char **temp_var3;\n  char temp_var4;\n  int temp_var5;\n  uint temp_var6;\n  size_t temp_var7;\n  size_t temp_var8;\n  long temp_var9;\n  char *temp_var10;\n  char *temp_var11;\n  char *temp_var12;\n  uint temp_var13;\n  bool temp_var14;\n  long local_error_msg;\n  char *local_section_name;\n  long local_sizes_array [2];\n  \n  temp_var4 = is_strip_section_isra_0(arg2);\n  if (temp_var4 != '\\0') {\n    return;\n  }\n  temp_var10 = *arg2;\n  temp_var13 = *(uint *)((long)arg2 + 0x24);\n  local_section_name = temp_var10;\n  temp_var3 = section_rename_list;\n  if (*(int *)(*(long *)(arg1 + 8) + 8) != *(int *)(*(long *)(arg3 + 8) + 8)) {\n    temp_var13 = temp_var13 & *(uint *)(*(long *)(arg1 + 8) + 0x18) &\n             *(uint *)(*(long *)(arg3 + 8) + 0x18);\n  }\n  for (; temp_var3 != (char **)0x0; temp_var3 = (char **)temp_var3[3]) {\n    temp_var5 = strcmp(*temp_var3,temp_var10);\n    if (temp_var5 == 0) {\n      if (*(uint *)(temp_var3 + 2) != 0xffffffff) {\n        temp_var13 = *(uint *)(temp_var3 + 2);\n      }\n      if (temp_var10 != temp_var3[1]) {\n        local_section_name = temp_var3[1];\n        temp_var13 = check_new_section_flags(temp_var13,arg3);\n      }\n      break;\n    }\n  }\n  if (((prefix_alloc_sections_string != (char *)0x0) &&\n      (temp_var10 = prefix_alloc_sections_string, (*(byte *)((long)arg2 + 0x24) & 1) != 0)) ||\n     (temp_var10 = prefix_sections_string, prefix_sections_string != (char *)0x0)) {\n    temp_var7 = strlen(temp_var10);\n    temp_var8 = strlen(local_section_name);\n    temp_var12 = (char *)xmalloc(temp_var7 + 1 + temp_var8);\n    temp_var10 = strcpy(temp_var12,temp_var10);\n    local_section_name = strcat(temp_var10,local_section_name);\n  }\n  temp_var9 = find_section_list(*arg2,0,0x80);\n  temp_var14 = false;\n  if (temp_var9 == 0) {\n    if ((strip_symbols == 4) && ((temp_var13 & 0x2000001) != 0)) {\n      temp_var5 = *(int *)(*(long *)(arg1 + 8) + 8);\n      if (temp_var5 == 5) {\n        if (*(int *)(arg2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(arg3 + 8) + 8) == 5) {\n            temp_var14 = (temp_var13 & 0x2000000) == 0;\n            temp_var6 = ~((-(uint)((temp_var13 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)arg2 + 0x24) = *(uint *)((long)arg2 + 0x24) & temp_var6;\n          }\n          else {\n            temp_var6 = 0xfdfffefd;\n          }\n          temp_var13 = temp_var13 & temp_var6;\n        }\n      }\n      else if ((temp_var5 != 2) || (temp_var5 = strcmp(*arg2,\".buildid\"), temp_var5 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    temp_var13 = check_new_section_flags(temp_var13 & 0x104 | *(uint *)(temp_var9 + 0x28),arg3,*arg2);\n  }\n  temp_var4 = bfd_convert_section_setup(arg1,arg2,arg3,&local_section_name,local_sizes_array);\n  if (temp_var4 == '\\0') {\n    temp_var10 = (char *)0x0;\n    local_error_msg = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  temp_var10 = (char *)bfd_make_section_anyway_with_flags(arg3,local_section_name,temp_var13);\n  if (temp_var10 == (char *)0x0) {\n    local_error_msg = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (copy_byte < 0) {\n    if (extract_symbol != '\\0') {\n      local_sizes_array[0] = 0;\n      goto LAB_001158e7;\n    }\n    temp_var4 = bfd_set_section_size(temp_var10,local_sizes_array[0]);\n    if (temp_var4 == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  else {\n    local_sizes_array[0] = ((((long)interleave - 1U) + local_sizes_array[0]) / (ulong)(long)interleave) *\n                  (long)copy_width;\nLAB_001158e7:\n    temp_var4 = bfd_set_section_size(temp_var10);\n    if (temp_var4 == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  local_error_msg = 0;\n  temp_var12 = arg2[6];\n  temp_var9 = find_section_list(*arg2,0,0x18);\n  if (temp_var9 == 0) {\n    temp_var10[0x28] = temp_var10[0x28] | 1;\n    temp_var11 = *arg2;\n    temp_var12 = temp_var12 + change_section_address;\n    *(char **)(temp_var10 + 0x30) = temp_var12;\n    *(char **)(temp_var10 + 0x38) = temp_var12;\n    temp_var12 = arg2[7];\n    temp_var9 = find_section_list(temp_var11,0,0x60);\n    if (temp_var9 == 0) goto LAB_00115695;\nLAB_00115860:\n    temp_var11 = *(char **)(temp_var9 + 0x20);\n    if ((*(byte *)(temp_var9 + 0x14) & 0x40) != 0) {\n      temp_var11 = temp_var11 + (long)temp_var12;\n    }\n    *(char **)(temp_var10 + 0x38) = temp_var11;\n    temp_var9 = find_section_list(*arg2,0,0x200);\n    if (temp_var9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    temp_var13 = *(uint *)((long)arg2 + 0x7c);\n    if (temp_var13 < 0x3f) goto LAB_001156c4;\n    local_error_msg = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(temp_var10 + 0xb4) = *(undefined4 *)((long)arg2 + 0xb4);\n    temp_var10[0x28] = temp_var10[0x28] & 0xcfU | *(byte *)(arg2 + 5) & 0x30;\n    arg2[0xc] = temp_var10;\n    arg2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)arg2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    temp_var4 = (**(code **)(*(long *)(arg3 + 8) + 0x158))(arg1,arg2,arg3,temp_var10);\n    if (temp_var4 == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    temp_var11 = *(char **)(temp_var9 + 0x18);\n    if ((*(byte *)(temp_var9 + 0x14) & 8) == 0) {\n      temp_var11 = temp_var11 + (long)temp_var12;\n    }\n    temp_var10[0x28] = temp_var10[0x28] | 1;\n    temp_var2 = *arg2;\n    *(char **)(temp_var10 + 0x30) = temp_var11;\n    *(char **)(temp_var10 + 0x38) = temp_var11;\n    temp_var12 = arg2[7];\n    temp_var9 = find_section_list(temp_var2,0,0x60);\n    if (temp_var9 != 0) goto LAB_00115860;\nLAB_00115695:\n    temp_var11 = *arg2;\n    *(char **)(temp_var10 + 0x38) = temp_var12 + change_section_address;\n    temp_var9 = find_section_list(temp_var11,0,0x200);\n    if (temp_var9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    temp_var13 = *(uint *)(temp_var9 + 0x2c);\n    if (0x3e < temp_var13) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(temp_var10 + 0x7c) = temp_var13;\n    *(undefined4 *)(temp_var10 + 0xb4) = *(undefined4 *)((long)arg2 + 0xb4);\n    temp_var10[0x28] = temp_var10[0x28] & 0xcfU | *(byte *)(arg2 + 5) & 0x30;\n    arg2[0xc] = temp_var10;\n    arg2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)arg2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    temp_var12 = arg2[0x1a];\n    temp_var9 = group_signature_isra_0(temp_var12,arg2[0x1c]);\n    if ((temp_var9 == 0) ||\n       (temp_var1 = *(long *)(arg1 + 8), *(uint *)(temp_var9 + 0x18) = *(uint *)(temp_var9 + 0x18) | 0x20,\n       *(int *)(temp_var1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(temp_var12 + 0xb0) = temp_var9;\n    temp_var4 = (**(code **)(*(long *)(arg3 + 8) + 0x158))(arg1,arg2,arg3,temp_var10);\n    if (temp_var4 == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (temp_var14) {\n    *(undefined4 *)(*(long *)(temp_var10 + 0xd0) + 4) = 8;\n  }\n  if (local_error_msg == 0) {\n    return;\n  }\nLAB_001080d1:\n  status = 1;\n  bfd_nonfatal_message(0,arg3,temp_var10,local_error_msg);\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size",
                "find_section_list",
                "setup_section.cold",
                "strlen",
                "strcat",
                "dcgettext",
                "bfd_make_section_anyway_with_flags",
                "strcpy",
                "strcmp",
                "is_strip_section.isra.0",
                "xmalloc",
                "bfd_convert_section_setup",
                "check_new_section_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "decompiled_function_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "modify_stab_type_0010a0bd",
                "param_1": "inputParam",
                "stab_modify_type": "updateType"
            },
            "code": "\nvoid modifyStabType_0010a0bd(long inputParam)\n\n{\n  updateType(inputParam,0x6b,*(undefined4 *)(*(long *)(inputParam + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "demangle_and_check_type_00113e5e",
                "param_1": "old_value",
                "param_2": "string_ptr",
                "param_3": "address_offset",
                "cVar1": "result",
                "local_20": "str_ptr"
            },
            "code": "\nundefined8 demangle_and_check_type_00113e5e(undefined8 old_value,char **string_ptr,long address_offset)\n\n{\n  char result;\n  char *str_ptr [2];\n  \n  str_ptr[0] = *string_ptr;\n  *string_ptr = (char *)(address_offset + 2);\n  if ((((long)(char *)(address_offset + 2) - (long)str_ptr[0] < 5) ||\n      (result = startswith_lto_priv_0_lto_priv_0(str_ptr[0],\"type\"), result == '\\0')) ||\n     ((str_ptr[0][4] != '$' && (str_ptr[0][4] != '.')))) {\n    if (*str_ptr[0] != '_') {\n      return 1;\n    }\n    if (str_ptr[0][1] != '_') {\n      return 1;\n    }\n    if (str_ptr[0][2] != 'o') {\n      return 1;\n    }\n    if (str_ptr[0][3] != 'p') {\n      return 1;\n    }\n    str_ptr[0] = str_ptr[0] + 4;\n  }\n  else {\n    str_ptr[0] = str_ptr[0] + 5;\n  }\n  result = stab_demangle_type_lto_priv_0(old_value,str_ptr,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_and_check_type_00113e5e"
        },
        "FUN_00104520": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104520"
        },
        "FUN_00104400": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "create_new_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104400"
        },
        "FUN_00104760": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "main",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "fatal",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104760"
        },
        "FUN_00104640": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104640"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "combine_strings_0010abdd",
                "param_1": "ptr1",
                "param_2": "str1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "ptr2",
                "pcVar2": "string1",
                "bVar3": "byteVal",
                "pcVar4": "string2",
                "__s": "string3",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result",
                "cVar10": "char1",
                "cVar11": "char2",
                "local_52": "localByte"
            },
            "code": "\nundefined8\ncombineStrings_0010abdd(long ptr1,char *str1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr2;\n  char *string1;\n  byte byteVal;\n  char *string2;\n  char *string3;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte localByte;\n  \n  string3 = (char *)0x0;\n  localByte = *(byte *)(*(long *)(ptr1 + 0x60) + 0x1c);\n  string2 = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    byteVal = 1;\n    if (localByte == 0) {\n      byteVal = *(byte *)(*(long *)(ptr1 + 0x60) + 0x1c);\n    }\n    localByte = byteVal & 1;\n    string3 = (char *)stab_pop_type(ptr1);\n  }\n  ptr2 = *(long *)(ptr1 + 0x60);\n  if ((ptr2 == 0) || (string1 = *(char **)(ptr2 + 0x30), string1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(string1);\n    len2 = strlen(string2);\n    len3 = strlen(str1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(string3);\n    }\n    result = xrealloc(string1,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(ptr2 + 0x30) = result;\n    string1 = *(char **)(*(long *)(ptr1 + 0x60) + 0x30);\n    len1 = strlen(string1);\n    sprintf(string1 + len1,\"%s:%s;%c%c%c\",string2,str1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,len1);\n    free(string2);\n    if (flag4 != '\\0') {\n      string2 = *(char **)(*(long *)(ptr1 + 0x60) + 0x30);\n      len1 = strlen(string2);\n      sprintf(string2 + len1,\"%ld;%s;\",value,string3);\n      free(string3);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(ptr1 + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "abort",
                "sprintf",
                "free",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_class_method_variant.lto_priv.0"
            ],
            "imported": false,
            "current_name": "combine_strings_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_00115f30",
                "param_1": "flags",
                "param_2": "parameters",
                "param_3": "outputFormat",
                "uVar1": "value",
                "uVar2": "errorMessage"
            },
            "code": "\nuint removeShareFlag_00115f30(uint flags,undefined8 *parameters,undefined8 outputFormat)\n\n{\n  undefined8 value;\n  undefined8 errorMessage;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    value = *parameters;\n    flags = flags & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(errorMessage,value,outputFormat);\n  }\n  return flags;\n}\n\n",
            "called": [
                "check_new_section_flags.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "setup_section"
            ],
            "imported": false,
            "current_name": "remove_share_flag_00115f30"
        },
        "FUN_00104880": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_00104880"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputList",
                "puVar1": "ptrToAddress",
                "piVar2": "ptrToNextElement"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputList)\n\n{\n  undefined8 *ptrToAddress;\n  int *ptrToNextElement;\n  \n  do {\n    if (*inputList != 1) {\n      if (1 < *inputList - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputList + 4) + 8);\n    }\n    ptrToAddress = (undefined8 *)(inputList + 4);\n    ptrToNextElement = **(int ***)(undefined8 *)*ptrToAddress;\n  } while ((inputList != ptrToNextElement) && (inputList = ptrToNextElement, ptrToNextElement != (int *)0x0));\n  return ((undefined8 *)*ptrToAddress)[1];\n}\n\n",
            "called": [
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified",
                "debug_get_type_name.constprop.0",
                "debug_get_real_type.isra.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "invert_result_and_return_001082b3",
                "uVar1": "result",
                "is_dwo_section_constprop_0": "get_original_result"
            },
            "code": "\nuint invert_result_and_return_001082b3(void)\n\n{\n  uint result;\n  \n  result = get_original_result();\n  return result ^ 1;\n}\n\n",
            "called": [
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "invert_result_and_return_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "extract_archive_00114690",
                "param_1": "inputPath",
                "param_2": "outputPath",
                "param_3": "fileDescriptor",
                "param_4": "statStruct",
                "param_5": "targetFormat",
                "param_6": "tempFileName",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "var4",
                "iVar5": "var5",
                "ppcVar6": "stringArrayVar1",
                "pvVar7": "pointerVar1",
                "lVar8": "var8",
                "puVar9": "pointerVar2",
                "piVar10": "intPointerVar1",
                "uVar11": "var11",
                "uVar12": "var12",
                "lVar13": "fileSize",
                "puVar14": "bfdFilePtr",
                "pcVar15": "tempDirPath",
                "ppcVar16": "filePtrArrayVar",
                "pcVar17": "tempStringVar1",
                "pcVar18": "tempStringVar2",
                "pcVar19": "tempStringVar3",
                "pcVar20": "codeVar1",
                "lVar21": "var21",
                "uVar22": "var22",
                "pcVar23": "tempStringVar4",
                "psVar24": "statStructPtr",
                "bVar25": "boolVar1",
                "bVar26": "boolVar2",
                "local_1a0": "outputFilePtr",
                "local_198": "longArrayVar1",
                "local_158": "statStruct",
                "local_c8": "voidPtrArrayVar1",
                "uStack_b0": "uintVar1",
                "lStack_98": "fileSizeVar"
            },
            "code": "\nvoid extractArchive_00114690(undefined8 inputPath,undefined8 outputPath,int fileDescriptor,undefined8 statStruct,\n                 undefined8 targetFormat,long tempFileName,undefined8 param_7)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int var4;\n  int var5;\n  char **stringArrayVar1;\n  void *pointerVar1;\n  long var8;\n  undefined8 *pointerVar2;\n  int *intPointerVar1;\n  undefined8 var11;\n  undefined8 var12;\n  long fileSize;\n  undefined8 *bfdFilePtr;\n  char *tempDirPath;\n  char **filePtrArrayVar;\n  char *tempStringVar1;\n  char *tempStringVar2;\n  undefined8 *__ptr;\n  char **ptempStringVar3;\n  code *codeVar1;\n  long var21;\n  uint var22;\n  char *tempStringVar4;\n  stat *statStructPtr;\n  bool boolVar1;\n  byte boolVar2;\n  undefined8 *outputFilePtr;\n  long *longArrayVar1;\n  stat statStruct;\n  void *voidPtrArrayVar1 [3];\n  uint uintVar1;\n  long fileSizeVar;\n  \n  boolVar2 = 0;\n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    if (fileSize == 0) {\n      var12 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      non_fatal(var12,inputPath);\n    }\n    status = 1;\n    return;\n  }\n  bfdFilePtr = (undefined8 *)bfd_openr(inputPath,targetFormat);\n  if ((bfdFilePtr == (undefined8 *)0x0) || (var5 = bfd_stat(bfdFilePtr,statStruct), var5 != 0)) {\n    bfd_nonfatal_message(inputPath,0,0,0);\n    status = 1;\n    return;\n  }\n  switch(do_debug_sections) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x8000;\n  }\n  if (do_elf_stt_common == 1) {\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0xc0000;\n  }\n  else if (do_elf_stt_common == 2) {\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(bfdFilePtr,2);\n  if (charVar1 != '\\0') {\n    if (tempFileName == 0) {\n      charVar1 = '\\0';\n      tempFileName = *(long *)bfdFilePtr[1];\n    }\n    if (fileDescriptor < 0) {\n      outputFilePtr = (undefined8 *)bfd_openw(outputPath,tempFileName);\n    }\n    else {\n      outputFilePtr = (undefined8 *)bfd_fdopenw(outputPath,tempFileName,fileDescriptor);\n    }\n    if (outputFilePtr != (undefined8 *)0x0) {\n      if (gnu_debuglink_filename != 0) {\n        var12 = *bfdFilePtr;\n        var11 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        non_fatal(var11,var12);\n        gnu_debuglink_filename = 0;\n      }\n      set_long_section_mode(outputFilePtr,bfdFilePtr,long_section_names);\n      longArrayVar1 = outputFilePtr + 0x1f;\n      if ((*(byte *)((long)bfdFilePtr + 0x49) & 0x10) != 0) {\n        status = 1;\n        bfd_set_error(5);\n        var12 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfd_nonfatal_message(0,bfdFilePtr,0,var12);\n        return;\n      }\n      tempDirPath = (char *)make_tempdir(*outputFilePtr);\n      if (tempDirPath == (char *)0x0) {\n        intPointerVar1 = __errno_location();\n        tempDirPath = strerror(*intPointerVar1);\n        var12 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        fatal(var12,tempDirPath);\n      }\n      if (strip_symbols == 7) {\n        byteVar1 = *(byte *)((long)bfdFilePtr + 0x49);\n        var22 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)bfdFilePtr + 0x49);\n        var22 = byteVar1 >> 3 & 1;\n      }\n      boolVar1 = deterministic != 0;\n      *(byte *)((long)outputFilePtr + 0x49) =\n           byteVar1 & 0x10 | (byte)(var22 << 3) | *(byte *)((long)outputFilePtr + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)outputFilePtr + 0x44) = *(uint *)((long)outputFilePtr + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      filePtrArrayVar = (char **)bfd_openr_next_archived_file(bfdFilePtr,0);\n      charVar2 = bfd_set_format(outputFilePtr,*(byte *)(bfdFilePtr + 9) & 7);\n      if (charVar2 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(0,outputFilePtr,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((status == 0 && (filePtrArrayVar != (char **)0x0))) {\n        tempStringVar2 = *filePtrArrayVar;\n        tempStringVar1 = tempStringVar2;\n        if (*tempStringVar2 == '/') {\nLAB_0010527d:\n          var12 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          non_fatal(var12,tempStringVar2);\nLAB_00104e93:\n          status = 1;\n          goto LAB_00114b4b;\n        }\n        while (*tempStringVar1 != '\\0') {\n          tempStringVar4 = tempStringVar1;\n          if ((*tempStringVar1 == '.') && (tempStringVar4 = tempStringVar1 + 1, tempStringVar1[1] == '.')) {\n            tempStringVar4 = tempStringVar1 + 2;\n            if ((tempStringVar1[2] == '\\0') || (tempStringVar1[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*tempStringVar4 != '\\0' && (*tempStringVar4 != '/')); tempStringVar4 = tempStringVar4 + 1) {\n          }\n          tempStringVar1 = tempStringVar4;\n          if (*tempStringVar4 == '/') {\n            extract_archive_001052a2();\n            return;\n          }\n        }\n        tempStringVar2 = (char *)concat(tempDirPath,&DAT_0011b47d);\n        var5 = stat(tempStringVar2,&statStruct);\n        pointerVar2 = __ptr;\n        if (-1 < var5) {\n          fileSize = make_tempdir(tempStringVar2);\n          free(tempStringVar2);\n          if (fileSize == 0) {\n            intPointerVar1 = __errno_location();\n            tempStringVar2 = strerror(*intPointerVar1);\n            var12 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            non_fatal(var12,tempStringVar2);\n            goto LAB_00104e93;\n          }\n          pointerVar2 = (undefined8 *)xmalloc(0x18);\n          tempStringVar2 = *filePtrArrayVar;\n          *pointerVar2 = __ptr;\n          pointerVar2[2] = 0;\n          pointerVar2[1] = fileSize;\n          tempStringVar2 = (char *)concat(fileSize,&DAT_0011b47d,tempStringVar2);\n        }\n        var5 = 0;\n        if (preserve_dates != '\\0') {\n          statStructPtr = &statStruct;\n          for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n            *(undefined4 *)&statStructPtr->st_dev = 0;\n            statStructPtr = (stat *)((long)statStructPtr + (ulong)boolVar2 * -8 + 4);\n          }\n          ptempStringVar3 = (char **)filePtrArrayVar[0x1d];\n          if ((char **)filePtrArrayVar[0x1d] == (char **)0x0) {\n            ptempStringVar3 = filePtrArrayVar;\n          }\n          var5 = (**(code **)(ptempStringVar3[1] + 0x1e8))(filePtrArrayVar,&statStruct);\n          if (var5 != 0) {\n            tempStringVar1 = *filePtrArrayVar;\n            var12 = dcgettext(0,\"internal stat error on %s\",5);\n            non_fatal(var12,tempStringVar1);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = tempStringVar2;\n        *__ptr = pointerVar2;\n        __ptr[2] = 0;\n        charVar2 = bfd_check_format(filePtrArrayVar,1);\n        if (charVar2 == '\\0') {\n          var12 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          bfd_nonfatal_message(0,filePtrArrayVar,0,var12);\n          ptempStringVar3 = (char **)bfd_openw(tempStringVar2,tempFileName);\n          if (ptempStringVar3 == (char **)0x0) {\nLAB_00104e80:\n            bfd_nonfatal_message(tempStringVar2,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          stringArrayVar1 = (char **)filePtrArrayVar[0x1d];\n          if ((char **)filePtrArrayVar[0x1d] == (char **)0x0) {\n            stringArrayVar1 = filePtrArrayVar;\n          }\n          var4 = (**(code **)(stringArrayVar1[1] + 0x1e8))(filePtrArrayVar);\n          fileSize = fileSizeVar;\n          if (var4 == 0) {\n            if (fileSizeVar < 0) {\n              bfd_get_archive_filename(filePtrArrayVar);\n              var12 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              non_fatal(var12);\n            }\n            else {\n              var4 = bfd_seek(filePtrArrayVar,0,0);\n              if (var4 == 0) {\n                if (verbose != '\\0') {\n                  tempStringVar1 = *ptempStringVar3;\n                  var12 = bfd_get_archive_filename(filePtrArrayVar);\n                  tempStringVar4 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(tempStringVar4,var12,tempStringVar1);\n                }\n                pointerVar1 = (void *)xmalloc(0x2000);\n                for (; fileSize != 0; fileSize = fileSize - var21) {\n                  var21 = 0x2000;\n                  if (fileSize < 0x2001) {\n                    var21 = fileSize;\n                  }\n                  var8 = bfd_bread(pointerVar1,var21,filePtrArrayVar);\n                  stringArrayVar1 = filePtrArrayVar;\n                  if ((var21 != var8) ||\n                     (var8 = bfd_bwrite(pointerVar1,var21,ptempStringVar3), stringArrayVar1 = ptempStringVar3,\n                     var21 != var8)) {\n                    bfd_nonfatal_message(0,stringArrayVar1,0,0);\n                    free(pointerVar1);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ptempStringVar3,uintVar1 | 0x100);\n                free(pointerVar1);\n                charVar2 = bfd_close_all_done(ptempStringVar3);\n                if (charVar2 == '\\0') {\n                  bfd_nonfatal_message(tempStringVar2,0,0,0);\n                  status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              var12 = bfd_get_archive_filename(filePtrArrayVar);\n              bfd_nonfatal(var12);\n            }\n          }\n          else {\n            bfd_nonfatal_message(0,filePtrArrayVar,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_close_all_done(ptempStringVar3);\n          if (charVar2 == '\\0') {\n            bfd_nonfatal_message(tempStringVar2,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(tempStringVar2);\n          status = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            ptempStringVar3 = (char **)bfd_openw(tempStringVar2,*(undefined8 *)filePtrArrayVar[1]);\n          }\n          else {\n            ptempStringVar3 = (char **)bfd_openw(tempStringVar2,tempFileName);\n          }\n          if (ptempStringVar3 == (char **)0x0) goto LAB_00104e80;\n          charVar2 = copy_object(filePtrArrayVar,ptempStringVar3,param_7);\n          if (charVar2 == '\\0') {\n            var4 = bfd_get_arch(filePtrArrayVar);\n            if (var4 == 0) goto LAB_00104d75;\n            charVar2 = bfd_close_all_done(ptempStringVar3);\n            if (charVar2 == '\\0') {\n              bfd_nonfatal_message(tempStringVar2,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(ptempStringVar3);\n          if (charVar2 == '\\0') {\n            bfd_nonfatal_message(tempStringVar2,0,0,0);\n            status = 1;\n          }\nLAB_00114a86:\n          if ((preserve_dates != '\\0') && (var5 == 0)) {\n            set_times(tempStringVar2,&statStruct);\n          }\n          fileSize = bfd_openr(tempStringVar2,tempFileName);\n          __ptr[2] = fileSize;\n          *longArrayVar1 = fileSize;\n          longArrayVar1 = (long *)(fileSize + 0xf0);\n          ptempStringVar3 = (char **)bfd_openr_next_archived_file(bfdFilePtr);\n          bfd_close(filePtrArrayVar);\n          filePtrArrayVar = ptempStringVar3;\n        }\n      }\n      *longArrayVar1 = 0;\n      pointerVar1 = (void *)xstrdup(*outputFilePtr);\n      if (status == 0) {\n        codeVar1 = bfd_close;\n      }\n      else {\n        codeVar1 = bfd_close_all_done;\n      }\n      charVar1 = (*codeVar1)(outputFilePtr);\n      if (charVar1 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(pointerVar1,0,0,0);\n      }\n      free(pointerVar1);\n      pointerVar1 = (void *)xstrdup(*bfdFilePtr);\n      charVar1 = bfd_close(bfdFilePtr);\n      if (charVar1 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(pointerVar1,0,0,0);\n      }\n      free(pointerVar1);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        bfdFilePtr = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = bfdFilePtr;\n      }\n      rmdir(tempDirPath);\n      free(tempDirPath);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    bfd_nonfatal_message(outputPath,0,0,0);\n    status = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(bfdFilePtr,1,voidPtrArrayVar1);\n  if (charVar1 == '\\0') {\n    var5 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(bfdFilePtr,3,&statStruct);\n    if (charVar1 == '\\0') {\n      var4 = bfd_get_error();\n      if (var5 != var4) {\n        bfd_set_error(var5);\n      }\n      bfd_nonfatal_message(inputPath,0,0,0);\n      if (var5 == 0xd) {\n        list_matching_formats(voidPtrArrayVar1[0]);\n      }\n      if (var4 != 0xd) {\n        status = 1;\n        return;\n      }\n      list_matching_formats(statStruct.st_dev);\n      status = 1;\n      return;\n    }\n    if (var5 == 0xd) {\n      free(voidPtrArrayVar1[0]);\n    }\n  }\n  if (tempFileName == 0) {\n    tempFileName = *(long *)bfdFilePtr[1];\n  }\n  if (fileDescriptor < 0) {\n    fileSize = bfd_openw(outputPath,tempFileName);\n  }\n  else {\n    fileSize = bfd_fdopenw(outputPath,tempFileName,fileDescriptor);\n  }\n  if (fileSize == 0) goto LAB_00105231;\n  set_long_section_mode(fileSize,bfdFilePtr,long_section_names);\n  charVar1 = copy_object(bfdFilePtr,fileSize,param_7);\n  if (charVar1 == '\\0') {\n    status = 1;\n  }\n  else if (status == 0) {\n    charVar1 = bfd_close(fileSize);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_close_all_done(fileSize);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    status = 1;\n    bfd_nonfatal_message(outputPath,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(bfdFilePtr);\n  if (charVar1 == '\\0') {\n    status = 1;\n    bfd_nonfatal_message(inputPath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done",
                "set_long_section_mode",
                "get_file_size",
                "bfd_openw",
                "bfd_set_error",
                "non_fatal",
                "bfd_close",
                "copy_object",
                "bfd_set_format",
                "list_matching_formats",
                "bfd_openr",
                "free",
                "strerror",
                "make_tempdir",
                "dcgettext",
                "fatal",
                "copy_file.cold",
                "bfd_fdopenw",
                "__errno_location",
                "bfd_nonfatal_message",
                "bfd_check_format_matches",
                "bfd_get_error",
                "close",
                "bfd_stat",
                "bfd_check_format",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_archive_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_stab_int_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "pData",
                "uVar2": "result",
                "sVar3": "stringLength",
                "lVar4": "tempValue1",
                "lVar5": "tempValue2",
                "local_8c": "formattedString",
                "auStack_8a": "tempArray"
            },
            "code": "\nundefined8 processStabIntType_0010b800(long baseAddress,int size,char flag)\n\n{\n  long *pData;\n  undefined8 result;\n  size_t stringLength;\n  long tempValue1;\n  long tempValue2;\n  undefined2 formattedString;\n  undefined4 tempArray [24];\n  \n  if (size - 1U < 8) {\n    tempValue1 = baseAddress + 0xb8;\n    if (flag != '\\0') {\n      tempValue1 = baseAddress + 0x78;\n    }\n    pData = (long *)(tempValue1 + (ulong)(size - 1U) * 8);\n    tempValue1 = *pData;\n    if (tempValue1 != 0) {\n      result = stab_push_defined_type(baseAddress,tempValue1,size);\n      return result;\n    }\n    tempValue1 = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = tempValue1 + 1;\n    *pData = tempValue1;\n    sprintf((char *)&formattedString,\"%ld=r%ld;\",tempValue1,tempValue1);\n    if (flag == '\\0') {\n      tempValue2 = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&formattedString);\n      sprintf((char *)((long)&formattedString + stringLength),\"%ld;%ld;\",-tempValue2,tempValue2 + -1);\n    }\n    else {\n      stringLength = strlen((char *)&formattedString);\n      *(undefined2 *)((long)&formattedString + stringLength) = 0x3b30;\n      *(undefined *)((long)&formattedString + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formattedString + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formattedString + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = stab_push_string(baseAddress,&formattedString,tempValue1,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    non_fatal(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "non_fatal",
                "strlen",
                "stab_push_string",
                "sprintf",
                "dcgettext",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "stab_float_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_stab_int_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "function_pointer",
                "param_2": "character",
                "param_3": "data_type",
                "param_4": "dynamic_array",
                "param_5": "dynamic_array_length",
                "uVar1": "array_length",
                "uVar2": "temporary_value",
                "cVar3": "status",
                "pcVar4": "string",
                "sVar5": "string_length",
                "__s": "formatted_string",
                "lVar6": "counter",
                "__ptr": "allocated_memory",
                "uVar7": "return_value",
                "uVar8": "flag",
                "lVar9": "counter2",
                "uVar10": "target_length",
                "puVar11": "pointer",
                "bVar12": "flag2"
            },
            "code": "\nundefined8 processData_00109ed3(long function_pointer,uint character,undefined4 data_type,long *dynamic_array,ulong *dynamic_array_length)\n\n{\n  ulong array_length;\n  ulong temporary_value;\n  char status;\n  char *string;\n  size_t string_length;\n  char *formatted_string;\n  long counter;\n  void *allocated_memory;\n  undefined8 return_value;\n  undefined flag;\n  long counter2;\n  ulong target_length;\n  undefined *pointer;\n  byte flag2;\n  \n  flag2 = 0;\n  counter = *(long *)(function_pointer + 0x60);\n  if (counter != 0) {\n    array_length = *(ulong *)(counter + 0x10);\n    if (((long)array_length < 1) || (dynamic_array == (long *)0x0)) {\n      flag = *(undefined *)(counter + 0x1c);\n      string = (char *)stab_pop_type(function_pointer);\n      string_length = strlen(string);\n      formatted_string = (char *)xmalloc(string_length + 2);\n      sprintf(formatted_string,\"%c%s\",(ulong)character,string);\n      free(string);\n      counter = 0;\n    }\n    else {\n      target_length = *dynamic_array_length;\n      if (target_length <= array_length) {\n        if (target_length == 0) {\n          target_length = 10;\n        }\n        for (; target_length <= array_length; target_length = target_length * 2) {\n        }\n        counter = xrealloc(*dynamic_array,target_length * 8);\n        temporary_value = *dynamic_array_length;\n        *dynamic_array = counter;\n        pointer = (undefined *)(counter + temporary_value * 8);\n        for (counter2 = (target_length - temporary_value) * 8; counter2 != 0; counter2 = counter2 + -1) {\n          *pointer = 0;\n          pointer = pointer + (ulong)flag2 * -2 + 1;\n        }\n        *dynamic_array_length = target_length;\n      }\n      counter = *(long *)(*dynamic_array + array_length * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(function_pointer + 0x60) + 0x1c) == '\\0')) {\n        allocated_memory = (void *)stab_pop_type(function_pointer);\n        free(allocated_memory);\n        return_value = stab_push_defined_type(function_pointer,counter,data_type);\n        return return_value;\n      }\n      counter = *(long *)(function_pointer + 0x68);\n      *(long *)(function_pointer + 0x68) = counter + 1;\n      string = (char *)stab_pop_type(function_pointer);\n      string_length = strlen(string);\n      formatted_string = (char *)xmalloc(string_length + 0x14);\n      sprintf(formatted_string,\"%ld=%c%s\",counter,(ulong)character,string);\n      free(string);\n      flag = 1;\n      *(long *)(*dynamic_array + array_length * 8) = counter;\n    }\n    status = stab_push_string(function_pointer,formatted_string,counter,flag,data_type);\n    if (status != '\\0') {\n      free(formatted_string);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "stab_const_type.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_reference_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "lVar4": "count",
                "puVar5": "ptr4",
                "pcVar6": "file",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long count;\n  undefined4 *ptr4;\n  char *file;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  file = \"\";\n  if (filename != (char *)0x0) {\n    file = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (count = 6; count != 0; count = count + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)flag * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = file;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (count = 6; count != 0; count = count + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)flag * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debugInfo[1] = (long)ptr3;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  result._8_8_ = param4;\n  result._0_8_ = 1;\n  return result;\n}\n\n",
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00104410": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104410"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((do_debug_sections != 1) && ((do_debug_sections & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (do_elf_stt_common != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (extract_symbol == '\\0') {\n    if (set_start_set == '\\0') {\n      lVar35 = change_start + param_1[0x17];\n    }\n    else {\n      lVar35 = change_start + set_start;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~bfd_flags_to_clear & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)param_1 + 0x44));\n  if (strip_symbols == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_input_file_format_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = preserve_dates == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar35 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar35 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,osympp);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = add_sections,\n     cVar11 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30)\n  {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = gnu_debuglink_filename;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = isympp;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = improve_code_0010554f();\n    return uVar26;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &names_0;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = isympp + uStack_1f8;\n        plVar15 = isympp;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = add_sym_list;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(redefine_specific_htab);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = section_rename_list, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0'))\n            {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = prefix_symbols_string;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = prefix_symbols_string;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar30 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = convert_debugging == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,isympp);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(strip_specific_htab);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(keep_specific_htab), lVar35 != 0 ||\n              (lVar35 = htab_elements(localize_specific_htab), lVar35 != 0)) ||\n             (lVar35 = htab_elements(globalize_specific_htab), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 != 0 ||\n             (lVar35 = htab_elements(weaken_specific_htab), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(redefine_specific_htab), lVar35 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,osympp,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = add_sections; puVar38 = update_sections, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190),\n       lVar35 = gnu_debuglink_filename, cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = dump_sections;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "non_fatal",
                "dcgettext",
                "bfd_set_format",
                "bfd_get_archive_filename",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00104650": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_00104650"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "param_1": "inputValue",
                "param_2": "binaryData",
                "uVar1": "size",
                "lVar2": "result"
            },
            "code": "\nlong findMatchingValue_00115d00(long inputValue,long binaryData)\n\n{\n  uint size;\n  long result;\n  \n  result = isympp;\n  if (isympp != 0) {\n    if (*(int *)(*(long *)(binaryData + 8) + 8) == 5) {\n      if (*(int *)(inputValue + 0x28) == *(int *)(*(long *)(binaryData + 0x110) + 0xd40)) {\n        size = *(uint *)(inputValue + 0x2c);\n        if (size == 0) {\n          result = 0;\n        }\n        else if ((ulong)size <\n                 *(ulong *)(*(long *)(binaryData + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryData + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(isympp + (ulong)(size - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "group_signature.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "find_matching_value_00115d00"
        },
        "FUN_00104530": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104530"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_debug_structure_00113c43",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "inputParam5",
                "param_6": "inputParam6",
                "lVar1": "debugStructurePointer",
                "plVar2": "allocationPointer",
                "auVar3": "returnStruct",
                "xmalloc": "allocateMemory"
            },
            "code": "\nundefined  [16]\ninitializeDebugStructure_00113c43(long inputParam1,long inputParam2,long inputParam3,long inputParam4,undefined inputParam5,\n            undefined8 inputParam6)\n\n{\n  long debugStructurePointer;\n  long *allocationPointer;\n  undefined returnStruct [16];\n  \n  if ((inputParam1 != 0) && (inputParam2 != 0)) {\n    debugStructurePointer = debug_make_type_constprop_0(0x10,0);\n    if (debugStructurePointer != 0) {\n      allocationPointer = (long *)allocateMemory(0x28);\n      *(undefined4 *)((long)allocationPointer + 0x21) = 0;\n      *allocationPointer = inputParam1;\n      *(undefined4 *)((long)allocationPointer + 0x24) = 0;\n      allocationPointer[1] = inputParam2;\n      allocationPointer[2] = inputParam3;\n      allocationPointer[3] = inputParam4;\n      *(undefined *)(allocationPointer + 4) = inputParam5;\n      *(long **)(debugStructurePointer + 0x10) = allocationPointer;\n      goto LAB_00113caa;\n    }\n  }\n  debugStructurePointer = 0;\nLAB_00113caa:\n  returnStruct._8_8_ = inputParam6;\n  returnStruct._0_8_ = debugStructurePointer;\n  return returnStruct;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_structure_00113c43"
        },
        "FUN_00104890": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "get_file_size.cold",
                "FUN_00107880",
                "smart_rename.cold",
                "main",
                "section_add_load_file.cold",
                "set_times.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104890"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "record_debug_info_00112a33",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "byteValue",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "lVar2": "type",
                "plVar3": "slot"
            },
            "code": "\nbool recordDebugInfo_00112a33(undefined8 param1,long param2,undefined8 param3,byte byteValue,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long type;\n  long *slot;\n  \n  if (byteValue < 0x12) {\n    if (byteValue != 0) {\n      switch(byteValue) {\n      case 1:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,4,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 4:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,5,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 9:\n        result = debug_record_parameter\n                          (param5,*(undefined8 *)(param2 + 8),param6,1,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        type = debug_tag_type(param5,*(undefined8 *)(param2 + 8));\n        if (type == 0) {\n          return false;\n        }\n        slot = (long *)coff_get_slot_lto_priv_0(param1,param3);\n        *slot = type;\n        break;\n      case 0xd:\n        type = debug_name_type(param5,*(undefined8 *)(param2 + 8));\n        return type != 0;\n      case 0x11:\n        result = debug_record_parameter\n                          (param5,*(undefined8 *)(param2 + 8),param6,2,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      }\n    }\n  }\n  else if (byteValue == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = debug_record_variable\n                      (param5,*(undefined8 *)(param2 + 8),param6,1,\n                       *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "debug_record_parameter",
                "coff_get_slot.lto_priv.0",
                "debug_record_variable",
                "debug_name_type",
                "debug_tag_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_info_00112a33"
        },
        "FUN_00104770": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104770"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_debug_type_0010c2d2",
                "uVar1": "typeIndex",
                "pcVar2": "typeName",
                "uVar3": "type",
                "lVar4": "typeAddress",
                "plVar5": "typePointer"
            },
            "code": "\n\n\nlong getDebugType_0010c2d2(undefined8 param_1,long param_2,int *param_3)\n\n{\n  uint typeIndex;\n  char *typeName;\n  undefined8 type;\n  long typeAddress;\n  long *typePointer;\n  uint uVar6;\n  \n  if ((*param_3 == 0) && (typeIndex = param_3[1], (int)typeIndex < 0)) {\n    uVar6 = ~typeIndex;\n    if (uVar6 < 0x22) {\n      typeAddress = *(long *)(param_2 + 0x90 + (ulong)uVar6 * 8);\n      if (typeAddress == 0) {\n        switch(uVar6) {\n        case 1:\n          type = debug_make_int_type_isra_0(1,0);\n          typeName = \"char\";\n          break;\n        case 2:\n          type = debug_make_int_type_isra_0(2,0);\n          typeName = \"short\";\n          break;\n        case 3:\n          type = debug_make_int_type_isra_0(4,0);\n          typeName = \"long\";\n          break;\n        case 4:\n          type = debug_make_int_type_isra_0(1,1);\n          typeName = \"unsigned char\";\n          break;\n        case 5:\n          type = debug_make_int_type_isra_0(1,0);\n          typeName = \"signed char\";\n          break;\n        case 6:\n          type = debug_make_int_type_isra_0(2,1);\n          typeName = \"unsigned short\";\n          break;\n        case 7:\n          type = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned int\";\n          break;\n        case 8:\n          type = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned\";\n          break;\n        case 9:\n          type = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned long\";\n          break;\n        case 10:\n          type = debug_make_void_type_isra_0();\n          typeName = \"void\";\n          break;\n        case 0xb:\n          type = debug_make_float_type_isra_0(4);\n          typeName = \"float\";\n          break;\n        case 0xc:\n          type = debug_make_float_type_isra_0(8);\n          typeName = \"double\";\n          break;\n        case 0xd:\n          type = debug_make_float_type_isra_0(8);\n          typeName = \"long double\";\n          break;\n        case 0xe:\n          type = debug_make_int_type_isra_0(4,0);\n          typeName = \"integer\";\n          break;\n        case 0xf:\n          type = debug_make_type_constprop_0(6,4);\n          typeName = \"boolean\";\n          break;\n        case 0x10:\n          type = debug_make_float_type_isra_0(4);\n          typeName = \"short real\";\n          break;\n        case 0x11:\n          type = debug_make_float_type_isra_0(8);\n          typeName = \"real\";\n          break;\n        case 0x12:\n          typeName = \"stringptr\";\n          type = 0;\n          break;\n        case 0x13:\n          type = debug_make_int_type_isra_0(1,1);\n          typeName = \"character\";\n          break;\n        case 0x14:\n          type = debug_make_type_constprop_0(6,1);\n          typeName = \"logical*1\";\n          break;\n        case 0x15:\n          type = debug_make_type_constprop_0(6,2);\n          typeName = \"logical*2\";\n          break;\n        case 0x16:\n          type = debug_make_type_constprop_0(6,4);\n          typeName = \"logical*4\";\n          break;\n        case 0x17:\n          type = debug_make_type_constprop_0(6,4);\n          typeName = \"logical\";\n          break;\n        case 0x18:\n          type = debug_make_type_constprop_0(5,8);\n          typeName = \"complex\";\n          break;\n        case 0x19:\n          type = debug_make_type_constprop_0(5,0x10);\n          typeName = \"double complex\";\n          break;\n        case 0x1a:\n          type = debug_make_int_type_isra_0(1,0);\n          typeName = \"integer*1\";\n          break;\n        case 0x1b:\n          type = debug_make_int_type_isra_0(2,0);\n          typeName = \"integer*2\";\n          break;\n        case 0x1c:\n          type = debug_make_int_type_isra_0(4,0);\n          typeName = \"integer*4\";\n          break;\n        case 0x1d:\n          type = debug_make_int_type_isra_0(2,0);\n          typeName = \"wchar\";\n          break;\n        case 0x1e:\n          type = debug_make_int_type_isra_0(8,0);\n          typeName = \"long long\";\n          break;\n        case 0x1f:\n          type = debug_make_int_type_isra_0(8,1);\n          typeName = \"unsigned long long\";\n          break;\n        case 0x20:\n          type = debug_make_type_constprop_0(6,8);\n          typeName = \"logical*8\";\n          break;\n        case 0x21:\n          type = debug_make_int_type_isra_0(8,0);\n          typeName = \"integer*8\";\n          break;\n        default:\n          type = debug_make_int_type_isra_0(4,0);\n          typeName = \"int\";\n        }\n        typeAddress = debug_name_type(param_1,typeName,type);\n        *(long *)(param_2 + 0x90 + (ulong)uVar6 * 8) = typeAddress;\n        return typeAddress;\n      }\n      return typeAddress;\n    }\n    typeName = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeName,(ulong)typeIndex);\n  }\n  else {\n    typePointer = (long *)stab_find_slot(param_2);\n    if (typePointer != (long *)0x0) {\n      if (*typePointer == 0) {\n        typeAddress = debug_make_indirect_type_isra_0(typePointer,0);\n        return typeAddress;\n      }\n      return *typePointer;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "debug_make_void_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_indirect_type.isra.0",
                "dcgettext",
                "debug_name_type",
                "stab_find_slot",
                "debug_make_float_type.isra.0",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_debug_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_coff_symbols_0010e07c",
                "param_1": "paramAddr",
                "param_2": "symbolTable",
                "param_3": "sectionSymbols",
                "param_4": "symbolSize",
                "param_5": "coffHeader",
                "param_6": "fileSize",
                "lVar1": "symbolTableEntry",
                "lVar2": "symbolTableOffset",
                "lVar3": "numSymbols",
                "cVar4": "getSymentResult",
                "uVar5": "getErrorResult",
                "uVar6": "errmsgResult",
                "uVar7": "dcgettextResult",
                "puVar8": "newSymbolType",
                "pcVar9": "errorMsg",
                "puVar10": "auxentData",
                "uVar11": "parsingResult",
                "lVar12": "symbolCount",
                "iVar13": "symbolAddress",
                "iVar14": "initialBufferLength",
                "local_a8": "newTypeAddr",
                "uStack_a4": "newTypeAddrHigh",
                "uStack_a0": "parsingTypeAddr",
                "uStack_9c": "parsingTypeAddrHigh",
                "local_88": "symentBuffer",
                "local_6a": "symbolType",
                "local_68": "auxentType",
                "local_67": "auxentLength",
                "local_60": "auxentBuffer",
                "local_56": "recordType"
            },
            "code": "\nundefined8\nparseCOFFSymbols_0010e07c(undefined8 paramAddr,long *symbolTable,undefined8 sectionSymbols,int symbolSize,long coffHeader,\n            undefined8 fileSize)\n\n{\n  long symbolTableEntry;\n  long symbolTableOffset;\n  long numSymbols;\n  char getSymentResult;\n  undefined4 getErrorResult;\n  void *__ptr;\n  undefined8 errmsgResult;\n  undefined8 dcgettextResult;\n  undefined4 *newSymbolType;\n  char *errorMsg;\n  undefined *auxentData;\n  uint parsingResult;\n  long symbolCount;\n  int symbolAddress;\n  int initialBufferLength;\n  undefined4 newTypeAddr;\n  undefined4 newTypeAddrHigh;\n  undefined4 parsingTypeAddr;\n  undefined4 parsingTypeAddrHigh;\n  undefined symentBuffer [30];\n  undefined2 symbolType;\n  byte auxentType;\n  byte auxentLength;\n  undefined auxentBuffer [10];\n  ushort recordType;\n  \n  initialBufferLength = 10;\n  symbolCount = 0;\n  symbolTableEntry = *(long *)(coffHeader + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((symbolTable[3] < symbolTableEntry && (symbolTable[2] < symbolTable[1]))) {\n    symbolTableOffset = *(long *)(*symbolTable + symbolTable[2] * 8);\n    getSymentResult = bfd_coff_get_syment(paramAddr,symbolTableOffset,symentBuffer);\n    if (getSymentResult == '\\0') {\n      getErrorResult = bfd_get_error();\n      errmsgResult = bfd_errmsg(getErrorResult);\n      errorMsg = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      dcgettextResult = dcgettext(0,errorMsg,5);\n      non_fatal(dcgettextResult,errmsgResult);\n      free(__ptr);\n      return 0;\n    }\n    numSymbols = symbolTable[3];\n    auxentData = (undefined *)0x0;\n    symbolTable[2] = symbolTable[2] + 1;\n    symbolTable[3] = numSymbols + 1 + (ulong)auxentLength;\n    if (auxentLength != 0) {\n      auxentData = auxentBuffer;\n      getSymentResult = bfd_coff_get_auxent(paramAddr,symbolTableOffset,0,auxentData);\n      if (getSymentResult == '\\0') {\n        getErrorResult = bfd_get_error();\n        errmsgResult = bfd_errmsg(getErrorResult);\n        errorMsg = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (auxentType == 0x12) {\n      parsingResult = (uint)recordType;\n      symbolAddress = (int)*(undefined8 *)(symbolTableOffset + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbolTableOffset + 0x20) + 0x30);\n    }\n    else {\n      if (auxentType < 0x13) {\n        if ((auxentType == 8) || (auxentType == 0xb)) {\n          parsingResult = 0;\n          symbolAddress = ((int)*(undefined8 *)(symbolTableOffset + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbolTableOffset + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (auxentType == 0x66) break;\n      parsingResult = 0;\n      symbolAddress = 0;\n    }\nLAB_0010e214:\n    dcgettextResult = parse_coff_type_lto_priv_0(paramAddr,symbolTable,sectionSymbols,numSymbols,symbolType,auxentData,1);\n    errmsgResult = *(undefined8 *)(symbolTableOffset + 8);\n    newSymbolType = (undefined4 *)xmalloc(0x20);\n    newTypeAddr = (undefined4)errmsgResult;\n    newTypeAddrHigh = (undefined4)((ulong)errmsgResult >> 0x20);\n    parsingTypeAddr = (undefined4)dcgettextResult;\n    parsingTypeAddrHigh = (undefined4)((ulong)dcgettextResult >> 0x20);\n    *(undefined8 *)(newSymbolType + 5) = 0;\n    newSymbolType[6] = symbolAddress;\n    newSymbolType[7] = parsingResult;\n    newSymbolType[4] = 0;\n    *newSymbolType = newTypeAddr;\n    newSymbolType[1] = newTypeAddrHigh;\n    newSymbolType[2] = parsingTypeAddr;\n    newSymbolType[3] = parsingTypeAddrHigh;\n    if (initialBufferLength <= (int)symbolCount + 1) {\n      initialBufferLength = initialBufferLength + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)initialBufferLength << 3,newSymbolType,0,fileSize);\n    }\n    *(undefined4 **)((long)__ptr + symbolCount * 8) = newSymbolType;\n    symbolCount = symbolCount + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)symbolCount * 8) = 0;\n  errmsgResult = debug_make_struct_type_isra_0(symbolSize == 8,*(undefined2 *)(coffHeader + 10),__ptr);\n  return errmsgResult;\n}\n\n",
            "called": [
                "debug_make_struct_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "non_fatal",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "dcgettext",
                "free",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "parse_coff_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_coff_symbols_0010e07c"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "zero_return_001082c3"
            },
            "code": "\nundefined8 zero_return_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "group_signature.isra.0"
            ],
            "imported": false,
            "current_name": "zero_return_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "extract_file_contents_00114460",
                "param_1": "filePath",
                "param_2": "hashTable",
                "param_3": "extractedData",
                "iVar1": "lineNumber",
                "piVar2": "errorCodePointer",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMessage",
                "__n": "fileSize",
                "__ptr": "fileContents",
                "__stream": "fileHandle",
                "sVar5": "readSize",
                "ppbVar6": "hashTableEntry",
                "pbVar7": "lineIterator",
                "bVar8": "currentByte",
                "pbVar9": "nextByte",
                "pbVar10": "currentChar",
                "pbVar11": "nextChar",
                "pbVar12": "lineStart"
            },
            "code": "\nvoid extractFileContents_00114460(char *filePath,undefined8 hashTable,byte **extractedData)\n\n{\n  int lineNumber;\n  int *errorCodePointer;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  size_t fileSize;\n  byte *fileContents;\n  FILE *fileHandle;\n  size_t readSize;\n  byte **hashTableEntry;\n  byte *lineIterator;\n  byte currentByte;\n  byte *nextByte;\n  byte *currentChar;\n  byte *nextChar;\n  byte *lineStart;\n  \n  fileSize = get_file_size();\n  if (fileSize == 0) {\n    status = 1;\n  }\n  else {\n    fileContents = (byte *)xmalloc(fileSize + 2);\n    fileHandle = fopen(filePath,\"r\");\n    if (fileHandle == (FILE *)0x0) {\n      errorCodePointer = __errno_location();\n      errorMessage = strerror(*errorCodePointer);\n      translatedMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(translatedMessage,filePath,errorMessage);\n    }\n    readSize = fread(fileContents,1,fileSize,fileHandle);\n    if ((readSize == 0) || (lineNumber = ferror(fileHandle), lineNumber != 0)) {\n      translatedMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(translatedMessage,filePath);\n    }\n    lineNumber = 1;\n    fclose(fileHandle);\n    *(undefined2 *)(fileContents + fileSize) = 10;\n    currentByte = *fileContents;\n    lineStart = fileContents;\n    while (currentChar = lineStart, currentByte != 0) {\n      for (; currentByte = *currentChar, nextChar = currentChar, currentByte != 10; currentChar = currentChar + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextByte = currentChar + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentChar = 0;\n            nextByte = currentChar + 1;\n            if (currentChar[1] == 10) {\n              nextByte = currentChar + 2;\n              nextChar = currentChar + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentChar = 0;\n      if (currentChar[1] == 0xd) {\n        nextChar = currentChar + 1;\n        nextByte = currentChar + 2;\n      }\n      else {\n        nextByte = currentChar + 1;\n      }\nLAB_00114553:\n      currentByte = *lineStart;\n      while ((currentByte == 0x20 || (currentChar = lineStart, currentByte == 9))) {\n        currentChar = lineStart + 1;\n        lineStart = lineStart + 1;\n        currentByte = *currentChar;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentChar[1];\n        currentChar = currentChar + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentChar[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentChar[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentChar[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentChar[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentChar[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentChar[6];\n          lineIterator = currentChar + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = lineIterator[1];\n                lineIterator = lineIterator + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          translatedMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(translatedMessage,filePath,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentChar = 0;\n      if (lineStart < currentChar) {\n        hashTableEntry = (byte **)htab_find_slot(hashTable,lineStart,1);\n        *hashTableEntry = lineStart;\n      }\n      lineNumber = lineNumber + 1;\n      lineStart = nextByte;\n      currentByte = nextChar[1];\n    }\n    *extractedData = fileContents;\n  }\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "fread",
                "ferror",
                "dcgettext",
                "fopen",
                "get_file_size",
                "fatal",
                "fclose",
                "xmalloc",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_file_contents_00114460"
        },
        "FUN_001280f8": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280f8",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_001280f8"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "construct_formatted_string_0010a94e",
                "param_1": "binaryData",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "flag",
                "cVar1": "charFlag",
                "lVar2": "localVar",
                "__s": "typeString",
                "sVar3": "len1",
                "sVar4": "len2",
                "sVar5": "len3",
                "sVar6": "len4",
                "pcVar7": "formattedString",
                "uVar8": "result",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8 constructFormattedString_0010a94e(long binaryData,char *string1,char *string2,int flag)\n\n{\n  char charFlag;\n  long localVar;\n  char *typeString;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  char *formattedString;\n  undefined8 result;\n  char *flagString;\n  \n  charFlag = *(char *)(*(long *)(binaryData + 0x60) + 0x1c);\n  typeString = (char *)stab_pop_type();\n  formattedString = *(char **)(*(long *)(binaryData + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    len1 = strlen(formattedString);\n    len2 = strlen(string1);\n    len3 = strlen(typeString);\n    len4 = strlen(string2);\n    formattedString = (char *)xmalloc(len1 + 10 + len2 + len3 + len4);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(binaryData + 0x60) + 0x20),string1,flagString,\n            typeString,string2,*(long *)(binaryData + 0x60));\n    free(*(void **)(*(long *)(binaryData + 0x60) + 0x20));\n    localVar = *(long *)(binaryData + 0x60);\n    *(char **)(localVar + 0x20) = formattedString;\n    if (charFlag != '\\0') {\n      *(undefined *)(localVar + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)localVar >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "construct_formatted_string_0010a94e"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "get_real_type_00113b1e",
                "param_1": "input",
                "param_2": "unused",
                "param_3": "size",
                "param_4": "defaultValue",
                "auVar1": "result",
                "piVar2": "realType",
                "uVar3": "value",
                "auVar4": "output"
            },
            "code": "\nundefined  [16] getRealType_00113b1e(long input,undefined8 unused,ulong size,undefined8 defaultValue)\n\n{\n  undefined result [16];\n  int *realType;\n  undefined8 value;\n  undefined output [16];\n  \n  if (input != 0) {\n    realType = (int *)debug_get_real_type_isra_0(input,0);\n    if ((realType == (int *)0x0) || (3 < *realType - 7U)) {\n      value = 0;\n    }\n    else {\n      value = **(undefined8 **)(realType + 4);\n    }\n    output._8_8_ = defaultValue;\n    output._0_8_ = value;\n    return output;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = size;\n  return result << 0x40;\n}\n\n",
            "called": [
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "get_real_type_00113b1e"
        },
        "FUN_00104300": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "bfd_get_archive_filename",
                "debug_set_filename",
                "debug_set_class_id.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104300"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "format_and_push_string_0010a0e9",
                "param_1": "binaryPtr",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "type",
                "uVar2": "result",
                "__s": "poppedType",
                "sVar3": "stringLength",
                "__s_00": "allocatedString"
            },
            "code": "\nundefined4 formatAndPushString_0010a0e9(long binaryPtr,undefined8 param2,undefined8 param3)\n\n{\n  undefined type;\n  undefined4 result;\n  char *poppedType;\n  size_t stringLength;\n  char *allocatedString;\n  \n  type = *(undefined *)(*(long *)(binaryPtr + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(binaryPtr + 0x60) + 0x18);\n  poppedType = (char *)stab_pop_type();\n  stringLength = strlen(poppedType);\n  allocatedString = (char *)xmalloc(stringLength + 100);\n  sprintf(allocatedString,\"r%s;%ld;%ld;\",poppedType,param2,param3);\n  free(poppedType);\n  result = stab_push_string(binaryPtr,allocatedString,0,type,result);\n  if ((char)result != '\\0') {\n    free(allocatedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "remove_unused_sections_00114c20",
                "param_1": "binaryAddress",
                "cVar1": "startsWithTargetSection",
                "pcVar2": "sectionAddress"
            },
            "code": "\nvoid removeUnusedSections_00114c20(long binaryAddress)\n\n{\n  char startsWithTargetSection;\n  char *sectionAddress;\n  \n  find_section_list(binaryAddress,1,1);\n  startsWithTargetSection = startswith_lto_priv_0_lto_priv_0(binaryAddress,&DAT_0011b499);\n  if (startsWithTargetSection != '\\0') {\n    sectionAddress = (char *)(binaryAddress + 5);\n    if (*(char *)(binaryAddress + 4) != 'a') {\n      sectionAddress = (char *)(binaryAddress + 4);\n    }\n    if (*sectionAddress != '\\0') {\n      find_section_list(sectionAddress,1,0x100);\n    }\n  }\n  sections_removed = 1;\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "remove_unused_sections_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_and_update_00115f50",
                "param_1": "input",
                "param_2": "sections",
                "param_3": "flag",
                "__s1": "section_name",
                "uVar1": "comparison_result",
                "uVar2": "status",
                "extraout_EDX": "extra_value",
                "plVar3": "update_ptr",
                "auVar4": "result"
            },
            "code": "\nuint checkAndUpdate_00115f50(long input,char **sections,char flag)\n\n{\n  char *section_name;\n  uint comparison_result;\n  undefined4 status;\n  undefined4 extra_value;\n  long *update_ptr;\n  undefined result [12];\n  \n  if ((status != 0) || (extract_symbol != '\\0')) {\n    return 1;\n  }\n  result = is_strip_section_isra_0(sections);\n  if (result[0] == '\\0') {\n    if (update_sections != (long *)0x0) {\n      section_name = *sections;\n      update_ptr = update_sections;\n      do {\n        comparison_result = strcmp(section_name,(char *)update_ptr[1]);\n        result._4_4_ = 0;\n        result._0_4_ = comparison_result;\n        result._8_4_ = extra_value;\n        if (comparison_result == 0) {\n          return 1;\n        }\n        update_ptr = (long *)*update_ptr;\n      } while (update_ptr != (long *)0x0);\n    }\n    status = result._8_4_;\n    if (((((flag == '\\0') || (merge_notes == '\\0')) ||\n         (result._8_4_ = status, result._0_8_ = *(long *)(input + 8),\n         *(int *)(*(long *)(input + 8) + 8) != 5)) ||\n        ((result._0_8_ = (ulong)sections[0x1a], *(int *)(sections[0x1a] + 4) != 7 ||\n         (result = startswith_lto_priv_0_lto_priv_0(*sections,\".gnu.build.attributes\"),\n         result[0] == '\\0')))) && ((*(byte *)((long)sections + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(result._1_7_,sections[8] == (char *)0x0) |\n             CONCAT31(result._9_3_,sections[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strcmp",
                "is_strip_section.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "copy_section",
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "check_and_update_00115f50"
        },
        "FUN_00104540": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "main",
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104540"
        },
        "FUN_00104420": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104420"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "section_length_error_001083de",
                "uVar1": "sectionLength",
                "uVar2": "errorMessage",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "errorValue"
            },
            "code": "\nvoid sectionLengthError_001083de(void)\n\n{\n  undefined8 sectionLength;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 errorValue;\n  \n  sectionLength = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  fatal(errorMessage,sectionLength,errorValue);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "section_length_error_001083de"
        },
        "FUN_00104780": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_00104780"
        },
        "FUN_00104660": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104660"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_stab_entry_0010b948",
                "param_1": "inputAddr",
                "param_2": "count",
                "lVar1": "typeAddr",
                "cVar2": "isIntType",
                "__ptr": "typePtr",
                "uVar3": "countU",
                "uVar4": "countMinusOne",
                "local_5a": "outputString"
            },
            "code": "\nvoid processStabEntry_0010b948(long inputAddr,uint count)\n\n{\n  long typeAddr;\n  char isIntType;\n  void *typePtr;\n  ulong countU;\n  uint countMinusOne;\n  char outputString [50];\n  \n  countMinusOne = count - 1;\n  countU = (ulong)count;\n  if ((countMinusOne < 0x10) && (typeAddr = *(long *)(inputAddr + 0xf8 + (ulong)countMinusOne * 8), typeAddr != 0)) {\n    stab_push_defined_type(inputAddr,typeAddr,countU);\n    return;\n  }\n  isIntType = stab_int_type_lto_priv_0(inputAddr,4,0);\n  if (isIntType != '\\0') {\n    typePtr = (void *)stab_pop_type(inputAddr);\n    typeAddr = *(long *)(inputAddr + 0x68);\n    *(long *)(inputAddr + 0x68) = typeAddr + 1;\n    if (countMinusOne < 0x10) {\n      *(long *)(inputAddr + 0xf8 + (ulong)countMinusOne * 8) = typeAddr;\n    }\n    sprintf(outputString,\"%ld=r%s;%u;0;\",typeAddr,typePtr,countU);\n    free(typePtr);\n    stab_push_string(inputAddr,outputString,typeAddr,1,countU);\n  }\n  return;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_stab_entry_0010b948"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_circular_debug_info_00112b6e",
                "param_1": "input_array",
                "param_2": "debug_info",
                "iVar1": "first_element_input_array",
                "__format": "format_string",
                "piVar3": "result_array_pointer",
                "plVar4": "current_debug_info",
                "bVar5": "is_circular_info",
                "local_18": "local_debug_info",
                "local_10": "local_input_array"
            },
            "code": "\n\n\nint * find_circular_debug_info_00112b6e(int *input_array,long *debug_info)\n\n{\n  int first_element_input_array;\n  undefined8 uVar2;\n  char *format_string;\n  int *result_array_pointer;\n  long *current_debug_info;\n  bool is_circular_info;\n  long *local_debug_info;\n  int *local_input_array;\n  \n  first_element_input_array = *input_array;\n  if ((first_element_input_array != 1) && (1 < first_element_input_array - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular_info = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular_info)) {\n      uVar2 = debug_get_type_name_constprop_0\n                        (input_array,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,uVar2);\n      return (int *)0x0;\n    }\n  }\n  local_debug_info = debug_info;\n  local_input_array = input_array;\n  if (first_element_input_array - 0x16U < 2) {\n    result_array_pointer = (int *)find_circular_debug_info_00112b6e((*(undefined8 **)(input_array + 4))[1],&local_debug_info);\n    return result_array_pointer;\n  }\n  result_array_pointer = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result_array_pointer) {\n    return input_array;\n  }\n  if (result_array_pointer == (int *)0x0) {\n    return input_array;\n  }\n  result_array_pointer = (int *)find_circular_debug_info_00112b6e(result_array_pointer,&local_debug_info);\n  return result_array_pointer;\n}\n\n",
            "called": [
                "dcgettext",
                "debug_get_type_name.constprop.0",
                "debug_get_real_type.isra.0",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "debug_get_fields.isra.0",
                "debug_write_type.constprop.0",
                "debug_type_samep",
                "debug_get_real_type.isra.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_circular_debug_info_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "create_struct_type_0010a83e",
                "param_1": "struct_ptr",
                "param_2": "unknown_param",
                "param_3": "param_a",
                "param_4": "param_b",
                "param_5": "param_c",
                "param_6": "flag_a",
                "param_7": "flag_b",
                "__s": "string_ptr",
                "__s_00": "new_string_ptr",
                "sVar2": "string_length",
                "cVar3": "char_value",
                "uVar1": "result"
            },
            "code": "\nundefined4\ncreate_struct_type_0010a83e(long struct_ptr,undefined8 unknown_param,ulong param_a,undefined param_b,ulong param_c,\n            byte flag_a,byte flag_b)\n\n{\n  undefined4 result;\n  char *string_ptr;\n  char *new_string_ptr;\n  size_t string_length;\n  char char_value;\n  \n  if (((flag_b ^ 1) & flag_a) == 0) {\n    string_ptr = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(struct_ptr + 0x60) + 0x1c);\n    string_ptr = (char *)stab_pop_type();\n    param_c = param_c & 0xffffffff;\n    param_a = param_a & 0xffffffff;\n  }\n  result = stab_start_struct_type_lto_priv_0(struct_ptr,unknown_param,param_a,param_b,param_c);\n  if ((char)result != '\\0') {\n    if (flag_a == 0) {\n      return result;\n    }\n    if (flag_b == 0) {\n      if (string_ptr == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(string_ptr);\n      new_string_ptr = (char *)xmalloc(string_length + 3);\n      sprintf(new_string_ptr,\"~%%%s\",string_ptr);\n      free(string_ptr);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(struct_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(struct_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      new_string_ptr = (char *)xmalloc(0x14);\n      sprintf(new_string_ptr,\"~%%%ld\",*(undefined8 *)(*(long *)(struct_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(struct_ptr + 0x60) + 0x38) = new_string_ptr;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "sprintf",
                "stab_start_struct_type.lto_priv.0",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "create_struct_type_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_debug_constprop_object_00113d6e",
                "param_1": "object1",
                "param_2": "object2",
                "lVar1": "debug_object",
                "puVar2": "allocated_object"
            },
            "code": "\nlong create_debug_constprop_object_00113d6e(undefined8 object1,undefined8 object2)\n\n{\n  long debug_object;\n  undefined8 *allocated_object;\n  \n  debug_object = debug_make_type_constprop_0(0xb,0);\n  if (debug_object != 0) {\n    allocated_object = (undefined8 *)xmalloc(0x10);\n    *allocated_object = object1;\n    allocated_object[1] = object2;\n    *(undefined8 **)(debug_object + 0x10) = allocated_object;\n  }\n  return debug_object;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_constprop_object_00113d6e"
        },
        "FUN_00104430": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104430"
        },
        "FUN_00104310": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "bfd_nonfatal_message",
                "display_info.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104310"
        },
        "FUN_00104670": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "FUN_00104670"
        },
        "FUN_00104550": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104550"
        },
        "FUN_00104790": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "main",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_00104790"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_conditional_function_00114d50",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition"
            },
            "code": "\nvoid executeConditionalFunction_00114d50(long input1,long input2,uint condition)\n\n{\n  if (*(int *)(*(long *)(input1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((condition == 2) && (*(int *)(*(long *)(input2 + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(input2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(input1 + 8) + 0x380) + 0x78))(input1,condition != 0);\n  return;\n}\n\n",
            "called": [
                "set_long_section_mode.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "execute_conditional_function_00114d50"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "translatedString"
            },
            "code": "\nvoid printUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *translatedString;\n  \n  programName = program_name;\n  translatedString = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,translatedString,programName);\n  translatedString = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,translatedString);\n  translatedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,translatedString);\n  list_supported_targets(program_name,outputFile);\n  if (exitCode == 0) {\n    translatedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,translatedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "list_supported_targets",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_001126c0",
                "param_1": "errorType",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "archiveFilename",
                "param_10": "archivePtr",
                "param_11": "param11",
                "param_12": "errorMsg",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "booleanFlag",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "local_100": "bufferSize1",
                "local_fc": "bufferSize2",
                "local_f8": "localPtr1",
                "local_f0": "localPtr2",
                "local_e8": "localArray",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "localVar1",
                "local_a8": "localVar2",
                "local_98": "localVar3",
                "local_88": "localVar4",
                "local_78": "localVar5",
                "local_68": "localVar6",
                "local_58": "localVar7",
                "local_48": "localVar8"
            },
            "code": "\n\n\nvoid printError_001126c0(undefined4 errorType,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 long archiveFilename,long archivePtr,long *param11,char *errorMsg,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char booleanFlag;\n  int bfdError;\n  undefined8 errorMessage;\n  undefined4 bufferSize1;\n  undefined4 bufferSize2;\n  undefined *localPtr1;\n  undefined *localPtr2;\n  undefined localArray [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  undefined4 localVar7;\n  undefined4 localVar8;\n  \n  if (booleanFlag != '\\0') {\n    localVar1 = errorType;\n    localVar2 = param2;\n    localVar3 = param3;\n    localVar4 = param4;\n    localVar5 = param5;\n    localVar6 = param6;\n    localVar7 = param7;\n    localVar8 = param8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(program_name,_stderr);\n  if (archivePtr != 0) {\n    if (archiveFilename == 0) {\n      archiveFilename = bfd_get_archive_filename(archivePtr);\n    }\n    if ((param11 != (long *)0x0) && (*param11 != 0)) {\n      fprintf(_stderr,\": %s[%s]\",archiveFilename);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",archiveFilename);\nLAB_001127c1:\n  if (errorMsg != (char *)0x0) {\n    localPtr1 = &stack0x00000008;\n    localPtr2 = localArray;\n    bufferSize1 = 0x20;\n    bufferSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,errorMsg,&bufferSize1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessage);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fwrite",
                "bfd_get_error",
                "bfd_errmsg",
                "dcgettext",
                "bfd_get_archive_filename",
                "vfprintf",
                "fputs",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00108466",
                "copy_file",
                "FUN_0010808f",
                "main",
                "copy_relocations_in_section",
                "FUN_001086af",
                "copy_file.cold",
                "copy_object.cold",
                "copy_section",
                "FUN_00104ea2",
                "FUN_00107880",
                "copy_object",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_error_001126c0"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_type_00113b4a",
                "param_1": "inputValue",
                "lVar1": "typePointer"
            },
            "code": "\nlong initializeType_00113b4a(long inputValue)\n\n{\n  long typePointer;\n  \n  if (inputValue != 0) {\n    typePointer = debug_make_type_constprop_0(0x15,0);\n    if (typePointer == 0) {\n      typePointer = 0;\n    }\n    else {\n      *(long *)(typePointer + 0x10) = inputValue;\n    }\n    return typePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_type_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_symbol_lto_0010edb4",
                "param_1": "symbolData",
                "param_2": "newSymbol",
                "param_3": "symbolLength",
                "param_4": "maxSize",
                "cVar1": "result",
                "iVar2": "comparisonResult",
                "uVar3": "writeResult",
                "in_R10": "registerValue"
            },
            "code": "\nundefined8 updateSymbolLTO_0010edb4(long symbolData,undefined8 newSymbol,undefined4 symbolLength,ulong maxSize)\n\n{\n  char result;\n  int comparisonResult;\n  undefined8 writeResult;\n  undefined8 registerValue;\n  \n  if (*(long *)(symbolData + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(symbolData + 0x1f0) < maxSize) {\n    *(ulong *)(symbolData + 0x1f0) = maxSize;\n  }\n  comparisonResult = filename_cmp(newSymbol);\n  if (comparisonResult != 0) {\n    result = stab_write_symbol_lto_priv_0(symbolData,0x84,0,maxSize,newSymbol);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(symbolData + 0x210) = newSymbol;\n  }\n  writeResult = stab_write_symbol_lto_priv_0\n                    (symbolData,0x44,symbolLength,maxSize - *(long *)(symbolData + 0x200),0,registerValue);\n  return writeResult;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "debug_write_linenos.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_lto_0010edb4"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "reverse_function_0010e5db",
                "param_1": "input",
                "param_2": "length",
                "__ptr": "ptr",
                "__s": "string",
                "sVar2": "stringLength",
                "__s_00": "modifiedString",
                "in_R10": "constant",
                "iVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] reverseFunction_0010e5db(long input,int length)\n\n{\n  char cVar1;\n  void *ptr;\n  char *string;\n  size_t stringLength;\n  char *modifiedString;\n  ulong constant;\n  int counter;\n  undefined result [16];\n  \n  counter = 0;\n  do {\n    if (length <= counter) {\n      result = stab_modify_type(input,0x66,0,input + 0x188,input + 400,constant);\n      return result;\n    }\n    if (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)stab_pop_type(input);\n      free(ptr);\n    }\n    else {\n      string = (char *)stab_pop_type(input);\n      stringLength = strlen(string);\n      modifiedString = (char *)xmalloc(stringLength + 3);\n      sprintf(modifiedString,\":t%s\",string);\n      free(string);\n      cVar1 = stab_write_symbol_lto_priv_0(input,0x80,0,0,modifiedString);\n      if (cVar1 == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = constant;\n        return result << 0x40;\n      }\n      free(modifiedString);\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "called": [
                "stab_modify_type",
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_function_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_directory_00104d25",
                "param_7": "file_path",
                "status": "error_code"
            },
            "code": "\nvoid cleanup_directory_00104d25(void)\n\n{\n  undefined8 file_path;\n  \n  error_code = 1;\n  bfd_nonfatal_message(0,file_path,0,0);\n  remove_directory_00114b84();\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "FUN_00114b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "cleanup_directory_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "merge_debugging_information_0010551d",
                "puVar1": "pointer1",
                "bVar2": "byte1",
                "puVar3": "pointer2",
                "pcVar4": "functionPointer",
                "puVar5": "pointer3",
                "uVar6": "ulong1",
                "uVar7": "ulong2",
                "__s": "string1",
                "cVar8": "char1",
                "cVar9": "char2",
                "uVar10": "uint1",
                "iVar11": "int1",
                "uVar12": "uint2",
                "uVar13": "undefined4_1",
                "iVar14": "int2",
                "plVar15": "longPointer1",
                "sVar18": "size1",
                "pcVar19": "pointer6",
                "pcVar28": "pointer7",
                "ppcVar35": "pointerPointer1",
                "ppuVar37": "pointerPointer2",
                "bVar38": "bool1",
                "bVar39": "byte2",
                "lVar21": "long1",
                "uVar16": "ulong3",
                "uVar17": "ulong4",
                "sVar26": "size2",
                "plVar32": "longPointer2",
                "puVar29": "pointer8",
                "pvVar36": "pointer9",
                "piVar23": "intPointer1",
                "__ptr": "pointer10",
                "__ptr_00": "pointer11",
                "pcVar33": "pointer12",
                "unaff_R13": "longPointer3",
                "unaff_R14": "undefined8Pointer1"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong merge_debugging_information_0010551d(void)\n\n{\n  uint *pointer1;\n  byte byte1;\n  undefined *pointer2;\n  code *functionPointer;\n  undefined8 *pointer3;\n  ulong ulong1;\n  ulong ulong2;\n  char *string1;\n  char char1;\n  char char2;\n  uint uint1;\n  int int1;\n  uint uint2;\n  undefined4 undefined4_1;\n  int int2;\n  long *longPointer1;\n  undefined8 ulong3;\n  undefined8 ulong4;\n  size_t size1;\n  char *pointer6;\n  void *pointer10;\n  void *pointer11;\n  ulong uVar20;\n  long long1;\n  ulong uVar22;\n  int *intPointer1;\n  ulong uVar24;\n  long lVar25;\n  FILE *string1_00;\n  size_t size2;\n  long lVar27;\n  long *unaff_RBX;\n  char *pointer7;\n  undefined8 *pointer8;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *longPointer2;\n  char *pointer12;\n  undefined4 *pointer24;\n  char **pointerPointer1;\n  long *longPointer3;\n  void *pointer9;\n  undefined8 *undefined8Pointer1;\n  undefined **pointerPointer2;\n  bool bool1;\n  byte byte2;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  byte2 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  pointer8 = dump_sections;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (merge_notes != '\\0') {\n    if ((((*(int *)(undefined8Pointer1[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (char2 = startswith_lto_priv_0_lto_priv_0(), char2 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    char2 = bfd_get_full_section_contents();\n    if (char2 != '\\0') {\n      lVar27 = merge_gnu_build_notes();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (char2 = bfd_set_section_size(), char2 != '\\0')) {\n        unaff_RBX[3] = (long)longPointer3;\n        *unaff_RBX = unaff_RBP;\n        longPointer3 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointer8 != (undefined8 *)0x0; pointer8 = (undefined8 *)*pointer8) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      size1 = *(size_t *)(lVar25 + 0x40);\n      string1_00 = fopen((char *)pointer8[2],\"w\");\n      if (string1_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(pointer8[2],0,0);\n      }\n      else {\n        char2 = bfd_malloc_and_get_section();\n        if (char2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((size1 != 0) &&\n                (size2 = fwrite(in_stack_00000140,1,size1,string1_00), size2 != size1)) {\n          intPointer1 = __errno_location();\n          pointer12 = strerror(*intPointer1);\n          ulong4 = pointer8[2];\n          ulong3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(ulong3,ulong4,pointer12);\n          free(in_stack_00000140);\n          fclose(string1_00);\n          return 0;\n        }\n        fclose(string1_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      ulong4 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(ulong4);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      ulong4 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,ulong4,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        ulong1 = uVar24;\n        ulong2 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = ulong1, ulong2 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            ulong1 = uVar20;\n            ulong2 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  longPointer2 = isympp;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = improve_code_0010554f();\n    return uVar24;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pointerPointer2 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    pointer24 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *pointer24 = 0;\n      pointer24 = pointer24 + (ulong)byte2 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pointer2 = *pointerPointer2;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        pointer10 = (void *)xmalloc(lVar25);\n        char2 = bfd_get_section_contents();\n        if (char2 == '\\0') {\n          undefined4_1 = bfd_get_error();\n          bfd_errmsg(undefined4_1);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*undefined8Pointer1);\n          free(pcStack0000000000000038);\n          free(pointer10);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          pointer11 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            undefined4_1 = bfd_get_error();\n            bfd_errmsg(undefined4_1);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*undefined8Pointer1);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)pointer11 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pointer9 = pointer10; pointer9 <= (void *)((long)pointer10 + lVar25 + -0xc);\n                  pointer9 = (void *)((long)pointer9 + 0xc)) {\n                uVar20 = (**(code **)(undefined8Pointer1[1] + 0x40))(pointer9);\n                byte1 = *(byte *)((long)pointer9 + 4);\n                undefined4_1 = (**(code **)(undefined8Pointer1[1] + 0x58))((long)pointer9 + 6);\n                lVar27 = (**(code **)(undefined8Pointer1[1] + 0x40))((long)pointer9 + 8);\n                if (byte1 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pointer12 = (char *)((long)pointer11 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      size1 = strlen(pointer12);\n                      if (((size1 == 0) || (pointer7 = pointer12 + (size1 - 1), *pointer7 != '\\')) ||\n                         ((ulong)((long)pointer10 + lVar25) < (long)pointer9 + 0x10U)) goto LAB_001077fb;\n                      *pointer7 = '\\0';\n                      pointer9 = (void *)((long)pointer9 + 0xc);\n                      int1 = (**(code **)(undefined8Pointer1[1] + 0x40))(pointer9);\n                      uVar20 = (ulong)(uint)(int1 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pointer12 = (char *)concat(pointer12,(long)pointer11 + uVar20,0);\n                      *pointer7 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pointer12;\n                    }\n                    ulong4 = *undefined8Pointer1;\n                    pointer7 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pointer7,ulong4,pointer2,((long)pointer9 - (long)pointer10) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byte1,undefined4_1,lVar27,pointer12);\n                    char2 = parse_stab(puStack0000000000000020,pcStack0000000000000038,byte1);\n                    if (char2 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(pointer10);\n                      free(pointer11);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulong4 = *undefined8Pointer1;\n                    pointer12 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pointer12,ulong4,pointer2,((long)pointer9 - (long)pointer10) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byte1,((long)pointer9 - (long)pointer10) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(pointer10);\n              goto LAB_001058eb;\n            }\n          }\n          free(pointer11);\n          free(pointer10);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pointerPointer2 = pointerPointer2 + 2;\n    } while (pointerPointer2 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (char2 = finish_stab(), char2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(undefined8Pointer1[1] + 8) == 1) {\n      lVar25 = 0;\n      for (longPointer1 = longPointer2; longPointer1 < longPointer2 + in_stack_00000010; longPointer1 = longPointer1 + 1) {\n        (**(code **)(undefined8Pointer1[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = start_stab_constprop_0(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pointer12 = (char *)0x0;\n            pointer7 = in_stack_00000150;\n            while (((*pointer7 != '\\0' && (size1 = strlen(pointer7), pointer7[size1 - 1] == '\\')) &&\n                   (longPointer1 + 1 < longPointer2 + in_stack_00000010))) {\n              pointer6 = (char *)xstrdup(pointer7);\n              size1 = strlen(pointer6);\n              pointer6[size1 - 1] = '\\0';\n              pointer7 = (char *)concat(pointer6,*(undefined8 *)(longPointer1[1] + 8),0);\n              free(pointer6);\n              free(pointer12);\n              longPointer1 = longPointer1 + 1;\n              pointer12 = pointer7;\n            }\n            save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pointer7);\n            in_stack_00000018 = parse_stab(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((lVar25 != 0) && (char2 = finish_stab(), char2 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(undefined8Pointer1[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pointer12 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = longPointer2;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      pointer8 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)pointer8 = 0;\n        pointer8 = (undefined8 *)((long)pointer8 + (ulong)byte2 * -8 + 4);\n      }\n      char2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = longPointer2[in_stack_000000d0];\n        char1 = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (char1 == '\\0') {\n          undefined4_1 = bfd_get_error();\n          bfd_errmsg(undefined4_1);\n          pointer12 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulong4 = dcgettext(0,pointer12,5);\n          non_fatal(ulong4);\n          goto LAB_00105981;\n        }\n        pointer12 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (char1 = bfd_coff_get_auxent(), char1 == '\\0')) {\n          undefined4_1 = bfd_get_error();\n          bfd_errmsg(undefined4_1);\n          pointer12 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            char1 = debug_set_filename(puStack0000000000000020);\n            if (char1 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          char1 = debug_set_filename(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(undefined8Pointer1[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(undefined8Pointer1[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(undefined8Pointer1[1] + 0x238))();\n                pcStack0000000000000038 = pointer12;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              int1 = strcmp(pointer12,\".bb\");\n              if (int1 == 0) {\n                char1 = debug_start_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              int1 = strcmp(pointer12,\".eb\");\n              if (int1 == 0) {\n                char1 = debug_end_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              int1 = strcmp(pointer12,\".bf\");\n              if (int1 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_coff_type_lto_priv_0();\n                  if ((lVar27 == 0) ||\n                     (char2 = debug_record_function(puStack0000000000000020), char2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    int1 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      int1 = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      char1 = debug_record_line(puStack0000000000000020,int1 + iVar31,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (char1 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointer12 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                int1 = strcmp(pointer12,\".ef\");\n                if (int1 != 0) goto switchD_00106e1a_caseD_68;\n                if (char2 != '\\0') {\n                  char2 = debug_end_function(puStack0000000000000020);\n                  if (char2 == '\\0') goto LAB_00105981;\n                  char2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointer12 = \"%ld: unexpected .ef\\n\";\n              }\n              ulong4 = dcgettext(0,pointer12,5);\n              non_fatal(ulong4);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          long1 = parse_coff_type_lto_priv_0();\n          if (long1 == 0) goto LAB_00105981;\n          char1 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (char1 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') &&\n       (keep_section_symbols == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        longPointer2 = isympp + in_stack_00000010;\n        longPointer1 = isympp;\n        do {\n          uint1 = *(uint *)(*longPointer1 + 0x18);\n          if ((uint1 & 0x1000000) != 0) {\n            *(uint *)(*longPointer1 + 0x18) = uint1 & 0xfeffffff;\n          }\n          longPointer1 = longPointer1 + 1;\n        } while (longPointer2 != longPointer1);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          pointer1 = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *pointer1 = *pointer1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      int1 = bfd_get_error();\n      if (int1 != 0) {\n        status = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    longPointer2 = isympp;\n    uStack0000000000000048 = *(uint *)((long)undefined8Pointer1 + 0x44) & 0x42;\n    osympp = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        int1 = add_symbols;\n        longPointer1 = (long *)longPointer2[_in_stack_00000018];\n        functionPointer = (code *)longPointer1[4];\n        uint1 = *(uint *)(longPointer1 + 3);\n        pointer12 = (char *)longPointer1[1];\n        pointer7 = pointer12;\n        if (add_sym_list != (undefined8 *)0x0) {\n          iVar31 = 0;\n          pointer8 = add_sym_list;\n          while( true ) {\n            if ((int1 <= iVar31) || (pointer6 = (char *)pointer8[5], pointer6 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pointer6 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          int2 = strcmp(pointer6,pointer12);\n          if (int2 != 0) {\n            pointer8 = (undefined8 *)*pointer8;\n            goto LAB_0010750b;\n          }\n          free(pointer6);\n          uVar20 = uVar24 + 1;\n          pointer8[5] = \"\";\n          ulong3 = create_new_symbol(pointer8);\n          ulong4 = redefine_specific_htab;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = ulong3;\n          lVar27 = htab_elements(ulong4);\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          char2 = *pointer12;\n          if (char2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pointer12 = prefix_symbols_string;\n          if ((change_leading_char != '\\0') &&\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')) {\n            lVar27 = undefined8Pointer1[1];\n            char2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(redefine_specific_htab);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (section_rename_list == (char **)0x0)) goto LAB_00105af8;\n        if (pointer12 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pointer12 == '_') && (pointer12[1] == '_')) &&\n             (int1 = strcmp(pointer12 + (pointer12[2] == '_'),\"__gnu_lto_slim\"), int1 == 0)) {\n            ulong4 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(ulong4);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pointer12;\n        lVar27 = htab_find(redefine_specific_htab);\n        if (((lVar27 == 0) || (pointer7 = *(char **)(lVar27 + 8), pointer12 == pointer7)) &&\n           (pointer7 = pointer12, pointerPointer1 = section_rename_list, (uint1 & 0x100) != 0)) {\n          for (; pointerPointer1 != (char **)0x0; pointerPointer1 = (char **)pointerPointer1[3]) {\n            int1 = strcmp(*pointerPointer1,pointer12);\n            if (int1 == 0) {\n              pointer7 = pointerPointer1[1];\n              break;\n            }\n          }\n        }\n        longPointer1[1] = (long)pointer7;\n        char2 = *pointer7;\n        if (char2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pointer12 = prefix_symbols_string;\n        lVar27 = undefined8Pointer1[1];\n        if (*(char *)(lVar27 + 0x1c) == char2) {\n          if (change_leading_char == '\\0') {\n            if ((remove_leading_char == '\\0') ||\n               ((((uint1 & 0x82) == 0 && (functionPointer != bfd_map_over_sections)) &&\n                ((*(byte *)(longPointer1[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pointer7 = pointer7 + 1;\n            longPointer1[1] = (long)pointer7;\n            goto joined_r0x00106565;\n          }\n          char2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (char2 == '\\0') goto LAB_0010677d;\n          if (prefix_symbols_string != (char *)0x0) {\n            pointer7 = pointer7 + 1;\n            longPointer1[1] = (long)pointer7;\n            size1 = strlen(pointer7);\n            lVar27 = size1 + 2;\n            goto LAB_001066bc;\n          }\n          *pointer7 = char2;\n          longPointer1[1] = (long)pointer7;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((change_leading_char == '\\0') ||\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pointer12 == (char *)0x0) goto LAB_00105b32;\n            size1 = strlen(pointer7);\n            size2 = strlen(pointer12);\n            pointer12 = (char *)xmalloc(size2 + size1 + 1);\n            pointer6 = pointer12;\n          }\n          else {\nLAB_0010668d:\n            pointer12 = prefix_symbols_string;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (char2 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            size1 = strlen(pointer7);\n            lVar27 = size1 + 2;\n            if (pointer12 == (char *)0x0) {\n              pointer6 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              size1 = strlen(pointer12);\n              pointer6 = (char *)xmalloc(size1 + lVar27);\n            }\n            pointer12 = pointer6 + 1;\n            *pointer6 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          string1 = prefix_symbols_string;\n          if (prefix_symbols_string != (char *)0x0) {\n            strcpy(pointer12,prefix_symbols_string);\n            size1 = strlen(string1);\n            pointer12 = pointer12 + size1;\n          }\n          strcpy(pointer12,pointer7);\n          longPointer1[1] = (long)pointer6;\n          pointer7 = pointer6;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (strip_symbols == 7) goto LAB_001067a8;\n        if (((uint1 & 0x20) == 0) &&\n           (((uint1 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(longPointer1[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uint1 & 0x82) != 0 || ((*(byte *)(longPointer1[4] + 0x25) & 0x10) != 0)))) ||\n             (int1 = bfd_decode_symclass(longPointer1), int1 == 0x49)) {\nLAB_00105be2:\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pointer7;\n              htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uint1 & 0x82) == 0) && (functionPointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(longPointer1[4] + 0x25) & 0x10) == 0)) {\n            if ((uint1 & 4) == 0) {\n              if (((*(int *)(undefined8Pointer1[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(longPointer1[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                if (discard_locals == 1) {\n                  char2 = bfd_is_local_label(undefined8Pointer1);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            char2 = convert_debugging;\n            if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n              if (char2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (strip_symbols != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (wildcard == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            ulong4 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(ulong4);\n            status = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pointer7;\n          htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uint1 & 0x20) == 0) {\nLAB_00105c07:\n          if (wildcard != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pointer7;\n            htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((keep_file_symbols != '\\0') && ((uint1 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pointer7;\n            htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          char2 = is_strip_section_isra_0(longPointer1[4]);\n          if (char2 == '\\0') {\n            if (((uint1 & 0x800002) == 0) && (functionPointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uint1 & 0x82) != 0) {\n                char2 = is_specified_symbol(pointer7);\n                if ((char2 == '\\0') &&\n                   ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                    (char2 = is_specified_symbol(pointer7), char2 != '\\0')))) {\n                  if (((((localize_hidden == '\\0') ||\n                        (uint2 = *(uint *)(longPointer1 + 3), (uint2 & 0x200000) != 0)) ||\n                       (lVar27 = *longPointer1, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)longPointer1 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uint2 = *(uint *)(longPointer1 + 3);\n                }\n                *(uint *)(longPointer1 + 3) = uint2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uint1 & 1) != 0) && (char2 = is_specified_symbol(pointer7), char2 != '\\0')) {\n                *(uint *)(longPointer1 + 3) = *(uint *)(longPointer1 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((weaken != '\\0') || (char2 = is_specified_symbol(pointer7), char2 != '\\0')) {\n                *(uint *)(longPointer1 + 3) = *(uint *)(longPointer1 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (functionPointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = longPointer1;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (add_sym_list != (undefined8 *)0x0) {\n      pointer8 = add_sym_list;\n      int1 = add_symbols;\n      for (lVar27 = 0; lVar27 < int1; lVar27 = lVar27 + 1) {\n        pointer12 = (char *)pointer8[5];\n        if (pointer12 == (char *)0x0) {\n          long1 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          ulong4 = create_new_symbol(pointer8,in_stack_00000008);\n          *(undefined8 *)(lVar25 + long1) = ulong4;\n          int1 = add_symbols;\n        }\n        else if (pointer12 != \"\") {\n          ulong4 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(ulong4,pointer12);\n        }\n        pointer8 = (undefined8 *)*pointer8;\n      }\n    }\n    bool1 = convert_debugging != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((bool1) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      int1 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((int1 != 5) && (int1 != 2)) {\n        ulong4 = **(undefined8 **)(in_stack_00000008 + 8);\n        ulong3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,ulong3,ulong4);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      char2 = write_stabs_in_sections_debugging_info_constprop_0\n                        (in_stack_00000008,puStack0000000000000020,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (char2 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (char2 = bfd_set_section_size(lVar25,in_stack_00000110), char2 == '\\0')) ||\n         (char2 = bfd_set_section_size(lVar27,in_stack_00000140), char2 == '\\0')) {\n        pointer12 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulong4 = dcgettext(0,pointer12,5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,ulong4);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      char2 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((char2 == '\\0') ||\n         (char2 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         char2 == '\\0')) {\n        pointer12 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(strip_specific_htab);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(keep_specific_htab), lVar25 != 0 ||\n              (lVar25 = htab_elements(localize_specific_htab), lVar25 != 0)) ||\n             (lVar25 = htab_elements(globalize_specific_htab), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(keepglobal_specific_htab), lVar25 != 0 ||\n             (lVar25 = htab_elements(weaken_specific_htab), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(redefine_specific_htab), lVar25 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,osympp,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(undefined8Pointer1,copy_relocations_in_section,in_stack_00000008);\n  bfd_map_over_sections(undefined8Pointer1,copy_section,in_stack_00000008);\n  for (pointer8 = add_sections; pointer3 = update_sections, pointer8 != (undefined8 *)0x0;\n      pointer8 = (undefined8 *)*pointer8) {\n    char2 = bfd_set_section_contents(in_stack_00000008,pointer8[5],pointer8[4],0,pointer8[3]);\n    if (char2 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,pointer8[5],0);\n      return 0;\n    }\n  }\n  for (; pointer3 != (undefined8 *)0x0; pointer3 = (undefined8 *)*pointer3) {\n    ulong4 = *(undefined8 *)(pointer3[5] + 0x60);\n    char2 = bfd_set_section_contents(in_stack_00000008,ulong4,pointer3[4],0,pointer3[3]);\n    if (char2 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,ulong4,0);\n      return 0;\n    }\n  }\n  if (longPointer3 == (long *)0x0) {\n    if ((merge_notes != '\\0') && (is_strip == 0)) {\n      ulong4 = *undefined8Pointer1;\n      ulong3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(ulong3,ulong4);\n    }\nLAB_0010578f:\n    if ((gnu_debuglink_filename == 0) ||\n       (char2 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = gnu_debuglink_filename, char2 != '\\0')) {\n      uint1 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(undefined8Pointer1);\n      uVar24 = (ulong)uint1;\n      if ((char)uint1 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar24;\n        }\n        char2 = bfd_alt_mach_code(in_stack_00000008,use_alt_mach_code & 0xffffffff);\n        uVar20 = use_alt_mach_code;\n        if (char2 != '\\0') {\n          return uVar24;\n        }\n        ulong4 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(ulong4,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          ulong4 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(ulong4);\n          return uVar24;\n        }\n        ulong4 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(ulong4);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n        return uVar24;\n      }\n      ulong4 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,ulong4);\n    }\n    else {\n      ulong4 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,ulong4,lVar25);\n    }\n    return 0;\n  }\n  longPointer2 = (long *)0x0;\n  pointer8 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (pointer8 == (undefined8 *)0x0) {\n      do {\n        longPointer2 = (long *)longPointer3[3];\n        free((void *)longPointer3[1]);\n        free(longPointer3);\n        longPointer3 = longPointer2;\n      } while (longPointer2 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((merge_notes != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(pointer8[0x1a] + 4) == 7)) &&\n       (char2 = startswith_lto_priv_0_lto_priv_0(*pointer8,\".gnu.build.attributes\"), char2 != '\\0'))\n    {\n      if (longPointer2 == (long *)0x0) {\n        longPointer2 = longPointer3;\n      }\n      longPointer1 = longPointer3;\n      if (*(undefined8 **)(*longPointer2 + 0x60) == pointer8) {\nLAB_0010625f:\n        pointer12 = \"error: failed to merge notes\";\n        if (longPointer2[1] != 0) {\n          char2 = bfd_set_section_contents(in_stack_00000008,pointer8,longPointer2[1],0,longPointer2[2]);\n          if (char2 == '\\0') {\n            ulong4 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,in_stack_00000008,pointer8,ulong4);\n            return 0;\n          }\n          longPointer2 = (long *)longPointer2[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          longPointer2 = longPointer1;\n          if (*(undefined8 **)(*longPointer1 + 0x60) == pointer8) goto LAB_0010625f;\n          longPointer2 = (long *)longPointer1[3];\n          longPointer1 = longPointer2;\n        } while (longPointer2 != (long *)0x0);\n        pointer12 = \"error: failed to locate merged notes\";\n      }\n      ulong4 = dcgettext(0,pointer12,5);\n      bfd_nonfatal_message(0,in_stack_00000008,pointer8,ulong4);\n    }\nLAB_001061be:\n    pointer8 = (undefined8 *)pointer8[1];\n  } while( true );\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "dcgettext",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_debugging_information_0010551d"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "calculate_hash_00108800",
                "param_1": "inputString"
            },
            "code": "\nvoid calculateHash_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "calculate_hash_00108800"
        },
        "FUN_00104320": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_00104ea2",
                "parse_stab",
                "stab_demangle_template",
                "FUN_0010554f",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104320"
        },
        "FUN_00104200": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104200"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "deallocate_debug_variables_0010c1c6",
                "param_1": "debugger_instance",
                "param_2": "context",
                "param_3": "param_a",
                "param_4": "param_b",
                "param_5": "param_c",
                "param_6": "param_d",
                "puVar1": "next_ptr",
                "cVar2": "debug_result",
                "__ptr": "current_ptr"
            },
            "code": "\nundefined deallocate_debug_variables_0010c1c6(undefined8 debugger_instance,long context,undefined8 param_a,undefined8 param_b,\n                      undefined8 param_c,undefined8 param_d)\n\n{\n  undefined8 *next_ptr;\n  char debug_result;\n  undefined8 *current_ptr;\n  \n  current_ptr = *(undefined8 **)(context + 0x78);\n  while( true ) {\n    if (current_ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(context + 0x78) = 0;\n      return 1;\n    }\n    debug_result = debug_record_variable\n                      (debugger_instance,current_ptr[1],current_ptr[2],*(undefined4 *)(current_ptr + 3),current_ptr[4],param_d,param_c\n                      );\n    if (debug_result == '\\0') break;\n    next_ptr = (undefined8 *)*current_ptr;\n    free(current_ptr);\n    current_ptr = next_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_record_variable",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "parse_stab",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "deallocate_debug_variables_0010c1c6"
        },
        "FUN_00104560": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "stab_write_symbol.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104560"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_symbol_table_001082df",
                "unaff_RBX": "baseAddress",
                "unaff_RBP": "functionPointer",
                "strip_symbols": "symbolFlag",
                "uVar1": "symbolCount",
                "lVar2": "symbolValue",
                "cVar3": "symbolStatus",
                "puVar4": "newSymbolPointer",
                "puVar5": "updatedSymbolPointer",
                "uVar6": "index",
                "unaff_R13": "symbolTable"
            },
            "code": "\nvoid processSymbolTable_001082df(void)\n\n{\n  uint symbolCount;\n  long symbolValue;\n  char symbolStatus;\n  long baseAddress;\n  undefined8 *newSymbolPointer;\n  undefined8 *updatedSymbolPointer;\n  long functionPointer;\n  ulong index;\n  undefined8 *symbolTable;\n  \n  symbolCount = *(uint *)(baseAddress + 0x78);\n  if (symbolFlag == 7) {\n    newSymbolPointer = symbolTable;\n    for (index = 0; index != symbolCount; index = index + 1) {\n      updatedSymbolPointer = newSymbolPointer;\n      if (((*(long **)symbolTable[index] != (long *)0x0) &&\n          (symbolValue = **(long **)symbolTable[index], symbolValue != 0)) &&\n         (symbolStatus = is_specified_symbol(*(undefined8 *)(symbolValue + 8),keep_specific_htab), symbolStatus != '\\0')\n         ) {\n        updatedSymbolPointer = newSymbolPointer + 1;\n        *newSymbolPointer = symbolTable[index];\n      }\n      newSymbolPointer = updatedSymbolPointer;\n    }\n    *newSymbolPointer = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(functionPointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "is_specified_symbol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "process_symbol_table_001082df"
        },
        "FUN_00104440": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "copy_section",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104440"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_data_00114d60",
                "param_1": "param",
                "iVar1": "endOfFile",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "__stream": "file",
                "uVar4": "errorMsg1",
                "uVar5": "errorMsg2",
                "sVar6": "bytesRead",
                "lVar7": "currentOffset",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readAndStoreData_00114d60(long param)\n\n{\n  int endOfFile;\n  int *errorLocation;\n  char *errorMessage;\n  undefined8 errorMsg1;\n  FILE *file;\n  undefined8 errorMsg2;\n  size_t bytesRead;\n  long currentOffset;\n  long bufferSize;\n  \n  file = fopen(*(char **)(param + 0x10),\"r\");\n  if (file == (FILE *)0x0) {\n    errorLocation = __errno_location();\n    errorMessage = strerror(*errorLocation);\n    errorMsg2 = *(undefined8 *)(param + 0x10);\n    errorMsg1 = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    fatal(errorMsg1,errorMsg2,errorMessage);\n  }\n  bufferSize = 0x1000;\n  currentOffset = 0;\n  errorMsg2 = xmalloc(0x1000);\n  *(undefined8 *)(param + 0x20) = errorMsg2;\n  while( true ) {\n    endOfFile = feof(file);\n    if (endOfFile != 0) {\n      *(long *)(param + 0x18) = currentOffset;\n      fclose(file);\n      return;\n    }\n    if (currentOffset == bufferSize) {\n      bufferSize = currentOffset * 2;\n      errorMsg2 = xrealloc(*(undefined8 *)(param + 0x20),bufferSize);\n      *(undefined8 *)(param + 0x20) = errorMsg2;\n    }\n    bytesRead = fread((void *)(*(long *)(param + 0x20) + currentOffset),1,bufferSize - currentOffset,file);\n    endOfFile = ferror(file);\n    if (endOfFile != 0) break;\n    currentOffset = currentOffset + bytesRead;\n  }\n  errorMsg2 = *(undefined8 *)(param + 0x10);\n  errorMsg1 = dcgettext(0,\"%s: fread failed\",5);\n                    \n  fatal(errorMsg1,errorMsg2);\n}\n\n",
            "called": [
                "fopen",
                "section_add_load_file.cold",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_and_store_data_00114d60"
        },
        "FUN_00104680": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104680"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "handle_section_not_found_00108808",
                "unaff_RBP": "basePointer",
                "uVar1": "sectionPointer",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSectionNotFound_00108808(void)\n\n{\n  undefined8 sectionPointer;\n  undefined8 errorMessage;\n  long basePointer;\n  \n  sectionPointer = *(undefined8 *)(basePointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  fatal(errorMessage,sectionPointer);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "create_new_symbol"
            ],
            "imported": false,
            "current_name": "handle_section_not_found_00108808"
        },
        "FUN_00128418": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128418",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00128418"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "unaff_EBP": "lineCount",
                "unaff_R13": "fileDescriptor",
                "unaff_R14": "currentLine",
                "unaff_R15": "currentChar",
                "in_stack_00000008": "errorMessage",
                "in_stack_00000010": "returnAddress",
                "ppbVar2": "hashTableSlot",
                "pbVar3": "spaceAfterLine",
                "bVar4": "currentCharValue",
                "pbVar5": "nextLine",
                "pbVar6": "spaceAfterChar",
                "pbVar7": "carriageReturnChar",
                "uVar1": "errorString"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 errorString;\n  byte **hashTableSlot;\n  byte *spaceAfterLine;\n  byte currentCharValue;\n  byte *nextLine;\n  int lineCount;\n  byte *spaceAfterChar;\n  undefined8 fileDescriptor;\n  byte *carriageReturnChar;\n  byte *currentLine;\n  byte *currentChar;\n  undefined8 errorMessage;\n  undefined8 *returnAddress;\n  \n  *currentLine = 0;\nLAB_00114520:\n  currentLine = currentLine + 1;\n  do {\n    currentCharValue = *currentLine;\n    carriageReturnChar = currentLine;\n    if (currentCharValue == 10) {\n      *currentLine = 0;\n      if (currentLine[1] == 0xd) {\n        carriageReturnChar = currentLine + 1;\n        nextLine = currentLine + 2;\n      }\n      else {\n        nextLine = currentLine + 1;\n      }\n    }\n    else if ((char)currentCharValue < '\\v') {\n      if (currentCharValue != 0) goto LAB_00114520;\n      nextLine = currentLine + 1;\n    }\n    else {\n      if (currentCharValue != 0xd) break;\n      *currentLine = 0;\n      nextLine = currentLine + 1;\n      if (currentLine[1] == 10) {\n        nextLine = currentLine + 2;\n        carriageReturnChar = currentLine + 1;\n      }\n    }\n    currentCharValue = *currentChar;\n    while ((currentCharValue == 0x20 || (spaceAfterChar = currentChar, currentCharValue == 9))) {\n      spaceAfterChar = currentChar + 1;\n      currentChar = currentChar + 1;\n      currentCharValue = *spaceAfterChar;\n    }\n    do {\n      if ((currentCharValue == 10) || (currentCharValue == 0xd)) goto LAB_00114676;\n      if (currentCharValue == 0) goto LAB_00114599;\n      currentCharValue = spaceAfterChar[1];\n      spaceAfterChar = spaceAfterChar + 1;\n    } while ((currentCharValue != 0x20) && (currentCharValue != 9));\n    if ((char)currentCharValue < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentCharValue & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentCharValue = spaceAfterChar[1];\n      if ((((((currentCharValue == 9) || (currentCharValue == 0x20)) &&\n            ((currentCharValue = spaceAfterChar[2], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n           ((currentCharValue = spaceAfterChar[3], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n          ((currentCharValue = spaceAfterChar[4], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n         ((currentCharValue = spaceAfterChar[5], currentCharValue == 9 || (currentCharValue == 0x20)))) {\n        currentCharValue = spaceAfterChar[6];\n        spaceAfterLine = spaceAfterChar + 6;\n        if ((currentCharValue == 9) || (currentCharValue == 0x20)) {\n          do {\n            do {\n              currentCharValue = spaceAfterLine[1];\n              spaceAfterLine = spaceAfterLine + 1;\n            } while (currentCharValue == 0x20);\n          } while (currentCharValue == 9);\n        }\n      }\n      if ((0xd < currentCharValue) || ((-0x2402L >> (currentCharValue & 0x3f) & 1U) != 0)) {\n        errorString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(errorString,errorMessage,lineCount);\n      }\n    }\nLAB_00114599:\n    *spaceAfterChar = 0;\n    if (currentChar < spaceAfterChar) {\n      hashTableSlot = (byte **)htab_find_slot();\n      *hashTableSlot = currentChar;\n    }\n    lineCount = lineCount + 1;\n    currentLine = nextLine;\n    currentChar = nextLine;\n    if (carriageReturnChar[1] == 0) {\n      *returnAddress = fileDescriptor;\n      return;\n    }\n  } while( true );\n  if (currentCharValue == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_fatal_00119940",
                "param_1": "address",
                "param_2": "data",
                "uVar1": "message",
                "local_20": "buffer"
            },
            "code": "\nvoid checkAndFatal_00119940(undefined8 address,undefined8 data)\n\n{\n  undefined8 message;\n  char *buffer [2];\n  \n  bfd_scan_vma(address,buffer,0);\n  if (*buffer[0] == '\\0') {\n    return;\n  }\n  message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(message,data,address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "parse_vma.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_fatal_00119940"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_action_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "rax",
                "code": "functionPtr"
            },
            "code": "\nvoid executeAction_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long rax;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(functionPtr **)(*(long *)(rax + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "set_long_section_mode"
            ],
            "imported": false,
            "current_name": "execute_action_0010540e"
        },
        "FUN_00104210": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00114dc7",
                "FUN_00107880",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104210"
        },
        "FUN_00104450": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104450"
        },
        "FUN_00104330": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "copy_section",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104330"
        },
        "FUN_00104690": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104690"
        },
        "FUN_00104570": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00104ea2",
                "FUN_00107880",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_00104570"
        },
        "FUN_00128408": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128408",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128408"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_function_00113a4d",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "cVar1": "isDebuggable",
                "uVar2": "result",
                "puVar3": "ptr",
                "auVar4": "debugResult"
            },
            "code": "\nundefined8\nprocessFunction_00113a4d(undefined8 param1,undefined8 param2,long param3,undefined8 param4,\n            undefined8 param5)\n\n{\n  char isDebuggable;\n  undefined8 result;\n  undefined8 *ptr;\n  undefined debugResult [16];\n  \n  isDebuggable = debug_write_linenos_constprop_0(param1,param2,*(undefined8 *)(param3 + 0x18));\n  if ((isDebuggable != '\\0') &&\n     (((*(long *)(param3 + 0x28) == 0 && (*(long *)(param3 + 8) != 0)) ||\n      (isDebuggable = stab_start_block_lto_priv_0(param2,*(undefined8 *)(param3 + 0x18)), isDebuggable != '\\0'))\n     )) {\n    if (*(undefined8 **)(param3 + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(param3 + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        isDebuggable = debug_write_name_constprop_0(param1,param2,ptr);\n        if (isDebuggable == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(param3 + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      isDebuggable = processFunction_00113a4d(param1,param2,ptr);\n      if (isDebuggable == '\\0') {\n        return 0;\n      }\n    }\n    debugResult = debug_write_linenos_constprop_0(param1,param2,*(undefined8 *)(param3 + 0x20));\n    if (debugResult[0] != '\\0') {\n      if ((*(long *)(param3 + 0x28) == 0) && (*(long *)(param3 + 8) != 0)) {\n        return debugResult._0_8_;\n      }\n      result = stab_end_block_lto_priv_0\n                        (param2,*(undefined8 *)(param3 + 0x20),debugResult._8_8_,param5);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_write_block.constprop.0",
                "debug_write_linenos.constprop.0",
                "stab_start_block.lto_priv.0",
                "stab_end_block.lto_priv.0",
                "debug_write_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "debug_write_block.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "process_function_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryToFree",
                "param_7": "returnParam"
            },
            "code": "\nundefined8 freeMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryToFree;\n  undefined8 returnParam;\n  \n  returnParam = returnValue;\n  free(memoryToFree);\n  return returnParam;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "free_memory_001081e9"
        },
        "FUN_00104100": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "display_info.isra.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104100"
        },
        "FUN_00104340": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "is_specified_symbol_predicate",
                "find_section_list"
            ],
            "imported": false,
            "current_name": "FUN_00104340"
        },
        "FUN_00104220": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104220"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_debug_type_00113b71",
                "param_1": "inputValue",
                "lVar1": "debugTypePointer"
            },
            "code": "\nlong initializeDebugType_00113b71(long inputValue)\n\n{\n  long debugTypePointer;\n  \n  if (inputValue != 0) {\n    debugTypePointer = debug_make_type_constprop_0(0x14,0);\n    if (debugTypePointer == 0) {\n      debugTypePointer = 0;\n    }\n    else {\n      *(long *)(debugTypePointer + 0x10) = inputValue;\n    }\n    return debugTypePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113b71"
        },
        "FUN_00104580": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104580"
        },
        "FUN_00104460": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104460"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "update_stab_table_00109dfe",
                "param_1": "stabTable",
                "lVar1": "currentCount",
                "local_40": "formattedString"
            },
            "code": "\nvoid updateStabTable_00109dfe(long stabTable)\n\n{\n  long currentCount;\n  char formattedString [40];\n  \n  if (*(long *)(stabTable + 0x70) != 0) {\n    stab_push_defined_type(stabTable,*(long *)(stabTable + 0x70),0);\n    return;\n  }\n  currentCount = *(long *)(stabTable + 0x68);\n  *(long *)(stabTable + 0x68) = currentCount + 1;\n  *(long *)(stabTable + 0x70) = currentCount;\n  sprintf(formattedString,\"%ld=%ld\",currentCount,currentCount);\n  stab_push_string(stabTable,formattedString,currentCount,1,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_stab_table_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "append_semicolon_if_not_null_00109bbb",
                "param_1": "objectAddress",
                "__s": "stringPointer",
                "sVar1": "stringLength"
            },
            "code": "\nbool appendSemicolonIfNotNull_00109bbb(long objectAddress)\n\n{\n  char *stringPointer;\n  size_t stringLength;\n  \n  if (*(long *)(objectAddress + 0x60) != 0) {\n    stringPointer = *(char **)(*(long *)(objectAddress + 0x60) + 0x30);\n    if (stringPointer != (char *)0x0) {\n      stringLength = strlen(stringPointer);\n      *(undefined2 *)(stringPointer + stringLength) = 0x3b;\n    }\n    return stringPointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "append_semicolon_if_not_null_00109bbb"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "extract_and_concatenate_strings_0010ae0e",
                "param_1": "input",
                "lVar1": "dataPtr",
                "lVar2": "arrayPtr",
                "__ptr": "ptr",
                "pcVar3": "strPtr",
                "sVar4": "length1",
                "sVar5": "length2",
                "pcVar6": "finalStr",
                "uVar7": "result",
                "lVar8": "finalStrLength",
                "uVar9": "index",
                "uVar10": "arraySize"
            },
            "code": "\nundefined8 extractAndConcatenateStrings_0010ae0e(long input)\n\n{\n  long dataPtr;\n  long arrayPtr;\n  void *ptr;\n  char *strPtr;\n  size_t length1;\n  size_t length2;\n  char *finalStr;\n  undefined8 result;\n  long finalStrLength;\n  uint index;\n  ulong arraySize;\n  \n  result = 0;\n  dataPtr = *(long *)(input + 0x60);\n  if (((dataPtr != 0) && (*(char **)(dataPtr + 8) != (char *)0x0)) &&\n     (finalStr = *(char **)(dataPtr + 0x20), finalStr != (char *)0x0)) {\n    length1 = strlen(*(char **)(dataPtr + 8));\n    length2 = strlen(finalStr);\n    arrayPtr = *(long *)(dataPtr + 0x28);\n    if (arrayPtr == 0) {\n      finalStrLength = length1 + length2 + 10;\n      arraySize = 0;\n    }\n    else {\n      finalStrLength = length1 + length2 + 0x1e;\n      arraySize = 0;\n      while( true ) {\n        finalStr = *(char **)(arrayPtr + arraySize * 8);\n        if (finalStr == (char *)0x0) break;\n        length1 = strlen(finalStr);\n        arraySize = (ulong)((int)arraySize + 1);\n        finalStrLength = finalStrLength + length1;\n      }\n    }\n    if (*(char **)(dataPtr + 0x30) != (char *)0x0) {\n      length1 = strlen(*(char **)(dataPtr + 0x30));\n      finalStrLength = finalStrLength + length1;\n    }\n    if (*(char **)(dataPtr + 0x38) != (char *)0x0) {\n      length1 = strlen(*(char **)(dataPtr + 0x38));\n      finalStrLength = finalStrLength + length1;\n    }\n    finalStr = (char *)xmalloc(finalStrLength);\n    dataPtr = *(long *)(input + 0x60);\n    strcpy(finalStr,*(char **)(dataPtr + 8));\n    if (*(long *)(dataPtr + 0x28) != 0) {\n      index = 0;\n      length1 = strlen(finalStr);\n      sprintf(finalStr + length1,\"!%u,\",arraySize);\n      while( true ) {\n        dataPtr = *(long *)(input + 0x60);\n        arraySize = (ulong)index;\n        ptr = *(void **)(dataPtr + 0x28);\n        strPtr = *(char **)((long)ptr + arraySize * 8);\n        if (strPtr == (char *)0x0) break;\n        index = index + 1;\n        strcat(finalStr,strPtr);\n        free(*(void **)(*(long *)(dataPtr + 0x28) + arraySize * 8));\n      }\n      free(ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    dataPtr = *(long *)(input + 0x60);\n    strcat(finalStr,*(char **)(dataPtr + 0x20));\n    free(*(void **)(dataPtr + 0x20));\n    dataPtr = *(long *)(input + 0x60);\n    *(undefined8 *)(dataPtr + 0x20) = 0;\n    if (*(char **)(dataPtr + 0x30) != (char *)0x0) {\n      strcat(finalStr,*(char **)(dataPtr + 0x30));\n      free(*(void **)(dataPtr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    length1 = strlen(finalStr);\n    dataPtr = *(long *)(input + 0x60);\n    *(undefined2 *)(finalStr + length1) = 0x3b;\n    strPtr = *(char **)(dataPtr + 0x38);\n    if (strPtr != (char *)0x0) {\n      strcpy(finalStr + length1 + 1,strPtr);\n      free(*(void **)(dataPtr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    dataPtr = *(long *)(input + 0x60);\n    *(char **)(dataPtr + 8) = finalStr;\n    result = CONCAT71((int7)((ulong)dataPtr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strcat",
                "sprintf",
                "strcpy",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "extract_and_concatenate_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_type_information_001135a5",
                "param_1": "outputStream",
                "param_2": "inputStream",
                "param_3": "infoStruct",
                "iVar1": "flag",
                "cVar2": "result",
                "uVar3": "output",
                "puVar4": "currentVar",
                "puVar5": "currentPtr"
            },
            "code": "\nundefined8 processTypeInformation_001135a5(undefined8 outputStream,undefined8 inputStream,long infoStruct)\n\n{\n  int flag;\n  char result;\n  undefined8 output;\n  undefined8 *currentVar;\n  undefined8 *currentPtr;\n  \n  if (6 < *(uint *)(infoStruct + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(infoStruct + 0x14)) {\n  case 0:\n    result = debug_write_type_constprop_0(outputStream,inputStream,*(undefined8 *)(infoStruct + 0x20),infoStruct);\n    if (result != '\\0') {\n      output = stab_typdef_lto_priv_0(inputStream,*(undefined8 *)(infoStruct + 8));\n      return output;\n    }\n    break;\n  case 1:\n    result = debug_write_type_constprop_0(outputStream,inputStream,*(undefined8 *)(infoStruct + 0x20),infoStruct);\n    if (result != '\\0') {\n      output = stab_tag_lto_priv_0(inputStream,*(undefined8 *)(infoStruct + 8));\n      return output;\n    }\n    break;\n  case 2:\n    result = debug_write_type_constprop_0\n                      (outputStream,inputStream,*(undefined8 *)(*(long *)(infoStruct + 0x20) + 8),0);\n    if (result != '\\0') {\n      output = stab_variable_lto_priv_0\n                        (inputStream,*(undefined8 *)(infoStruct + 8),**(undefined4 **)(infoStruct + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(infoStruct + 0x20) + 4));\n      return output;\n    }\n    break;\n  case 3:\n    currentPtr = *(undefined8 **)(infoStruct + 0x20);\n    flag = *(int *)(infoStruct + 0x18);\n    output = *(undefined8 *)(infoStruct + 8);\n    result = debug_write_linenos_constprop_0(outputStream,inputStream,*(undefined8 *)(currentPtr[2] + 0x18));\n    if (((result != '\\0') &&\n        (result = debug_write_type_constprop_0(outputStream,inputStream,*currentPtr,0), result != '\\0')) &&\n       (result = stab_start_function_lto_priv_0(inputStream,output,flag == 2), result != '\\0')) {\n      for (currentVar = (undefined8 *)currentPtr[1]; currentVar != (undefined8 *)0x0;\n          currentVar = (undefined8 *)*currentVar) {\n        result = debug_write_type_constprop_0(outputStream,inputStream,currentVar[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = stab_function_parameter_lto_priv_0(inputStream,currentVar[1],*(undefined4 *)(currentVar + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      currentPtr = (undefined8 *)currentPtr[2];\n      while( true ) {\n        if (currentPtr == (undefined8 *)0x0) {\n          output = stab_end_function_lto_priv_0(inputStream);\n          return output;\n        }\n        result = debug_write_block_constprop_0(outputStream,inputStream,currentPtr);\n        if (result == '\\0') break;\n        currentPtr = (undefined8 *)*currentPtr;\n      }\n    }\n    break;\n  case 4:\n    output = stab_int_constant_lto_priv_0\n                      (inputStream,*(undefined8 *)(infoStruct + 8),*(undefined8 *)(infoStruct + 0x20));\n    return output;\n  case 5:\n    output = stab_float_constant_lto_priv_0\n                      (*(undefined8 *)(infoStruct + 0x20),inputStream,*(undefined8 *)(infoStruct + 8));\n    return output;\n  case 6:\n    result = debug_write_type_constprop_0(outputStream,inputStream,**(undefined8 **)(infoStruct + 0x20),0);\n    if (result != '\\0') {\n      output = stab_typed_constant_lto_priv_0\n                        (inputStream,*(undefined8 *)(infoStruct + 8),\n                         *(undefined8 *)(*(long *)(infoStruct + 0x20) + 8));\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_function.lto_priv.0",
                "debug_write_block.constprop.0",
                "debug_write_linenos.constprop.0",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_variable.lto_priv.0",
                "abort",
                "stab_float_constant.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_typdef.lto_priv.0",
                "stab_end_function.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "debug_write_block.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "process_type_information_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~bfd_flags_to_clear & *(uint *)(param_7[1] + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)unaff_R14 + 0x44));\n  if (strip_symbols == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_input_file_format_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = preserve_dates == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar28 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar28 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = add_sections, cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33)\n  {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = improve_code_0010554f();\n    return uVar29;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = add_sym_list;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (section_rename_list == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(redefine_specific_htab);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = section_rename_list, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = prefix_symbols_string;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = prefix_symbols_string;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar33 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = convert_debugging == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(strip_specific_htab);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(keep_specific_htab), lVar28 != 0 ||\n              (lVar28 = htab_elements(localize_specific_htab), lVar28 != 0)) ||\n             (lVar28 = htab_elements(globalize_specific_htab), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 != 0 ||\n             (lVar28 = htab_elements(weaken_specific_htab), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(redefine_specific_htab), lVar28 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = add_sections; puVar38 = update_sections, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)use_alt_mach_code;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = dump_sections;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001152b6",
                "bfd_get_arch",
                "bfd_set_file_flags",
                "bfd_get_mach",
                "dcgettext",
                "bfd_get_archive_filename",
                "bfd_set_start_address",
                "printf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "copy_object"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "FUN_00128318": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128318",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_00128318"
        },
        "FUN_00104590": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104590"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "reverse_demangle_0010b0fa",
                "param_3": "param_list",
                "param_4": "type_info",
                "param_5": "error_flag",
                "uVar1": "component",
                "iVar2": "comparison_result",
                "pcVar3": "result",
                "plVar4": "field_list",
                "pcVar5": "error_message",
                "sVar6": "length",
                "__ptr": "type_ptr",
                "lVar7": "arglist_length",
                "local_40": "local_buffer"
            },
            "code": "\n\n\nchar * reverse_demangle_0010b0fa(undefined8 param_1,undefined8 param_2,uint *param_list,long type_info,\n                   undefined *error_flag)\n\n{\n  uint component;\n  int comparison_result;\n  char *result;\n  long *field_list;\n  char *error_message;\n  size_t length;\n  void *type_ptr;\n  long arglist_length;\n  undefined local_buffer [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  while( true ) {\n    component = *param_list;\n    if (0x29 < component) break;\n    if (0x17 < component) {\n      switch(component) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)reverse_demangle_0010b0fa(param_1,param_2,*(undefined8 *)(param_list + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*param_list) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)debug_make_volatile_type_isra_0(result);\n            return result;\n          case 0x1b:\n            result = (char *)debug_make_const_type_isra_0(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)debug_make_pointer_type_isra_0(result);\n            return result;\n          case 0x23:\n            result = (char *)debug_make_reference_type_isra_0(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,param_list,0x14,local_buffer);\n        if (result == (char *)0x0) {\n          error_message = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison_result = strcmp(result,\"signed char\");\n        if (comparison_result == 0) {\nLAB_0010b406:\n          error_message = (char *)debug_make_int_type_isra_0(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"bool\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_type_constprop_0(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"char\");\n        if (comparison_result == 0) goto LAB_0010b406;\n        comparison_result = strcmp(result,\"double\");\n        if ((comparison_result == 0) || (comparison_result = strcmp(result,\"long double\"), comparison_result == 0)) {\n          error_message = (char *)debug_make_float_type_isra_0(8);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"float\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_float_type_isra_0(4);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"__float128\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_float_type_isra_0(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned char\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"int\");\n        if (comparison_result == 0) {\nLAB_0010b504:\n          error_message = (char *)debug_make_int_type_isra_0(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned int\");\n        if (comparison_result == 0) {\nLAB_0010b528:\n          error_message = (char *)debug_make_int_type_isra_0(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"long\");\n        if (comparison_result == 0) goto LAB_0010b504;\n        comparison_result = strcmp(result,\"unsigned long\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"__int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"short\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned short\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"void\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_void_type_isra_0();\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"wchar_t\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"...\");\n        if (comparison_result == 0) {\n          error_message = \"Unexpected demangled varargs\\n\";\n          if (error_flag == (undefined *)0x0) goto LAB_0010b6a9;\n          *error_flag = 1;\n        }\n        else {\n          error_message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          error_message = (char *)dcgettext(0,error_message,5);\n          fprintf(_stderr,error_message);\n        }\n        error_message = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return error_message;\n      case 0x29:\n        if (*(long *)(param_list + 4) == 0) {\n          type_ptr = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          type_ptr = (void *)reverse_demangle_0010b0fa(param_1,param_2,*(long *)(param_list + 4),0,0);\n        }\n        if (type_ptr != (void *)0x0) {\n          arglist_length = stab_demangle_v3_arglist(param_1,param_2,*(undefined8 *)(param_list + 6),local_buffer);\n          if (arglist_length != 0) {\n            result = (char *)debug_make_function_type_isra_0(type_ptr,arglist_length,local_buffer[0]);\n            return result;\n          }\n          free(type_ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (component != 1) {\n      if (component == 4) {\n        result = (char *)cplus_demangle_print(3,param_list,0x14,local_buffer);\n        error_message = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          length = strlen(result);\n          error_message = (char *)stab_find_tagged_type(param_1,param_2,result,length & 0xffffffff,9);\n          free(result);\n          return error_message;\n        }\nLAB_0010b3d3:\n        error_message = (char *)dcgettext(0,error_message,5);\n        fprintf(_stderr,error_message);\n        return result;\n      }\n      if (component == 0) {\n        if ((type_info == 0) ||\n           (field_list = (long *)debug_get_fields_isra_0(type_info), field_list == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    type_info = reverse_demangle_0010b0fa(param_1,param_2,*(undefined8 *)(param_list + 4),type_info,0);\n    if (type_info == 0) goto LAB_0010b38c;\n    param_list = *(uint **)(param_list + 6);\n    error_flag = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)component);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*field_list == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)stab_find_tagged_type\n                               (param_1,param_2,*(undefined8 *)(param_list + 4),param_list[6],0);\n    return result;\n  }\n  result = *(char **)(*field_list + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  error_message = (char *)debug_get_type_name_constprop_0(result);\n  if (error_message != (char *)0x0) {\n    length = strlen(error_message);\n    if ((param_list[6] == (uint)length) &&\n       (comparison_result = strncmp(error_message,*(char **)(param_list + 4),(long)(int)param_list[6]), comparison_result == 0)) {\n      return result;\n    }\n  }\n  field_list = field_list + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "debug_make_void_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_get_fields.isra.0",
                "strlen",
                "stab_demangle_v3_arglist",
                "debug_make_reference_type.isra.0",
                "dcgettext",
                "stab_demangle_v3_arg",
                "strcmp",
                "debug_make_type.constprop.0",
                "cplus_demangle_print",
                "debug_make_int_type.isra.0",
                "abort",
                "debug_make_pointer_type.isra.0",
                "stab_find_tagged_type",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "free",
                "debug_get_type_name.constprop.0",
                "debug_make_float_type.isra.0",
                "fprintf",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "stab_demangle_v3_arglist",
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "reverse_demangle_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "in_CL": "currentChar",
                "unaff_RBX": "linePtr",
                "unaff_EBP": "lineCount",
                "pbVar5": "trimmedLine",
                "unaff_R13": "errorMessage",
                "unaff_R14": "lastChar",
                "unaff_R15": "lineStart",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "resultPtr",
                "ppbVar2": "slotPtr",
                "pbVar2": "currentCharPtr",
                "pbVar3": "nextCharPtr",
                "bVar4": "nextChar",
                "uVar1": "translateResult"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 translateResult;\n  byte **slotPtr;\n  byte *nextCharPtr;\n  byte currentChar;\n  byte nextChar;\n  byte *linePtr;\n  int lineCount;\n  byte *trimmedLine;\n  undefined8 errorMessage;\n  byte *lastChar;\n  byte *lineStart;\n  undefined8 filename;\n  undefined8 *resultPtr;\n  \n  do {\n    trimmedLine = lineStart;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = trimmedLine[1];\n      trimmedLine = trimmedLine + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextChar = trimmedLine[1];\n      if ((((((nextChar == 9) || (nextChar == 0x20)) &&\n            ((nextChar = trimmedLine[2], nextChar == 9 || (nextChar == 0x20)))) &&\n           ((nextChar = trimmedLine[3], nextChar == 9 || (nextChar == 0x20)))) &&\n          ((nextChar = trimmedLine[4], nextChar == 9 || (nextChar == 0x20)))) &&\n         ((nextChar = trimmedLine[5], nextChar == 9 || (nextChar == 0x20)))) {\n        nextChar = trimmedLine[6];\n        nextCharPtr = trimmedLine + 6;\n        if ((nextChar == 9) || (nextChar == 0x20)) {\n          do {\n            do {\n              nextChar = nextCharPtr[1];\n              nextCharPtr = nextCharPtr + 1;\n            } while (nextChar == 0x20);\n          } while (nextChar == 9);\n        }\n      }\n      if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) {\n        translateResult = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(translateResult,filename,lineCount);\n      }\n    }\nLAB_00114599:\n    *trimmedLine = 0;\n    if (lineStart < trimmedLine) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = lineStart;\n    }\n    lineCount = lineCount + 1;\n    trimmedLine = linePtr;\n    if (lastChar[1] == 0) {\n      *resultPtr = errorMessage;\n      return;\n    }\n    for (; nextChar = *trimmedLine, lastChar = trimmedLine, nextChar != 10; trimmedLine = trimmedLine + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          nextCharPtr = trimmedLine + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *trimmedLine = 0;\n          nextCharPtr = trimmedLine + 1;\n          if (trimmedLine[1] == 10) {\n            nextCharPtr = trimmedLine + 2;\n            lastChar = trimmedLine + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *trimmedLine = 0;\n    if (trimmedLine[1] == 0xd) {\n      lastChar = trimmedLine + 1;\n      nextCharPtr = trimmedLine + 2;\n    }\n    else {\n      nextCharPtr = trimmedLine + 1;\n    }\nLAB_00114553:\n    currentChar = *linePtr;\n    lineStart = linePtr;\n    while (linePtr = nextCharPtr, currentChar == 0x20) {\nLAB_00104c3f:\n      trimmedLine = lineStart + 1;\n      lineStart = lineStart + 1;\n      nextCharPtr = linePtr;\n      currentChar = *trimmedLine;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "improve_code_0010554f",
                "gap_fill_set": "is_gap_fill_set",
                "pad_to_set": "is_pad_to_set",
                "puVar1": "pointer1",
                "bVar2": "byteVar2",
                "pcVar3": "functionPointer",
                "puVar4": "pointer4",
                "uVar5": "undefinedVar5",
                "uVar6": "ushortVar6",
                "cVar7": "charVar7",
                "cVar8": "charVar8",
                "uVar9": "undefinedVar9",
                "iVar10": "intVar10",
                "iVar11": "intVar11",
                "uVar12": "uintVar12",
                "uVar13": "uintVar13",
                "lVar14": "longVar14",
                "plVar15": "pointer15",
                "plVar20": "pointer20",
                "plVar25": "pointer25",
                "puVar26": "pointer26",
                "iVar27": "intVar27",
                "unaff_R14": "pointer_R14",
                "plVar28": "pointer28"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 improve_code_0010554f(void)\n\n{\n  uint *pointer1;\n  byte byteVar2;\n  code *functionPointer;\n  undefined8 *pointer4;\n  undefined undefinedVar5;\n  ushort ushortVar6;\n  char charVar7;\n  char charVar8;\n  undefined4 undefinedVar9;\n  int intVar10;\n  int intVar11;\n  uint uintVar12;\n  uint uintVar13;\n  long longVar14;\n  long *pointer15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *pointer20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *pointer25;\n  undefined8 *pointer26;\n  int intVar27;\n  long *pointer28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *functionPointer1;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **pfunctionPointer4;\n  void *pvVar35;\n  undefined8 *pointer_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *param_14;\n  uint param_15;\n  long *param_17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((is_gap_fill_set == '\\0') && (is_pad_to_set == '\\0')) {\n    param_12 = 0;\n    param_14 = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    longVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    param_17 = (long *)xmalloc(longVar14);\n    param_40 = param_17;\n    bfd_map_over_sections(param_7,get_sections,&stack0x00000140);\n    qsort(param_17,(ulong)in_stack_00000068._4_4_,8,compare_section_lma);\n    param_14 = (undefined *)xmalloc(longVar14);\n    bVar38 = is_gap_fill_set != '\\0';\n    puVar33 = param_14;\n    for (; longVar14 != 0; longVar14 = longVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(param_14 + uVar29 * 8);\n        pointer28 = param_17 + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uintVar12 = bfd_octets_per_byte(param_7,*pointer28);\n          uintVar13 = bfd_octets_per_byte(param_7);\n          longVar14 = *pointer28;\n          if ((*(uint *)(longVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uintVar13 * *(long *)(pointer28[1] + 0x38);\n          uVar24 = (ulong)uintVar12 * *(long *)(longVar14 + 0x38) + *(long *)(longVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          charVar7 = bfd_set_section_size();\n          if (charVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,param_7,*pointer28);\n            status = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          pointer28 = pointer28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (is_pad_to_set != '\\0') {\n      uintVar12 = bfd_octets_per_byte(param_7);\n      longVar14 = param_17[in_stack_00000068._4_4_ - 1];\n      uVar21 = pad_to * (ulong)uintVar12;\n      uVar24 = *(long *)(longVar14 + 0x40) + (ulong)uintVar12 * *(long *)(longVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        charVar7 = bfd_set_section_size();\n        if (charVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,param_7,param_17[in_stack_00000068._4_4_ - 1]);\n          status = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(param_14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  pointer28 = isympp;\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &names_0;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (longVar14 = 0x18; longVar14 != 0; longVar14 = longVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      longVar14 = bfd_get_section_by_name(pointer_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((longVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(longVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        charVar7 = bfd_get_section_contents(pointer_R14,longVar14,__ptr_00,0,lVar23);\n        if (charVar7 == '\\0') {\n          undefinedVar9 = bfd_get_error();\n          bfd_errmsg(undefinedVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*pointer_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(pointer_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            undefinedVar9 = bfd_get_error();\n            bfd_errmsg(undefinedVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*pointer_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)start_stab_constprop_0(pointer_R14,1,pointer28),\n               param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(pointer_R14[1] + 0x40))(pvVar35);\n                byteVar2 = *(byte *)((long)pvVar35 + 4);\n                undefinedVar9 = (**(code **)(pointer_R14[1] + 0x58))((long)pvVar35 + 6);\n                longVar14 = (**(code **)(pointer_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (byteVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + longVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    functionPointer1 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(functionPointer1);\n                      if (((sVar18 == 0) || (pcVar22 = functionPointer1 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      intVar10 = (**(code **)(pointer_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(intVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      functionPointer1 = (char *)concat(functionPointer1,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = functionPointer1;\n                    }\n                    uVar17 = *pointer_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byteVar2,undefinedVar9,longVar14,functionPointer1);\n                    charVar7 = parse_stab(__ptr_02,param_13,byteVar2);\n                    if (charVar7 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *pointer_R14;\n                    functionPointer1 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,functionPointer1,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)byteVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (charVar7 = finish_stab(), charVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(pointer_R14[1] + 8) == 1) {\n      longVar14 = 0;\n      for (pointer15 = pointer28; pointer15 < pointer28 + param_8; pointer15 = pointer15 + 1) {\n        (**(code **)(pointer_R14[1] + 0x218))(pointer_R14,*pointer15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((longVar14 == 0) && (longVar14 = start_stab_constprop_0(pointer_R14,0,pointer28), longVar14 == 0))\n             || ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          functionPointer1 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (pointer15 + 1 < pointer28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(pointer15[1] + 8),0);\n            free(__s);\n            free(functionPointer1);\n            pointer15 = pointer15 + 1;\n            functionPointer1 = pcVar22;\n          }\n          save_stab(param_43,(int)param_44,param_40,pcVar22);\n          param_9 = parse_stab(__ptr_02,longVar14,param_43);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((longVar14 != 0) && (charVar7 = finish_stab(), charVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(pointer_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = pointer28;\n        param_32 = 0;\n        param_31 = param_8;\n        in_stack_000000d8 = 0;\n        pointer26 = (undefined8 *)&stack0x00000148;\n        for (longVar14 = 0x22; longVar14 != 0; longVar14 = longVar14 + -1) {\n          *(undefined4 *)pointer26 = 0;\n          pointer26 = (undefined8 *)((long)pointer26 + (ulong)bVar39 * -8 + 4);\n        }\n        charVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uintVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            longVar14 = pointer28[param_32];\n            charVar8 = bfd_coff_get_syment(pointer_R14,longVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (charVar8 == '\\0') {\n              undefinedVar9 = bfd_get_error();\n              bfd_errmsg(undefinedVar9);\n              functionPointer1 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            functionPointer1 = *(char **)(longVar14 + 8);\n            pointer26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              pointer26 = &stack0x00000110;\n              charVar8 = bfd_coff_get_auxent(pointer_R14,longVar14,0);\n              if (charVar8 == '\\0') {\n                undefinedVar9 = bfd_get_error();\n                bfd_errmsg(undefinedVar9);\n                functionPointer1 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              charVar8 = debug_set_filename(__ptr_02);\n              if (charVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            charVar8 = debug_set_filename(__ptr_02);\n            if (charVar8 == '\\0') goto LAB_00105981;\n          }\n          ushortVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(pointer_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            charVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,longVar14,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(pointer_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(pointer_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(pointer_R14[1] + 0x238))(pointer_R14);\n                uintVar12 = (uint)ushortVar6;\n                param_13 = functionPointer1;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              intVar10 = strcmp(functionPointer1,\".bb\");\n              if (intVar10 == 0) {\n                charVar8 = debug_start_block(__ptr_02);\n              }\n              else {\n                intVar10 = strcmp(functionPointer1,\".eb\");\n                if (intVar10 != 0) goto switchD_00106e1a_caseD_68;\n                charVar8 = debug_end_block(__ptr_02);\n              }\n              break;\n            case 0x65:\n              intVar10 = strcmp(functionPointer1,\".bf\");\n              if (intVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uintVar13 = (int)uintVar12 >> ((byte)*(undefined4 *)(pointer_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_lto_priv_0\n                                     (pointer_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                      uintVar13 ^ (uintVar12 ^ uintVar13) & *(uint *)(pointer_R14[0x22] + 0x38)\n                                      ,pointer26,0,__ptr_02);\n                  if ((lVar37 == 0) || (charVar7 = debug_record_function(__ptr_02), charVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    intVar10 = 0;\n                    if (param_37 != 0) {\n                      intVar10 = param_39 - 1;\n                    }\n                    longVar14 = *(long *)(*(long *)(longVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      intVar27 = _param_15[4];\n                      if (intVar27 == 0) break;\n                      charVar8 = debug_record_line(__ptr_02,intVar10 + intVar27,\n                                                *(long *)(_param_15 + 6) + longVar14);\n                      _param_15 = _param_15 + 4;\n                      if (charVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uintVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                functionPointer1 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar10 = strcmp(functionPointer1,\".ef\");\n                if (intVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar7 != '\\0') {\n                  charVar7 = debug_end_function(__ptr_02);\n                  if (charVar7 == '\\0') goto LAB_00105981;\n                  charVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                functionPointer1 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,functionPointer1,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (charVar8 != '\\0');\n      }\n      else {\n        functionPointer1 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,functionPointer1,5);\n        non_fatal(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        pointer28 = isympp + param_8;\n        pointer15 = isympp;\n        do {\n          uintVar12 = *(uint *)(*pointer15 + 0x18);\n          if ((uintVar12 & 0x1000000) != 0) {\n            *(uint *)(*pointer15 + 0x18) = uintVar12 & 0xfeffffff;\n          }\n          pointer15 = pointer15 + 1;\n        } while (pointer28 != pointer15);\n      }\n    }\n    else {\n      for (longVar14 = *(long *)(param_7 + 0x90); longVar14 != 0; longVar14 = *(long *)(longVar14 + 8)) {\n        if (*(long *)(longVar14 + 0xe8) != 0) {\n          pointer1 = (uint *)(*(long *)(longVar14 + 0xe8) + 0x18);\n          *pointer1 = *pointer1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      longVar14 = xmalloc();\n      pointer28 = isympp;\n      param_15 = *(uint *)((long)pointer_R14 + 0x44) & 0x42;\n      osympp = longVar14;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          intVar10 = add_symbols;\n          pointer15 = (long *)pointer28[_param_9];\n          functionPointer = (code *)pointer15[4];\n          uintVar12 = *(uint *)(pointer15 + 3);\n          pointer20 = (long *)pointer15[1];\n          pointer25 = pointer20;\n          if (add_sym_list != (undefined8 *)0x0) {\n            intVar27 = 0;\n            pointer26 = add_sym_list;\n            while ((intVar27 < intVar10 && (functionPointer1 = (char *)pointer26[5], functionPointer1 != (char *)0x0))) {\n              if (functionPointer1 != \"\") {\n                intVar11 = strcmp(functionPointer1,(char *)pointer20);\n                if (intVar11 == 0) {\n                  free(functionPointer1);\n                  uVar21 = uVar29 + 1;\n                  pointer26[5] = \"\";\n                  uVar16 = create_new_symbol(pointer26);\n                  uVar17 = redefine_specific_htab;\n                  *(undefined8 *)(longVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                pointer26 = (undefined8 *)*pointer26;\n              }\n              intVar27 = intVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(redefine_specific_htab);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pointer20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)pointer20 == '_') && (*(char *)((long)pointer20 + 1) == '_')) &&\n                 (intVar10 = strcmp((char *)((ulong)(*(char *)((long)pointer20 + 2) == '_') +\n                                          (long)pointer20),\"__gnu_lto_slim\"), intVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = pointer20;\n            lVar37 = htab_find(redefine_specific_htab);\n            if (((lVar37 == 0) || (pointer25 = *(long **)(lVar37 + 8), pointer20 == pointer25)) &&\n               (pointer25 = pointer20, pfunctionPointer4 = section_rename_list, (uintVar12 & 0x100) != 0)) {\n              for (; pfunctionPointer4 != (char **)0x0; pfunctionPointer4 = (char **)pfunctionPointer4[3]) {\n                intVar10 = strcmp(*pfunctionPointer4,(char *)pointer20);\n                if (intVar10 == 0) {\n                  pointer25 = (long *)pfunctionPointer4[1];\n                  break;\n                }\n              }\n            }\n            pointer15[1] = (long)pointer25;\n            charVar7 = *(char *)pointer25;\n            if (charVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            functionPointer1 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar37 = pointer_R14[1];\n              charVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          charVar7 = *(char *)pointer20;\n          if (charVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          functionPointer1 = prefix_symbols_string;\n          lVar37 = pointer_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == charVar7) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uintVar12 & 0x82) == 0 && (functionPointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(pointer15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pointer25 = (long *)((long)pointer25 + 1);\n              pointer15[1] = (long)pointer25;\n              goto joined_r0x00106565;\n            }\n            charVar7 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (charVar7 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pointer25 = (long *)((long)pointer25 + 1);\n              pointer15[1] = (long)pointer25;\n              sVar18 = strlen((char *)pointer25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(functionPointer1);\n              pointer20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)pointer25 = charVar7;\n            pointer15[1] = (long)pointer25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (functionPointer1 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)pointer25);\n              sVar19 = strlen(functionPointer1);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              pointer20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              functionPointer1 = prefix_symbols_string;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (charVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)pointer25);\n              lVar37 = sVar18 + 2;\n              if (functionPointer1 != (char *)0x0) goto LAB_001066bc;\n              pointer20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)pointer20 + 1);\n              *(char *)pointer20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            functionPointer1 = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy((char *)__dest,prefix_symbols_string);\n              sVar18 = strlen(functionPointer1);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)pointer25);\n            pointer15[1] = (long)pointer20;\n            pointer25 = pointer20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uintVar12 & 0x20) == 0) &&\n             (((uintVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(pointer15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uintVar12 & 0x82) != 0 || ((*(byte *)(pointer15[4] + 0x25) & 0x10) != 0)))) ||\n               (intVar10 = bfd_decode_symclass(pointer15), intVar10 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = pointer25;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uintVar12 & 0x82) == 0) && (functionPointer != bfd_map_over_sections)) &&\n                    ((*(byte *)(pointer15[4] + 0x25) & 0x10) == 0)) {\n              if ((uintVar12 & 4) == 0) {\n                if (((*(int *)(pointer_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(pointer15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    charVar7 = bfd_is_local_label(pointer_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              charVar7 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (charVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar17);\n              status = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = pointer25;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uintVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = pointer25;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uintVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = pointer25;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            charVar7 = is_strip_section_isra_0(pointer15[4]);\n            if (charVar7 == '\\0') {\n              if (((uintVar12 & 0x800002) == 0) && (functionPointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uintVar12 & 0x82) != 0) {\n                  charVar7 = is_specified_symbol(pointer25);\n                  if ((charVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(keepglobal_specific_htab), lVar37 == 0 ||\n                      (charVar7 = is_specified_symbol(pointer25), charVar7 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uintVar13 = *(uint *)(pointer15 + 3), (uintVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *pointer15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)pointer15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uintVar13 = *(uint *)(pointer15 + 3);\n                  }\n                  *(uint *)(pointer15 + 3) = uintVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uintVar12 & 1) != 0) && (charVar7 = is_specified_symbol(pointer25), charVar7 != '\\0')) {\n                  *(uint *)(pointer15 + 3) = *(uint *)(pointer15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (charVar7 = is_specified_symbol(pointer25), charVar7 != '\\0')) {\n                  *(uint *)(pointer15 + 3) = *(uint *)(pointer15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (functionPointer != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(longVar14 + uVar29 * 8) = pointer15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        pointer26 = add_sym_list;\n        intVar10 = add_symbols;\n        for (lVar37 = 0; lVar37 < intVar10; lVar37 = lVar37 + 1) {\n          functionPointer1 = (char *)pointer26[5];\n          if (functionPointer1 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = create_new_symbol(pointer26,param_7);\n            *(undefined8 *)(longVar14 + lVar23) = uVar17;\n            intVar10 = add_symbols;\n          }\n          else if (functionPointer1 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar17,functionPointer1);\n          }\n          pointer26 = (undefined8 *)*pointer26;\n        }\n      }\n      bVar38 = convert_debugging == '\\0';\n      *(undefined8 *)(longVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      intVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((intVar10 == 5) || (intVar10 == 2)) {\n        param_33 = (void *)0x0;\n        charVar7 = write_stabs_in_sections_debugging_info_constprop_0\n                          (param_7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &stack0x00000140);\n        if (charVar7 != '\\0') {\n          longVar14 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((longVar14 == 0) || (lVar37 == 0)) ||\n              (charVar7 = bfd_set_section_size(longVar14,param_38), charVar7 == '\\0')) ||\n             (charVar7 = bfd_set_section_size(lVar37,param_40), charVar7 == '\\0')) {\n            functionPointer1 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(longVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            charVar7 = bfd_set_section_contents(param_7,longVar14,param_30,0,param_38);\n            if ((charVar7 != '\\0') &&\n               (charVar7 = bfd_set_section_contents(param_7,lVar37,param_33,0,param_40), charVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            functionPointer1 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,functionPointer1,5);\n          bfd_nonfatal_message(0,param_7,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(param_7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(pointer_R14,mark_symbols_used_in_relocations,isympp);\n      intVar10 = bfd_get_error();\n      if (intVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    longVar14 = htab_elements(strip_specific_htab);\n    if (((longVar14 != 0) ||\n        ((((longVar14 = htab_elements(keep_specific_htab), longVar14 != 0 ||\n           (longVar14 = htab_elements(localize_specific_htab), longVar14 != 0)) ||\n          (longVar14 = htab_elements(globalize_specific_htab), longVar14 != 0)) ||\n         ((longVar14 = htab_elements(keepglobal_specific_htab), longVar14 != 0 ||\n          (longVar14 = htab_elements(weaken_specific_htab), longVar14 != 0)))))) ||\n       ((((longVar14 = htab_elements(redefine_specific_htab), longVar14 != 0 ||\n          ((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')))) ||\n         (sections_copied != '\\0')) ||\n        ((((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n          (remove_leading_char != '\\0')) ||\n         (((section_rename_list != (char **)0x0 || (weaken != '\\0')) || (add_symbols != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(pointer_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(pointer_R14,copy_section,param_7);\n    for (pointer26 = add_sections; pointer4 = update_sections, pointer26 != (undefined8 *)0x0;\n        pointer26 = (undefined8 *)*pointer26) {\n      charVar7 = bfd_set_section_contents(param_7,pointer26[5],pointer26[4],0,pointer26[3]);\n      if (charVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,pointer26[5],0);\n        return 0;\n      }\n    }\n    for (; pointer4 != (undefined8 *)0x0; pointer4 = (undefined8 *)*pointer4) {\n      uVar17 = *(undefined8 *)(pointer4[5] + 0x60);\n      charVar7 = bfd_set_section_contents(param_7,uVar17,pointer4[4],0,pointer4[3]);\n      if (charVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar17 = *pointer_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar16,uVar17);\n      }\n    }\n    else {\n      pointer28 = (long *)0x0;\n      for (pointer26 = *(undefined8 **)(param_7 + 0x90); pointer26 != (undefined8 *)0x0;\n          pointer26 = (undefined8 *)pointer26[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(pointer26[0x1a] + 4) == 7 &&\n            (charVar7 = startswith_lto_priv_0_lto_priv_0(*pointer26,\".gnu.build.attributes\"),\n            charVar7 != '\\0')))) {\n          if (pointer28 == (long *)0x0) {\n            pointer28 = in_R10;\n          }\n          pointer15 = in_R10;\n          if (*(undefined8 **)(*pointer28 + 0x60) == pointer26) {\nLAB_0010625f:\n            functionPointer1 = \"error: failed to merge notes\";\n            if (pointer28[1] != 0) {\n              charVar7 = bfd_set_section_contents(param_7,pointer26,pointer28[1],0,pointer28[2]);\n              if (charVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,pointer26,uVar17);\n                return 0;\n              }\n              pointer28 = (long *)pointer28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pointer28 = pointer15;\n              if (*(undefined8 **)(*pointer15 + 0x60) == pointer26) goto LAB_0010625f;\n              pointer28 = (long *)pointer15[3];\n              pointer15 = pointer28;\n            } while (pointer28 != (long *)0x0);\n            functionPointer1 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,functionPointer1,5);\n          bfd_nonfatal_message(0,param_7,pointer26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        pointer28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = pointer28;\n      } while (pointer28 != (long *)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (charVar7 = bfd_fill_in_gnu_debuglink_section(param_7,param_21), longVar14 = gnu_debuglink_filename\n       , charVar7 != '\\0')) {\n      if (param_14 != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        longVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        undefinedVar5 = gap_fill;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = undefinedVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)longVar14 < in_stack_00000068._4_4_; longVar14 = longVar14 + 1) {\n          uVar29 = *(ulong *)(param_14 + longVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              charVar7 = bfd_set_section_contents(param_7,*param_17,__ptr,lVar37,uVar21);\n              if (charVar7 == '\\0') {\n                bfd_nonfatal_message(0,param_7,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(param_14);\n      }\n      undefinedVar9 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(pointer_R14);\n      if ((char)undefinedVar9 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return undefinedVar9;\n        }\n        charVar7 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar29 = use_alt_mach_code;\n        if (charVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar17,uVar29);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar17);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return undefinedVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return undefinedVar9;\n        }\n        return undefinedVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,longVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_set_section_size",
                "start_stab.constprop.0",
                "is_specified_symbol",
                "htab_traverse",
                "bfd_set_error",
                "save_stab",
                "free_saved_stabs",
                "bfd_alt_mach_code",
                "non_fatal",
                "qsort",
                "bfd_is_local_label",
                "debug_end_function",
                "copy_relocations_in_section",
                "strlen",
                "mark_symbols_used_in_relocations",
                "bfd_coff_get_syment",
                "dcgettext",
                "bfd_get_section_by_name",
                "bfd_octets_per_byte",
                "strcpy",
                "xmalloc",
                "is_strip_section.isra.0",
                "is_specified_symbol_predicate",
                "bfd_nonfatal_message",
                "startswith.lto_priv.0.lto_priv.0",
                "bfd_errmsg",
                "bfd_map_over_sections",
                "parse_coff_symbol.constprop.0.isra.0",
                "htab_elements",
                "get_sections",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "bfd_map_over_sections",
                "stab_context",
                "copy_section",
                "bfd_set_symtab",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_fill_in_gnu_debuglink_section",
                "free",
                "fprintf",
                "finish_stab",
                "compare_section_lma",
                "bfd_get_section_contents",
                "debug_end_block",
                "fatal",
                "bfd_decode_symclass",
                "strcmp",
                "debug_start_block",
                "htab_find",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "bfd_set_section_contents",
                "concat",
                "debug_set_filename",
                "debug_record_line",
                "create_new_symbol",
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improve_code_0010554f"
        },
        "FUN_00104230": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "imported": false,
            "current_name": "FUN_00104230"
        },
        "FUN_00104110": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104110"
        },
        "FUN_00128440": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128440",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128440"
        },
        "FUN_00104470": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "debug_find_named_type",
                "find_section_list",
                "main",
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "debug_set_class_id.lto_priv.0",
                "debug_tag_type",
                "debug_type_samep",
                "eq_string_redefnode",
                "parse_stab",
                "skip_section",
                "stab_find_tagged_type",
                "stab_demangle_qualified",
                "FUN_0010554f",
                "convert_efi_target",
                "is_strip_section_1.isra.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104470"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "format_and_push_string_00109cf4",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "length",
                "local_3c": "formatted_value"
            },
            "code": "\nvoid format_and_push_string_00109cf4(undefined8 buffer,undefined8 value,undefined4 length)\n\n{\n  char formatted_value [28];\n  \n  sprintf(formatted_value,\"%ld\",value);\n  stab_push_string(buffer,formatted_value,value,0,length);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "stab_enum_type.lto_priv.0",
                "stab_modify_type",
                "stab_bool_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_tag_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_00109cf4"
        },
        "FUN_00128320": {
            "renaming": {},
            "code": "\n\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128320",
            "calling": [
                "strncasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128320"
        },
        "FUN_00104350": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00104350"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_and_extract_numbers_00109ab1",
                "param_1": "input_string",
                "param_2": "output_numbers",
                "uVar1": "parsed_number",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_and_extract_numbers_00109ab1(char **input_string,undefined4 *output_numbers,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_number;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    parsed_number = parse_number(input_string,0);\n    *output_numbers = parsed_number;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      parsed_number = parse_number(input_string,0,param_3);\n      output_numbers[1] = parsed_number;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    bad_stab(current_char);\n    result = 0;\n  }\n  else {\n    *output_numbers = 0;\n    current_char = (char *)parse_number(input_string,0);\n    output_numbers[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "bad_stab",
                "parse_number"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_and_extract_numbers_00109ab1"
        },
        "FUN_00128200": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128200",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_00128200"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_strip_section_001159d0",
                "param_1": "section_address",
                "uVar1": "symbol_addr",
                "cVar2": "is_keep_symbol",
                "uVar3": "result",
                "lVar4": "section_header",
                "lVar5": "current_section_header",
                "strip_symbols": "strip_type",
                "is_strip_section_1_isra_0": "is_section_to_strip_in_group",
                "group_signature_isra_0": "get_group_signature",
                "is_specified_symbol": "check_symbol",
                "strip_specific_htab": "strip_specific_table"
            },
            "code": "\nundefined4 check_strip_section_001159d0(long section_address)\n\n{\n  undefined8 symbol_addr;\n  char is_keep_symbol;\n  undefined4 result;\n  long section_header;\n  long current_section_header;\n  \n  result = is_section_to_strip_in_group();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(section_address + 0x27) & 2) == 0) {\n      return result;\n    }\n    section_header = get_group_signature(*(undefined8 *)(section_address + 0xd0),*(undefined8 *)(section_address + 0xe0));\n    if ((section_header != 0) &&\n       (((symbol_addr = *(undefined8 *)(section_header + 8), strip_type != 7 ||\n         (is_keep_symbol = check_symbol(symbol_addr,keep_specific_htab), is_keep_symbol != '\\0')) &&\n        (is_keep_symbol = check_symbol(symbol_addr,strip_specific_table), is_keep_symbol == '\\0')))) {\n      section_header = *(long *)(*(long *)(section_address + 0xd0) + 0xc0);\n      current_section_header = section_header;\n      do {\n        if (current_section_header == 0) {\n          return 1;\n        }\n        is_keep_symbol = is_section_to_strip_in_group(current_section_header);\n        if (is_keep_symbol == '\\0') {\n          return result;\n        }\n        current_section_header = *(long *)(*(long *)(current_section_header + 0xd0) + 0xc0);\n      } while (section_header != current_section_header);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_specified_symbol",
                "group_signature.isra.0",
                "is_strip_section_1.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "skip_section",
                "FUN_0010554f",
                "setup_section"
            ],
            "imported": false,
            "current_name": "check_strip_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "combine_strings_0010a77a",
                "param_1": "input_ptr",
                "__s": "string_1",
                "uVar4": "status",
                "uVar1": "character",
                "uVar3": "value",
                "__s_00": "input_str",
                "sVar5": "input_str_len",
                "sVar6": "string_1_len",
                "__s_01": "combined_str"
            },
            "code": "\nundefined4 combineStrings_0010a77a(long input_ptr)\n\n{\n  undefined character;\n  long lVar2;\n  char *string_1;\n  undefined8 value;\n  undefined4 status;\n  char *input_str;\n  size_t input_str_len;\n  size_t string_1_len;\n  char *combined_str;\n  \n  lVar2 = *(long *)(input_ptr + 0x60);\n  if ((lVar2 != 0) && (string_1 = *(char **)(lVar2 + 0x20), string_1 != (char *)0x0)) {\n    status = *(undefined4 *)(lVar2 + 0x18);\n    character = *(undefined *)(lVar2 + 0x1c);\n    value = *(undefined8 *)(lVar2 + 0x10);\n    input_str = (char *)stab_pop_type();\n    input_str_len = strlen(input_str);\n    string_1_len = strlen(string_1);\n    combined_str = (char *)xmalloc(input_str_len + 2 + string_1_len);\n    sprintf(combined_str,\"%s%s;\",input_str,string_1);\n    free(input_str);\n    free(string_1);\n    status = stab_push_string(input_ptr,combined_str,value,character,status);\n    if ((char)status != '\\0') {\n      free(combined_str);\n      return status;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "combine_strings_0010a77a"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_and_handle_error_0010543c",
                "uVar1": "fileDescriptor",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage"
            },
            "code": "\nvoid openAndHandleError_0010543c(void)\n\n{\n  undefined8 fileDescriptor;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  long unaff_RBP;\n  \n  errnoLocation = __errno_location();\n  errorString = strerror(*errnoLocation);\n  fileDescriptor = *(undefined8 *)(unaff_RBP + 0x10);\n  errorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(errorMessage,fileDescriptor,errorString);\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "fatal",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "section_add_load_file"
            ],
            "imported": false,
            "current_name": "open_and_handle_error_0010543c"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "combine_strings_0010a424",
                "param_1": "input1",
                "param_2": "flag1",
                "param_3": "length",
                "param_4": "flag2",
                "cVar1": "emptyFlag",
                "bVar2": "byteFlag",
                "iVar3": "iterator",
                "uVar4": "result",
                "pcVar5": "string1",
                "__ptr": "array",
                "uVar6": "tempVar",
                "__s": "string2",
                "sVar7": "size1",
                "sVar8": "size2",
                "__s_00": "combinedString",
                "lVar9": "index1",
                "bVar10": "arrayFlag",
                "lVar11": "index2",
                "uVar12": "resultFlag"
            },
            "code": "\nundefined4 combineStrings_0010a424(long input1,char flag1,int length,char flag2)\n\n{\n  char emptyFlag;\n  byte byteFlag;\n  int iterator;\n  undefined4 result;\n  char *string1;\n  undefined8 *array;\n  undefined8 tempVar;\n  char *string2;\n  size_t size1;\n  size_t size2;\n  char *combinedString;\n  long index1;\n  byte arrayFlag;\n  long index2;\n  undefined resultFlag;\n  \n  if ((flag1 == '\\0') && (emptyFlag = stab_empty_type_lto_priv_0(), emptyFlag == '\\0')) {\n    return 0;\n  }\n  arrayFlag = *(byte *)(*(long *)(input1 + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type(input1);\n  if (length < 0) {\n    array = (undefined8 *)0x0;\n    length = 0;\nLAB_0010a582:\n    resultFlag = 1;\n    if (arrayFlag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (length != 0) {\n      iterator = length + 1;\n      array = (undefined8 *)xmalloc((long)iterator * 8);\n      index1 = (long)(length + -1);\n      do {\n        byteFlag = 1;\n        if (arrayFlag == 0) {\n          byteFlag = *(byte *)(*(long *)(input1 + 0x60) + 0x1c);\n        }\n        tempVar = stab_pop_type(input1);\n        arrayFlag = byteFlag & 1;\n        array[index1] = tempVar;\n        index1 = index1 + -1;\n      } while ((int)index1 != -1);\n      if (flag2 == '\\0') {\n        emptyFlag = stab_empty_type_lto_priv_0(input1);\n        if (emptyFlag == '\\0') {\n          return 0;\n        }\n        byteFlag = 1;\n        if (arrayFlag == 0) {\n          byteFlag = *(byte *)(*(long *)(input1 + 0x60) + 0x1c);\n        }\n        arrayFlag = byteFlag & 1;\n        tempVar = stab_pop_type(input1);\n        array[(long)iterator + -1] = tempVar;\n        length = iterator;\n      }\n      goto LAB_0010a582;\n    }\n    array = (undefined8 *)0x0;\n    if (flag2 != '\\0') goto LAB_0010a582;\n    array = (undefined8 *)xmalloc(8);\n    emptyFlag = stab_empty_type_lto_priv_0(input1);\n    if (emptyFlag == '\\0') {\n      return 0;\n    }\n    if ((arrayFlag != 0) || (*(char *)(*(long *)(input1 + 0x60) + 0x1c) != '\\0')) {\n      tempVar = stab_pop_type(input1);\n      length = 1;\n      resultFlag = 1;\n      *array = tempVar;\n      goto LAB_0010a596;\n    }\n    tempVar = stab_pop_type(input1);\n    length = 1;\n    *array = tempVar;\n  }\n  resultFlag = *(undefined *)(*(long *)(input1 + 0x60) + 0x1c);\nLAB_0010a596:\n  string2 = (char *)stab_pop_type(input1);\n  size1 = strlen(string1);\n  size2 = strlen(string2);\n  index1 = size1 + 10 + size2;\n  for (index2 = 0; (int)index2 < length; index2 = index2 + 1) {\n    size1 = strlen((char *)array[index2]);\n    index1 = index1 + size1;\n  }\n  combinedString = (char *)xmalloc(index1);\n  sprintf(combinedString,\"#%s,%s\",string1,string2);\n  index1 = 0;\n  free(string1);\n  free(string2);\n  while( true ) {\n    size1 = strlen(combinedString);\n    if (length <= (int)index1) break;\n    *(undefined2 *)(combinedString + size1) = 0x2c;\n    string1 = (char *)array[index1];\n    index1 = index1 + 1;\n    strcpy(combinedString + size1 + 1,string1);\n    free(string1);\n  }\n  *(undefined2 *)(combinedString + size1) = 0x3b;\n  free(array);\n  result = stab_push_string(input1,combinedString,0,resultFlag,0);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  free(combinedString);\n  return result;\n}\n\n",
            "called": [
                "stab_empty_type.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "strcpy",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "combine_strings_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "versionString",
                "pcVar1": "copyrightMsg"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 versionString)\n\n{\n  char *copyrightMsg;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMsg);\n  copyrightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00104480": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "report",
                "display_info.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104480"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "extract_key_value_pair_00114c80",
                "param_1": "str",
                "param_2": "value",
                "param_3": "error_message",
                "pcVar1": "equal_sign_pos",
                "uVar2": "key",
                "auVar3": "result",
                "xmalloc": "allocateMemory",
                "xstrndup": "copyString",
                "dcgettext": "getLocalizedMessage",
                "fatal": "handleFatalError"
            },
            "code": "\nundefined  [16] extractKeyValuePair_00114c80(char *str,undefined8 value,undefined8 error_message,undefined8 param_4)\n\n{\n  char *equal_sign_pos;\n  undefined8 key;\n  undefined result [16];\n  \n  equal_sign_pos = strchr(str,0x3d);\n  if (equal_sign_pos != (char *)0x0) {\n    result._0_8_ = (undefined8 *)allocateMemory(0x30);\n    key = copyString(str,(long)equal_sign_pos - (long)str);\n    result._0_8_[2] = equal_sign_pos + 1;\n    result._0_8_[1] = key;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = value;\n    result._8_8_ = param_4;\n    return result;\n  }\n  key = getLocalizedMessage(0,\"bad format for %s\",5);\n                    \n  handleFatalError(key,error_message);\n}\n\n",
            "called": [
                "strchr",
                "init_section_add.cold",
                "xstrndup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_key_value_pair_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_ptr_increment_0010870e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "ptr",
                "puVar1": "pointer"
            },
            "code": "\nvoid updatePtrIncrement_0010870e(undefined8 param1,undefined8 param2,long *ptr)\n\n{\n  undefined8 *pointer;\n  \n  pointer = (undefined8 *)*ptr;\n  *pointer = param2;\n  *ptr = (long)(pointer + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_ptr_increment_0010870e"
        },
        "FUN_001048a0": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001048a0"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "input",
                "param_2": "coff_header",
                "param_3": "debug_info",
                "param_4": "type_flags",
                "param_5": "type_code",
                "param_6": "parsed_data",
                "param_7": "create_type",
                "param_8": "debug_string",
                "lVar1": "header_address",
                "cVar2": "status",
                "uVar3": "error_code",
                "uVar4": "result",
                "lVar5": "return_value",
                "uVar6": "enum_data",
                "plVar7": "struct_type",
                "__ptr": "enum_names",
                "__ptr_00": "enum_values",
                "bVar8": "byte_value",
                "iVar9": "iteration",
                "pcVar10": "type_name",
                "uVar11": "bit_mask",
                "lVar12": "enum_index",
                "uVar13": "temp1",
                "uVar14": "temp2",
                "uVar15": "temp3",
                "local_68": "buffer",
                "local_48": "enum_entry",
                "local_47": "enum_entry_size"
            },
            "code": "\nlong parse_coff_type_0010dac0(long input,long *coff_header,long debug_info,undefined8 type_flags,uint type_code,\n                 long *parsed_data,char create_type,undefined8 debug_string)\n\n{\n  long header_address;\n  char status;\n  undefined4 error_code;\n  undefined8 result;\n  long return_value;\n  undefined8 enum_data;\n  long *struct_type;\n  void *enum_names;\n  void *enum_values;\n  byte byte_value;\n  int iteration;\n  char *type_name;\n  ulong bit_mask;\n  long enum_index;\n  uint temp1;\n  uint temp2;\n  undefined8 temp3;\n  undefined buffer [32];\n  char enum_entry;\n  byte enum_entry_size;\n  \n  return_value = *(long *)(input + 0x110);\n  if ((~*(uint *)(return_value + 0x38) & type_code) != 0) {\n    temp1 = (int)type_code >> ((byte)*(undefined4 *)(return_value + 0x44) & 0x1f);\n    bit_mask = (ulong)(type_code & *(uint *)(return_value + 0x40));\n    byte_value = (byte)*(undefined4 *)(return_value + 0x3c);\n    temp1 = (temp1 ^ type_code) & *(uint *)(return_value + 0x38) ^ temp1;\n    if (bit_mask == 1L << (byte_value & 0x3f)) {\n      result = parse_coff_type_0010dac0(input,coff_header,debug_info,type_flags,temp1,parsed_data,create_type,debug_string);\n      return_value = debug_make_pointer_type_isra_0(result);\n      return return_value;\n    }\n    if (bit_mask != 2L << (byte_value & 0x3f)) {\n      if (bit_mask != 3L << (byte_value & 0x3f)) {\n        result = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(return_value + 0x3c),\n                          temp1);\n        non_fatal(result,type_code);\n        return 0;\n      }\n      temp2 = 0;\n      if (parsed_data != (long *)0x0) {\n        temp2 = (uint)*(ushort *)(parsed_data + 2);\n        struct_type = parsed_data + 2;\n        for (iteration = 0; (*(short *)struct_type != 0 && (iteration != 3)); iteration = iteration + 1) {\n          *(short *)struct_type = *(short *)((long)struct_type + 2);\n          struct_type = (long *)((long)struct_type + 2);\n        }\n        *(short *)struct_type = 0;\n      }\n      temp3 = 0;\n      result = debug_string;\n      enum_data = parse_coff_type_0010dac0(input,coff_header,debug_info,type_flags,temp1,parsed_data,0);\n      return_value = *(long *)(debug_info + 0x28);\n      if (return_value == 0) {\n        result = debug_make_int_type_isra_0(4,0,temp3,result);\n        return_value = debug_name_type(debug_string,\"int\",result);\n        *(long *)(debug_info + 0x28) = return_value;\n      }\n      return_value = debug_make_array_type_isra_0(enum_data,return_value,0,(long)(int)(temp2 - 1),0);\n      return return_value;\n    }\n    result = parse_coff_type_0010dac0(input,coff_header,debug_info,type_flags,temp1,parsed_data,create_type,debug_string);\n    return_value = debug_make_function_type_isra_0(result,0,0);\n    return return_value;\n  }\n  if ((parsed_data != (long *)0x0) && (0 < *parsed_data)) {\n    struct_type = (long *)coff_get_slot_lto_priv_0(debug_info);\n    if (*struct_type != 0) {\n      return *struct_type;\n    }\n    return_value = debug_make_indirect_type_isra_0(struct_type,0);\n    return return_value;\n  }\n  if (create_type == '\\0') {\n    parsed_data = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    return_value = debug_make_void_type_isra_0();\n    return return_value;\n  }\n  return_value = *(long *)(debug_info + 8 + (long)(int)type_code * 8);\n  if (return_value != 0) {\n    return return_value;\n  }\n  switch(type_code) {\n  default:\n    result = debug_make_void_type_isra_0();\n    type_name = \"void\";\n    break;\n  case 2:\n    result = debug_make_int_type_isra_0(1,0);\n    type_name = \"char\";\n    break;\n  case 3:\n    result = debug_make_int_type_isra_0(2,0);\n    type_name = \"short\";\n    break;\n  case 4:\n    result = debug_make_int_type_isra_0(4,0);\n    type_name = \"int\";\n    break;\n  case 5:\n    result = debug_make_int_type_isra_0(4,0);\n    type_name = \"long\";\n    break;\n  case 6:\n    result = debug_make_float_type_isra_0(4);\n    type_name = \"float\";\n    break;\n  case 7:\n    result = debug_make_float_type_isra_0(8);\n    type_name = \"double\";\n    break;\n  case 8:\n    if (parsed_data == (long *)0x0) {\n      return_value = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    result = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (parsed_data == (long *)0x0) {\n      return_value = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    result = 9;\nLAB_0010de7a:\n    return_value = parse_coff_struct_type(input,coff_header,debug_info,result,parsed_data,debug_string);\nLAB_0010e046:\n    struct_type = (long *)coff_get_slot_lto_priv_0(debug_info,type_flags);\n    *struct_type = return_value;\n    return return_value;\n  case 10:\n    if (parsed_data == (long *)0x0) {\n      return_value = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      return_value = parsed_data[3];\n      enum_names = (void *)xmalloc(0x50);\n      enum_values = (void *)xmalloc(0x50);\n      enum_index = 0;\n      do {\n        while( true ) {\n          if ((return_value <= coff_header[3]) || (coff_header[1] <= coff_header[2])) goto LAB_0010e032;\n          iteration = (int)enum_index;\n          header_address = *(long *)(*coff_header + coff_header[2] * 8);\n          status = bfd_coff_get_syment(input,header_address,buffer);\n          enum_index = (long)iteration;\n          if (status == '\\0') {\n            error_code = bfd_get_error();\n            result = bfd_errmsg(error_code);\n            enum_data = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(enum_data,result);\n            free(enum_names);\n            free(enum_values);\n            return_value = 0;\n            goto LAB_0010e046;\n          }\n          coff_header[2] = coff_header[2] + 1;\n          coff_header[3] = (ulong)enum_entry_size + 1 + coff_header[3];\n          if (enum_entry != '\\x10') break;\n          if ((int)type_code <= iteration + 1) {\n            type_code = type_code + 10;\n            enum_names = (void *)xrealloc(enum_names);\n            enum_values = (void *)xrealloc(enum_values,(long)(int)type_code << 3);\n          }\n          enum_index = *(long *)(header_address + 0x20);\n          *(undefined8 *)((long)enum_names + (long)iteration * 8) = *(undefined8 *)(header_address + 8);\n          *(long *)((long)enum_values + (long)iteration * 8) =\n               *(long *)(header_address + 0x10) + *(long *)(enum_index + 0x30);\n          enum_index = (long)(iteration + 1);\n        }\n      } while (enum_entry != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)enum_names + enum_index * 8) = 0;\n      return_value = debug_make_enum_type_isra_0(enum_names,enum_values);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    return_value = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    result = debug_make_int_type_isra_0(1,1);\n    type_name = \"unsigned char\";\n    break;\n  case 0xd:\n    result = debug_make_int_type_isra_0(2,1);\n    type_name = \"unsigned short\";\n    break;\n  case 0xe:\n    result = debug_make_int_type_isra_0(4,1);\n    type_name = \"unsigned int\";\n    break;\n  case 0xf:\n    result = debug_make_int_type_isra_0(4,1);\n    type_name = \"unsigned long\";\n    break;\n  case 0x10:\n    result = debug_make_float_type_isra_0(0xc);\n    type_name = \"long double\";\n  }\n  return_value = debug_name_type(debug_string,type_name,result);\nLAB_0010e065:\n  *(long *)(debug_info + 8 + (long)(int)type_code * 8) = return_value;\n  return return_value;\n}\n\n",
            "called": [
                "debug_make_void_type.isra.0",
                "debug_make_struct_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "bfd_coff_get_syment",
                "dcgettext",
                "xmalloc",
                "debug_make_enum_type.isra.0",
                "coff_get_slot.lto_priv.0",
                "debug_make_array_type.isra.0",
                "bfd_get_error",
                "bfd_errmsg",
                "non_fatal",
                "parse_coff_struct_type",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "free",
                "debug_make_float_type.isra.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "__n": "string2Length",
                "extraout_var": "auxiliaryVariable",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  size_t string2Length;\n  undefined4 auxiliaryVariable;\n  undefined result [16];\n  \n  string2Length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,string2Length);\n  result._1_7_ = (undefined7)(CONCAT44(auxiliaryVariable,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "handle_remove_section_option",
                "FUN_00107880",
                "main",
                "skip_section",
                "stab_demangle_function_name.constprop.0",
                "FUN_0010554f",
                "convert_efi_target",
                "is_dwo_section.constprop.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "handle_time_error_0010882c",
                "piVar1": "ptrErrno",
                "uVar2": "translatedErrorMessage"
            },
            "code": "\nvoid handleTimeError_0010882c(void)\n\n{\n  int *ptrErrno;\n  undefined8 translatedErrorMessage;\n  \n  ptrErrno = __errno_location();\n  strerror(*ptrErrno);\n  translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(translatedErrorMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "handle_time_error_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "write_symbol_to_private_0010ebb0",
                "param_1": "output",
                "param_2": "filename",
                "param_3": "switchCase",
                "param_4": "extraData",
                "__s": "symbol",
                "cVar1": "switchChar",
                "uVar2": "switchCaseMinusOne",
                "uVar3": "result",
                "sVar4": "filenameLength",
                "sVar5": "symbolLength",
                "__s_00": "newSymbol"
            },
            "code": "\nundefined4 writeSymbolToPrivate_0010ebb0(undefined8 output,char *filename,int switchCase,undefined8 extraData)\n\n{\n  char switchChar;\n  uint switchCaseMinusOne;\n  undefined4 result;\n  char *symbol;\n  size_t filenameLength;\n  size_t symbolLength;\n  char *newSymbol;\n  \n  symbol = (char *)stab_pop_type();\n  switchCaseMinusOne = switchCase - 1;\n  if (switchCaseMinusOne < 4) {\n    result = *(undefined4 *)(CSWTCH_42 + (ulong)switchCaseMinusOne * 4);\n    switchChar = *(char *)((long)&CSWTCH_43 + (ulong)switchCaseMinusOne);\n    filenameLength = strlen(filename);\n    symbolLength = strlen(symbol);\n    newSymbol = (char *)xmalloc(filenameLength + 3 + symbolLength);\n    sprintf(newSymbol,\"%s:%c%s\",filename,(ulong)(uint)(int)switchChar,symbol);\n    free(symbol);\n    result = stab_write_symbol_lto_priv_0(output,result,0,extraData,newSymbol);\n    if ((char)result != '\\0') {\n      free(newSymbol);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_private_0010ebb0"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_debug_type_00113b98",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "lVar1": "debugType",
                "plVar2": "debugInfoArray"
            },
            "code": "\nlong createDebugType_00113b98(long inputParam1,long inputParam2,long inputParam3,undefined inputParam4)\n\n{\n  long debugType;\n  long *debugInfoArray;\n  \n  if ((inputParam1 != 0) && (debugType = debug_make_type_constprop_0(0x13,0), debugType != 0)) {\n    debugInfoArray = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)debugInfoArray + 0x19) = 0;\n    *debugInfoArray = inputParam1;\n    *(undefined4 *)((long)debugInfoArray + 0x1c) = 0;\n    debugInfoArray[1] = inputParam2;\n    debugInfoArray[2] = inputParam3;\n    *(undefined *)(debugInfoArray + 3) = inputParam4;\n    *(long **)(debugType + 0x10) = debugInfoArray;\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_type_00113b98"
        },
        "FUN_00104120": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104120"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_symbol_match_00115d70",
                "param_1": "symbol",
                "param_2": "table",
                "lVar1": "result",
                "local_18": "search_symbol",
                "local_10": "is_match"
            },
            "code": "\nundefined check_symbol_match_00115d70(undefined8 symbol,undefined8 table)\n\n{\n  long result;\n  undefined8 search_symbol;\n  undefined is_match;\n  \n  if (wildcard == '\\0') {\n    result = htab_find(table,symbol);\n    is_match = result != 0;\n  }\n  else {\n    is_match = 0;\n    search_symbol = symbol;\n    htab_traverse(table,is_specified_symbol_predicate,&search_symbol);\n  }\n  return is_match;\n}\n\n",
            "called": [
                "is_specified_symbol_predicate",
                "htab_find",
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "copy_relocations_in_section.cold",
                "FUN_0010554f",
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_symbol_match_00115d70"
        },
        "FUN_00104000": {
            "renaming": {
                "FUN_00104000": "initialize_profiler_00104000",
                "ctx": "profilerContext",
                "iVar1": "returnValue"
            },
            "code": "\nint initializeProfiler_00104000(EVP_PKEY_CTX *profilerContext)\n\n{\n  int returnValue;\n  \n  returnValue = __gmon_start__();\n  return returnValue;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_profiler_00104000"
        },
        "FUN_00104360": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104360"
        },
        "FUN_00128430": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcat@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128430",
            "calling": [
                "strcat"
            ],
            "imported": false,
            "current_name": "FUN_00128430"
        },
        "FUN_00104240": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "bfd_nonfatal.cold",
                "FUN_00114dc7",
                "display_info.isra.0",
                "stab_demangle_v3_arg",
                "set_times.cold",
                "copy_object.cold",
                "debug_get_real_type.isra.0",
                "FUN_001152b6",
                "debug_record_variable",
                "list_supported_targets",
                "debug_name_type",
                "section_add_load_file.cold",
                "list_matching_formats",
                "stab_typdef.lto_priv.0",
                "parse_number",
                "copy_section.cold",
                "setup_section.cold",
                "main",
                "debug_end_function",
                "copy_relocations_in_section",
                "FUN_001086af",
                "stab_int_type.lto_priv.0",
                "warn_stab",
                "FUN_00105828",
                "bfd_nonfatal_message",
                "FUN_00107976",
                "print_version",
                "debug_write_type.constprop.0",
                "FUN_0010554f",
                "add_redefine_and_check",
                "debug_find_named_type",
                "copy_file",
                "find_section_list",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "FUN_00116490",
                "stab_demangle_v3_arglist",
                "debug_add_to_current_namespace.constprop.0",
                "get_file_size",
                "stab_find_type",
                "debug_tag_type",
                "stab_context",
                "FUN_00104cc1",
                "coff_get_slot.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "copy_object",
                "stab_struct_field.lto_priv.0",
                "is_strip_section_1.isra.0.cold",
                "add_specific_symbols",
                "finish_stab",
                "parse_stab_type",
                "setup_section",
                "debug_record_parameter",
                "FUN_0010808f",
                "endian_string",
                "check_new_section_flags.cold",
                "copy_usage",
                "get_file_size.cold",
                "debug_end_block",
                "stab_write_symbol.lto_priv.0",
                "smart_rename.cold",
                "merge_gnu_build_notes",
                "bad_stab",
                "parse_flags.cold",
                "do_display_target",
                "parse_vma.cold",
                "create_new_symbol.cold",
                "stab_bad_demangle",
                "debug_start_block",
                "FUN_00108179",
                "FUN_00104ea2",
                "FUN_00107880",
                "strip_usage",
                "init_section_add.cold",
                "debug_record_line",
                "debug_start_source",
                "stab_find_slot",
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104240"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "add_entry_to_database_00109be3",
                "param_1": "database",
                "param_2": "entryData",
                "param_3": "entryType",
                "uVar1": "reallocResult",
                "puVar2": "entryPointer",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 addEntryToDatabase_00109be3(long database,undefined8 entryData,undefined4 entryType)\n\n{\n  undefined8 reallocResult;\n  undefined8 *entryPointer;\n  uint currentSize;\n  \n  if (*(uint *)(database + 0x2c) <= *(uint *)(database + 0x28)) {\n    currentSize = *(uint *)(database + 0x2c) + 10;\n    *(uint *)(database + 0x2c) = currentSize;\n    reallocResult = xrealloc(*(undefined8 *)(database + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(database + 0x20) = reallocResult;\n  }\n  currentSize = *(uint *)(database + 0x28);\n  entryPointer = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(database + 0x20));\n  *entryPointer = entryData;\n  *(undefined4 *)(entryPointer + 1) = entryType;\n  *(uint *)(database + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)entryPointer >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "stab_demangle_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "add_entry_to_database_00109be3"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_with_null_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "length",
                "__dest": "copiedString"
            },
            "code": "\nvoid copyStringWithNull_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t length;\n  void *copiedString;\n  \n  length = strnlen(inputString,maxLength);\n  copiedString = (void *)xmalloc(length + 1);\n  *(undefined *)((long)copiedString + length) = 0;\n  memcpy(copiedString,inputString,length);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "memcpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "init_section_add",
                "main"
            ],
            "imported": false,
            "current_name": "copy_string_with_null_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "write_symbol_to_stab_table_0010e918",
                "param_1": "symbolTable",
                "param_2": "value1",
                "param_3": "value2",
                "__s": "poppedValue",
                "sVar2": "lengthValue1",
                "sVar3": "lengthPoppedValue",
                "__s_00": "finalString",
                "uVar1": "returnValue"
            },
            "code": "\nundefined4 writeSymbolToStabTable_0010e918(undefined8 symbolTable,char *value1,undefined8 value2)\n\n{\n  undefined4 returnValue;\n  char *poppedValue;\n  size_t lengthValue1;\n  size_t lengthPoppedValue;\n  char *finalString;\n  \n  poppedValue = (char *)stab_pop_type();\n  lengthValue1 = strlen(value1);\n  lengthPoppedValue = strlen(poppedValue);\n  finalString = (char *)xmalloc(lengthValue1 + 0x14 + lengthPoppedValue);\n  sprintf(finalString,\"%s:c=e%s,%ld\",value1,poppedValue,value2);\n  free(poppedValue);\n  returnValue = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,finalString);\n  if ((char)returnValue != '\\0') {\n    free(finalString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_stab_table_0010e918"
        },
        "FUN_00128218": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128218",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00128218"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "section_content_processing_00116110",
                "param_1": "binaryFile",
                "param_2": "sectionHeaders",
                "param_3": "outputFile",
                "uVar1": "tempByte",
                "uVar2": "tempVar",
                "lVar3": "sectionOffset",
                "iVar4": "copyWidth",
                "iVar5": "copyByte",
                "cVar6": "sectionStatus",
                "uVar7": "errorMessage",
                "__ptr": "buffer",
                "lVar8": "counter",
                "uVar9": "iterator",
                "iVar10": "byteReversalCount",
                "uVar11": "tempVar2",
                "puVar12": "tempPointer",
                "lVar13": "remainingBytes",
                "puVar14": "bufferPtr",
                "puVar15": "bufferPtr2",
                "pvVar16": "tempPointer2",
                "uVar17": "tempVar3",
                "uVar18": "tempVar4",
                "uVar19": "tempVar5",
                "bVar20": "tempFlag",
                "local_38": "sectionSize",
                "local_30": "sectionContent"
            },
            "code": "\nvoid sectionContentProcessing_00116110(undefined8 binaryFile,undefined8 *sectionHeaders,undefined8 outputFile)\n\n{\n  undefined tempByte;\n  undefined8 tempVar;\n  long sectionOffset;\n  int copyWidth;\n  int copyByte;\n  char sectionStatus;\n  undefined8 errorMessage;\n  undefined8 *buffer;\n  long counter;\n  ulong iterator;\n  int byteReversalCount;\n  ulong tempVar2;\n  undefined *tempPointer;\n  long remainingBytes;\n  undefined8 *bufferPtr;\n  undefined8 *bufferPtr2;\n  void *tempPointer2;\n  ulong tempVar3;\n  ulong tempVar4;\n  ulong tempVar5;\n  byte tempFlag;\n  ulong sectionSize;\n  void *sectionContent;\n  \n  tempFlag = 0;\n  sectionStatus = skip_section(binaryFile,sectionHeaders,1);\n  if (sectionStatus != '\\0') {\n    return;\n  }\n  sectionSize = sectionHeaders[8];\n  sectionOffset = sectionHeaders[0xc];\n  if (((*(byte *)((long)sectionHeaders + 0x25) & 1) == 0) || ((*(byte *)(sectionOffset + 0x25) & 1) == 0)) {\n    remainingBytes = find_section_list(*sectionHeaders,0,0x80);\n    if (remainingBytes == 0) {\n      return;\n    }\n    if ((*(byte *)(remainingBytes + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(sectionSize);\n    bufferPtr2 = buffer;\n    if (7 < sectionSize) {\n      for (tempVar4 = sectionSize >> 3; tempVar4 != 0; tempVar4 = tempVar4 - 1) {\n        *bufferPtr2 = 0;\n        bufferPtr2 = bufferPtr2 + (ulong)tempFlag * -2 + 1;\n      }\n    }\n    bufferPtr = bufferPtr2;\n    if ((sectionSize & 4) != 0) {\n      bufferPtr = (undefined8 *)((long)bufferPtr2 + (ulong)tempFlag * -8 + 4);\n      *(undefined4 *)bufferPtr2 = 0;\n    }\n    bufferPtr2 = bufferPtr;\n    if ((sectionSize & 2) != 0) {\n      bufferPtr2 = (undefined8 *)((long)bufferPtr + (ulong)tempFlag * -4 + 2);\n      *(undefined2 *)bufferPtr = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)bufferPtr2 = 0;\n    }\n    sectionStatus = bfd_set_section_contents(outputFile,sectionOffset,buffer,0);\n    if (sectionStatus != '\\0') {\n      free(buffer);\n      return;\n    }\n    status = 1;\n    bfd_nonfatal_message(0,outputFile,sectionOffset,0);\n    free(buffer);\n    return;\n  }\n  sectionContent = (void *)0x0;\n  sectionStatus = bfd_get_full_section_contents(binaryFile,sectionHeaders,&sectionContent);\n  if ((sectionStatus == '\\0') ||\n     (sectionStatus = bfd_convert_section_contents(binaryFile,sectionHeaders,outputFile,&sectionContent,&sectionSize),\n     byteReversalCount = reverse_bytes, sectionStatus == '\\0')) {\n    bfd_set_section_size(sectionOffset,0);\n    status = 1;\n    bfd_nonfatal_message(0,binaryFile,sectionHeaders,0);\n    free(sectionContent);\n    return;\n  }\n  copyWidth = copy_width;\n  copyByte = copy_byte;\n  if (reverse_bytes != 0) {\n    tempVar4 = (ulong)reverse_bytes;\n    if (sectionSize % tempVar4 != 0) {\n      tempVar = *sectionHeaders;\n      errorMessage = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      fatal(errorMessage,tempVar,byteReversalCount);\n    }\n    byteReversalCount = reverse_bytes / 2;\n    tempVar2 = 0;\n    while (tempVar5 = tempVar2, copyWidth = copy_width, copyByte = copy_byte, tempVar5 < sectionSize) {\n      tempVar2 = tempVar4 + tempVar5;\n      tempVar3 = tempVar2;\n      for (iterator = 0; iterator < (ulong)(long)byteReversalCount; iterator = iterator + 1) {\n        tempVar3 = tempVar3 - 1;\n        tempPointer = (undefined *)(tempVar5 + iterator + (long)sectionContent);\n        tempByte = *tempPointer;\n        *tempPointer = *(undefined *)((long)sectionContent + tempVar3);\n        *(undefined *)((long)sectionContent + tempVar3) = tempByte;\n      }\n    }\n  }\n  copy_width = copyWidth;\n  copy_byte = copyByte;\n  if (-1 < copyByte) {\n    tempVar4 = (ulong)interleave;\n    byteReversalCount = (int)((ulong)sectionHeaders[7] % tempVar4);\n    tempVar2 = ((long)copyByte - (long)byteReversalCount) + (long)sectionContent;\n    if (copyByte < byteReversalCount) {\n      tempVar2 = tempVar2 + tempVar4;\n    }\n    remainingBytes = (sectionSize + (long)sectionContent) - tempVar2;\n    tempPointer2 = sectionContent;\n    for (; tempVar2 < sectionSize + (long)sectionContent; tempVar2 = tempVar2 + tempVar4) {\n      for (counter = 0; ((int)counter < copyWidth && (counter != remainingBytes)); counter = counter + 1) {\n        *(undefined *)((long)tempPointer2 + counter) = *(undefined *)(tempVar2 + counter);\n      }\n      tempPointer2 = (void *)((long)tempPointer2 + counter);\n      remainingBytes = remainingBytes - tempVar4;\n    }\n    sectionSize = ((((tempVar4 - 1) + sectionSize) - (long)copyByte) / tempVar4) * (long)copyWidth;\n    tempVar4 = *(ulong *)(sectionOffset + 0x38) / tempVar4;\n    *(ulong *)(sectionOffset + 0x38) = tempVar4;\n    if (copyByte < byteReversalCount) {\n      *(ulong *)(sectionOffset + 0x38) = tempVar4 + 1;\n      sectionStatus = bfd_set_section_contents(outputFile,sectionOffset,sectionContent,0,sectionSize);\n      if (sectionStatus == '\\0') {\n        cleanup_and_free_memory_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  sectionStatus = bfd_set_section_contents(outputFile,sectionOffset,sectionContent,0,sectionSize);\n  if (sectionStatus == '\\0') {\n    cleanup_and_free_memory_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionContent);\n  return;\n}\n\n",
            "called": [
                "FUN_00108466",
                "bfd_set_section_size",
                "copy_section.cold",
                "bfd_nonfatal_message",
                "find_section_list",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "skip_section",
                "xmalloc",
                "free",
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "section_content_processing_00116110"
        },
        "FUN_00104490": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104490"
        },
        "FUN_00104370": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "copy_relocations_in_section",
                "do_display_target",
                "bfd_nonfatal_message",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0",
                "bfd_nonfatal",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104370"
        },
        "FUN_001048b0": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001048b0"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "validate_and_close_block_0010bf20",
                "param_1": "block_ptr",
                "param_2": "new_block_end",
                "param_3": "unused_param",
                "param_4": "return_value",
                "lVar1": "current_block",
                "uVar2": "error_message",
                "pcVar3": "error_string",
                "auVar4": "result"
            },
            "code": "\n\n\nundefined  [16] validate_and_close_block_0010bf20(long block_ptr,undefined8 new_block_end,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_string;\n  undefined result [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_string = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_block_end;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_string = \"debug_end_block: attempt to close top level block\";\n  }\n  error_message = dcgettext(0,error_string,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010bf84:\n  result._8_8_ = return_value;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "validate_and_close_block_0010bf20"
        },
        "FUN_00104250": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "FUN_00104250"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "reverse_and_improve_demangled_type_0010c95e",
                "param_1": "function_table",
                "param_2": "name",
                "param_3": "type",
                "bVar1": "current_byte",
                "bVar2": "next_byte",
                "pbVar3": "current_name",
                "bVar4": "is_signed",
                "bVar5": "is_const",
                "bVar6": "is_volatile",
                "cVar7": "result",
                "uVar8": "count",
                "pbVar9": "next_name",
                "lVar10": "type_ptr",
                "uVar11": "result_var",
                "pcVar12": "type_name",
                "sVar13": "name_length",
                "uVar14": "parsed_count",
                "__ptr": "string_ptr",
                "lVar15": "type_ptr"
            },
            "code": "\nundefined8 reverse_and_improve_demangled_type_0010c95e(undefined8 *function_table,byte **name,long *type)\n\n{\n  byte current_byte;\n  byte next_byte;\n  byte *current_name;\n  bool is_signed;\n  bool is_const;\n  bool is_volatile;\n  char result;\n  uint count;\n  byte *next_name;\n  long type_ptr;\n  undefined8 result_var;\n  char *type_name;\n  size_t name_length;\n  ulong parsed_count;\n  void *string_ptr;\n  long type_ptr;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **ppcVar18;\n  char *pcVar19;\n  byte *pnext_byte0;\n  undefined local_49;\n  ulong local_48;\n  char *local_40 [2];\n  \n  while( true ) {\n    pnext_byte0 = *name;\n    current_byte = *pnext_byte0;\n    if ('T' < (char)current_byte) break;\n    if ((char)current_byte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(current_byte) {\n    case 0x41:\n      type_ptr = 0;\n      current_name = pnext_byte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *name = pnext_byte0 + 1;\n      result = reverse_and_improve_demangled_type_0010c95e(function_table,name,type);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (type == (long *)0x0) {\n        return 1;\n      }\n      type_ptr = debug_make_const_type_isra_0(*type);\n      *type = type_ptr;\n      return 1;\n    case 0x46:\n      *name = pnext_byte0 + 1;\n      if (type == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        ppcVar18 = (char **)0x0;\n      }\n      else {\n        puVar16 = &local_48;\n        ppcVar18 = local_40;\n      }\n      result = stab_demangle_args(function_table,name,ppcVar18,puVar16);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (**name == 0x5f) {\n        *name = *name + 1;\n        result = reverse_and_improve_demangled_type_0010c95e(function_table,name,type);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (type == (long *)0x0) {\n          return 1;\n        }\n        type_ptr = debug_make_function_type_isra_0(*type,local_40[0],local_48 & 0xff);\n        *type = type_ptr;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *name = pnext_byte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      local_49 = 0;\n      local_40[0] = (char *)0x0;\n      local_48 = 0;\n      *name = pnext_byte0 + 1;\n      if (((&_sch_istable)[(ulong)pnext_byte0[1] * 2] & 4) == 0) {\n        if (pnext_byte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        ppcVar18 = local_40;\n        if (type == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        result = stab_demangle_qualified(function_table,name,ppcVar18);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        count = stab_demangle_count(name);\n        current_name = *name;\n        name_length = strlen((char *)current_name);\n        if (name_length < count) goto switchD_0010cdf9_caseD_60;\n        *name = current_name + count;\n        if ((type != (long *)0x0) &&\n           (local_40[0] = (char *)stab_find_tagged_type(*function_table,function_table[1],current_name,count,9),\n           local_40[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **name;\n      if (current_byte == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *name = *name + 1;\n        }\n        if (**name != 0x46) goto switchD_0010cdf9_caseD_60;\n        *name = *name + 1;\n        if (type == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &local_49;\n          puVar16 = &local_48;\n        }\n        result = stab_demangle_args(function_table,name,puVar16,puVar17);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      if (**name == 0x5f) {\n        *name = *name + 1;\n        result = reverse_and_improve_demangled_type_0010c95e(function_table,name,type);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (type == (long *)0x0) {\n          return 1;\n        }\n        if (current_byte != 0x4d) {\n          type_ptr = debug_make_offset_type_isra_0(local_40[0],*type);\n          *type = type_ptr;\n          return 1;\n        }\n        type_ptr = debug_make_method_type_isra_0(*type,local_40[0],local_48,local_49);\n        *type = type_ptr;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      result_var = stab_demangle_qualified(function_table,name,type);\n      return result_var;\n    case 0x52:\n      *name = pnext_byte0 + 1;\n      result = reverse_and_improve_demangled_type_0010c95e(function_table,name,type);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (type == (long *)0x0) {\n        return 1;\n      }\n      type_ptr = debug_make_reference_type_isra_0(*type);\n      *type = type_ptr;\n      return 1;\n    case 0x54:\n      *name = pnext_byte0 + 1;\n      result = stab_demangle_get_count(name,&local_48);\n      if (result != '\\0') {\n        if ((uint)local_48 < *(uint *)(function_table + 5)) {\n          local_40[0] = *(char **)((local_48 & 0xffffffff) * 0x10 + function_table[4]);\n          result = reverse_and_improve_demangled_type_0010c95e(function_table,local_40,type);\n          if (result == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (current_byte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *name = pnext_byte0 + 1;\n    result = reverse_and_improve_demangled_type_0010c95e(function_table,name,type);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (type == (long *)0x0) {\n      return 1;\n    }\n    type_ptr = debug_make_pointer_type_isra_0(*type);\n    *type = type_ptr;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  is_volatile = false;\n  is_signed = false;\n  result = '\\0';\n  is_const = false;\n  do {\n    current_name = *name;\n    current_byte = *current_name;\n    if (current_byte == 0x55) {\n      result = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)current_byte) {\n      if (current_byte == 0x56) {\n        is_volatile = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)current_byte) goto switchD_0010cdf9_caseD_60;\n      if ((char)current_byte < '_') goto LAB_0010cdfb;\n      switch(current_byte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (type == (long *)0x0) {\nLAB_0010d0aa:\n          *name = current_name + 1;\n          return 1;\n        }\n        type_ptr = debug_find_named_type(*function_table,&DAT_00120436);\n        *type = type_ptr;\n        if (type_ptr == 0) {\n          type_ptr = debug_make_type_constprop_0(6,4);\n          *type = type_ptr;\n          *name = *name + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (type == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned char\";\n        if ((result == '\\0') && (pcVar19 = \"char\", is_signed)) {\n          pcVar19 = \"signed char\";\n        }\n        type_ptr = debug_find_named_type(*function_table,pcVar19);\n        *type = type_ptr;\n        if (type_ptr == 0) {\n          type_ptr = debug_make_int_type_isra_0(1,result);\n          *type = type_ptr;\n          *name = *name + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (type == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (type == (long *)0x0) goto LAB_0010d0aa;\n        type_ptr = debug_find_named_type(*function_table,\"float\");\n        *type = type_ptr;\n        if (type_ptr == 0) {\n          type_ptr = debug_make_float_type_isra_0(4);\n          *type = type_ptr;\n          *name = *name + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (type == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned int\";\n        type_name = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (type == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long unsigned int\";\n        type_name = \"long int\";\nLAB_0010ced2:\n        if (result == '\\0') {\n          pcVar19 = type_name;\n        }\n        type_ptr = debug_find_named_type(*function_table,pcVar19);\n        *type = type_ptr;\n        if (type_ptr == 0) {\n          type_ptr = debug_make_int_type_isra_0(4,result);\n          *type = type_ptr;\n          *name = *name + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        pcVar19 = \"long double\";\n        if (type == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        type_ptr = debug_find_named_type(*function_table,pcVar19);\n        *type = type_ptr;\n        if (type_ptr == 0) {\n          type_ptr = debug_make_float_type_isra_0(8);\n          *type = type_ptr;\n          *name = *name + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (type == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"short unsigned int\";\n        if (result == '\\0') {\n          pcVar19 = \"short int\";\n        }\n        type_ptr = debug_find_named_type(*function_table,pcVar19);\n        *type = type_ptr;\n        if (type_ptr == 0) {\n          type_ptr = debug_make_int_type_isra_0(2,result);\n          *type = type_ptr;\n          *name = *name + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        ppcVar18 = local_40;\n        if (type == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        result = stab_demangle_template(function_table,name,ppcVar18);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (type == (long *)0x0) {\n          return 1;\n        }\n        name_length = strlen(local_40[0]);\n        type_ptr = stab_find_tagged_type(*function_table,function_table[1],local_40[0],name_length & 0xffffffff,9);\n        *type = type_ptr;\n        free(local_40[0]);\n        type_ptr = *type;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (type == (long *)0x0) goto LAB_0010d0aa;\n        type_ptr = debug_find_named_type(*function_table,&DAT_00120495);\n        *type = type_ptr;\n        if (type_ptr == 0) {\n          type_ptr = debug_make_void_type_isra_0();\n          *type = type_ptr;\n          *name = *name + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (type == (long *)0x0) goto LAB_0010d0aa;\n        type_ptr = debug_find_named_type(*function_table,\"__wchar_t\");\n        *type = type_ptr;\n        if (type_ptr == 0) {\n          type_ptr = debug_make_int_type_isra_0(2,1);\n          *type = type_ptr;\n          *name = *name + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (type == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long long unsigned int\";\n        if (result == '\\0') {\n          pcVar19 = \"long long int\";\n        }\n        type_ptr = debug_find_named_type(*function_table,pcVar19);\n        *type = type_ptr;\n        if (type_ptr == 0) {\n          type_ptr = debug_make_int_type_isra_0(8,result);\n          *type = type_ptr;\n        }\n      }\n      *name = *name + 1;\n      goto LAB_0010d1de;\n    }\n    if (current_byte == 0x43) {\n      is_const = true;\n      goto LAB_0010cd84;\n    }\n    if (current_byte != 0x53) goto LAB_0010cdc5;\n    is_signed = true;\nLAB_0010cd84:\n    *name = current_name + 1;\n  } while( true );\nLAB_0010ca26:\n  next_name = current_name + 1;\n  *name = next_name;\n  current_byte = *next_name;\n  if (current_byte == 0) goto switchD_0010cdf9_caseD_60;\n  if (current_byte == 0x5f) {\n    *name = current_name + 2;\n    result = reverse_and_improve_demangled_type_0010c95e(function_table,name,type);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (type == (long *)0x0) {\n      return 1;\n    }\n    type_ptr = debug_find_named_type(*function_table,\"int\");\n    if (type_ptr == 0) {\n      type_ptr = debug_make_int_type_isra_0(4,0);\n    }\n    type_ptr = debug_make_array_type_isra_0(*type,type_ptr,0,type_ptr,0);\n    *type = type_ptr;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  type_ptr = type_ptr * 10 + (long)((char)current_byte + -0x30);\n  current_name = next_name;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)current_byte < ':') {\n    if ((char)current_byte < '0') {\n      if (current_byte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      stab_bad_demangle(pnext_byte0);\n      if (type == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((current_byte != 0x47) || (*name = current_name + 1, ((&_sch_istable)[(ulong)current_name[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnext_byte0 = *name;\n  count = stab_demangle_count(name);\n  current_name = *name;\n  name_length = strlen((char *)current_name);\n  parsed_count = (ulong)count;\n  if (parsed_count <= name_length) {\n    *name = current_name + parsed_count;\n    if (type == (long *)0x0) {\n      return 1;\n    }\n    string_ptr = (void *)savestring(current_name,parsed_count);\n    type_ptr = debug_find_named_type(*function_table,string_ptr);\n    *type = type_ptr;\n    free(string_ptr);\n    if (*type == 0) {\n      type_ptr = stab_find_tagged_type(*function_table,function_table[1],current_name,(int)*name - (int)current_name,0);\n      *type = type_ptr;\njoined_r0x0010d1d8:\n      if (type_ptr == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_const) {\n      type_ptr = debug_make_const_type_isra_0(*type);\n      *type = type_ptr;\n    }\n    if (is_volatile) {\n      type_ptr = debug_make_volatile_type_isra_0(*type);\n      *type = type_ptr;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  stab_bad_demangle(pnext_byte0);\n  return 0;\n}\n\n",
            "called": [
                "debug_find_named_type",
                "debug_make_void_type.isra.0",
                "stab_demangle_get_count",
                "debug_make_method_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "savestring",
                "strlen",
                "stab_demangle_args",
                "debug_make_reference_type.isra.0",
                "stab_demangle_type.lto_priv.0",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "stab_demangle_count",
                "stab_bad_demangle",
                "debug_make_type.constprop.0",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "stab_find_tagged_type",
                "stab_demangle_qualified",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "free",
                "debug_make_float_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_template",
                "stab_demangle_arg"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_demangled_type_0010c95e"
        },
        "FUN_00104130": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00114dc7",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104130"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_input_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = improve_code_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_section_size",
                "find_section_list",
                "bfd_get_arch",
                "bfd_get_full_section_contents",
                "copy_object.cold",
                "fwrite",
                "non_fatal",
                "fopen",
                "bfd_set_format",
                "check_new_section_flags",
                "free",
                "setup_section",
                "strerror",
                "merge_gnu_build_notes",
                "dcgettext",
                "bfd_get_section_by_name",
                "bfd_malloc_and_get_section",
                "xmalloc",
                "bfd_create_gnu_debuglink_section",
                "FUN_00105828",
                "__errno_location",
                "bfd_nonfatal_message",
                "startswith.lto_priv.0.lto_priv.0",
                "bfd_map_over_sections",
                "fclose",
                "FUN_0010554f",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "resultCode",
                "piVar2": "errorCodePtr",
                "pcVar3": "errorMessage",
                "uVar4": "localizedErrorMessage",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int resultCode;\n  int *errorCodePtr;\n  char *errorMessage;\n  undefined8 localizedErrorMessage;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  timeSpec1 = *(undefined4 *)(fileInfo + 0x48);\n  timeSpec2 = *(undefined4 *)(fileInfo + 0x4c);\n  timeSpec3 = *(undefined4 *)(fileInfo + 0x50);\n  timeSpec4 = *(undefined4 *)(fileInfo + 0x54);\n  resultCode = utimensat(-100,filePath,(timespec *)&timeSpec1,0);\n  if (resultCode != 0) {\n    errorCodePtr = __errno_location();\n    errorMessage = strerror(*errorCodePtr);\n    localizedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(localizedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_00128448": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128448",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00128448"
        },
        "FUN_00128328": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128328",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00128328"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorDescription",
                "iVar1": "errorCode",
                "uVar2": "errorMessage",
                "in_R10": "extraInfo",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorDescription)\n\n{\n  int errorCode;\n  undefined8 errorMessage;\n  undefined8 extraInfo;\n  \n  errorCode = bfd_get_error();\n  if (errorCode == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorCode);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",programName,errorDescription,errorMessage,extraInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",programName,errorMessage,extraInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00104ea2",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "do_display_target.cold",
                "do_display_target",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "paramArray",
                "param_2": "paramFlag",
                "param_3": "paramInt",
                "param_4": "paramStr",
                "param_5": "paramCharPtr",
                "lVar1": "tempLong1",
                "uVar2": "tempUint1",
                "lVar3": "tempLong2",
                "uVar4": "tempUint2",
                "uVar5": "tempUint3",
                "sVar6": "strLen",
                "lVar7": "finalLong",
                "local_44": "localVar1",
                "uStack_40": "stackVar1",
                "uStack_3f": "stackVar2",
                "uStack_3e": "stackVar3",
                "local_3c": "localVar2"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *paramArray,undefined paramFlag,int paramInt,undefined8 paramStr,char *paramCharPtr)\n\n{\n  long tempLong1;\n  undefined4 tempUint1;\n  long tempLong2;\n  undefined8 tempUint2;\n  undefined8 tempUint3;\n  size_t strLen;\n  long finalLong;\n  undefined4 localVar1;\n  undefined stackVar1;\n  undefined stackVar2;\n  undefined2 stackVar3;\n  undefined4 localVar2 [3];\n  \n  if (paramCharPtr == (char *)0x0) {\n    finalLong = 0;\n  }\n  else {\n    tempLong2 = bfd_hash_lookup(paramArray + 7,paramCharPtr,1,1);\n    if (tempLong2 == 0) {\n      tempUint1 = bfd_get_error();\n      tempUint2 = bfd_errmsg(tempUint1);\n      tempUint3 = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      non_fatal(tempUint3,tempUint2);\n      return 0;\n    }\n    finalLong = *(long *)(tempLong2 + 0x20);\n    if (finalLong == -1) {\n      finalLong = paramArray[6];\n      tempLong1 = paramArray[5];\n      *(long *)(tempLong2 + 0x20) = finalLong;\n      if (tempLong1 == 0) {\n        paramArray[4] = tempLong2;\n      }\n      else {\n        *(long *)(tempLong1 + 0x18) = tempLong2;\n      }\n      paramArray[5] = tempLong2;\n      strLen = strlen(paramCharPtr);\n      paramArray[6] = finalLong + 1 + strLen;\n    }\n  }\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(finalLong,&localVar1);\n  stackVar2 = 0;\n  stackVar1 = paramFlag;\n  (**(code **)(*(long *)(*paramArray + 8) + 0x68))((long)paramInt,&stackVar3);\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(paramStr,localVar2);\n  if ((ulong)paramArray[3] < paramArray[2] + 0xcU) {\n    paramArray[3] = paramArray[3] * 2;\n    finalLong = xrealloc(paramArray[1]);\n    paramArray[1] = finalLong;\n  }\n  finalLong = paramArray[2];\n  tempLong2 = paramArray[1];\n  *(ulong *)(tempLong2 + finalLong) = CONCAT26(stackVar3,CONCAT15(stackVar2,CONCAT14(stackVar1,localVar1)));\n  *(undefined4 *)(tempLong2 + 8 + finalLong) = localVar2[0];\n  paramArray[2] = paramArray[2] + 0xc;\n  return CONCAT71((int7)((ulong)finalLong >> 8),1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "non_fatal",
                "bfd_errmsg",
                "strlen",
                "dcgettext",
                "bfd_hash_lookup",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_start_source.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_lineno.lto_priv.0",
                "stab_start_block.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_end_block.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_variable.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "inputString",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result",
                "uVar2": "errMsg",
                "pcVar3": "commaPtr",
                "pcVar4": "nextString",
                "sVar5": "stringLen",
                "iVar6": "lenStr",
                "uVar7": "flags",
                "auVar8": "retValue"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *inputString,undefined8 arg2,undefined8 arg3,undefined8 arg4)\n\n{\n  int result;\n  undefined8 errMsg;\n  char *commaPtr;\n  char *nextString;\n  size_t stringLen;\n  int lenStr;\n  uint flags;\n  undefined retValue [16];\n  \n  flags = 0;\n  do {\n    commaPtr = strchr(inputString,0x2c);\n    if (commaPtr == (char *)0x0) {\n      stringLen = strlen(inputString);\n      lenStr = (int)stringLen;\n      nextString = (char *)0x0;\n    }\n    else {\n      nextString = commaPtr + 1;\n      lenStr = (int)commaPtr - (int)inputString;\n    }\n    stringLen = (size_t)lenStr;\n    result = strncasecmp(\"alloc\",inputString,stringLen);\n    if (result == 0) {\n      flags = flags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",inputString,stringLen);\n      if (result == 0) {\n        flags = flags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",inputString,stringLen);\n        if (result == 0) {\n          flags = flags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",inputString,stringLen);\n          if (result == 0) {\n            flags = flags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",inputString,stringLen);\n            if (result == 0) {\n              flags = flags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",inputString,stringLen);\n              if (result == 0) {\n                flags = flags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",inputString,stringLen);\n                if (result == 0) {\n                  flags = flags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",inputString,stringLen);\n                  if (result == 0) {\n                    flags = flags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",inputString,stringLen);\n                    if (result == 0) {\n                      flags = flags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",inputString,stringLen);\n                      if (result == 0) {\n                        flags = flags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",inputString,stringLen);\n                        if (result == 0) {\n                          flags = flags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",inputString,stringLen);\n                          if (result == 0) {\n                            flags = flags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",inputString,stringLen);\n                            if (result != 0) {\n                              commaPtr = (char *)xmalloc((long)(lenStr + 1));\n                              strncpy(commaPtr,inputString,stringLen);\n                              commaPtr[stringLen] = '\\0';\n                              errMsg = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal(errMsg,commaPtr);\n                              errMsg = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              fatal(errMsg,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            flags = flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    inputString = nextString;\n  } while (nextString != (char *)0x0);\n  retValue._4_4_ = 0;\n  retValue._0_4_ = flags;\n  retValue._8_8_ = arg4;\n  return retValue;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "generate_formatted_string_001125fa",
                "param_1": "arguments",
                "ppcVar2": "archiveFilename",
                "sVar3": "lenArchiveFilename",
                "sVar4": "lenString",
                "__s": "formattedStringOutput",
                "uVar1": "formattedStringSize",
                "curr_1": "currentBufferSize",
                "buf_0": "formattedStringBuffer"
            },
            "code": "\nchar * generateFormattedString_001125fa(char **arguments)\n\n{\n  ulong formattedStringSize;\n  char **archiveFilename;\n  size_t lenArchiveFilename;\n  size_t lenString;\n  char *formattedStringOutput;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archiveFilename = (char **)arguments[0x1d];\n  formattedStringOutput = *arguments;\n  if ((archiveFilename != (char **)0x0) && ((*(byte *)((long)archiveFilename + 0x49) & 0x10) == 0)) {\n    lenArchiveFilename = strlen(*archiveFilename);\n    lenString = strlen(formattedStringOutput);\n    formattedStringSize = lenArchiveFilename + 3 + lenString;\n    if (currentBufferSize < formattedStringSize) {\n      if (currentBufferSize != 0) {\n        free(formattedStringBuffer);\n      }\n      currentBufferSize = (formattedStringSize >> 1) + formattedStringSize;\n      formattedStringBuffer = (char *)xmalloc();\n    }\n    sprintf(formattedStringBuffer,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    formattedStringOutput = formattedStringBuffer;\n  }\n  return formattedStringOutput;\n}\n\n",
            "called": [
                "strlen",
                "__assert_fail",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_001152b6",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "copy_object",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_001125fa"
        },
        "FUN_00104380": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104380"
        },
        "FUN_00104260": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104260"
        },
        "FUN_001048c0": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "stab_demangle_template",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001048c0"
        },
        "FUN_001047a0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "bfd_nonfatal_message",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001047a0"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "initialize_00108f05"
            },
            "code": "\nundefined initialize_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_00108f05"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "free_memory_00108863",
                "puVar1": "stabsPtr",
                "puVar2": "nextPtr",
                "saved_stabs": "stabs",
                "saved_stabs_index": "stabsIndex"
            },
            "code": "\nvoid freeMemory_00108863(void)\n\n{\n  undefined4 *stabsPtr;\n  undefined4 *nextPtr;\n  \n  stabsPtr = (undefined4 *)stabs;\n  do {\n    nextPtr = stabsPtr + 6;\n    free(*(void **)(stabsPtr + 4));\n    *(undefined8 *)(stabsPtr + 4) = 0;\n    stabsPtr = nextPtr;\n  } while (nextPtr != &stabsIndex);\n  stabsIndex = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "free_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_function_00104020"
            },
            "code": "\nvoid execute_function_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00104020"
        },
        "FUN_00128450": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128450",
            "calling": [
                "fwrite",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00128450"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "check_and_update_source_files_00108f08",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "filenameComparisonResult",
                "uVar2": "result",
                "puVar3": "currentNode",
                "puVar4": "nextNode",
                "lVar5": "loopCounter",
                "puVar6": "startNode",
                "pcVar7": "filename",
                "puVar8": "previousNode",
                "bVar9": "byteValue"
            },
            "code": "\n\n\nundefined8 checkAndUpdateSourceFiles_00108f08(long param1,char *param2)\n\n{\n  int filenameComparisonResult;\n  undefined8 result;\n  undefined8 *currentNode;\n  undefined8 *nextNode;\n  long loopCounter;\n  undefined8 *startNode;\n  char *filename;\n  undefined8 *previousNode;\n  byte byteValue;\n  \n  byteValue = 0;\n  filename = \"\";\n  if (param2 != (char *)0x0) {\n    filename = param2;\n  }\n  if (*(long *)(param1 + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (currentNode = *(undefined8 **)(*(long *)(param1 + 8) + 8); currentNode != (undefined8 *)0x0;\n        currentNode = (undefined8 *)*currentNode) {\n      filenameComparisonResult = filename_cmp(currentNode[1],filename);\n      if (filenameComparisonResult == 0) goto LAB_00108fad;\n    }\n    currentNode = (undefined8 *)xmalloc(0x18);\n    startNode = *(undefined8 **)(param1 + 0x10);\n    previousNode = currentNode;\n    for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)previousNode = 0;\n      previousNode = (undefined8 *)((long)previousNode + (ulong)byteValue * -8 + 4);\n    }\n    currentNode[1] = filename;\n    previousNode = (undefined8 *)*startNode;\n    while (nextNode = previousNode, nextNode != (undefined8 *)0x0) {\n      startNode = nextNode;\n      previousNode = (undefined8 *)*nextNode;\n    }\n    *startNode = currentNode;\nLAB_00108fad:\n    *(undefined8 **)(param1 + 0x10) = currentNode;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "filename_cmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "check_and_update_source_files_00108f08"
        },
        "FUN_00104140": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_00116852",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104140"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "copy_file.cold"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "FUN_00128210": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strspn@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128210",
            "calling": [
                "strspn"
            ],
            "imported": false,
            "current_name": "FUN_00128210"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "parse_and_modify_sections_00114190",
                "param_1": "input_string",
                "param_2": "is_exact_match",
                "param_3": "flags",
                "uVar1": "flags_mask",
                "plVar2": "current_section",
                "pplVar3": "matching_section",
                "iVar4": "comparison_result",
                "uVar5": "error_message",
                "pplVar6": "current_change_section",
                "pplVar7": "previous_change_section",
                "pplVar8": "next_change_section"
            },
            "code": "\nlong ** parse_and_modify_sections_00114190(long *input_string,char is_exact_match,uint flags)\n\n{\n  uint flags_mask;\n  long *current_section;\n  long **matching_section;\n  int comparison_result;\n  undefined8 error_message;\n  long **current_change_section;\n  long **previous_change_section;\n  long **next_change_section;\n  \n  previous_change_section = change_sections;\n  if (change_sections == (long **)0x0) {\n    if (is_exact_match == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (is_exact_match == '\\0') {\n    if ((flags & *(uint *)((long)change_sections + 0x14)) == 0) {\nLAB_001141e5:\n      current_change_section = (long **)*previous_change_section;\n      if (current_change_section == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_change_section = (long **)0x0;\n    }\n    else {\n      current_section = change_sections[1];\n      if (*(char *)current_section == '!') {\n        comparison_result = fnmatch((char *)((long)current_section + 1),(char *)input_string,0);\n        current_change_section = previous_change_section;\n        if (comparison_result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparison_result = fnmatch((char *)current_section,(char *)input_string,0);\n      if (comparison_result != 0) goto LAB_001141e5;\n      current_change_section = (long **)*previous_change_section;\n      if (current_change_section == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)current_change_section + 0x14)) != 0) {\n      current_section = current_change_section[1];\n      if (*(char *)current_section == '!') {\n        comparison_result = fnmatch((char *)((long)current_section + 1),(char *)input_string,0);\n        if (comparison_result == 0) {\nLAB_0011438e:\n          *(undefined *)(current_change_section + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparison_result = fnmatch((char *)current_section,(char *)input_string,0);\n        if ((previous_change_section == (long **)0x0) && (comparison_result == 0)) {\n          next_change_section = (long **)*current_change_section;\n          previous_change_section = current_change_section;\n          if (next_change_section == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_change_section = (long **)*current_change_section;\n    current_change_section = previous_change_section;\n    if (next_change_section != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparison_result = strcmp((char *)change_sections[1],(char *)input_string);\n    if (comparison_result == 0) {\nLAB_001143cd:\n      flags_mask = *(uint *)((long)previous_change_section + 0x14);\n      if ((((flags_mask & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((flags_mask & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        fatal(error_message,input_string);\n      }\n      if ((((flags_mask & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        fatal(error_message,input_string);\n      }\n      if ((((flags_mask & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_change_section + 0x14) = flags_mask | flags;\n        return previous_change_section;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      fatal(error_message,input_string);\n    }\n    previous_change_section = (long **)*previous_change_section;\n    if (previous_change_section == (long **)0x0) goto LAB_001142a9;\n    comparison_result = strcmp((char *)previous_change_section[1],(char *)input_string);\n    if (comparison_result == 0) goto LAB_001143cd;\n    next_change_section = (long **)*previous_change_section;\n    current_change_section = (long **)0x0;\n    if (next_change_section == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous_change_section = current_change_section;\n      if (is_exact_match == '\\0') {\n        while (current_change_section = next_change_section, matching_section = previous_change_section, next_change_section = current_change_section,\n              (flags & *(uint *)((long)current_change_section + 0x14)) != 0) {\n          current_section = current_change_section[1];\n          if (*(char *)current_section == '!') {\n            comparison_result = fnmatch((char *)((long)current_section + 1),(char *)input_string,0);\n            if (comparison_result == 0) goto LAB_0011438e;\n            next_change_section = (long **)*current_change_section;\n            if ((long **)*current_change_section == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparison_result = fnmatch((char *)current_section,(char *)input_string,0);\n            if ((previous_change_section == (long **)0x0) && (comparison_result == 0)) {\n              previous_change_section = current_change_section;\n              next_change_section = (long **)*current_change_section;\n              if ((long **)*current_change_section == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_change_section = (long **)*current_change_section;\n              if ((long **)*current_change_section == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparison_result = strcmp((char *)next_change_section[1],(char *)input_string);\n        matching_section = current_change_section;\n        previous_change_section = next_change_section;\n        if (comparison_result == 0) goto LAB_001143cd;\n      }\n      current_change_section = matching_section;\n      next_change_section = (long **)*next_change_section;\n      previous_change_section = current_change_section;\n    } while (next_change_section != (long **)0x0);\nLAB_001142a1:\n    if (is_exact_match != '\\0') {\nLAB_001142a9:\n      current_change_section = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_change_section + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_change_section + 2) = 0;\n      *(uint *)((long)current_change_section + 0x14) = flags;\n      current_change_section[5] = (long *)0x0;\n      previous_change_section = current_change_section;\n      *current_change_section = (long *)change_sections;\n      change_sections = previous_change_section;\n      current_change_section[1] = input_string;\n      return current_change_section;\n    }\n  }\nLAB_00114212:\n  if (previous_change_section == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous_change_section + 2) = 1;\n  return previous_change_section;\n}\n\n",
            "called": [
                "find_section_list.cold",
                "dcgettext",
                "fatal",
                "fnmatch",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "copy_section",
                "handle_remove_section_option",
                "setup_section.cold",
                "FUN_00107880",
                "main",
                "copy_relocations_in_section",
                "is_strip_section_1.isra.0",
                "setup_section"
            ],
            "imported": false,
            "current_name": "parse_and_modify_sections_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "extract_gnu_build_attribute_notes_00116490",
                "param_2": "note_offset",
                "param_3": "note_data",
                "param_4": "note_size",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "isCorrupt",
                "puVar5": "note_pointer",
                "iVar6": "cmp_result",
                "lVar7": "errorCode",
                "uVar8": "translation",
                "in_RAX": "note_value",
                "uVar9": "note_size_calculation",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr": "allocated_mem",
                "uVar13": "var13",
                "unaff_RBX": "total_note_size",
                "unaff_RBP": "current_note_size",
                "puVar14": "note_array_pointer",
                "puVar15": "var15",
                "cVar16": "note_version",
                "puVar17": "var17",
                "puVar18": "var18",
                "in_R11": "name_offset",
                "unaff_R12": "current_note",
                "puVar19": "first_note",
                "__nmemb": "note_count",
                "unaff_R14": "dep_func_ptr",
                "puVar20": "cmp_note_pointer",
                "bVar21": "var21",
                "code_r0x00116490": "extractNotesLoop",
                "unaff_retaddr": "return_address",
                "in_stack_00000020": "output_size",
                "in_stack_00000028": "input_data",
                "in_stack_00000030": "output_data",
                "in_stack_00000038": "condition_1",
                "in_stack_00000040": "condition_2",
                "in_stack_00000048": "callback_func"
            },
            "code": "\nulong extractGNUBuildAttributeNotes_00116490(undefined8 param_1,ulong note_offset,ulong note_data,long note_size)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool isCorrupt;\n  ulong *note_pointer;\n  int cmp_result;\n  long errorCode;\n  undefined8 translation;\n  ulong note_value;\n  ulong note_size_calculation;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *allocated_mem;\n  ulong var13;\n  ulong total_note_size;\n  ulong current_note_size;\n  ulong *note_array_pointer;\n  undefined *var15;\n  char note_version;\n  undefined *var17;\n  undefined *var18;\n  ulong name_offset;\n  ulong *current_note;\n  ulong *first_note;\n  ulong unaff_R13;\n  size_t note_count;\n  undefined8 *dep_func_ptr;\n  ulong *cmp_note_pointer;\n  byte var21;\n  int iVar22;\n  ulong return_address;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong output_size;\n  ulong *input_data;\n  undefined *output_data;\n  uint condition_1;\n  uint condition_2;\n  undefined8 *callback_func;\n  \n  var21 = 0;\nextractNotesLoop:\n  errorCode = note_size;\n  var10 = current_note_size;\n  var13 = unaff_R13;\n  if (note_value == 0) {\n    if (note_offset == 0x100) {\n      current_note[7] = return_address;\n      var11 = return_address;\nLAB_001164af:\n      note_size_calculation = unaff_R13;\n      var13 = unaff_R13;\n      return_address = var11;\n    }\n    else {\n      current_note[7] = param_9;\nLAB_0011669e:\n      var10 = current_note_size;\n      note_size_calculation = current_note_size;\n    }\nLAB_001164bb:\n    current_note[8] = note_size_calculation;\n    if (*(char *)((current_note[3] - 1) + note_data) != '\\0') {\n      errorCode = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    first_note = current_note + 9;\n    if (0xb < total_note_size) {\n      note_size_calculation = (**(code **)(dep_func_ptr[1] + 0x40))(errorCode);\n      *first_note = note_size_calculation;\n      note_size_calculation = (**(code **)(dep_func_ptr[1] + 0x40))(errorCode + 4);\n      current_note[10] = note_size_calculation;\n      note_offset = (**(code **)(dep_func_ptr[1] + 0x40))(errorCode + 8);\n      note_data = *first_note;\n      current_note[0xb] = note_offset;\n      note_value = current_note[10];\n      note_size_calculation = note_data + 3 & 0xfffffffffffffffc;\n      current_note[0xf] = note_size_calculation;\n      if (note_value != (note_value + 3 & 0xfffffffffffffffc)) {\n        errorCode = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < note_offset - 0x100) {\n        errorCode = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = note_size_calculation + note_value + 0xc;\n      if (total_note_size < var11) {\n        errorCode = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (note_data < 2) {\n        errorCode = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      current_note[0xc] = errorCode + 0xc;\n      name_offset = errorCode + 0xc + note_size_calculation;\n      current_note[0xd] = name_offset;\n      total_note_size = total_note_size + (-0xc - (note_size_calculation + note_value));\n      note_size = errorCode + var11;\n      current_note_size = var10;\n      current_note = first_note;\n      unaff_R13 = var13;\n      if (note_data != 2) {\n        if (*(char *)(errorCode + 0xc) == '$') {\n          if ((*(char *)(errorCode + 0xd) == '\\x01') && (*(char *)(errorCode + 0xe) == '1')) {\n            var10 = extractGNUBuildAttributeNotes_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < note_data) && (*(char *)(errorCode + 0xc) == 'G')) &&\n                 (*(char *)(errorCode + 0xd) == 'A')) &&\n                ((*(char *)(errorCode + 0xe) == '$' && (*(char *)(errorCode + 0xf) == '\\x01')))) {\n          if (*(char *)(errorCode + 0x10) == '2') {\n            var10 = extractGNUBuildAttributeNotes_00116490();\n            return var10;\n          }\n          if (*(char *)(errorCode + 0x10) == '3') {\n            var10 = extractGNUBuildAttributeNotes_00116490();\n            return var10;\n          }\n          errorCode = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto extractNotesLoop;\n    }\n    if (total_note_size != 0) {\n      errorCode = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((condition_1 | condition_2 | param_8) == 0) {\n      var1 = *dep_func_ptr;\n      var2 = *callback_func;\n      translation = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(translation,var1,var2);\nLAB_0011671b:\n      note_count = ((long)first_note - (long)input_data >> 3) * -0x71c71c71c71c71c7;\n      qsort(input_data,note_count,0x48,compare_gnu_build_notes);\n      for (note_array_pointer = input_data; note_array_pointer < first_note; note_array_pointer = note_array_pointer + 9) {\n        var10 = note_array_pointer[2];\n        if (var10 != 0) {\n          var13 = note_array_pointer[7];\n          note_size_calculation = note_array_pointer[8];\n          cmp_note_pointer = note_array_pointer;\n          iVar22 = 0;\n          if (var13 == note_size_calculation) {\n            note_array_pointer[2] = 0;\n          }\n          else {\n            do {\n              do {\n                note_pointer = cmp_note_pointer;\n                cmp_note_pointer = note_pointer + -9;\n                if (cmp_note_pointer < input_data) goto LAB_001167f5;\n                var11 = note_pointer[-7];\n              } while (var11 == 0);\n              if ((*cmp_note_pointer != *note_array_pointer) ||\n                 (cmp_result = memcmp((void *)note_pointer[-6],(void *)note_array_pointer[3],*note_array_pointer), cmp_result != 0))\n              break;\n              var3 = note_pointer[-2];\n              var12 = note_pointer[-1];\n              if (var13 == var3) {\n                if (note_size_calculation == var12) {\n                  note_array_pointer[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (note_size_calculation <= var12) {\n                  note_array_pointer[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto extract_notes_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= note_size_calculation) {\n                    var12 = note_size_calculation;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  note_pointer[-1] = var12;\n                  note_pointer[-2] = var13;\n                  note_array_pointer[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (note_size_calculation < var13) {\n                  if ((0xfffffffffffffff0 < note_size_calculation) || (var3 <= (note_size_calculation + 0xf & 0xfffffffffffffff0)))\n                  goto extract_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (note_size_calculation != var12) goto LAB_001167b8;\n              }\nextract_notes_00116852:\n              isCorrupt = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (isCorrupt);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(input_data,note_count,0x48,sort_gnu_build_notes);\n      allocated_mem = (undefined *)xmalloc(output_size * 2);\n      param_7 = 0;\n      param_9 = 0;\n      var18 = allocated_mem;\n      for (note_array_pointer = input_data; note_array_pointer < first_note; note_array_pointer = note_array_pointer + 9) {\n        if (note_array_pointer[2] != 0) {\n          var17 = var18 + 4;\n          var15 = var18 + 0xc;\n          if ((note_array_pointer[7] == param_9) && (note_array_pointer[8] == param_7)) {\n            (**(code **)(dep_func_ptr[1] + 0x50))(*note_array_pointer,var18);\n            (**(code **)(dep_func_ptr[1] + 0x50))(0,var17);\n            (**(code **)(dep_func_ptr[1] + 0x50))(note_array_pointer[2],var18 + 8);\n            var13 = note_array_pointer[6];\n            var10 = *note_array_pointer;\n            var18 = (undefined *)note_array_pointer[3];\n            var17 = var15;\n            for (note_size_calculation = var10; note_size_calculation != 0; note_size_calculation = note_size_calculation - 1) {\n              *var17 = *var18;\n              var18 = var18 + (ulong)var21 * -2 + 1;\n              var17 = var17 + (ulong)var21 * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (errorCode = var13 - var10; errorCode != 0; errorCode = errorCode + -1) {\n                *var17 = 0;\n                var17 = var17 + (ulong)var21 * -2 + 1;\n              }\n            }\n            var18 = var15 + var13;\n          }\n          else {\n            (**(code **)(dep_func_ptr[1] + 0x50))();\n            if (*(int *)(dep_func_ptr[1] + 8) == 5) {\n              note_version = (*(char *)(dep_func_ptr[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              note_version = '\\b';\n            }\n            (**(code **)(dep_func_ptr[1] + 0x50))(note_version,var17);\n            (**(code **)(dep_func_ptr[1] + 0x50))(note_array_pointer[2],var18 + 8);\n            var10 = *note_array_pointer;\n            var18 = (undefined *)note_array_pointer[3];\n            var17 = var15;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *var17 = *var18;\n              var18 = var18 + (ulong)var21 * -2 + 1;\n              var17 = var17 + (ulong)var21 * -2 + 1;\n            }\n            var13 = note_array_pointer[6];\n            if (var10 < var13) {\n              for (errorCode = var13 - var10; errorCode != 0; errorCode = errorCode + -1) {\n                *var17 = 0;\n                var17 = var17 + (ulong)var21 * -2 + 1;\n              }\n            }\n            errorCode = dep_func_ptr[1];\n            var15 = var15 + var13;\n            var18 = var15 + 8;\n            if ((*(int *)(errorCode + 8) == 5) && (*(char *)(dep_func_ptr[0x22] + 4) == '\\x02')) {\n              (**(code **)(errorCode + 0x38))(note_array_pointer[7],var15);\n              (**(code **)(dep_func_ptr[1] + 0x38))(note_array_pointer[8],var18);\n              var18 = var15 + 0x10;\n            }\n            else {\n              (**(code **)(errorCode + 0x50))(note_array_pointer[7],var15);\n              (**(code **)(dep_func_ptr[1] + 0x50))(note_array_pointer[8],var15 + 4);\n            }\n            param_9 = note_array_pointer[7];\n            param_7 = note_array_pointer[8];\n          }\n        }\n      }\n      var13 = (long)var18 - (long)allocated_mem;\n      var10 = var13;\n      var18 = allocated_mem;\n      if (var13 < output_size) {\n        for (; output_size = var13, var10 != 0; var10 = var10 - 1) {\n          *output_data = *var18;\n          var18 = var18 + (ulong)var21 * -2 + 1;\n          output_data = output_data + (ulong)var21 * -2 + 1;\n        }\n      }\n      free(allocated_mem);\nLAB_001166f8:\n      free(input_data);\n      return output_size;\n    }\n    if (((condition_2 | param_8) == 0) || (condition_1 == 0)) {\n      if (condition_2 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    errorCode = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_value == 0x10) {\n      var11 = (**(code **)(dep_func_ptr[1] + 0x28))(name_offset);\n      note_size_calculation = (**(code **)(dep_func_ptr[1] + 0x28))(current_note[4] + 8);\n      if (note_size_calculation < var11) {\n        var11 = note_size_calculation;\n      }\nLAB_00116631:\n      if (current_note[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = return_address;\n        }\n        note_data = *current_note;\n        current_note[7] = var11;\n        var13 = note_size_calculation;\n        return_address = var11;\n        if (note_size_calculation == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param_9;\n        }\n        note_data = *current_note;\n        current_note[7] = var11;\n        var10 = note_size_calculation;\n        param_9 = var11;\n        if (note_size_calculation == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_value < 0x11) {\n      if (note_value == 4) {\n        var11 = (**(code **)(dep_func_ptr[1] + 0x40))(name_offset);\n        note_size_calculation = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_value == 8) {\n        var10 = FUNC_001086af();\n        return var10;\n      }\n    }\n    errorCode = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (errorCode != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,dep_func_ptr,callback_func,errorCode);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "merge_gnu_build_notes.cold"
            ],
            "imported": false,
            "current_name": "extract_gnu_build_attribute_notes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto extract_notes_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto extract_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nextract_notes_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "FUN_00128118": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128118",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00128118"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *ptr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    currentTarget = *ptr;\n    ptr = ptr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "bfd_target_list",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "copy_usage",
                "strip_usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_001048d0": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001048d0"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "validate_debug_function_0010be1a",
                "param_1": "function_ptr",
                "param_2": "new_param",
                "param_3": "debug_string",
                "param_4": "result",
                "lVar1": "current_block",
                "uVar2": "translated_string",
                "pcVar3": "error_message",
                "auVar4": "return_value"
            },
            "code": "\n\n\nundefined  [16] validate_debug_function_0010be1a(long function_ptr,undefined8 new_param,undefined8 debug_string,undefined8 result)\n\n{\n  long current_block;\n  undefined8 translated_string;\n  char *error_message;\n  undefined return_value [16];\n  \n  if (((*(long *)(function_ptr + 8) == 0) || (current_block = *(long *)(function_ptr + 0x20), current_block == 0)) ||\n     (*(long *)(function_ptr + 0x18) == 0)) {\n    error_message = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = new_param;\n      translated_string = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_ptr + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_message = \"debug_end_function: some blocks were not closed\";\n  }\n  translated_string = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",translated_string);\n  translated_string = 0;\nLAB_0010be86:\n  return_value._8_8_ = result;\n  return_value._0_8_ = translated_string;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "parse_stab",
                "FUN_0010554f",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "validate_debug_function_0010be1a"
        },
        "FUN_00104270": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "stab_modify_type",
                "display_info.isra.0",
                "stab_class_start_method.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_class_baseclass.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_qualified",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "setup_section",
                "parse_stab_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "parse_flags.cold",
                "stab_int_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "display_info.isra.0.cold",
                "is_dwo_section.constprop.0",
                "stab_typed_constant.lto_priv.0",
                "startswith.lto_priv.0.lto_priv.0",
                "stab_variable.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "FUN_0010554f",
                "convert_efi_target",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104270"
        },
        "FUN_00104150": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104150"
        },
        "FUN_00104390": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "start_stab.constprop.0",
                "debug_make_struct_type.isra.0",
                "display_info.isra.0",
                "stab_record_variable",
                "stab_class_start_method.lto_priv.0",
                "FUN_00116852",
                "stab_set_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "section_add_load_file",
                "debug_make_type.constprop.0",
                "stab_int_constant.lto_priv.0",
                "debug_record_variable",
                "debug_name_type",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "savestring",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "debug_make_enum_type.isra.0",
                "stab_find_tagged_type",
                "template_in_dir",
                "bfd_get_archive_filename",
                "FUN_0010554f",
                "add_redefine_and_check",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "debug_add_to_namespace.constprop.0",
                "stab_modify_type",
                "find_section_list",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "debug_make_indirect_type.isra.0",
                "stab_push_string",
                "stab_demangle_v3_arglist",
                "stab_demangle_args",
                "debug_tag_type",
                "stab_enum_type.lto_priv.0",
                "copy_section",
                "debug_make_array_type.isra.0",
                "coff_get_slot.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_struct_field.lto_priv.0",
                "add_specific_symbols",
                "parse_stab_type",
                "setup_section",
                "debug_record_parameter",
                "debug_make_method_type.isra.0",
                "init_section_add",
                "merge_gnu_build_notes",
                "stab_start_struct_type.lto_priv.0",
                "parse_flags.cold",
                "debug_make_offset_type.isra.0",
                "debug_set_class_id.lto_priv.0",
                "debug_start_block",
                "stab_typed_constant.lto_priv.0",
                "FUN_00104ea2",
                "FUN_00107880",
                "stab_variable.lto_priv.0",
                "debug_set_filename",
                "stab_float_constant.lto_priv.0",
                "debug_record_line",
                "stab_offset_type.lto_priv.0",
                "xstrndup",
                "debug_make_function_type.isra.0",
                "debug_start_source",
                "convert_efi_target",
                "stab_find_slot"
            ],
            "imported": false,
            "current_name": "FUN_00104390"
        },
        "FUN_001047b0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "copy_relocations_in_section",
                "merge_gnu_build_notes",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_001047b0"
        },
        "FUN_00128000": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemps@GLIBC_2.11 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128000",
            "calling": [
                "mkstemps"
            ],
            "imported": false,
            "current_name": "FUN_00128000"
        },
        "FUN_00104030": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104030"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_debug_types_00113da9",
                "param_1": "byteCount",
                "param_2": "unusedParam1",
                "param_3": "inputParam",
                "param_4": "unusedParam2",
                "puVar1": "allocatedMemory",
                "lVar2": "loopCounter",
                "puVar3": "memoryPointer",
                "bVar4": "byteOffset",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeDebugTypes_00113da9(byte byteCount,undefined8 unusedParam1,undefined8 inputParam,undefined8 unusedParam2)\n\n{\n  undefined8 *allocatedMemory;\n  long loopCounter;\n  undefined8 *memoryPointer;\n  byte byteOffset;\n  undefined result [16];\n  \n  byteOffset = 0;\n  result._0_8_ = debug_make_type_constprop_0(8 - (uint)byteCount);\n  if (result._0_8_ != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x28);\n    memoryPointer = allocatedMemory + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)memoryPointer = 0;\n      memoryPointer = (undefined8 *)((long)memoryPointer + (ulong)byteOffset * -8 + 4);\n    }\n    *allocatedMemory = inputParam;\n    *(undefined8 **)(result._0_8_ + 0x10) = allocatedMemory;\n  }\n  result._8_8_ = unusedParam2;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_types_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_value2"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_value2;\n  \n  record1_value2 = record1[2];\n  if (record1_value2 == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_value2 == 0) || ((record1_value2 != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "sort_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "FUN_00128228": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128228",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_00128228"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "store_header_value_0010a69a",
                "param_1": "buffer",
                "param_2": "header",
                "param_3": "length",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "statusCode",
                "lVar2": "structIndex",
                "sVar3": "headerLength",
                "uVar4": "allocatedMemory",
                "uVar5": "isStructIndexValid",
                "local_60": "headerString"
            },
            "code": "\nundefined4 storeHeaderValue_0010a69a(long buffer,undefined8 header,int length,char flag,uint value)\n\n{\n  undefined4 statusCode;\n  long structIndex;\n  size_t headerLength;\n  undefined8 allocatedMemory;\n  undefined isStructIndexValid;\n  char headerString [48];\n  \n  if (length == 0) {\n    headerString[0] = '\\0';\n    isStructIndexValid = 0;\n    structIndex = 0;\n  }\n  else {\n    structIndex = stab_get_struct_index();\n    if (structIndex < 0) {\n      return 0;\n    }\n    isStructIndexValid = 1;\n    sprintf(headerString,\"%ld=\",structIndex);\n  }\n  headerLength = strlen(headerString);\n  sprintf(headerString + headerLength,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  statusCode = stab_push_string(buffer,headerString,structIndex,isStructIndexValid,value);\n  if ((char)statusCode == '\\0') {\n    return 0;\n  }\n  structIndex = *(long *)(buffer + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(structIndex + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(buffer + 0x60) + 0x20) = 0;\n  return statusCode;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_get_struct_index",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "stab_start_class_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "store_header_value_0010a69a"
        },
        "FUN_001048e0": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001048e0"
        },
        "FUN_001047c0": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "stab_end_class_type.lto_priv.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001047c0"
        },
        "FUN_00104160": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00114dc7",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104160"
        },
        "FUN_00104040": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104040"
        },
        "FUN_00104280": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104280"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "process_sections_00115b70",
                "param_1": "file_names",
                "pcVar1": "current_file",
                "iVar2": "comparison_result",
                "iVar3": "strip_option",
                "lVar4": "section_list_1",
                "lVar5": "section_list_2",
                "uVar6": "result",
                "plVar7": "update_sections"
            },
            "code": "\nundefined8 process_sections_00115b70(char **file_names)\n\n{\n  char *current_file;\n  int comparison_result;\n  int strip_option;\n  long section_list_1;\n  long section_list_2;\n  undefined8 result;\n  long *update_sections;\n  \n  section_list_1 = find_section_list(*file_names,0,4);\n  if (section_list_1 == 0) {\n    if ((sections_removed != '\\0') || (sections_copied != '\\0')) {\n      section_list_1 = find_section_list(*file_names,0,1);\n      section_list_2 = find_section_list(*file_names,0,2);\n      if (section_list_1 != 0) {\n        if (section_list_2 != 0) {\n          current_file = *file_names;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(result,current_file);\n        }\n        if (section_list_1 != 0) {\n          if (update_sections == (long *)0x0) {\n            return 1;\n          }\n          current_file = *file_names;\n          update_sections = update_sections;\n          do {\n            strip_option = strcmp(current_file,(char *)update_sections[1]);\n            if (strip_option == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(result,current_file);\n            }\n            update_sections = (long *)*update_sections;\n          } while (update_sections != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((sections_copied != '\\0') && (section_list_2 == 0)) {\n        return 1;\n      }\n    }\n    strip_option = strip_symbols;\n    if ((*(byte *)((long)file_names + 0x25) & 0x20) != 0) {\n      if ((((strip_symbols - 2U < 2) || (strip_symbols == 7)) || (discard_locals == 2)) ||\n         (convert_debugging != '\\0')) {\n        current_file = *file_names;\n        comparison_result = strcmp(current_file,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_file,\".gnu_debuglink\"), comparison_result != 0)) {\n          strip_option = strcmp(current_file,\".reloc\");\n          if (strip_option != 0) {\n            return 1;\n          }\n          result = check_section_and_return_result_0010829e();\n          return result;\n        }\n      }\n      if (strip_option == 5) {\n        result = is_dwo_section_constprop_0(file_names);\n        return result;\n      }\n      if (strip_option == 4) {\n        return 0;\n      }\n    }\n    if (strip_option == 6) {\n      result = invert_result_and_return_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "find_section_list",
                "dcgettext",
                "FUN_0010829e",
                "fatal",
                "strcmp",
                "is_strip_section_1.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "process_sections_00115b70"
        },
        "FUN_001046a0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001046a0"
        },
        "FUN_00128358": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128358",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_00128358"
        },
        "FUN_00128230": {
            "renaming": {},
            "code": "\n\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128230",
            "calling": [
                "memcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128230"
        },
        "FUN_00116b40": {
            "renaming": {
                "FUN_00116b40": "initialize_program_00116b40",
                "completed_0": "isInitialized",
                "__cxa_finalize": "cleanupGlobalObjects",
                "__dso_handle": "dynamicSharedObjectHandle",
                "deregister_tm_clones": "cleanupTmClones"
            },
            "code": "\nvoid initializeProgram_00116b40(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  cleanupGlobalObjects(dynamicSharedObjectHandle);\n  cleanupTmClones();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_00116b40"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_binary_00116030",
                "param_1": "binaryFile",
                "param_2": "offset",
                "plVar1": "relocPtr",
                "lVar2": "relocValue",
                "lVar3": "firstConstant",
                "lVar4": "secondConstant",
                "iVar5": "error",
                "in_RAX": "returnValue",
                "lVar6": "upperBound",
                "__ptr": "relocBuffer",
                "lVar7": "numRelocs",
                "extraout_RAX": "outputValue",
                "lVar8": "i",
                "uStack_28": "result"
            },
            "code": "\n\n\nundefined8 processBinary_00116030(undefined8 *binaryFile,long offset)\n\n{\n  long *relocPtr;\n  long relocValue;\n  long firstConstant;\n  long secondConstant;\n  int error;\n  undefined8 returnValue;\n  long upperBound;\n  void *relocBuffer;\n  long numRelocs;\n  undefined8 outputValue;\n  long i;\n  undefined8 result;\n  \n  if (*(long *)(offset + 0x60) == 0) {\n    return returnValue;\n  }\n  upperBound = bfd_get_reloc_upper_bound();\n  if (upperBound < 0) {\n    if ((upperBound != -1) || (error = bfd_get_error(), error != 5)) {\n      bfd_nonfatal(*binaryFile);\n                    \n      xexit(1);\n    }\n  }\n  else if (upperBound != 0) {\n    relocBuffer = (void *)xmalloc();\n    numRelocs = bfd_canonicalize_reloc(binaryFile,offset,relocBuffer);\n    secondConstant = _DAT_00128680;\n    firstConstant = _DAT_00128568;\n    upperBound = _fwrite;\n    if (numRelocs < 0) {\n      bfd_nonfatal(*binaryFile);\n                    \n      xexit(1);\n    }\n    if (numRelocs != 0) {\n      i = 0;\n      do {\n        relocPtr = **(long ***)((long)relocBuffer + i * 8);\n        if ((((relocPtr != (long *)0x0) && (relocValue = *relocPtr, relocValue != 0)) && (relocValue != upperBound)) &&\n           ((relocValue != secondConstant && (relocValue != firstConstant)))) {\n          *(uint *)(relocValue + 0x18) = *(uint *)(relocValue + 0x18) | 0x20;\n        }\n        i = i + 1;\n      } while (numRelocs != i);\n    }\n    free(relocBuffer);\n    return outputValue;\n  }\n  return result;\n}\n\n",
            "called": [
                "fwrite",
                "bfd_get_reloc_upper_bound",
                "xexit",
                "xmalloc",
                "free",
                "bfd_canonicalize_reloc",
                "mark_symbols_used_in_relocations.cold",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00116030"
        },
        "FUN_00128018": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128018",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_00128018"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_end_with_00113ede",
                "param_1": "strings",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_string_end_with_00113ede(char **strings)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (strings == (char **)0x0) {\n    return 0;\n  }\n  string = *strings;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = startswith_lto_priv_0_lto_priv_0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_string_end_with_00113ede"
        },
        "FUN_001047d0": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001047d0"
        },
        "FUN_001046b0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001046b0"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "mask"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint mask;\n  \n  value1 = *record1;\n  value2 = *record2;\n  mask = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (mask != 0x102) {\n      return 1;\n    }\n  }\n  else if (mask == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "FUN_001048f0": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "display_info.isra.0",
                "FUN_00116852",
                "stab_set_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "copy_object.cold",
                "save_stab",
                "stab_class_baseclass.lto_priv.0",
                "free_saved_stabs",
                "stab_int_constant.lto_priv.0",
                "list_supported_targets",
                "stab_class_method_var",
                "stab_demangle_qualified",
                "list_matching_formats",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_find_tagged_type",
                "bfd_get_archive_filename",
                "FUN_00114b84",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_modify_type",
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arglist",
                "stab_demangle_template",
                "stab_enum_type.lto_priv.0",
                "copy_section",
                "parse_coff_struct_type",
                "parse_stab",
                "stab_struct_field.lto_priv.0",
                "parse_stab_type",
                "FUN_00108466",
                "stab_pop_type",
                "merge_gnu_build_notes",
                "make_tempdir.cold",
                "stab_typed_constant.lto_priv.0",
                "FUN_00104ea2",
                "FUN_00107880",
                "stab_emit_pending_vars",
                "stab_variable.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001048f0"
        },
        "FUN_00128260": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128260",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00128260"
        },
        "FUN_00104290": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "init_section_add",
                "main",
                "parse_stab",
                "parse_flags.cold",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104290"
        },
        "FUN_00104050": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUN_00104050"
        },
        "FUN_00104170": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "FUN_00104170"
        },
        "FUN_001048f8": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "htab_hash_redefnode"
            ],
            "imported": false,
            "current_name": "FUN_001048f8"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_type_0010c892",
                "cVar1": "hasPendingVars",
                "lVar2": "typeValue",
                "lVar3": "taggedType",
                "uVar4": "result",
                "puVar5": "typeList",
                "iVar6": "typeKind"
            },
            "code": "\n\n\nundefined8 processDebugType_0010c892(undefined8 param_1,long param_2)\n\n{\n  char hasPendingVars;\n  long typeValue;\n  long taggedType;\n  undefined8 result;\n  undefined8 *typeList;\n  int typeKind;\n  \n  if (*(char *)(param_2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (typeList = *(undefined8 **)(param_2 + 0x1a0); typeList != (undefined8 *)0x0;\n        typeList = (undefined8 *)*typeList) {\n      typeKind = *(int *)(typeList + 2);\n      taggedType = typeList[1];\n      if (typeKind != 0) {\n        if (taggedType != 0) {\n          if (typeKind - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        typeList[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (taggedType == 0) goto LAB_0010c910;\n      typeKind = 7;\nLAB_0010c8d5:\n      typeValue = debug_make_type_constprop_0(typeKind,0);\n      if (typeValue == 0) goto LAB_0010c910;\n      taggedType = debug_tag_type(param_1,taggedType,typeValue);\n      typeList[3] = taggedType;\n      if (taggedType == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    hasPendingVars = stab_emit_pending_vars();\n    if (hasPendingVars != '\\0') {\n      hasPendingVars = debug_end_function(param_1,*(undefined8 *)(param_2 + 0x68));\n      if (hasPendingVars != '\\0') {\n        *(undefined *)(param_2 + 0x60) = 0;\n        *(undefined8 *)(param_2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "stab_emit_pending_vars",
                "debug_end_function",
                "dcgettext",
                "debug_tag_type",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_type_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_structure_00112904",
                "param_1": "sourceParameter",
                "param_2": "destinationParameter",
                "puVar1": "allocatedMemory"
            },
            "code": "\nvoid initializeDataStructure_00112904(undefined4 sourceParameter,undefined4 destinationParameter)\n\n{\n  undefined4 *allocatedMemory;\n  \n  allocatedMemory = (undefined4 *)xmalloc(0x18);\n  *allocatedMemory = sourceParameter;\n  allocatedMemory[1] = destinationParameter;\n  *(undefined (*) [16])(allocatedMemory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "debug_make_struct_type.isra.0",
                "debug_make_method_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_indirect_type.isra.0",
                "debug_make_reference_type.isra.0",
                "stab_demangle_v3_arg",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0",
                "debug_make_offset_type.isra.0",
                "debug_tag_type",
                "debug_make_enum_type.isra.0",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "debug_make_float_type.isra.0",
                "finish_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112904"
        },
        "FUN_00128388": {
            "renaming": {},
            "code": "\n\n\n\nchar * mkdtemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkdtemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128388",
            "calling": [
                "mkdtemp"
            ],
            "imported": false,
            "current_name": "FUN_00128388"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "initialValue",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 initialValue;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = initialValue;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "cleanup_pending_functions_0011a390",
                "lVar1": "index1",
                "lVar2": "index2",
                "lVar3": "index3",
                "plVar4": "currentNode",
                "uVar5": "count"
            },
            "code": "\nvoid cleanupPendingFunctions_0011a390(void)\n\n{\n  long index1;\n  long index2;\n  long index3;\n  long *currentNode;\n  uint count;\n  \n  currentNode = (long *)xatexit_head_lto_priv_0;\n  if (xatexit_head_lto_priv_0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(currentNode + 1) - 1;\n      if (-1 < (int)count) {\n        index1 = (long)(int)count;\n        count = count & 7;\n        (*(code *)currentNode[index1 + 2])();\n        index2 = index1 + -1;\n        if (-1 < (int)index2) {\n          index3 = index2;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)currentNode[index1 + 1])();\n                        index2 = index1 + -2;\n                      }\n                      (*(code *)currentNode[index2 + 2])();\n                      index2 = index2 + -1;\n                    }\n                    (*(code *)currentNode[index2 + 2])();\n                    index2 = index2 + -1;\n                  }\n                  (*(code *)currentNode[index2 + 2])();\n                  index2 = index2 + -1;\n                }\n                (*(code *)currentNode[index2 + 2])();\n                index2 = index2 + -1;\n              }\n              (*(code *)currentNode[index2 + 2])();\n              index2 = index2 + -1;\n            }\n            (*(code *)currentNode[index2 + 2])();\n            index3 = index2 + -1;\n            if ((int)(index2 + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)currentNode[index3 + 2])();\n            index1 = index3 + -1;\n            (*(code *)currentNode[index3 + 1])();\n            (*(code *)currentNode[index3])();\n            (*(code *)currentNode[index1])();\n            (*(code *)currentNode[index3 + -2])();\n            (*(code *)currentNode[index3 + -3])();\n            (*(code *)currentNode[index3 + -4])();\n            (*(code *)currentNode[index3 + -5])();\n            index3 = index3 + -8;\n          } while (-1 < (int)index1 + -7);\n        }\n      }\nLAB_0011a466:\n      currentNode = (long *)*currentNode;\n    } while (currentNode != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_pending_functions_0011a390"
        },
        "FUN_00128008": {
            "renaming": {},
            "code": "\n\n\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128008",
            "calling": [
                "getenv"
            ],
            "imported": false,
            "current_name": "FUN_00128008"
        },
        "FUN_00128128": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128128",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00128128"
        },
        "FUN_001046c0": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001046c0"
        },
        "FUN_001045a0": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "display_info.isra.0",
                "display_info.isra.0.cold",
                "do_display_target",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_001045a0"
        },
        "FUN_001047e0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "stab_modify_type",
                "stab_class_start_method.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "parse_stab_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047e0"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "write_stab_symbol_0010e842",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "index",
                "param_4": "data",
                "sVar1": "symbol_name_length",
                "__s": "formatted_symbol",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] write_stab_symbol_0010e842(undefined8 symbol_table,char *symbol_name,undefined8 index,undefined8 data)\n\n{\n  size_t symbol_name_length;\n  char *formatted_symbol;\n  undefined result [16];\n  \n  symbol_name_length = strlen(symbol_name);\n  formatted_symbol = (char *)xmalloc(symbol_name_length + 0x14);\n  sprintf(formatted_symbol,\"%s:c=i%ld\",symbol_name,index);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbol_table,0x80,0,0,formatted_symbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_symbol);\n  }\n  result._8_8_ = data;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_stab_symbol_0010e842"
        },
        "FUN_00104060": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00104060"
        },
        "FUN_00128370": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128370",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00128370"
        },
        "FUN_00104180": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104180"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_debug_type_00113cb9",
                "param_1": "inputValue",
                "lVar1": "debugType"
            },
            "code": "\nlong initializeDebugType_00113cb9(long inputValue)\n\n{\n  long debugType;\n  \n  if (inputValue != 0) {\n    debugType = debug_make_type_constprop_0(0xe,0);\n    if (debugType == 0) {\n      debugType = 0;\n    }\n    else {\n      *(long *)(debugType + 0x10) = inputValue;\n    }\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113cb9"
        },
        "FUN_00128130": {
            "renaming": {},
            "code": "\n\n\n\nint rmdir(char *__path)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* rmdir@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128130",
            "calling": [
                "rmdir"
            ],
            "imported": false,
            "current_name": "FUN_00128130"
        },
        "FUN_00128498": {
            "renaming": {},
            "code": "\n\n\n\nchar * strdup(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strdup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128498",
            "calling": [
                "strdup"
            ],
            "imported": false,
            "current_name": "FUN_00128498"
        },
        "FUN_00128258": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128258",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128258"
        },
        "FUN_00128138": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128138",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00128138"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "write_symbol_0010eafe",
                "param_1": "symbolTable",
                "param_2": "filename",
                "param_3": "flag",
                "__s": "type",
                "sVar2": "filenameLength",
                "sVar3": "typeLength",
                "__s_00": "newSymbol",
                "uVar1": "result"
            },
            "code": "\nundefined4 writeSymbol_0010eafe(long symbolTable,char *filename,char flag)\n\n{\n  undefined4 result;\n  char *type;\n  size_t filenameLength;\n  size_t typeLength;\n  char *newSymbol;\n  \n  if ((*(int *)(symbolTable + 0x1f8) == 0) && (*(long *)(symbolTable + 0x1e8) == -1)) {\n    type = (char *)stab_pop_type();\n    filenameLength = strlen(filename);\n    typeLength = strlen(type);\n    newSymbol = (char *)xmalloc(filenameLength + 3 + typeLength);\n    sprintf(newSymbol,\"%s:%c%s\",filename,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),type);\n    *(undefined8 *)(symbolTable + 0x1e8) = *(undefined8 *)(symbolTable + 0x10);\n    result = stab_write_symbol_lto_priv_0(symbolTable,0x24,0,0,newSymbol);\n    if ((char)result != '\\0') {\n      free(newSymbol);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_0010eafe"
        },
        "FUN_001045b0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001045b0"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_debug_type_00113df2",
                "param_1": "inputData"
            },
            "code": "\nvoid initializeDebugType_00113df2(undefined4 inputData)\n\n{\n  debug_make_type_constprop_0(4,inputData);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113df2"
        },
        "FUN_001047f0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "copy_usage",
                "strip_usage",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_001047f0"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "merge_strings_0010a377",
                "param_1": "input_pointer",
                "cVar1": "flag",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "length_string1",
                "sVar4": "length_string2",
                "__s_01": "merged_string",
                "uVar2": "result",
                "uVar5": "use_default_value"
            },
            "code": "\nundefined4 mergeStrings_0010a377(long input_pointer)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length_string1;\n  size_t length_string2;\n  char *merged_string;\n  undefined use_default_value;\n  \n  use_default_value = 1;\n  flag = *(char *)(*(long *)(input_pointer + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  if (flag == '\\0') {\n    use_default_value = *(undefined *)(*(long *)(input_pointer + 0x60) + 0x1c);\n  }\n  string2 = (char *)stab_pop_type(input_pointer);\n  length_string1 = strlen(string1);\n  length_string2 = strlen(string2);\n  merged_string = (char *)xmalloc(length_string1 + 3 + length_string2);\n  sprintf(merged_string,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = stab_push_string(input_pointer,merged_string,0,use_default_value,0);\n  if ((char)result != '\\0') {\n    free(merged_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "merge_strings_0010a377"
        },
        "FUN_001046d0": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001046d0"
        },
        "FUN_00128160": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128160",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_00128160"
        },
        "FUN_00104070": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "FUN_00104070"
        },
        "FUN_00104190": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_00104190"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "parse_arguments_0010d882",
                "param_1": "input_data",
                "param_2": "argument_strings",
                "param_3": "output_data",
                "param_4": "success_flag",
                "iVar1": "loop_counter",
                "pcVar2": "current_argument",
                "cVar3": "current_char",
                "lVar4": "allocated_memory",
                "pcVar5": "current_argument",
                "uVar6": "arg_count",
                "bVar7": "condition_flag",
                "local_50": "arg_index",
                "local_4c": "some_constant",
                "local_48": "count",
                "local_44": "nested_counter",
                "local_40": "temp_array"
            },
            "code": "\nundefined8 parse_arguments_0010d882(long input_data,char **argument_strings,long *output_data,undefined *success_flag)\n\n{\n  int loop_counter;\n  char *current_argument;\n  char current_char;\n  long allocated_memory;\n  char *current_argument;\n  ulong arg_count;\n  bool condition_flag;\n  uint arg_index;\n  undefined4 some_constant;\n  uint count;\n  int nested_counter;\n  undefined8 temp_array [2];\n  \n  current_argument = *argument_strings;\n  some_constant = 10;\n  if (output_data != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_data = allocated_memory;\n    *success_flag = 0;\n  }\n  arg_index = 0;\n  while( true ) {\n    current_argument = *argument_strings;\n    current_char = *current_argument;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *argument_strings = current_argument + 1;\n      if (current_char == 'T') {\n        nested_counter = 1;\n      }\n      else {\n        current_char = stab_demangle_get_count(argument_strings,&nested_counter);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = stab_demangle_get_count(argument_strings,&count);\n      if ((current_char == '\\0') || (*(uint *)(input_data + 0x28) <= count)) {\nLAB_0010d958:\n        stab_bad_demangle(current_argument);\n        return 0;\n      }\n      arg_count = (ulong)count;\n      while (loop_counter = nested_counter + -1, condition_flag = nested_counter != 0, nested_counter = loop_counter, condition_flag) {\n        temp_array[0] = *(undefined8 *)(*(long *)(input_data + 0x20) + arg_count * 0x10);\n        current_char = stab_demangle_arg(input_data,temp_array,output_data,&arg_index,&some_constant);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = stab_demangle_arg(input_data,argument_strings,output_data,&arg_index,&some_constant);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_data == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_data + (ulong)arg_index * 8) = 0;\n    if (*current_argument != 'e') goto LAB_0010d9fa;\n    *success_flag = 1;\n  }\n  current_argument = current_argument + 1;\n  *argument_strings = current_argument;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_argument >> 8),1);\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "stab_demangle_arg",
                "xmalloc",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_arguments_0010d882"
        },
        "FUN_00128040": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128040",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00128040"
        },
        "FUN_00128168": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128168",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_00128168"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_array_00112925",
                "param_1": "arrayPtr",
                "param_2": "value",
                "param_3": "size",
                "param_4": "count",
                "puVar1": "newArray",
                "pauVar2": "existingArray",
                "lVar3": "loopCounter",
                "puVar4": "currentElement",
                "bVar5": "index"
            },
            "code": "\nundefined4 *\ninitializeArray_00112925(undefined (**arrayPtr) [16],undefined8 value,undefined4 size,undefined4 count)\n\n{\n  undefined4 *newArray;\n  undefined (*existingArray) [16];\n  long loopCounter;\n  undefined4 *currentElement;\n  byte index;\n  \n  index = 0;\n  newArray = (undefined4 *)xmalloc(0x28);\n  currentElement = newArray;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentElement = 0;\n    currentElement = currentElement + (ulong)index * -2 + 1;\n  }\n  existingArray = *arrayPtr;\n  *(undefined8 *)(newArray + 2) = value;\n  newArray[5] = size;\n  newArray[6] = count;\n  if (existingArray == (undefined (*) [16])0x0) {\n    existingArray = (undefined (*) [16])xmalloc(0x10);\n    *existingArray = ZEXT816(0);\n    *arrayPtr = existingArray;\n    *(undefined (**) [16])(*existingArray + 8) = existingArray;\n  }\n  **(undefined8 **)(*existingArray + 8) = newArray;\n  *(undefined4 **)(*existingArray + 8) = newArray;\n  return newArray;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "debug_record_function",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "debug_name_type",
                "debug_tag_type"
            ],
            "imported": false,
            "current_name": "initialize_array_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_record_line_0010bf86",
                "param_1": "input_struct",
                "param_2": "new_value_1",
                "param_3": "new_value_2",
                "uVar1": "result",
                "puVar2": "unit_ptr",
                "uVar3": "index",
                "puVar4": "malloced_ptr",
                "lVar5": "loop_counter",
                "puVar6": "malloced_ptr_iterator",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 update_record_line_0010bf86(long input_struct,undefined8 new_value_1,undefined8 new_value_2)\n\n{\n  undefined8 result;\n  undefined8 *unit_ptr;\n  ulong index;\n  undefined4 *malloced_ptr;\n  long loop_counter;\n  undefined4 *malloced_ptr_iterator;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(input_struct + 8) == 0) {\n    result = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    loop_counter = *(long *)(input_struct + 0x28);\n    if ((loop_counter != 0) && (*(long *)(loop_counter + 8) == *(long *)(input_struct + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(loop_counter + 0x10 + index * 8) == -1) {\n          unit_ptr = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(loop_counter + 0x10 + (long)unit_ptr * 8) = new_value_1;\n          *(undefined8 *)(loop_counter + 0x60 + (long)unit_ptr * 8) = new_value_2;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    malloced_ptr = (undefined4 *)xmalloc(0xb0);\n    malloced_ptr_iterator = malloced_ptr;\n    for (loop_counter = 0x2c; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *malloced_ptr_iterator = 0;\n      malloced_ptr_iterator = malloced_ptr_iterator + (ulong)flag * -2 + 1;\n    }\n    result = *(undefined8 *)(input_struct + 0x10);\n    *(undefined8 *)(malloced_ptr + 4) = new_value_1;\n    *(undefined8 *)(malloced_ptr + 2) = result;\n    *(undefined8 *)(malloced_ptr + 0x18) = new_value_2;\n    malloced_ptr_iterator = malloced_ptr + 6;\n    for (loop_counter = 0x48; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined *)malloced_ptr_iterator = 0xff;\n      malloced_ptr_iterator = (undefined4 *)((long)malloced_ptr_iterator + (ulong)flag * -2 + 1);\n    }\n    unit_ptr = *(undefined8 **)(input_struct + 0x28);\n    if (unit_ptr == (undefined8 *)0x0) {\n      unit_ptr = *(undefined8 **)(input_struct + 8);\n      unit_ptr[2] = malloced_ptr;\n    }\n    else {\n      *unit_ptr = malloced_ptr;\n    }\n    *(undefined4 **)(input_struct + 0x28) = malloced_ptr;\nLAB_0010c056:\n    result = CONCAT71((int7)((ulong)unit_ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_record_line_0010bf86"
        },
        "FUN_00128048": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128048",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_00128048"
        },
        "FUN_00128288": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128288",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128288"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "match_pattern_0011a170",
                "param_1": "pattern",
                "param_2": "input",
                "__pattern": "currentPattern",
                "iVar1": "result"
            },
            "code": "\nint matchPattern_0011a170(char **pattern,char **input)\n\n{\n  char *currentPattern;\n  int result;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    result = fnmatch(currentPattern + 1,*input,0);\n    if (result == 0) {\n      *(undefined *)(input + 1) = 0;\n      return result;\n    }\n  }\n  else {\n    result = fnmatch(currentPattern,*input,0);\n    if (result == 0) {\n      *(undefined *)(input + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "match_pattern_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "add_debug_record_0010bd62",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "currentPtr",
                "uVar2": "errorMsg",
                "puVar3": "mallocPtr",
                "puVar4": "tempPtr",
                "lVar5": "loopVar",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "bVar8": "flag"
            },
            "code": "\n\n\nundefined8\naddDebugRecord_0010bd62(long param1,long param2,long param3,undefined4 param4,undefined8 param5)\n\n{\n  undefined8 *currentPtr;\n  undefined8 errorMsg;\n  undefined4 *mallocPtr;\n  undefined8 *tempPtr;\n  long loopVar;\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  byte flag;\n  \n  flag = 0;\n  if (param2 == 0) {\n    return 0;\n  }\n  if (param3 != 0) {\n    if ((*(long *)(param1 + 8) != 0) && (*(long *)(param1 + 0x18) != 0)) {\n      mallocPtr = (undefined4 *)xmalloc(0x28);\n      ptr2 = mallocPtr;\n      for (loopVar = 10; loopVar != 0; loopVar = loopVar + -1) {\n        *ptr2 = 0;\n        ptr2 = ptr2 + (ulong)flag * -2 + 1;\n      }\n      loopVar = *(long *)(param1 + 0x18);\n      *(long *)(mallocPtr + 2) = param2;\n      *(long *)(mallocPtr + 4) = param3;\n      mallocPtr[6] = param4;\n      currentPtr = *(undefined8 **)(loopVar + 8);\n      *(undefined8 *)(mallocPtr + 8) = param5;\n      ptr1 = (undefined8 *)(loopVar + 8);\n      while (tempPtr = currentPtr, tempPtr != (undefined8 *)0x0) {\n        ptr1 = tempPtr;\n        currentPtr = (undefined8 *)*tempPtr;\n      }\n      *ptr1 = mallocPtr;\n      return 1;\n    }\n    errorMsg = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMsg);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "add_debug_record_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_files_00104ea2",
                "unaff_R12": "archivePath",
                "param_11": "writeMode",
                "ppcVar6": "writeFilePtr",
                "unaff_R15": "readFilePtr",
                "unaff_retaddr": "returnAddress",
                "param_7": "sourceFilePath",
                "param_8": "bytesRead",
                "param_9": "tempDirPath",
                "param_10": "archiveFilePath",
                "in_stack_00000030": "unknownFlag",
                "param_18": "permissions",
                "param_19": "sizeLimit",
                "lVar5": "bytesRead",
                "unaff_RBP": "statsPtr",
                "status": "errorCode",
                "preserve_dates": "preserveDates",
                "unaff_EBX": "statError",
                "cVar1": "result",
                "iVar2": "tempInt",
                "puVar8": "tempPtr",
                "piVar9": "errnoPtr",
                "pcVar10": "tempStr",
                "uVar11": "tempStr2",
                "lVar12": "tempLong",
                "pcVar13": "closeFunc",
                "lVar14": "tempLong2",
                "bVar17": "byteFlag"
            },
            "code": "\nvoid copyArchiveFiles_00104ea2(void)\n\n{\n  char result;\n  int tempInt;\n  char **ppcVar3;\n  void *pvVar4;\n  long bytesRead;\n  char **writeFilePtr;\n  char *pcVar7;\n  undefined8 *tempPtr;\n  int *errnoPtr;\n  char *tempStr;\n  undefined8 tempStr2;\n  long tempLong;\n  code *closeFunc;\n  long tempLong2;\n  int statError;\n  stat *statsPtr;\n  char *presult5;\n  stat *psVar16;\n  char *archivePath;\n  undefined8 *unaff_R13;\n  char **readFilePtr;\n  byte byteFlag;\n  undefined8 returnAddress;\n  undefined8 *sourceFilePath;\n  long *bytesRead;\n  char *tempDirPath;\n  undefined8 *archiveFilePath;\n  undefined8 writeMode;\n  undefined8 unknownFlag;\n  uint permissions;\n  long sizeLimit;\n  \n  byteFlag = 0;\ncode_r0x00104ea2:\n  writeFilePtr = (char **)bfd_openw(archivePath,writeMode);\n  if (writeFilePtr == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(archivePath,0,0,0);\nLAB_00104e93:\n    errorCode = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = copy_object(readFilePtr,writeFilePtr,returnAddress);\n    if (result == '\\0') {\n      tempInt = bfd_get_arch(readFilePtr);\n      if (tempInt == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(writeFilePtr);\n      if (result != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(writeFilePtr);\n    writeFilePtr = readFilePtr;\n    if (result == '\\0') {\n      bfd_nonfatal_message(archivePath,0,0,0);\n      errorCode = 1;\n    }\nLAB_00114a86:\n    if ((preserveDates != '\\0') && (statError == 0)) {\n      set_times(archivePath,statsPtr);\n    }\n    tempLong = bfd_openr(archivePath,writeMode);\n    unaff_R13[2] = tempLong;\n    *bytesRead = tempLong;\n    bytesRead = (long *)(tempLong + 0xf0);\n    readFilePtr = (char **)bfd_openr_next_archived_file(archiveFilePath,writeFilePtr);\n    bfd_close(writeFilePtr);\n    while ((errorCode == 0 && (readFilePtr != (char **)0x0))) {\n      tempStr = *readFilePtr;\n      pcVar7 = tempStr;\n      if (*tempStr == '/') {\nLAB_0010527d:\n        tempStr2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(tempStr2,tempStr);\n        goto LAB_00104e93;\n      }\n      while (*pcVar7 != '\\0') {\n        presult5 = pcVar7;\n        if ((*pcVar7 == '.') && (presult5 = pcVar7 + 1, pcVar7[1] == '.')) {\n          presult5 = pcVar7 + 2;\n          if ((pcVar7[2] == '\\0') || (pcVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*presult5 != '\\0' && (*presult5 != '/')); presult5 = presult5 + 1) {\n        }\n        pcVar7 = presult5;\n        if (*presult5 == '/') {\n          extract_archive_001052a2();\n          return;\n        }\n      }\n      statsPtr = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(tempDirPath,&DAT_0011b47d);\n      tempInt = stat(archivePath,statsPtr);\n      tempPtr = unaff_R13;\n      if (-1 < tempInt) {\n        tempLong = make_tempdir(archivePath);\n        free(archivePath);\n        if (tempLong == 0) {\n          errnoPtr = __errno_location();\n          tempStr = strerror(*errnoPtr);\n          tempStr2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(tempStr2,tempStr);\n          goto LAB_00104e93;\n        }\n        tempPtr = (undefined8 *)xmalloc(0x18);\n        tempStr = *readFilePtr;\n        *tempPtr = unaff_R13;\n        tempPtr[2] = 0;\n        tempPtr[1] = tempLong;\n        archivePath = (char *)concat(tempLong,&DAT_0011b47d,tempStr);\n      }\n      statError = 0;\n      if (preserveDates != '\\0') {\n        psVar16 = statsPtr;\n        for (tempLong = 0x24; tempLong != 0; tempLong = tempLong + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)byteFlag * -8 + 4);\n        }\n        writeFilePtr = (char **)readFilePtr[0x1d];\n        if ((char **)readFilePtr[0x1d] == (char **)0x0) {\n          writeFilePtr = readFilePtr;\n        }\n        statError = (**(code **)(writeFilePtr[1] + 0x1e8))(readFilePtr,statsPtr);\n        if (statError != 0) {\n          tempStr = *readFilePtr;\n          tempStr2 = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(tempStr2,tempStr);\n        }\n      }\n      unaff_R13 = (undefined8 *)xmalloc(0x18);\n      unaff_R13[1] = archivePath;\n      *unaff_R13 = tempPtr;\n      unaff_R13[2] = 0;\n      result = bfd_check_format(readFilePtr,1);\n      if (result != '\\0') {\n        if (unknownFlag._7_1_ != '\\0') goto code_r0x00104ea2;\n        writeFilePtr = (char **)bfd_openw(archivePath,*(undefined8 *)readFilePtr[1]);\n        if (writeFilePtr == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      tempStr2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,readFilePtr,0,tempStr2);\n      writeFilePtr = (char **)bfd_openw(archivePath,writeMode);\n      if (writeFilePtr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)readFilePtr[0x1d];\n      if ((char **)readFilePtr[0x1d] == (char **)0x0) {\n        ppcVar3 = readFilePtr;\n      }\n      tempInt = (**(code **)(ppcVar3[1] + 0x1e8))(readFilePtr);\n      tempLong = sizeLimit;\n      if (tempInt == 0) {\n        if (sizeLimit < 0) {\n          bfd_get_archive_filename(readFilePtr);\n          tempStr2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          non_fatal(tempStr2);\n        }\n        else {\n          tempInt = bfd_seek(readFilePtr,0,0);\n          if (tempInt == 0) {\n            if (verbose != '\\0') {\n              tempStr = *writeFilePtr;\n              tempStr2 = bfd_get_archive_filename(readFilePtr);\n              pcVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pcVar7,tempStr2,tempStr);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (tempLong == 0) {\n                chmod(*writeFilePtr,permissions | 0x100);\n                free(pvVar4);\n                result = bfd_close_all_done(writeFilePtr);\n                writeFilePtr = readFilePtr;\n                if (result == '\\0') {\n                  bfd_nonfatal_message(archivePath,0,0,0);\n                  errorCode = 1;\n                }\n                goto LAB_00114a86;\n              }\n              tempLong2 = 0x2000;\n              if (tempLong < 0x2001) {\n                tempLong2 = tempLong;\n              }\n              bytesRead = bfd_bread(pvVar4,tempLong2,readFilePtr);\n              ppcVar3 = readFilePtr;\n              if ((tempLong2 != bytesRead) ||\n                 (bytesRead = bfd_bwrite(pvVar4,tempLong2,writeFilePtr), ppcVar3 = writeFilePtr, tempLong2 != bytesRead))\n              break;\n              tempLong = tempLong - tempLong2;\n            }\n            bfd_nonfatal_message(0,ppcVar3,0,0);\n            free(pvVar4);\n          }\n          else {\n            tempStr2 = bfd_get_archive_filename(readFilePtr);\n            bfd_nonfatal(tempStr2);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,readFilePtr,0,0);\n      }\n      result = bfd_close_all_done(writeFilePtr);\n      if (result == '\\0') {\n        bfd_nonfatal_message(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      errorCode = 1;\n    }\n    *bytesRead = 0;\n    pvVar4 = (void *)xstrdup(*sourceFilePath);\n    if (errorCode == 0) {\n      closeFunc = bfd_close;\n    }\n    else {\n      closeFunc = bfd_close_all_done;\n    }\n    result = (*closeFunc)(sourceFilePath);\n    if (result == '\\0') {\n      errorCode = 1;\n      bfd_nonfatal_message(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*archiveFilePath);\n    result = bfd_close(archiveFilePath);\n    if (result == '\\0') {\n      errorCode = 1;\n      bfd_nonfatal_message(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (unaff_R13 != (undefined8 *)0x0) {\n    if (unaff_R13[2] == 0) {\n      rmdir((char *)unaff_R13[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)unaff_R13[1]);\n    }\n    free((void *)unaff_R13[1]);\n    tempPtr = (undefined8 *)*unaff_R13;\n    free(unaff_R13);\n    unaff_R13 = tempPtr;\n  }\n  rmdir(tempDirPath);\n  free(tempDirPath);\n  return;\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_close_all_done",
                "bfd_get_arch",
                "bfd_bwrite",
                "bfd_openw",
                "non_fatal",
                "bfd_close",
                "FUN_001052a2",
                "copy_object",
                "set_times",
                "bfd_bread",
                "unlink",
                "free",
                "bfd_openr",
                "bfd_close",
                "strerror",
                "chmod",
                "rmdir",
                "make_tempdir",
                "dcgettext",
                "xmalloc",
                "__errno_location",
                "bfd_nonfatal_message",
                "bfd_seek",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_check_format",
                "concat",
                "bfd_get_archive_filename",
                "FUN_00114b84",
                "stat",
                "printf",
                "bfd_nonfatal",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_files_00104ea2"
        },
        "FUN_001044a0": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "main",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001044a0"
        },
        "FUN_001046e0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046e0"
        },
        "FUN_001045c0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "main",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001045c0"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "create_type_and_allocate_memory_00113ce0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "lVar1": "typePointer",
                "plVar2": "allocatedMemory",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ncreateTypeAndAllocateMemory_00113ce0(long input1,long input2,undefined input3,undefined8 input4,undefined8 input5)\n\n{\n  long typePointer;\n  long *allocatedMemory;\n  undefined returnValue [16];\n  \n  if (input1 != 0) {\n    typePointer = debug_make_type_constprop_0(0xd,0);\n    if (typePointer != 0) {\n      allocatedMemory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocatedMemory + 0x11) = 0;\n      *allocatedMemory = input1;\n      *(undefined4 *)((long)allocatedMemory + 0x14) = 0;\n      allocatedMemory[1] = input2;\n      *(undefined *)(allocatedMemory + 2) = input3;\n      *(long **)(typePointer + 0x10) = allocatedMemory;\n      goto LAB_00113d2f;\n    }\n  }\n  typePointer = 0;\nLAB_00113d2f:\n  returnValue._8_8_ = input5;\n  returnValue._0_8_ = typePointer;\n  return returnValue;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_type_and_allocate_memory_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_data_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "dataBuffer",
                "unaff_R12": "currentPosition",
                "unaff_R14": "maxPosition",
                "sVar4": "readBytes",
                "uVar2": "errorMessage",
                "uVar3": "translatedErrorMessage",
                "iVar1": "errorFlag"
            },
            "code": "\nvoid readAndResizeData_00114dc7(void)\n\n{\n  int errorFlag;\n  undefined8 errorMessage;\n  undefined8 translatedErrorMessage;\n  size_t readBytes;\n  FILE *file;\n  long dataBuffer;\n  long currentPosition;\n  long maxPosition;\n  \n  while( true ) {\n    readBytes = fread((void *)(*(long *)(dataBuffer + 0x20) + currentPosition),1,maxPosition - currentPosition,\n                  file);\n    errorFlag = ferror(file);\n    if (errorFlag != 0) {\n      translatedErrorMessage = *(undefined8 *)(dataBuffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(errorMessage,translatedErrorMessage);\n    }\n    currentPosition = currentPosition + readBytes;\n    errorFlag = feof(file);\n    if (errorFlag != 0) break;\n    if (currentPosition == maxPosition) {\n      maxPosition = currentPosition * 2;\n      translatedErrorMessage = xrealloc(*(undefined8 *)(dataBuffer + 0x20),maxPosition);\n      *(undefined8 *)(dataBuffer + 0x20) = translatedErrorMessage;\n    }\n  }\n  *(long *)(dataBuffer + 0x18) = currentPosition;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "FUN_00114dc7",
                "ferror",
                "fread",
                "feof",
                "dcgettext",
                "fclose",
                "fatal",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_data_00114dc7"
        },
        "FUN_00116b80": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00116b80"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "improved_print_and_open_00119f70",
                "param_1": "header",
                "param_2": "data",
                "uVar1": "format",
                "cVar2": "result",
                "iVar3": "counter",
                "uVar4": "endian_header",
                "uVar5": "endian_data",
                "__format": "print_format",
                "lVar6": "allocation_size",
                "uVar7": "printable_arch",
                "lVar8": "new_allocation"
            },
            "code": "\nundefined4 improved_print_and_open_00119f70(undefined8 *header,undefined8 *data)\n\n{\n  undefined4 format;\n  char result;\n  int counter;\n  undefined8 endian_header;\n  undefined8 endian_data;\n  char *print_format;\n  long allocation_size;\n  undefined8 printable_arch;\n  long new_allocation;\n  \n  counter = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = counter;\n  if ((ulong)data[2] < (ulong)((long)counter * 0x60)) {\n    allocation_size = 0x3000;\n    if (0x3f < counter) {\n      allocation_size = (long)counter * 0xc0;\n    }\n    new_allocation = xrealloc(data[3]);\n    data[3] = new_allocation;\n    memset((void *)(new_allocation + data[2]),0,allocation_size - data[2]);\n    data[2] = allocation_size;\n  }\n  format = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header;\n  endian_header = endian_string(format);\n  endian_data = endian_string(*(undefined4 *)(header + 2));\n  printable_arch = *header;\n  print_format = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(print_format,printable_arch,endian_data,endian_header);\n  allocation_size = bfd_openw(*data,*header);\n  if (allocation_size == 0) {\n    bfd_nonfatal(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    counter = 2;\n    result = bfd_set_format(allocation_size,1);\n    if (result == '\\0') {\n      counter = bfd_get_error();\n      if (counter != 5) {\n        bfd_nonfatal(*header);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        result = (**(code **)(*(long *)(allocation_size + 8) + 0x2a0))(allocation_size,counter,0);\n        if (result != '\\0') {\n          printable_arch = bfd_printable_arch_mach(counter,0);\n          printf(\"  %s\\n\",printable_arch);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(counter - 2)) =\n               1;\n        }\n        counter = counter + 1;\n      } while (counter != 0x57);\n    }\n    bfd_close_all_done(allocation_size);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "endian_string",
                "bfd_close_all_done",
                "bfd_get_error",
                "dcgettext",
                "bfd_set_format",
                "do_display_target.cold",
                "bfd_openw",
                "memset",
                "printf",
                "xrealloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "improved_print_and_open_00119f70"
        },
        "FUN_00128150": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128150",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00128150"
        },
        "FUN_00128030": {
            "renaming": {},
            "code": "\n\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128030",
            "calling": [
                "strcasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128030"
        },
        "FUN_00104080": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104080"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "input_fd",
                "param_2": "output_file",
                "param_3": "file_stat",
                "iVar1": "original_errno",
                "__fd": "output_fd",
                "iVar2": "bytes_read",
                "_Var3": "current_offset",
                "uVar4": "total_bytes_copied",
                "sVar5": "bytes_written",
                "piVar6": "errno_ptr",
                "local_2038": "buffer"
            },
            "code": "\nulong copy_file_00115a90(int input_fd,char *output_file,long file_stat)\n\n{\n  int original_errno;\n  int output_fd;\n  int bytes_read;\n  __off_t current_offset;\n  ulong total_bytes_copied;\n  size_t bytes_written;\n  int *errno_ptr;\n  undefined buffer [8200];\n  \n  if ((-1 < input_fd) && (current_offset = lseek(input_fd,0,0), current_offset == 0)) {\n    output_fd = open(output_file,0x201);\n    if (output_fd < 0) {\n      total_bytes_copied = simple_copy_cold();\n      return total_bytes_copied;\n    }\n    do {\n      total_bytes_copied = read(input_fd,buffer,0x2000);\n      bytes_read = (int)total_bytes_copied;\n      if (bytes_read < 1) {\n        errno_ptr = __errno_location();\n        original_errno = *errno_ptr;\n        fchmod(output_fd,*(__mode_t *)(file_stat + 0x18));\n        close(input_fd);\n        close(output_fd);\n        if (bytes_read != 0) {\n          *errno_ptr = original_errno;\n          return 0xffffffff;\n        }\n        return total_bytes_copied & 0xffffffff;\n      }\n      bytes_written = write(output_fd,buffer,(long)bytes_read);\n    } while (bytes_written == (long)bytes_read);\n    errno_ptr = __errno_location();\n    bytes_read = *errno_ptr;\n    close(input_fd);\n    close(output_fd);\n    *errno_ptr = bytes_read;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close",
                "simple_copy.cold",
                "read",
                "write",
                "fchmod",
                "lseek",
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "FUN_00128390": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128390",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00128390"
        },
        "FUN_00128158": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128158",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00128158"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_handle_error_00108200",
                "unaff_RBP": "filePath",
                "unaff_R12B": "shouldSetTimes",
                "unaff_R13": "fileMode",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorPointer",
                "uVar2": "errorMessage",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] copyFileAndHandleError_00108200(void)\n\n{\n  int *errorPointer;\n  undefined8 errorMessage;\n  char *filePath;\n  char shouldSetTimes;\n  ulong fileMode;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(filePath);\n  if (shouldSetTimes != '\\0') {\n    set_times();\n  }\n  returnValue._0_8_ = fileMode & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "set_times",
                "dcgettext",
                "unlink",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_and_handle_error_00108200"
        }
    },
    "used_tokens": 321783,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00116aa0",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00104000",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00116b40",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ],
        [
            "FUN_00104cc1",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114690",
            "FUN_00114460",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00116110",
            "FUN_00104ea2"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_00112c1f",
            "FUN_00112b6e",
            "FUN_00113a4d",
            "FUN_0010b0fa",
            "FUN_0010dac0",
            "FUN_0010c95e"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_0010847a",
            "FUN_001163d0"
        ]
    ],
    "locked_functions": []
}