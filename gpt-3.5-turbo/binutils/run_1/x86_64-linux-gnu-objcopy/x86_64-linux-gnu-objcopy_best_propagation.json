{
    "functions": {
        "FUN_00104000": {
            "called": [
                "FUN_001282a8"
            ],
            "calling": [],
            "code": "\nvoid FUNC_00104000(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "FUNC_00104000",
            "entrypoint": "0x00104000",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00104000": "FUNC_00104000"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00104020": {
            "additional_data": {
                "*(code *)(undefined *)0x0": {
                    "1": "indirect_jump_address"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "FUN_00104020": {
                    "1": "call_indirect_jump",
                    "20": "execute_indirect_jump",
                    "3": "execute_indirect_call"
                },
                "PTR_00104020": {
                    "1": "indirect_function_pointer"
                },
                "code": {
                    "1": "jump_function"
                },
                "codePtr": {
                    "1": "function_pointer"
                },
                "undefined": {
                    "1": "indirect_jump_target",
                    "2": "function_pointer"
                },
                "undefined *": {
                    "1": "pointer"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00104020",
            "entrypoint": "0x00104020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "code": "function_pointer",
                "undefined": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104030": {
            "called": [
                "FUN_00128000"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104030",
            "entrypoint": "0x00104030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104040": {
            "called": [
                "FUN_00128008"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104040",
            "entrypoint": "0x00104040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104050": {
            "called": [
                "FUN_00128010"
            ],
            "calling": [
                "FUN_0010b0fa"
            ],
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "current_name": "FUN_00104050",
            "entrypoint": "0x00104050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104060": {
            "called": [
                "FUN_00128018"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104060",
            "entrypoint": "0x00104060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104070": {
            "called": [
                "FUN_00128020"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "current_name": "FUN_00104070",
            "entrypoint": "0x00104070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104080": {
            "called": [
                "FUN_00128030"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104080",
            "entrypoint": "0x00104080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104090": {
            "called": [
                "FUN_00128038"
            ],
            "calling": [
                "FUN_001054af"
            ],
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "current_name": "FUN_00104090",
            "entrypoint": "0x00104090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040a0": {
            "called": [
                "FUN_00128048"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_0010b0fa",
                "FUN_0010abdd",
                "FUN_001199d0",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_00112c1f",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_001135a5",
                "FUN_0010e9a0"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "FUN_001040a0",
            "entrypoint": "0x001040a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040b0": {
            "called": [
                "FUN_00128050"
            ],
            "calling": [
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00109a32",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00107880",
                "FUN_00104966",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "FUN_001040b0",
            "entrypoint": "0x001040b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040c0": {
            "called": [
                "FUN_00128058"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_00108200"
            ],
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001040c0",
            "entrypoint": "0x001040c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040d0": {
            "called": [
                "FUN_00128060"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001040d0",
            "entrypoint": "0x001040d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040e0": {
            "called": [
                "FUN_00128068"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_00113fb0"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001040e0",
            "entrypoint": "0x001040e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040f0": {
            "called": [
                "FUN_00128080"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "current_name": "FUN_001040f0",
            "entrypoint": "0x001040f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104100": {
            "called": [
                "FUN_00128088"
            ],
            "calling": [
                "FUN_0010ae0e",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_001199d0",
                "FUN_0010a424",
                "FUN_0011378f",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104100",
            "entrypoint": "0x00104100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104110": {
            "called": [
                "FUN_00128090"
            ],
            "calling": [
                "FUN_00108b3e"
            ],
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "current_name": "FUN_00104110",
            "entrypoint": "0x00104110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104120": {
            "called": [
                "FUN_00128098"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "current_name": "FUN_00104120",
            "entrypoint": "0x00104120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104130": {
            "called": [
                "FUN_001280a0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104130",
            "entrypoint": "0x00104130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104140": {
            "called": [
                "FUN_001280a8"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "current_name": "FUN_00104140",
            "entrypoint": "0x00104140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104150": {
            "called": [
                "FUN_001280b0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "FUN_00104150",
            "entrypoint": "0x00104150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104160": {
            "called": [
                "FUN_001280b8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104160",
            "entrypoint": "0x00104160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104170": {
            "called": [
                "FUN_001280c0"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "current_name": "FUN_00104170",
            "entrypoint": "0x00104170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104180": {
            "called": [
                "FUN_001280c8"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "FUN_00104180",
            "entrypoint": "0x00104180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104190": {
            "called": [
                "FUN_001280d0"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "current_name": "FUN_00104190",
            "entrypoint": "0x00104190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041a0": {
            "called": [
                "FUN_001280d8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "current_name": "FUN_001041a0",
            "entrypoint": "0x001041a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041b0": {
            "called": [
                "FUN_001280e0"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "current_name": "FUN_001041b0",
            "entrypoint": "0x001041b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041c0": {
            "called": [
                "FUN_001280e8"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_001041c0",
            "entrypoint": "0x001041c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041d0": {
            "called": [
                "FUN_001280f8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "FUN_001041d0",
            "entrypoint": "0x001041d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041e0": {
            "called": [
                "FUN_00128100"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "FUN_001041e0",
            "entrypoint": "0x001041e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041f0": {
            "called": [
                "FUN_00128108"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "FUN_001041f0",
            "entrypoint": "0x001041f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104200": {
            "called": [
                "FUN_00128110"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "current_name": "FUN_00104200",
            "entrypoint": "0x00104200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104210": {
            "called": [
                "FUN_00128118"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104210",
            "entrypoint": "0x00104210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104220": {
            "called": [
                "FUN_00128128"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "FUN_00104220",
            "entrypoint": "0x00104220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104230": {
            "called": [
                "FUN_00128130"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104230",
            "entrypoint": "0x00104230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104240": {
            "called": [
                "FUN_00128138"
            ],
            "calling": [
                "FUN_00112996",
                "FUN_0010551d",
                "FUN_00108808",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_00119970",
                "FUN_0010ba08",
                "FUN_00112b6e",
                "FUN_00109a32",
                "FUN_0010bf86",
                "FUN_0010e2f0",
                "FUN_0010914e",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_0010c05d",
                "FUN_00116490",
                "FUN_0010bc80",
                "FUN_0010e07c",
                "FUN_00104ad6",
                "FUN_0010871c",
                "FUN_0010554f",
                "FUN_0010c892",
                "FUN_00104920",
                "FUN_00109022",
                "FUN_00114dc7",
                "FUN_00105828",
                "FUN_00108072",
                "FUN_00108916",
                "FUN_00115530",
                "FUN_0010543c",
                "FUN_00108179",
                "FUN_0011173a",
                "FUN_00113f50",
                "FUN_001199d0",
                "FUN_00114460",
                "FUN_00115b70",
                "FUN_00108b3e",
                "FUN_001086af",
                "FUN_0010808f",
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_00114e50",
                "FUN_0010882c",
                "FUN_001126c0",
                "FUN_0010e6a8",
                "FUN_0011256b",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_0010da0b",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_001053b5",
                "FUN_00108a2a",
                "FUN_00107880",
                "FUN_00114e00",
                "FUN_00114190",
                "FUN_00104cc1",
                "FUN_001083de",
                "FUN_00107976",
                "FUN_0010b6ea",
                "FUN_0010be88",
                "FUN_0010ee3f",
                "FUN_00108f08",
                "FUN_00108200",
                "FUN_00108fe8",
                "FUN_0010dac0",
                "FUN_00108375",
                "FUN_00112c1f",
                "FUN_001152b6",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010827b",
                "FUN_00119f70",
                "FUN_0010bf20",
                "FUN_00108d9a",
                "FUN_0010bd62",
                "FUN_00108fb9",
                "FUN_00114690",
                "FUN_00104a35"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "FUN_00104240",
            "entrypoint": "0x00104240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104250": {
            "called": [
                "FUN_00128140"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104250",
            "entrypoint": "0x00104250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104260": {
            "called": [
                "FUN_00128148"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_00104260",
            "entrypoint": "0x00104260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104270": {
            "called": [
                "FUN_00128150"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010a69a",
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010e7c2",
                "FUN_00108c86",
                "FUN_0010e5db",
                "FUN_0010b0fa",
                "FUN_0010a0e9",
                "FUN_0010ae0e",
                "FUN_0010e8a9",
                "FUN_0010e2f0",
                "FUN_0010d559",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00104ad6",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010554f",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_0010a83e",
                "FUN_00113fb0",
                "FUN_0010a2b9",
                "FUN_00113ede",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_00115530",
                "FUN_00104943",
                "FUN_0010e9a0",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_001125fa",
                "FUN_0010ab4d",
                "FUN_00109bbb",
                "FUN_0010a424",
                "FUN_0010a377"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104270",
            "entrypoint": "0x00104270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104280": {
            "called": [
                "FUN_00128158"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "FUN_00104280",
            "entrypoint": "0x00104280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104290": {
            "called": [
                "FUN_00128160"
            ],
            "calling": [
                "FUN_00114c80",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104290",
            "entrypoint": "0x00104290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042a0": {
            "called": [
                "FUN_00128168"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001199d0",
                "FUN_00119970",
                "FUN_00107976",
                "FUN_00104943"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001042a0",
            "entrypoint": "0x001042a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042b0": {
            "called": [
                "FUN_00128170"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010d7d4",
                "FUN_0010abdd",
                "FUN_0010aa53",
                "FUN_00114dc7",
                "FUN_0010dac0",
                "FUN_00109be3",
                "FUN_0011173a",
                "FUN_00119f70",
                "FUN_0010e2f0",
                "FUN_00109c2e",
                "FUN_0010ab4d",
                "FUN_00109ed3",
                "FUN_0010e07c",
                "FUN_0010b6ea"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "FUN_001042b0",
            "entrypoint": "0x001042b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042c0": {
            "called": [
                "FUN_00128178"
            ],
            "calling": [
                "FUN_00114cf0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001042c0",
            "entrypoint": "0x001042c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042d0": {
            "called": [
                "FUN_00128180"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001042d0",
            "entrypoint": "0x001042d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042e0": {
            "called": [
                "FUN_00128188"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "current_name": "FUN_001042e0",
            "entrypoint": "0x001042e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042f0": {
            "called": [
                "FUN_00128190"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_001042f0",
            "entrypoint": "0x001042f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104300": {
            "called": [
                "FUN_00128198"
            ],
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_001125fa",
                "FUN_00112c1f"
            ],
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "current_name": "FUN_00104300",
            "entrypoint": "0x00104300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104310": {
            "called": [
                "FUN_001281a0"
            ],
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104310",
            "entrypoint": "0x00104310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104320": {
            "called": [
                "FUN_001281a8"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00104ea2",
                "FUN_0010d21c",
                "FUN_0010554f"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "FUN_00104320",
            "entrypoint": "0x00104320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104330": {
            "called": [
                "FUN_001281b8"
            ],
            "calling": [
                "FUN_00116110",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_00104330",
            "entrypoint": "0x00104330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104340": {
            "called": [
                "FUN_001281c0"
            ],
            "calling": [
                "FUN_0011a170",
                "FUN_00114190"
            ],
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104340",
            "entrypoint": "0x00104340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104350": {
            "called": [
                "FUN_001281c8"
            ],
            "calling": [
                "FUN_00104a35"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "FUN_00104350",
            "entrypoint": "0x00104350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104360": {
            "called": [
                "FUN_001281d0"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00104360",
            "entrypoint": "0x00104360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104370": {
            "called": [
                "FUN_001281d8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_00119f70",
                "FUN_0010e2f0",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "FUN_00104370",
            "entrypoint": "0x00104370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104380": {
            "called": [
                "FUN_001281e0"
            ],
            "calling": [
                "FUN_0011a480"
            ],
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104380",
            "entrypoint": "0x00104380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104390": {
            "called": [
                "FUN_001281e8"
            ],
            "calling": [
                "FUN_0010c139",
                "FUN_0010a69a",
                "FUN_00113da9",
                "FUN_00104ea2",
                "FUN_00109b52",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010ae0e",
                "FUN_00116030",
                "FUN_00113b98",
                "FUN_0010bbd3",
                "FUN_0010bf86",
                "FUN_001163d0",
                "FUN_0010c05d",
                "FUN_0010bc80",
                "FUN_0010e07c",
                "FUN_00104ad6",
                "FUN_0010ebb0",
                "FUN_0010554f",
                "FUN_0010c7a0",
                "FUN_0011a480",
                "FUN_00116110",
                "FUN_00109022",
                "FUN_00114cf0",
                "FUN_00115530",
                "FUN_0010e9a0",
                "FUN_00112894",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_001125fa",
                "FUN_00114460",
                "FUN_0010a424",
                "FUN_00113d6e",
                "FUN_0010afd5",
                "FUN_00109a0b",
                "FUN_00116852",
                "FUN_00116b90",
                "FUN_0010a94e",
                "FUN_0010e6a8",
                "FUN_0010da0b",
                "FUN_00108c86",
                "FUN_00114c80",
                "FUN_0010a0e9",
                "FUN_0010e8a9",
                "FUN_00113c43",
                "FUN_00107880",
                "FUN_00114190",
                "FUN_00109ed3",
                "FUN_0010d882",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00113e23",
                "FUN_0010b6ea",
                "FUN_00114d60",
                "FUN_0010be88",
                "FUN_0010ee3f",
                "FUN_00112925",
                "FUN_00108f08",
                "FUN_0010a83e",
                "FUN_0010a2b9",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_00112904",
                "FUN_0010ab4d",
                "FUN_00108d9a",
                "FUN_0010bd62",
                "FUN_00113bfa",
                "FUN_0010a377",
                "FUN_00113ce0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104390",
            "entrypoint": "0x00104390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043a0": {
            "called": [
                "FUN_001281f0"
            ],
            "calling": [
                "FUN_001086af",
                "FUN_00114690",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "FUN_001043a0",
            "entrypoint": "0x001043a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043b0": {
            "called": [
                "FUN_001281f8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_001043b0",
            "entrypoint": "0x001043b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043c0": {
            "called": [
                "FUN_00128200"
            ],
            "calling": [
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00114690"
            ],
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001043c0",
            "entrypoint": "0x001043c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043d0": {
            "called": [
                "FUN_00128208"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00109b52",
                "FUN_001088ae",
                "FUN_0010554f"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "FUN_001043d0",
            "entrypoint": "0x001043d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043e0": {
            "called": [
                "FUN_00128210"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_001043e0",
            "entrypoint": "0x001043e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043f0": {
            "called": [
                "FUN_00128218"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_00108b3e",
                "FUN_00104a35"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001043f0",
            "entrypoint": "0x001043f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104400": {
            "called": [
                "FUN_00128220"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "current_name": "FUN_00104400",
            "entrypoint": "0x00104400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104410": {
            "called": [
                "FUN_00128228"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104410",
            "entrypoint": "0x00104410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104420": {
            "called": [
                "FUN_00128230"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104420",
            "entrypoint": "0x00104420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104430": {
            "called": [
                "FUN_00128238"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "FUN_00104430",
            "entrypoint": "0x00104430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104440": {
            "called": [
                "FUN_00128240"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_00104440",
            "entrypoint": "0x00104440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104450": {
            "called": [
                "FUN_00128248"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "current_name": "FUN_00104450",
            "entrypoint": "0x00104450",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104460": {
            "called": [
                "FUN_00128250"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "current_name": "FUN_00104460",
            "entrypoint": "0x00104460",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104470": {
            "called": [
                "FUN_00128258"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_00115f50",
                "FUN_0010c7a0",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00108898",
                "FUN_00108c86",
                "FUN_00115530",
                "FUN_00104943",
                "FUN_0010b0fa",
                "FUN_0010c6be",
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_0010914e",
                "FUN_00114190",
                "FUN_00115b70",
                "FUN_0010554f",
                "FUN_0010afd5"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104470",
            "entrypoint": "0x00104470",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104480": {
            "called": [
                "FUN_00128260"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104480",
            "entrypoint": "0x00104480",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104490": {
            "called": [
                "FUN_00128268"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "current_name": "FUN_00104490",
            "entrypoint": "0x00104490",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044a0": {
            "called": [
                "FUN_00128280"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104cc1",
                "FUN_00108d9a"
            ],
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "current_name": "FUN_001044a0",
            "entrypoint": "0x001044a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044b0": {
            "called": [
                "FUN_00128288"
            ],
            "calling": [
                "FUN_00112996",
                "FUN_00116b90",
                "FUN_001126c0",
                "FUN_0011256b",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_00112b6e",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_00108a2a",
                "FUN_0010bf86",
                "FUN_0010914e",
                "FUN_0010c05d",
                "FUN_0010bc80",
                "FUN_0010b6ea",
                "FUN_0010554f",
                "FUN_0010871c",
                "FUN_0010be88",
                "FUN_0010ee3f",
                "FUN_0010c892",
                "FUN_00108f08",
                "FUN_00109022",
                "FUN_00108fe8",
                "FUN_00108916",
                "FUN_00112c1f",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0011173a",
                "FUN_00119e70",
                "FUN_0010bf20",
                "FUN_001199d0",
                "FUN_0010bd62",
                "FUN_00108fb9",
                "FUN_00108b3e",
                "FUN_00104a35"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001044b0",
            "entrypoint": "0x001044b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044c0": {
            "called": [
                "FUN_00128290"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "FUN_001044c0",
            "entrypoint": "0x001044c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044d0": {
            "called": [
                "FUN_00128298"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001044d0",
            "entrypoint": "0x001044d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044e0": {
            "called": [
                "FUN_001282a0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "current_name": "FUN_001044e0",
            "entrypoint": "0x001044e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044f0": {
            "called": [
                "FUN_001282b0"
            ],
            "calling": [
                "FUN_0011283f",
                "FUN_00113f50",
                "FUN_00116b90",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001044f0",
            "entrypoint": "0x001044f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104500": {
            "called": [
                "FUN_001282b8"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "current_name": "FUN_00104500",
            "entrypoint": "0x00104500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104510": {
            "called": [
                "FUN_001282c0"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_0010d559",
                "FUN_00104943"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "FUN_00104510",
            "entrypoint": "0x00104510",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104520": {
            "called": [
                "FUN_001282c8"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "current_name": "FUN_00104520",
            "entrypoint": "0x00104520",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104530": {
            "called": [
                "FUN_001282d0"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "current_name": "FUN_00104530",
            "entrypoint": "0x00104530",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104540": {
            "called": [
                "FUN_001282d8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00104540",
            "entrypoint": "0x00104540",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104550": {
            "called": [
                "FUN_001282e0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "current_name": "FUN_00104550",
            "entrypoint": "0x00104550",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104560": {
            "called": [
                "FUN_001282e8"
            ],
            "calling": [
                "FUN_0010e2f0",
                "FUN_0010e6a8",
                "FUN_0010bba1"
            ],
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "current_name": "FUN_00104560",
            "entrypoint": "0x00104560",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104570": {
            "called": [
                "FUN_001282f0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00107880",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "current_name": "FUN_00104570",
            "entrypoint": "0x00104570",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104580": {
            "called": [
                "FUN_001282f8"
            ],
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "current_name": "FUN_00104580",
            "entrypoint": "0x00104580",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104590": {
            "called": [
                "FUN_00128300"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "current_name": "FUN_00104590",
            "entrypoint": "0x00104590",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045a0": {
            "called": [
                "FUN_00128308"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_001199d0",
                "FUN_00105828",
                "FUN_00104943"
            ],
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "current_name": "FUN_001045a0",
            "entrypoint": "0x001045a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045b0": {
            "called": [
                "FUN_00128310"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "current_name": "FUN_001045b0",
            "entrypoint": "0x001045b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045c0": {
            "called": [
                "FUN_00128318"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_001045c0",
            "entrypoint": "0x001045c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045d0": {
            "called": [
                "FUN_00128320"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001045d0",
            "entrypoint": "0x001045d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045e0": {
            "called": [
                "FUN_00128328"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0",
                "FUN_0011256b",
                "FUN_0010871c"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001045e0",
            "entrypoint": "0x001045e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045f0": {
            "called": [
                "FUN_00128330"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116110",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "current_name": "FUN_001045f0",
            "entrypoint": "0x001045f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104600": {
            "called": [
                "FUN_00128338"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "FUN_00104600",
            "entrypoint": "0x00104600",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104610": {
            "called": [
                "FUN_00128340"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "current_name": "FUN_00104610",
            "entrypoint": "0x00104610",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104620": {
            "called": [
                "FUN_00128348"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "current_name": "FUN_00104620",
            "entrypoint": "0x00104620",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104630": {
            "called": [
                "FUN_00128350"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "current_name": "FUN_00104630",
            "entrypoint": "0x00104630",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104640": {
            "called": [
                "FUN_00128358"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104640",
            "entrypoint": "0x00104640",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104650": {
            "called": [
                "FUN_00128360"
            ],
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "current_name": "FUN_00104650",
            "entrypoint": "0x00104650",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104660": {
            "called": [
                "FUN_00128370"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104660",
            "entrypoint": "0x00104660",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104670": {
            "called": [
                "FUN_00128388"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104670",
            "entrypoint": "0x00104670",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104680": {
            "called": [
                "FUN_00128390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104680",
            "entrypoint": "0x00104680",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104690": {
            "called": [
                "FUN_00128398"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "current_name": "FUN_00104690",
            "entrypoint": "0x00104690",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046a0": {
            "called": [
                "FUN_001283a0"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "current_name": "FUN_001046a0",
            "entrypoint": "0x001046a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046b0": {
            "called": [
                "FUN_001283a8"
            ],
            "calling": [
                "FUN_0010d21c"
            ],
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "current_name": "FUN_001046b0",
            "entrypoint": "0x001046b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046c0": {
            "called": [
                "FUN_001283b0"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001046c0",
            "entrypoint": "0x001046c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046d0": {
            "called": [
                "FUN_001283b8"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001046d0",
            "entrypoint": "0x001046d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046e0": {
            "called": [
                "FUN_001283c0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_001046e0",
            "entrypoint": "0x001046e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046f0": {
            "called": [
                "FUN_001283c8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_001046f0",
            "entrypoint": "0x001046f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104700": {
            "called": [
                "FUN_001283d0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "current_name": "FUN_00104700",
            "entrypoint": "0x00104700",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104710": {
            "called": [
                "FUN_001283d8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "current_name": "FUN_00104710",
            "entrypoint": "0x00104710",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104720": {
            "called": [
                "FUN_001283e0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104720",
            "entrypoint": "0x00104720",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104730": {
            "called": [
                "FUN_001283e8"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104730",
            "entrypoint": "0x00104730",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104740": {
            "called": [
                "FUN_001283f0"
            ],
            "calling": [
                "FUN_0011283f"
            ],
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104740",
            "entrypoint": "0x00104740",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104750": {
            "called": [
                "FUN_001283f8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114d60"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "FUN_00104750",
            "entrypoint": "0x00104750",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104760": {
            "called": [
                "FUN_00128400"
            ],
            "calling": [
                "FUN_00116030",
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_00119dd0",
                "FUN_001083b7"
            ],
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "current_name": "FUN_00104760",
            "entrypoint": "0x00104760",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104770": {
            "called": [
                "FUN_00128408"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104770",
            "entrypoint": "0x00104770",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104780": {
            "called": [
                "FUN_00128410"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "FUN_00104780",
            "entrypoint": "0x00104780",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104790": {
            "called": [
                "FUN_00128418"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "FUN_00104790",
            "entrypoint": "0x00104790",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047a0": {
            "called": [
                "FUN_00128420"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010e2f0",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e6a8",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "FUN_001047a0",
            "entrypoint": "0x001047a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047b0": {
            "called": [
                "FUN_00128428"
            ],
            "calling": [
                "FUN_00116030",
                "FUN_00115dc0",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "current_name": "FUN_001047b0",
            "entrypoint": "0x001047b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047c0": {
            "called": [
                "FUN_00128430"
            ],
            "calling": [
                "FUN_0010ae0e",
                "FUN_0010ee3f",
                "FUN_00115530"
            ],
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001047c0",
            "entrypoint": "0x001047c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047d0": {
            "called": [
                "FUN_00128438"
            ],
            "calling": [
                "FUN_00108d9a",
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "current_name": "FUN_001047d0",
            "entrypoint": "0x001047d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047e0": {
            "called": [
                "FUN_00128440"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010ae0e",
                "FUN_0010e8a9",
                "FUN_00109d97",
                "FUN_00109e76",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_00109dfe",
                "FUN_0010a83e",
                "FUN_0010a2b9",
                "FUN_00109cf4",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010e918",
                "FUN_0010e9a0",
                "FUN_001125fa",
                "FUN_0010ab4d",
                "FUN_0010a424",
                "FUN_0010a377"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001047e0",
            "entrypoint": "0x001047e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047f0": {
            "called": [
                "FUN_00128448"
            ],
            "calling": [
                "FUN_00108a2a",
                "FUN_00119970",
                "FUN_00108916"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "FUN_001047f0",
            "entrypoint": "0x001047f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104800": {
            "called": [
                "FUN_00128450"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_001126c0",
                "FUN_00108b3e"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104800",
            "entrypoint": "0x00104800",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104810": {
            "called": [
                "FUN_00128458"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "FUN_00104810",
            "entrypoint": "0x00104810",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104820": {
            "called": [
                "FUN_00128460"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "FUN_00104820",
            "entrypoint": "0x00104820",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104830": {
            "called": [
                "FUN_00128470"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "current_name": "FUN_00104830",
            "entrypoint": "0x00104830",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104840": {
            "called": [
                "FUN_00128478"
            ],
            "calling": [
                "FUN_00116030",
                "FUN_00115dc0",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "current_name": "FUN_00104840",
            "entrypoint": "0x00104840",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104850": {
            "called": [
                "FUN_00128480"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "FUN_00104850",
            "entrypoint": "0x00104850",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104860": {
            "called": [
                "FUN_00128488"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "current_name": "FUN_00104860",
            "entrypoint": "0x00104860",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104870": {
            "called": [
                "FUN_00128490"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "current_name": "FUN_00104870",
            "entrypoint": "0x00104870",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104880": {
            "called": [
                "FUN_00128498"
            ],
            "calling": [
                "FUN_00108d9a"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104880",
            "entrypoint": "0x00104880",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104890": {
            "called": [
                "FUN_001284a8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_001199d0",
                "FUN_00107880",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00114690",
                "FUN_0010543c"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104890",
            "entrypoint": "0x00104890",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048a0": {
            "called": [
                "FUN_001284b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "current_name": "FUN_001048a0",
            "entrypoint": "0x001048a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048b0": {
            "called": [
                "FUN_001284b8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001048b0",
            "entrypoint": "0x001048b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048c0": {
            "called": [
                "FUN_001284c0"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001048c0",
            "entrypoint": "0x001048c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048d0": {
            "called": [
                "FUN_001284c8"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "current_name": "FUN_001048d0",
            "entrypoint": "0x001048d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048e0": {
            "called": [
                "FUN_001284d8"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "current_name": "FUN_001048e0",
            "entrypoint": "0x001048e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048f0": {
            "called": [
                "FUN_001284f0"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010551d",
                "FUN_0010b948",
                "FUN_00104ea2",
                "FUN_00108466",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010ae0e",
                "FUN_00116030",
                "FUN_001163d0",
                "FUN_0010e07c",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010554f",
                "FUN_0010abdd",
                "FUN_00116110",
                "FUN_0010e9a0",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_001125fa",
                "FUN_001088ae",
                "FUN_0010a424",
                "FUN_0010afd5",
                "FUN_00116852",
                "FUN_0010c1c6",
                "FUN_00116b90",
                "FUN_0010a94e",
                "FUN_0010e6a8",
                "FUN_0011256b",
                "FUN_00108863",
                "FUN_001081e9",
                "FUN_0010b0fa",
                "FUN_0010a0e9",
                "FUN_0010e8a9",
                "FUN_0010d559",
                "FUN_00107880",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_00109b2f",
                "FUN_0010eafe",
                "FUN_0010b6ea",
                "FUN_0010ee3f",
                "FUN_0010a83e",
                "FUN_0010a2b9",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010dac0",
                "FUN_0010e918",
                "FUN_00114b84",
                "FUN_0010a377",
                "FUN_00114690",
                "FUN_00104a35"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "FUN_001048f0",
            "entrypoint": "0x001048f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048f8": {
            "called": [
                "FUN_00128500"
            ],
            "calling": [
                "FUN_00108800"
            ],
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "current_name": "FUN_001048f8",
            "entrypoint": "0x001048f8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104900": {
            "called": [
                "FUN_00128508"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "current_name": "FUN_00104900",
            "entrypoint": "0x00104900",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104908": {
            "called": [
                "FUN_001284e0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "FUN_00104908",
            "entrypoint": "0x00104908",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104910": {
            "called": [
                "FUN_001284e8"
            ],
            "calling": [
                "FUN_00116b40"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "FUN_00104910",
            "entrypoint": "0x00104910",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104918": {
            "called": [
                "FUN_001284f8"
            ],
            "calling": [
                "FUN_001163d0"
            ],
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104918",
            "entrypoint": "0x00104918",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104920": {
            "additional_data": {
                "FUN_00104920": {
                    "1": "validate_and_report_number",
                    "2": "print_bad_number_error",
                    "3": "handle_bad_number",
                    "5": "print_bad_number_error_message"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "fatal": {
                    "1": "exit_program"
                },
                "param_1": {
                    "1": "param1",
                    "2": "arg1",
                    "3": "error_code"
                },
                "param_2": {
                    "1": "var2",
                    "2": "error_message"
                },
                "param_3": {
                    "1": "unknown_parameter3",
                    "2": "arg3"
                },
                "param_4": {
                    "1": "var4",
                    "2": "arg4"
                },
                "uVar1": {
                    "1": "error_message_ptr",
                    "24": "error_message",
                    "5": "error_string"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid print_bad_number_error_message_00104920(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = get_localized_message(0,\"%s: bad number: %s\",5);\n                    \n  exit_program(error_message);\n}\n\n",
            "current_name": "print_bad_number_error_message_00104920",
            "entrypoint": "0x00104920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104920": "print_bad_number_error_message_00104920",
                "dcgettext": "get_localized_message",
                "fatal": "exit_program",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104943": {
            "additional_data": {
                "FUN_00104943": {
                    "1": "process_data",
                    "2": "print_reverse_strings",
                    "6": "print_reverse_arch_info"
                },
                "iVar1": {
                    "1": "num_value",
                    "2": "input_int",
                    "3": "converted_int",
                    "4": "int_value"
                },
                "iVar2": {
                    "1": "compare_result",
                    "4": "strcmp_result",
                    "5": "arch_index",
                    "7": "comparison_result"
                },
                "iVar7": {
                    "1": "arch_mach_iterator",
                    "11": "arch_index",
                    "2": "arch_mach_value",
                    "8": "arch_mach_index"
                },
                "iVar9": {
                    "1": "outer_loop_counter",
                    "2": "loop_index",
                    "3": "start_index"
                },
                "in_RAX": {
                    "1": "str",
                    "25": "input_string",
                    "4": "input_str"
                },
                "lVar3": {
                    "1": "loop_index",
                    "2": "iterator",
                    "3": "converted_number",
                    "7": "converted_value"
                },
                "lVar8": {
                    "1": "index2",
                    "2": "param_counter",
                    "6": "start_index",
                    "9": "param_index"
                },
                "param_11": {
                    "1": "arch_mach_info",
                    "2": "param11"
                },
                "param_13": {
                    "1": "param_address",
                    "2": "binary_data",
                    "3": "string_array"
                },
                "param_7": {
                    "1": "start_index",
                    "2": "param7",
                    "3": "max_iterations",
                    "4": "max_params"
                },
                "pcVar5": {
                    "1": "printable_arch",
                    "2": "arch_string",
                    "3": "arch_mach_str",
                    "4": "printable_string",
                    "5": "arch_mach",
                    "6": "arch_mach_string"
                },
                "sVar4": {
                    "1": "current_string_length",
                    "15": "string_length",
                    "2": "line_length",
                    "6": "str_length"
                },
                "uStack000000000000000c": {
                    "1": "stack_uint_counter",
                    "4": "indentation_level",
                    "5": "stack_var",
                    "8": "indentation"
                },
                "uVar10": {
                    "1": "loop_index",
                    "2": "length",
                    "3": "string_length",
                    "9": "loop_counter"
                },
                "uVar11": {
                    "1": "arch_loop_index",
                    "2": "arch_index",
                    "7": "arch_offset"
                },
                "uVar6": {
                    "1": "arch_name",
                    "14": "printable_arch_mach",
                    "3": "arch_mach_string",
                    "4": "printable_arch"
                },
                "unaff_R15D": {
                    "1": "stack_var",
                    "2": "param7",
                    "6": "stack_value"
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_001045a0",
                "FUN_00104480",
                "FUN_001042a0",
                "FUN_00104510",
                "FUN_00104470",
                "FUN_00104310"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nvoid print_reverse_arch_info_00104943(void)\n\n{\n  int default_value;\n  int comparison_result;\n  char *input_string;\n  long converted_value;\n  size_t string_length;\n  char *arch_mach_string;\n  undefined8 printable_arch_mach;\n  int arch_index;\n  long param_index;\n  int start_index;\n  uint stack_value;\n  ulong loop_counter;\n  uint arch_offset;\n  int max_params;\n  uint indentation;\n  undefined8 output_file;\n  long data_pointer;\n  \n  converted_value = strtol(input_string,(char **)0x0,10);\n  default_value = (int)converted_value;\n  start_index = max_params;\n  indentation = stack_value;\n  if (default_value == 0) {\n    default_value = 0x50;\n  }\n  do {\n    max_params = start_index;\n    if (output_file._4_4_ <= max_params) {\n      return;\n    }\n    param_index = (long)max_params;\n    arch_index = (default_value - indentation) + -1;\n    converted_value = param_index;\n    do {\n      start_index = (int)converted_value;\n      if (output_file._4_4_ <= start_index) break;\n      string_length = strlen(*(char **)(data_pointer + converted_value * 0x60));\n      converted_value = converted_value + 1;\n      arch_index = (arch_index - (int)string_length) + -1;\n    } while (-1 < arch_index);\n    printf(\"\\n%*s\",(ulong)(indentation + 1),&DAT_0011b4a1);\n    for (converted_value = param_index * 0x60; ((ulong)(uint)(start_index - max_params) + param_index) * 0x60 - converted_value != 0;\n        converted_value = converted_value + 0x60) {\n      printf(\"%s \",*(undefined8 *)(data_pointer + converted_value));\n    }\n    arch_index = 2;\n    putc(10,_stdout);\n    do {\n      arch_mach_string = (char *)bfd_printable_arch_mach(arch_index,0);\n      comparison_result = strcmp(arch_mach_string,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        printable_arch_mach = bfd_printable_arch_mach(arch_index,0);\n        printf(\"%*s \",(ulong)indentation,printable_arch_mach);\n        arch_offset = arch_index - 2;\n        converted_value = param_index * 0x60;\n        comparison_result = max_params;\n        while (start_index != comparison_result) {\n          arch_mach_string = *(char **)(data_pointer + converted_value);\n          if (*(char *)((long)(char **)(data_pointer + converted_value) + (ulong)arch_offset + 8) == '\\0') {\n            string_length = strlen(arch_mach_string);\n            for (loop_counter = string_length & 0xffffffff; (int)loop_counter != 0; loop_counter = (ulong)((int)loop_counter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(arch_mach_string,_stdout);\n          }\n          comparison_result = comparison_result + 1;\n          if (start_index != comparison_result) {\n            putc(0x20,_stdout);\n          }\n          converted_value = converted_value + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      arch_index = arch_index + 1;\n    } while (arch_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_reverse_arch_info_00104943",
            "entrypoint": "0x00104943",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104943": "print_reverse_arch_info_00104943",
                "iVar1": "default_value",
                "iVar2": "comparison_result",
                "iVar7": "arch_index",
                "iVar9": "start_index",
                "in_RAX": "input_string",
                "lVar3": "converted_value",
                "lVar8": "param_index",
                "param_11": "output_file",
                "param_13": "data_pointer",
                "param_7": "max_params",
                "pcVar5": "arch_mach_string",
                "sVar4": "string_length",
                "uStack000000000000000c": "indentation",
                "uVar10": "loop_counter",
                "uVar11": "arch_offset",
                "uVar6": "printable_arch_mach",
                "unaff_R15D": "stack_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104966": {
            "additional_data": {
                "*piVar1": {
                    "1": "errno_location"
                },
                "FUN_00104966": {
                    "1": "handle_file_not_found",
                    "19": "handle_file_error",
                    "2": "check_file_existence",
                    "3": "handle_file_not_found_error",
                    "4": "file_not_found_error"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "non_fatal": {
                    "1": "report_error"
                },
                "piVar1": {
                    "1": "error_ptr",
                    "18": "errno_ptr",
                    "2": "errno_location",
                    "3": "error_code"
                },
                "uVar2": {
                    "1": "err_msg",
                    "2": "error_string",
                    "26": "error_message"
                }
            },
            "called": [
                "FUN_00104890",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00113f50"
            ],
            "code": "\nundefined8 handle_file_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = get_error_message(0,\"\\'%s\\': No such file\",5);\n    report_error(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = get_error_message(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    report_error(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "current_name": "handle_file_error_00104966",
            "entrypoint": "0x00104966",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "dcgettext": "get_error_message",
                "non_fatal": "report_error",
                "piVar1": "errno_ptr",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a35": {
            "additional_data": {
                "FUN_00104a35": {
                    "1": "print_targets",
                    "29": "print_supported_targets"
                },
                "__ptr": {
                    "1": "targets",
                    "29": "target_list"
                },
                "_ptr": {
                    "1": "target_list"
                },
                "fprintf": {
                    "1": "print"
                },
                "fputc": {
                    "1": "put_character"
                },
                "lVar1": {
                    "1": "target_ptr",
                    "2": "target_id",
                    "3": "target_name",
                    "9": "current_target_value"
                },
                "param_1": {
                    "2": "target_name",
                    "29": "target"
                },
                "param_2": {
                    "1": "output",
                    "24": "output_file",
                    "4": "file"
                },
                "pcVar2": {
                    "1": "header",
                    "2": "target_message",
                    "24": "message"
                },
                "plVar3": {
                    "1": "target_ptr",
                    "23": "current_target",
                    "5": "ptr"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_00104350",
                "FUN_001043f0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "code": "\nvoid print_supported_targets_00104a35(long target,FILE *output_file)\n\n{\n  long current_target_value;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    print(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    print(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target_value = *current_target;\n    current_target = current_target + 1;\n    if (current_target_value == 0) break;\n    print(output_file,\" %s\");\n  }\n  put_character(10,output_file);\n  free(target_list);\n  return;\n}\n\n",
            "current_name": "print_supported_targets_00104a35",
            "entrypoint": "0x00104a35",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "__ptr": "target_list",
                "_ptr": "target_list",
                "fprintf": "print",
                "fputc": "put_character",
                "lVar1": "current_target_value",
                "param_1": "target",
                "param_2": "output_file",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ad6": {
            "additional_data": {
                "FUN_00104ad6": {
                    "1": "process_section_flags",
                    "26": "parse_section_flags"
                },
                "__s": {
                    "1": "remaining_flags",
                    "2": "current_flag",
                    "5": "section_flag",
                    "7": "section_name"
                },
                "auVar6": {
                    "1": "return_val",
                    "10": "result",
                    "2": "return_flags",
                    "8": "return_value"
                },
                "iVar1": {
                    "1": "compare_result",
                    "2": "result",
                    "23": "comparison_result"
                },
                "iVar5": {
                    "1": "flag_length_int",
                    "2": "string_length_int",
                    "3": "string_length",
                    "5": "section_name_length"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "b"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "d"
                },
                "pcVar3": {
                    "1": "comma_char",
                    "14": "comma_position",
                    "2": "delimiter",
                    "4": "comma_ptr"
                },
                "sVar4": {
                    "1": "input_length",
                    "2": "length",
                    "5": "flag_length",
                    "6": "section_length"
                },
                "uVar2": {
                    "3": "error_string",
                    "9": "error_message"
                },
                "unaff_R14D": {
                    "1": "section_flag_value",
                    "19": "section_flags",
                    "3": "flag",
                    "5": "flags"
                },
                "unaff_R15": {
                    "1": "compare_string",
                    "2": "current_section",
                    "8": "section_name",
                    "9": "supported_flags"
                },
                "unaff_RBP": {
                    "1": "remaining_flags",
                    "2": "current_position",
                    "3": "section_flag",
                    "4": "remaining_string",
                    "6": "next_section"
                },
                "unaff_retaddr": {
                    "27": "return_address"
                }
            },
            "called": [
                "FUN_00104290",
                "FUN_00119dd0",
                "FUN_00104270",
                "FUN_001040d0",
                "FUN_00104240",
                "FUN_001045d0",
                "FUN_00104ad6",
                "FUN_00104390",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00104ad6"
            ],
            "code": "\nundefined  [16] parse_section_flags_00104ad6(void)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *next_section;\n  char *section_name;\n  size_t section_length;\n  int section_name_length;\n  uint section_flags;\n  char *supported_flags;\n  undefined result [16];\n  undefined8 return_address;\n  \n  do {\n    section_flags = section_flags | 0x2000;\n    section_name = next_section;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (section_name == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = section_flags;\n                result._8_8_ = return_address;\n                return result;\n              }\n              comma_position = strchr(section_name,0x2c);\n              if (comma_position == (char *)0x0) {\n                section_length = strlen(section_name);\n                section_name_length = (int)section_length;\n                next_section = (char *)0x0;\n              }\n              else {\n                next_section = comma_position + 1;\n                section_name_length = (int)comma_position - (int)section_name;\n              }\n              section_length = (size_t)section_name_length;\n              comparison_result = strncasecmp(supported_flags,section_name,section_length);\n              if (comparison_result != 0) break;\n              section_flags = section_flags | 1;\n              section_name = next_section;\n            }\n            comparison_result = strncasecmp(\"load\",section_name,section_length);\n            if (comparison_result != 0) break;\n            section_flags = section_flags | 2;\n            section_name = next_section;\n          }\n          comparison_result = strncasecmp(\"noload\",section_name,section_length);\n          if (comparison_result != 0) break;\n          section_flags = section_flags | 0x200;\n          section_name = next_section;\n        }\n        comparison_result = strncasecmp(\"readonly\",section_name,section_length);\n        if (comparison_result != 0) break;\n        section_flags = section_flags | 8;\n        section_name = next_section;\n      }\n      comparison_result = strncasecmp(\"debug\",section_name,section_length);\n      if (comparison_result == 0) break;\n      comparison_result = strncasecmp(\"code\",section_name,section_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 0x10;\n        section_name = next_section;\n      }\n      else {\n        comparison_result = strncasecmp(\"data\",section_name,section_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x20;\n          section_name = next_section;\n        }\n        else {\n          comparison_result = strncasecmp(\"rom\",section_name,section_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 0x40;\n            section_name = next_section;\n          }\n          else {\n            comparison_result = strncasecmp(\"exclude\",section_name,section_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x8000;\n              section_name = next_section;\n            }\n            else {\n              comparison_result = strncasecmp(\"share\",section_name,section_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x8000000;\n                section_name = next_section;\n              }\n              else {\n                comparison_result = strncasecmp(\"contents\",section_name,section_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x100;\n                  section_name = next_section;\n                }\n                else {\n                  comparison_result = strncasecmp(\"merge\",section_name,section_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x800000;\n                    section_name = next_section;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"strings\",section_name,section_length);\n                    if (comparison_result != 0) {\n                      comma_position = (char *)xmalloc((long)(section_name_length + 1));\n                      strncpy(comma_position,section_name,section_length);\n                      comma_position[section_length] = '\\0';\n                      error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      non_fatal(error_message,comma_position);\n                      error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      fatal(error_message,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    section_flags = section_flags | 0x1000000;\n                    section_name = next_section;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "parse_section_flags_00104ad6",
            "entrypoint": "0x00104ad6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "__s": "section_name",
                "auVar6": "result",
                "iVar1": "comparison_result",
                "iVar5": "section_name_length",
                "pcVar3": "comma_position",
                "sVar4": "section_length",
                "uVar2": "error_message",
                "unaff_R14D": "section_flags",
                "unaff_R15": "supported_flags",
                "unaff_RBP": "next_section",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104bba": {
            "additional_data": {
                "FUN_00104bba": {
                    "1": "check_and_set_memory_properties",
                    "2": "check_and_update_flags",
                    "8": "check_and_set_flags"
                },
                "in_EAX": {
                    "1": "permissions",
                    "15": "flags",
                    "2": "eax",
                    "3": "eax_flag",
                    "4": "eax_flags",
                    "5": "eax_value"
                },
                "uVar1": {
                    "1": "error_string",
                    "16": "error_message",
                    "3": "error_msg"
                },
                "unaff_EBP": {
                    "1": "control_bits",
                    "2": "flags",
                    "3": "ebp_flags",
                    "4": "ebp",
                    "7": "ebp_value"
                },
                "unaff_R14": {
                    "1": "register_offset",
                    "2": "r14_offset",
                    "3": "memory_address",
                    "4": "address",
                    "7": "r14_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00114190"
            ],
            "code": "\nvoid check_and_set_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 error_message;\n  uint ebp_value;\n  long r14_value;\n  \n  if ((flags & 2) != 0) {\n    error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    fatal(error_message);\n  }\n  if ((((flags & 8) == 0) || ((ebp_value & 0x10) == 0)) && ((ebp_value & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((ebp_value & 0x40) == 0)) && ((ebp_value & 0x60) != 0x60)) {\n      *(uint *)(r14_value + 0x14) = flags | ebp_value;\n      return;\n    }\n    error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    fatal(error_message);\n  }\n  error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  fatal(error_message);\n}\n\n",
            "current_name": "check_and_set_flags_00104bba",
            "entrypoint": "0x00104bba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "error_message",
                "unaff_EBP": "ebp_value",
                "unaff_R14": "r14_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c36": {
            "additional_data": {
                "FUN_00104c36": {
                    "1": "parse_configuration_file",
                    "22": "process_lines",
                    "5": "parse_input_lines"
                },
                "FUN_00104d1c": {
                    "1": "reverse_bytes"
                },
                "LAB_00104c3f": {
                    "1": "skip_whitespace"
                },
                "LAB_00114553": {
                    "1": "handle_comment"
                },
                "LAB_00114599": {
                    "1": "handle_end_of_line"
                },
                "LAB_001145e6": {
                    "1": "handle_indentation"
                },
                "LAB_00114676": {
                    "1": "handle_newline"
                },
                "bVar4": {
                    "1": "temp_char",
                    "11": "next_char",
                    "2": "current_char"
                },
                "dcgettext": {
                    "1": "get_translated_message"
                },
                "htab_find_slot": {
                    "1": "find_empty_slot"
                },
                "in_CL": {
                    "1": "current_char_value",
                    "2": "current_char_code",
                    "21": "current_char",
                    "4": "current_character"
                },
                "in_stack_00000008": {
                    "1": "user_data",
                    "2": "message",
                    "3": "error_msg",
                    "4": "format_string",
                    "5": "file_name",
                    "6": "filename"
                },
                "in_stack_00000010": {
                    "1": "output_ptr",
                    "2": "return_value_ptr",
                    "3": "result",
                    "4": "return_value",
                    "7": "return_address"
                },
                "non_fatal": {
                    "1": "report_error"
                },
                "pbVar2": {
                    "1": "next_line_ptr"
                },
                "pbVar3": {
                    "1": "next_character",
                    "2": "ptr",
                    "3": "current_char",
                    "4": "temp_pointer",
                    "8": "next_char"
                },
                "pbVar3_2": {
                    "1": "current_char_ptr_2"
                },
                "pbVar4": {
                    "1": "temp_value",
                    "4": "next_char"
                },
                "pbVar5": {
                    "1": "previous_line",
                    "2": "current_pos",
                    "3": "current_char",
                    "5": "current_char_ptr"
                },
                "pbVar5_1": {
                    "1": "current_pointer_1"
                },
                "pbVar5_2": {
                    "1": "current_line_ptr_2"
                },
                "pbVar5_3": {
                    "1": "current_pointer_3"
                },
                "ppbVar2": {
                    "1": "line_slot_ptr",
                    "3": "slot",
                    "4": "hash_table_slot",
                    "6": "slot_pointer",
                    "8": "slot_ptr"
                },
                "uVar1": {
                    "1": "translation",
                    "2": "translated_message",
                    "5": "error_string",
                    "9": "error_message"
                },
                "unaff_EBP": {
                    "1": "unaff_line_num",
                    "16": "line_number",
                    "3": "line_index",
                    "5": "line_counter",
                    "6": "line_count"
                },
                "unaff_R13": {
                    "1": "config_data",
                    "2": "return_address",
                    "3": "callback_function",
                    "7": "filename"
                },
                "unaff_R14": {
                    "1": "line",
                    "2": "last_line",
                    "3": "line_end",
                    "6": "line_start"
                },
                "unaff_R15": {
                    "1": "previous_line",
                    "5": "line_start",
                    "7": "line_end"
                },
                "unaff_RBX": {
                    "1": "line_start",
                    "15": "current_line",
                    "2": "line",
                    "3": "line_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104c36(void)\n\n{\n  undefined8 error_message;\n  byte **slot_ptr;\n  byte *next_char;\n  byte current_char;\n  byte next_char;\n  byte *current_line;\n  int line_number;\n  byte *current_char_ptr;\n  undefined8 filename;\n  byte *line_start;\n  byte *line_end;\n  undefined8 filename;\n  undefined8 *return_address;\n  \n  do {\n    current_char_ptr = line_end;\n    if (current_char == 9) goto skip_whitespace;\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto handle_newline;\n      if (current_char == 0) goto handle_end_of_line;\n      current_char = current_char_ptr[1];\n      current_char_ptr = current_char_ptr + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nhandle_newline:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto handle_indentation;\n    }\n    else {\nhandle_indentation:\n      next_char = current_char_ptr[1];\n      if ((((((next_char == 9) || (next_char == 0x20)) &&\n            ((next_char = current_char_ptr[2], next_char == 9 || (next_char == 0x20)))) &&\n           ((next_char = current_char_ptr[3], next_char == 9 || (next_char == 0x20)))) &&\n          ((next_char = current_char_ptr[4], next_char == 9 || (next_char == 0x20)))) &&\n         ((next_char = current_char_ptr[5], next_char == 9 || (next_char == 0x20)))) {\n        next_char = current_char_ptr[6];\n        next_char = current_char_ptr + 6;\n        if ((next_char == 9) || (next_char == 0x20)) {\n          do {\n            do {\n              next_char = next_char[1];\n              next_char = next_char + 1;\n            } while (next_char == 0x20);\n          } while (next_char == 9);\n        }\n      }\n      if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) {\n        error_message = get_translated_message(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        log_non_fatal_error(error_message,filename,line_number);\n      }\n    }\nhandle_end_of_line:\n    *current_char_ptr = 0;\n    if (line_end < current_char_ptr) {\n      slot_ptr = (byte **)find_slot_in_hash_table();\n      *slot_ptr = line_end;\n    }\n    line_number = line_number + 1;\n    current_char_ptr = current_line;\n    if (line_start[1] == 0) {\n      *return_address = filename;\n      return;\n    }\n    for (; next_char = *current_char_ptr, line_start = current_char_ptr, next_char != 10; current_char_ptr = current_char_ptr + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          next_char = current_char_ptr + 1;\n          goto handle_comment;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_char_ptr = 0;\n          next_char = current_char_ptr + 1;\n          if (current_char_ptr[1] == 10) {\n            next_char = current_char_ptr + 2;\n            line_start = current_char_ptr + 1;\n          }\n          goto handle_comment;\n        }\n        if (next_char == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_char_ptr = 0;\n    if (current_char_ptr[1] == 0xd) {\n      line_start = current_char_ptr + 1;\n      next_char = current_char_ptr + 2;\n    }\n    else {\n      next_char = current_char_ptr + 1;\n    }\nhandle_comment:\n    current_char = *current_line;\n    line_end = current_line;\n    while (current_line = next_char, current_char == 0x20) {\nskip_whitespace:\n      current_char_ptr = line_end + 1;\n      line_end = line_end + 1;\n      next_char = current_line;\n      current_char = *current_char_ptr;\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_lines_00104c36",
            "entrypoint": "0x00104c36",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "LAB_00104c3f": "skip_whitespace",
                "LAB_00114553": "handle_comment",
                "LAB_00114599": "handle_end_of_line",
                "LAB_001145e6": "handle_indentation",
                "LAB_00114676": "handle_newline",
                "bVar4": "next_char",
                "dcgettext": "get_translated_message",
                "htab_find_slot": "find_slot_in_hash_table",
                "in_CL": "current_char",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "return_address",
                "non_fatal": "log_non_fatal_error",
                "pbVar2": "next_char",
                "pbVar3": "next_char",
                "pbVar5": "current_char_ptr",
                "ppbVar2": "slot_ptr",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "filename",
                "unaff_R14": "line_start",
                "unaff_R15": "line_end",
                "unaff_RBX": "current_line"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104cc1": {
            "additional_data": {
                "FUN_00104cc1": {
                    "1": "parse_file",
                    "11": "process_lines",
                    "2": "parse_input_lines",
                    "3": "process_input_lines",
                    "9": "parse_lines"
                },
                "bVar4": {
                    "1": "temp_char",
                    "2": "ch",
                    "3": "current_char",
                    "4": "current_byte",
                    "7": "next_char"
                },
                "bVar5": {
                    "1": "current_byte"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "get_error_message"
                },
                "htab_find_slot": {
                    "1": "find_slot_in_htab",
                    "2": "find_slot"
                },
                "in_R10": {
                    "1": "buffer",
                    "2": "current_char",
                    "3": "line_start",
                    "5": "line_ptr",
                    "8": "line_end"
                },
                "non_fatal": {
                    "1": "report_error"
                },
                "param_7": {
                    "1": "error_msg",
                    "2": "file_name",
                    "3": "param_4",
                    "5": "line_number",
                    "6": "error_message"
                },
                "param_8": {
                    "1": "return_ptr",
                    "2": "param_2",
                    "3": "param_8",
                    "5": "result",
                    "6": "output"
                },
                "param_9": {
                    "1": "filename",
                    "2": "input",
                    "4": "input_line",
                    "6": "current_line",
                    "9": "line"
                },
                "pbVar1": {
                    "1": "next_char"
                },
                "pbVar2": {
                    "1": "current_character"
                },
                "pbVar3": {
                    "1": "temp_byte",
                    "16": "current_char",
                    "2": "current_byte"
                },
                "pbVar4": {
                    "1": "current_character_3"
                },
                "pbVar5": {
                    "1": "buffer_ptr",
                    "2": "current_char",
                    "5": "line_end",
                    "6": "line_start"
                },
                "ppbVar2": {
                    "1": "slot_pointer",
                    "14": "slot",
                    "2": "hash_slot",
                    "9": "slot_ptr"
                },
                "process_lines_00104c36": {
                    "1": "process_regular_lines"
                },
                "process_lines_00104d1c": {
                    "1": "handle_hash",
                    "2": "process_comment_lines"
                },
                "report_data_00119ed0": {
                    "4": "report_data"
                },
                "uVar1": {
                    "1": "translation",
                    "2": "message",
                    "7": "error_msg",
                    "8": "error_message"
                },
                "unaff_EBP": {
                    "1": "line_length",
                    "10": "line_number",
                    "11": "line_count",
                    "2": "line_num",
                    "6": "line_counter"
                },
                "unaff_R13": {
                    "1": "translation_context",
                    "2": "param_6",
                    "3": "param_1",
                    "4": "result"
                },
                "unaff_R14": {
                    "1": "last_line",
                    "2": "param_7",
                    "3": "line_start",
                    "4": "current_char",
                    "5": "current_line"
                },
                "unaff_R15": {
                    "1": "found_line",
                    "2": "param_8",
                    "3": "last_line",
                    "5": "line_start",
                    "6": "line_end"
                },
                "unaff_RBX": {
                    "1": "start_of_line",
                    "2": "current_char",
                    "3": "next_line",
                    "5": "next_char",
                    "7": "line_start"
                }
            },
            "called": [
                "FUN_00104c36",
                "FUN_00104d1c",
                "FUN_00104cc1",
                "FUN_00104240",
                "FUN_00119ed0",
                "FUN_001044a0"
            ],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104cc1(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *current_char;\n  byte next_char;\n  byte *line_start;\n  byte *line_start;\n  int line_count;\n  byte *line_end;\n  undefined8 return_value;\n  byte *current_line;\n  byte *line_end;\n  undefined8 error_message;\n  undefined8 *output;\n  byte *line;\n  \ncode_r0x00104cc1:\n  line = line_end;\n  error_message = get_error_message(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error(error_message,error_message,line_count);\n  line_start = line_start;\n  line_end = line;\nLAB_00114599:\n  do {\n    *line_end = 0;\n    if (line_end < line_end) {\n      slot = (byte **)find_slot();\n      *slot = line_end;\n    }\n    line_count = line_count + 1;\n    current_char = line_start;\n    if (current_line[1] == 0) {\n      *output = return_value;\n      return;\n    }\n    for (; next_char = *current_char, current_line = current_char, next_char != 10; current_char = current_char + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          line_start = current_char + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_char = 0;\n          line_start = current_char + 1;\n          if (current_char[1] == 10) {\n            line_start = current_char + 2;\n            current_line = current_char + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          process_comment_lines();\n          return;\n        }\n      }\n    }\n    *current_char = 0;\n    if (current_char[1] == 0xd) {\n      current_line = current_char + 1;\n      line_start = current_char + 2;\n    }\n    else {\n      line_start = current_char + 1;\n    }\nLAB_00114553:\n    next_char = *line_start;\n    line_end = line_start;\n    while ((next_char == 0x20 || (line_end = line_end, next_char == 9))) {\n      line_start = line_end + 1;\n      line_end = line_end + 1;\n      next_char = *line_start;\n    }\n    do {\n      line_start = line_start;\n      if ((next_char == 10) || (next_char == 0xd)) goto LAB_00114676;\n      if (next_char == 0) goto LAB_00114599;\n      next_char = line_end[1];\n      line_end = line_end + 1;\n    } while ((next_char != 0x20) && (next_char != 9));\n    if ((char)next_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (next_char & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    next_char = line_end[1];\n    if ((((((next_char == 9) || (next_char == 0x20)) && ((next_char = line_end[2], next_char == 9 || (next_char == 0x20)))\n          ) && ((next_char = line_end[3], next_char == 9 || (next_char == 0x20)))) &&\n        ((next_char = line_end[4], next_char == 9 || (next_char == 0x20)))) &&\n       ((next_char = line_end[5], next_char == 9 || (next_char == 0x20)))) {\n      next_char = line_end[6];\n      current_char = line_end + 6;\n      if ((next_char == 9) || (next_char == 0x20)) {\n        do {\n          do {\n            next_char = current_char[1];\n            current_char = current_char + 1;\n          } while (next_char == 0x20);\n        } while (next_char == 9);\n      }\n    }\n    if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "current_name": "process_lines_00104cc1",
            "entrypoint": "0x00104cc1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "bVar4": "next_char",
                "bVar5": "current_byte",
                "dcgettext": "get_error_message",
                "htab_find_slot": "find_slot",
                "in_R10": "line_end",
                "non_fatal": "print_error",
                "param_7": "error_message",
                "param_8": "output",
                "param_9": "line",
                "pbVar2": "char_pointer",
                "pbVar3": "current_char",
                "pbVar5": "line_start",
                "ppbVar2": "slot",
                "process_lines_00104d1c": "process_comment_lines",
                "uVar1": "error_message",
                "unaff_EBP": "line_count",
                "unaff_R13": "return_value",
                "unaff_R14": "current_line",
                "unaff_R15": "line_end",
                "unaff_RBX": "line_start"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d1c": {
            "additional_data": {
                "FUN_00104d1c": {
                    "1": "parse_and_process_lines",
                    "10": "process_lines",
                    "2": "parse_file",
                    "6": "parse_lines",
                    "8": "parse_input_lines"
                },
                "bVar4": {
                    "1": "current_char2",
                    "13": "current_char",
                    "2": "current_char_value",
                    "5": "current_byte"
                },
                "in_stack_00000008": {
                    "1": "source_file",
                    "10": "filename",
                    "2": "file_name",
                    "5": "format_string"
                },
                "in_stack_00000010": {
                    "1": "error",
                    "13": "return_address",
                    "2": "callback_data",
                    "3": "error_ptr"
                },
                "pbVar2": {
                    "1": "line_ptr"
                },
                "pbVar3": {
                    "1": "space_ptr",
                    "2": "ptr",
                    "3": "rubbish_ptr"
                },
                "pbVar4": {
                    "1": "next_character"
                },
                "pbVar5": {
                    "1": "next_character",
                    "13": "next_line",
                    "4": "next_line_start",
                    "7": "next_line_ptr"
                },
                "pbVar6": {
                    "1": "next_character_temp",
                    "2": "temp_char",
                    "3": "current_line",
                    "4": "next_char",
                    "5": "current_line_ptr"
                },
                "pbVar7": {
                    "1": "next_line_char",
                    "2": "next_character",
                    "3": "next_char_ptr",
                    "5": "next_char"
                },
                "ppbVar2": {
                    "1": "line_slot",
                    "10": "hash_table_slot",
                    "3": "hash_slot",
                    "4": "slot"
                },
                "uVar1": {
                    "1": "return_msg",
                    "2": "error_msg",
                    "5": "error_string",
                    "9": "error_message"
                },
                "unaff_EBP": {
                    "1": "counter",
                    "14": "line_count",
                    "6": "line_number",
                    "7": "line_counter"
                },
                "unaff_R13": {
                    "1": "file_descriptor",
                    "2": "file_path",
                    "3": "message",
                    "4": "filename",
                    "5": "error_message"
                },
                "unaff_R14": {
                    "1": "current_line_start_ptr",
                    "13": "current_line",
                    "2": "line",
                    "3": "current_line_ptr",
                    "8": "line_start"
                },
                "unaff_R15": {
                    "1": "current_line_end_ptr",
                    "11": "current_char",
                    "2": "current_character",
                    "3": "line_ptr",
                    "6": "line_end"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104d1c(void)\n\n{\n  undefined8 error_message;\n  byte **hash_table_slot;\n  byte *rubbish_ptr;\n  byte current_char;\n  byte *next_line;\n  int line_count;\n  byte *current_line_ptr;\n  undefined8 error_message;\n  byte *next_char;\n  byte *current_line;\n  byte *current_char;\n  undefined8 filename;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_char = *current_line;\n    next_char = current_line;\n    if (current_char == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_char = current_line + 1;\n        next_line = current_line + 2;\n      }\n      else {\n        next_line = current_line + 1;\n      }\n    }\n    else if ((char)current_char < '\\v') {\n      if (current_char != 0) goto LAB_00114520;\n      next_line = current_line + 1;\n    }\n    else {\n      if (current_char != 0xd) break;\n      *current_line = 0;\n      next_line = current_line + 1;\n      if (current_line[1] == 10) {\n        next_line = current_line + 2;\n        next_char = current_line + 1;\n      }\n    }\n    current_char = *current_char;\n    while ((current_char == 0x20 || (current_line_ptr = current_char, current_char == 9))) {\n      current_line_ptr = current_char + 1;\n      current_char = current_char + 1;\n      current_char = *current_line_ptr;\n    }\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = current_line_ptr[1];\n      current_line_ptr = current_line_ptr + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_char = current_line_ptr[1];\n      if ((((((current_char == 9) || (current_char == 0x20)) &&\n            ((current_char = current_line_ptr[2], current_char == 9 || (current_char == 0x20)))) &&\n           ((current_char = current_line_ptr[3], current_char == 9 || (current_char == 0x20)))) &&\n          ((current_char = current_line_ptr[4], current_char == 9 || (current_char == 0x20)))) &&\n         ((current_char = current_line_ptr[5], current_char == 9 || (current_char == 0x20)))) {\n        current_char = current_line_ptr[6];\n        rubbish_ptr = current_line_ptr + 6;\n        if ((current_char == 9) || (current_char == 0x20)) {\n          do {\n            do {\n              current_char = rubbish_ptr[1];\n              rubbish_ptr = rubbish_ptr + 1;\n            } while (current_char == 0x20);\n          } while (current_char == 9);\n        }\n      }\n      if ((0xd < current_char) || ((-0x2402L >> (current_char & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(error_message,filename,line_count);\n      }\n    }\nLAB_00114599:\n    *current_line_ptr = 0;\n    if (current_char < current_line_ptr) {\n      hash_table_slot = (byte **)htab_find_slot();\n      *hash_table_slot = current_char;\n    }\n    line_count = line_count + 1;\n    current_line = next_line;\n    current_char = next_line;\n    if (next_char[1] == 0) {\n      *return_address = error_message;\n      return;\n    }\n  } while( true );\n  if (current_char == 0x23) {\n    process_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "current_name": "process_lines_00104d1c",
            "entrypoint": "0x00104d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "bVar4": "current_char",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "return_address",
                "pbVar2": "current_char",
                "pbVar3": "rubbish_ptr",
                "pbVar5": "next_line",
                "pbVar6": "current_line_ptr",
                "pbVar7": "next_char",
                "ppbVar2": "hash_table_slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_count",
                "unaff_R13": "error_message",
                "unaff_R14": "current_line",
                "unaff_R15": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d25": {
            "additional_data": {
                "FUN_00104d25": {
                    "1": "initialize_and_free_resources",
                    "2": "initialize_and_cleanup",
                    "4": "initialize_program",
                    "6": "initialize_and_print_error",
                    "9": "initialize_and_print_message"
                },
                "error_code1": {
                    "3": "code1"
                },
                "error_code2": {
                    "3": "code2"
                },
                "error_code3": {
                    "3": "code3"
                },
                "error_code4": {
                    "3": "code4"
                },
                "param_7": {
                    "1": "output_message",
                    "10": "error_message",
                    "2": "unused_param",
                    "3": "param",
                    "6": "message"
                },
                "print_error_message_001126c0": {
                    "1": "display_error_message",
                    "30": "print_error_message"
                },
                "remove_and_free_directory_00114b84": {
                    "1": "cleanup_directory_and_free_memory",
                    "11": "remove_and_free_directory",
                    "14": "cleanup_directory",
                    "3": "clean_up_directory"
                },
                "undefined8 param_7": {
                    "1": "param_error_message"
                }
            },
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid initialize_and_print_message_00104d25(void)\n\n{\n  undefined8 error_message;\n  \n  DAT_00127a20 = 1;\n  bfd_nonfatal_message(0,error_message,0,0);\n  cleanup_directory();\n  return;\n}\n\n",
            "current_name": "initialize_and_print_message_00104d25",
            "entrypoint": "0x00104d25",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d25": "initialize_and_print_message_00104d25",
                "param_7": "error_message",
                "remove_and_free_directory_00114b84": "cleanup_directory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ea2": {
            "additional_data": {
                "DAT_00127a20": {
                    "1": "error_flag"
                },
                "FUNC_00114e50": {
                    "1": "calculate_difference"
                },
                "FUN_00104ea2": {
                    "1": "copy_and_extract_archive",
                    "10": "copy_archive_files",
                    "2": "copy_and_close_archive",
                    "9": "copy_archive"
                },
                "LVar12": {
                    "1": "loop_var"
                },
                "LVar14": {
                    "1": "loop_var2"
                },
                "LuVar11": {
                    "1": "result"
                },
                "PTR_001279c9": {
                    "1": "verbose_flag"
                },
                "PTR_001279cb": {
                    "1": "archive_flag"
                },
                "PTR_00127a20": {
                    "1": "error_occurred"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "bVar17": {
                    "1": "unknown",
                    "2": "byte_val",
                    "3": "byte_var",
                    "4": "byte_value"
                },
                "bfd_bread": {
                    "1": "read_from_file"
                },
                "bfd_bwrite": {
                    "1": "write_to_file"
                },
                "bfd_close": {
                    "1": "close"
                },
                "bfd_close_all_done": {
                    "1": "close_all_and_done"
                },
                "bfd_get_arch": {
                    "1": "get_architecture"
                },
                "bfd_get_archive_filename": {
                    "1": "get_archive_filename"
                },
                "bfd_nonfatal_message": {
                    "1": "print_nonfatal_message"
                },
                "bfd_openr": {
                    "1": "open_read"
                },
                "bfd_openr_next_archived_file": {
                    "1": "open_next_archived_file"
                },
                "bfd_openw": {
                    "1": "open_write"
                },
                "cVar1": {
                    "1": "copy_result",
                    "2": "copy_successful",
                    "3": "success_flag",
                    "5": "result",
                    "6": "success"
                },
                "concat": {
                    "1": "concatenate_strings"
                },
                "copy_archive_001052a2": {
                    "1": "copy_archive"
                },
                "copy_object": {
                    "1": "copy_file_object"
                },
                "create_temp_directory_0011a0e0": {
                    "1": "create_temporary_directory"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "free": {
                    "1": "release_memory"
                },
                "get_formatted_string_001125fa": {
                    "1": "get_formatted_string_001125fa",
                    "2": "get_formatted_string"
                },
                "iVar2": {
                    "1": "arch_value",
                    "2": "arch",
                    "4": "arch_type",
                    "9": "architecture"
                },
                "in_stack_00000030": {
                    "1": "check_format_flag",
                    "2": "is_recursive"
                },
                "lVar12": {
                    "1": "temporary_directory_length",
                    "2": "bytes_remaining",
                    "5": "remaining_size",
                    "9": "file_size"
                },
                "lVar14": {
                    "1": "read_write_size",
                    "2": "read_size",
                    "4": "chunk_size",
                    "5": "bytes_written",
                    "6": "buffer_size"
                },
                "lVar5": {
                    "1": "read_write_result",
                    "15": "bytes_read"
                },
                "make_tempdir": {
                    "1": "create_temp_directory"
                },
                "non_fatal": {
                    "1": "print_non_fatal_error"
                },
                "paramTempdirAddress": {
                    "1": "close_temp_address"
                },
                "param_1": {
                    "1": "param_archives"
                },
                "param_10": {
                    "1": "input_format",
                    "2": "archive_format",
                    "3": "input_file_path"
                },
                "param_11": {
                    "1": "flags",
                    "2": "output_format",
                    "3": "file_mode",
                    "5": "open_mode"
                },
                "param_18": {
                    "1": "param_file_permissions",
                    "11": "file_permissions",
                    "2": "output_file_permissions",
                    "6": "file_permission"
                },
                "param_19": {
                    "1": "input_file_size",
                    "12": "file_size",
                    "2": "archive_file_size",
                    "3": "total_file_size"
                },
                "param_2": {
                    "1": "input_file_size"
                },
                "param_3": {
                    "1": "output_file_size"
                },
                "param_7": {
                    "1": "archive_file",
                    "2": "archive_file_path",
                    "4": "input_file",
                    "5": "output_file_path"
                },
                "param_8": {
                    "1": "temp_dir_info_ptr",
                    "2": "file_size_ptr",
                    "3": "bytes_copied"
                },
                "param_9": {
                    "1": "param_temp_dir",
                    "2": "temp_directory_path",
                    "3": "temp_directory",
                    "8": "temp_dir_path"
                },
                "pcVar10": {
                    "1": "archive_filename",
                    "3": "file_name",
                    "4": "filename",
                    "8": "error_message"
                },
                "pcVar13": {
                    "1": "bfd_close_function",
                    "16": "close_function",
                    "2": "close_func"
                },
                "pcVar15": {
                    "1": "archive_member_path",
                    "2": "path_component"
                },
                "pcVar7": {
                    "1": "current_path_component",
                    "3": "current_path",
                    "6": "current_char"
                },
                "piVar9": {
                    "1": "error_no_ptr",
                    "2": "errno_location",
                    "4": "error_number"
                },
                "ppcVar10": {
                    "1": "temp_dir_path"
                },
                "ppcVar13": {
                    "1": "close_func",
                    "2": "close_function"
                },
                "ppcVar15": {
                    "1": "archive_file_path"
                },
                "ppcVar3": {
                    "1": "temp_file_path",
                    "2": "stat_result",
                    "8": "archived_file"
                },
                "ppcVar6": {
                    "1": "bfd_ptr",
                    "11": "output_file",
                    "2": "write_file",
                    "7": "archive_file"
                },
                "ppcVar7": {
                    "1": "filename"
                },
                "ppvVar4": {
                    "1": "buffer"
                },
                "print_error_message_001126c0": {
                    "1": "print_error_message"
                },
                "print_error_message_0011a110": {
                    "1": "print_error_message_0011a110"
                },
                "printf": {
                    "1": "print"
                },
                "psVar16": {
                    "1": "file_stat_ptr",
                    "2": "stat_pointer",
                    "4": "file_stat"
                },
                "puVar13": {
                    "1": "current_temp_dir"
                },
                "puVar8": {
                    "1": "archive_ptr",
                    "2": "temp_dir",
                    "5": "temp_dir_info"
                },
                "pvVar4": {
                    "1": "memory_pointer",
                    "2": "temp_buffer",
                    "4": "buffer"
                },
                "remove_and_free_directory_00114b84": {
                    "1": "remove_and_free_directory_00114b84",
                    "2": "remove_and_free_directory"
                },
                "report_data_00119ed0": {
                    "1": "report_data"
                },
                "rmdir": {
                    "1": "remove_directory"
                },
                "set_file_time_0011a350": {
                    "1": "set_file_time_0011a350",
                    "2": "set_file_time"
                },
                "set_times": {
                    "1": "set_file_times"
                },
                "stack0x00000050": {
                    "1": "file_info_buffer"
                },
                "stat": {
                    "1": "get_file_info"
                },
                "strerror": {
                    "1": "get_error_message"
                },
                "uVar11": {
                    "1": "unint_var",
                    "5": "error_message"
                },
                "unaff_EBX": {
                    "1": "archive_error",
                    "15": "stat_error",
                    "2": "stat_error_flag",
                    "3": "stat_result"
                },
                "unaff_R12": {
                    "1": "original_path",
                    "11": "archive_path",
                    "2": "output_file_path",
                    "3": "temp_dir_path"
                },
                "unaff_R13": {
                    "1": "temp_info_ptr",
                    "3": "tempdir_info",
                    "5": "temp_dir_list"
                },
                "unaff_R15": {
                    "1": "input_file_list",
                    "2": "input_file",
                    "3": "archive_file_list",
                    "4": "archived_files"
                },
                "unaff_RBP": {
                    "1": "stat_info",
                    "11": "file_info",
                    "4": "file_stat",
                    "6": "stat_buffer"
                },
                "unaff_retaddr": {
                    "2": "return_addr",
                    "23": "return_address"
                },
                "unlink": {
                    "1": "delete_file"
                },
                "weight-1": {
                    "1": "unused_variable1"
                },
                "weight-2": {
                    "1": "unused_variable2"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104820",
                "FUN_00104ea2",
                "FUN_00104870",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104690",
                "FUN_001040c0",
                "FUN_00104810",
                "FUN_001040b0",
                "FUN_00104908",
                "FUN_00104900",
                "FUN_00104570",
                "FUN_00104240",
                "FUN_0011a0e0",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_001043d0",
                "FUN_001044f0",
                "FUN_001284e0",
                "FUN_0011a110",
                "FUN_00104890",
                "FUN_00104320",
                "FUN_001042a0",
                "FUN_00128508",
                "FUN_001048e0",
                "FUN_001048f0",
                "FUN_001052a2",
                "FUN_00114b84",
                "FUN_001125fa",
                "FUN_0011a350",
                "FUN_00104530",
                "FUN_001046d0",
                "FUN_001041f0",
                "FUN_00104230"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid copy_archive_files_00104ea2(void)\n\n{\n  char success;\n  int architecture;\n  char **archived_file;\n  void *buffer;\n  long bytes_read;\n  char **output_file;\n  char *current_char;\n  undefined8 *temp_dir_info;\n  int *error_number;\n  char *error_message;\n  undefined8 error_message;\n  long file_size;\n  code *close_function;\n  long buffer_size;\n  int stat_error;\n  get_file_info *file_info;\n  char *path_component;\n  get_file_info *file_stat;\n  char *archive_path;\n  undefined8 *temp_dir_list;\n  char **archived_files;\n  byte byte_value;\n  undefined8 return_address;\n  undefined8 *output_file_path;\n  long *bytes_copied;\n  char *temp_dir_path;\n  undefined8 *input_file_path;\n  undefined8 open_mode;\n  undefined8 is_recursive;\n  uint file_permissions;\n  long file_size;\n  \n  byte_value = 0;\ncode_r0x00104ea2:\n  output_file = (char **)open_write(archive_path,open_mode);\n  if (output_file == (char **)0x0) {\nLAB_00104e80:\n    print_nonfatal_message(archive_path,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    success = copy_file_object(archived_files,output_file,return_address);\n    if (success == '\\0') {\n      architecture = get_architecture(archived_files);\n      if (architecture == 0) goto LAB_00104d75;\n      success = close_all_and_done(output_file);\n      if (success != '\\0') goto LAB_00104ec9;\n      print_nonfatal_message(archive_path,0,0,0);\n      goto LAB_00104ec9;\n    }\n    success = close(output_file);\n    output_file = archived_files;\n    if (success == '\\0') {\n      print_nonfatal_message(archive_path,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (stat_error == 0)) {\n      set_file_times(archive_path,file_info);\n    }\n    file_size = open_read(archive_path,open_mode);\n    temp_dir_list[2] = file_size;\n    *bytes_copied = file_size;\n    bytes_copied = (long *)(file_size + 0xf0);\n    archived_files = (char **)open_next_archived_file(input_file_path,output_file);\n    close(output_file);\n    while ((DAT_00127a20 == 0 && (archived_files != (char **)0x0))) {\n      error_message = *archived_files;\n      current_char = error_message;\n      if (*error_message == '/') {\nLAB_0010527d:\n        error_message = get_text(0,\"illegal pathname found in archive member: %s\",5);\n        print_non_fatal_error(error_message,error_message);\n        goto LAB_00104e93;\n      }\n      while (*current_char != '\\0') {\n        path_component = current_char;\n        if ((*current_char == '.') && (path_component = current_char + 1, current_char[1] == '.')) {\n          path_component = current_char + 2;\n          if ((current_char[2] == '\\0') || (current_char[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*path_component != '\\0' && (*path_component != '/')); path_component = path_component + 1) {\n        }\n        current_char = path_component;\n        if (*path_component == '/') {\n          copy_archive_file();\n          return;\n        }\n      }\n      file_info = (get_file_info *)&file_info_buffer;\n      archive_path = (char *)concatenate_strings(temp_dir_path,&DAT_0011b47d);\n      architecture = get_file_info(archive_path,file_info);\n      temp_dir_info = temp_dir_list;\n      if (-1 < architecture) {\n        file_size = create_temp_directory(archive_path);\n        release_memory(archive_path);\n        if (file_size == 0) {\n          error_number = get_errno_location();\n          error_message = get_error_message(*error_number);\n          error_message = get_text(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_non_fatal_error(error_message,error_message);\n          goto LAB_00104e93;\n        }\n        temp_dir_info = (undefined8 *)allocate_memory(0x18);\n        error_message = *archived_files;\n        *temp_dir_info = temp_dir_list;\n        temp_dir_info[2] = 0;\n        temp_dir_info[1] = file_size;\n        archive_path = (char *)concatenate_strings(file_size,&DAT_0011b47d,error_message);\n      }\n      stat_error = 0;\n      if (DAT_001279cb != '\\0') {\n        file_stat = file_info;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&file_stat->st_dev = 0;\n          file_stat = (get_file_info *)((long)file_stat + (ulong)byte_value * -8 + 4);\n        }\n        output_file = (char **)archived_files[0x1d];\n        if ((char **)archived_files[0x1d] == (char **)0x0) {\n          output_file = archived_files;\n        }\n        stat_error = (**(code **)(output_file[1] + 0x1e8))(archived_files,file_info);\n        if (stat_error != 0) {\n          error_message = *archived_files;\n          error_message = get_text(0,\"internal get_file_info error on %s\",5);\n          print_non_fatal_error(error_message,error_message);\n        }\n      }\n      temp_dir_list = (undefined8 *)allocate_memory(0x18);\n      temp_dir_list[1] = archive_path;\n      *temp_dir_list = temp_dir_info;\n      temp_dir_list[2] = 0;\n      success = bfd_check_format(archived_files,1);\n      if (success != '\\0') {\n        if (is_recursive._7_1_ != '\\0') goto code_r0x00104ea2;\n        output_file = (char **)open_write(archive_path,*(undefined8 *)archived_files[1]);\n        if (output_file == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      error_message = get_text(0,\"Unable to recognise the format of file\",5);\n      print_nonfatal_message(0,archived_files,0,error_message);\n      output_file = (char **)open_write(archive_path,open_mode);\n      if (output_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archived_file = (char **)archived_files[0x1d];\n      if ((char **)archived_files[0x1d] == (char **)0x0) {\n        archived_file = archived_files;\n      }\n      architecture = (**(code **)(archived_file[1] + 0x1e8))(archived_files);\n      file_size = file_size;\n      if (architecture == 0) {\n        if (file_size < 0) {\n          get_archive_filename(archived_files);\n          error_message = get_text(0,\"get_file_info returns negative size for `%s\\'\",5);\n          print_non_fatal_error(error_message);\n        }\n        else {\n          architecture = bfd_seek(archived_files,0,0);\n          if (architecture == 0) {\n            if (DAT_001279c9 != '\\0') {\n              error_message = *output_file;\n              error_message = get_archive_filename(archived_files);\n              current_char = (char *)get_text(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              print(current_char,error_message,error_message);\n            }\n            buffer = (void *)allocate_memory(0x2000);\n            while( true ) {\n              if (file_size == 0) {\n                chmod(*output_file,file_permissions | 0x100);\n                release_memory(buffer);\n                success = close_all_and_done(output_file);\n                output_file = archived_files;\n                if (success == '\\0') {\n                  print_nonfatal_message(archive_path,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              buffer_size = 0x2000;\n              if (file_size < 0x2001) {\n                buffer_size = file_size;\n              }\n              bytes_read = read_from_file(buffer,buffer_size,archived_files);\n              archived_file = archived_files;\n              if ((buffer_size != bytes_read) ||\n                 (bytes_read = write_to_file(buffer,buffer_size,output_file), archived_file = output_file, buffer_size != bytes_read))\n              break;\n              file_size = file_size - buffer_size;\n            }\n            print_nonfatal_message(0,archived_file,0,0);\n            release_memory(buffer);\n          }\n          else {\n            error_message = get_archive_filename(archived_files);\n            bfd_nonfatal(error_message);\n          }\n        }\n      }\n      else {\n        print_nonfatal_message(0,archived_files,0,0);\n      }\n      success = close_all_and_done(output_file);\n      if (success == '\\0') {\n        print_nonfatal_message(archive_path,0,0,0);\n      }\nLAB_00104ec9:\n      delete_file(archive_path);\n      DAT_00127a20 = 1;\n    }\n    *bytes_copied = 0;\n    buffer = (void *)xstrdup(*output_file_path);\n    if (DAT_00127a20 == 0) {\n      close_function = close;\n    }\n    else {\n      close_function = close_all_and_done;\n    }\n    success = (*close_function)(output_file_path);\n    if (success == '\\0') {\n      DAT_00127a20 = 1;\n      print_nonfatal_message(buffer,0,0,0);\n    }\n    release_memory(buffer);\n    buffer = (void *)xstrdup(*input_file_path);\n    success = close(input_file_path);\n    if (success == '\\0') {\n      DAT_00127a20 = 1;\n      print_nonfatal_message(buffer,0,0,0);\n    }\n    release_memory(buffer);\n  }\n  while (temp_dir_list != (undefined8 *)0x0) {\n    if (temp_dir_list[2] == 0) {\n      remove_directory((char *)temp_dir_list[1]);\n    }\n    else {\n      close();\n      delete_file((char *)temp_dir_list[1]);\n    }\n    release_memory((void *)temp_dir_list[1]);\n    temp_dir_info = (undefined8 *)*temp_dir_list;\n    release_memory(temp_dir_list);\n    temp_dir_list = temp_dir_info;\n  }\n  remove_directory(temp_dir_path);\n  release_memory(temp_dir_path);\n  return;\n}\n\n",
            "current_name": "copy_archive_files_00104ea2",
            "entrypoint": "0x00104ea2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ea2": "copy_archive_files_00104ea2",
                "__errno_location": "get_errno_location",
                "bVar17": "byte_value",
                "bfd_bread": "read_from_file",
                "bfd_bwrite": "write_to_file",
                "bfd_close": "close",
                "bfd_close_all_done": "close_all_and_done",
                "bfd_get_arch": "get_architecture",
                "bfd_get_archive_filename": "get_archive_filename",
                "bfd_nonfatal_message": "print_nonfatal_message",
                "bfd_openr": "open_read",
                "bfd_openr_next_archived_file": "open_next_archived_file",
                "bfd_openw": "open_write",
                "cVar1": "success",
                "concat": "concatenate_strings",
                "copy_archive_001052a2": "copy_archive_file",
                "copy_object": "copy_file_object",
                "dcgettext": "get_text",
                "free": "release_memory",
                "iVar2": "architecture",
                "in_stack_00000030": "is_recursive",
                "lVar12": "file_size",
                "lVar14": "buffer_size",
                "lVar5": "bytes_read",
                "make_tempdir": "create_temp_directory",
                "non_fatal": "print_non_fatal_error",
                "param_1": "param_archives",
                "param_10": "input_file_path",
                "param_11": "open_mode",
                "param_18": "file_permissions",
                "param_19": "file_size",
                "param_7": "output_file_path",
                "param_8": "bytes_copied",
                "param_9": "temp_dir_path",
                "pcVar10": "error_message",
                "pcVar13": "close_function",
                "pcVar15": "path_component",
                "pcVar7": "current_char",
                "piVar9": "error_number",
                "ppcVar3": "archived_file",
                "ppcVar6": "output_file",
                "printf": "print",
                "psVar16": "file_stat",
                "puVar8": "temp_dir_info",
                "pvVar4": "buffer",
                "rmdir": "remove_directory",
                "set_times": "set_file_times",
                "stack0x00000050": "file_info_buffer",
                "stat": "get_file_info",
                "strerror": "get_error_message",
                "uVar11": "error_message",
                "unaff_EBX": "stat_error",
                "unaff_R12": "archive_path",
                "unaff_R13": "temp_dir_list",
                "unaff_R15": "archived_files",
                "unaff_RBP": "file_info",
                "unaff_retaddr": "return_address",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001052a2": {
            "additional_data": {
                "FUN_001052a2": {
                    "1": "extract_and_copy_archive_member",
                    "2": "copy_archive_file",
                    "3": "copy_archive_files",
                    "5": "extract_and_copy_archive",
                    "9": "copy_archive"
                },
                "Param_3": {
                    "1": "param_3"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "__format": {
                    "1": "error_message_format",
                    "12": "format_string",
                    "2": "error_format",
                    "6": "error_msg_format"
                },
                "bVar18": {
                    "1": "temp_byte",
                    "3": "zero_byte",
                    "6": "byte_var"
                },
                "bfd_bread": {
                    "1": "read_bfd"
                },
                "bfd_bwrite": {
                    "1": "write_bfd"
                },
                "bfd_check_format": {
                    "1": "check_bfd_format"
                },
                "bfd_close": {
                    "1": "close_bfd"
                },
                "bfd_close_all_done": {
                    "1": "close_all_done_bfd"
                },
                "bfd_get_archive_filename": {
                    "1": "get_archive_file_name"
                },
                "bfd_nonfatal": {
                    "1": "non_fatal_bfd"
                },
                "bfd_nonfatal_message": {
                    "1": "non_fatal_bfd_message"
                },
                "bfd_openw": {
                    "1": "open_write_bfd"
                },
                "cVar1": {
                    "1": "temp_char",
                    "2": "format_flag",
                    "3": "char1",
                    "5": "char_var"
                },
                "chmod": {
                    "1": "change_permission"
                },
                "concat": {
                    "1": "path_concat"
                },
                "copy_object": {
                    "1": "copy_object"
                },
                "dcgettext": {
                    "1": "get_translated_message"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar2": {
                    "1": "int_value",
                    "2": "int_var",
                    "3": "int_var2",
                    "4": "index",
                    "8": "arch_type"
                },
                "iVar3": {
                    "1": "index2",
                    "18": "stat_result",
                    "2": "result",
                    "3": "stat_error"
                },
                "in_RAX": {
                    "1": "in_register_ax",
                    "2": "base_address",
                    "3": "rax_value"
                },
                "in_stack_00000008": {
                    "1": "arch_name",
                    "2": "archive_name",
                    "3": "stack_var1"
                },
                "in_stack_00000010": {
                    "1": "archive_size",
                    "2": "file_size_ptr",
                    "3": "stack_var2"
                },
                "in_stack_00000018": {
                    "1": "temp_path",
                    "13": "temp_dir_path",
                    "2": "temp_dir",
                    "3": "stack_var3"
                },
                "in_stack_00000020": {
                    "1": "output_file_path_ptr",
                    "2": "temp_file_ptr",
                    "3": "stack_var4"
                },
                "in_stack_00000028": {
                    "1": "stack_param5",
                    "2": "open_mode",
                    "3": "stack_var5"
                },
                "in_stack_00000030": {
                    "1": "unknown",
                    "3": "stack_var6",
                    "4": "unknown_flag"
                },
                "in_stack_000000f8": {
                    "1": "temp_stack_val7",
                    "3": "stack_var7",
                    "5": "file_permissions"
                },
                "in_stack_00000110": {
                    "1": "in_stack_variable110",
                    "2": "total_file_size",
                    "3": "archive_count",
                    "6": "total_size"
                },
                "lVar12": {
                    "1": "length2",
                    "12": "file_size",
                    "2": "archive_size",
                    "3": "long_var12"
                },
                "lVar15": {
                    "1": "bread_length",
                    "2": "read_size",
                    "3": "bytes_to_copy",
                    "5": "bytes_remaining"
                },
                "lVar5": {
                    "1": "read_bytes",
                    "2": "read_result",
                    "3": "long_var5",
                    "4": "bread_result",
                    "8": "bytes_read"
                },
                "make_tempdir": {
                    "1": "create_temp_dir"
                },
                "non_fatal": {
                    "1": "non_fatal_error"
                },
                "param_1": {
                    "1": "start_address",
                    "11": "param1",
                    "18": "param_1"
                },
                "param_2": {
                    "1": "end_address",
                    "11": "param2",
                    "18": "param_2"
                },
                "param_3": {
                    "1": "pathname",
                    "2": "param_3",
                    "3": "path",
                    "4": "archive_file_path",
                    "6": "archive_path",
                    "9": "param3"
                },
                "pcVar10": {
                    "1": "path_ptr",
                    "2": "curr_char",
                    "5": "current_path",
                    "9": "current_char"
                },
                "pcVar14": {
                    "1": "ptr_to_code_var14",
                    "3": "bfd_close_func",
                    "8": "close_function",
                    "9": "close_func"
                },
                "pcVar16": {
                    "1": "var_ptr",
                    "2": "temp_char",
                    "3": "current_char"
                },
                "piVar8": {
                    "1": "error_num",
                    "2": "err_num_ptr",
                    "4": "errno_location",
                    "7": "errno_ptr"
                },
                "ppcVar11": {
                    "1": "open_result",
                    "2": "archive_files"
                },
                "ppcVar4": {
                    "1": "file_names",
                    "2": "stat_path",
                    "3": "stat_args"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "psVar17": {
                    "1": "pointer_to_stat_var17",
                    "10": "stat_struct",
                    "2": "stat_struct_ptr",
                    "5": "file_stat"
                },
                "puVar7": {
                    "1": "alloc_ptr",
                    "2": "temp_dir_info",
                    "3": "temp_dir_ptr",
                    "5": "temp_dir"
                },
                "pvVar13": {
                    "1": "temp_buff",
                    "15": "buffer",
                    "2": "temp_memory"
                },
                "rmdir": {
                    "1": "remove_dir"
                },
                "set_times": {
                    "1": "set_file_times"
                },
                "stack0x00000050": {
                    "1": "stat_struct"
                },
                "stack0x00000080": {
                    "1": "archive_struct"
                },
                "stack0x000000d0": {
                    "1": "arch_file_list"
                },
                "stack0x000000e0": {
                    "1": "stat_struct"
                },
                "stack0x00000110": {
                    "1": "copy_size"
                },
                "stack0x00000118": {
                    "1": "copy_size"
                },
                "stack0x00000120": {
                    "1": "flags"
                },
                "stack0x000001f0": {
                    "1": "flags"
                },
                "stat": {
                    "1": "get_stat"
                },
                "statFuncPtr": {
                    "1": "get_stat_func_ptr"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "uVar6": {
                    "1": "archive_filename",
                    "2": "translation",
                    "3": "format_string"
                },
                "uVar9": {
                    "1": "gettext_string",
                    "2": "err_msg",
                    "3": "message",
                    "4": "error_string"
                },
                "unaff_R14": {
                    "1": "tempdir",
                    "4": "temp_dir_list"
                },
                "unaff_R15": {
                    "1": "temp_reg15",
                    "2": "archive_data",
                    "3": "archive_info"
                },
                "unaff_retaddr": {
                    "1": "ret_address",
                    "13": "return_address",
                    "4": "ret_addr",
                    "5": "return_addr"
                },
                "unlink": {
                    "1": "remove_file"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid copy_archive_001052a2(undefined8 param_1,undefined8 param_2,char *param3)\n\n{\n  char char_var;\n  int arch_type;\n  int stat_result;\n  char **stat_args;\n  long bytes_read;\n  undefined8 error_message;\n  char *format_string;\n  undefined8 *temp_dir;\n  int *errno_ptr;\n  undefined8 error_msg;\n  long rax_value;\n  char *current_char;\n  char **archive_info;\n  long file_size;\n  void *buffer;\n  code *close_func;\n  long bytes_remaining;\n  char *next_char;\n  get_stat *stat_struct;\n  undefined8 *temp_dir_list;\n  char **archive_info;\n  byte byte_var;\n  undefined8 return_address;\n  undefined8 *stack_var1;\n  long *stack_var2;\n  char *temp_dir_path;\n  undefined8 *stack_var4;\n  undefined8 stack_var5;\n  undefined8 unknown_flag;\n  uint file_permissions;\n  long total_size;\n  \n  byte_var = 0;\n  current_char = (char *)(rax_value + 1);\n  do {\n    if (*current_char == '/') {\n      copy_archive_001052a2();\n      return;\n    }\n    while (*current_char == '\\0') {\n      current_char = (char *)path_concat(temp_dir_path,&DAT_0011b47d);\n      stat_result = get_stat(current_char,(get_stat *)&stat_buffer);\n      temp_dir = temp_dir_list;\n      if (-1 < stat_result) {\n        file_size = create_temp_dir(current_char);\n        free_memory(current_char);\n        if (file_size == 0) {\n          errno_ptr = get_errno_location();\n          current_char = get_error_string(*errno_ptr);\n          error_msg = get_translated_message(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal_error(error_msg,current_char);\n          goto LAB_00104e93;\n        }\n        temp_dir = (undefined8 *)allocate_memory(0x18);\n        current_char = *archive_info;\n        *temp_dir = temp_dir_list;\n        temp_dir[2] = 0;\n        temp_dir[1] = file_size;\n        current_char = (char *)path_concat(file_size,&DAT_0011b47d,current_char);\n      }\n      stat_result = 0;\n      if (DAT_001279cb != '\\0') {\n        stat_struct = (get_stat *)&stat_buffer;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&stat_struct->st_dev = 0;\n          stat_struct = (get_stat *)((long)stat_struct + (ulong)byte_var * -8 + 4);\n        }\n        archive_info = (char **)archive_info[0x1d];\n        if ((char **)archive_info[0x1d] == (char **)0x0) {\n          archive_info = archive_info;\n        }\n        stat_result = (**(code **)(archive_info[1] + 0x1e8))(archive_info,(get_stat *)&stat_buffer);\n        if (stat_result != 0) {\n          next_char = *archive_info;\n          error_msg = get_translated_message(0,\"internal get_stat error on %s\",5);\n          non_fatal_error(error_msg,next_char);\n        }\n      }\n      temp_dir_list = (undefined8 *)allocate_memory(0x18);\n      temp_dir_list[1] = current_char;\n      *temp_dir_list = temp_dir;\n      temp_dir_list[2] = 0;\n      char_var = check_bfd_format(archive_info,1);\n      if (char_var == '\\0') {\n        error_msg = get_translated_message(0,\"Unable to recognise the format of file\",5);\n        non_fatal_bfd_message(0,archive_info,0,error_msg);\n        archive_info = (char **)open_write_bfd(current_char,stack_var5);\n        if (archive_info == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        stat_args = (char **)archive_info[0x1d];\n        if ((char **)archive_info[0x1d] == (char **)0x0) {\n          stat_args = archive_info;\n        }\n        arch_type = (**(code **)(stat_args[1] + 0x1e8))(archive_info,&seek_buffer);\n        file_size = total_size;\n        if (arch_type == 0) {\n          if (total_size < 0) {\n            error_msg = get_archive_file_name(archive_info);\n            error_message = get_translated_message(0,\"get_stat returns negative size for `%s\\'\",5);\n            non_fatal_error(error_message,error_msg);\n          }\n          else {\n            arch_type = bfd_seek(archive_info,0,0);\n            if (arch_type == 0) {\n              if (DAT_001279c9 != '\\0') {\n                next_char = *archive_info;\n                error_msg = get_archive_file_name(archive_info);\n                format_string = (char *)get_translated_message(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                print_formatted(format_string,error_msg,next_char);\n              }\n              buffer = (void *)allocate_memory(0x2000);\n              for (; file_size != 0; file_size = file_size - bytes_remaining) {\n                bytes_remaining = 0x2000;\n                if (file_size < 0x2001) {\n                  bytes_remaining = file_size;\n                }\n                bytes_read = read_bfd(buffer,bytes_remaining,archive_info);\n                stat_args = archive_info;\n                if ((bytes_remaining != bytes_read) ||\n                   (bytes_read = write_bfd(buffer,bytes_remaining,archive_info), stat_args = archive_info, bytes_remaining != bytes_read\n                   )) {\n                  non_fatal_bfd_message(0,stat_args,0,0);\n                  free_memory(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              change_permission(*archive_info,file_permissions | 0x100);\n              free_memory(buffer);\n              char_var = close_all_done_bfd(archive_info);\n              if (char_var == '\\0') {\n                non_fatal_bfd_message(current_char,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            error_msg = get_archive_file_name(archive_info);\n            non_fatal_bfd(error_msg);\n          }\n        }\n        else {\n          non_fatal_bfd_message(0,archive_info,0,0);\n        }\nLAB_00104f00:\n        char_var = close_all_done_bfd(archive_info);\n        if (char_var == '\\0') {\n          non_fatal_bfd_message(current_char,0,0,0);\n        }\nLAB_00104ec9:\n        remove_file(current_char);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (unknown_flag._7_1_ == '\\0') {\n          archive_info = (char **)open_write_bfd(current_char,*(undefined8 *)archive_info[1]);\n        }\n        else {\n          archive_info = (char **)open_write_bfd(current_char,stack_var5);\n        }\n        if (archive_info == (char **)0x0) {\nLAB_00104e80:\n          non_fatal_bfd_message(current_char,0,0,0);\n          goto LAB_00104e93;\n        }\n        char_var = copy_object(archive_info,archive_info,return_address);\n        if (char_var == '\\0') {\n          arch_type = bfd_get_arch(archive_info);\n          if (arch_type == 0) goto LAB_00104d75;\n          char_var = close_all_done_bfd(archive_info);\n          if (char_var == '\\0') {\n            non_fatal_bfd_message(current_char,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        char_var = close_bfd(archive_info);\n        if (char_var == '\\0') {\n          non_fatal_bfd_message(current_char,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (stat_result == 0)) {\n          set_file_times(current_char,(get_stat *)&stat_buffer);\n        }\n        file_size = bfd_openr(current_char,stack_var5);\n        temp_dir_list[2] = file_size;\n        *stack_var2 = file_size;\n        stack_var2 = (long *)(file_size + 0xf0);\n        archive_info = (char **)bfd_openr_next_archived_file(stack_var4,archive_info);\n        close_bfd(archive_info);\n        archive_info = archive_info;\n      }\n      if ((DAT_00127a20 != 0) || (archive_info == (char **)0x0)) {\n        *stack_var2 = 0;\n        buffer = (void *)duplicate_string(*stack_var1);\n        if (DAT_00127a20 == 0) {\n          close_func = close_bfd;\n        }\n        else {\n          close_func = close_all_done_bfd;\n        }\n        char_var = (*close_func)(stack_var1);\n        if (char_var == '\\0') {\n          DAT_00127a20 = 1;\n          non_fatal_bfd_message(buffer,0,0,0);\n        }\n        free_memory(buffer);\n        buffer = (void *)duplicate_string(*stack_var4);\n        char_var = close_bfd(stack_var4);\n        if (char_var == '\\0') {\n          DAT_00127a20 = 1;\n          non_fatal_bfd_message(buffer,0,0,0);\n        }\n        free_memory(buffer);\n        goto LAB_00114b4b;\n      }\n      current_char = *archive_info;\n      param3 = current_char;\n      if (*current_char == '/') goto LAB_0010527d;\n    }\n    next_char = current_char;\n    if ((*current_char == '.') && (next_char = current_char + 1, current_char[1] == '.')) {\n      next_char = current_char + 2;\n      if ((current_char[2] == '\\0') || (current_char[2] == '/')) {\nLAB_0010527d:\n        error_msg = get_translated_message(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal_error(error_msg,param3);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (temp_dir_list != (undefined8 *)0x0) {\n          if (temp_dir_list[2] == 0) {\n            remove_dir((char *)temp_dir_list[1]);\n          }\n          else {\n            close_bfd();\n            remove_file((char *)temp_dir_list[1]);\n          }\n          free_memory((void *)temp_dir_list[1]);\n          temp_dir = (undefined8 *)*temp_dir_list;\n          free_memory(temp_dir_list);\n          temp_dir_list = temp_dir;\n        }\n        remove_dir(temp_dir_path);\n        free_memory(temp_dir_path);\n        return;\n      }\n    }\n    for (; (current_char = next_char, *next_char != '\\0' && (*next_char != '/')); next_char = next_char + 1) {\n    }\n  } while( true );\n}\n\n",
            "current_name": "copy_archive_001052a2",
            "entrypoint": "0x001052a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001052a2": "copy_archive_001052a2",
                "__errno_location": "get_errno_location",
                "__format": "format_string",
                "bVar18": "byte_var",
                "bfd_bread": "read_bfd",
                "bfd_bwrite": "write_bfd",
                "bfd_check_format": "check_bfd_format",
                "bfd_close": "close_bfd",
                "bfd_close_all_done": "close_all_done_bfd",
                "bfd_get_archive_filename": "get_archive_file_name",
                "bfd_nonfatal": "non_fatal_bfd",
                "bfd_nonfatal_message": "non_fatal_bfd_message",
                "bfd_openw": "open_write_bfd",
                "cVar1": "char_var",
                "chmod": "change_permission",
                "concat": "path_concat",
                "dcgettext": "get_translated_message",
                "free": "free_memory",
                "iVar2": "arch_type",
                "iVar3": "stat_result",
                "in_RAX": "rax_value",
                "in_stack_00000008": "stack_var1",
                "in_stack_00000010": "stack_var2",
                "in_stack_00000018": "temp_dir_path",
                "in_stack_00000020": "stack_var4",
                "in_stack_00000028": "stack_var5",
                "in_stack_00000030": "unknown_flag",
                "in_stack_000000f8": "file_permissions",
                "in_stack_00000110": "total_size",
                "lVar12": "file_size",
                "lVar15": "bytes_remaining",
                "lVar5": "bytes_read",
                "make_tempdir": "create_temp_dir",
                "non_fatal": "non_fatal_error",
                "param_3": "param3",
                "pcVar10": "current_char",
                "pcVar14": "close_func",
                "pcVar16": "next_char",
                "piVar8": "errno_ptr",
                "ppcVar11": "archive_info",
                "ppcVar4": "stat_args",
                "printf": "print_formatted",
                "psVar17": "stat_struct",
                "puVar7": "temp_dir",
                "pvVar13": "buffer",
                "rmdir": "remove_dir",
                "set_times": "set_file_times",
                "stack0x00000050": "stat_buffer",
                "stack0x000000e0": "seek_buffer",
                "stat": "get_stat",
                "strerror": "get_error_string",
                "uVar6": "error_message",
                "uVar9": "error_msg",
                "unaff_R14": "temp_dir_list",
                "unaff_R15": "archive_info",
                "unaff_retaddr": "return_address",
                "unlink": "remove_file",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053b5": {
            "additional_data": {
                "FUM_001053b5": {
                    "1": "print_bad_format_error_message"
                },
                "FUN_001053b5": {
                    "1": "handle_format_error",
                    "2": "print_error_message",
                    "3": "handle_bad_format",
                    "4": "print_bad_format_error_message",
                    "5": "format_error_message",
                    "7": "print_bad_format_error"
                },
                "param_1": {
                    "1": "unused_1"
                },
                "param_2": {
                    "1": "format_specifier2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "format_specifier4"
                },
                "uVar1": {
                    "1": "format_error_msg",
                    "23": "error_message",
                    "4": "error_string"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00114c80"
            ],
            "code": "\nvoid print_bad_format_error_001053b5(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(error_message);\n}\n\n",
            "current_name": "print_bad_format_error_001053b5",
            "entrypoint": "0x001053b5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053b5": "print_bad_format_error_001053b5",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053d5": {
            "additional_data": {
                "FUN_001053d5": {
                    "1": "initialize_bfd",
                    "13": "close_and_return_status",
                    "2": "close_bfd",
                    "4": "close_bfd_and_return_status"
                },
                "param_1": {
                    "1": "unknown_arg",
                    "3": "file_descriptor"
                },
                "unaff_R12": {
                    "1": "status_address",
                    "2": "param1",
                    "3": "file_descriptor",
                    "4": "file_pointer",
                    "5": "file_ptr"
                },
                "unaff_R14": {
                    "1": "bfd_object",
                    "10": "bfd_ptr",
                    "2": "error_ptr",
                    "3": "bfd_pointer",
                    "4": "bfd_handle"
                }
            },
            "called": [
                "FUN_0011a110"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nundefined4 close_and_return_status_001053d5(void)\n\n{\n  long file_ptr;\n  undefined8 *bfd_ptr;\n  \n  bfd_nonfatal(*bfd_ptr);\n  *(undefined4 *)(file_ptr + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(file_ptr + 8);\n}\n\n",
            "current_name": "close_and_return_status_001053d5",
            "entrypoint": "0x001053d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053d5": "close_and_return_status_001053d5",
                "unaff_R12": "file_ptr",
                "unaff_R14": "bfd_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010540e": {
            "additional_data": {
                "*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71)": {
                    "1": "var3"
                },
                "*(byte *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71)": {
                    "1": "temp5"
                },
                "*(int *)(*(long *)(param2 + 8) + 8)": {
                    "1": "var1"
                },
                "*(int *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "temp2"
                },
                "*(long *)(*(long *)(param2 + 8) + 0x380)": {
                    "1": "var2"
                },
                "*(long *)(*(long *)(param_2 + 8) + 0x380)": {
                    "1": "temp4"
                },
                "*(long *)(param_2 + 8)": {
                    "1": "temp3"
                },
                "0x00105422": {
                    "1": "branch_warning"
                },
                "0x380": {
                    "1": "some_offset",
                    "2": "offset1"
                },
                "0x71": {
                    "1": "byte_value_offset",
                    "2": "offset2"
                },
                "0x78": {
                    "1": "function_offset",
                    "3": "offset3"
                },
                "<original_function_name>": {
                    "1": "execute_callback"
                },
                "<param_1>": {
                    "1": "callback_data"
                },
                "<param_2>": {
                    "1": "parameter"
                },
                "<param_3>": {
                    "1": "condition"
                },
                "<unnamed_variable>": {
                    "1": "jump_table_function"
                },
                "FUN_0010540e": {
                    "1": "execute_function_with_params",
                    "2": "execute_operation",
                    "21": "execute_function"
                },
                "byte": {
                    "1": "byte_value"
                },
                "byte_var": {
                    "1": "byte_value"
                },
                "byte_var1": {
                    "1": "flag"
                },
                "code": {
                    "1": "function_pointer"
                },
                "in_RAX": {
                    "1": "tmp_rax",
                    "2": "tmp",
                    "3": "temp1",
                    "5": "rax"
                },
                "in_RAX + 0x380": {
                    "1": "rax_ptr_plus_0x380"
                },
                "int_var1": {
                    "1": "value"
                },
                "long_var1": {
                    "1": "ptr"
                },
                "param_1": {
                    "1": "input1",
                    "10": "param1",
                    "2": "param",
                    "3": "arg1"
                },
                "param_2": {
                    "1": "data",
                    "10": "param2",
                    "2": "function_arg2",
                    "3": "address"
                },
                "param_3": {
                    "1": "flags",
                    "10": "param3",
                    "2": "option",
                    "3": "arg3",
                    "8": "flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_00114d50"
            ],
            "code": "\nvoid execute_function_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long rax;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte_value *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(function_pointer **)(*(long *)(rax + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_0010540e",
            "entrypoint": "0x0010540e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "byte": "byte_value",
                "code": "function_pointer",
                "in_RAX": "rax",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010543c": {
            "additional_data": {
                "*pcVar3": {
                    "1": "error_str"
                },
                "*piVar2": {
                    "1": "error_code"
                },
                "FUN_0010543c": {
                    "1": "open_and_handle_error",
                    "2": "open_and_fatal_error",
                    "3": "open_file_and_print_error",
                    "4": "open_file_and_handle_errors"
                },
                "__errno_location": {
                    "1": "get_error_number_location"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "pcVar3": {
                    "1": "error_message_ptr",
                    "11": "error_string",
                    "16": "error_message"
                },
                "piVar2": {
                    "1": "error_location_ptr",
                    "12": "errno_location",
                    "2": "error_pointer",
                    "4": "errno_ptr"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "uVar1": {
                    "1": "file_name",
                    "17": "file_descriptor",
                    "2": "file_address",
                    "8": "file_handle"
                },
                "uVar4": {
                    "1": "localized_error_string",
                    "2": "localized_error",
                    "3": "error_format_string",
                    "7": "error_message",
                    "8": "localized_error_message"
                },
                "unaff_RBP": {
                    "1": "file_descriptor",
                    "2": "stack_base_address",
                    "4": "stack_base",
                    "6": "stack_pointer"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104240",
                "FUN_001040b0"
            ],
            "calling": [
                "FUN_00114d60"
            ],
            "code": "\nvoid open_file_and_handle_errors_0010543c(void)\n\n{\n  undefined8 file_descriptor;\n  int *errno_location;\n  char *error_message;\n  undefined8 localized_error_message;\n  long stack_pointer;\n  \n  errno_location = get_error_number_location();\n  error_message = get_error_string(*errno_location);\n  file_descriptor = *(undefined8 *)(stack_pointer + 0x10);\n  localized_error_message = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(localized_error_message,file_descriptor,error_message);\n}\n\n",
            "current_name": "open_file_and_handle_errors_0010543c",
            "entrypoint": "0x0010543c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010543c": "open_file_and_handle_errors_0010543c",
                "__errno_location": "get_error_number_location",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "strerror": "get_error_string",
                "uVar1": "file_descriptor",
                "uVar4": "localized_error_message",
                "unaff_RBP": "stack_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001054af": {
            "called": [
                "FUN_00104090"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid FUNC_001054af(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined8 in_RAX;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,param_2,in_RAX);\n  return;\n}\n\n",
            "current_name": "FUNC_001054af",
            "entrypoint": "0x001054af",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001054af": "FUNC_001054af"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0010551d": {
            "additional_data": {
                "<parameter_name>": {
                    "1": "<new_parameter_name>"
                },
                "<variable_name>": {
                    "1": "<new_variable_name>"
                },
                "FILE *__s_00": {
                    "1": "file_pointer"
                },
                "FUNK_0010551d": {
                    "1": "extract_and_improve_debugging_info"
                },
                "FUN_0010551d": {
                    "1": "process_binary",
                    "2": "extract_debug_info"
                },
                "__ptr": {
                    "1": "pointer_variable"
                },
                "__ptr_00": {
                    "1": "pointer_var2"
                },
                "__s": {
                    "1": "char_buffer",
                    "2": "string",
                    "3": "string_variable",
                    "4": "string_var"
                },
                "__s_00": {
                    "1": "file_pointer",
                    "2": "dump_file"
                },
                "bStack0000000000000100": {
                    "1": "byte_stack_var1"
                },
                "bStack0000000000000101": {
                    "1": "byte2"
                },
                "bVar2": {
                    "1": "byte_val",
                    "2": "byte_value",
                    "3": "byte_var2",
                    "4": "byte_variable",
                    "5": "byte_var"
                },
                "bVar38": {
                    "1": "bool_var1",
                    "2": "bool_variable38"
                },
                "bVar39": {
                    "1": "is_reached"
                },
                "cStack0000000000000100": {
                    "1": "char_val2"
                },
                "cVar38": {
                    "1": "bool_var38"
                },
                "cVar39": {
                    "1": "bool_var"
                },
                "cVar8": {
                    "1": "char_val",
                    "2": "char_var8",
                    "3": "char_variable",
                    "4": "char_var1"
                },
                "cVar9": {
                    "1": "another_char_var",
                    "2": "char_variable2",
                    "4": "char_var2"
                },
                "char *__s": {
                    "1": "string_pointer"
                },
                "char *pcVar19": {
                    "1": "string_pointer19"
                },
                "char cVar8": {
                    "1": "char_var8"
                },
                "char cVar9": {
                    "1": "char_var9"
                },
                "error_code1": {
                    "1": "error_code1_name",
                    "2": "error_code1"
                },
                "error_code2": {
                    "1": "error_message2",
                    "2": "error_code2"
                },
                "error_code3": {
                    "1": "error_code3_name",
                    "2": "error_code3"
                },
                "error_code4": {
                    "1": "error_message4",
                    "2": "error_code4"
                },
                "iStack000000000000006c": {
                    "1": "int_var3"
                },
                "iVar11": {
                    "1": "integer_variable_11",
                    "2": "int_value",
                    "3": "int_var1"
                },
                "iVar13": {
                    "1": "int_var13"
                },
                "iVar14": {
                    "1": "int_variable14",
                    "2": "int_var2"
                },
                "iVar31": {
                    "1": "index_3"
                },
                "in_stack_00000008": {
                    "1": "binary_file"
                },
                "in_stack_00000010": {
                    "1": "parameter2"
                },
                "in_stack_00000018": {
                    "1": "char_var3"
                },
                "in_stack_000000e0": {
                    "1": "pointer4"
                },
                "in_stack_000000f0": {
                    "1": "long_var2"
                },
                "in_stack_00000140": {
                    "1": "parameter3"
                },
                "int *piVar23": {
                    "1": "int_pointer23"
                },
                "int iVar11": {
                    "1": "i_var11"
                },
                "int iVar14": {
                    "1": "i_var14"
                },
                "lStack0000000000000078": {
                    "1": "long_var4"
                },
                "lStack0000000000000088": {
                    "1": "long_var5"
                },
                "lStack00000000000000a0": {
                    "1": "long_var6"
                },
                "lVar21": {
                    "1": "long_val",
                    "2": "long_var"
                },
                "lVar25": {
                    "1": "length_2"
                },
                "lVar27": {
                    "1": "long_var27"
                },
                "lVar32": {
                    "1": "long_val4"
                },
                "long *plVar15": {
                    "1": "long_pointer15"
                },
                "long *unaff_RBX": {
                    "1": "unaff_rbx_pointer"
                },
                "long lVar21": {
                    "1": "long_var21"
                },
                "long lVar25": {
                    "1": "long_var25"
                },
                "long lVar27": {
                    "1": "long_var27"
                },
                "pcStack0000000000000038": {
                    "1": "string_ptr"
                },
                "pcStack0000000000000090": {
                    "1": "char_stack_var1"
                },
                "pcVar19": {
                    "1": "ptr_var",
                    "2": "pointer_var19"
                },
                "pcVar28": {
                    "1": "ptr_var"
                },
                "pcVar33": {
                    "1": "pointer_6"
                },
                "pcVar34": {
                    "1": "pointer_to_var34"
                },
                "pcVar35": {
                    "1": "pointer_to_char35"
                },
                "pcVar39": {
                    "1": "pointer_10"
                },
                "pcVar4": {
                    "1": "function_1",
                    "2": "section_callback",
                    "3": "pointer_var4",
                    "6": "function_pointer"
                },
                "piStack000000000000006c": {
                    "1": "int_ptr"
                },
                "piVar23": {
                    "1": "pointer_int23"
                },
                "plStack00000000000000a0": {
                    "1": "long_array2"
                },
                "plVar15": {
                    "1": "ptr_var",
                    "4": "long_pointer"
                },
                "plVar23": {
                    "1": "long_pointer2"
                },
                "plVar32": {
                    "1": "pointer_8",
                    "2": "long_pointer2"
                },
                "plVar34": {
                    "1": "long_ptr"
                },
                "plVar35": {
                    "1": "long_ptr2"
                },
                "ppcVar35": {
                    "1": "pointer_pointer"
                },
                "ppuVar37": {
                    "1": "stab_section_names"
                },
                "ppvVar34": {
                    "1": "pointer_pointer_value"
                },
                "ppvVar36": {
                    "1": "pointer_to_void_pointer"
                },
                "print_error_message_001126c0": {
                    "3": "print_error_message"
                },
                "puStack0000000000000020": {
                    "1": "pointer_array2"
                },
                "puVar1": {
                    "1": "pointer_variable1",
                    "2": "pointer_1",
                    "3": "pointer_var1",
                    "9": "pointer1"
                },
                "puVar13": {
                    "1": "pointer4"
                },
                "puVar23": {
                    "1": "ptr_var"
                },
                "puVar29": {
                    "1": "pointer_var29"
                },
                "puVar3": {
                    "1": "ptr_to_free_memory",
                    "2": "ptr",
                    "3": "pointer_var3",
                    "7": "pointer2"
                },
                "puVar34": {
                    "1": "pointer"
                },
                "puVar5": {
                    "1": "ptr_var",
                    "2": "pointer5",
                    "3": "pointer_var5",
                    "7": "pointer3"
                },
                "puvar5": {
                    "1": "pointer_3"
                },
                "pvVar36": {
                    "1": "section_content_ptr"
                },
                "sStack000000000000015a": {
                    "1": "short1"
                },
                "sVar18": {
                    "1": "size_1",
                    "2": "size_t_variable18"
                },
                "sVar26": {
                    "1": "size_variable2",
                    "2": "size_t_var2"
                },
                "sVar30": {
                    "1": "dump_file_write_size"
                },
                "size_t sVar18": {
                    "1": "size_t_var18"
                },
                "size_t sVar26": {
                    "1": "size_t_var26"
                },
                "uStack0000000000000048": {
                    "1": "uint_var4"
                },
                "uVar10": {
                    "1": "uint_var1",
                    "2": "unsigned_variable10",
                    "3": "uint_var"
                },
                "uVar12": {
                    "1": "another_unsigned_var2",
                    "2": "unsigned_variable4",
                    "4": "uint_var2"
                },
                "uVar13": {
                    "1": "value_5",
                    "2": "unsigned_variable13"
                },
                "uVar16": {
                    "1": "ulong_val3",
                    "2": "ulong_var16"
                },
                "uVar17": {
                    "1": "undefined8_var6",
                    "2": "ulong_var17"
                },
                "uVar20": {
                    "1": "unsigned_variable11"
                },
                "uVar22": {
                    "1": "unsigned_variable22"
                },
                "uVar24": {
                    "1": "unsigned_variable8"
                },
                "uVar30": {
                    "1": "unsigned_variable30"
                },
                "uVar6": {
                    "1": "unsigned_var6",
                    "2": "unsigned_variable1",
                    "4": "ulong_var1"
                },
                "uVar7": {
                    "1": "unsigned_variable_7",
                    "2": "ulong_var7",
                    "4": "ulong_var2"
                },
                "uint uVar10": {
                    "1": "uint_var10"
                },
                "uint uVar12": {
                    "1": "uint_var12"
                },
                "ulong uVar20": {
                    "1": "ulong_var20"
                },
                "ulong uVar22": {
                    "1": "ulong_var22"
                },
                "ulong uVar24": {
                    "1": "ulong_var24"
                },
                "ulong uVar6": {
                    "1": "result1"
                },
                "ulong uVar7": {
                    "1": "result2"
                },
                "unaff_R13": {
                    "1": "pointer_to_long3"
                },
                "unaff_R14": {
                    "1": "pointer_to_undefined8_var"
                },
                "unaff_RBP": {
                    "1": "long_var1"
                },
                "undefined4 uVar13": {
                    "1": "undefined4_var13"
                },
                "undefined8 *puVar5": {
                    "1": "pointer5"
                },
                "undefined8 uVar16": {
                    "1": "undefined8_var16"
                },
                "undefined8 uVar17": {
                    "1": "undefined8_var17"
                },
                "void *__ptr": {
                    "1": "void_pointer"
                },
                "void *__ptr_00": {
                    "1": "void_pointer2"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001126c0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong extract_debug_info_0010551d(void)\n\n{\n  uint *pointer1;\n  byte byte_var;\n  undefined *pointer2;\n  code *function_pointer;\n  undefined8 *pointer3;\n  ulong ulong_var1;\n  ulong ulong_var2;\n  char *string_var;\n  char char_var1;\n  char char_var2;\n  uint uint_var;\n  int int_var1;\n  uint uint_var2;\n  undefined4 undefined4_var;\n  int int_var2;\n  long *long_pointer;\n  undefined8 unsigned_variable16;\n  undefined8 unsigned_variable17;\n  size_t size_t_variable18;\n  char *pointer_var19;\n  void *pointer;\n  void *pointer;\n  ulong value_8;\n  long long_var;\n  ulong value_9;\n  int *pointer_9;\n  ulong value_10;\n  long length_2;\n  FILE *dump_file;\n  size_t size_t_var2;\n  long length_3;\n  long *unaff_RBX;\n  char *pointer_11;\n  undefined8 *pointer_16;\n  ulong ulong_var5;\n  int index_3;\n  long variable_rbp;\n  long *long_pointer2;\n  char *pointer_6;\n  undefined4 *pointer_14;\n  char **pointer_to_pointer_to_char35;\n  long *pointer_12;\n  void *section_content_ptr;\n  undefined8 *variable_r14;\n  undefined **pointer_13;\n  bool bool_variable38;\n  byte is_reached;\n  long parameter1;\n  ulong parameter2;\n  char char_var3;\n  undefined4 *section_flags;\n  char *file_to_dump;\n  uint uint_var4;\n  int int_var3;\n  long long_var4;\n  long long_var5;\n  char *char_pointer_var4;\n  long long_var6;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *pointer4;\n  long long_var2;\n  undefined8 in_stack_000000f8;\n  byte byte_stack_var1;\n  byte byte_stack_var2;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *char_pointer5;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short short1;\n  \n  is_reached = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  variable_rbp = *(long *)(variable_rbp + 8);\n  pointer_16 = DAT_001279b0;\n  if (variable_rbp == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(variable_r14[1] + 8) != 5) || (*(int *)(*(long *)(variable_rbp + 0xd0) + 4) != 7)) ||\n        (char_var2 = startswith_lto_priv_0_lto_priv_0(), char_var2 == '\\0')) ||\n       ((*(long *)(variable_rbp + 0x60) == 0 || (length_2 = *(long *)(variable_rbp + 0x40), length_2 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    char_var2 = bfd_get_full_section_contents();\n    if (char_var2 != '\\0') {\n      length_3 = merge_gnu_build_notes();\n      unaff_RBX[2] = length_3;\n      if ((length_3 == length_2) || (char_var2 = bfd_set_section_size(), char_var2 != '\\0')) {\n        unaff_RBX[3] = (long)pointer_12;\n        *unaff_RBX = variable_rbp;\n        pointer_12 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,parameter1,variable_rbp);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (length_2 = *(long *)(variable_rbp + 8); length_2 != 0; length_2 = *(long *)(length_2 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointer_16 != (undefined8 *)0x0; pointer_16 = (undefined8 *)*pointer_16) {\n    length_2 = bfd_get_section_by_name();\n    if (length_2 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(length_2 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      size_t_variable18 = *(size_t *)(length_2 + 0x40);\n      dump_file = fopen((char *)pointer_16[2],\"w\");\n      if (dump_file == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(pointer_16[2],0,0);\n      }\n      else {\n        char_var2 = bfd_malloc_and_get_section();\n        if (char_var2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((size_t_variable18 != 0) &&\n                (size_t_var2 = fwrite(char_pointer5,1,size_t_variable18,dump_file), size_t_var2 != size_t_variable18)) {\n          pointer_9 = __errno_location();\n          pointer_6 = strerror(*pointer_9);\n          unsigned_variable17 = pointer_16[2];\n          unsigned_variable16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(unsigned_variable16,unsigned_variable17,pointer_6);\n          free(char_pointer5);\n          fclose(dump_file);\n          return 0;\n        }\n        fclose(dump_file);\n        free(char_pointer5);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    long_var4 = 0;\n  }\n  else {\n    length_2 = bfd_get_section_by_name(parameter1,\".gnu_debuglink\");\n    if (length_2 != 0) {\n      unsigned_variable17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(unsigned_variable17);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    long_var4 = bfd_create_gnu_debuglink_section(parameter1);\n    length_2 = DAT_00127a10;\n    if (long_var4 == 0) {\n      unsigned_variable17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,parameter1,0,unsigned_variable17,length_2);\n      return 0;\n    }\n    if (*(int *)(*(long *)(parameter1 + 8) + 8) == 2) {\n      value_8 = 0;\n      for (value_10 = *(ulong *)(parameter1 + 0x90); value_10 != 0;\n          value_10 = *(ulong *)(value_10 + 8)) {\n        value_9 = *(ulong *)(value_10 + 0x30);\n        ulong_var5 = value_8;\n        ulong_var1 = value_10;\n        ulong_var2 = value_8;\n        if (value_9 != 0) {\n          while ((ulong_var5 = ulong_var1, ulong_var2 != 0 &&\n                 (ulong_var5 = value_10, value_9 <= *(ulong *)(value_8 + 0x30)))) {\n            value_10 = *(ulong *)(value_10 + 8);\n            if (value_10 == 0) goto LAB_00107db8;\n            value_9 = *(ulong *)(value_10 + 0x30);\n            ulong_var1 = value_8;\n            ulong_var2 = value_9;\n          }\n        }\n        value_8 = ulong_var5;\n      }\nLAB_00107db8:\n      if (value_8 == 0) {\n        value_10 = 0x1000;\n      }\n      else {\n        value_8 = *(long *)(value_8 + 0x40) + *(long *)(value_8 + 0x30);\n        value_10 = 0xffffffffffffffff;\n        if (value_8 < 0xfffffffffffff001) {\n          value_10 = value_8 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(long_var4 + 0x28) = *(byte *)(long_var4 + 0x28) | 1;\n      *(ulong *)(long_var4 + 0x30) = value_10;\n      *(ulong *)(long_var4 + 0x38) = value_10;\n    }\n  }\n  long_pointer2 = DAT_001278b0;\n  int_var3 = *(int *)(parameter1 + 0xa0);\n  if (int_var3 != 0) {\n    value_10 = FUNC_0010554f();\n    return value_10;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    section_flags = (undefined4 *)0x0;\n  }\n  else {\n    pointer_13 = &PTR_sstring_vartab_00125c60;\n    section_flags = (undefined4 *)xmalloc(0x60);\n    pointer_14 = section_flags;\n    for (length_2 = 0x18; length_2 != 0; length_2 = length_2 + -1) {\n      *pointer_14 = 0;\n      pointer_14 = pointer_14 + (ulong)is_reached * -2 + 1;\n    }\n    file_to_dump = (char *)0x0;\n    do {\n      pointer2 = *pointer_13;\n      length_2 = bfd_get_section_by_name();\n      length_3 = bfd_get_section_by_name();\n      if ((length_2 != 0) && (length_3 != 0)) {\n        length_2 = *(long *)(length_2 + 0x40);\n        pointer = (void *)xmalloc(length_2);\n        char_var2 = bfd_get_section_contents();\n        if (char_var2 == '\\0') {\n          undefined4_var = bfd_get_error();\n          bfd_errmsg(undefined4_var);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*variable_r14);\n          free(file_to_dump);\n          free(pointer);\n        }\n        else {\n          value_10 = *(ulong *)(length_3 + 0x40);\n          pointer = (void *)xmalloc(value_10 + 1);\n          char_var3 = bfd_get_section_contents();\n          if (char_var3 == '\\0') {\n            undefined4_var = bfd_get_error();\n            bfd_errmsg(undefined4_var);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*variable_r14);\n            free(file_to_dump);\n          }\n          else {\n            *(undefined *)((long)pointer + value_10) = 0;\n            if ((file_to_dump != (char *)0x0) ||\n               (file_to_dump = (char *)start_stab_constprop_0(),\n               file_to_dump != (char *)0x0)) {\n              long_var6 = 0;\n              long_var5 = 0;\n              for (section_content_ptr = pointer; section_content_ptr <= (void *)((long)pointer + length_2 + -0xc);\n                  section_content_ptr = (void *)((long)section_content_ptr + 0xc)) {\n                value_8 = (**(code **)(variable_r14[1] + 0x40))(section_content_ptr);\n                byte_var = *(byte *)((long)section_content_ptr + 4);\n                undefined4_var = (**(code **)(variable_r14[1] + 0x58))((long)section_content_ptr + 6);\n                length_3 = (**(code **)(variable_r14[1] + 0x40))((long)section_content_ptr + 8);\n                if (byte_var == 0) {\n                  long_var5 = long_var6;\n                  long_var6 = long_var6 + length_3;\n                }\n                else {\n                  value_9 = (value_8 & 0xffffffff) + long_var5;\n                  if (value_9 < value_10) {\n                    pointer_6 = (char *)((long)pointer + value_9);\n                    char_pointer_var4 = (char *)0x0;\n                    while( true ) {\n                      size_t_variable18 = strlen(pointer_6);\n                      if (((size_t_variable18 == 0) || (pointer_11 = pointer_6 + (size_t_variable18 - 1), *pointer_11 != '\\')) ||\n                         ((ulong)((long)pointer + length_2) < (long)section_content_ptr + 0x10U)) goto LAB_001077fb;\n                      *pointer_11 = '\\0';\n                      section_content_ptr = (void *)((long)section_content_ptr + 0xc);\n                      int_var1 = (**(code **)(variable_r14[1] + 0x40))(section_content_ptr);\n                      value_8 = (ulong)(uint)(int_var1 + (int)long_var5);\n                      if (value_10 <= value_8) break;\n                      pointer_6 = (char *)concat(pointer_6,(long)pointer + value_8,0);\n                      *pointer_11 = '\\';\n                      free(char_pointer_var4);\n                      char_pointer_var4 = pointer_6;\n                    }\n                    unsigned_variable17 = *variable_r14;\n                    pointer_11 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pointer_11,unsigned_variable17,pointer2,((long)section_content_ptr - (long)pointer) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byte_var,undefined4_var,length_3,pointer_6);\n                    char_var2 = parse_stab(section_flags,file_to_dump,byte_var);\n                    if (char_var2 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(char_pointer_var4);\n                      free(file_to_dump);\n                      free(pointer);\n                      free(pointer);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    unsigned_variable17 = *variable_r14;\n                    pointer_6 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pointer_6,unsigned_variable17,pointer2,((long)section_content_ptr - (long)pointer) / 0xc,\n                            value_8 & 0xffffffff,(ulong)byte_var,((long)section_content_ptr - (long)pointer) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(pointer);\n              goto LAB_001058eb;\n            }\n          }\n          free(pointer);\n          free(pointer);\n        }\nLAB_00105981:\n        free(section_flags);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pointer_13 = pointer_13 + 2;\n    } while (pointer_13 != (undefined **)&DAT_00125c90);\n    if ((file_to_dump != (char *)0x0) && (char_var2 = finish_stab(), char_var2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(variable_r14[1] + 8) == 1) {\n      length_2 = 0;\n      for (long_pointer = long_pointer2; long_pointer < long_pointer2 + parameter2; long_pointer = long_pointer + 1) {\n        (**(code **)(variable_r14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((length_2 != 0) || (length_2 = start_stab_constprop_0(), length_2 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pointer_6 = (char *)0x0;\n            pointer_11 = in_stack_00000150;\n            while (((*pointer_11 != '\\0' && (size_t_variable18 = strlen(pointer_11), pointer_11[size_t_variable18 - 1] == '\\')) &&\n                   (long_pointer + 1 < long_pointer2 + parameter2))) {\n              pointer_var19 = (char *)xstrdup(pointer_11);\n              size_t_variable18 = strlen(pointer_var19);\n              pointer_var19[size_t_variable18 - 1] = '\\0';\n              pointer_11 = (char *)concat(pointer_var19,*(undefined8 *)(long_pointer[1] + 8),0);\n              free(pointer_var19);\n              free(pointer_6);\n              long_pointer = long_pointer + 1;\n              pointer_6 = pointer_11;\n            }\n            save_stab(uStack0000000000000158,(int)short1,char_pointer5,pointer_11);\n            char_var3 = parse_stab(section_flags,length_2,uStack0000000000000158);\n            if (char_var3 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((length_2 != 0) && (char_var2 = finish_stab(), char_var2 == '\\0')) goto LAB_00105981;\n    }\n    if (char_var3 == '\\0') {\n      if ((*(int *)(variable_r14[1] + 8) != 2) || (parameter2 == 0)) {\n        pointer_6 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      char_pointer5 = (char *)0x0;\n      in_stack_000000c0 = long_pointer2;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = parameter2;\n      in_stack_000000d8 = 0;\n      pointer_16 = (undefined8 *)&stack0x00000148;\n      for (length_2 = 0x22; length_2 != 0; length_2 = length_2 + -1) {\n        *(undefined4 *)pointer_16 = 0;\n        pointer_16 = (undefined8 *)((long)pointer_16 + (ulong)is_reached * -8 + 4);\n      }\n      char_var2 = '\\0';\n      _uint_var4 = (int *)0x0;\n      file_to_dump = (char *)0x0;\n      char_pointer_var4 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)parameter2 <= in_stack_000000d0) break;\n        length_2 = long_pointer2[in_stack_000000d0];\n        char_var1 = bfd_coff_get_syment();\n        length_3 = in_stack_000000d8;\n        if (char_var1 == '\\0') {\n          undefined4_var = bfd_get_error();\n          bfd_errmsg(undefined4_var);\n          pointer_6 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          unsigned_variable17 = dcgettext(0,pointer_6,5);\n          non_fatal(unsigned_variable17);\n          goto LAB_00105981;\n        }\n        pointer_6 = *(char **)(length_2 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)byte_stack_var2 + 1 + in_stack_000000d8;\n        if ((byte_stack_var2 != 0) && (char_var1 = bfd_coff_get_auxent(), char_var1 == '\\0')) {\n          undefined4_var = bfd_get_error();\n          bfd_errmsg(undefined4_var);\n          pointer_6 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (char_pointer_var4 == (char *)length_3) {\n          if (byte_stack_var1 != 0x67) {\n            char_var1 = debug_set_filename(section_flags);\n            if (char_var1 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          char_pointer_var4 = (char *)long_var2;\n          char_var1 = debug_set_filename(section_flags);\n        }\n        else {\nLAB_00106de4:\n          if ((char)byte_stack_var1 < '\\0') {\n            if (byte_stack_var1 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (byte_stack_var1 < 100) {\n            switch(byte_stack_var1) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(variable_r14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(variable_r14[0x22] + 0x3c) & 0x3f)) {\n                _uint_var4 = (int *)(**(code **)(variable_r14[1] + 0x238))();\n                file_to_dump = pointer_6;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(byte_stack_var1) {\n            case 100:\n              int_var1 = strcmp(pointer_6,\".bb\");\n              if (int_var1 == 0) {\n                char_var1 = debug_start_block(section_flags);\n                goto joined_r0x00107247;\n              }\n              int_var1 = strcmp(pointer_6,\".eb\");\n              if (int_var1 == 0) {\n                char_var1 = debug_end_block(section_flags);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              int_var1 = strcmp(pointer_6,\".bf\");\n              if (int_var1 == 0) {\n                if (file_to_dump != (char *)0x0) {\n                  length_3 = parse_coff_type_lto_priv_0();\n                  if ((length_3 == 0) ||\n                     (char_var2 = debug_record_function(section_flags), char_var2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uint_var4 != (int *)0x0) {\n                    int_var1 = 0;\n                    if (byte_stack_var2 != 0) {\n                      int_var1 = in_stack_00000118 - 1;\n                    }\n                    length_2 = *(long *)(*(long *)(length_2 + 0x20) + 0x30);\n                    while( true ) {\n                      index_3 = _uint_var4[4];\n                      if (index_3 == 0) break;\n                      char_var1 = debug_record_line(section_flags,int_var1 + index_3,\n                                                *(long *)(_uint_var4 + 6) + length_2);\n                      _uint_var4 = _uint_var4 + 4;\n                      if (char_var1 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uint_var4 = (int *)0x0;\n                  file_to_dump = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointer_6 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                int_var1 = strcmp(pointer_6,\".ef\");\n                if (int_var1 != 0) goto switchD_00106e1a_caseD_68;\n                if (char_var2 != '\\0') {\n                  char_var2 = debug_end_function(section_flags);\n                  if (char_var2 == '\\0') goto LAB_00105981;\n                  char_var2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointer_6 = \"%ld: unexpected .ef\\n\";\n              }\n              unsigned_variable17 = dcgettext(0,pointer_6,5);\n              non_fatal(unsigned_variable17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          long_var = parse_coff_type_lto_priv_0();\n          if (long_var == 0) goto LAB_00105981;\n          char_var1 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,length_2,length_3);\n        }\njoined_r0x00107247:\n        if (char_var1 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(parameter1 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(parameter1 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(parameter1 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (parameter2 != 0) {\n        long_pointer2 = DAT_001278b0 + parameter2;\n        long_pointer = DAT_001278b0;\n        do {\n          uint_var = *(uint *)(*long_pointer + 0x18);\n          if ((uint_var & 0x1000000) != 0) {\n            *(uint *)(*long_pointer + 0x18) = uint_var & 0xfeffffff;\n          }\n          long_pointer = long_pointer + 1;\n        } while (long_pointer2 != long_pointer);\n      }\n    }\n    else {\n      for (length_2 = *(long *)(parameter1 + 0x90); length_2 != 0; length_2 = *(long *)(length_2 + 8)\n          ) {\n        if (*(long *)(length_2 + 0xe8) != 0) {\n          pointer1 = (uint *)(*(long *)(length_2 + 0xe8) + 0x18);\n          *pointer1 = *pointer1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      int_var1 = bfd_get_error();\n      if (int_var1 != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    length_2 = xmalloc();\n    long_pointer2 = DAT_001278b0;\n    uint_var4 = *(uint *)((long)variable_r14 + 0x44) & 0x42;\n    DAT_001278a8 = length_2;\n    if (parameter2 == 0) {\n      value_10 = 0;\n    }\n    else {\n      value_10 = 0;\n      _char_var3 = 0;\n      do {\n        int_var1 = DAT_001279a0;\n        long_pointer = (long *)long_pointer2[_char_var3];\n        function_pointer = (code *)long_pointer[4];\n        uint_var = *(uint *)(long_pointer + 3);\n        pointer_6 = (char *)long_pointer[1];\n        pointer_11 = pointer_6;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          index_3 = 0;\n          pointer_16 = DAT_001279a8;\n          while( true ) {\n            if ((int_var1 <= index_3) || (pointer_var19 = (char *)pointer_16[5], pointer_var19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pointer_var19 != \"\") break;\nLAB_0010750b:\n            index_3 = index_3 + 1;\n          }\n          int_var2 = strcmp(pointer_var19,pointer_6);\n          if (int_var2 != 0) {\n            pointer_16 = (undefined8 *)*pointer_16;\n            goto LAB_0010750b;\n          }\n          free(pointer_var19);\n          value_8 = value_10 + 1;\n          pointer_16[5] = \"\";\n          unsigned_variable16 = create_new_symbol(pointer_16);\n          unsigned_variable17 = DAT_001278d0;\n          *(undefined8 *)(length_2 + value_10 * 8) = unsigned_variable16;\n          length_3 = htab_elements(unsigned_variable17);\n          if ((length_3 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          char_var2 = *pointer_6;\n          if (char_var2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pointer_6 = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(parameter1 + 8) + 0x1c) != '\\0')\n             ) {\n            length_3 = variable_r14[1];\n            char_var2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        length_3 = htab_elements(DAT_001278d0);\n        value_8 = value_10;\n        if ((length_3 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (pointer_6 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pointer_6 == '_') && (pointer_6[1] == '_')) &&\n             (int_var1 = strcmp(pointer_6 + (pointer_6[2] == '_'),\"__gnu_lto_slim\"), int_var1 == 0)) {\n            unsigned_variable17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(unsigned_variable17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        char_pointer5 = pointer_6;\n        length_3 = htab_find(DAT_001278d0);\n        if (((length_3 == 0) || (pointer_11 = *(char **)(length_3 + 8), pointer_6 == pointer_11)) &&\n           (pointer_11 = pointer_6, pointer_to_pointer_to_char35 = DAT_001278d8, (uint_var & 0x100) != 0)) {\n          for (; pointer_to_pointer_to_char35 != (char **)0x0; pointer_to_pointer_to_char35 = (char **)pointer_to_pointer_to_char35[3]) {\n            int_var1 = strcmp(*pointer_to_pointer_to_char35,pointer_6);\n            if (int_var1 == 0) {\n              pointer_11 = pointer_to_pointer_to_char35[1];\n              break;\n            }\n          }\n        }\n        long_pointer[1] = (long)pointer_11;\n        char_var2 = *pointer_11;\n        if (char_var2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pointer_6 = DAT_00127908;\n        length_3 = variable_r14[1];\n        if (*(char *)(length_3 + 0x1c) == char_var2) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((uint_var & 0x82) == 0 && (function_pointer != bfd_map_over_sections)) &&\n                ((*(byte *)(long_pointer[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pointer_11 = pointer_11 + 1;\n            long_pointer[1] = (long)pointer_11;\n            goto joined_r0x00106565;\n          }\n          char_var2 = *(char *)(*(long *)(parameter1 + 8) + 0x1c);\n          if (char_var2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            pointer_11 = pointer_11 + 1;\n            long_pointer[1] = (long)pointer_11;\n            size_t_variable18 = strlen(pointer_11);\n            length_3 = size_t_variable18 + 2;\n            goto LAB_001066bc;\n          }\n          *pointer_11 = char_var2;\n          long_pointer[1] = (long)pointer_11;\n          value_10 = value_8;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(parameter1 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            value_10 = value_8;\n            if (pointer_6 == (char *)0x0) goto LAB_00105b32;\n            size_t_variable18 = strlen(pointer_11);\n            size_t_var2 = strlen(pointer_6);\n            pointer_6 = (char *)xmalloc(size_t_var2 + size_t_variable18 + 1);\n            pointer_var19 = pointer_6;\n          }\n          else {\nLAB_0010668d:\n            pointer_6 = DAT_00127908;\n            if ((*(char *)(length_3 + 0x1c) != '\\0') && (char_var2 != *(char *)(length_3 + 0x1c)))\n            goto joined_r0x00106565;\n            size_t_variable18 = strlen(pointer_11);\n            length_3 = size_t_variable18 + 2;\n            if (pointer_6 == (char *)0x0) {\n              pointer_var19 = (char *)xmalloc(length_3);\n            }\n            else {\nLAB_001066bc:\n              size_t_variable18 = strlen(pointer_6);\n              pointer_var19 = (char *)xmalloc(size_t_variable18 + length_3);\n            }\n            pointer_6 = pointer_var19 + 1;\n            *pointer_var19 = *(char *)(*(long *)(parameter1 + 8) + 0x1c);\n          }\n          string_var = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(pointer_6,DAT_00127908);\n            size_t_variable18 = strlen(string_var);\n            pointer_6 = pointer_6 + size_t_variable18;\n          }\n          strcpy(pointer_6,pointer_11);\n          long_pointer[1] = (long)pointer_var19;\n          pointer_11 = pointer_var19;\n          value_10 = value_8;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((uint_var & 0x20) == 0) &&\n           (((uint_var & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(long_pointer[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uint_var4 == 0) &&\n              (((uint_var & 0x82) != 0 || ((*(byte *)(long_pointer[4] + 0x25) & 0x10) != 0)))) ||\n             (int_var1 = bfd_decode_symclass(long_pointer), int_var1 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              length_3 = htab_find();\n              if (length_3 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              char_pointer5 = pointer_11;\n              htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uint_var & 0x82) == 0) && (function_pointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(long_pointer[4] + 0x25) & 0x10) == 0)) {\n            if ((uint_var & 4) == 0) {\n              if (((*(int *)(variable_r14[1] + 8) != 2) ||\n                  (length_3 = *(long *)(long_pointer[4] + 0xd0), length_3 == 0)) ||\n                 (*(long *)(length_3 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  char_var2 = bfd_is_local_label(variable_r14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            char_var2 = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (char_var2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          length_3 = htab_find();\n          if (length_3 != 0) {\nLAB_0010687f:\n            unsigned_variable17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(unsigned_variable17);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          char_pointer5 = pointer_11;\n          htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uint_var & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            char_pointer5 = pointer_11;\n            htab_traverse(DAT_001279f0,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          length_3 = htab_find();\n          if (length_3 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((uint_var & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            length_3 = htab_find();\n            if (length_3 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            char_pointer5 = pointer_11;\n            htab_traverse(DAT_00127a08,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          char_var2 = is_strip_section_isra_0(long_pointer[4]);\n          if (char_var2 == '\\0') {\n            if (((uint_var & 0x800002) == 0) && (function_pointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uint_var & 0x82) != 0) {\n                char_var2 = is_specified_symbol(pointer_11);\n                if ((char_var2 == '\\0') &&\n                   ((length_3 = htab_elements(DAT_001279d8), length_3 == 0 ||\n                    (char_var2 = is_specified_symbol(pointer_11), char_var2 != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (uint_var2 = *(uint *)(long_pointer + 3), (uint_var2 & 0x200000) != 0)) ||\n                       (length_3 = *long_pointer, length_3 == 0)) ||\n                      ((*(int *)(*(long *)(length_3 + 8) + 8) != 5 || (*(long *)(length_3 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)long_pointer + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uint_var2 = *(uint *)(long_pointer + 3);\n                }\n                *(uint *)(long_pointer + 3) = uint_var2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uint_var & 1) != 0) && (char_var2 = is_specified_symbol(pointer_11), char_var2 != '\\0')) {\n                *(uint *)(long_pointer + 3) = *(uint *)(long_pointer + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (char_var2 = is_specified_symbol(pointer_11), char_var2 != '\\0')) {\n                *(uint *)(long_pointer + 3) = *(uint *)(long_pointer + 3) & 0xff7ffffd | 0x80;\n              }\n              if (function_pointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(length_2 + value_10 * 8) = long_pointer;\n            value_10 = value_10 + 1;\n          }\n        }\n        _char_var3 = _char_var3 + 1;\n      } while (parameter2 != _char_var3);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      pointer_16 = DAT_001279a8;\n      int_var1 = DAT_001279a0;\n      for (length_3 = 0; length_3 < int_var1; length_3 = length_3 + 1) {\n        pointer_6 = (char *)pointer_16[5];\n        if (pointer_6 == (char *)0x0) {\n          long_var = value_10 * 8;\n          value_10 = value_10 + 1;\n          unsigned_variable17 = create_new_symbol(pointer_16,parameter1);\n          *(undefined8 *)(length_2 + long_var) = unsigned_variable17;\n          int_var1 = DAT_001279a0;\n        }\n        else if (pointer_6 != \"\") {\n          unsigned_variable17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(unsigned_variable17,pointer_6);\n        }\n        pointer_16 = (undefined8 *)*pointer_16;\n      }\n    }\n    bool_variable38 = DAT_00127980 != '\\0';\n    *(undefined8 *)(length_2 + value_10 * 8) = 0;\n    if ((bool_variable38) && (section_flags != (undefined4 *)0x0)) {\n      int_var1 = *(int *)(*(undefined8 **)(parameter1 + 8) + 1);\n      if ((int_var1 != 5) && (int_var1 != 2)) {\n        unsigned_variable17 = **(undefined8 **)(parameter1 + 8);\n        unsigned_variable16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,parameter1,0,unsigned_variable16,unsigned_variable17);\nLAB_00105d8c:\n        free(section_flags);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      pointer4 = (void *)0x0;\n      char_var2 = write_stabs_in_sections_debugging_info_constprop_0\n                        (parameter1,section_flags,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (char_var2 == '\\0') goto LAB_00105d8c;\n      length_2 = bfd_make_section_with_flags(parameter1,\".stab\",0x2108);\n      length_3 = bfd_make_section_with_flags(parameter1,\".stabstr\",0x2108);\n      if ((((length_2 == 0) || (length_3 == 0)) ||\n          (char_var2 = bfd_set_section_size(length_2,in_stack_00000110), char_var2 == '\\0')) ||\n         (char_var2 = bfd_set_section_size(length_3,char_pointer5), char_var2 == '\\0')) {\n        pointer_6 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        unsigned_variable17 = dcgettext(0,pointer_6,5);\n        bfd_nonfatal_message(0,parameter1,0,unsigned_variable17);\n        free(pointer4);\n        free(section_flags);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(length_2 + 0x7c) = 2;\n      *(undefined4 *)(length_3 + 0x7c) = 0;\n      char_var2 = bfd_set_section_contents\n                        (parameter1,length_2,in_stack_000000c0,0,in_stack_00000110);\n      if ((char_var2 == '\\0') ||\n         (char_var2 = bfd_set_section_contents\n                            (parameter1,length_3,pointer4,0,char_pointer5),\n         char_var2 == '\\0')) {\n        pointer_6 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(section_flags);\n    }\n    parameter2 = value_10 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    length_2 = htab_elements(DAT_001279f8);\n    if (((length_2 != 0) ||\n        (((((((length_2 = htab_elements(DAT_00127a08), length_2 != 0 ||\n              (length_2 = htab_elements(DAT_001279e8), length_2 != 0)) ||\n             (length_2 = htab_elements(DAT_001279e0), length_2 != 0)) ||\n            ((length_2 = htab_elements(DAT_001279d8), length_2 != 0 ||\n             (length_2 = htab_elements(DAT_001279d0), length_2 != 0)))) ||\n           (length_2 = htab_elements(DAT_001278d0), length_2 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(parameter1,DAT_001278a8,parameter2 & 0xffffffff);\n  bfd_map_over_sections(variable_r14,copy_relocations_in_section,parameter1);\n  bfd_map_over_sections(variable_r14,copy_section,parameter1);\n  for (pointer_16 = DAT_001279c0; pointer3 = DAT_001279b8, pointer_16 != (undefined8 *)0x0;\n      pointer_16 = (undefined8 *)*pointer_16) {\n    char_var2 = bfd_set_section_contents(parameter1,pointer_16[5],pointer_16[4],0,pointer_16[3]);\n    if (char_var2 == '\\0') {\n      bfd_nonfatal_message(0,parameter1,pointer_16[5],0);\n      return 0;\n    }\n  }\n  for (; pointer3 != (undefined8 *)0x0; pointer3 = (undefined8 *)*pointer3) {\n    unsigned_variable17 = *(undefined8 *)(pointer3[5] + 0x60);\n    char_var2 = bfd_set_section_contents(parameter1,unsigned_variable17,pointer3[4],0,pointer3[3]);\n    if (char_var2 == '\\0') {\n      bfd_nonfatal_message(0,parameter1,unsigned_variable17,0);\n      return 0;\n    }\n  }\n  if (pointer_12 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      unsigned_variable17 = *variable_r14;\n      unsigned_variable16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(unsigned_variable16,unsigned_variable17);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (char_var2 = bfd_fill_in_gnu_debuglink_section(parameter1,long_var4),\n       length_2 = DAT_00127a10, char_var2 != '\\0')) {\n      uint_var = (**(code **)(*(long *)(parameter1 + 8) + 0x140))(variable_r14);\n      value_10 = (ulong)uint_var;\n      if ((char)uint_var != '\\0') {\n        if (DAT_00127910 == 0) {\n          return value_10;\n        }\n        char_var2 = bfd_alt_mach_code(parameter1,DAT_00127910 & 0xffffffff);\n        value_8 = DAT_00127910;\n        if (char_var2 != '\\0') {\n          return value_10;\n        }\n        unsigned_variable17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(unsigned_variable17,value_8);\n        if (*(int *)(*(long *)(parameter1 + 8) + 8) != 5) {\n          unsigned_variable17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(unsigned_variable17);\n          return value_10;\n        }\n        unsigned_variable17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(unsigned_variable17);\n        *(short *)(*(long *)(parameter1 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return value_10;\n      }\n      unsigned_variable17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,parameter1,0,unsigned_variable17);\n    }\n    else {\n      unsigned_variable17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,parameter1,0,unsigned_variable17,length_2);\n    }\n    return 0;\n  }\n  long_pointer2 = (long *)0x0;\n  pointer_16 = *(undefined8 **)(parameter1 + 0x90);\n  do {\n    if (pointer_16 == (undefined8 *)0x0) {\n      do {\n        long_pointer2 = (long *)pointer_12[3];\n        free((void *)pointer_12[1]);\n        free(pointer_12);\n        pointer_12 = long_pointer2;\n      } while (long_pointer2 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(parameter1 + 8) + 8) == 5)) &&\n        (*(int *)(pointer_16[0x1a] + 4) == 7)) &&\n       (char_var2 = startswith_lto_priv_0_lto_priv_0(*pointer_16,\".gnu.build.attributes\"), char_var2 != '\\0'))\n    {\n      if (long_pointer2 == (long *)0x0) {\n        long_pointer2 = pointer_12;\n      }\n      long_pointer = pointer_12;\n      if (*(undefined8 **)(*long_pointer2 + 0x60) == pointer_16) {\nLAB_0010625f:\n        pointer_6 = \"error: failed to merge notes\";\n        if (long_pointer2[1] != 0) {\n          char_var2 = bfd_set_section_contents(parameter1,pointer_16,long_pointer2[1],0,long_pointer2[2]);\n          if (char_var2 == '\\0') {\n            unsigned_variable17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,parameter1,pointer_16,unsigned_variable17);\n            return 0;\n          }\n          long_pointer2 = (long *)long_pointer2[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          long_pointer2 = long_pointer;\n          if (*(undefined8 **)(*long_pointer + 0x60) == pointer_16) goto LAB_0010625f;\n          long_pointer2 = (long *)long_pointer[3];\n          long_pointer = long_pointer2;\n        } while (long_pointer2 != (long *)0x0);\n        pointer_6 = \"error: failed to locate merged notes\";\n      }\n      unsigned_variable17 = dcgettext(0,pointer_6,5);\n      bfd_nonfatal_message(0,parameter1,pointer_16,unsigned_variable17);\n    }\nLAB_001061be:\n    pointer_16 = (undefined8 *)pointer_16[1];\n  } while( true );\n}\n\n",
            "current_name": "extract_debug_info_0010551d",
            "entrypoint": "0x0010551d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010551d": "extract_debug_info_0010551d",
                "__ptr": "pointer",
                "__ptr_00": "pointer",
                "__s": "string_var",
                "__s_00": "dump_file",
                "bStack0000000000000100": "byte_stack_var1",
                "bStack0000000000000101": "byte_stack_var2",
                "bVar2": "byte_var",
                "bVar38": "bool_variable38",
                "bVar39": "is_reached",
                "cVar8": "char_var1",
                "cVar9": "char_var2",
                "iStack000000000000006c": "int_var3",
                "iVar11": "int_var1",
                "iVar14": "int_var2",
                "iVar31": "index_3",
                "in_stack_00000008": "parameter1",
                "in_stack_00000010": "parameter2",
                "in_stack_00000018": "char_var3",
                "in_stack_000000e0": "pointer4",
                "in_stack_000000f0": "long_var2",
                "in_stack_00000140": "char_pointer5",
                "lStack0000000000000078": "long_var4",
                "lStack0000000000000088": "long_var5",
                "lStack00000000000000a0": "long_var6",
                "lVar21": "long_var",
                "lVar25": "length_2",
                "lVar27": "length_3",
                "lVar32": "long_val4",
                "pcStack0000000000000038": "file_to_dump",
                "pcStack0000000000000090": "char_pointer_var4",
                "pcVar19": "pointer_var19",
                "pcVar28": "pointer_11",
                "pcVar33": "pointer_6",
                "pcVar35": "pointer_to_char35",
                "pcVar4": "function_pointer",
                "piVar23": "pointer_9",
                "plVar15": "long_pointer",
                "plVar32": "long_pointer2",
                "ppcVar35": "pointer_to_pointer_to_char35",
                "ppuVar37": "pointer_13",
                "puStack0000000000000020": "section_flags",
                "puVar1": "pointer1",
                "puVar29": "pointer_16",
                "puVar3": "pointer2",
                "puVar34": "pointer_14",
                "puVar5": "pointer3",
                "pvVar36": "section_content_ptr",
                "sStack000000000000015a": "short1",
                "sVar18": "size_t_variable18",
                "sVar26": "size_t_var2",
                "uStack0000000000000048": "uint_var4",
                "uVar10": "uint_var",
                "uVar12": "uint_var2",
                "uVar13": "undefined4_var",
                "uVar16": "unsigned_variable16",
                "uVar17": "unsigned_variable17",
                "uVar20": "value_8",
                "uVar22": "value_9",
                "uVar24": "value_10",
                "uVar30": "ulong_var5",
                "uVar6": "ulong_var1",
                "uVar7": "ulong_var2",
                "unaff_R13": "pointer_12",
                "unaff_R14": "variable_r14",
                "unaff_RBP": "variable_rbp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010554f": {
            "called": [
                "FUN_00115dc0",
                "FUN_00104140",
                "FUN_00104400",
                "FUN_001159d0",
                "FUN_001048a0",
                "FUN_00115d70",
                "FUN_001044e0",
                "FUN_0010870e",
                "FUN_00116030",
                "FUN_00104580",
                "FUN_0010bf86",
                "FUN_0010bbd3",
                "FUN_00104240",
                "FUN_0010bc80",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_0010875d",
                "FUN_0010c892",
                "FUN_00119dd0",
                "FUN_00104270",
                "FUN_00116110",
                "FUN_00113fb0",
                "FUN_00104460",
                "FUN_00112894",
                "FUN_001045b0",
                "FUN_0011173a",
                "FUN_001043a0",
                "FUN_00104850",
                "FUN_00104520",
                "FUN_001088ae",
                "FUN_00104490",
                "FUN_00108b3e",
                "FUN_00104260",
                "FUN_00112a33",
                "FUN_00104590",
                "FUN_001126c0",
                "FUN_0010be1a",
                "FUN_001047d0",
                "FUN_00108863",
                "FUN_00104370",
                "FUN_00104330",
                "FUN_00104600",
                "FUN_00104470",
                "FUN_001043d0",
                "FUN_0010be88",
                "FUN_00104120",
                "FUN_0011a170",
                "FUN_0011a2e0",
                "FUN_00104320",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_001046a0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_0010bf20",
                "FUN_001047a0",
                "FUN_001044b0",
                "FUN_00128480",
                "FUN_001045f0"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 FUNC_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *param_14;\n  uint param_15;\n  long *param_17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    param_12 = 0;\n    param_14 = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    param_17 = (long *)xmalloc(lVar14);\n    param_40 = param_17;\n    bfd_map_over_sections(param_7,get_sections,&stack0x00000140);\n    qsort(param_17,(ulong)in_stack_00000068._4_4_,8,compare_section_lma);\n    param_14 = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127978 != '\\0';\n    puVar33 = param_14;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(param_14 + uVar29 * 8);\n        plVar28 = param_17 + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(param_7,*plVar28);\n          uVar13 = bfd_octets_per_byte(param_7);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,param_7,*plVar28);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (DAT_00127969 != '\\0') {\n      uVar12 = bfd_octets_per_byte(param_7);\n      lVar14 = param_17[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127970 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,param_7,param_17[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(param_14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)start_stab_constprop_0(unaff_R14,1,plVar28),\n               param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = parse_stab(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = finish_stab(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((lVar14 == 0) && (lVar14 = start_stab_constprop_0(unaff_R14,0,plVar28), lVar14 == 0))\n             || ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          save_stab(param_43,(int)param_44,param_40,pcVar22);\n          param_9 = parse_stab(__ptr_02,lVar14,param_43);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar14 != 0) && (cVar7 = finish_stab(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = plVar28;\n        param_32 = 0;\n        param_31 = param_8;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = debug_set_filename(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = debug_set_filename(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = debug_start_block(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_lto_priv_0\n                                     (unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                      uVar13 ^ (uVar12 ^ uVar13) & *(uint *)(unaff_R14[0x22] + 0x38)\n                                      ,puVar26,0,__ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = debug_record_function(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = debug_record_line(__ptr_02,iVar10 + iVar27,\n                                                *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = debug_end_function(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        non_fatal(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar28 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(param_7 + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = DAT_001278b0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = lVar14;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279a0;\n          plVar15 = (long *)plVar28[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279a8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = create_new_symbol(puVar26);\n                  uVar17 = DAT_001278d0;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278d0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(DAT_001278d0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278d8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127908;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127908;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127908);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar17);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_001279f0,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a08,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = is_strip_section_isra_0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = is_specified_symbol(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279d8), lVar37 == 0 ||\n                      (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0'))\n                {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279a8;\n        iVar10 = DAT_001279a0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = create_new_symbol(puVar26,param_7);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279a0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_00127980 == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = write_stabs_in_sections_debugging_info_constprop_0\n                          (param_7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(param_7,lVar14,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(param_7,lVar37,param_33,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,param_7,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(param_7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,mark_symbols_used_in_relocations,DAT_001278b0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_001279f8);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a08), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_001279e8), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_001279e0), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279d8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279d0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278d0), lVar14 != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar26 = DAT_001279c0; puVar4 = DAT_001279b8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(param_7,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(param_7,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(param_7 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = startswith_lto_priv_0_lto_priv_0(*puVar26,\".gnu.build.attributes\"),\n            cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(param_7,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,param_7,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(param_7,param_21), lVar14 = DAT_00127a10,\n       cVar7 != '\\0')) {\n      if (param_14 != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        uVar5 = DAT_00127979;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(param_14 + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(param_7,*param_17,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                bfd_nonfatal_message(0,param_7,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(param_14);\n      }\n      uVar9 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar29 = DAT_00127910;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar17,uVar29);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar17);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "FUNC_0010554f",
            "entrypoint": "0x0010554f",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0010554f": "FUNC_0010554f"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105828": {
            "additional_data": {
                "FUN_00105828": {
                    "1": "identify_architectural_compatibility",
                    "2": "check_architecture",
                    "4": "check_file_architecture",
                    "5": "recognize_file_format",
                    "8": "recognize_input_file_format"
                },
                "bfd_get_arch": {
                    "1": "get_architecture"
                },
                "bfd_get_archive_filename": {
                    "1": "get_filename"
                },
                "bfd_get_mach": {
                    "1": "get_machine"
                },
                "bfd_printable_arch_mach": {
                    "1": "printable_architecture"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "iVar1": {
                    "1": "architecture_id",
                    "3": "arch_value",
                    "4": "arch_type",
                    "9": "architecture"
                },
                "non_fatal": {
                    "1": "display_error"
                },
                "param_1": {
                    "1": "input_architecture"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param_3"
                },
                "param_4": {
                    "1": "param_4"
                },
                "uVar2": {
                    "1": "arch_name",
                    "2": "arch_type",
                    "3": "machine",
                    "7": "arch",
                    "9": "architecture"
                },
                "uVar3": {
                    "1": "input_file_format",
                    "2": "machine",
                    "5": "file_name",
                    "8": "filename"
                },
                "uVar4": {
                    "27": "error_message",
                    "4": "error_msg"
                },
                "uVar5": {
                    "1": "output_error_message"
                },
                "uVar6": {
                    "1": "input_file_label"
                }
            },
            "called": [
                "FUN_00104650",
                "FUN_001045a0",
                "FUN_001125fa",
                "FUN_00104570",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nundefined8 recognize_input_file_format_00105828(void)\n\n{\n  int architecture;\n  undefined4 architecture;\n  undefined8 filename;\n  undefined8 error_message;\n  \n  architecture = get_architecture();\n  if (architecture == 0) {\n    filename = get_filename();\n    error_message = get_error_message(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    display_error(error_message,filename);\n  }\n  else {\n    filename = get_machine();\n    architecture = get_architecture();\n    filename = printable_architecture(architecture,filename);\n    error_message = get_error_message(0,\"Output file cannot represent architecture `%s\\'\",5);\n    display_error(error_message,filename);\n  }\n  return 0;\n}\n\n",
            "current_name": "recognize_input_file_format_00105828",
            "entrypoint": "0x00105828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105828": "recognize_input_file_format_00105828",
                "bfd_get_arch": "get_architecture",
                "bfd_get_archive_filename": "get_filename",
                "bfd_get_mach": "get_machine",
                "bfd_printable_arch_mach": "printable_architecture",
                "dcgettext": "get_error_message",
                "iVar1": "architecture",
                "non_fatal": "display_error",
                "uVar2": "architecture",
                "uVar3": "filename",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107880": {
            "called": [
                "FUN_00104800",
                "FUN_0010551d",
                "FUN_001126c0",
                "FUN_00104400",
                "FUN_00104180",
                "FUN_001040b0",
                "FUN_001041e0",
                "FUN_00104750",
                "FUN_00114190",
                "FUN_001163d0",
                "FUN_00104570",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_0010554f",
                "FUN_00104120",
                "FUN_00104890",
                "FUN_00113fb0",
                "FUN_00105828",
                "FUN_00115530",
                "FUN_00104440",
                "FUN_00104210",
                "FUN_00104850",
                "FUN_001048f0",
                "FUN_00104500",
                "FUN_001045f0",
                "FUN_00115f30"
            ],
            "calling": [
                "FUN_001152b6"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_input_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') ||\n                   (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107880",
            "entrypoint": "0x00107880",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00107976": {
            "called": [
                "FUN_00104630",
                "FUN_00104650",
                "FUN_00104860",
                "FUN_001125fa",
                "FUN_00104570",
                "FUN_001042a0",
                "FUN_00104240",
                "FUN_001152b6"
            ],
            "calling": [
                "FUN_00114e50"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = recognize_input_file_format_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUNC_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') ||\n                   (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107976",
            "entrypoint": "0x00107976",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00108072": {
            "additional_data": {
                "*(byte *)((long)unaff_RBX+0x27)": {
                    "1": "byte_var2"
                },
                "*(byte *)(unaff_R15 + 0x28)": {
                    "1": "byte_value"
                },
                "*(byte *)(unaff_R15+0x28)": {
                    "1": "byte_flag_value"
                },
                "*(long *)(unaff_R15 + 0x30)": {
                    "1": "long_value1"
                },
                "*(long *)(unaff_R15 + 0x38)": {
                    "1": "long_value2"
                },
                "*(long *)(unaff_R15 + 0xd0)": {
                    "1": "d0_value"
                },
                "*(long *)(unaff_R15+0xd0)": {
                    "1": "long_var2"
                },
                "*(long *)(unaff_RBP + 8)": {
                    "1": "private_data_ptr"
                },
                "*(long *)(unaff_RBP+8)": {
                    "1": "long_var1"
                },
                "*(uint *)((long)unaff_RBX+0x7c)": {
                    "1": "uint_value"
                },
                "*(uint *)(unaff_R15+0x7c)": {
                    "1": "size_value"
                },
                "DAT_00127990": {
                    "1": "constant1"
                },
                "DAT_00127a20": {
                    "1": "constant2"
                },
                "FUN_00108072": {
                    "1": "improve_and_readable",
                    "10": "set_size_and_alignment",
                    "2": "set_section_sizes"
                },
                "_DAT_00127990": {
                    "1": "dat_00127990"
                },
                "bVar1": {
                    "1": "local_variable_b_var1",
                    "2": "byte_flag",
                    "4": "byte_var1",
                    "5": "byte_value",
                    "9": "byte_var"
                },
                "bfd_nonfatal_message": {
                    "1": "non_fatal_message",
                    "2": "display_nonfatal_message"
                },
                "cVar3": {
                    "1": "char_variable_3",
                    "2": "char_var3",
                    "3": "result",
                    "4": "char_value",
                    "7": "char_var"
                },
                "copy_private_data_0010808f": {
                    "5": "copy_private_data"
                },
                "dcgettext": {
                    "1": "get_text",
                    "3": "get_error_message"
                },
                "find_matching_pattern_00114190": {
                    "1": "find_matching_pattern"
                },
                "find_section_list": {
                    "1": "search_section_list",
                    "2": "find_section"
                },
                "group_signature_isra_0": {
                    "2": "check_group_signature",
                    "3": "group_signature"
                },
                "lVar5": {
                    "1": "failed_size_msg",
                    "13": "error_message",
                    "2": "size_error",
                    "3": "error_msg"
                },
                "lVar6": {
                    "1": "section_list_address",
                    "2": "section_list_offset",
                    "3": "section_list1",
                    "8": "section_list_1"
                },
                "lVar7": {
                    "1": "l_var7",
                    "2": "section_list2",
                    "3": "section_size",
                    "6": "section_offset",
                    "7": "section_list_2"
                },
                "lVar8": {
                    "1": "section_list_offset",
                    "2": "section_offset2",
                    "3": "section_offset",
                    "7": "section_list_3"
                },
                "lVar8 + _DAT_00127990": {
                    "1": "section_list_offset"
                },
                "set_alignment_00108179": {
                    "4": "set_alignment"
                },
                "uVar2": {
                    "1": "temp_register2",
                    "2": "binary_address"
                },
                "uVar4": {
                    "1": "local_variable_u_var4",
                    "2": "uint_var4",
                    "3": "alignment_value",
                    "4": "uint_var",
                    "6": "alignment"
                },
                "unaff_R12": {
                    "1": "section_flag",
                    "2": "section_list",
                    "3": "register_r12",
                    "4": "register_12"
                },
                "unaff_R14B": {
                    "1": "set_private_data",
                    "11": "flag",
                    "2": "flag_value"
                },
                "unaff_R15": {
                    "1": "new_section",
                    "2": "section_header",
                    "3": "register_r15",
                    "4": "register_15"
                },
                "unaff_R15+0x28": {
                    "1": "byte_flag"
                },
                "unaff_R15+0x30": {
                    "1": "size1"
                },
                "unaff_R15+0x38": {
                    "1": "size2"
                },
                "unaff_R15+0xb4": {
                    "1": "undefined_var"
                },
                "unaff_RBP": {
                    "1": "input_array",
                    "12": "base_pointer",
                    "2": "rbp"
                },
                "unaff_RBX": {
                    "1": "function_args",
                    "2": "arguments",
                    "3": "parameters",
                    "4": "section_info",
                    "5": "section_data"
                },
                "unaff_RBX+5": {
                    "1": "unaff_rbx_ptr5"
                },
                "unaff_RBX+6": {
                    "1": "unaff_rbx_ptr6"
                },
                "unaff_RBX+7": {
                    "1": "unaff_rbx_ptr7"
                },
                "unaff_RBX[0xb]": {
                    "1": "unaff_rbx_ptr_b"
                },
                "unaff_RBX[0xc]": {
                    "1": "section_data_ptr"
                },
                "unaff_RBX[5]": {
                    "1": "rbx_5_value"
                },
                "unaff_RBX[6]": {
                    "1": "rbx_6_value"
                },
                "unaff_RBX[7]": {
                    "1": "rbx_7_value"
                }
            },
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\n\n\nvoid set_size_and_alignment_00108072(void)\n\n{\n  byte byte_var;\n  undefined8 result;\n  char char_var;\n  uint alignment;\n  long error_message;\n  long section_list_1;\n  long section_list_2;\n  undefined8 *section_data;\n  long base_pointer;\n  long register_12;\n  long section_list_3;\n  char flag;\n  long register_15;\n  \n  error_message = get_error_message(0,\"failed to set size\",5);\n  section_list_3 = rbx_6_value;\n  section_list_1 = find_section(*section_data,0,0x18);\n  if (section_list_1 == 0) {\n    *(byte *)(register_15 + 0x28) = *(byte *)(register_15 + 0x28) | 1;\n    result = *section_data;\n    section_list_3 = section_list_3 + _DAT_00127990;\n    *(long *)(register_15 + 0x30) = section_list_3;\n    *(long *)(register_15 + 0x38) = section_list_3;\n    section_list_3 = rbx_7_value;\n    section_list_1 = find_section(result,0,0x60);\n    if (section_list_1 == 0) goto LAB_00115695;\nLAB_00115860:\n    section_list_2 = *(long *)(section_list_1 + 0x20);\n    if ((*(byte *)(section_list_1 + 0x14) & 0x40) != 0) {\n      section_list_2 = section_list_2 + section_list_3;\n    }\n    *(long *)(register_15 + 0x38) = section_list_2;\n    section_list_3 = find_section(*section_data,0,0x200);\n    if (section_list_3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    alignment = *(uint *)((long)section_data + 0x7c);\n    if (alignment < 0x3f) goto LAB_001156c4;\n    error_message = get_error_message(0,\"failed to set alignment\",5);\n    *(undefined4 *)(register_15 + 0xb4) = *(undefined4 *)((long)section_data + 0xb4);\n    *(byte *)(register_15 + 0x28) =\n         *(byte *)(register_15 + 0x28) & 0xcf | *(byte *)(section_data + 5) & 0x30;\n    section_data_ptr = register_15;\n    unaff_rbx_ptr_b = 0;\n    byte_var = *(byte *)((long)section_data + 0x27);\n  }\n  else {\n    section_list_2 = *(long *)(section_list_1 + 0x18);\n    if ((*(byte *)(section_list_1 + 0x14) & 8) == 0) {\n      section_list_2 = section_list_2 + section_list_3;\n    }\n    *(byte *)(register_15 + 0x28) = *(byte *)(register_15 + 0x28) | 1;\n    result = *section_data;\n    *(long *)(register_15 + 0x30) = section_list_2;\n    *(long *)(register_15 + 0x38) = section_list_2;\n    section_list_3 = rbx_7_value;\n    section_list_1 = find_section(result,0,0x60);\n    if (section_list_1 != 0) goto LAB_00115860;\nLAB_00115695:\n    result = *section_data;\n    *(long *)(register_15 + 0x38) = section_list_3 + _DAT_00127990;\n    section_list_3 = find_section(result,0,0x200);\n    if (section_list_3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    alignment = *(uint *)(section_list_3 + 0x2c);\n    if (0x3e < alignment) {\n      set_alignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(register_15 + 0x7c) = alignment;\n    *(undefined4 *)(register_15 + 0xb4) = *(undefined4 *)((long)section_data + 0xb4);\n    *(byte *)(register_15 + 0x28) =\n         *(byte *)(register_15 + 0x28) & 0xcf | *(byte *)(section_data + 5) & 0x30;\n    section_data_ptr = register_15;\n    unaff_rbx_ptr_b = 0;\n    byte_var = *(byte *)((long)section_data + 0x27);\n  }\n  if ((byte_var & 2) != 0) {\n    section_list_3 = section_data[0x1a];\n    section_list_1 = group_signature(section_list_3,section_data[0x1c]);\n    if ((section_list_1 != 0) &&\n       (section_list_2 = *(long *)(register_12 + 8), *(uint *)(section_list_1 + 0x18) = *(uint *)(section_list_1 + 0x18) | 0x20,\n       *(int *)(section_list_2 + 8) == 5)) {\n      *(long *)(section_list_3 + 0xb0) = section_list_1;\n      char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (char_var == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (char_var == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(register_15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    display_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_size_and_alignment_00108072",
            "entrypoint": "0x00108072",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108072": "set_size_and_alignment_00108072",
                "bVar1": "byte_var",
                "bfd_nonfatal_message": "display_nonfatal_message",
                "cVar3": "char_var",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_error_message",
                "find_section_list": "find_section",
                "group_signature_isra_0": "group_signature",
                "lVar5": "error_message",
                "lVar6": "section_list_1",
                "lVar7": "section_list_2",
                "lVar8": "section_list_3",
                "set_alignment_00108179": "set_alignment",
                "uVar2": "result",
                "uVar4": "alignment",
                "unaff_R12": "register_12",
                "unaff_R14B": "flag",
                "unaff_R15": "register_15",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "section_data",
                "unaff_RBX[0xb]": "unaff_rbx_ptr_b",
                "unaff_RBX[0xc]": "section_data_ptr",
                "unaff_RBX[6]": "rbx_6_value",
                "unaff_RBX[7]": "rbx_7_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010808f": {
            "additional_data": {
                "DATA_ADDR": {
                    "1": "data_address"
                },
                "DAT_00127a20": {
                    "1": "is_error_present"
                },
                "DCGETTEXT_PARAM_1": {
                    "1": "domain"
                },
                "DCGETTEXT_PARAM_2": {
                    "1": "message"
                },
                "DCGETTEXT_PARAM_3": {
                    "1": "category"
                },
                "DCGETTEXT_PARAM_4": {
                    "1": "value"
                },
                "FUN_0010808f": {
                    "1": "copy_and_display_data",
                    "30": "copy_private_data"
                },
                "bfd_nonfatal_message": {
                    "1": "display_nonfatal_message"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "lVar1": {
                    "1": "error_string",
                    "9": "error_message"
                },
                "unaff_R14B": {
                    "1": "should_copy_data",
                    "2": "is_private_data_copied",
                    "4": "flag",
                    "8": "copy_successful"
                },
                "unaff_R15": {
                    "1": "source_address",
                    "11": "data_address",
                    "2": "data_offset",
                    "3": "data_ptr",
                    "6": "data_pointer",
                    "7": "base_address"
                }
            },
            "called": [
                "FUN_001126c0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00108179"
            ],
            "code": "\nvoid copy_private_data_0010808f(void)\n\n{\n  long error_message;\n  char copy_successful;\n  long data_address;\n  \n  error_message = get_error_message(0,\"failed to copy private data\",5);\n  if (copy_successful != '\\0') {\n    *(undefined4 *)(*(long *)(data_address + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    display_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "copy_private_data_0010808f",
            "entrypoint": "0x0010808f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "bfd_nonfatal_message": "display_nonfatal_message",
                "dcgettext": "get_error_message",
                "lVar1": "error_message",
                "unaff_R14B": "copy_successful",
                "unaff_R15": "data_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108179": {
            "additional_data": {
                "(code **)(*(long *)(unaff_RBP + 8) + 0x158)": {
                    "1": "temp_var13"
                },
                "*(byte *)(unaff_R15 + 0x28)": {
                    "1": "temp_var2"
                },
                "*(byte *)(unaff_RBX + 0x27)": {
                    "1": "temp_var6"
                },
                "*(byte *)(unaff_RBX + 0x28)": {
                    "1": "temp_var3"
                },
                "*(int *)(lVar2 + 8)": {
                    "1": "temp_var11"
                },
                "*(long *)(lVar1 + 0xb0)": {
                    "1": "temp_var12"
                },
                "*(long *)(unaff_R12 + 8)": {
                    "1": "temp_var9"
                },
                "*(long *)(unaff_RBX + 0x58)": {
                    "1": "temp_var5"
                },
                "*(long *)(unaff_RBX + 0x60)": {
                    "1": "temp_var4"
                },
                "*(long *)(unaff_RBX + 0xd0)": {
                    "1": "temp_var7"
                },
                "*(uint *)(lVar5 + 0x18)": {
                    "1": "temp_var10"
                },
                "*(undefined4 *)(unaff_R15 + 0xb4)": {
                    "1": "temp_var1"
                },
                "*(undefined8 *)(unaff_RBX + 0xe0)": {
                    "1": "temp_var8"
                },
                "DAT_00127a20": {
                    "1": "flag2"
                },
                "FUN_00108179": {
                    "1": "update_alignment",
                    "18": "set_alignment",
                    "2": "process_alignment",
                    "3": "initialize_alignment",
                    "4": "set_alignment_and_copy_data"
                },
                "bfd_nonfatal_message": {
                    "1": "nonfatal_message"
                },
                "binary_data": {
                    "1": "data"
                },
                "cVar3": {
                    "1": "is_successful",
                    "12": "result",
                    "2": "status",
                    "3": "success_flag"
                },
                "copy_private_data_0010808f": {
                    "8": "copy_private_data"
                },
                "dcgettext": {
                    "1": "get_msg",
                    "4": "get_error_message"
                },
                "find_matching_value_00115d00": {
                    "1": "find_matching_value"
                },
                "group_signature_isra_0": {
                    "1": "find_matching_signature",
                    "6": "find_matching_value"
                },
                "input_value": {
                    "1": "input_value"
                },
                "lVar1": {
                    "1": "result1",
                    "2": "value",
                    "4": "alignment_msg",
                    "5": "value1"
                },
                "lVar2": {
                    "1": "val_check",
                    "2": "value_check",
                    "3": "group_signature",
                    "5": "value2"
                },
                "lVar4": {
                    "1": "alignment_error",
                    "14": "error_message",
                    "2": "err_msg",
                    "5": "error_msg"
                },
                "lVar5": {
                    "1": "data",
                    "23": "matching_value"
                },
                "unaff_R12": {
                    "1": "pointer_to_function",
                    "2": "group_data",
                    "4": "r12_value",
                    "5": "r12"
                },
                "unaff_R14B": {
                    "1": "check_value",
                    "2": "is_private",
                    "3": "r14b_value",
                    "4": "r14b",
                    "8": "flag"
                },
                "unaff_R15": {
                    "1": "new_object",
                    "2": "input_data",
                    "4": "r15_value",
                    "5": "r15"
                },
                "unaff_RBP": {
                    "1": "input2",
                    "2": "data_ptr",
                    "4": "base_pointer",
                    "5": "rbp"
                },
                "unaff_RBX": {
                    "1": "data1",
                    "2": "base_pointer",
                    "4": "rbx_value",
                    "5": "binary_data"
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_00104240",
                "FUN_0010808f"
            ],
            "calling": [
                "FUN_00108072"
            ],
            "code": "\nvoid set_alignment_00108179(void)\n\n{\n  long value1;\n  long value2;\n  char result;\n  long error_message;\n  long matching_value;\n  long rbx;\n  long rbp;\n  long r12;\n  char flag;\n  long r15;\n  \n  error_message = get_error_message(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(rbx + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(rbx + 0x28) & 0x30;\n  *(long *)(rbx + 0x60) = r15;\n  *(undefined8 *)(rbx + 0x58) = 0;\n  if ((*(byte *)(rbx + 0x27) & 2) != 0) {\n    value1 = *(long *)(rbx + 0xd0);\n    matching_value = find_matching_value(value1,*(undefined8 *)(rbx + 0xe0));\n    if ((matching_value != 0) &&\n       (value2 = *(long *)(r12 + 8), *(uint *)(matching_value + 0x18) = *(uint *)(matching_value + 0x18) | 0x20,\n       *(int *)(value2 + 8) == 5)) {\n      *(long *)(value1 + 0xb0) = matching_value;\n      result = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    display_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_alignment_00108179",
            "entrypoint": "0x00108179",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "bfd_nonfatal_message": "display_error_message",
                "cVar3": "result",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_error_message",
                "group_signature_isra_0": "find_matching_value",
                "lVar1": "value1",
                "lVar2": "value2",
                "lVar4": "error_message",
                "lVar5": "matching_value",
                "unaff_R12": "r12",
                "unaff_R14B": "flag",
                "unaff_R15": "r15",
                "unaff_RBP": "rbp",
                "unaff_RBX": "rbx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001081e9": {
            "additional_data": {
                "FUN_001081e9": {
                    "1": "deallocate_memory",
                    "16": "free_memory",
                    "3": "free_memory_and_return",
                    "8": "release_memory"
                },
                "in_RAX": {
                    "1": "return_val",
                    "2": "result",
                    "9": "return_value"
                },
                "param_7": {
                    "1": "result",
                    "14": "return_value"
                },
                "unaff_RBX": {
                    "1": "allocated_memory",
                    "3": "memory_address",
                    "6": "memory_to_release",
                    "7": "memory_to_free",
                    "8": "memory_block"
                }
            },
            "called": [
                "FUN_001048f0"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\nundefined8 free_memory_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_block;\n  undefined8 return_value;\n  \n  return_value = return_value;\n  free(memory_block);\n  return return_value;\n}\n\n",
            "current_name": "free_memory_001081e9",
            "entrypoint": "0x001081e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "return_value",
                "param_7": "return_value",
                "unaff_RBX": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108200": {
            "additional_data": {
                "FUN_00108200": {
                    "1": "copy_and_handle_errors",
                    "12": "copy_file_and_set_times",
                    "2": "copy_and_unlink_file",
                    "3": "copy_and_set_times",
                    "9": "copy_file"
                },
                "auVar3": {
                    "3": "return_value",
                    "4": "result"
                },
                "param_1": {
                    "1": "file_to_copy",
                    "2": "file_path"
                },
                "param_2": {
                    "1": "destination_file_path",
                    "2": "file_reason"
                },
                "piVar1": {
                    "1": "error_ptr",
                    "2": "error_code"
                },
                "uVar2": {
                    "2": "error_string",
                    "5": "error_message"
                },
                "unaff_R12B": {
                    "1": "should_copy_times",
                    "2": "copy_flag",
                    "21": "should_set_times",
                    "3": "copy_file_flag"
                },
                "unaff_R13": {
                    "1": "unlink_reason",
                    "2": "file_time",
                    "3": "unlink_flag",
                    "4": "file_permissions",
                    "5": "flags"
                },
                "unaff_RBP": {
                    "1": "temp_file_path",
                    "19": "file_path",
                    "2": "file_name",
                    "3": "source_file_path"
                },
                "unaff_retaddr": {
                    "31": "return_address"
                }
            },
            "called": [
                "FUN_00104890",
                "FUN_001040c0",
                "FUN_0011a350",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nundefined  [16] copy_file_and_set_times_00108200(void)\n\n{\n  int *error_code;\n  undefined8 error_message;\n  char *file_path;\n  char should_set_times;\n  ulong flags;\n  undefined result [16];\n  undefined8 return_address;\n  \n  error_code = __errno_location();\n  strerror(*error_code);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(error_message);\n  unlink(file_path);\n  if (should_set_times != '\\0') {\n    set_times();\n  }\n  result._0_8_ = flags & 0xffffffff;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "copy_file_and_set_times_00108200",
            "entrypoint": "0x00108200",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108200": "copy_file_and_set_times_00108200",
                "auVar3": "result",
                "piVar1": "error_code",
                "uVar2": "error_message",
                "unaff_R12B": "should_set_times",
                "unaff_R13": "flags",
                "unaff_RBP": "file_path",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108237": {
            "additional_data": {
                "FUN_00108237": {
                    "1": "close_file_with_error_code",
                    "2": "close_file_and_set_last_error",
                    "3": "close_file_and_set_errno",
                    "4": "close_and_return_error",
                    "5": "close_file_and_return_error"
                },
                "F_UNAFF_R12D": {
                    "1": "file_descriptor"
                },
                "PTR_PI_VAR2": {
                    "1": "errno_ptr"
                },
                "iVar1": {
                    "1": "saved_errno",
                    "2": "saved_error_code",
                    "3": "errno_value"
                },
                "piVar2": {
                    "1": "error_location_pointer",
                    "2": "error_pointer",
                    "4": "errno_pointer"
                },
                "unaff_R12D": {
                    "1": "fd",
                    "29": "file_descriptor"
                }
            },
            "called": [
                "FUN_001043c0",
                "FUN_001040b0"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\nundefined8 close_file_00108237(void)\n\n{\n  int errno_value;\n  int *errno_pointer;\n  int file_descriptor;\n  \n  errno_pointer = __errno_location();\n  errno_value = *errno_pointer;\n  close(file_descriptor);\n  *errno_pointer = errno_value;\n  return 0xffffffff;\n}\n\n",
            "current_name": "close_file_00108237",
            "entrypoint": "0x00108237",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108237": "close_file_00108237",
                "iVar1": "errno_value",
                "piVar2": "errno_pointer",
                "unaff_R12D": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010827b": {
            "additional_data": {
                "*unaff_RBX": {
                    "1": "section"
                },
                "FUN_0010827b": {
                    "1": "handle_matching_options",
                    "3": "print_fatal_error_message",
                    "6": "handle_section_error"
                },
                "uVar1": {
                    "1": "section_ptr",
                    "14": "section_value",
                    "4": "section"
                },
                "uVar2": {
                    "1": "error_string",
                    "17": "error_message",
                    "4": "error_msg"
                },
                "unaff_RBX": {
                    "1": "error_section",
                    "11": "section_ptr",
                    "2": "section_address",
                    "4": "section",
                    "8": "section_pointer"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nvoid handle_section_match_error_0010827b(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_ptr;\n  \n  section_value = *section_ptr;\n  error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  fatal(error_message,section_value);\n}\n\n",
            "current_name": "handle_section_match_error_0010827b",
            "entrypoint": "0x0010827b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010827b": "handle_section_match_error_0010827b",
                "uVar1": "section_value",
                "uVar2": "error_message",
                "unaff_RBX": "section_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010829e": {
            "additional_data": {
                "FUN_0010829e": {
                    "1": "classify_and_process",
                    "2": "handle_ebp_value",
                    "3": "process_data",
                    "4": "process_input",
                    "9": "process_ebp_value"
                },
                "check_string_length_00113ede": {
                    "12": "check_string_length"
                },
                "invert_result_001082b3": {
                    "1": "calculate_inverted_result",
                    "23": "invert_result"
                },
                "invert_result_001082b3()": {
                    "1": "invert_result"
                },
                "is_dwo_section_constprop_0": {
                    "1": "check_dwo_section_properties",
                    "2": "check_section_constprop",
                    "4": "check_string_length",
                    "5": "check_dwo_section"
                },
                "is_dwo_section_constprop_0()": {
                    "1": "check_if_constant_property"
                },
                "uVar1": {
                    "3": "result"
                },
                "unaff_EBP": {
                    "1": "classification",
                    "13": "ebp_value",
                    "2": "error_code",
                    "3": "parameter",
                    "5": "input_value"
                }
            },
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nundefined8 process_ebp_value_0010829e(void)\n\n{\n  undefined8 result;\n  int ebp_value;\n  \n  if (ebp_value == 5) {\n    result = check_if_constant_property;\n    return result;\n  }\n  if ((ebp_value != 4) && (ebp_value == 6)) {\n    result = invert_result;\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_ebp_value_0010829e",
            "entrypoint": "0x0010829e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010829e": "process_ebp_value_0010829e",
                "invert_result_001082b3": "invert_result",
                "invert_result_001082b3()": "invert_result",
                "is_dwo_section_constprop_0": "check_dwo_section",
                "is_dwo_section_constprop_0()": "check_if_constant_property",
                "uVar1": "result",
                "unaff_EBP": "ebp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082b3": {
            "additional_data": {
                "FUN_001082b3": {
                    "1": "get_inverted_section_constprop_flag",
                    "2": "invert_and_return_result"
                },
                "FUN_00113ede": {
                    "1": "process_char_pointers"
                },
                "^": {
                    "1": "bitwise_xor"
                },
                "is_dwo_section_constprop_0": {
                    "1": "check_section_constprop",
                    "2": "check_section_constant",
                    "3": "check_dwo_section_property",
                    "4": "check_dwo_section"
                },
                "param_1": {
                    "1": "char_pointers"
                },
                "uVar1": {
                    "1": "section_constprop_value",
                    "16": "result",
                    "3": "is_dwo_section_constprop_0_result"
                }
            },
            "called": [
                "FUN_00113ede"
            ],
            "calling": [
                "FUN_0010829e"
            ],
            "code": "\nuint invert_result_001082b3(void)\n\n{\n  uint result;\n  \n  result = check_dwo_section();\n  return result bitwise_xor 1;\n}\n\n",
            "current_name": "invert_result_001082b3",
            "entrypoint": "0x001082b3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082b3": "invert_result_001082b3",
                "^": "bitwise_xor",
                "is_dwo_section_constprop_0": "check_dwo_section",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082c3": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "<original_variable_name_1>": {
                    "2": "result"
                },
                "FUN_001082c3": {
                    "1": "initialize_app",
                    "13": "initialize",
                    "2": "initialize_program",
                    "3": "get_default_value"
                },
                "return": {
                    "4": "result"
                },
                "undefined8": {
                    "1": "ulong",
                    "8": "void"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00115d00"
            ],
            "code": "\nvoid initialize_001082c3(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_001082c3",
            "entrypoint": "0x001082c3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082c3": "initialize_001082c3",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082df": {
            "additional_data": {
                "FUN_001082df": {
                    "1": "process_symbol_list",
                    "19": "process_symbols",
                    "2": "extract_symbols",
                    "3": "process_data"
                },
                "FUN_00115d70": {
                    "1": "is_specified_symbol"
                },
                "cVar3": {
                    "1": "is_specified_symbol_true",
                    "11": "is_symbol_specified",
                    "2": "symbol_status",
                    "3": "is_specified",
                    "4": "is_valid_symbol",
                    "6": "is_specified_symbol"
                },
                "is_specified_symbol": {
                    "1": "is_symbol_specified_function"
                },
                "lVar2": {
                    "1": "data",
                    "10": "symbol_value",
                    "11": "symbol_address",
                    "2": "symbol"
                },
                "puVar4": {
                    "1": "result_ptr",
                    "2": "new_symbol_array",
                    "3": "filtered_symbols",
                    "5": "destination"
                },
                "puVar5": {
                    "1": "filtered_symbol_array_iterator",
                    "3": "current_symbol",
                    "4": "current_destination"
                },
                "uVar1": {
                    "1": "count",
                    "16": "symbol_count",
                    "2": "number_of_symbols",
                    "3": "num_elements",
                    "7": "num_symbols"
                },
                "uVar6": {
                    "1": "counter",
                    "11": "index",
                    "3": "current_index",
                    "5": "i",
                    "8": "symbol_index"
                },
                "unaff_R13": {
                    "1": "input_data",
                    "10": "symbol_array",
                    "2": "source_ptr",
                    "4": "symbols"
                },
                "unaff_RBP": {
                    "1": "stack_base",
                    "3": "function_context",
                    "5": "frame_pointer",
                    "9": "base_pointer"
                },
                "unaff_RBX": {
                    "1": "symbol_ptr",
                    "16": "base_address",
                    "2": "symbol_list",
                    "4": "symbol_table"
                }
            },
            "called": [
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid process_symbols_001082df(void)\n\n{\n  uint symbol_count;\n  long symbol_address;\n  char is_symbol_specified;\n  long base_address;\n  undefined8 *destination;\n  undefined8 *current_destination;\n  long base_pointer;\n  ulong index;\n  undefined8 *symbol_array;\n  \n  symbol_count = *(uint *)(base_address + 0x78);\n  if (DAT_00127a2c == 7) {\n    destination = symbol_array;\n    for (index = 0; index != symbol_count; index = index + 1) {\n      current_destination = destination;\n      if (((*(long **)symbol_array[index] != (long *)0x0) &&\n          (symbol_address = **(long **)symbol_array[index], symbol_address != 0)) &&\n         (is_symbol_specified = is_symbol_specified_function(*(undefined8 *)(symbol_address + 8),DAT_00127a08), is_symbol_specified != '\\0')) {\n        current_destination = destination + 1;\n        *destination = symbol_array[index];\n      }\n      destination = current_destination;\n    }\n    *destination = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(base_pointer + 8) + 0x288))();\n  return;\n}\n\n",
            "current_name": "process_symbols_001082df",
            "entrypoint": "0x001082df",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082df": "process_symbols_001082df",
                "cVar3": "is_symbol_specified",
                "is_specified_symbol": "is_symbol_specified_function",
                "lVar2": "symbol_address",
                "puVar4": "destination",
                "puVar5": "current_destination",
                "uVar1": "symbol_count",
                "uVar6": "index",
                "unaff_R13": "symbol_array",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108375": {
            "additional_data": {
                "FUN_00108375": {
                    "1": "process_flag_drop",
                    "3": "check_output_format",
                    "4": "check_share_flag_and_drop",
                    "7": "check_and_drop_share_flag"
                },
                "dcgettext": {
                    "1": "get_localized_message"
                },
                "non_fatal": {
                    "2": "print_error_message"
                },
                "param_1": {
                    "1": "unused_param",
                    "16": "param1",
                    "2": "unused_param1",
                    "6": "param"
                },
                "param_2": {
                    "1": "param2_array",
                    "3": "args",
                    "9": "param_array"
                },
                "param_3": {
                    "1": "param_length",
                    "18": "param3",
                    "2": "param_3",
                    "4": "output_format"
                },
                "uVar1": {
                    "1": "first_element",
                    "2": "first_param",
                    "4": "value1",
                    "9": "var1"
                },
                "uVar2": {
                    "1": "tmp2",
                    "3": "error_msg",
                    "8": "error_message",
                    "9": "var2"
                },
                "unaff_EBX": {
                    "1": "ebx_flag",
                    "13": "ebx",
                    "14": "ebx_value"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00115f30"
            ],
            "code": "\nuint check_and_drop_share_flag_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  uint ebx_value;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    var1 = *param2;\n    ebx_value = ebx_value & 0xf7ffffff;\n    var2 = get_localized_message(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message(var2,var1,param3);\n  }\n  return ebx_value;\n}\n\n",
            "current_name": "check_and_drop_share_flag_00108375",
            "entrypoint": "0x00108375",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108375": "check_and_drop_share_flag_00108375",
                "dcgettext": "get_localized_message",
                "non_fatal": "print_error_message",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "var1",
                "uVar2": "var2",
                "unaff_EBX": "ebx_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083b7": {
            "additional_data": {
                "FUN_001083b7": {
                    "1": "check_bfd_error",
                    "10": "handle_bfd_error",
                    "2": "check_and_exit",
                    "3": "handle_error_and_exit",
                    "7": "handle_error"
                },
                "bfd_get_error": {
                    "1": "get_error_code"
                },
                "bfd_nonfatal": {
                    "1": "handle_nonfatal_error"
                },
                "iVar1": {
                    "1": "get_error_code",
                    "12": "bfd_error",
                    "3": "error_code",
                    "5": "bfd_error_code"
                },
                "param_1": {
                    "1": "param",
                    "2": "input",
                    "25": "error_code"
                },
                "unaff_RBP": {
                    "1": "bfd_options",
                    "2": "pointer",
                    "3": "bfd_ptr"
                },
                "unaff_retaddr": {
                    "1": "original_return_address",
                    "24": "return_address"
                },
                "xexit": {
                    "1": "exit_program"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_0011a110",
                "FUN_00104760"
            ],
            "calling": [
                "FUN_00116030"
            ],
            "code": "\nundefined8 handle_bfd_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *bfd_ptr;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = get_error_code();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  handle_nonfatal_error(*bfd_ptr);\n                    \n  exit_program(1);\n}\n\n",
            "current_name": "handle_bfd_error_001083b7",
            "entrypoint": "0x001083b7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083b7": "handle_bfd_error_001083b7",
                "bfd_get_error": "get_error_code",
                "bfd_nonfatal": "handle_nonfatal_error",
                "iVar1": "bfd_error",
                "param_1": "error_code",
                "unaff_RBP": "bfd_ptr",
                "unaff_retaddr": "return_address",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083de": {
            "additional_data": {
                "FUN_001083de": {
                    "1": "handle_section_bytes_length_error",
                    "14": "reverse_bytes",
                    "2": "reverse_section_bytes",
                    "9": "reverse_bytes_section"
                },
                "uVar1": {
                    "1": "data",
                    "2": "section_name",
                    "3": "section"
                },
                "uVar2": {
                    "1": "error_msg",
                    "9": "error_message"
                },
                "unaff_EBP": {
                    "1": "section_name",
                    "2": "error",
                    "22": "section_length"
                },
                "unaff_RBX": {
                    "1": "data",
                    "11": "section_pointer",
                    "3": "section_length",
                    "8": "section_ptr"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid reverse_bytes_001083de(void)\n\n{\n  undefined8 section;\n  undefined8 error_message;\n  undefined8 *section_pointer;\n  undefined4 section_length;\n  \n  section = *section_pointer;\n  error_message = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  fatal(error_message,section,section_length);\n}\n\n",
            "current_name": "reverse_bytes_001083de",
            "entrypoint": "0x001083de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083de": "reverse_bytes_001083de",
                "uVar1": "section",
                "uVar2": "error_message",
                "unaff_EBP": "section_length",
                "unaff_RBX": "section_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108466": {
            "additional_data": {
                "FUN_00108466": {
                    "1": "free_memory_and_terminate",
                    "2": "free_memory_and_display_message",
                    "3": "free_memory_and_set_flag",
                    "4": "cleanup_function",
                    "5": "free_memory",
                    "9": "free_memory_and_set_message"
                },
                "bfd_nonfatal_message": {
                    "3": "display_error_message"
                },
                "param_7": {
                    "1": "resource_pointer",
                    "14": "memory_to_free",
                    "2": "pointer_to_free",
                    "9": "memory_block"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid free_memory_and_set_message_00108466(void)\n\n{\n  void *memory_to_free;\n  \n  DAT_00127a20 = 1;\n  display_error_message(0);\n  free(memory_to_free);\n  return;\n}\n\n",
            "current_name": "free_memory_and_set_message_00108466",
            "entrypoint": "0x00108466",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108466": "free_memory_and_set_message_00108466",
                "bfd_nonfatal_message": "display_error_message",
                "param_7": "memory_to_free"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010847a": {
            "additional_data": {
                "FUNC_00116490": {
                    "1": "perform_system_setup",
                    "2": "execute_task",
                    "6": "execute_sub_function"
                },
                "FUN_0010847a": {
                    "1": "initialize_and_execute",
                    "3": "initialize",
                    "4": "execute_function",
                    "6": "execute_main_function",
                    "8": "initialize_system"
                },
                "param_1": {
                    "1": "data",
                    "2": "param_1",
                    "3": "arg1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "param_2",
                    "3": "arg2",
                    "4": "param2"
                },
                "param_3": {
                    "1": "input_3",
                    "2": "param_3",
                    "3": "arg3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "flags",
                    "2": "param_4",
                    "3": "arg4",
                    "4": "param4"
                }
            },
            "called": [
                "FUN_00116490"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nvoid initialize_system_0010847a(void)\n\n{\n  extract_build_attribute_notes_00116490();\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n",
            "current_name": "initialize_system_0010847a",
            "entrypoint": "0x0010847a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001086af": {
            "additional_data": {
                "DAT_00127a20": {
                    "1": "is_error_occurred"
                },
                "DCGETTEXT": {
                    "1": "get_error_message"
                },
                "FUN_001086af": {
                    "1": "extract_and_handle_gnu_build_attribute_notes",
                    "2": "extract_gnu_build_attribute_notes",
                    "3": "extract_gnu_build_notes",
                    "8": "extract_build_notes"
                },
                "F_001086af": {
                    "1": "extract_gnu_build_attribute_notes"
                },
                "__nmemb": {
                    "1": "temp_var",
                    "2": "notes_count",
                    "3": "num_notes",
                    "4": "num_elements"
                },
                "__ptr": {
                    "1": "extracted_notes",
                    "2": "ptr2",
                    "4": "buffer",
                    "5": "temp_ptr"
                },
                "bVar*.": {
                    "1": "boolean_variables"
                },
                "bVar22": {
                    "1": "temp_byte",
                    "2": "flag",
                    "3": "alignment",
                    "5": "byte_var"
                },
                "bVar4": {
                    "1": "condition",
                    "3": "is_error",
                    "4": "flag"
                },
                "bfd_nonfatal_message": {
                    "1": "report_bfd_non_fatal_message"
                },
                "bfd_set_error": {
                    "1": "set_bfd_error"
                },
                "cVar*.": {
                    "1": "character_variables"
                },
                "cVar17": {
                    "1": "c_var17_var",
                    "3": "char_var"
                },
                "compare_gnu_build_notes": {
                    "1": "compare_gnu_build_attribute_notes",
                    "3": "compare_notes"
                },
                "compare_memory_0011a1b0": {
                    "1": "compare_memory"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "dgettext": {
                    "1": "get_text_domain"
                },
                "extract_build_attribute_notes_00116490": {
                    "1": "extract_notes"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "iVar*.": {
                    "1": "integer_variables"
                },
                "iVar23": {
                    "1": "i_var23_var",
                    "2": "loop_index",
                    "3": "var23",
                    "4": "counter",
                    "5": "loop_counter"
                },
                "iVar6": {
                    "1": "temp_var",
                    "2": "counter",
                    "3": "comparison_result"
                },
                "in_RCX": {
                    "1": "input_value1",
                    "2": "note_name",
                    "3": "input_size",
                    "5": "input1"
                },
                "in_stack_00000030": {
                    "1": "output_ptr",
                    "2": "output",
                    "3": "buffer"
                },
                "in_stack_00000038": {
                    "1": "excess_data",
                    "2": "stack_variable2",
                    "3": "stack_var2"
                },
                "initialize_system_0010847a": {
                    "1": "initialize_system"
                },
                "lVar*.": {
                    "1": "long_variables"
                },
                "lVar7": {
                    "1": "message_ptr",
                    "3": "var7",
                    "7": "error_message"
                },
                "memcmp": {
                    "1": "compare_memory"
                },
                "non_fatal": {
                    "1": "print_warning"
                },
                "param_*.": {
                    "1": "function_parameters"
                },
                "param_10": {
                    "1": "input4",
                    "9": "output_size"
                },
                "param_11": {
                    "1": "var_param_5",
                    "2": "input_notes"
                },
                "param_12": {
                    "1": "array_ptr_end"
                },
                "param_13": {
                    "1": "attribute_name_size"
                },
                "param_14": {
                    "1": "input_param14",
                    "2": "error_message"
                },
                "param_7": {
                    "1": "build_attribute",
                    "2": "input2",
                    "3": "in_rcx",
                    "6": "input_size"
                },
                "param_8": {
                    "1": "input_param8",
                    "2": "version"
                },
                "param_9": {
                    "1": "input2",
                    "2": "version"
                },
                "print_error_message_001126c0": {
                    "1": "print_error_message"
                },
                "puVar*.": {
                    "1": "pointer_variables"
                },
                "puVar15": {
                    "1": "gnu_build_notes",
                    "2": "notes_ptr",
                    "3": "ptr2"
                },
                "puVar16": {
                    "1": "attribute_ptr",
                    "2": "ptr4",
                    "3": "ptr3"
                },
                "puVar18": {
                    "1": "temp_ptr_18",
                    "2": "ptr5",
                    "3": "ptr2"
                },
                "puVar19": {
                    "1": "pu_var19_var",
                    "2": "temp_ptr3",
                    "3": "ptr5",
                    "4": "ptr3"
                },
                "puVar20": {
                    "1": "temp_ptr_20"
                },
                "puVar21": {
                    "1": "pu_var21_var",
                    "2": "ptr4",
                    "3": "ptr6"
                },
                "puVar5": {
                    "1": "tmp_ptr",
                    "2": "temp_ptr_5",
                    "5": "ptr1"
                },
                "qsort": {
                    "1": "sort_notes"
                },
                "report_data_00119ed0": {
                    "1": "report_data"
                },
                "sort_gnu_build_notes": {
                    "1": "sort_gnu_build_attribute_notes",
                    "2": "sort_notes"
                },
                "uParam15": {
                    "1": "ptr2"
                },
                "uVar*.": {
                    "1": "unsigned_variables"
                },
                "uVar1": {
                    "1": "min_note_size",
                    "10": "result"
                },
                "uVar10": {
                    "1": "temp_var10",
                    "2": "temp_var4",
                    "3": "var10",
                    "8": "note_size"
                },
                "uVar11": {
                    "1": "temp_var11",
                    "2": "temp_var5",
                    "3": "var11"
                },
                "uVar12": {
                    "1": "temp_var6",
                    "2": "temp_var12",
                    "3": "var12"
                },
                "uVar13": {
                    "1": "temp9",
                    "2": "temp_var13",
                    "3": "var13"
                },
                "uVar14": {
                    "1": "temp10",
                    "2": "temp_var14",
                    "4": "var14"
                },
                "uVar15": {
                    "1": "temp_value_3"
                },
                "uVar16": {
                    "1": "temp_value_4"
                },
                "uVar17": {
                    "1": "input1"
                },
                "uVar18": {
                    "1": "input2"
                },
                "uVar19": {
                    "1": "temp_value_7"
                },
                "uVar2": {
                    "1": "note_name",
                    "2": "temp1",
                    "5": "var2"
                },
                "uVar20": {
                    "1": "temp_var9",
                    "3": "var20"
                },
                "uVar21": {
                    "1": "var21"
                },
                "uVar22": {
                    "1": "zero_byte"
                },
                "uVar23": {
                    "1": "var23"
                },
                "uVar3": {
                    "1": "tmp2",
                    "2": "temp2",
                    "5": "var3"
                },
                "uVar4": {
                    "1": "bool_val"
                },
                "uVar5": {
                    "1": "ulong_ptr"
                },
                "uVar6": {
                    "1": "var6"
                },
                "uVar8": {
                    "1": "error_message_format",
                    "2": "warning_message",
                    "4": "error_message",
                    "5": "var8"
                },
                "uVar9": {
                    "1": "min_note_size",
                    "2": "temp_var3",
                    "3": "var9"
                },
                "unaff_R*.": {
                    "1": "unnamed_register_variables"
                },
                "unaff_R1": {
                    "1": "error_code1"
                },
                "unaff_R12": {
                    "1": "note_ptr",
                    "2": "array_ptr",
                    "4": "current_note"
                },
                "unaff_R13": {
                    "1": "unused"
                },
                "unaff_R14": {
                    "1": "fun_ptr_array",
                    "2": "function_pointers"
                },
                "unaff_R15": {
                    "1": "unaff_r15"
                },
                "unaff_R2": {
                    "1": "error_code2"
                },
                "unaff_R3": {
                    "1": "error_code3"
                },
                "unaff_R4": {
                    "1": "error_code4"
                },
                "unaff_RBP": {
                    "1": "info_offset",
                    "5": "note_type"
                },
                "unaff_RBX": {
                    "1": "temp_var6",
                    "3": "remaining_size",
                    "4": "remaining_notes"
                },
                "unaff_RCX": {
                    "1": "param_1"
                },
                "unaff_retaddr": {
                    "1": "new_value15",
                    "12": "return_address",
                    "2": "ret_addr"
                },
                "usx": {
                    "1": "extracted_value_1"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001043a0",
                "FUN_00104140",
                "FUN_001126c0",
                "FUN_00116490",
                "FUN_00104240",
                "FUN_0010847a",
                "FUN_0011a1b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00116490"
            ],
            "code": "\nulong extract_build_notes_001086af(void)\n\n{\n  ulong result;\n  undefined8 var2;\n  undefined8 var3;\n  bool flag;\n  ulong *ptr;\n  int comparison_result;\n  long error_message;\n  undefined8 var8;\n  ulong var9;\n  ulong note_size;\n  ulong var11;\n  undefined *temp_ptr;\n  ulong input1;\n  ulong var12;\n  ulong var13;\n  ulong var14;\n  ulong remaining_notes;\n  ulong note_type;\n  ulong *ptr2;\n  undefined *ptr3;\n  char char_var;\n  undefined *ptr4;\n  undefined *ptr3;\n  ulong *current_note;\n  ulong input_r13;\n  ulong var20;\n  size_t num_elements;\n  undefined8 *function_pointers;\n  ulong *ptr6;\n  byte byte_var;\n  int loop_counter;\n  ulong return_address;\n  ulong input_size;\n  uint param2;\n  ulong version;\n  ulong output_size;\n  ulong *input_array;\n  undefined *buffer;\n  uint stack_var2;\n  uint param1;\n  undefined8 *error_message;\n  \n  byte_var = 0;\n  input_size = input1;\n  var9 = (**(code **)(function_pointers[1] + 0x40))();\n  note_size = (**(code **)(function_pointers[1] + 0x40))(current_note[4] + 4);\nLAB_0011662a:\n  var13 = note_type;\n  var20 = input_r13;\n  if (note_size < var9) {\n    var9 = note_size;\n  }\n  do {\n    var11 = input_size;\n    var12 = input_size;\n    ptr2 = current_note;\n    if (current_note[2] == 0x100) {\n      if (var9 == 0) {\n        var9 = return_address;\n      }\n      var14 = *current_note;\n      current_note[7] = var9;\n      note_type = var13;\n      input_r13 = note_size;\n      return_address = var9;\n      if (note_size == 0) goto LAB_001164af;\n    }\n    else {\n      if (var9 == 0) {\n        var9 = version;\n      }\n      var14 = *current_note;\n      current_note[7] = var9;\n      note_type = note_size;\n      input_r13 = var20;\n      version = var9;\n      if (note_size == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    ptr2[8] = note_size;\n    if (*(char *)((ptr2[3] - 1) + var14) != '\\0') {\n      error_message = get_text(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    current_note = ptr2 + 9;\n    if (remaining_notes < 0xc) {\n      if (remaining_notes != 0) {\n        error_message = get_text(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stack_var2 | param1 | param2) != 0) {\n        if (((param1 | param2) == 0) || (stack_var2 == 0)) {\n          if (param1 == 0) {\n            if (param2 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param2 == 0) goto LAB_001166f8;\n        }\n        error_message = get_text(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      var2 = *function_pointers;\n      var3 = *error_message;\n      var8 = get_text(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_warning(var8,var2,var3);\nLAB_0011671b:\n      num_elements = ((long)current_note - (long)input_array >> 3) * -0x71c71c71c71c71c7;\n      sort_notes(input_array,num_elements,0x48,compare_notes);\n      ptr2 = input_array;\n      goto LAB_001167f9;\n    }\n    note_size = (**(code **)(function_pointers[1] + 0x40))(var12);\n    *current_note = note_size;\n    note_size = (**(code **)(function_pointers[1] + 0x40))(var12 + 4);\n    ptr2[10] = note_size;\n    var9 = (**(code **)(function_pointers[1] + 0x40))(var12 + 8);\n    var14 = *current_note;\n    ptr2[0xb] = var9;\n    note_size = ptr2[10];\n    var13 = var14 + 3 & 0xfffffffffffffffc;\n    ptr2[0xf] = var13;\n    if (note_size != (note_size + 3 & 0xfffffffffffffffc)) {\n      error_message = get_text(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var9 - 0x100) {\n      error_message = get_text(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    var11 = var13 + note_size + 0xc;\n    if (remaining_notes < var11) {\n      error_message = get_text(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var14 < 2) {\n      error_message = get_text(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr2[0xc] = var12 + 0xc;\n    result = var12 + 0xc + var13;\n    ptr2[0xd] = result;\n    remaining_notes = remaining_notes + (-0xc - (var13 + note_size));\n    var11 = var12 + var11;\n    if (var14 != 2) {\n      if (*(char *)(var12 + 0xc) == '$') {\n        if ((*(char *)(var12 + 0xd) == '\\x01') && (*(char *)(var12 + 0xe) == '1')) {\n          note_size = extract_attributes();\n          return note_size;\n        }\n      }\n      else if ((((4 < var14) && (*(char *)(var12 + 0xc) == 'G')) &&\n               (*(char *)(var12 + 0xd) == 'A')) &&\n              ((*(char *)(var12 + 0xe) == '$' && (*(char *)(var12 + 0xf) == '\\x01')))) {\n        if (*(char *)(var12 + 0x10) == '2') {\n          note_size = extract_attributes();\n          return note_size;\n        }\n        if (*(char *)(var12 + 0x10) == '3') {\n          note_size = extract_attributes();\n          return note_size;\n        }\n        error_message = get_text(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var13 = note_type;\n    var20 = input_r13;\n    if (note_size == 0) {\n      if (var9 == 0x100) {\n        ptr2[0x10] = return_address;\nLAB_001164af:\n        var12 = var11;\n        note_size = var20;\n        ptr2 = current_note;\n        input_r13 = var20;\n      }\n      else {\n        ptr2[0x10] = version;\nLAB_0011669e:\n        note_type = var13;\n        var12 = var11;\n        note_size = var13;\n        ptr2 = current_note;\n        input_r13 = var20;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_size == 0x10) break;\n    if (0x10 < note_size) {\nLAB_00116679:\n      error_message = get_text(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (error_message != 0) {\n        set_bfd_error(0x11);\n        report_bfd_non_fatal_message(0,function_pointers,error_message,error_message);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (note_size != 4) {\n      if (note_size == 8) {\n        note_size = extract_build_notes_001086af();\n        return note_size;\n      }\n      goto LAB_00116679;\n    }\n    input_size = var11;\n    var9 = (**(code **)(function_pointers[1] + 0x40))();\n    note_size = 0xffffffffffffffff;\n  } while( true );\n  input_size = var11;\n  var9 = (**(code **)(function_pointers[1] + 0x28))(result);\n  note_size = (**(code **)(function_pointers[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (current_note <= ptr2) {\n    sort_notes(input_array,num_elements,0x48,sort_notes);\n    temp_ptr = (undefined *)allocate_memory(output_size * 2);\n    input_size = 0;\n    version = 0;\n    ptr3 = temp_ptr;\n    for (ptr2 = input_array; ptr2 < current_note; ptr2 = ptr2 + 9) {\n      if (ptr2[2] != 0) {\n        ptr4 = ptr3 + 4;\n        ptr3 = ptr3 + 0xc;\n        if ((ptr2[7] == version) && (ptr2[8] == input_size)) {\n          (**(code **)(function_pointers[1] + 0x50))(*ptr2,ptr3);\n          (**(code **)(function_pointers[1] + 0x50))(0,ptr4);\n          (**(code **)(function_pointers[1] + 0x50))(ptr2[2],ptr3 + 8);\n          var9 = ptr2[6];\n          note_size = *ptr2;\n          ptr3 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (var13 = note_size; var13 != 0; var13 = var13 - 1) {\n            *ptr4 = *ptr3;\n            ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          if (note_size < var9) {\n            for (error_message = var9 - note_size; error_message != 0; error_message = error_message + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          ptr3 = ptr3 + var9;\n        }\n        else {\n          (**(code **)(function_pointers[1] + 0x50))();\n          if (*(int *)(function_pointers[1] + 8) == 5) {\n            char_var = (*(char *)(function_pointers[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(function_pointers[1] + 0x50))(char_var,ptr4);\n          (**(code **)(function_pointers[1] + 0x50))(ptr2[2],ptr3 + 8);\n          note_size = *ptr2;\n          ptr3 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (var9 = note_size; var9 != 0; var9 = var9 - 1) {\n            *ptr4 = *ptr3;\n            ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          var9 = ptr2[6];\n          if (note_size < var9) {\n            for (error_message = var9 - note_size; error_message != 0; error_message = error_message + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          error_message = function_pointers[1];\n          ptr3 = ptr3 + var9;\n          ptr3 = ptr3 + 8;\n          if ((*(int *)(error_message + 8) == 5) && (*(char *)(function_pointers[0x22] + 4) == '\\x02')) {\n            (**(code **)(error_message + 0x38))(ptr2[7],ptr3);\n            (**(code **)(function_pointers[1] + 0x38))(ptr2[8],ptr3);\n            ptr3 = ptr3 + 0x10;\n          }\n          else {\n            (**(code **)(error_message + 0x50))(ptr2[7],ptr3);\n            (**(code **)(function_pointers[1] + 0x50))(ptr2[8],ptr3 + 4);\n          }\n          version = ptr2[7];\n          input_size = ptr2[8];\n        }\n      }\n    }\n    var9 = (long)ptr3 - (long)temp_ptr;\n    note_size = var9;\n    ptr3 = temp_ptr;\n    if (var9 < output_size) {\n      for (; output_size = var9, note_size != 0; note_size = note_size - 1) {\n        *buffer = *ptr3;\n        ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n        buffer = buffer + (ulong)byte_var * -2 + 1;\n      }\n    }\n    deallocate_memory(temp_ptr);\nLAB_001166f8:\n    deallocate_memory(input_array);\n    return output_size;\n  }\n  if (ptr2[2] != 0) {\n    note_size = ptr2[7];\n    var9 = ptr2[8];\n    var13 = ptr2[2];\n    ptr6 = ptr2;\n    loop_counter = 0;\n    if (note_size == var9) {\n      ptr2[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptr = ptr6;\n          ptr6 = ptr + -9;\n          if (ptr6 < input_array) goto LAB_001167f5;\n          var20 = ptr[-7];\n        } while (var20 == 0);\n        input_size = var13;\n        if ((*ptr6 != *ptr2) ||\n           (comparison_result = compare_memory((void *)ptr[-6],(void *)ptr2[3],*ptr2), comparison_result != 0)) break;\n        var13 = ptr[-2];\n        var11 = ptr[-1];\n        if (note_size == var13) {\n          if (var9 == var11) {\n            ptr2[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (var9 <= var11) {\n            ptr2[2] = 0;\n            break;\n          }\n          if (var11 < note_size) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < var11) || (note_size <= (var11 + 0xf & 0xfffffffffffffff0)))\n            goto extract_build_notes_001086af_00116852;\n          }\nLAB_001167b8:\n          if ((input_size == 0x101) == (var20 == 0x101)) {\n            if (var11 <= var9) {\n              var11 = var9;\n            }\n            if (var13 < note_size) {\n              note_size = var13;\n            }\n            ptr[-1] = var11;\n            ptr[-2] = note_size;\n            ptr2[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (var13 <= note_size) goto LAB_001167a6;\n          if (var11 < note_size) goto LAB_0010852c;\n          if (var9 < note_size) {\n            if ((0xfffffffffffffff0 < var9) || (var13 <= (var9 + 0xf & 0xfffffffffffffff0)))\n            goto extract_build_notes_001086af_00116852;\n            goto LAB_001167b8;\n          }\n          if (var9 != var11) goto LAB_001167b8;\n        }\nextract_build_notes_001086af_00116852:\n        flag = loop_counter < 0x11;\n        var13 = input_size;\n        loop_counter = loop_counter + 1;\n      } while (flag);\n    }\n  }\nLAB_001167f5:\n  ptr2 = ptr2 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "current_name": "extract_build_notes_001086af",
            "entrypoint": "0x001086af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001086af": "extract_build_notes_001086af",
                "__nmemb": "num_elements",
                "__ptr": "temp_ptr",
                "bVar22": "byte_var",
                "bVar4": "flag",
                "bfd_nonfatal_message": "report_bfd_non_fatal_message",
                "bfd_set_error": "set_bfd_error",
                "cVar17": "char_var",
                "compare_gnu_build_notes": "compare_notes",
                "dcgettext": "get_text",
                "extract_build_attribute_notes_00116490": "extract_attributes",
                "free": "deallocate_memory",
                "iVar23": "loop_counter",
                "iVar6": "comparison_result",
                "in_RCX": "input1",
                "in_stack_00000030": "buffer",
                "in_stack_00000038": "stack_var2",
                "lVar7": "error_message",
                "memcmp": "compare_memory",
                "non_fatal": "print_warning",
                "param_10": "output_size",
                "param_11": "input_array",
                "param_13": "param1",
                "param_14": "error_message",
                "param_7": "input_size",
                "param_8": "param2",
                "param_9": "version",
                "puVar15": "ptr2",
                "puVar16": "ptr3",
                "puVar18": "ptr4",
                "puVar19": "ptr3",
                "puVar21": "ptr6",
                "puVar5": "ptr",
                "qsort": "sort_notes",
                "sort_gnu_build_notes": "sort_notes",
                "uVar1": "result",
                "uVar10": "note_size",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "temp_value_3",
                "uVar16": "temp_value_4",
                "uVar18": "temp_value_6",
                "uVar19": "temp_value_7",
                "uVar2": "var2",
                "uVar20": "var20",
                "uVar21": "var21",
                "uVar3": "var3",
                "uVar5": "var5",
                "uVar8": "var8",
                "uVar9": "var9",
                "unaff_R1": "error_code1",
                "unaff_R12": "current_note",
                "unaff_R13": "input_r13",
                "unaff_R14": "function_pointers",
                "unaff_RBP": "note_type",
                "unaff_RBX": "remaining_notes",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010870e": {
            "additional_data": {
                "*param_3": {
                    "1": "value"
                },
                "*puVar1": {
                    "1": "dereferenced_ptr_to_value",
                    "2": "dereferenced_ptr"
                },
                "FUN_0010870e": {
                    "1": "store_parameter_and_increment_pointer",
                    "2": "update_pointer_and_value",
                    "3": "store_parameter_value",
                    "5": "update_pointer_value"
                },
                "param_1": {
                    "1": "target_pointer",
                    "2": "pointer",
                    "3": "new_value",
                    "4": "param1"
                },
                "param_2": {
                    "1": "ptr_array",
                    "14": "new_value",
                    "2": "param2",
                    "4": "value"
                },
                "param_3": {
                    "1": "pointer_list",
                    "2": "param3",
                    "3": "pointer_array"
                },
                "puVar1": {
                    "1": "memory_pointer",
                    "2": "value_pointer",
                    "3": "ptr_to_value",
                    "6": "current_pointer"
                },
                "puVar1 + 1": {
                    "1": "next_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid update_pointer_value_0010870e(undefined8 value_to_store,undefined8 new_value,long *pointer_array)\n\n{\n  undefined8 *current_pointer;\n  \n  current_pointer = (undefined8 *)*pointer_array;\n  *current_pointer = new_value;\n  *pointer_array = (long)(current_pointer + 1);\n  return;\n}\n\n",
            "current_name": "update_pointer_value_0010870e",
            "entrypoint": "0x0010870e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010870e": "update_pointer_value_0010870e",
                "param_1": "value_to_store",
                "param_2": "new_value",
                "param_3": "pointer_array",
                "puVar1": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010871c": {
            "additional_data": {
                "FUN_0010871c": {
                    "1": "print_error_details",
                    "25": "print_error_message",
                    "5": "print_error"
                },
                "uVar1": {
                    "1": "error_description",
                    "20": "error_message",
                    "3": "error_string"
                },
                "unaff_RBX": {
                    "1": "is_error",
                    "16": "error_code",
                    "9": "error_flag"
                },
                "unaff_retaddr": {
                    "1": "return_addr",
                    "29": "return_address"
                }
            },
            "called": [
                "FUN_001045e0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011a110"
            ],
            "code": "\n\n\nvoid print_error_message_0010871c(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010871c",
            "entrypoint": "0x0010871c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010875d": {
            "additional_data": {
                "*param_1": {
                    "1": "record_1"
                },
                "*param_2": {
                    "1": "record_2"
                },
                "FUN_0010875d": {
                    "1": "compare_structs",
                    "27": "compare_records"
                },
                "iVar3": {
                    "24": "result",
                    "7": "comparison_result"
                },
                "lVar1": {
                    "1": "size1",
                    "10": "record1_value",
                    "2": "record1_address",
                    "5": "value1"
                },
                "lVar2": {
                    "1": "record2_data",
                    "10": "record2_value",
                    "2": "record2_address",
                    "5": "value2"
                },
                "param_1": {
                    "1": "obj1",
                    "2": "item_a",
                    "21": "record1",
                    "4": "record_1"
                },
                "param_2": {
                    "1": "obj2",
                    "2": "item_b",
                    "21": "record2",
                    "4": "record_2"
                },
                "uVar4": {
                    "1": "flags",
                    "19": "flag",
                    "2": "item_b_flag",
                    "6": "record2_flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long record1_value;\n  long record2_value;\n  int result;\n  uint flag;\n  \n  record1_value = *record1;\n  record2_value = *record2;\n  flag = *(uint *)(record2_value + 0x24) & 0x102;\n  if ((*(uint *)(record1_value + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1_value + 0x38) <= *(ulong *)(record2_value + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2_value + 0x38) <= *(ulong *)(record1_value + 0x38)) {\n      if (*(ulong *)(record2_value + 0x40) < *(ulong *)(record1_value + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2_value + 0x40) <= *(ulong *)(record1_value + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1_value + 0x18) <= *(uint *)(record2_value + 0x18)) {\n            return -(uint)(*(uint *)(record1_value + 0x18) < *(uint *)(record2_value + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "compare_records_0010875d",
            "entrypoint": "0x0010875d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "iVar3": "result",
                "lVar1": "record1_value",
                "lVar2": "record2_value",
                "param_1": "record1",
                "param_2": "record2",
                "uVar4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087da": {
            "additional_data": {
                "FUN_001087da": {
                    "1": "check_return_value",
                    "2": "check_value",
                    "4": "check_rax_value",
                    "8": "check_if_rax_equals100"
                },
                "auVar1": {
                    "1": "return_value",
                    "25": "result"
                },
                "in_RAX": {
                    "1": "address_value",
                    "17": "input_value",
                    "2": "value_to_check",
                    "6": "value"
                },
                "unaff_retaddr": {
                    "28": "return_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a1b0"
            ],
            "code": "\nundefined  [16] check_if_rax_equals100_001087da(void)\n\n{\n  long input_value;\n  undefined result [16];\n  undefined8 return_address;\n  \n  result._1_7_ = 0;\n  result[0] = input_value == 0x100;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "check_if_rax_equals100_001087da",
            "entrypoint": "0x001087da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087da": "check_if_rax_equals100_001087da",
                "auVar1": "result",
                "in_RAX": "input_value",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087fd": {
            "additional_data": {
                "FUN_001087fd": {
                    "1": "get_zero_value",
                    "10": "initialize",
                    "2": "return_zero",
                    "3": "initialize_program",
                    "6": "get_default_value"
                },
                "return": {
                    "1": "status"
                },
                "undefined8": {
                    "11": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a250"
            ],
            "code": "\nvoid initialize_001087fd(void)\n\n{\n  status 0;\n}\n\n",
            "current_name": "initialize_001087fd",
            "entrypoint": "0x001087fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087fd": "initialize_001087fd",
                "return": "status",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108800": {
            "additional_data": {
                "*param_1": {
                    "1": "hash",
                    "6": "input_string"
                },
                "<original_parameter_name_1>": {
                    "1": "string"
                },
                "<original_variable_name_1>": {
                    "1": "hash_result"
                },
                "FUN_00108800": {
                    "1": "hash_string_function",
                    "2": "compute_hash",
                    "20": "hash_string",
                    "5": "calculate_hash"
                },
                "htab_hash_string": {
                    "1": "hash_string"
                },
                "param_1": {
                    "1": "str",
                    "12": "input_string",
                    "2": "string_pointer",
                    "3": "string"
                },
                "param_1[0]": {
                    "1": "input_str"
                }
            },
            "called": [
                "FUN_001048f8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid hash_string_00108800(undefined8 *input_string)\n\n{\n  hash_string_00108800(*input_string);\n  return;\n}\n\n",
            "current_name": "hash_string_00108800",
            "entrypoint": "0x00108800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "htab_hash_string": "hash_string",
                "param_1": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108808": {
            "additional_data": {
                "FUN_00108808": {
                    "1": "find_and_fatal_missing_section",
                    "2": "find_and_print_missing_section",
                    "9": "find_and_print_section"
                },
                "dcgettext": {
                    "1": "translate_error_message"
                },
                "fatal": {
                    "1": "handle_fatal_error"
                },
                "param_1": {
                    "1": "var1",
                    "2": "arg1"
                },
                "param_2": {
                    "1": "var2",
                    "2": "arg2"
                },
                "param_3": {
                    "1": "var3",
                    "2": "arg3"
                },
                "param_4": {
                    "1": "var4",
                    "2": "arg4"
                },
                "uVar1": {
                    "22": "section_address",
                    "4": "section_pointer",
                    "5": "section_name"
                },
                "uVar2": {
                    "1": "section_name",
                    "2": "section_not_found_error_message",
                    "23": "error_message",
                    "3": "error_string"
                },
                "unaff_RBP": {
                    "1": "stack_pointer",
                    "16": "base_pointer",
                    "4": "base_address",
                    "5": "stack_base"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_0011a2e0"
            ],
            "code": "\nvoid find_and_print_section_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long base_pointer;\n  \n  section_address = *(undefined8 *)(base_pointer + 0x20);\n  error_message = translate_error_message(0,\"Section %s not found\",5);\n                    \n  handle_fatal_error(error_message,section_address);\n}\n\n",
            "current_name": "find_and_print_section_00108808",
            "entrypoint": "0x00108808",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108808": "find_and_print_section_00108808",
                "dcgettext": "translate_error_message",
                "fatal": "handle_fatal_error",
                "uVar1": "section_address",
                "uVar2": "error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010882c": {
            "additional_data": {
                "*piVar1": {
                    "1": "error_code_ptr"
                },
                "FUN_0010882c": {
                    "1": "print_set_time_error_message",
                    "14": "set_time_error",
                    "2": "set_time_error_message",
                    "3": "print_error_message",
                    "5": "set_time_error_handling"
                },
                "dcgettext": {
                    "1": "translate_error_message"
                },
                "non_fatal": {
                    "2": "handle_non_fatal_error"
                },
                "param_1": {
                    "1": "param1",
                    "2": "unknown_param1"
                },
                "param_2": {
                    "1": "unknown_param_2",
                    "2": "unknown_param2"
                },
                "param_3": {
                    "1": "unknown_param_3",
                    "2": "unknown_param3"
                },
                "param_4": {
                    "1": "unknown_param_4",
                    "2": "unknown_param4"
                },
                "piVar1": {
                    "1": "error_location_ptr",
                    "2": "error_code",
                    "3": "error_pointer",
                    "4": "errno_location",
                    "6": "errno_ptr",
                    "7": "error_location"
                },
                "strerror": {
                    "1": "get_error_message"
                },
                "uVar2": {
                    "1": "translation",
                    "15": "error_message",
                    "4": "localized_error_message",
                    "7": "error_string"
                }
            },
            "called": [
                "FUN_00104890",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\nvoid set_time_error_0010882c(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  \n  error_location = __errno_location();\n  get_error_message(*error_location);\n  error_message = translate_error_message(0,\"%s: cannot set time: %s\",5);\n  handle_non_fatal_error(error_message);\n  return;\n}\n\n",
            "current_name": "set_time_error_0010882c",
            "entrypoint": "0x0010882c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010882c": "set_time_error_0010882c",
                "dcgettext": "translate_error_message",
                "non_fatal": "handle_non_fatal_error",
                "piVar1": "error_location",
                "strerror": "get_error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108863": {
            "additional_data": {
                "&DAT_00127720": {
                    "1": "start_pointer"
                },
                "&DAT_001278a0": {
                    "1": "end_pointer"
                },
                "*(void **)(puVar1 + 4)": {
                    "1": "pointer_to_free"
                },
                "FUN_00108863": {
                    "1": "free_resources",
                    "12": "free_memory_blocks",
                    "2": "release_memory",
                    "4": "free_memory",
                    "9": "clear_memory"
                },
                "puVar1": {
                    "1": "current_block_ptr",
                    "14": "current_block",
                    "2": "block_pointer",
                    "3": "current_ptr",
                    "5": "current_pointer"
                },
                "puVar2": {
                    "1": "next_block_ptr",
                    "14": "next_block",
                    "2": "next_block_pointer",
                    "3": "next_ptr",
                    "7": "next_pointer"
                }
            },
            "called": [
                "FUN_001048f0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid free_memory_blocks_00108863(void)\n\n{\n  undefined4 *current_block;\n  undefined4 *next_block;\n  \n  current_block = (undefined4 *)&DAT_00127720;\n  do {\n    next_block = current_block + 6;\n    free(*(void **)(current_block + 4));\n    *(undefined8 *)(current_block + 4) = 0;\n    current_block = next_block;\n  } while (next_block != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "current_name": "free_memory_blocks_00108863",
            "entrypoint": "0x00108863",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108863": "free_memory_blocks_00108863",
                "puVar1": "current_block",
                "puVar2": "next_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108898": {
            "additional_data": {
                "FUN_00108898": {
                    "31": "compare_strings"
                },
                "auVar2": {
                    "1": "comparison_value",
                    "11": "result",
                    "2": "comparison_result_array",
                    "3": "comparison_result"
                },
                "iVar1": {
                    "1": "result",
                    "24": "comparison_result",
                    "6": "string_comparison_result"
                },
                "in_RAX": {
                    "1": "temp_value",
                    "2": "return_address",
                    "3": "undefined_value",
                    "7": "return_value"
                },
                "param_1": {
                    "31": "string1"
                },
                "param_2": {
                    "31": "string2"
                }
            },
            "called": [
                "FUN_00104470"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] compare_strings_00108898(char **string1,char **string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined result [16];\n  \n  comparison_result = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_00108898",
            "entrypoint": "0x00108898",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "auVar2": "result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001088ae": {
            "additional_data": {
                "FUN_001088ae": {
                    "1": "update_user_data",
                    "19": "update_data",
                    "2": "update_data_and_return_index",
                    "4": "update_data_entry"
                },
                "iVar1": {
                    "1": "current_index",
                    "2": "count",
                    "20": "new_index",
                    "3": "next_index"
                },
                "lVar2": {
                    "1": "current_position",
                    "15": "index",
                    "3": "data_index",
                    "8": "current_index"
                },
                "lVar3": {
                    "1": "current_offset",
                    "2": "data_offset",
                    "21": "offset"
                },
                "lvar3": {
                    "1": "offset"
                },
                "param_1": {
                    "1": "data1",
                    "19": "new_value1",
                    "2": "new_param1",
                    "8": "value1"
                },
                "param_2": {
                    "1": "data2",
                    "19": "new_value2",
                    "2": "new_param2",
                    "8": "value2"
                },
                "param_3": {
                    "1": "new_data1",
                    "16": "new_value3",
                    "2": "value3",
                    "4": "data1"
                },
                "param_4": {
                    "1": "new_pointer2",
                    "12": "new_value4",
                    "2": "new_param4",
                    "4": "data2",
                    "5": "new_string"
                },
                "uVar4": {
                    "1": "duplicated_param",
                    "10": "duplicated_string",
                    "2": "duplicated_str",
                    "3": "copied_string",
                    "4": "duplicated_data",
                    "7": "duplicated_value"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001043d0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nulong update_data_001088ae(undefined4 new_value1,undefined4 new_value2,undefined8 new_value3,undefined8 new_value4)\n\n{\n  int new_index;\n  long index;\n  long offset;\n  undefined8 duplicated_string;\n  \n  index = (long)DAT_001278a0;\n  offset = index * 0x18;\n  free((void *)(&DAT_00127730)[index * 3]);\n  *(undefined4 *)(&DAT_00127720 + offset) = new_value1;\n  *(undefined4 *)(&DAT_00127724 + offset) = new_value2;\n  *(undefined8 *)(&DAT_00127728 + offset) = new_value3;\n  duplicated_string = xstrdup(new_value4);\n  (&DAT_00127730)[index * 3] = duplicated_string;\n  new_index = DAT_001278a0 + 1;\n  DAT_001278a0 = new_index % 0x10;\n  return (long)new_index / 0x10 & 0xffffffff;\n}\n\n",
            "current_name": "update_data_001088ae",
            "entrypoint": "0x001088ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001088ae": "update_data_001088ae",
                "iVar1": "new_index",
                "lVar2": "index",
                "lVar3": "offset",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "param_4": "new_value4",
                "uVar4": "duplicated_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108916": {
            "additional_data": {
                "DAT_001275e0": {
                    "1": "default_text"
                },
                "FUN_00104a35": {
                    "1": "copy_binary_file"
                },
                "FUN_00108916": {
                    "1": "print_binary_file_options",
                    "2": "print_usage_and_exit",
                    "24": "print_usage",
                    "4": "print_usage_message"
                },
                "dcgettext": {
                    "1": "localized_text",
                    "2": "get_translated_string"
                },
                "exit": {
                    "1": "terminate_program"
                },
                "fprintf": {
                    "1": "print_to_output",
                    "2": "write_to_file"
                },
                "list_supported_targets": {
                    "2": "list_supported_targets"
                },
                "param_1": {
                    "1": "file_ptr",
                    "20": "output_file",
                    "3": "file_pointer",
                    "6": "file"
                },
                "param_2": {
                    "1": "status",
                    "19": "exit_code",
                    "2": "exit_status",
                    "9": "error_code"
                },
                "pcVar2": {
                    "1": "translation",
                    "12": "message",
                    "2": "localized_text",
                    "3": "text"
                },
                "uVar1": {
                    "1": "usage_format",
                    "2": "default_usage",
                    "3": "program_name",
                    "5": "usage_message",
                    "6": "usage_string"
                }
            },
            "called": [
                "FUN_001047f0",
                "FUN_00104240",
                "FUN_001044b0",
                "FUN_00104a35"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_00108916(FILE *output_file,int exit_code)\n\n{\n  undefined8 usage_string;\n  char *message;\n  \n  usage_string = DAT_001275e0;\n  message = (char *)get_translated_string(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  write_to_file(output_file,message,usage_string);\n  message = (char *)get_translated_string(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  write_to_file(output_file,message);\n  message = (char *)get_translated_string(0,\" The options are:\\n\",5);\n  write_to_file(output_file,message);\n  message = (char *)get_translated_string(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  write_to_file(output_file,message);\n  message = (char *)get_translated_string(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  write_to_file(output_file,message);\n  message = (char *)get_translated_string(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  write_to_file(output_file,message);\n  list_supported_targets(DAT_001275e0,output_file);\n  if (exit_code == 0) {\n    message = (char *)get_translated_string(0,\"Report bugs to %s\\n\",5);\n    write_to_file(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminate_program(exit_code);\n}\n\n",
            "current_name": "print_usage_00108916",
            "entrypoint": "0x00108916",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "dcgettext": "get_translated_string",
                "exit": "terminate_program",
                "fprintf": "write_to_file",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "uVar1": "usage_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108a2a": {
            "additional_data": {
                "FUN_00104a35": {
                    "1": "print_supported_targets"
                },
                "FUN_00108a2a": {
                    "1": "display_usage",
                    "11": "print_usage_and_exit",
                    "18": "print_usage"
                },
                "dcgettext": {
                    "1": "get_translated_text",
                    "2": "get_translated_message",
                    "3": "get_translated_string"
                },
                "exit": {
                    "1": "exit_program"
                },
                "fprintf": {
                    "1": "print_to_output",
                    "2": "write_to_output"
                },
                "list_supported_targets": {
                    "1": "print_supported_targets",
                    "2": "display_supported_targets",
                    "5": "list_supported_targets"
                },
                "param_1": {
                    "1": "file_output",
                    "24": "output_file",
                    "3": "file_pointer"
                },
                "param_2": {
                    "22": "exit_code",
                    "9": "error_code"
                },
                "pcVar2": {
                    "1": "translation",
                    "18": "message",
                    "2": "text",
                    "3": "localized_string"
                },
                "uVar1": {
                    "1": "default_value",
                    "2": "default_version",
                    "3": "default_message",
                    "4": "program_name",
                    "7": "version",
                    "8": "version_number"
                }
            },
            "called": [
                "FUN_001047f0",
                "FUN_00104240",
                "FUN_001044b0",
                "FUN_00104a35"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 version_number;\n  char *message;\n  \n  version_number = DAT_001275e0;\n  message = (char *)get_translated_string(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  write_to_output(output_file,message,version_number);\n  message = (char *)get_translated_string(0,\" Removes symbols and sections from files\\n\",5);\n  write_to_output(output_file,message);\n  message = (char *)get_translated_string(0,\" The options are:\\n\",5);\n  write_to_output(output_file,message);\n  message = (char *)get_translated_string(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  write_to_output(output_file,message);\n  message = (char *)get_translated_string(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  write_to_output(output_file,message);\n  message = (char *)get_translated_string(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  write_to_output(output_file,message);\n  list_supported_targets(DAT_001275e0,output_file);\n  if (exit_code == 0) {\n    message = (char *)get_translated_string(0,\"Report bugs to %s\\n\",5);\n    write_to_output(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_usage_00108a2a",
            "entrypoint": "0x00108a2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "dcgettext": "get_translated_string",
                "exit": "exit_program",
                "fprintf": "write_to_output",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "uVar1": "version_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108b3e": {
            "additional_data": {
                "FUN_00108b3e": {
                    "1": "print_last_stab_entries",
                    "13": "print_last_stabs_entries",
                    "2": "print_debugging_info",
                    "7": "print_stabs_entries",
                    "8": "print_stab_entries"
                },
                "__format": {
                    "1": "format_msg",
                    "2": "error_message",
                    "22": "format_string",
                    "3": "format_str"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "fprintf": {
                    "1": "write_to_stderr"
                },
                "fputc": {
                    "1": "put_char_to_file"
                },
                "fwrite": {
                    "2": "write_to_file"
                },
                "iVar5": {
                    "1": "loop_index",
                    "10": "counter",
                    "2": "index",
                    "3": "iteration",
                    "6": "count"
                },
                "lVar1": {
                    "1": "name_addr",
                    "26": "stab_name",
                    "3": "name"
                },
                "lVar2": {
                    "1": "current_index",
                    "21": "index",
                    "3": "i_var5",
                    "4": "loop_index"
                },
                "lVar3": {
                    "1": "stab_entry_offset",
                    "2": "stab_index",
                    "23": "offset",
                    "5": "stab_offset"
                },
                "param1": {
                    "1": "stdout"
                },
                "param2": {
                    "1": "format_string"
                },
                "param3": {
                    "1": "return_value"
                },
                "param_1": {
                    "1": "param_format",
                    "23": "param_1",
                    "3": "param1"
                },
                "param_2": {
                    "1": "param_b",
                    "23": "param_2",
                    "3": "param2"
                },
                "param_3": {
                    "1": "param_c",
                    "21": "param_3",
                    "3": "param3"
                },
                "piVar4": {
                    "1": "stab_entry_ptr",
                    "14": "stab_entry",
                    "2": "stab_data",
                    "7": "stab_ptr"
                }
            },
            "called": [
                "FUN_00104800",
                "FUN_00104110",
                "FUN_001043f0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long index;\n  long offset;\n  int *stab_entry;\n  int counter;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  write_to_stderr(error_output,format_string);\n  write_to_file(\"n_type n_desc n_value  string\\n\",1,0x1e,error_output);\n  counter = DAT_001278a0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stab_entry = (int *)(&DAT_00127720 + offset);\n    if ((&DAT_00127730)[index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          write_to_file(\"HdrSym\",1,6,error_output);\n        }\n        else {\n          write_to_stderr(error_output,\"%-6d\");\n        }\n      }\n      else {\n        write_to_stderr(error_output,\"%-6s\",stab_name);\n      }\n      write_to_stderr(error_output,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + offset));\n      write_to_stderr(error_output,\"%08lx\",*(undefined8 *)(&DAT_00127728 + offset));\n      if (*stab_entry != 0) {\n        write_to_stderr(error_output,\" %s\",(&DAT_00127730)[index * 3]);\n      }\n      write_char_to_stderr(10,error_output);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278a0 != counter);\n  return param_3;\n}\n\n",
            "current_name": "print_last_stabs_entries_00108b3e",
            "entrypoint": "0x00108b3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "format_string",
                "_stderr": "error_output",
                "fprintf": "write_to_stderr",
                "fputc": "write_char_to_stderr",
                "fwrite": "write_to_file",
                "iVar5": "counter",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stab_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108c86": {
            "additional_data": {
                "*param_1": {
                    "1": "driver_name"
                },
                "FUN_00108c86": {
                    "1": "parse_driver_prefix",
                    "2": "extract_driver_name",
                    "5": "extract_binary_info",
                    "7": "parse_driver_name"
                },
                "FUN_00113fb0": {
                    "1": "startswith_lto_priv_0_lto_priv_0"
                },
                "VAR_1": {
                    "1": "length"
                },
                "__s": {
                    "1": "current_char",
                    "2": "input_string",
                    "3": "input_str",
                    "5": "driver_name"
                },
                "__s1": {
                    "1": "suffix_ptr",
                    "2": "arch_type",
                    "4": "arch_string",
                    "6": "arch",
                    "8": "architecture"
                },
                "bVar8": {
                    "1": "byte_var",
                    "10": "flag",
                    "2": "byte_value"
                },
                "cVar1": {
                    "1": "is_startswith_lto_priv_0",
                    "11": "starts_with_lto",
                    "8": "startswith_result"
                },
                "iVar2": {
                    "1": "string_comparison",
                    "10": "strcmp_result",
                    "18": "comparison_result"
                },
                "lVar5": {
                    "1": "current_position",
                    "13": "offset",
                    "2": "address_offset",
                    "3": "length"
                },
                "param_1": {
                    "1": "module_address",
                    "2": "input_data",
                    "3": "input_ptr",
                    "5": "driver_name_ptr"
                },
                "puVar4": {
                    "1": "version_ptr",
                    "2": "new_driver_name"
                },
                "puVar6": {
                    "1": "ptr_in_memory",
                    "2": "ptr",
                    "3": "new_driver_name_ptr"
                },
                "sVar3": {
                    "1": "function_name_length",
                    "2": "length",
                    "3": "input_length",
                    "9": "string_length"
                },
                "startsWith_lto_priv_0_lto_priv_0": {
                    "1": "startswith"
                },
                "strcmp": {
                    "2": "compare_strings"
                },
                "strlen": {
                    "1": "get_component_length"
                },
                "uVar7": {
                    "1": "data_length",
                    "12": "result",
                    "14": "return_value"
                },
                "xmalloc": {
                    "1": "allocate_buffer"
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_00113fb0",
                "FUN_00104470",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 parse_driver_name_00108c86(long *driver_name_ptr)\n\n{\n  char starts_with_lto;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *output_ptr;\n  long offset;\n  char *driver_name;\n  char *architecture;\n  undefined2 *new_driver_name_ptr;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  offset = *driver_name_ptr;\n  driver_name = (char *)(offset + 4);\n  starts_with_lto = startswith_lto_priv_0_lto_priv_0(driver_name,&DAT_0011b73b);\n  if (starts_with_lto == '\\0') {\n    starts_with_lto = startswith_lto_priv_0_lto_priv_0(driver_name,\"bsdrv-\");\n    if (starts_with_lto == '\\0') {\n      starts_with_lto = startswith_lto_priv_0_lto_priv_0(driver_name,\"rtdrv-\");\n      if (starts_with_lto == '\\0') {\n        return 0xffffffff;\n      }\n      driver_name = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      driver_name = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = get_component_length(driver_name);\n  output_ptr = (undefined2 *)allocate_buffer(string_length + 8);\n  architecture = driver_name + 4;\n  new_driver_name_ptr = output_ptr;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)new_driver_name_ptr = *driver_name;\n    driver_name = driver_name + (ulong)flag * -2 + 1;\n    new_driver_name_ptr = (undefined2 *)((long)new_driver_name_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(output_ptr + 1) = 0x69;\n  *output_ptr = 0x6570;\n  comparison_result = compare_strings(architecture,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)output_ptr + 7) = 0x36;\n    *(undefined2 *)((long)output_ptr + 5) = 0x3833;\n  }\n  else {\n    comparison_result = compare_strings(architecture,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)output_ptr + 7) = 0x2d;\n    }\n    else {\n      comparison_result = compare_strings(architecture,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)output_ptr + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *driver_name_ptr = (long)output_ptr;\n  return return_value;\n}\n\n",
            "current_name": "parse_driver_name_00108c86",
            "entrypoint": "0x00108c86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108c86": "parse_driver_name_00108c86",
                "__s": "driver_name",
                "__s1": "architecture",
                "bVar8": "flag",
                "cVar1": "starts_with_lto",
                "iVar2": "comparison_result",
                "lVar5": "offset",
                "param_1": "driver_name_ptr",
                "puVar4": "output_ptr",
                "puVar6": "new_driver_name_ptr",
                "sVar3": "string_length",
                "strcmp": "compare_strings",
                "strlen": "get_component_length",
                "uVar7": "return_value",
                "xmalloc": "allocate_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108d9a": {
            "additional_data": {
                "FUN_00108d9a": {
                    "1": "check_redefinitions",
                    "14": "check_symbol_redefinition",
                    "2": "validate_symbol_redefinition",
                    "3": "check_symbol_redefined",
                    "6": "check_redefinition"
                },
                "dcgettext": {
                    "1": "get_message_translation",
                    "4": "get_error_message"
                },
                "fatal": {
                    "1": "handle_fatal_error",
                    "2": "report_error"
                },
                "htab_find": {
                    "1": "symbol_table_find",
                    "3": "find_symbol"
                },
                "htab_find_slot": {
                    "1": "find_slot"
                },
                "lVar3": {
                    "1": "symbol_entry_found",
                    "11": "symbol_found",
                    "2": "lookup_result",
                    "3": "symbol_entry",
                    "6": "symbol_exists"
                },
                "param_1": {
                    "1": "error_code",
                    "14": "error_message",
                    "2": "filename",
                    "3": "message",
                    "4": "file_name"
                },
                "param_2": {
                    "1": "symbol_name_old",
                    "13": "symbol_name",
                    "2": "symbol_1",
                    "7": "symbol_name1"
                },
                "param_3": {
                    "1": "symbol_name_new",
                    "2": "symbol2",
                    "4": "target_name",
                    "7": "symbol_name2",
                    "9": "target_symbol"
                },
                "param_4": {
                    "19": "result",
                    "5": "return_value",
                    "7": "param_4"
                },
                "pcVar2": {
                    "1": "symbol_name_old_copy",
                    "2": "symbol_name_ptr",
                    "3": "symbol_name_copy",
                    "7": "duplicate_symbol"
                },
                "plVar5": {
                    "1": "target_symbol_entry",
                    "2": "slot_pointer",
                    "3": "slot_ptr",
                    "5": "slot_address",
                    "9": "symbol_slot"
                },
                "ppcVar1": {
                    "1": "symbols",
                    "2": "symbol_pointers",
                    "4": "symbol_entry",
                    "5": "symbol_pair"
                },
                "strdup": {
                    "2": "duplicate_string"
                },
                "uVar4": {
                    "1": "error_msg_id",
                    "15": "error_message",
                    "2": "translation",
                    "3": "error_msg"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240",
                "FUN_001047d0",
                "FUN_00104390",
                "FUN_001044a0",
                "FUN_00104880"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_pair;\n  char *duplicate_symbol;\n  long symbol_found;\n  undefined8 error_message;\n  long *symbol_slot;\n  \n  symbol_pair = (char **)allocate_memory(0x10);\n  duplicate_symbol = duplicate_string(symbol_name);\n  *symbol_pair = duplicate_symbol;\n  duplicate_symbol = duplicate_string(target_symbol);\n  error_message = DAT_001278d0;\n  symbol_pair[1] = duplicate_symbol;\n  symbol_found = find_symbol(error_message,symbol_pair);\n  if (symbol_found != 0) {\n    error_message = get_error_message(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    report_error(error_message,error_message,symbol_name);\n  }\n  symbol_found = find_symbol(DAT_001278c8,target_symbol);\n  if (symbol_found != 0) {\n    error_message = get_error_message(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    report_error(error_message,error_message,target_symbol);\n  }\n  symbol_slot = (long *)find_empty_slot(DAT_001278d0,symbol_pair,1);\n  error_message = DAT_001278c8;\n  *symbol_slot = (long)symbol_pair;\n  duplicate_symbol = symbol_pair[1];\n  symbol_pair = (char **)find_empty_slot(error_message,duplicate_symbol,1);\n  *symbol_pair = duplicate_symbol;\n  return result;\n}\n\n",
            "current_name": "check_symbol_redefinition_00108d9a",
            "entrypoint": "0x00108d9a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "dcgettext": "get_error_message",
                "fatal": "report_error",
                "htab_find": "find_symbol",
                "htab_find_slot": "find_empty_slot",
                "lVar3": "symbol_found",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "pcVar2": "duplicate_symbol",
                "plVar5": "symbol_slot",
                "ppcVar1": "symbol_pair",
                "strdup": "duplicate_string",
                "uVar4": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108e76": {
            "additional_data": {
                "FUNKY_FUNCTION": {
                    "1": "extract_integer_from_string"
                },
                "FUN_00108e76": {
                    "1": "extract_decimal_number",
                    "2": "extract_integer_from_byte_array",
                    "5": "parse_integer"
                },
                "_sch_istable": {
                    "1": "character_table"
                },
                "bVar1": {
                    "19": "current_byte",
                    "9": "current_char"
                },
                "iVar2": {
                    "1": "converted_int",
                    "11": "result",
                    "4": "parsed_integer"
                },
                "param_1": {
                    "1": "byte_array_reference",
                    "2": "data",
                    "3": "string_ptr",
                    "5": "input",
                    "8": "byte_array"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_0010d21c"
            ],
            "code": "\nint parse_integer_00108e76(byte **byte_array)\n\n{\n  byte current_byte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_byte = **byte_array;\n    if (((&character_table)[(ulong)current_byte * 2] & 4) == 0) break;\n    *byte_array = *byte_array + 1;\n    result = result * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return result;\n}\n\n",
            "current_name": "parse_integer_00108e76",
            "entrypoint": "0x00108e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108e76": "parse_integer_00108e76",
                "_sch_istable": "character_table",
                "bVar1": "current_byte",
                "iVar2": "result",
                "param_1": "byte_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108ea1": {
            "additional_data": {
                "FUN_00108ea1": {
                    "1": "extract_number_from_string",
                    "13": "parse_number",
                    "2": "parse_number_from_string",
                    "6": "parse_integer"
                },
                "_sch_istable": {
                    "1": "character_table"
                },
                "iVar1": {
                    "1": "digit",
                    "2": "accumulator",
                    "5": "current_digit"
                },
                "param_1": {
                    "1": "data",
                    "10": "input_ptr",
                    "3": "input_string",
                    "4": "string_ptr",
                    "5": "input"
                },
                "param_2": {
                    "1": "output_int",
                    "2": "result_ptr",
                    "3": "output_ptr",
                    "4": "parsed_number",
                    "6": "output_value"
                },
                "pbVar2": {
                    "1": "string",
                    "12": "current_char",
                    "2": "current_ptr"
                },
                "pbVar3": {
                    "1": "next_byte_pointer",
                    "12": "next_byte",
                    "2": "next_byte_ptr"
                },
                "uVar4": {
                    "1": "parsed_value",
                    "27": "result",
                    "3": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "code": "\nulong parse_number_00108ea1(byte **input_ptr,int *output_value)\n\n{\n  int current_digit;\n  byte *current_char;\n  byte *next_char;\n  ulong result;\n  \n  current_char = *input_ptr;\n  result = 0;\n  if (((&char_table)[(ulong)*current_char * 2] & 4) != 0) {\n    next_char = current_char + 1;\n    current_digit = (char)*current_char + -0x30;\n    *output_value = current_digit;\n    *input_ptr = next_char;\n    if (((&char_table)[(ulong)current_char[1] * 2] & 4) != 0) {\n      do {\n        current_char = next_char;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*current_char;\n        next_char = current_char + 1;\n      } while (((&char_table)[(ulong)current_char[1] * 2] & 4) != 0);\n      if (current_char[1] == 0x5f) {\n        next_char = current_char + 2;\n        *input_ptr = next_char;\n        *output_value = current_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_char >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "current_name": "parse_number_00108ea1",
            "entrypoint": "0x00108ea1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "_sch_istable": "char_table",
                "iVar1": "current_digit",
                "param_1": "input_ptr",
                "param_2": "output_value",
                "pbVar2": "current_char",
                "pbVar3": "next_char",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f05": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "<unnamed_variable>": {
                    "1": "result"
                },
                "FUN_00108f05": {
                    "1": "check_if_true",
                    "13": "get_one",
                    "2": "initialize"
                },
                "return": {
                    "1": "return_value"
                },
                "undefined": {
                    "1": "int"
                }
            },
            "called": [],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nint get_return_value_00108f05(void)\n\n{\n  return_value 1;\n}\n\n",
            "current_name": "get_return_value_00108f05",
            "entrypoint": "0x00108f05",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f05": "get_return_value_00108f05",
                "return": "return_value",
                "undefined": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f08": {
            "additional_data": {
                "FUN_00108f08": {
                    "1": "add_file_to_debug_list",
                    "2": "update_debug_source",
                    "3": "add_source_file",
                    "8": "debug_start_source"
                },
                "bVar9": {
                    "1": "byte_var",
                    "3": "byte_value",
                    "7": "zero_byte"
                },
                "iVar1": {
                    "1": "filename_match_result",
                    "15": "comparison_result",
                    "3": "filename_comparison",
                    "8": "cmp_result"
                },
                "lVar5": {
                    "1": "iteration_count",
                    "23": "loop_counter",
                    "3": "counter"
                },
                "param_1": {
                    "1": "filename_list",
                    "2": "source_files",
                    "3": "source_handle",
                    "4": "debug_context"
                },
                "param_2": {
                    "1": "debug_file",
                    "29": "filename"
                },
                "pcVar7": {
                    "1": "file_name",
                    "19": "current_filename",
                    "2": "empty_string"
                },
                "puVar3": {
                    "1": "debug_set_filenames",
                    "2": "source_list",
                    "3": "current_node",
                    "4": "current_entry"
                },
                "puVar4": {
                    "1": "current_file",
                    "3": "temp",
                    "4": "previous_entry"
                },
                "puVar6": {
                    "1": "debug_set_filename",
                    "2": "head",
                    "3": "file_list",
                    "4": "source_list"
                },
                "puVar8": {
                    "1": "new_debug_entry",
                    "2": "last_node",
                    "3": "new_entry",
                    "4": "new_node"
                },
                "uVar2": {
                    "17": "result",
                    "2": "return_value",
                    "9": "success"
                }
            },
            "called": [
                "FUN_001041a0",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long debug_context,char *filename)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined8 *current_entry;\n  undefined8 *previous_entry;\n  long loop_counter;\n  undefined8 *source_list;\n  char *current_filename;\n  undefined8 *new_node;\n  byte flag;\n  \n  flag = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(debug_context + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_entry = *(undefined8 **)(*(long *)(debug_context + 8) + 8); current_entry != (undefined8 *)0x0;\n        current_entry = (undefined8 *)*current_entry) {\n      comparison_result = filename_cmp(current_entry[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_entry = (undefined8 *)xmalloc(0x18);\n    source_list = *(undefined8 **)(debug_context + 0x10);\n    new_node = current_entry;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)new_node = 0;\n      new_node = (undefined8 *)((long)new_node + (ulong)flag * -8 + 4);\n    }\n    current_entry[1] = current_filename;\n    new_node = (undefined8 *)*source_list;\n    while (previous_entry = new_node, previous_entry != (undefined8 *)0x0) {\n      source_list = previous_entry;\n      new_node = (undefined8 *)*previous_entry;\n    }\n    *source_list = current_entry;\nLAB_00108fad:\n    *(undefined8 **)(debug_context + 0x10) = current_entry;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "debug_start_source_00108f08",
            "entrypoint": "0x00108f08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "bVar9": "flag",
                "iVar1": "comparison_result",
                "lVar5": "loop_counter",
                "param_1": "debug_context",
                "param_2": "filename",
                "pcVar7": "current_filename",
                "puVar3": "current_entry",
                "puVar4": "previous_entry",
                "puVar6": "source_list",
                "puVar8": "new_node",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fb9": {
            "additional_data": {
                "FUN_00108fb9": {
                    "1": "print_stab_error",
                    "10": "print_bad_stab",
                    "3": "print_bad_stab_message",
                    "4": "print_bad_stab_error_message",
                    "5": "print_bad_stab_error",
                    "6": "print_error_message"
                },
                "__format": {
                    "1": "translated_format",
                    "15": "format_string",
                    "2": "error_format",
                    "3": "error_message",
                    "4": "error_message_format"
                },
                "param_1": {
                    "1": "error_msg",
                    "17": "error_message",
                    "2": "stab",
                    "8": "stab_message"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00109ab1",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_bad_stab_00108fb9(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_bad_stab_00108fb9",
            "entrypoint": "0x00108fb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "__format": "format_string",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fe8": {
            "additional_data": {
                "FUN_00108fe8": {
                    "28": "print_warning",
                    "3": "print_warning_message"
                },
                "__format": {
                    "1": "warning_message",
                    "19": "format_string",
                    "9": "warning_format"
                },
                "_stderr": {
                    "1": "output_stream",
                    "2": "error_stream"
                },
                "in_RAX": {
                    "1": "format_specifier",
                    "4": "result",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "warning_type",
                    "14": "message",
                    "3": "message1",
                    "5": "error_message",
                    "7": "file_name"
                },
                "param_2": {
                    "1": "error_type",
                    "10": "source",
                    "2": "filename",
                    "3": "message2",
                    "5": "file_name"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109a32"
            ],
            "code": "\n\n\nvoid print_warning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 return_value;\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(error_output,format_string,source,message,return_value);\n  return;\n}\n\n",
            "current_name": "print_warning_00108fe8",
            "entrypoint": "0x00108fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "__format": "format_string",
                "_stderr": "error_output",
                "in_RAX": "return_value",
                "param_1": "message",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109022": {
            "additional_data": {
                "FUN_00109022": {
                    "1": "parse_file_number",
                    "3": "extract_file_from_binary",
                    "4": "validate_and_allocate_memory",
                    "5": "process_file"
                },
                "auVar8": {
                    "1": "return_val",
                    "17": "return_value",
                    "3": "return_data",
                    "7": "result"
                },
                "bVar7": {
                    "1": "temp_var",
                    "2": "offset",
                    "3": "temp_byte",
                    "9": "byte_var"
                },
                "lVar4": {
                    "1": "loop_index",
                    "18": "loop_counter",
                    "2": "loop_var",
                    "6": "counter"
                },
                "param_1": {
                    "1": "file_handler",
                    "2": "file_data_ptr",
                    "3": "file_data",
                    "6": "file_number"
                },
                "param_2": {
                    "1": "file_data",
                    "2": "file_type",
                    "3": "file_numbers",
                    "5": "file_indices",
                    "6": "type_indices",
                    "7": "type_index"
                },
                "param_3": {
                    "1": "message1",
                    "2": "arg1",
                    "3": "error_message",
                    "5": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "var4",
                    "2": "arg2",
                    "3": "result",
                    "4": "param_4",
                    "5": "arg4",
                    "7": "param4"
                },
                "pcVar2": {
                    "1": "message",
                    "18": "error_message",
                    "2": "err_msg",
                    "4": "error_string",
                    "6": "error_msg"
                },
                "plVar3": {
                    "1": "type_info_pointer",
                    "2": "type_pointer",
                    "3": "file_data",
                    "8": "allocated_memory"
                },
                "pplVar6": {
                    "1": "file_data_ptr",
                    "2": "type_data_ptr",
                    "3": "type_list"
                },
                "uVar1": {
                    "1": "type_index_high",
                    "2": "current_index",
                    "3": "file_number",
                    "4": "file_index",
                    "5": "index",
                    "6": "type_index"
                },
                "uVar5": {
                    "1": "temp",
                    "2": "index_number",
                    "5": "file_number",
                    "7": "type_index"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nundefined  [16] process_file_00109022(long file_index,uint *type_index,undefined8 param3,undefined8 param4)\n\n{\n  uint type_index;\n  char *error_message;\n  long *allocated_memory;\n  long loop_counter;\n  uint type_index;\n  long **type_list;\n  byte byte_var;\n  undefined return_value [16];\n  \n  byte_var = 0;\n  type_index = *type_index;\n  type_index = type_index[1];\n  if (((int)type_index < 0) || (*(uint *)(file_index + 0x80) <= type_index)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  else {\n    if (-1 < (int)type_index) {\n      type_list = (long **)(*(long *)(file_index + 0x88) + (long)(int)type_index * 8);\n      for (type_index = type_index; 0xf < (int)type_index; type_index = type_index - 0x10) {\n        if (*type_list == (long *)0x0) {\n          allocated_memory = (long *)xmalloc(0x88);\n          *type_list = allocated_memory;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)allocated_memory = 0;\n            allocated_memory = (long *)((long)allocated_memory + (ulong)byte_var * -8 + 4);\n          }\n        }\n        type_list = (long **)*type_list;\n      }\n      if (*type_list == (long *)0x0) {\n        allocated_memory = (long *)xmalloc(0x88);\n        *type_list = allocated_memory;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)allocated_memory = 0;\n          allocated_memory = (long *)((long)allocated_memory + (ulong)byte_var * -8 + 4);\n        }\n      }\n      allocated_memory = *type_list + (long)(int)((type_index >> 4) * -0x10 + type_index) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  allocated_memory = (long *)0x0;\nLAB_00109117:\n  return_value._8_8_ = param4;\n  return_value._0_8_ = allocated_memory;\n  return return_value;\n}\n\n",
            "current_name": "process_file_00109022",
            "entrypoint": "0x00109022",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109022": "process_file_00109022",
                "auVar8": "return_value",
                "bVar7": "byte_var",
                "lVar4": "loop_counter",
                "param_1": "file_index",
                "param_2": "type_index",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar2": "error_message",
                "plVar3": "allocated_memory",
                "pplVar6": "type_list",
                "uVar1": "type_index",
                "uVar5": "type_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010911f": {
            "additional_data": {
                "FUN_0010911f": {
                    "1": "print_bad_mangled_name",
                    "30": "print_error_message"
                },
                "__format": {
                    "1": "localized_error_message",
                    "16": "format_string",
                    "3": "error_message_format",
                    "6": "error_format"
                },
                "_stderr": {
                    "2": "error_stream"
                },
                "param_1": {
                    "20": "error_message",
                    "4": "mangled_name",
                    "7": "message"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "code": "\n\n\nvoid print_error_message_0010911f(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(error_stream,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010911f",
            "entrypoint": "0x0010911f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "__format": "format_string",
                "_stderr": "error_stream",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010914e": {
            "additional_data": {
                "FUN_0010914e": {
                    "1": "find_type_in_binary",
                    "28": "find_named_type"
                },
                "auVar7": {
                    "1": "result_array",
                    "12": "return_value",
                    "16": "result"
                },
                "iVar2": {
                    "1": "strcmp_result",
                    "27": "comparison_result"
                },
                "lVar1": {
                    "1": "ptr_to_comp_unit",
                    "14": "current_compilation_unit",
                    "2": "current_comp_unit",
                    "3": "current_unit_ptr",
                    "9": "current_unit"
                },
                "lVar5": {
                    "1": "ptr2",
                    "2": "current_node",
                    "4": "current_list"
                },
                "param_1": {
                    "1": "input_param1",
                    "2": "binary",
                    "23": "compilation_unit"
                },
                "param_2": {
                    "1": "input_param2",
                    "29": "type_name"
                },
                "param_3": {
                    "1": "compilation_unit_msg",
                    "2": "unused_param1",
                    "5": "param3",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "unused_param_4",
                    "2": "unused_param2",
                    "3": "result",
                    "5": "param4"
                },
                "puVar4": {
                    "1": "iter1",
                    "2": "list_ptr",
                    "3": "current_node",
                    "5": "current_element",
                    "6": "current_entry"
                },
                "puVar6": {
                    "1": "current_cu_iterator",
                    "2": "current_item2"
                },
                "uVar3": {
                    "1": "translation",
                    "20": "error_message",
                    "6": "error_msg"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104470",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559"
            ],
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 param_3,undefined8 param4)\n\n{\n  long current_compilation_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_entry;\n  long current_list;\n  undefined8 *compilation_unit_node;\n  undefined result [16];\n  \n  current_compilation_unit = *(long *)(compilation_unit + 8);\n  if (current_compilation_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (current_list = *(long *)(compilation_unit + 0x20); current_list != 0; current_list = *(long *)(current_list + 8)) {\n      if (*(undefined8 **)(current_list + 0x28) != (undefined8 *)0x0) {\n        for (current_entry = (undefined8 *)**(undefined8 **)(current_list + 0x28); current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (compilation_unit_node = *(undefined8 **)(current_compilation_unit + 8); compilation_unit_node != (undefined8 *)0x0;\n        compilation_unit_node = (undefined8 *)*compilation_unit_node) {\n      if ((undefined8 *)compilation_unit_node[2] != (undefined8 *)0x0) {\n        for (current_entry = *(undefined8 **)(undefined8 *)compilation_unit_node[2]; current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = param4;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_entry[4];\n  goto LAB_00109223;\n}\n\n",
            "current_name": "find_named_type_0010914e",
            "entrypoint": "0x0010914e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "auVar7": "result",
                "iVar2": "comparison_result",
                "lVar1": "current_compilation_unit",
                "lVar5": "current_list",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_4": "param4",
                "puVar4": "current_entry",
                "puVar6": "compilation_unit_node",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010922b": {
            "additional_data": {
                "FUN_0010922b": {
                    "1": "is_equal",
                    "18": "compare_values",
                    "2": "compare_variables",
                    "4": "compare_parameters"
                },
                "FUN_0010922b_Long": {
                    "1": "compare_values_long"
                },
                "FUN_0010922b_Long_Ptr": {
                    "1": "compare_values_long_ptr"
                },
                "FUN_0010922b_PARAM_1": {
                    "1": "input_1"
                },
                "FUN_0010922b_PARAM_2": {
                    "1": "input_2"
                },
                "FUN_0010922b_PARAM_3": {
                    "1": "input_3"
                },
                "FUN_0010922b_original": {
                    "1": "compare_values"
                },
                "FUN_0010922b_param_1": {
                    "1": "param"
                },
                "FUN_0010922b_param_2": {
                    "1": "record1"
                },
                "FUN_0010922b_param_3": {
                    "1": "value2"
                },
                "FUN_00112b6e": {
                    "1": "find_integer",
                    "2": "find_value",
                    "3": "find_index"
                },
                "FUN_00112b6e_Int": {
                    "1": "find_special_value_int"
                },
                "FUN_00112b6e_Int_Ptr": {
                    "1": "find_special_value_int_ptr"
                },
                "bVar12": {
                    "1": "comparison_bool",
                    "4": "is_match",
                    "6": "is_equal",
                    "9": "result"
                },
                "byte": {
                    "1": "bool"
                },
                "cVar11": {
                    "1": "char_comparison",
                    "2": "compare_result",
                    "7": "comparison_result",
                    "9": "result"
                },
                "char": {
                    "1": "ch"
                },
                "checkEquality": {
                    "1": "check_equality"
                },
                "checkEquality_int": {
                    "1": "check_equality_int"
                },
                "checkEquality_long": {
                    "1": "check_equality_long"
                },
                "compareStrings": {
                    "1": "compare_strings"
                },
                "extractSpecialStrings_int": {
                    "1": "extract_special_strings_int"
                },
                "extractSpecialValues_int": {
                    "1": "extract_special_values_int"
                },
                "extractSpecialValues_long": {
                    "1": "extract_special_values_long"
                },
                "extractStrings": {
                    "1": "extract_strings"
                },
                "extractValues": {
                    "1": "extract_values"
                },
                "iVar13": {
                    "1": "integer_variable",
                    "11": "comparison_result",
                    "2": "int_result",
                    "3": "compare_result"
                },
                "int": {
                    "1": "integer"
                },
                "lVar19": {
                    "1": "l_value",
                    "4": "index",
                    "9": "offset"
                },
                "lVar22": {
                    "1": "l_value2",
                    "2": "ptr_offset",
                    "3": "offset"
                },
                "lVar6": {
                    "1": "size1",
                    "2": "length1"
                },
                "lVar7": {
                    "1": "ptr2",
                    "2": "var2"
                },
                "lVar8": {
                    "1": "offset_str_2",
                    "2": "length3"
                },
                "local_48": {
                    "1": "target_param_stack_pointer",
                    "2": "local_pointer3"
                },
                "local_58": {
                    "1": "ptr_list_head",
                    "2": "head",
                    "3": "local_ptr"
                },
                "local_70": {
                    "1": "ptr_to_ptr_to_value1",
                    "2": "local_array1",
                    "3": "local_ptr1"
                },
                "long": {
                    "1": "ptr"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "param1",
                    "4": "param_1"
                },
                "param_2": {
                    "1": "record1",
                    "2": "data1",
                    "5": "value1",
                    "6": "array1"
                },
                "param_3": {
                    "1": "param_b",
                    "2": "pointer_2",
                    "5": "value2",
                    "6": "array2"
                },
                "pcVar10": {
                    "1": "char_pointer4",
                    "2": "char2",
                    "4": "str2",
                    "6": "char_ptr2"
                },
                "pcVar9": {
                    "1": "char_pointer_1",
                    "2": "char1",
                    "4": "str1",
                    "6": "char_ptr1"
                },
                "plStack_50": {
                    "1": "data1",
                    "2": "pl_stack",
                    "3": "stack_ptr"
                },
                "plVar18": {
                    "1": "data1",
                    "2": "ptr4"
                },
                "plVar19": {
                    "1": "ptr2"
                },
                "plVar20": {
                    "1": "param_3_1"
                },
                "plVar21": {
                    "1": "pl_value2"
                },
                "plVar22": {
                    "1": "ptr5"
                },
                "ppcVar4": {
                    "1": "string_1_ptr",
                    "2": "char_pointer1"
                },
                "ppcVar5": {
                    "1": "ptr_str2",
                    "2": "char_pointer2"
                },
                "pplVar3": {
                    "1": "param_a_children",
                    "2": "ptr_ptr1"
                },
                "puVar16": {
                    "1": "pointer_variable1",
                    "3": "ptr1",
                    "4": "pointer1"
                },
                "puVar17": {
                    "1": "ptr3",
                    "3": "ptr2",
                    "4": "pointer2"
                },
                "uVar1": {
                    "1": "value_1_type",
                    "4": "value1",
                    "7": "type1"
                },
                "uVar14": {
                    "1": "result1",
                    "2": "debug_type1",
                    "8": "real_type1"
                },
                "uVar15": {
                    "1": "param_b_type_real",
                    "2": "debug_type2",
                    "8": "real_type2"
                },
                "uVar2": {
                    "1": "val2",
                    "4": "value2",
                    "7": "type2"
                },
                "undefined8": {
                    "1": "data"
                }
            },
            "called": [
                "FUN_0010922b",
                "FUN_001040a0",
                "FUN_00104470",
                "FUN_00112b6e"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_0010c7a0"
            ],
            "code": "\nbool compare_values_0010922b(ptr param_1,ptr *array1,ptr *array2)\n\n{\n  uinteger type1;\n  uinteger type2;\n  ptr **ptr_ptr1;\n  ch **char_pointer1;\n  ch **char_pointer2;\n  ptr var1;\n  ptr var2;\n  ptr length3;\n  ch *char_ptr1;\n  ch *char_ptr2;\n  ch result;\n  bool result;\n  integer comparison_result;\n  data real_type1;\n  data real_type2;\n  data *pointer1;\n  data *pointer2;\n  ptr *ptr1;\n  ptr offset;\n  ptr *pointer2;\n  ptr *pointer1_type;\n  ptr offset;\n  ptr *local_ptr1;\n  data *local_ptr;\n  ptr *stack_ptr;\n  ptr *local_pointer3;\n  \n  ptr1 = array2;\n  if (array1 == (ptr *)0x0) {\nLAB_00109241:\n    return array2 == (ptr *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr1 == (ptr *)0x0) {\n    return false;\n  }\n  while( true ) {\n    type1 = *(uinteger *)array1;\n    if (type1 == 1) goto code_r0x00109263;\n    while (type2 = *(uinteger *)array2, type2 == 1) {\n      array2 = **(ptr ***)array2[2];\n      if (array2 == (ptr *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (type1 != 0x16) break;\n    if (type2 != 0x17) goto LAB_001092cb;\n    array1 = *(ptr **)(array1[2] + 8);\n    if (array1 == (ptr *)0x0) goto LAB_00109241;\n  }\n  if ((type1 == 0x17) && (type2 == 0x16)) {\n    array2 = *(ptr **)(array2[2] + 8);\n    ptr1 = array2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (type1 == 3) {\n    return *(ch *)(array1 + 2) == *(ch *)(array2 + 2);\n  }\n  if (type1 < 4) {\n    if (type1 == 2) {\n      return true;\n    }\n  }\n  else if (type1 - 4 < 3) {\n    return true;\n  }\n  local_ptr = *(data **)(param_1 + 0x58);\n  for (pointer2 = local_ptr; pointer2 != (data *)0x0; pointer2 = (data *)*pointer2) {\n    if (((ptr *)pointer2[1] == array1) && ((ptr *)pointer2[2] == array2)) {\n      return true;\n    }\n  }\n  *(data ***)(param_1 + 0x58) = &local_ptr;\n  stack_ptr = array1;\n  local_pointer3 = array2;\n  switch(type1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr1 = (ptr *)array1[2];\n    ptr_ptr1 = (ptr **)array2[2];\n    if (ptr1 == (ptr *)0x0) {\n      result = ptr_ptr1 == (ptr **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_ptr1 == (ptr **)0x0) goto LAB_00109382;\n    if ((*(uinteger *)(param_1 + 0x38) < *(uinteger *)((ptr)ptr1 + 0xc)) &&\n       (*(uinteger *)((ptr)ptr1 + 0xc) == *(uinteger *)((ptr)ptr_ptr1 + 0xc))) goto LAB_001097af;\n    pointer2 = (data *)*ptr1;\n    local_ptr1 = *ptr_ptr1;\n    if (((pointer2 == (data *)0x0) == (local_ptr1 == (ptr *)0x0)) &&\n       ((((ptr1[2] == 0) == (ptr_ptr1[2] == (ptr *)0x0) &&\n         ((ptr1[3] == 0) == (ptr_ptr1[3] == (ptr *)0x0))) &&\n        ((ptr1[4] == 0) == (ptr_ptr1[4] == (ptr *)0x0))))) {\n      if (pointer2 == (data *)0x0) {\nLAB_001093fd:\n        if ((ptr1[4] != 0) &&\n           (result = compare_values_0010922b(param_1,ptr1[4],ptr_ptr1[4]), result == '\\0'))\n        goto LAB_00109382;\n        pointer1_type = (ptr *)ptr1[2];\n        if (pointer1_type == (ptr *)0x0) {\nLAB_00109540:\n          pointer2 = (data *)ptr1[3];\n          if (pointer2 == (data *)0x0) goto LAB_001097af;\n          ptr1 = ptr_ptr1[3];\n          while( true ) {\n            char_pointer2 = (ch **)*pointer2;\n            if (char_pointer2 == (ch **)0x0) {\n              result = *ptr1 == 0;\n              goto LAB_001099c4;\n            }\n            char_pointer1 = (ch **)*ptr1;\n            if (char_pointer1 == (ch **)0x0) break;\n            if ((**char_pointer2 != **char_pointer1) || (comparison_result = strcmp(*char_pointer2,*char_pointer1), comparison_result != 0))\n            break;\n            char_ptr1 = char_pointer2[1];\n            char_ptr2 = char_pointer1[1];\n            if ((char_ptr1 == (ch *)0x0) != (char_ptr2 == (ch *)0x0)) break;\n            if (char_ptr1 != (ch *)0x0) {\n              offset = 0;\n              while( true ) {\n                char_pointer2 = *(ch ***)(char_ptr1 + offset);\n                char_pointer1 = *(ch ***)(char_ptr2 + offset);\n                if (char_pointer2 == (ch **)0x0) break;\n                if (char_pointer1 == (ch **)0x0) goto LAB_00109382;\n                if ((((**char_pointer2 != **char_pointer1) ||\n                     ((((uptr)char_pointer2[2] ^ (uptr)char_pointer1[2]) & 0xffffffffffff) != 0)) ||\n                    ((char_pointer2[3] != char_pointer1[3] ||\n                     ((((char_pointer2[4] == (ch *)0x0) != (char_pointer1[4] == (ch *)0x0) ||\n                       (comparison_result = strcmp(*char_pointer2,*char_pointer1), comparison_result != 0)) ||\n                      (result = compare_values_0010922b(param_1,char_pointer2[1],char_pointer1[1]), result == '\\0')))))) ||\n                   ((char_pointer2[4] != (ch *)0x0 &&\n                    (result = compare_values_0010922b(param_1,char_pointer2[4],char_pointer1[4]), result == '\\0'))))\n                goto LAB_00109382;\n                offset = offset + 8;\n              }\n              if (char_pointer1 == (ch **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            pointer2 = pointer2 + 1;\n            ptr1 = ptr1 + 1;\n          }\n        }\n        else {\n          pointer2 = ptr_ptr1[2];\n          for (; pointer2 = (data *)*pointer1_type, pointer2 != (data *)0x0;\n              pointer1_type = pointer1_type + 1) {\n            pointer1 = (data *)*pointer2;\n            if ((((pointer1 == (data *)0x0) ||\n                 (((pointer2[1] ^ pointer1[1]) & 0xffffffffff) != 0)) ||\n                (*(integer *)(pointer2 + 2) != *(integer *)(pointer1 + 2))) ||\n               (result = compare_values_0010922b(param_1,*pointer2,*pointer1), result == '\\0'))\n            goto LAB_00109382;\n            pointer2 = pointer2 + 1;\n          }\n          if (*pointer2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; char_pointer2 = (ch **)*pointer2, char_pointer2 != (ch **)0x0; pointer2 = pointer2 + 1) {\n          char_pointer1 = (ch **)*local_ptr1;\n          if (char_pointer1 == (ch **)0x0) goto LAB_00109382;\n          char_ptr1 = *char_pointer1;\n          char_ptr2 = *char_pointer2;\n          if ((*char_ptr2 != *char_ptr1) ||\n             ((((uptr)char_pointer2[2] ^ (uptr)char_pointer1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(ch *)((ptr)char_pointer2 + 0x14) == '\\0') {\n            if (char_pointer2[3] == char_pointer1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparison_result = strcmp(char_pointer2[3],char_pointer1[3]);\n          if (comparison_result != 0) goto LAB_00109382;\nLAB_00109480:\n          comparison_result = strcmp(char_ptr2,char_ptr1);\n          if (((comparison_result != 0) || (char_pointer2[1] == (ch *)0x0)) || (char_pointer1[1] == (ch *)0x0))\n          goto LAB_00109382;\n          real_type1 = debug_get_real_type_isra_0(char_pointer1[1],0);\n          real_type2 = debug_get_real_type_isra_0(char_pointer2[1],0);\n          result = compare_values_0010922b(param_1,real_type2,real_type1);\n          if (result == '\\0') goto LAB_00109382;\n          local_ptr1 = local_ptr1 + 1;\n        }\n        if (*local_ptr1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr1 = (ptr *)array1[2];\n    pointer1_type = (ptr *)array2[2];\n    if (ptr1 == (ptr *)0x0) {\n      result = pointer1_type == (ptr *)0x0;\n      goto LAB_001099c4;\n    }\n    if (pointer1_type == (ptr *)0x0) goto LAB_00109382;\n    offset = *ptr1;\n    var1 = *pointer1_type;\n    offset = 0;\n    var2 = ptr1[1];\n    length3 = pointer1_type[1];\n    do {\n      char_ptr1 = *(ch **)(offset + offset);\n      if (char_ptr1 == (ch *)0x0) {\n        result = *(ptr *)(var1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      char_ptr2 = *(ch **)(var1 + offset);\n      if (((char_ptr2 == (ch *)0x0) || (*char_ptr1 != *char_ptr2)) ||\n         (*(ptr *)(var2 + offset) != *(ptr *)(length3 + offset))) break;\n      comparison_result = strcmp(char_ptr1,char_ptr2);\n      offset = offset + 8;\n    } while (comparison_result == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = compare_values_0010922b(param_1,array1[2],array2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(ch *)((data *)array1[2] + 2) == *(ch *)((data *)array2[2] + 2)) &&\n       (result = compare_values_0010922b(param_1,*(data *)array1[2],*(data *)array2[2]),\n       result != '\\0')) {\n      ptr1 = *(ptr **)(array1[2] + 8);\n      pointer1_type = *(ptr **)(array2[2] + 8);\n      if ((ptr1 == (ptr *)0x0) == (pointer1_type == (ptr *)0x0)) {\n        if (ptr1 == (ptr *)0x0) goto LAB_001097af;\n        while (((*ptr1 != 0 && (*pointer1_type != 0)) &&\n               (result = compare_values_0010922b(param_1), result != '\\0'))) {\n          ptr1 = ptr1 + 1;\n          pointer1_type = pointer1_type + 1;\n        }\nLAB_0010995d:\n        if (*ptr1 != 0) goto LAB_00109964;\n        result = *pointer1_type == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    pointer2 = (data *)array2[2];\n    pointer1 = (data *)array1[2];\n    result = 0;\n    if ((pointer1[1] == pointer2[1]) && (pointer1[2] == pointer2[2])) {\nLAB_00109862:\n      result = compare_values_0010922b(param_1,*pointer1,*pointer2);\n    }\n    break;\n  case 0x10:\n    pointer2 = (data *)array2[2];\n    pointer1 = (data *)array1[2];\n    result = 0;\n    if (((pointer1[2] == pointer2[2]) && (pointer1[3] == pointer2[3])) &&\n       (*(ch *)(pointer1 + 4) == *(ch *)(pointer2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    pointer2 = (data *)array2[2];\n    pointer1 = (data *)array1[2];\n    result = 0;\n    if (*(ch *)(pointer1 + 1) == *(ch *)(pointer2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = compare_values_0010922b(param_1,*(data *)array1[2],*(data *)array2[2]);\n    result = 0;\n    if (result != '\\0') {\n      result = compare_values_0010922b(param_1,*(data *)(array1[2] + 8),*(data *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(ch *)((data *)array1[2] + 3) == *(ch *)((data *)array2[2] + 3)) &&\n        (result = compare_values_0010922b(param_1,*(data *)array1[2],*(data *)array2[2]),\n        result != '\\0')) &&\n       (result = compare_values_0010922b(param_1,*(data *)(array1[2] + 8),\n                              *(data *)(array2[2] + 8)), result != '\\0')) {\n      ptr1 = *(ptr **)(array1[2] + 0x10);\n      pointer1_type = *(ptr **)(array2[2] + 0x10);\n      if ((ptr1 == (ptr *)0x0) == (pointer1_type == (ptr *)0x0)) {\n        if (ptr1 != (ptr *)0x0) {\n          while (((*ptr1 != 0 && (*pointer1_type != 0)) &&\n                 (result = compare_values_0010922b(param_1), result != '\\0'))) {\n            ptr1 = ptr1 + 1;\n            pointer1_type = pointer1_type + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr1 = (ptr *)array2[2];\n    pointer1_type = (ptr *)array1[2];\n    comparison_result = strcmp(*(ch **)(*pointer1_type + 8),*(ch **)(*ptr1 + 8));\n    result = 0;\n    if (comparison_result == 0) {\n      result = compare_values_0010922b(param_1,pointer1_type[1],ptr1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(data **)(param_1 + 0x58) = local_ptr;\n  return result;\ncode_r0x00109263:\n  array1 = **(ptr ***)array1[2];\n  ptr1 = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "current_name": "compare_values_0010922b",
            "entrypoint": "0x0010922b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010922b": "compare_values_0010922b",
                "bVar12": "result",
                "byte": "bool",
                "cVar11": "result",
                "char": "ch",
                "iVar13": "comparison_result",
                "int": "integer",
                "lVar19": "offset",
                "lVar22": "offset",
                "lVar6": "var1",
                "lVar7": "var2",
                "lVar8": "length3",
                "local_48": "local_pointer3",
                "local_58": "local_ptr",
                "local_70": "local_ptr1",
                "long": "ptr",
                "param_2": "array1",
                "param_3": "array2",
                "pcVar10": "char_ptr2",
                "pcVar9": "char_ptr1",
                "plStack_50": "stack_ptr",
                "plVar18": "ptr1",
                "plVar20": "pointer2",
                "plVar21": "pointer1_type",
                "ppcVar4": "char_pointer1",
                "ppcVar5": "char_pointer2",
                "pplVar3": "ptr_ptr1",
                "puVar16": "pointer1",
                "puVar17": "pointer2",
                "uVar1": "type1",
                "uVar14": "real_type1",
                "uVar15": "real_type2",
                "uVar2": "type2",
                "undefined8": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a0b": {
            "additional_data": {
                "FUN_00109a0b": {
                    "1": "copy_and_reset_string",
                    "19": "copy_and_null_terminate",
                    "2": "copy_string",
                    "7": "copy_and_null_terminate_string"
                },
                "bVar4": {
                    "1": "is_backwards",
                    "2": "is_negative",
                    "7": "offset",
                    "8": "increment"
                },
                "lVar2": {
                    "14": "i",
                    "4": "count",
                    "5": "index",
                    "6": "remaining_length"
                },
                "param_1": {
                    "1": "src",
                    "21": "source",
                    "9": "source_string"
                },
                "param_2": {
                    "1": "source_string_length",
                    "2": "size",
                    "20": "length",
                    "3": "string_length",
                    "4": "source_length"
                },
                "puVar1": {
                    "1": "dst",
                    "19": "destination",
                    "2": "new_string",
                    "6": "copied_string"
                },
                "puVar3": {
                    "1": "new_string_ptr",
                    "12": "dest_ptr",
                    "2": "dest_pointer"
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_0010d21c",
                "FUN_0010afd5"
            ],
            "code": "\nvoid copy_and_null_terminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long i;\n  undefined *dest_ptr;\n  byte increment;\n  \n  increment = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  dest_ptr = destination;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *dest_ptr = *source;\n    source = source + (ulong)increment * -2 + 1;\n    dest_ptr = dest_ptr + (ulong)increment * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "current_name": "copy_and_null_terminate_00109a0b",
            "entrypoint": "0x00109a0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "bVar4": "increment",
                "lVar2": "i",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "puVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a32": {
            "additional_data": {
                "FUN_00109a32": {
                    "1": "parse_str_to_ulong",
                    "2": "parse_unsigned_integer",
                    "3": "parse_unsigned_number",
                    "6": "convert_string_to_unsigned_long"
                },
                "__nptr": {
                    "1": "str",
                    "2": "current_position",
                    "3": "string",
                    "4": "numeric_string",
                    "8": "current_char"
                },
                "auVar4": {
                    "1": "return_val",
                    "10": "result",
                    "16": "return_value"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "input_string_ptr",
                    "3": "input",
                    "4": "string_pointer",
                    "6": "string_ptr",
                    "7": "input_string"
                },
                "param_2": {
                    "1": "numeric_overflow",
                    "2": "error_flag_ptr",
                    "3": "out_of_range_flag",
                    "7": "is_overflow"
                },
                "param_3": {
                    "1": "end_of_input_ptr",
                    "16": "end_of_string",
                    "2": "end_of_input",
                    "3": "end_str",
                    "4": "end_ptr"
                },
                "param_4": {
                    "1": "unused_param",
                    "11": "param_4",
                    "2": "unknown_param_1",
                    "3": "param4"
                },
                "param_5": {
                    "1": "unused_param5",
                    "2": "unused_param_2",
                    "3": "param5",
                    "4": "result",
                    "7": "param_5"
                },
                "piVar1": {
                    "1": "error_location_ptr",
                    "15": "errno_ptr",
                    "2": "error_code",
                    "4": "errno_location"
                },
                "uVar2": {
                    "1": "unsigned_long_value",
                    "10": "parsed_value",
                    "2": "parsed_integer",
                    "5": "result",
                    "6": "parsed_number"
                },
                "uVar3": {
                    "1": "localized_error_msg",
                    "2": "warning_message",
                    "20": "error_message",
                    "3": "error_string",
                    "4": "error_msg"
                }
            },
            "called": [
                "FUN_00108fe8",
                "FUN_00104240",
                "FUN_00104790",
                "FUN_001040b0"
            ],
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nconvert_string_to_unsigned_long_00109a32(char **input_string,undefined *is_overflow,char *end_of_string,undefined8 param_4,undefined8 param_5)\n\n{\n  char *current_char;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  if (is_overflow != (undefined *)0x0) {\n    *is_overflow = 0;\n  }\n  current_char = *input_string;\n  if ((current_char < end_of_string) && (*current_char != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_char,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (is_overflow == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(current_char,error_message);\n    }\n    else {\n      *is_overflow = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = parsed_value;\n  return return_value;\n}\n\n",
            "current_name": "convert_string_to_unsigned_long_00109a32",
            "entrypoint": "0x00109a32",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a32": "convert_string_to_unsigned_long_00109a32",
                "__nptr": "current_char",
                "auVar4": "return_value",
                "param_1": "input_string",
                "param_2": "is_overflow",
                "param_3": "end_of_string",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ab1": {
            "additional_data": {
                "FUN_00108fb9": {
                    "1": "parse_number"
                },
                "FUN_00109a32": {
                    "1": "bad_stab"
                },
                "FUN_00109ab1": {
                    "1": "parse_stab_entry",
                    "2": "parse_function_arguments",
                    "3": "parse_parameters",
                    "4": "parse_arguments",
                    "6": "parse_and_extract_numbers"
                },
                "LAB_00109b25": {
                    "1": "end_label"
                },
                "auVar4": {
                    "1": "parsed_result",
                    "20": "return_value",
                    "4": "output",
                    "5": "result"
                },
                "bad_stab": {
                    "1": "handle_invalid_stab",
                    "2": "handle_error"
                },
                "param_1": {
                    "1": "argument_string",
                    "16": "input_string",
                    "2": "input",
                    "3": "input_ptr"
                },
                "param_2": {
                    "1": "output_integers",
                    "13": "output_values",
                    "2": "output_array",
                    "3": "parsed_values",
                    "4": "output_numbers"
                },
                "param_3": {
                    "1": "param3_value",
                    "18": "param_3",
                    "2": "input_value_1"
                },
                "param_4": {
                    "1": "input2",
                    "18": "param_4",
                    "2": "input_value_2"
                },
                "param_5": {
                    "1": "param_5_arg",
                    "18": "param_5",
                    "2": "input_value_3"
                },
                "parse_number": {
                    "1": "parse_decimal_number",
                    "2": "parse_integer"
                },
                "pcVar2": {
                    "1": "curr_char",
                    "27": "current_char"
                },
                "uVar1": {
                    "1": "parsed_param",
                    "12": "parsed_value",
                    "14": "parsed_number",
                    "2": "parsed_value_1"
                },
                "uVar3": {
                    "1": "result_value",
                    "24": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_and_extract_numbers_00109ab1(char **input_string,undefined4 *output_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_number;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    parsed_number = parse_integer(input_string,0);\n    *output_values = parsed_number;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      parsed_number = parse_integer(input_string,0,param_3);\n      output_values[1] = parsed_number;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto end_label;\n      }\n    }\n    handle_error(current_char);\n    result = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)parse_integer(input_string,0);\n    output_values[1] = (int)current_char;\nend_label:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "parse_and_extract_numbers_00109ab1",
            "entrypoint": "0x00109ab1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ab1": "parse_and_extract_numbers_00109ab1",
                "LAB_00109b25": "end_label",
                "auVar4": "return_value",
                "bad_stab": "handle_error",
                "param_1": "input_string",
                "param_2": "output_values",
                "parse_number": "parse_integer",
                "pcVar2": "current_char",
                "uVar1": "parsed_number",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b2f": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "extract_and_free_next_item",
                    "2": "extract_next_ptr",
                    "3": "extract_and_free",
                    "6": "extract_and_free_ptr"
                },
                "__ptr": {
                    "1": "target_ptr",
                    "2": "current_node",
                    "3": "ptr_value",
                    "5": "ptr",
                    "8": "current_ptr"
                },
                "__ptr[1]": {
                    "1": "next_ptr_value"
                },
                "param_1": {
                    "1": "memory_location",
                    "2": "ptr",
                    "5": "input_ptr",
                    "7": "param"
                },
                "puVar1": {
                    "1": "extracted_ptr",
                    "10": "return_value",
                    "2": "extracted_data",
                    "8": "next_ptr"
                }
            },
            "called": [
                "FUN_001048f0"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_0010abdd",
                "FUN_0010a94e",
                "FUN_0010a83e",
                "FUN_0010aa53",
                "FUN_0010a2b9",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010a181",
                "FUN_0010e7c2",
                "FUN_0010e918",
                "FUN_0010e5db",
                "FUN_0010e9a0",
                "FUN_0010a0e9",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a424",
                "FUN_0010eafe",
                "FUN_0010a377",
                "FUN_0010ebb0"
            ],
            "code": "\nundefined8 * extract_and_free_ptr_00109b2f(long param)\n\n{\n  undefined8 *current_ptr;\n  undefined8 *return_value;\n  \n  current_ptr = *(undefined8 **)(param + 0x60);\n  if (current_ptr != (undefined8 *)0x0) {\n    return_value = (undefined8 *)next_ptr_value;\n    *(undefined8 *)(param + 0x60) = *current_ptr;\n    free(current_ptr);\n    return return_value;\n  }\n  return current_ptr;\n}\n\n",
            "current_name": "extract_and_free_ptr_00109b2f",
            "entrypoint": "0x00109b2f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b2f": "extract_and_free_ptr_00109b2f",
                "__ptr": "current_ptr",
                "__ptr[1]": "next_ptr_value",
                "param_1": "param",
                "puVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b52": {
            "additional_data": {
                "*(undefined (*) [16])(puVar2 + 4)": {
                    "1": "initialize_array1"
                },
                "*(undefined (*) [16])(puVar2 + 6)": {
                    "1": "initialize_array2"
                },
                "FUN_00109b52": {
                    "1": "initialize_structure",
                    "2": "allocate_and_initialize_data",
                    "3": "create_new_entry",
                    "4": "initialize_data",
                    "7": "initialize_data_structure"
                },
                "ZEXT816": {
                    "1": "convert_to16_bytes"
                },
                "param_1": {
                    "1": "entry_list_ptr",
                    "2": "entry_list",
                    "3": "data_struct",
                    "4": "data_structure_ptr"
                },
                "param_2": {
                    "1": "entry_name",
                    "12": "source_string",
                    "2": "original_string",
                    "3": "input_string",
                    "5": "string_param"
                },
                "param_3": {
                    "1": "data",
                    "2": "param_3",
                    "3": "param3_value",
                    "9": "param3"
                },
                "param_4": {
                    "1": "entry_flag",
                    "10": "param4",
                    "2": "param_4",
                    "3": "param4_value",
                    "7": "flag"
                },
                "param_5": {
                    "1": "param_int",
                    "10": "param5",
                    "2": "code",
                    "3": "param5_value",
                    "4": "value"
                },
                "ptr1": {
                    "1": "pointer1"
                },
                "ptr2": {
                    "1": "pointer2"
                },
                "puVar2": {
                    "1": "new_data_struct",
                    "2": "new_entry",
                    "3": "new_data_structure_ptr",
                    "7": "allocated_memory"
                },
                "uVar1": {
                    "1": "prev_data_structure_ptr",
                    "2": "temp_var",
                    "8": "temp_var1"
                },
                "uVar3": {
                    "1": "str_dup",
                    "16": "duplicated_string",
                    "2": "copied_string",
                    "3": "temp_var2"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                }
            },
            "called": [
                "FUN_00104390",
                "FUN_001043d0"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_00109dfe",
                "FUN_0010a2b9",
                "FUN_00109cf4",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010a0e9",
                "FUN_00109d97",
                "FUN_00109e76",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a424",
                "FUN_0010a377"
            ],
            "code": "\nundefined initialize_data_structure_00109b52(long data_structure_ptr,undefined8 source_string,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 temp_var1;\n  undefined8 *allocated_memory;\n  undefined8 duplicated_string;\n  \n  allocated_memory = (undefined8 *)allocate_memory(0x40);\n  duplicated_string = duplicate_string(source_string);\n  allocated_memory[2] = param3;\n  *(undefined (*) [16])(allocated_memory + 4) = convert_to16_bytes(0);\n  *(undefined (*) [16])(allocated_memory + 6) = convert_to16_bytes(0);\n  temp_var1 = *(undefined8 *)(data_structure_ptr + 0x60);\n  *(undefined *)((long)allocated_memory + 0x1c) = param4;\n  *(undefined4 *)(allocated_memory + 3) = param5;\n  *(undefined8 **)(data_structure_ptr + 0x60) = allocated_memory;\n  *allocated_memory = temp_var1;\n  allocated_memory[1] = duplicated_string;\n  return 1;\n}\n\n",
            "current_name": "initialize_data_structure_00109b52",
            "entrypoint": "0x00109b52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "ZEXT816": "convert_to16_bytes",
                "param_1": "data_structure_ptr",
                "param_2": "source_string",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar2": "allocated_memory",
                "uVar1": "temp_var1",
                "uVar3": "duplicated_string",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109bbb": {
            "additional_data": {
                "FUN_00109bbb": {
                    "1": "append_semicolon_if_needed",
                    "2": "append_semicolon",
                    "22": "append_semicolon_to_string"
                },
                "__s": {
                    "1": "string_to_append_to",
                    "2": "target_string",
                    "3": "str",
                    "6": "string_pointer",
                    "9": "string_ptr"
                },
                "param_1": {
                    "1": "input_struct_ptr",
                    "2": "input_address",
                    "3": "str_address",
                    "5": "input_string",
                    "6": "input"
                },
                "sVar1": {
                    "1": "strlen_result",
                    "21": "string_length",
                    "3": "str_length"
                }
            },
            "called": [
                "FUN_00104270"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nbool append_semicolon_to_string_00109bbb(long input)\n\n{\n  char *string_ptr;\n  size_t string_length;\n  \n  if (*(long *)(input + 0x60) != 0) {\n    string_ptr = *(char **)(*(long *)(input + 0x60) + 0x30);\n    if (string_ptr != (char *)0x0) {\n      string_length = strlen(string_ptr);\n      *(undefined2 *)(string_ptr + string_length) = 0x3b;\n    }\n    return string_ptr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "current_name": "append_semicolon_to_string_00109bbb",
            "entrypoint": "0x00109bbb",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_string_00109bbb",
                "__s": "string_ptr",
                "param_1": "input",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109be3": {
            "additional_data": {
                "CONCAT71((int7)((ulong)puVar2 >> 8),1)": {
                    "1": "result"
                },
                "FUN_00109be3": {
                    "1": "expand_and_set_element",
                    "2": "expand_and_insert_value",
                    "5": "expand_and_add_to_buffer",
                    "8": "expand_and_store_data"
                },
                "param_1": {
                    "1": "array_ptr",
                    "2": "data_buffer",
                    "5": "buffer",
                    "6": "data",
                    "9": "array"
                },
                "param_2": {
                    "1": "data_value",
                    "16": "value",
                    "3": "element",
                    "5": "data"
                },
                "param_3": {
                    "1": "item_size",
                    "2": "length",
                    "3": "status",
                    "4": "count",
                    "8": "value",
                    "9": "size"
                },
                "puVar2": {
                    "1": "insertion_point",
                    "2": "new_data_pointer",
                    "3": "ptr",
                    "5": "new_element"
                },
                "uVar1": {
                    "1": "new_data_buffer",
                    "2": "new_array_ptr",
                    "3": "expanded_array",
                    "4": "new_buffer",
                    "5": "new_array",
                    "9": "realloc_result"
                },
                "uVar3": {
                    "1": "entry_count",
                    "2": "current_count",
                    "21": "current_size",
                    "4": "array_size"
                }
            },
            "called": [
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "code": "\nundefined8 expand_and_store_data_00109be3(long array,undefined8 value,undefined4 size)\n\n{\n  undefined8 realloc_result;\n  undefined8 *new_element;\n  uint current_size;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    current_size = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = current_size;\n    realloc_result = xrealloc(*(undefined8 *)(array + 0x20),(ulong)current_size << 4);\n    *(undefined8 *)(array + 0x20) = realloc_result;\n  }\n  current_size = *(uint *)(array + 0x28);\n  new_element = (undefined8 *)((ulong)current_size * 0x10 + *(long *)(array + 0x20));\n  *new_element = value;\n  *(undefined4 *)(new_element + 1) = size;\n  *(uint *)(array + 0x28) = current_size + 1;\n  return CONCAT71((int7)((ulong)new_element >> 8),1);\n}\n\n",
            "current_name": "expand_and_store_data_00109be3",
            "entrypoint": "0x00109be3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "puVar2": "new_element",
                "uVar1": "realloc_result",
                "uVar3": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109c2e": {
            "additional_data": {
                "FUN_00109c2e": {
                    "1": "expand_array_and_copy",
                    "2": "resize_array_and_copy",
                    "3": "resize_array",
                    "4": "expand_array",
                    "7": "resize_and_initialize_array"
                },
                "auVar7": {
                    "1": "result_with_values",
                    "2": "result",
                    "25": "return_value"
                },
                "bVar6": {
                    "1": "zero_byte",
                    "12": "is_zero",
                    "2": "byte_var",
                    "3": "zero"
                },
                "lVar1": {
                    "1": "previous_value",
                    "2": "new_ptr",
                    "3": "new_array_ptr",
                    "4": "new_array"
                },
                "lVar3": {
                    "1": "index",
                    "10": "remaining_size",
                    "2": "offset",
                    "4": "remaining_elements",
                    "5": "remaining"
                },
                "param_1": {
                    "1": "source_array",
                    "14": "array",
                    "2": "data",
                    "5": "array_ptr"
                },
                "param_2": {
                    "1": "data",
                    "15": "value",
                    "2": "new_element",
                    "5": "new_value",
                    "6": "element"
                },
                "param_3": {
                    "1": "index",
                    "12": "size",
                    "2": "array_length",
                    "3": "new_size",
                    "4": "current_size",
                    "6": "array_size"
                },
                "param_4": {
                    "1": "some_flag",
                    "30": "flag"
                },
                "param_5": {
                    "1": "data",
                    "2": "output_data",
                    "3": "output_value",
                    "8": "result"
                },
                "param_6": {
                    "1": "initial_value",
                    "2": "extra_data",
                    "4": "return_value",
                    "5": "value",
                    "7": "result"
                },
                "plVar2": {
                    "1": "new_element_address",
                    "2": "new_element",
                    "3": "element",
                    "4": "element_pointer"
                },
                "puVar4": {
                    "1": "iter_pointer",
                    "2": "current_pointer",
                    "4": "current_element",
                    "5": "current_byte",
                    "9": "ptr"
                },
                "uVar5": {
                    "1": "max_size",
                    "17": "current_size",
                    "2": "old_size",
                    "6": "array_size"
                }
            },
            "called": [
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "code": "\nundefined  [16]\nresize_and_initialize_array_00109c2e(long array,long value,ulong size,int flag,undefined4 *result,\n            undefined8 result)\n\n{\n  long new_array;\n  long *element_pointer;\n  long remaining_size;\n  undefined *ptr;\n  ulong current_size;\n  byte is_zero;\n  undefined return_value [16];\n  \n  is_zero = 0;\n  size = size & 0xffffffff;\n  current_size = *(ulong *)(array + 0x1b0);\n  if (current_size <= size) {\n    if (current_size == 0) {\n      current_size = 10;\n    }\n    for (; current_size <= size; current_size = current_size * 2) {\n    }\n    new_array = xrealloc(*(undefined8 *)(array + 0x1a8),current_size * 0x18);\n    *(long *)(array + 0x1a8) = new_array;\n    ptr = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + new_array);\n    for (remaining_size = (current_size - *(long *)(array + 0x1b0)) * 0x18; remaining_size != 0; remaining_size = remaining_size + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)is_zero * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = current_size;\n  }\n  element_pointer = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*element_pointer == 0) {\n    new_array = *(long *)(array + 0x68);\n    *element_pointer = new_array;\n    *(long *)(array + 0x68) = new_array + 1;\n    element_pointer[1] = value;\n    *(int *)(element_pointer + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(element_pointer + 2) = 0;\n    *(undefined4 *)((long)element_pointer + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)element_pointer + 0x14);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = *element_pointer;\n  return return_value;\n}\n\n",
            "current_name": "resize_and_initialize_array_00109c2e",
            "entrypoint": "0x00109c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "auVar7": "return_value",
                "bVar6": "is_zero",
                "lVar1": "new_array",
                "lVar3": "remaining_size",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "result",
                "plVar2": "element_pointer",
                "puVar4": "ptr",
                "uVar5": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109cf4": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "push_string_to_symbol_table",
                    "7": "convert_and_push_string",
                    "8": "format_and_push_string"
                },
                "local_3c": {
                    "1": "converted_number_string",
                    "13": "converted_string",
                    "2": "converted_value",
                    "3": "buffer",
                    "4": "formatted_string"
                },
                "param_1": {
                    "1": "symbol_table",
                    "15": "output_buffer",
                    "2": "buffer",
                    "3": "destination"
                },
                "param_2": {
                    "1": "source",
                    "11": "input_value",
                    "3": "number",
                    "4": "value",
                    "6": "input_number"
                },
                "param_3": {
                    "1": "param_flags",
                    "2": "input_length",
                    "3": "flags",
                    "4": "length",
                    "6": "flag"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109d97",
                "FUN_00109dfe",
                "FUN_00109d3e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010bba1"
            ],
            "code": "\nvoid format_and_push_string_00109cf4(undefined8 output_buffer,undefined8 input_value,undefined4 flag)\n\n{\n  char converted_string [28];\n  \n  sprintf(converted_string,\"%ld\",input_value);\n  stab_push_string(output_buffer,converted_string,input_value,0,flag);\n  return;\n}\n\n",
            "current_name": "format_and_push_string_00109cf4",
            "entrypoint": "0x00109cf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109cf4": "format_and_push_string_00109cf4",
                "local_3c": "converted_string",
                "param_1": "output_buffer",
                "param_2": "input_value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d3e": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "set_defined_type"
                },
                "FUN_00109d3e": {
                    "1": "push_defined_type_wrapper",
                    "2": "push_type_to_stack",
                    "25": "push_defined_type"
                },
                "param_1": {
                    "1": "input1",
                    "2": "stack_pointer",
                    "3": "data",
                    "4": "input_param",
                    "7": "param"
                },
                "param_2": {
                    "1": "value_index",
                    "2": "length",
                    "4": "type_index",
                    "5": "size",
                    "7": "index"
                },
                "uVar1": {
                    "1": "initialized_value",
                    "13": "default_value",
                    "2": "default_type",
                    "3": "result"
                }
            },
            "called": [
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid push_defined_type_00109d3e(undefined8 param,int index)\n\n{\n  undefined8 default_value;\n  \n  default_value = 0xfffffffffffffff0;\n  if (index - 1U < 8) {\n    default_value = *(undefined8 *)(&DAT_00121360 + (ulong)(index - 1U) * 8);\n  }\n  stab_push_defined_type_00109d3e(param,default_value,index);\n  return;\n}\n\n",
            "current_name": "push_defined_type_00109d3e",
            "entrypoint": "0x00109d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "param",
                "param_2": "index",
                "uVar1": "default_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d5c": {
            "additional_data": {
                "FUN_00109c2e": {
                    "1": "push_defined_type"
                },
                "FUN_00109cf4": {
                    "1": "process_data"
                },
                "FUN_00109d5c": {
                    "1": "push_defined_type_if_struct_index_valid",
                    "15": "push_defined_type",
                    "3": "push_defined_type_to_struct"
                },
                "lVar1": {
                    "1": "index",
                    "30": "struct_index"
                },
                "param_1": {
                    "1": "data",
                    "2": "value",
                    "4": "input_param",
                    "5": "input_data",
                    "8": "input"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "ulong_param"
                },
                "param_4": {
                    "1": "param_4"
                },
                "param_5": {
                    "1": "param_5"
                },
                "stab_get_struct_index": {
                    "1": "get_struct_index"
                },
                "uVar2": {
                    "28": "result",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 push_defined_type_00109d5c(undefined8 input)\n\n{\n  long struct_index;\n  undefined8 result;\n  \n  struct_index = get_struct_index();\n  if (-1 < struct_index) {\n    result = stab_push_defined_type_00109d5c(input,struct_index,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "push_defined_type_00109d5c",
            "entrypoint": "0x00109d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "lVar1": "struct_index",
                "param_1": "input",
                "stab_get_struct_index": "get_struct_index",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d97": {
            "additional_data": {
                "FUN_00109d97": {
                    "1": "reverse_and_push_string",
                    "2": "process_data",
                    "3": "push_defined_type_or_string",
                    "6": "process_parameter"
                },
                "lVar1": {
                    "1": "incremented_value",
                    "11": "counter",
                    "4": "count",
                    "7": "current_value"
                },
                "local_40": {
                    "1": "buffer",
                    "17": "formatted_string",
                    "2": "message",
                    "5": "output_string"
                },
                "param_1": {
                    "1": "stack_pointer",
                    "2": "data",
                    "3": "input_param",
                    "5": "param",
                    "6": "input"
                },
                "param_2": {
                    "1": "auxiliary_parameter"
                },
                "param_3": {
                    "1": "counter_parameter"
                },
                "param_4": {
                    "1": "flag_parameter"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_parameter_00109d97(long input)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(input + 0x70) != 0) {\n    stab_push_defined_type(input,*(long *)(input + 0x70),0);\n    return;\n  }\n  counter = *(long *)(input + 0x68);\n  *(long *)(input + 0x68) = counter + 1;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  stab_push_string(input,formatted_string,counter,0,0);\n  return;\n}\n\n",
            "current_name": "process_parameter_00109d97",
            "entrypoint": "0x00109d97",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d97": "process_parameter_00109d97",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109dfe": {
            "additional_data": {
                "<param_1 + 0x68>": {
                    "1": "counter"
                },
                "<param_1 + 0x70>": {
                    "1": "type_address"
                },
                "FUN_00109b52": {
                    "1": "sub_function_a"
                },
                "FUN_00109cf4": {
                    "1": "sub_function_b"
                },
                "FUN_00109dfe": {
                    "1": "extract_string_value",
                    "3": "reverse_and_push",
                    "4": "process_stab_entry",
                    "6": "process_data"
                },
                "lVar1": {
                    "1": "temp_var",
                    "13": "counter",
                    "2": "previous_value",
                    "3": "current_value"
                },
                "local_40": {
                    "1": "stab_entry_string",
                    "15": "formatted_string",
                    "2": "buffer",
                    "3": "string_buffer",
                    "6": "output_string"
                },
                "param_1": {
                    "1": "function_input",
                    "2": "input_parameter",
                    "3": "input_value",
                    "4": "param",
                    "5": "data"
                },
                "param_2": {
                    "1": "sub_function_b_param2"
                },
                "param_3": {
                    "1": "sub_function_b_param3"
                },
                "param_4": {
                    "1": "sub_function_param3"
                },
                "stab_push_defined_type": {
                    "1": "push_defined_type"
                },
                "stab_push_string": {
                    "1": "push_string"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_00109dfe(long input)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(input + 0x70) != 0) {\n    push_defined_type(input,*(long *)(input + 0x70),0);\n    return;\n  }\n  counter = *(long *)(input + 0x68);\n  *(long *)(input + 0x68) = counter + 1;\n  *(long *)(input + 0x70) = counter;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  push_string(input,formatted_string,counter,1,0);\n  return;\n}\n\n",
            "current_name": "process_data_00109dfe",
            "entrypoint": "0x00109dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109dfe": "process_data_00109dfe",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "input",
                "stab_push_defined_type": "push_defined_type",
                "stab_push_string": "push_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109e76": {
            "additional_data": {
                "FUN_00109e76": {
                    "1": "store_register_usage",
                    "3": "update_and_format_data",
                    "8": "format_and_push_string"
                },
                "lVar1": {
                    "1": "previous_value",
                    "10": "counter",
                    "13": "current_value",
                    "2": "current_count"
                },
                "local_5a": {
                    "1": "string",
                    "2": "buffer",
                    "22": "formatted_string"
                },
                "param_1": {
                    "1": "data_ptr",
                    "25": "base_address",
                    "3": "data_pointer"
                },
                "param_2": {
                    "1": "data",
                    "2": "input_value",
                    "25": "value"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid format_and_push_string_00109e76(long base_address,uint value)\n\n{\n  long current_value;\n  char formatted_string [58];\n  \n  current_value = *(long *)(base_address + 0x68);\n  *(long *)(base_address + 0x68) = current_value + 1;\n  sprintf(formatted_string,\"%ld=r%ld;%u;0;\",current_value,current_value,(ulong)value);\n  stab_push_string(base_address,formatted_string,current_value,1,value * 2);\n  return;\n}\n\n",
            "current_name": "format_and_push_string_00109e76",
            "entrypoint": "0x00109e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109e76": "format_and_push_string_00109e76",
                "lVar1": "current_value",
                "local_5a": "formatted_string",
                "param_1": "base_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ed3": {
            "additional_data": {
                "FUN_00109ed3": {
                    "1": "reverse_string",
                    "7": "process_data"
                },
                "__ptr": {
                    "1": "ptr_var",
                    "2": "pop_type_ptr",
                    "3": "allocated_memory",
                    "6": "temp_ptr",
                    "8": "ptr"
                },
                "__s": {
                    "1": "str_ptr2",
                    "19": "new_string",
                    "4": "new_str"
                },
                "bVar12": {
                    "1": "temp_byte",
                    "2": "byte_val",
                    "3": "flag",
                    "5": "byte_value",
                    "8": "byte_var"
                },
                "cVar3": {
                    "1": "char_val",
                    "2": "status",
                    "3": "char_value",
                    "4": "char_var",
                    "9": "result"
                },
                "lVar6": {
                    "1": "temp_var1",
                    "2": "index",
                    "3": "counter",
                    "4": "count",
                    "6": "temp_var"
                },
                "lVar9": {
                    "1": "index",
                    "2": "loop_count",
                    "4": "loop_counter",
                    "7": "loop_var"
                },
                "param_1": {
                    "1": "data",
                    "2": "input1",
                    "3": "input_value",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "input_uint",
                    "2": "input2",
                    "3": "char_value",
                    "5": "character"
                },
                "param_3": {
                    "1": "length",
                    "2": "input_3",
                    "3": "value"
                },
                "param_4": {
                    "1": "long_array_param",
                    "2": "array_param",
                    "3": "buffer"
                },
                "param_5": {
                    "1": "length_ptr",
                    "2": "size_array",
                    "4": "buffer_size"
                },
                "pcVar4": {
                    "1": "popped_string",
                    "2": "char_pointer",
                    "4": "string",
                    "5": "str"
                },
                "puVar11": {
                    "1": "loop_ptr",
                    "2": "ptr2",
                    "3": "undefined_pointer"
                },
                "sVar5": {
                    "1": "input_length",
                    "2": "str_length",
                    "20": "string_length",
                    "4": "str_len"
                },
                "uVar1": {
                    "1": "count",
                    "2": "index",
                    "3": "temp1",
                    "4": "size"
                },
                "uVar10": {
                    "1": "original_length",
                    "2": "temp_var10",
                    "4": "new_size",
                    "6": "current_size"
                },
                "uVar2": {
                    "1": "temp_count",
                    "2": "new_length",
                    "3": "temp2",
                    "6": "new_size"
                },
                "uVar7": {
                    "1": "temp9",
                    "15": "return_value",
                    "2": "push_result",
                    "9": "result"
                },
                "uVar8": {
                    "1": "push_value",
                    "2": "is_defined",
                    "3": "undefined_var",
                    "5": "flag"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00109b2f",
                "FUN_001042b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010a0a0",
                "FUN_0010a0bd",
                "FUN_0010a0d3",
                "FUN_0010a083",
                "FUN_0010e5db"
            ],
            "code": "\nundefined8 process_data_00109ed3(long input_param,uint flag,undefined4 status,long *array,ulong *buffer_size)\n\n{\n  ulong size;\n  ulong new_size;\n  char result;\n  char *str;\n  size_t string_length;\n  char *new_string;\n  long temp_var;\n  void *ptr;\n  undefined8 return_value;\n  undefined flag;\n  long loop_var;\n  ulong current_size;\n  undefined *undefined_pointer;\n  byte byte_var;\n  \n  byte_var = 0;\n  temp_var = *(long *)(input_param + 0x60);\n  if (temp_var != 0) {\n    size = *(ulong *)(temp_var + 0x10);\n    if (((long)size < 1) || (array == (long *)0x0)) {\n      flag = *(undefined *)(temp_var + 0x1c);\n      str = (char *)stab_pop_type(input_param);\n      string_length = strlen(str);\n      new_string = (char *)xmalloc(string_length + 2);\n      sprintf(new_string,\"%c%s\",(ulong)flag,str);\n      free(str);\n      temp_var = 0;\n    }\n    else {\n      current_size = *buffer_size;\n      if (current_size <= size) {\n        if (current_size == 0) {\n          current_size = 10;\n        }\n        for (; current_size <= size; current_size = current_size * 2) {\n        }\n        temp_var = xrealloc(*array,current_size * 8);\n        new_size = *buffer_size;\n        *array = temp_var;\n        undefined_pointer = (undefined *)(temp_var + new_size * 8);\n        for (loop_var = (current_size - new_size) * 8; loop_var != 0; loop_var = loop_var + -1) {\n          *undefined_pointer = 0;\n          undefined_pointer = undefined_pointer + (ulong)byte_var * -2 + 1;\n        }\n        *buffer_size = current_size;\n      }\n      temp_var = *(long *)(*array + size * 8);\n      if ((temp_var != 0) && (*(char *)(*(long *)(input_param + 0x60) + 0x1c) == '\\0')) {\n        ptr = (void *)stab_pop_type(input_param);\n        free(ptr);\n        return_value = stab_push_defined_type(input_param,temp_var,status);\n        return return_value;\n      }\n      temp_var = *(long *)(input_param + 0x68);\n      *(long *)(input_param + 0x68) = temp_var + 1;\n      str = (char *)stab_pop_type(input_param);\n      string_length = strlen(str);\n      new_string = (char *)xmalloc(string_length + 0x14);\n      sprintf(new_string,\"%ld=%c%s\",temp_var,(ulong)flag,str);\n      free(str);\n      flag = 1;\n      *(long *)(*array + size * 8) = temp_var;\n    }\n    result = stab_push_string(input_param,new_string,temp_var,flag,status);\n    if (result != '\\0') {\n      free(new_string);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00109ed3",
            "entrypoint": "0x00109ed3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "__ptr": "ptr",
                "__s": "new_string",
                "bVar12": "byte_var",
                "cVar3": "result",
                "lVar6": "temp_var",
                "lVar9": "loop_var",
                "param_1": "input_param",
                "param_2": "flag",
                "param_3": "status",
                "param_4": "array",
                "param_5": "buffer_size",
                "pcVar4": "str",
                "puVar11": "undefined_pointer",
                "sVar5": "string_length",
                "uVar1": "size",
                "uVar10": "current_size",
                "uVar2": "new_size",
                "uVar7": "return_value",
                "uVar8": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a083": {
            "additional_data": {
                "0x178": {
                    "1": "offset1"
                },
                "0x180": {
                    "1": "offset2"
                },
                "0x2a": {
                    "1": "constant_value"
                },
                "4": {
                    "1": "shift_amount"
                },
                "DAT_": {
                    "1": "..."
                },
                "FUN_00109ed3": {
                    "1": "modify_entry_address",
                    "2": "modify_type"
                },
                "FUN_0010a083": {
                    "1": "modify_and_return",
                    "12": "modify_stab_type",
                    "2": "modify_stab_entry",
                    "4": "modify_data",
                    "6": "modify_type"
                },
                "PTR_": {
                    "1": "..."
                },
                "param_1": {
                    "1": "original_param",
                    "2": "input_param",
                    "3": "data",
                    "9": "input"
                },
                "param_1 + 0x178": {
                    "1": "offset1"
                },
                "param_1 + 0x180": {
                    "1": "offset2"
                },
                "param_2": {
                    "1": "index",
                    "2": "value_2",
                    "4": "flag",
                    "7": "type"
                },
                "param_3": {
                    "1": "size_param",
                    "2": "value_3",
                    "3": "count",
                    "8": "size"
                },
                "param_4": {
                    "1": "output_ptr1",
                    "2": "pointer_1",
                    "8": "ptr1"
                },
                "param_5": {
                    "1": "output_ptr2",
                    "2": "ptr_b",
                    "8": "ptr2"
                },
                "stab_modify_type": {
                    "1": "update_data_type",
                    "2": "modify_type",
                    "7": "modify_stab_type"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid modify_stab_type_0010a083(long input)\n\n{\n  modify_stab_type_0010a083(input,0x2a,4,input + 0x178,input + 0x180);\n  return;\n}\n\n",
            "current_name": "modify_stab_type_0010a083",
            "entrypoint": "0x0010a083",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a083": "modify_stab_type_0010a083",
                "param_1": "input",
                "stab_modify_type": "modify_stab_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0a0": {
            "additional_data": {
                "0x198": {
                    "2": "offset_1"
                },
                "0x1a0": {
                    "2": "offset_2"
                },
                "0x26": {
                    "1": "constant_1"
                },
                "4": {
                    "1": "size"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00109ed3": {
                    "1": "modify_stab_entry"
                },
                "FUN_0010a0a0": {
                    "1": "modify_parameters",
                    "3": "modify_stab_entry",
                    "4": "modify_data",
                    "8": "modify_stab_type"
                },
                "PTR_": {
                    "1": ""
                },
                "fun_00109ed3_local_var_1": {
                    "1": "local_var1"
                },
                "fun_00109ed3_local_var_2": {
                    "1": "local_var2"
                },
                "fun_00109ed3_param_1": {
                    "1": "param1"
                },
                "fun_00109ed3_param_2": {
                    "1": "param2"
                },
                "fun_00109ed3_param_3": {
                    "1": "param3"
                },
                "fun_00109ed3_param_4": {
                    "1": "param4"
                },
                "fun_00109ed3_param_5": {
                    "1": "param5"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "input_value",
                    "3": "param",
                    "4": "data",
                    "5": "input_param",
                    "6": "entry_address"
                },
                "param_1 + 0x198": {
                    "1": "data_plus_0x198"
                },
                "param_1 + 0x1a0": {
                    "1": "input_param_offset2"
                },
                "param_1+0x198": {
                    "1": "param_offset"
                },
                "param_1+0x1a0": {
                    "1": "param_offset2"
                },
                "param_2": {
                    "1": "type_modifier",
                    "2": "value",
                    "4": "flag",
                    "7": "type"
                },
                "param_3": {
                    "1": "size_param",
                    "2": "param3",
                    "3": "count",
                    "4": "value",
                    "7": "size"
                },
                "param_4": {
                    "1": "pointer1",
                    "2": "array1",
                    "4": "ptr1"
                },
                "param_5": {
                    "1": "length_ptr",
                    "2": "pointer_2",
                    "4": "ptr2"
                },
                "stab_modify_type": {
                    "1": "update_stability_entry",
                    "4": "modify_type",
                    "5": "modify_stab_type"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid modify_stab_type_0010a0a0(long entry_address)\n\n{\n  modify_stab_type_0010a0a0(entry_address,0x26,4,entry_address + 0x198,entry_address + 0x1a0);\n  return;\n}\n\n",
            "current_name": "modify_stab_type_0010a0a0",
            "entrypoint": "0x0010a0a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0a0": "modify_stab_type_0010a0a0",
                "param_1": "entry_address",
                "stab_modify_type": "modify_stab_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0bd": {
            "additional_data": {
                "*(long *)(param_1 + 0x60)": {
                    "1": "ptr"
                },
                "*(long *)(param_1 + 0x60) + 0x18": {
                    "1": "offset_value"
                },
                "*(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18)": {
                    "1": "get_value_from_pointer"
                },
                "0x6b": {
                    "1": "constant"
                },
                "FUN_00109ed3": {
                    "1": "helper_function",
                    "2": "process_data",
                    "4": "modify_type"
                },
                "FUN_0010a0bd": {
                    "1": "apply_stab_modification",
                    "17": "modify_stab_type",
                    "2": "modify_stab_entry",
                    "9": "modify_type"
                },
                "long": {
                    "1": "param"
                },
                "original_variable_name_1": {
                    "1": "type"
                },
                "original_variable_name_2": {
                    "1": "data"
                },
                "param_1": {
                    "1": "arg",
                    "12": "input",
                    "2": "input_address",
                    "3": "data",
                    "4": "input_param"
                },
                "param_1 + 0x60": {
                    "1": "input_ptr_offset"
                },
                "param_2": {
                    "1": "flags",
                    "2": "param",
                    "3": "param_2",
                    "8": "value"
                },
                "param_3": {
                    "1": "param3_extended",
                    "3": "data",
                    "7": "value"
                },
                "param_4": {
                    "1": "pointer1",
                    "2": "ptr",
                    "3": "ptr1",
                    "4": "pointer"
                },
                "param_5": {
                    "1": "entry_data_pointer",
                    "2": "param5",
                    "3": "ptr2"
                },
                "result": {
                    "1": "new_data"
                },
                "stab_modify_type": {
                    "1": "modify_stab_type_helper",
                    "6": "modify_stab_type"
                },
                "uint": {
                    "1": "type"
                },
                "ulong": {
                    "1": "data_ptr"
                },
                "undefined4": {
                    "1": "info"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid modify_stab_type_0010a0bd(param input)\n\n{\n  modify_stab_type_0010a0bd(input,0x6b,*(info *)(*(param *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "modify_stab_type_0010a0bd",
            "entrypoint": "0x0010a0bd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0bd": "modify_stab_type_0010a0bd",
                "long": "param",
                "param_1": "input",
                "stab_modify_type": "modify_stab_type",
                "undefined4": "info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0d3": {
            "additional_data": {
                "*(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18)": {
                    "1": "type_value"
                },
                "FUN_00109ed3": {
                    "1": "modify_long",
                    "4": "process_data"
                },
                "FUN_0010a0d3": {
                    "1": "modify_and_stabilize_function",
                    "13": "modify_stab_type",
                    "3": "modify_stab_entry",
                    "8": "modify_type"
                },
                "param_1": {
                    "1": "arg",
                    "2": "input_param",
                    "3": "data",
                    "4": "param"
                },
                "param_2": {
                    "1": "type_code",
                    "2": "size",
                    "3": "param_2",
                    "4": "value"
                },
                "param_3": {
                    "1": "ptr",
                    "3": "value",
                    "4": "param3"
                },
                "param_4": {
                    "1": "subfunc_param_4",
                    "2": "data_pointer",
                    "4": "param4"
                },
                "param_5": {
                    "1": "length_ptr",
                    "2": "pointer_array",
                    "4": "param5"
                },
                "parameter_1": {
                    "1": "param1"
                },
                "stab_modify_type": {
                    "1": "update_stability_with_modification",
                    "3": "modify_stability_type",
                    "8": "modify_stab_type"
                },
                "undefined4": {
                    "1": "four_bytes"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid modify_stab_type_0010a0d3(long param)\n\n{\n  modify_stab_type_0010a0d3(param,0x42,*(four_bytes *)(*(long *)(param + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "modify_stab_type_0010a0d3",
            "entrypoint": "0x0010a0d3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0d3": "modify_stab_type_0010a0d3",
                "param_1": "param",
                "stab_modify_type": "modify_stab_type",
                "undefined4": "four_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0e9": {
            "additional_data": {
                "FUN_0010a0e9": {
                    "1": "build_string_and_push",
                    "2": "format_and_push_string",
                    "3": "process_data",
                    "5": "reverse_and_push_string"
                },
                "__s": {
                    "1": "string_to_parse",
                    "2": "popped_string",
                    "3": "type",
                    "5": "input_string",
                    "9": "string"
                },
                "__s_00": {
                    "1": "new_string_ptr",
                    "7": "modified_string",
                    "8": "new_string",
                    "9": "formatted_string"
                },
                "__s_1": {
                    "1": "revised_string"
                },
                "char": {
                    "1": "character"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_ptr",
                    "3": "base_address"
                },
                "param_2": {
                    "1": "param_2_value",
                    "15": "value1",
                    "2": "value_param1",
                    "9": "value_1"
                },
                "param_3": {
                    "1": "second_parameter",
                    "15": "value2",
                    "2": "param3",
                    "9": "value_2"
                },
                "sVar3": {
                    "1": "str_length",
                    "22": "string_length",
                    "3": "type_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stab_pop_type": {
                    "1": "pop_type"
                },
                "stab_push_string": {
                    "1": "push_string"
                },
                "uVar1": {
                    "1": "string_property",
                    "2": "character",
                    "3": "type",
                    "4": "type_value"
                },
                "uVar2": {
                    "1": "push_result",
                    "15": "result",
                    "7": "return_value"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 reverse_and_push_string_0010a0e9(long input,undefined8 value1,undefined8 value2)\n\n{\n  undefined type_value;\n  undefined4 result;\n  character *string;\n  size_t string_length;\n  character *formatted_string;\n  \n  type_value = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(input + 0x60) + 0x18);\n  string = (character *)pop_type();\n  string_length = strlen(string);\n  formatted_string = (character *)xmalloc(string_length + 100);\n  format_string(formatted_string,\"r%s;%ld;%ld;\",string,value1,value2);\n  deallocate_memory(string);\n  result = push_string(input,formatted_string,0,type_value,result);\n  if ((character)result != '\\0') {\n    deallocate_memory(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "reverse_and_push_string_0010a0e9",
            "entrypoint": "0x0010a0e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0e9": "reverse_and_push_string_0010a0e9",
                "__s": "string",
                "__s_00": "formatted_string",
                "char": "character",
                "free": "deallocate_memory",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "sVar3": "string_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_push_string": "push_string",
                "uVar1": "type_value",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a181": {
            "additional_data": {
                "FUN_0010a181": {
                    "1": "parse_request",
                    "10": "process_data",
                    "5": "generate_string"
                },
                "__s": {
                    "1": "first_string",
                    "12": "string1",
                    "2": "input_string",
                    "3": "string_1",
                    "6": "str1"
                },
                "__s_00": {
                    "1": "extra_string",
                    "12": "string2",
                    "2": "data",
                    "3": "string_2",
                    "6": "str2"
                },
                "__s_01": {
                    "1": "request_string",
                    "2": "result",
                    "4": "new_string",
                    "6": "combined_string",
                    "8": "result_string"
                },
                "cVar1": {
                    "1": "temp_char",
                    "2": "char_var",
                    "3": "flag_char",
                    "5": "flag_value",
                    "6": "char_value",
                    "8": "char_flag"
                },
                "iVar2": {
                    "1": "data_length",
                    "2": "int_var",
                    "3": "int_var1",
                    "4": "multiplier",
                    "6": "int_value"
                },
                "iVar3": {
                    "1": "calculate_result",
                    "16": "result",
                    "2": "int_value2",
                    "3": "int_var2"
                },
                "lVar7": {
                    "1": "index",
                    "21": "counter",
                    "3": "count"
                },
                "local_41": {
                    "1": "flag_local",
                    "19": "local_flag",
                    "2": "new_flag",
                    "5": "temp_flag"
                },
                "param_1": {
                    "1": "g_var_1",
                    "2": "input1",
                    "3": "data",
                    "5": "data_ptr"
                },
                "param_2": {
                    "1": "start_num",
                    "10": "start_index",
                    "14": "start",
                    "5": "start_value"
                },
                "param_3": {
                    "1": "end_num",
                    "10": "end_index",
                    "14": "end",
                    "5": "end_value"
                },
                "param_4": {
                    "1": "control_byte",
                    "29": "flag"
                },
                "sVar5": {
                    "1": "size1",
                    "11": "length1",
                    "2": "length_1",
                    "5": "len1"
                },
                "sVar6": {
                    "1": "extra_length",
                    "11": "length2",
                    "2": "length_2",
                    "5": "len2"
                },
                "sVar7": {
                    "1": "report_id"
                },
                "uVar4": {
                    "1": "status",
                    "18": "return_value",
                    "3": "return_val",
                    "6": "result"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a181(long data_ptr,long start,long end,byte flag)\n\n{\n  char char_flag;\n  int int_value;\n  int result;\n  undefined4 return_value;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  long counter;\n  byte local_flag;\n  \n  char_flag = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  local_flag = 1;\n  if (char_flag == '\\0') {\n    local_flag = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  }\n  int_value = *(int *)(*(long *)(data_ptr + 0x60) + 0x18);\n  string2 = (char *)stab_pop_type(data_ptr);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  result_string = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *result_string = '\\0';\n    counter = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(result_string,\"%ld=@S;\",counter);\n    local_flag = flag;\n  }\n  length1 = strlen(result_string);\n  sprintf(result_string + length1,\"ar%s;%ld;%ld;%s\",string1,start,end,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (start <= end) {\n    result = int_value * (((int)end - (int)start) + 1);\n  }\n  return_value = stab_push_string(data_ptr,result_string,counter,local_flag,result);\n  if ((char)return_value != '\\0') {\n    free(result_string);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010a181",
            "entrypoint": "0x0010a181",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "result_string",
                "cVar1": "char_flag",
                "iVar2": "int_value",
                "iVar3": "result",
                "lVar7": "counter",
                "local_41": "local_flag",
                "param_1": "data_ptr",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "sVar5": "length1",
                "sVar6": "length2",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a2b9": {
            "additional_data": {
                "FUN_0010a2b9": {
                    "1": "combine_strings",
                    "2": "create_stab_entry",
                    "4": "generate_stab_entry",
                    "8": "process_data"
                },
                "__s": {
                    "1": "str",
                    "2": "string",
                    "3": "str1",
                    "5": "popped_string",
                    "6": "string1"
                },
                "__s_00": {
                    "1": "new_str",
                    "2": "string_2",
                    "3": "str2",
                    "4": "allocated_string",
                    "8": "new_string"
                },
                "auVar4": {
                    "24": "result",
                    "7": "return_value"
                },
                "cVar1": {
                    "1": "char_val",
                    "12": "char_value",
                    "2": "entry_char",
                    "4": "char1",
                    "5": "char_var"
                },
                "lVar3": {
                    "1": "entry_number",
                    "2": "count",
                    "22": "counter",
                    "3": "entry_index"
                },
                "param_1": {
                    "1": "input_value_1",
                    "2": "input_param",
                    "3": "input_address",
                    "4": "data"
                },
                "param_2": {
                    "1": "input_value_2",
                    "17": "flag"
                },
                "param_3": {
                    "1": "data1",
                    "2": "ptr1",
                    "3": "param_3",
                    "4": "arg1",
                    "6": "param3"
                },
                "param_4": {
                    "1": "input2",
                    "2": "ptr2",
                    "3": "param_b",
                    "4": "param_4",
                    "6": "param4"
                },
                "sVar2": {
                    "1": "str1_length",
                    "14": "string_length",
                    "2": "str_length",
                    "3": "str_len"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] process_data_0010a2b9(long data,char flag,undefined8 param3,undefined8 param4)\n\n{\n  char char_value;\n  char *string1;\n  size_t string_length;\n  char *new_string;\n  long counter;\n  undefined result [16];\n  \n  char_value = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  string_length = strlen(string1);\n  new_string = (char *)xmalloc(string_length + 0x1e);\n  if (flag == '\\0') {\n    *new_string = '\\0';\n    counter = 0;\n    flag = char_value;\n  }\n  else {\n    counter = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = counter + 1;\n    sprintf(new_string,\"%ld=@S;\",counter);\n  }\n  string_length = strlen(new_string);\n  sprintf(new_string + string_length,\"S%s\",string1);\n  free(string1);\n  result._0_4_ = stab_push_string(data,new_string,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(new_string);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "process_data_0010a2b9",
            "entrypoint": "0x0010a2b9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "__s": "string1",
                "__s_00": "new_string",
                "auVar4": "result",
                "cVar1": "char_value",
                "lVar3": "counter",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "param3",
                "param_4": "param4",
                "sVar2": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a377": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "stab_pop_type"
                },
                "FUN_00109b52": {
                    "1": "process_pop_type"
                },
                "FUN_0010a377": {
                    "1": "build_string",
                    "10": "reverse_string_concatenation",
                    "2": "combine_strings"
                },
                "__s": {
                    "1": "pop_string",
                    "11": "string1",
                    "2": "str1",
                    "4": "string_1",
                    "9": "first_string"
                },
                "__s_00": {
                    "1": "pop_type_string",
                    "11": "string2",
                    "2": "str2",
                    "4": "string_2",
                    "9": "second_string"
                },
                "__s_01": {
                    "1": "combined_str",
                    "10": "combined_string",
                    "2": "formatted_string",
                    "4": "new_string",
                    "9": "concatenated_string"
                },
                "cVar1": {
                    "1": "is_null",
                    "3": "char_flag",
                    "9": "flag"
                },
                "param_1": {
                    "1": "argument",
                    "18": "input",
                    "2": "input_param",
                    "7": "input_address"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "sVar3": {
                    "1": "str1_length",
                    "11": "length1",
                    "2": "len1",
                    "3": "length_first_string",
                    "5": "first_string_length"
                },
                "sVar4": {
                    "1": "length_string_2",
                    "11": "length2",
                    "2": "len2",
                    "3": "length_2",
                    "5": "second_string_length"
                },
                "uVar2": {
                    "10": "return_value",
                    "21": "result"
                },
                "uVar5": {
                    "1": "used_flag",
                    "2": "flag",
                    "4": "use_flag"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 reverse_string_concatenation_0010a377(long input)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  undefined use_flag;\n  \n  use_flag = 1;\n  flag = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  if (flag == '\\0') {\n    use_flag = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\n  }\n  string2 = (char *)stab_pop_type(input);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  combined_string = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(combined_string,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = stab_push_string(input,combined_string,0,use_flag,0);\n  if ((char)result != '\\0') {\n    free(combined_string);\n  }\n  return result;\n}\n\n",
            "current_name": "reverse_string_concatenation_0010a377",
            "entrypoint": "0x0010a377",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a377": "reverse_string_concatenation_0010a377",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "combined_string",
                "cVar1": "flag",
                "param_1": "input",
                "sVar3": "length1",
                "sVar4": "length2",
                "uVar2": "result",
                "uVar5": "use_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a424": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "cleanup_function3"
                },
                "FUN_00109b52": {
                    "1": "another_function"
                },
                "FUN_00109d97": {
                    "1": "do_something1"
                },
                "FUN_0010a424": {
                    "1": "build_string",
                    "2": "create_improved_string",
                    "3": "construct_string",
                    "6": "generate_formatted_string"
                },
                "__ptr": {
                    "1": "new_strings",
                    "2": "array_ptr",
                    "5": "dynamic_array",
                    "7": "ptr_array"
                },
                "__s": {
                    "1": "str_var2",
                    "2": "ptr2",
                    "4": "str2",
                    "5": "string2",
                    "7": "second_string"
                },
                "__s_00": {
                    "1": "new_str",
                    "2": "concatenated_string",
                    "4": "final_string",
                    "5": "formatted_string"
                },
                "bVar10": {
                    "1": "is_empty",
                    "2": "temp_byte2",
                    "3": "flag"
                },
                "bVar2": {
                    "1": "result2",
                    "2": "temp_flag",
                    "3": "byte_val",
                    "4": "byte_flag",
                    "5": "byte_var",
                    "6": "temp_byte"
                },
                "cVar1": {
                    "1": "result1",
                    "2": "is_empty",
                    "4": "is_empty_type",
                    "5": "empty_type",
                    "9": "result"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "iVar3": {
                    "1": "new_length",
                    "2": "count",
                    "3": "index",
                    "4": "temp_count",
                    "6": "temp_int"
                },
                "lVar11": {
                    "1": "loop_counter_2",
                    "11": "loop_index",
                    "2": "index2",
                    "4": "loop_var2"
                },
                "lVar9": {
                    "1": "counter",
                    "12": "index",
                    "2": "loop_count",
                    "3": "loop_index",
                    "5": "loop_var1"
                },
                "param_1": {
                    "1": "data",
                    "2": "input_data",
                    "3": "input_param",
                    "7": "arg1",
                    "9": "input"
                },
                "param_2": {
                    "1": "is_param2",
                    "14": "flag",
                    "2": "is_empty",
                    "7": "arg2"
                },
                "param_3": {
                    "1": "size_param",
                    "13": "count",
                    "3": "num_elements",
                    "6": "arg3"
                },
                "param_4": {
                    "1": "is_last_argument_empty",
                    "2": "append_flag",
                    "3": "check",
                    "6": "arg4"
                },
                "pcVar5": {
                    "1": "type_str",
                    "2": "string_var1",
                    "3": "str1",
                    "5": "string1",
                    "6": "first_string"
                },
                "sVar7": {
                    "1": "type_len1",
                    "3": "size_var1",
                    "4": "len1",
                    "5": "length1",
                    "6": "size1"
                },
                "sVar8": {
                    "1": "length_2",
                    "3": "size_var2",
                    "4": "second_string_length",
                    "5": "length2",
                    "6": "size2"
                },
                "sprintf": {
                    "2": "format_string"
                },
                "stab_empty_type_lto_priv_0": {
                    "2": "is_empty_type"
                },
                "stab_pop_type": {
                    "2": "pop_type"
                },
                "stab_push_string": {
                    "2": "push_string"
                },
                "strcpy": {
                    "2": "copy_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar12": {
                    "1": "byte_value",
                    "2": "empty_type",
                    "3": "undefined_var"
                },
                "uVar4": {
                    "1": "output",
                    "12": "result",
                    "18": "return_value"
                },
                "uVar6": {
                    "1": "popped_param",
                    "2": "type_value",
                    "5": "value",
                    "9": "temp_value"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00109d97",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 generate_formatted_string_0010a424(long input,char flag,int count,char arg4)\n\n{\n  char result;\n  byte byte_value;\n  int temp_int;\n  undefined4 return_value;\n  char *first_string;\n  undefined8 *ptr_array;\n  undefined8 temp_value;\n  char *second_string;\n  size_t size1;\n  size_t size2;\n  char *formatted_string;\n  long index;\n  byte temp_flag;\n  long loop_index;\n  undefined undefined_var;\n  \n  if ((flag == '\\0') && (result = is_empty_type(), result == '\\0')) {\n    return 0;\n  }\n  temp_flag = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n  first_string = (char *)pop_type(input);\n  if (count < 0) {\n    ptr_array = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    undefined_var = 1;\n    if (temp_flag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      temp_int = count + 1;\n      ptr_array = (undefined8 *)allocate_memory((long)temp_int * 8);\n      index = (long)(count + -1);\n      do {\n        byte_value = 1;\n        if (temp_flag == 0) {\n          byte_value = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n        }\n        temp_value = pop_type(input);\n        temp_flag = byte_value & 1;\n        ptr_array[index] = temp_value;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (arg4 == '\\0') {\n        result = is_empty_type(input);\n        if (result == '\\0') {\n          return 0;\n        }\n        byte_value = 1;\n        if (temp_flag == 0) {\n          byte_value = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n        }\n        temp_flag = byte_value & 1;\n        temp_value = pop_type(input);\n        ptr_array[(long)temp_int + -1] = temp_value;\n        count = temp_int;\n      }\n      goto LAB_0010a582;\n    }\n    ptr_array = (undefined8 *)0x0;\n    if (arg4 != '\\0') goto LAB_0010a582;\n    ptr_array = (undefined8 *)allocate_memory(8);\n    result = is_empty_type(input);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((temp_flag != 0) || (*(char *)(*(long *)(input + 0x60) + 0x1c) != '\\0')) {\n      temp_value = pop_type(input);\n      count = 1;\n      undefined_var = 1;\n      *ptr_array = temp_value;\n      goto LAB_0010a596;\n    }\n    temp_value = pop_type(input);\n    count = 1;\n    *ptr_array = temp_value;\n  }\n  undefined_var = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\nLAB_0010a596:\n  second_string = (char *)pop_type(input);\n  size1 = get_length(first_string);\n  size2 = get_length(second_string);\n  index = size1 + 10 + size2;\n  for (loop_index = 0; (int)loop_index < count; loop_index = loop_index + 1) {\n    size1 = get_length((char *)ptr_array[loop_index]);\n    index = index + size1;\n  }\n  formatted_string = (char *)allocate_memory(index);\n  format_string(formatted_string,\"#%s,%s\",first_string,second_string);\n  index = 0;\n  deallocate_memory(first_string);\n  deallocate_memory(second_string);\n  while( true ) {\n    size1 = get_length(formatted_string);\n    if (count <= (int)index) break;\n    *(undefined2 *)(formatted_string + size1) = 0x2c;\n    first_string = (char *)ptr_array[index];\n    index = index + 1;\n    copy_string(formatted_string + size1 + 1,first_string);\n    deallocate_memory(first_string);\n  }\n  *(undefined2 *)(formatted_string + size1) = 0x3b;\n  deallocate_memory(ptr_array);\n  return_value = push_string(input,formatted_string,0,undefined_var,0);\n  if ((char)return_value == '\\0') {\n    return 0;\n  }\n  deallocate_memory(formatted_string);\n  return return_value;\n}\n\n",
            "current_name": "generate_formatted_string_0010a424",
            "entrypoint": "0x0010a424",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a424": "generate_formatted_string_0010a424",
                "__ptr": "ptr_array",
                "__s": "second_string",
                "__s_00": "formatted_string",
                "bVar10": "temp_flag",
                "bVar2": "byte_value",
                "cVar1": "result",
                "free": "deallocate_memory",
                "iVar3": "temp_int",
                "lVar11": "loop_index",
                "lVar9": "index",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "arg4",
                "pcVar5": "first_string",
                "sVar7": "size1",
                "sVar8": "size2",
                "sprintf": "format_string",
                "stab_empty_type_lto_priv_0": "is_empty_type",
                "stab_pop_type": "pop_type",
                "stab_push_string": "push_string",
                "strcpy": "copy_string",
                "strlen": "get_length",
                "uVar12": "undefined_var",
                "uVar4": "return_value",
                "uVar6": "temp_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a69a": {
            "additional_data": {
                "FUN_0010a69a": {
                    "1": "add_stable_string_to_struct",
                    "2": "process_stab_entry",
                    "3": "generate_stab_string",
                    "8": "process_data"
                },
                "lVar2": {
                    "1": "index_result",
                    "22": "struct_index",
                    "7": "index"
                },
                "local_60": {
                    "1": "temp_buffer",
                    "12": "output_string",
                    "3": "buffer",
                    "4": "formatted_string"
                },
                "param_1": {
                    "1": "data_size",
                    "2": "buffer",
                    "6": "data_buffer"
                },
                "param_2": {
                    "1": "input_value",
                    "2": "value",
                    "3": "param2"
                },
                "param_3": {
                    "1": "index",
                    "2": "length",
                    "3": "struct_index",
                    "4": "struct_flag",
                    "8": "flag"
                },
                "param_4": {
                    "1": "flag_char",
                    "2": "char_param",
                    "5": "char_value",
                    "6": "char_flag",
                    "9": "flag"
                },
                "param_5": {
                    "1": "uint_input",
                    "10": "value",
                    "2": "flag_value",
                    "3": "int_value"
                },
                "sVar3": {
                    "1": "local_string_size",
                    "14": "string_length",
                    "2": "buffer_length",
                    "4": "str_length",
                    "8": "length"
                },
                "stab_get_struct_index": {
                    "1": "get_struct_index"
                },
                "stab_push_string": {
                    "1": "push_string"
                },
                "uVar1": {
                    "28": "result",
                    "3": "return_value"
                },
                "uVar4": {
                    "1": "memory_block",
                    "2": "allocated_mem",
                    "21": "allocated_memory"
                },
                "uVar5": {
                    "1": "is_struct_created",
                    "3": "has_struct_index",
                    "4": "flag",
                    "6": "has_index",
                    "8": "is_struct_index_valid"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109c2e",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a69a(long data_buffer,undefined8 param2,int flag,char flag,uint value)\n\n{\n  undefined4 result;\n  long struct_index;\n  size_t string_length;\n  undefined8 allocated_memory;\n  undefined is_struct_index_valid;\n  char output_string [48];\n  \n  if (flag == 0) {\n    output_string[0] = '\\0';\n    is_struct_index_valid = 0;\n    struct_index = 0;\n  }\n  else {\n    struct_index = get_struct_index();\n    if (struct_index < 0) {\n      return 0;\n    }\n    is_struct_index_valid = 1;\n    sprintf(output_string,\"%ld=\",struct_index);\n  }\n  string_length = strlen(output_string);\n  sprintf(output_string + string_length,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = push_string(data_buffer,output_string,struct_index,is_struct_index_valid,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  struct_index = *(long *)(data_buffer + 0x60);\n  allocated_memory = allocate_memory(1);\n  *(undefined8 *)(struct_index + 0x20) = allocated_memory;\n  **(undefined **)(*(long *)(data_buffer + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "current_name": "process_data_0010a69a",
            "entrypoint": "0x0010a69a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "lVar2": "struct_index",
                "local_60": "output_string",
                "param_1": "data_buffer",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "flag",
                "param_5": "value",
                "sVar3": "string_length",
                "stab_get_struct_index": "get_struct_index",
                "stab_push_string": "push_string",
                "uVar1": "result",
                "uVar4": "allocated_memory",
                "uVar5": "is_struct_index_valid",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a77a": {
            "additional_data": {
                "FUN_0010a77a": {
                    "1": "process_stab_entry",
                    "10": "combine_strings",
                    "3": "process_data",
                    "4": "concatenate_strings"
                },
                "__s": {
                    "1": "string_data",
                    "16": "string1",
                    "2": "string_ptr",
                    "3": "str1"
                },
                "__s_00": {
                    "1": "popped_type",
                    "12": "string2",
                    "2": "popped_string",
                    "3": "str2",
                    "4": "input_string"
                },
                "__s_01": {
                    "1": "joined_strings",
                    "14": "combined_string",
                    "2": "merged_string",
                    "3": "combined_str",
                    "6": "concatenated_string"
                },
                "lVar2": {
                    "1": "struct_addr",
                    "2": "ptr",
                    "3": "data_pointer",
                    "4": "ptr1",
                    "5": "struct_address"
                },
                "param_1": {
                    "1": "data_address",
                    "14": "input",
                    "2": "data"
                },
                "sVar5": {
                    "1": "size1",
                    "10": "length1",
                    "2": "first_string_length",
                    "4": "input_string_length",
                    "6": "len1"
                },
                "sVar6": {
                    "1": "entry_string_length",
                    "10": "length2",
                    "2": "string_length",
                    "6": "len2"
                },
                "stab_pop_type": {
                    "1": "pop_type_from_data_structure"
                },
                "stab_push_string": {
                    "1": "add_to_data_structure"
                },
                "uVar1": {
                    "1": "byte_value",
                    "2": "char_value",
                    "3": "flag",
                    "5": "character"
                },
                "uVar3": {
                    "1": "input_val",
                    "2": "var3",
                    "3": "long_value",
                    "8": "value"
                },
                "uVar4": {
                    "1": "return_val",
                    "12": "return_value",
                    "15": "result",
                    "2": "status"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 combine_strings_0010a77a(long input)\n\n{\n  undefined character;\n  long struct_address;\n  char *string1;\n  undefined8 value;\n  undefined4 result;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  \n  struct_address = *(long *)(input + 0x60);\n  if ((struct_address != 0) && (string1 = *(char **)(struct_address + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(struct_address + 0x18);\n    character = *(undefined *)(struct_address + 0x1c);\n    value = *(undefined8 *)(struct_address + 0x10);\n    string2 = (char *)pop_type_from_data_structure();\n    length1 = strlen(string2);\n    length2 = strlen(string1);\n    combined_string = (char *)xmalloc(length1 + 2 + length2);\n    sprintf(combined_string,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = add_to_data_structure(input,combined_string,value,character,result);\n    if ((char)result != '\\0') {\n      free(combined_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "combine_strings_0010a77a",
            "entrypoint": "0x0010a77a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a77a": "combine_strings_0010a77a",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "combined_string",
                "lVar2": "struct_address",
                "param_1": "input",
                "sVar5": "length1",
                "sVar6": "length2",
                "stab_pop_type": "pop_type_from_data_structure",
                "stab_push_string": "add_to_data_structure",
                "uVar1": "character",
                "uVar3": "value",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a83e": {
            "additional_data": {
                "(long *)(param_1 + 0x60)": {
                    "1": "ptr1"
                },
                "*(char **)(ptr1 + 0x38)": {
                    "1": "ptr2"
                },
                "*(long *)(ptr1 + 0x10)": {
                    "1": "ptr_value"
                },
                "FUN_00109b2f": {
                    "1": "process_sub_function2"
                },
                "FUN_0010a69a": {
                    "1": "process_sub_function1"
                },
                "FUN_0010a83e": {
                    "1": "process_data_type",
                    "13": "process_data",
                    "2": "process_struct",
                    "4": "process_struct_type"
                },
                "__s": {
                    "1": "data",
                    "13": "string1",
                    "2": "string_value",
                    "3": "string_1",
                    "6": "str1"
                },
                "__s_00": {
                    "1": "new_str_ptr",
                    "13": "string2",
                    "3": "formatted_string",
                    "6": "str2"
                },
                "cVar3": {
                    "1": "flag",
                    "13": "char_value",
                    "2": "char1",
                    "3": "char_val",
                    "4": "char_var",
                    "5": "char_flag"
                },
                "free": {
                    "1": "free_memory",
                    "2": "release_memory"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input1",
                    "3": "data",
                    "4": "data_ptr",
                    "5": "arg1"
                },
                "param_2": {
                    "1": "ptr2",
                    "2": "input2",
                    "3": "param_ptr",
                    "4": "param",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "param_value_size",
                    "2": "param_3",
                    "3": "param3",
                    "4": "size1",
                    "5": "arg3",
                    "7": "size"
                },
                "param_4": {
                    "1": "input_4",
                    "10": "flag",
                    "3": "param_4",
                    "4": "flag1",
                    "5": "arg4"
                },
                "param_5": {
                    "1": "data",
                    "3": "param_5",
                    "4": "size2",
                    "5": "mask"
                },
                "param_6": {
                    "1": "is_flag_set",
                    "2": "flag_1",
                    "5": "flag2",
                    "6": "flag1"
                },
                "param_7": {
                    "1": "check_param",
                    "2": "cond2",
                    "5": "flag3",
                    "6": "flag2"
                },
                "result": {
                    "1": "output"
                },
                "sVar2": {
                    "1": "data_length",
                    "18": "string_length",
                    "4": "str_length",
                    "6": "length"
                },
                "sprintf": {
                    "1": "write_to_string",
                    "3": "format_string"
                },
                "stab_pop_type": {
                    "4": "pop_type"
                },
                "stab_start_struct_type_lto_priv_0": {
                    "1": "start_struct_type_lto_private",
                    "2": "start_struct"
                },
                "strlen": {
                    "1": "calculate_string_length",
                    "2": "get_string_length"
                },
                "uVar1": {
                    "1": "return_code",
                    "2": "return_value",
                    "28": "result"
                },
                "xmalloc": {
                    "4": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_0010a69a",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4\nprocess_data_0010a83e(long arg1,undefined8 arg2,ulong size,undefined flag,ulong arg5,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t string_length;\n  char char_value;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    string1 = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n    string1 = (char *)pop_type();\n    arg5 = arg5 & 0xffffffff;\n    size = size & 0xffffffff;\n  }\n  result = start_struct(arg1,arg2,size,flag,arg5);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = get_string_length(string1);\n      string2 = (char *)allocate_memory(string_length + 3);\n      format_string(string2,\"~%%%s\",string1);\n      release_memory(string1);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(arg1 + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(arg1 + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)allocate_memory(0x14);\n      format_string(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(arg1 + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(arg1 + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010a83e",
            "entrypoint": "0x0010a83e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "__s": "string1",
                "__s_00": "string2",
                "cVar3": "char_value",
                "free": "release_memory",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "arg5",
                "param_6": "flag1",
                "param_7": "flag2",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_start_struct_type_lto_priv_0": "start_struct",
                "strlen": "get_string_length",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a94e": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_binary_info"
                },
                "FUN_0010a94e": {
                    "1": "combine_strings",
                    "2": "build_string",
                    "9": "generate_formatted_string"
                },
                "F_ExtractData": {
                    "1": "extract_data"
                },
                "__s": {
                    "1": "param_d",
                    "2": "string3",
                    "3": "type_string",
                    "6": "type"
                },
                "_s": {
                    "1": "type"
                },
                "abort": {
                    "1": "stop_execution"
                },
                "cVar1": {
                    "1": "config_flag",
                    "2": "char1",
                    "3": "flag_char",
                    "8": "flag_value"
                },
                "free": {
                    "1": "release_memory",
                    "2": "deallocate_memory"
                },
                "lVar2": {
                    "1": "binary_offset_value",
                    "2": "var2",
                    "4": "ptr"
                },
                "param_1": {
                    "1": "binary_offset",
                    "2": "input_data",
                    "6": "arg1"
                },
                "param_2": {
                    "1": "param_string1",
                    "10": "string1",
                    "2": "name",
                    "3": "input1",
                    "5": "input_string1"
                },
                "param_3": {
                    "1": "type",
                    "10": "string2",
                    "2": "param_b",
                    "3": "input2",
                    "5": "input_string2"
                },
                "param_4": {
                    "1": "param_c",
                    "19": "flag",
                    "8": "option"
                },
                "pcVar7": {
                    "1": "buffer",
                    "2": "formatted_str",
                    "3": "dynamic_string",
                    "8": "formatted_string"
                },
                "pcVar9": {
                    "1": "indicator",
                    "15": "flag_string",
                    "2": "option",
                    "3": "option_str"
                },
                "pcVar9_temp": {
                    "1": "empty_string"
                },
                "sVar3": {
                    "1": "config_len",
                    "11": "length1",
                    "2": "str_len1",
                    "6": "len1"
                },
                "sVar4": {
                    "1": "network_address_length",
                    "11": "length2",
                    "2": "str_len2",
                    "6": "len2"
                },
                "sVar5": {
                    "1": "len_type_pop",
                    "2": "str_len3",
                    "6": "len3",
                    "9": "length3"
                },
                "sVar6": {
                    "1": "length_input_string2",
                    "2": "str_len4",
                    "6": "len4",
                    "9": "length4"
                },
                "sprintf": {
                    "3": "format_string"
                },
                "stab_pop_type": {
                    "3": "pop_type"
                },
                "uVar8": {
                    "1": "output",
                    "11": "return_value",
                    "17": "result",
                    "2": "return_val"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 generate_formatted_string_0010a94e(long arg1,char *string1,char *string2,int flag)\n\n{\n  char flag;\n  long ptr;\n  char *type;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *formatted_string;\n  undefined8 result;\n  char *flag_string;\n  \n  flag = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n  type = (char *)pop_type();\n  formatted_string = *(char **)(*(long *)(arg1 + 0x60) + 0x20);\n  if (formatted_string == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length1 = strlen(formatted_string);\n    length2 = strlen(string1);\n    length3 = strlen(type);\n    length4 = strlen(string2);\n    formatted_string = (char *)allocate_memory(length1 + 10 + length2 + length3 + length4);\n    if (flag == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((flag != 2) && (flag_string = \"\", flag != 0)) {\n                    \n        end_program();\n      }\n    }\n    format_string(formatted_string,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(arg1 + 0x60) + 0x20),string1,flag_string,\n            type,string2,*(long *)(arg1 + 0x60));\n    deallocate_memory(*(void **)(*(long *)(arg1 + 0x60) + 0x20));\n    ptr = *(long *)(arg1 + 0x60);\n    *(char **)(ptr + 0x20) = formatted_string;\n    if (flag != '\\0') {\n      *(undefined *)(ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "current_name": "generate_formatted_string_0010a94e",
            "entrypoint": "0x0010a94e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "__s": "type",
                "_s": "type",
                "abort": "end_program",
                "cVar1": "flag",
                "free": "deallocate_memory",
                "lVar2": "ptr",
                "param_1": "arg1",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "flag",
                "pcVar7": "formatted_string",
                "pcVar9": "flag_string",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "uVar8": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010aa53": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_pointer_to_data"
                },
                "FUN_0010aa53": {
                    "1": "modify_and_store_string",
                    "2": "create_log_entry",
                    "4": "format_and_store_data",
                    "8": "process_data"
                },
                "__s": {
                    "1": "type_str",
                    "11": "string",
                    "2": "string_data",
                    "3": "string_ptr",
                    "6": "str"
                },
                "abort": {
                    "1": "abort"
                },
                "cVar1": {
                    "1": "stored_indicator",
                    "2": "type_flag",
                    "3": "temp_char",
                    "7": "flag_value"
                },
                "cVar3": {
                    "1": "status_flag",
                    "2": "type_char",
                    "5": "flag_value"
                },
                "free": {
                    "1": "free_memory"
                },
                "lVar2": {
                    "1": "data",
                    "2": "log_struct",
                    "3": "struct_pointer",
                    "4": "data_pointer",
                    "6": "struct_ptr"
                },
                "lVar7": {
                    "1": "new_data_struct",
                    "13": "realloc_ptr",
                    "2": "ptr2",
                    "3": "reallocated_pointer"
                },
                "param_1": {
                    "1": "input_buffer",
                    "2": "data",
                    "3": "data_struct",
                    "4": "data_structure",
                    "5": "input"
                },
                "param_2": {
                    "1": "identifier",
                    "16": "value",
                    "2": "data_value",
                    "3": "param_value",
                    "4": "data"
                },
                "param_3": {
                    "1": "flag_char",
                    "15": "flag",
                    "3": "character",
                    "6": "char_value"
                },
                "param_4": {
                    "1": "log_status",
                    "3": "int_value",
                    "5": "type",
                    "7": "flag"
                },
                "pcVar6": {
                    "1": "allocated_string",
                    "2": "new_string_ptr",
                    "3": "formatted_str",
                    "4": "new_str",
                    "5": "formatted_string",
                    "9": "new_string"
                },
                "sVar5": {
                    "1": "message_length",
                    "16": "string_length",
                    "2": "str_len",
                    "5": "str_length"
                },
                "sprintf": {
                    "1": "format_str"
                },
                "stab_pop_type": {
                    "1": "pop_type"
                },
                "uVar10": {
                    "1": "loop_counter",
                    "2": "counter2",
                    "5": "last_index"
                },
                "uVar4": {
                    "1": "temp_counter",
                    "2": "index",
                    "3": "loop_index",
                    "5": "counter",
                    "7": "loop_counter"
                },
                "uVar8": {
                    "1": "is_successful",
                    "19": "result",
                    "3": "success",
                    "6": "return_value"
                },
                "uVar9": {
                    "1": "counter1",
                    "11": "index",
                    "2": "counter",
                    "3": "loop_index",
                    "6": "loop_counter"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_001042b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_data_0010aa53(long input,undefined8 value,char flag,int flag)\n\n{\n  char flag_value;\n  long struct_ptr;\n  char flag_value;\n  uint loop_counter;\n  char *string;\n  size_t string_length;\n  char *new_string;\n  long realloc_ptr;\n  undefined8 result;\n  ulong index;\n  ulong last_index;\n  \n  flag_value = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  string = (char *)pop_type();\n  string_length = strlen(string);\n  new_string = (char *)allocate_memory(string_length + 0x19);\n  *new_string = flag + '0';\n  if (flag == 1) {\n    flag_value = '1';\n  }\n  else {\n    flag_value = '0';\n    if ((flag != 2) && (flag_value = '2', flag != 0)) {\n                    \n      abort();\n    }\n  }\n  new_string[1] = flag_value;\n  format_str(new_string + 2,\"%ld,%s;\",value);\n  free_memory(string);\n  struct_ptr = *(long *)(input + 0x60);\n  result = 0;\n  if ((struct_ptr != 0) && (*(long *)(struct_ptr + 0x20) != 0)) {\n    struct_ptr = *(long *)(struct_ptr + 0x28);\n    last_index = 0;\n    if (struct_ptr != 0) {\n      loop_counter = 0;\n      do {\n        index = (ulong)loop_counter;\n        last_index = (ulong)loop_counter;\n        loop_counter = loop_counter + 1;\n      } while (*(long *)(struct_ptr + index * 8) != 0);\n    }\n    realloc_ptr = reallocate_memory(struct_ptr,(ulong)((int)last_index + 2) << 3);\n    *(char **)(realloc_ptr + last_index * 8) = new_string;\n    *(undefined8 *)(realloc_ptr + (ulong)((int)last_index + 1) * 8) = 0;\n    struct_ptr = *(long *)(input + 0x60);\n    *(long *)(struct_ptr + 0x28) = realloc_ptr;\n    if (flag_value != '\\0') {\n      *(undefined *)(struct_ptr + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010aa53",
            "entrypoint": "0x0010aa53",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "__s": "string",
                "cVar1": "flag_value",
                "cVar3": "flag_value",
                "free": "free_memory",
                "lVar2": "struct_ptr",
                "lVar7": "realloc_ptr",
                "param_1": "input",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "flag",
                "pcVar6": "new_string",
                "sVar5": "string_length",
                "sprintf": "format_str",
                "stab_pop_type": "pop_type",
                "uVar10": "last_index",
                "uVar4": "loop_counter",
                "uVar8": "result",
                "uVar9": "index",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ab4d": {
            "additional_data": {
                "FUN_0010ab4d": {
                    "1": "append_string_to_data_structure",
                    "2": "append_string_to_field",
                    "3": "append_string_with_separator"
                },
                "auVar3": {
                    "1": "result_val",
                    "2": "result1",
                    "20": "result",
                    "4": "return_value"
                },
                "auVar7": {
                    "1": "modified_flag_and_return_value",
                    "2": "result2",
                    "4": "return_val",
                    "7": "return_value"
                },
                "lVar2": {
                    "1": "data_pointer_copy",
                    "2": "data_ptr_copy",
                    "3": "ptr2"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "base_address",
                    "3": "data_structure",
                    "5": "input_struct"
                },
                "param_2": {
                    "1": "source",
                    "2": "new_string",
                    "5": "input_string",
                    "9": "string_to_append"
                },
                "param_3": {
                    "1": "data1",
                    "2": "unused_param_1",
                    "5": "param3",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "user_param",
                    "2": "unused_param_2",
                    "5": "param4",
                    "8": "param_4"
                },
                "pcVar5": {
                    "1": "dest_string",
                    "11": "existing_string",
                    "3": "dynamic_string"
                },
                "sVar4": {
                    "1": "parameter_length",
                    "2": "message_length",
                    "3": "input_string_length",
                    "4": "string_length",
                    "5": "input_length"
                },
                "sVar6": {
                    "1": "buffer_length",
                    "2": "str_length2",
                    "9": "existing_string_length"
                },
                "uVar1": {
                    "1": "data_length",
                    "2": "obj_value",
                    "3": "ptr1"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104270",
                "FUN_001042b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] append_string_to_variable_0010ab4d(long input_struct,char *string_to_append,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong ptr1;\n  long ptr2;\n  undefined result [16];\n  size_t input_length;\n  char *existing_string;\n  size_t existing_string_length;\n  undefined return_value [16];\n  \n  ptr1 = *(ulong *)(input_struct + 0x60);\n  if ((ptr1 != 0) && (*(long *)(ptr1 + 0x20) != 0)) {\n    existing_string = *(char **)(ptr1 + 0x30);\n    input_length = strlen(string_to_append);\n    if (existing_string == (char *)0x0) {\n      existing_string = (char *)xmalloc(input_length + 3);\n      *existing_string = '\\0';\n    }\n    else {\n      existing_string_length = strlen(existing_string);\n      existing_string = (char *)xrealloc(existing_string,input_length + 4 + existing_string_length);\n    }\n    input_length = strlen(existing_string);\n    sprintf(existing_string + input_length,\"%s::\",string_to_append);\n    ptr2 = *(long *)(input_struct + 0x60);\n    *(char **)(ptr2 + 0x30) = existing_string;\n    return_value._1_7_ = (undefined7)((ulong)ptr2 >> 8);\n    return_value[0] = 1;\n    return_value._8_8_ = param_4;\n    return return_value;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = ptr1;\n  return result << 0x40;\n}\n\n",
            "current_name": "append_string_to_variable_0010ab4d",
            "entrypoint": "0x0010ab4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ab4d": "append_string_to_variable_0010ab4d",
                "auVar3": "result",
                "auVar7": "return_value",
                "lVar2": "ptr2",
                "param_1": "input_struct",
                "param_2": "string_to_append",
                "pcVar5": "existing_string",
                "sVar4": "input_length",
                "sVar6": "existing_string_length",
                "uVar1": "ptr1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010abdd": {
            "additional_data": {
                "FUN_0010abdd": {
                    "1": "update_data_and_return",
                    "2": "update_stab_entry",
                    "6": "update_data",
                    "7": "process_data"
                },
                "__s": {
                    "1": "str4",
                    "2": "ptr4",
                    "4": "str3",
                    "6": "str_ptr3"
                },
                "bVar3": {
                    "1": "temp_byte",
                    "2": "byte1",
                    "3": "byte_value",
                    "4": "byte_val",
                    "6": "byte_var"
                },
                "cVar10": {
                    "1": "character1",
                    "16": "char1",
                    "2": "char_val1",
                    "7": "char_var1"
                },
                "cVar11": {
                    "1": "temp_char2",
                    "16": "char2",
                    "2": "char_val2",
                    "9": "char_var2"
                },
                "lVar1": {
                    "1": "data_length",
                    "2": "struct_ptr",
                    "3": "ptr",
                    "4": "var1",
                    "7": "ptr1"
                },
                "local_52": {
                    "1": "byte_value",
                    "2": "local_var",
                    "3": "byte_var",
                    "9": "local_byte"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "param1",
                    "5": "data_ptr",
                    "6": "data",
                    "7": "input_param"
                },
                "param_2": {
                    "1": "param_2",
                    "15": "string1",
                    "2": "input_string",
                    "4": "str1",
                    "5": "string_param"
                },
                "param_3": {
                    "1": "input_length",
                    "2": "size_param",
                    "6": "length",
                    "7": "num1"
                },
                "param_4": {
                    "1": "char_param_1",
                    "2": "flag1_param",
                    "24": "flag1"
                },
                "param_5": {
                    "1": "char_param_2",
                    "2": "flag2_param",
                    "24": "flag2"
                },
                "param_6": {
                    "1": "is_bitfield_stab",
                    "2": "flag3_param",
                    "24": "flag3"
                },
                "param_7": {
                    "1": "numeric_param",
                    "2": "param7_value",
                    "3": "param7",
                    "6": "num2",
                    "7": "value"
                },
                "param_8": {
                    "1": "param_8",
                    "2": "flag4_param",
                    "23": "flag4"
                },
                "pcVar2": {
                    "1": "str2",
                    "2": "ptr2",
                    "3": "string1",
                    "4": "str1",
                    "7": "str_ptr1"
                },
                "pcVar4": {
                    "1": "ptr2",
                    "2": "ptr3",
                    "3": "string2",
                    "4": "str2",
                    "7": "str_ptr2"
                },
                "sVar5": {
                    "1": "size1",
                    "10": "len1",
                    "7": "length1"
                },
                "sVar6": {
                    "1": "len_string_var",
                    "10": "len2",
                    "7": "length2"
                },
                "sVar7": {
                    "1": "len_string1",
                    "10": "len3",
                    "7": "length3"
                },
                "sVar8": {
                    "1": "var4",
                    "10": "len4",
                    "7": "length4"
                },
                "uVar9": {
                    "26": "result",
                    "4": "return_value"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010adf2",
                "FUN_0010add5"
            ],
            "code": "\nundefined8\nprocess_data_0010abdd(long input_param,char *string1,uint num1,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr1;\n  char *str_ptr1;\n  byte byte_var;\n  char *str_ptr2;\n  char *str_ptr3;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte local_byte;\n  \n  str_ptr3 = (char *)0x0;\n  local_byte = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n  str_ptr2 = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    byte_var = 1;\n    if (local_byte == 0) {\n      byte_var = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n    }\n    local_byte = byte_var & 1;\n    str_ptr3 = (char *)stab_pop_type(input_param);\n  }\n  ptr1 = *(long *)(input_param + 0x60);\n  if ((ptr1 == 0) || (str_ptr1 = *(char **)(ptr1 + 0x30), str_ptr1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < num1) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(str_ptr1);\n    len2 = strlen(str_ptr2);\n    len3 = strlen(string1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(str_ptr3);\n    }\n    result = xrealloc(str_ptr1,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(ptr1 + 0x30) = result;\n    str_ptr1 = *(char **)(*(long *)(input_param + 0x60) + 0x30);\n    len1 = strlen(str_ptr1);\n    sprintf(str_ptr1 + len1,\"%s:%s;%c%c%c\",str_ptr2,string1,(ulong)(byte)(0x32 - (char)num1),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,len1);\n    free(str_ptr2);\n    if (flag4 != '\\0') {\n      str_ptr2 = *(char **)(*(long *)(input_param + 0x60) + 0x30);\n      len1 = strlen(str_ptr2);\n      sprintf(str_ptr2 + len1,\"%ld;%s;\",value,str_ptr3);\n      free(str_ptr3);\n    }\n    if (local_byte != 0) {\n      *(undefined *)(*(long *)(input_param + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010abdd",
            "entrypoint": "0x0010abdd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "__s": "str_ptr3",
                "bVar3": "byte_var",
                "cVar10": "char1",
                "cVar11": "char2",
                "lVar1": "ptr1",
                "local_52": "local_byte",
                "param_1": "input_param",
                "param_2": "string1",
                "param_3": "num1",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "pcVar2": "str_ptr1",
                "pcVar4": "str_ptr2",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010add5": {
            "additional_data": {
                "FUN_0010add5": {
                    "1": "initialize_stab_class_method_variable",
                    "17": "initialize_stab_class_method_var",
                    "2": "initialize_class_method_variable",
                    "6": "initialize_class_method_var"
                },
                "fun_0010abdd": {
                    "1": "process_data"
                },
                "param_1": {
                    "1": "data",
                    "2": "class_id",
                    "3": "count",
                    "4": "input_value"
                },
                "param_2": {
                    "1": "str",
                    "2": "class_name",
                    "4": "input_string",
                    "6": "string"
                },
                "param_3": {
                    "1": "flags",
                    "2": "input_count",
                    "3": "length",
                    "5": "count"
                },
                "param_4": {
                    "1": "c1",
                    "14": "flag1",
                    "2": "char_param_1",
                    "3": "flag_1"
                },
                "param_5": {
                    "1": "is_flag2",
                    "14": "flag2",
                    "2": "char_param_2",
                    "3": "flag_2"
                },
                "param_6": {
                    "1": "option_3",
                    "14": "flag3",
                    "2": "parameter6",
                    "3": "flag_3"
                },
                "stab_class_method_var": {
                    "1": "initialize_class_method_variables"
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_stab_class_method_var_0010add5(void)\n\n{\n  initialize_class_method_variables();\n  return;\n}\n\n",
            "current_name": "initialize_stab_class_method_var_0010add5",
            "entrypoint": "0x0010add5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010add5": "initialize_stab_class_method_var_0010add5",
                "stab_class_method_var": "initialize_class_method_variables"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010adf2": {
            "additional_data": {
                "FUN_0010abdd": {
                    "1": "process_parameters",
                    "2": "process_data"
                },
                "FUN_0010adf2": {
                    "1": "initialize_objects",
                    "16": "initialize_stab_class_method_var",
                    "3": "initialize_class_method_variable",
                    "6": "initialize_class_method_var"
                },
                "param_1": {
                    "1": "input_value_1",
                    "2": "data",
                    "3": "count",
                    "8": "length"
                },
                "param_2": {
                    "1": "file_data",
                    "2": "string_value",
                    "3": "str",
                    "8": "string"
                },
                "param_3": {
                    "1": "file_length",
                    "2": "value",
                    "3": "size",
                    "4": "flags"
                },
                "param_4": {
                    "1": "char_param_1",
                    "12": "flag1",
                    "2": "char_value_1",
                    "3": "char1"
                },
                "param_5": {
                    "1": "is_static",
                    "12": "flag2",
                    "2": "char_value_2",
                    "3": "char2"
                },
                "param_6": {
                    "1": "option_3",
                    "12": "flag3",
                    "2": "char_value_3",
                    "3": "char3"
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_stab_class_method_var_0010adf2(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "current_name": "initialize_stab_class_method_var_0010adf2",
            "entrypoint": "0x0010adf2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010adf2": "initialize_stab_class_method_var_0010adf2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ae0e": {
            "additional_data": {
                "FUN_0010ae0e": {
                    "1": "create_final_string",
                    "2": "combine_strings",
                    "4": "process_data"
                },
                "__ptr": {
                    "1": "void_pointer",
                    "2": "ptr2",
                    "3": "ptr3",
                    "5": "temp_ptr"
                },
                "lVar1": {
                    "1": "param1_value",
                    "12": "struct_ptr",
                    "2": "data_struct",
                    "3": "ptr1"
                },
                "lVar2": {
                    "1": "second_address_var",
                    "3": "ptr2",
                    "6": "ptr"
                },
                "lVar8": {
                    "1": "new_str_length",
                    "2": "output_length",
                    "4": "result_length",
                    "7": "total_length",
                    "9": "total_len"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_param",
                    "20": "input",
                    "3": "data"
                },
                "pcVar3": {
                    "1": "temp_char",
                    "2": "sub_string",
                    "3": "string_pointer",
                    "4": "str_ptr"
                },
                "pcVar6": {
                    "1": "str2",
                    "2": "concatenated_string",
                    "4": "result",
                    "7": "result_string"
                },
                "sVar4": {
                    "1": "input_str_len",
                    "3": "length_1",
                    "4": "len_str1",
                    "8": "length1",
                    "9": "len1"
                },
                "sVar5": {
                    "1": "str_len2",
                    "3": "length_2",
                    "4": "len_str2",
                    "8": "length2",
                    "9": "len2"
                },
                "uVar10": {
                    "1": "sub_str_count",
                    "2": "loop_counter",
                    "4": "num_strings",
                    "5": "index",
                    "7": "count"
                },
                "uVar7": {
                    "1": "status",
                    "13": "return_value",
                    "4": "return_val"
                },
                "uVar9": {
                    "1": "count_var",
                    "14": "counter",
                    "2": "i",
                    "5": "count",
                    "6": "index"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_001047c0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_data_0010ae0e(long input)\n\n{\n  long struct_ptr;\n  long ptr;\n  void *temp_ptr;\n  char *str_ptr;\n  size_t len1;\n  size_t len2;\n  char *result_string;\n  undefined8 return_value;\n  long total_len;\n  uint counter;\n  ulong count;\n  \n  return_value = 0;\n  struct_ptr = *(long *)(input + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (result_string = *(char **)(struct_ptr + 0x20), result_string != (char *)0x0)) {\n    len1 = strlen(*(char **)(struct_ptr + 8));\n    len2 = strlen(result_string);\n    ptr = *(long *)(struct_ptr + 0x28);\n    if (ptr == 0) {\n      total_len = len1 + len2 + 10;\n      count = 0;\n    }\n    else {\n      total_len = len1 + len2 + 0x1e;\n      count = 0;\n      while( true ) {\n        result_string = *(char **)(ptr + count * 8);\n        if (result_string == (char *)0x0) break;\n        len1 = strlen(result_string);\n        count = (ulong)((int)count + 1);\n        total_len = total_len + len1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(struct_ptr + 0x30));\n      total_len = total_len + len1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(struct_ptr + 0x38));\n      total_len = total_len + len1;\n    }\n    result_string = (char *)xmalloc(total_len);\n    struct_ptr = *(long *)(input + 0x60);\n    strcpy(result_string,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      counter = 0;\n      len1 = strlen(result_string);\n      sprintf(result_string + len1,\"!%u,\",count);\n      while( true ) {\n        struct_ptr = *(long *)(input + 0x60);\n        count = (ulong)counter;\n        temp_ptr = *(void **)(struct_ptr + 0x28);\n        str_ptr = *(char **)((long)temp_ptr + count * 8);\n        if (str_ptr == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(result_string,str_ptr);\n        free(*(void **)(*(long *)(struct_ptr + 0x28) + count * 8));\n      }\n      free(temp_ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input + 0x60);\n    strcat(result_string,*(char **)(struct_ptr + 0x20));\n    free(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(result_string,*(char **)(struct_ptr + 0x30));\n      free(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(result_string);\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined2 *)(result_string + len1) = 0x3b;\n    str_ptr = *(char **)(struct_ptr + 0x38);\n    if (str_ptr != (char *)0x0) {\n      strcpy(result_string + len1 + 1,str_ptr);\n      free(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    struct_ptr = *(long *)(input + 0x60);\n    *(char **)(struct_ptr + 8) = result_string;\n    return_value = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010ae0e",
            "entrypoint": "0x0010ae0e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ae0e": "process_data_0010ae0e",
                "__ptr": "temp_ptr",
                "lVar1": "struct_ptr",
                "lVar2": "ptr",
                "lVar8": "total_len",
                "param_1": "input",
                "pcVar3": "str_ptr",
                "pcVar6": "result_string",
                "sVar4": "len1",
                "sVar5": "len2",
                "uVar10": "count",
                "uVar7": "return_value",
                "uVar9": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010afd5": {
            "additional_data": {
                "*": {
                    "1": "dereference"
                },
                "FUN_00109a0b": {
                    "1": "initialize_node"
                },
                "FUN_0010afd5": {
                    "1": "find_string_in_structure",
                    "2": "find_string_in_nested_structures",
                    "3": "find_string_in_data_structure",
                    "4": "find_string_in_binary",
                    "5": "find_matching_string"
                },
                "FUN_00113e23": {
                    "1": "debug_make_indirect_type_isra_0"
                },
                "__s2": {
                    "1": "compare_string",
                    "2": "str2",
                    "3": "search_string_copy",
                    "4": "input_string",
                    "5": "target_string",
                    "9": "search_string"
                },
                "auVar8": {
                    "1": "output_array",
                    "18": "return_value",
                    "7": "result"
                },
                "bVar7": {
                    "1": "byte_value",
                    "2": "loop_index",
                    "4": "temp_byte",
                    "7": "counter"
                },
                "debug_make_indirect_type_isra_0": {
                    "1": "debug_indirect_type_function",
                    "2": "create_indirect_type"
                },
                "free": {
                    "1": "free_memory",
                    "3": "deallocate_memory"
                },
                "iVar1": {
                    "1": "string_comparison_result",
                    "12": "comparison_result",
                    "3": "result"
                },
                "lVar4": {
                    "1": "temp_offset",
                    "2": "temp",
                    "4": "temp_long",
                    "7": "value"
                },
                "param_1": {
                    "1": "list_start",
                    "2": "entry_list",
                    "4": "list",
                    "6": "linked_list"
                },
                "param_2": {
                    "1": "input_value",
                    "2": "struct_address",
                    "3": "context",
                    "4": "data"
                },
                "param_3": {
                    "1": "string_pointer",
                    "13": "string",
                    "3": "str",
                    "4": "string_ptr",
                    "5": "search_string"
                },
                "param_4": {
                    "1": "source_length",
                    "2": "len",
                    "4": "search_string_length",
                    "9": "string_length"
                },
                "param_5": {
                    "1": "default_type",
                    "2": "value",
                    "4": "default_value",
                    "7": "type"
                },
                "param_6": {
                    "1": "initial_value",
                    "2": "default_value",
                    "3": "debug_value",
                    "5": "result"
                },
                "puVar2": {
                    "1": "current",
                    "13": "current_node",
                    "2": "current_element",
                    "4": "current_item"
                },
                "puVar5": {
                    "1": "ptr2",
                    "10": "inner_node",
                    "2": "sub_node",
                    "3": "inner_item"
                },
                "puVar6": {
                    "1": "loop_variable_5",
                    "2": "pointer",
                    "4": "ptr",
                    "7": "temp_ptr"
                },
                "savestring": {
                    "2": "create_string_copy"
                },
                "strcmp": {
                    "5": "compare_strings"
                },
                "uVar3": {
                    "1": "loop_variable_2",
                    "2": "type",
                    "3": "temp",
                    "4": "temp_var",
                    "7": "indirect_type",
                    "9": "temp_value"
                },
                "xmalloc": {
                    "5": "allocate_memory"
                }
            },
            "called": [
                "FUN_00109a0b",
                "FUN_001048f0",
                "FUN_00113e23",
                "FUN_00104470",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559"
            ],
            "code": "\nundefined  [16]\nfind_matching_string_0010afd5(undefined8 *linked_list,long data,undefined8 string,undefined4 length,\n            undefined4 type,undefined8 result)\n\n{\n  int comparison_result;\n  char *search_string;\n  undefined8 *current_node;\n  undefined8 temp_value;\n  long value;\n  undefined8 *inner_node;\n  undefined4 *temp_ptr;\n  byte counter;\n  undefined return_value [16];\n  \n  counter = 0;\n  search_string = (char *)create_string_copy(string,length);\n  for (linked_list = (undefined8 *)*linked_list; linked_list != (undefined8 *)0x0;\n      linked_list = (undefined8 *)*linked_list) {\n    for (current_node = (undefined8 *)linked_list[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (inner_node = *(undefined8 **)(undefined8 *)current_node[2]; inner_node != (undefined8 *)0x0;\n            inner_node = (undefined8 *)*inner_node) {\n          if ((*(int *)((long)inner_node + 0x14) == 1) && (*(char *)inner_node[1] == *search_string)) {\n            comparison_result = compare_strings((char *)inner_node[1],search_string);\n            if (comparison_result == 0) {\n              value = inner_node[4];\n              if (value == 0) goto LAB_0010b05b;\n              deallocate_memory(search_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(data + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)allocate_memory(0x28);\n      temp_value = *(undefined8 *)(data + 0x1a0);\n      temp_ptr = (undefined4 *)((long)current_node + 0x14);\n      for (value = 5; value != 0; value = value + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = type;\n      *current_node = temp_value;\n      current_node[1] = search_string;\n      temp_value = create_indirect_type(current_node + 3,search_string);\n      *(undefined8 **)(data + 0x1a0) = current_node;\n      current_node[4] = temp_value;\nLAB_0010b0e7:\n      value = current_node[4];\nLAB_0010b0eb:\n      return_value._8_8_ = result;\n      return_value._0_8_ = value;\n      return return_value;\n    }\n    if (*(char *)current_node[1] == *search_string) {\n      comparison_result = compare_strings((char *)current_node[1],search_string);\n      if (comparison_result == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = type;\n        }\n        deallocate_memory(search_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "current_name": "find_matching_string_0010afd5",
            "entrypoint": "0x0010afd5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010afd5": "find_matching_string_0010afd5",
                "__s2": "search_string",
                "auVar8": "return_value",
                "bVar7": "counter",
                "debug_make_indirect_type_isra_0": "create_indirect_type",
                "free": "deallocate_memory",
                "iVar1": "comparison_result",
                "lVar4": "value",
                "param_1": "linked_list",
                "param_2": "data",
                "param_3": "string",
                "param_4": "length",
                "param_5": "type",
                "param_6": "result",
                "puVar2": "current_node",
                "puVar5": "inner_node",
                "puVar6": "temp_ptr",
                "savestring": "create_string_copy",
                "strcmp": "compare_strings",
                "uVar3": "temp_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b0fa": {
            "additional_data": {
                "F 0010b0fa": {
                    "1": "extract_debug_type"
                },
                "FUN_0010b0fa": {
                    "1": "parse_debug_type"
                },
                "__ptr": {
                    "1": "ptr2",
                    "15": "pointer",
                    "2": "var_ptr"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "abort": {
                    "1": "terminate_execution"
                },
                "caseD_18": {
                    "1": "case_field"
                },
                "caseD_19": {
                    "1": "case_field"
                },
                "create_debug_type_00113ce0": {
                    "1": "create_debug_type"
                },
                "dcgettext": {
                    "1": "get_text_translation"
                },
                "debug_get_fields_isra_0": {
                    "1": "get_fields"
                },
                "debug_get_type_name_constprop_0": {
                    "1": "get_type_name"
                },
                "debug_make_float_type_isra_0": {
                    "1": "make_float_type"
                },
                "debug_make_function_type_isra_0": {
                    "1": "make_function_type"
                },
                "debug_make_int_type_isra_0": {
                    "1": "make_int_type"
                },
                "debug_make_pointer_type_isra_0": {
                    "1": "make_pointer_type"
                },
                "debug_make_reference_type_isra_0": {
                    "1": "make_reference_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "make_const_type"
                },
                "debug_make_void_type_isra_0": {
                    "1": "make_void_type"
                },
                "debug_make_volatile_type_isra_0": {
                    "1": "make_volatile_type"
                },
                "demangle_arglist_0010b6ea": {
                    "1": "demangle_arglist"
                },
                "extract_real_type_00113b1e": {
                    "1": "extract_real_type"
                },
                "find_matching_string_0010afd5": {
                    "1": "find_matching_string"
                },
                "fprintf": {
                    "1": "print_formatted_output"
                },
                "free": {
                    "1": "release_memory"
                },
                "get_debug_type_00113d3a": {
                    "1": "get_debug_type"
                },
                "get_return_value_001129f4": {
                    "1": "get_return_value"
                },
                "iVar2": {
                    "1": "var_i_var2",
                    "2": "index",
                    "23": "comparison_result",
                    "3": "value2"
                },
                "initialize_data_structure_00112904": {
                    "1": "initialize_data_structure"
                },
                "initialize_debug_type_00113b4a": {
                    "1": "initialize_debug_type"
                },
                "initialize_debug_type_00113b71": {
                    "1": "initialize_debug_type"
                },
                "initialize_debug_type_00113df2": {
                    "1": "initialize_debug_type"
                },
                "initialize_debug_type_00113e17": {
                    "1": "initialize_debug_type"
                },
                "initialize_type_00113cb9": {
                    "1": "initialize_type"
                },
                "lVar7": {
                    "1": "field_length",
                    "2": "length2",
                    "3": "type_length",
                    "4": "result_length",
                    "5": "result_value"
                },
                "local_40": {
                    "1": "temp_array",
                    "2": "temp_buffer",
                    "3": "buffer",
                    "8": "local_buffer",
                    "9": "local_array"
                },
                "param_1": {
                    "1": "input1",
                    "11": "param1",
                    "2": "param_1",
                    "7": "input_param_1",
                    "9": "input_param1"
                },
                "param_2": {
                    "1": "input2",
                    "11": "param2",
                    "2": "param_2",
                    "7": "input_param_2",
                    "9": "input_param2"
                },
                "param_3": {
                    "1": "input_param3",
                    "11": "input_array",
                    "7": "param3"
                },
                "param_4": {
                    "1": "default_value",
                    "14": "input_value",
                    "3": "input_param4",
                    "8": "param4"
                },
                "param_5": {
                    "1": "input_param_5",
                    "19": "error_flag",
                    "2": "input_param5",
                    "8": "param5"
                },
                "pcVar3": {
                    "1": "debug_type",
                    "17": "result",
                    "4": "result_string"
                },
                "pcVar4": {
                    "1": "string_result"
                },
                "pcVar5": {
                    "1": "var_pc2",
                    "11": "error_message",
                    "2": "string_result",
                    "3": "debug_type",
                    "4": "error_string"
                },
                "plVar4": {
                    "1": "field_list",
                    "2": "pointer_array",
                    "5": "long_array"
                },
                "sVar6": {
                    "1": "str_length",
                    "2": "length",
                    "24": "string_length"
                },
                "stab_demangle_v3_arglist": {
                    "1": "demangle_argument_list"
                },
                "stab_find_tagged_type": {
                    "1": "find_tagged_type"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strlen": {
                    "1": "string_length"
                },
                "strncmp": {
                    "1": "compare_strings_n"
                },
                "switchD_0010b158_caseD_18": {
                    "1": "default_case_1"
                },
                "switchD_0010b2de_caseD_19": {
                    "1": "default_case_2"
                },
                "uVar1": {
                    "1": "data",
                    "2": "array_size",
                    "3": "array_element",
                    "9": "array_length"
                },
                "update_debug_type_00113dfe": {
                    "1": "update_debug_type"
                }
            },
            "called": [
                "FUN_001040a0",
                "FUN_00104270",
                "FUN_00113e17",
                "FUN_001129f4",
                "FUN_00113cb9",
                "FUN_00113b1e",
                "FUN_00113d3a",
                "FUN_00104050",
                "FUN_00113df2",
                "FUN_00113b4a",
                "FUN_001040e0",
                "FUN_0010b0fa",
                "FUN_00113dfe",
                "FUN_001048f0",
                "FUN_00112904",
                "FUN_00113b71",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_0010b6ea",
                "FUN_001044b0",
                "FUN_00113ce0",
                "FUN_0010afd5"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "code": "\n\n\nchar * improve_debug_type_0010b0fa(undefined8 param1,undefined8 param2,uint *input_array,long input_value,\n                   undefined *error_flag)\n\n{\n  uint array_length;\n  int comparison_result;\n  char *result;\n  long *long_array;\n  char *error_message;\n  size_t string_length;\n  void *pointer;\n  long result_value;\n  undefined local_array [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  while( true ) {\n    array_length = *input_array;\n    if (0x29 < array_length) break;\n    if (0x17 < array_length) {\n      switch(array_length) {\n      case 0x18:\n        goto default_case_1;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)improve_debug_type_0010b0fa(param1,param2,*(undefined8 *)(input_array + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*input_array) {\n          case 0x19:\n            goto default_case_2;\n          case 0x1a:\n            result = (char *)make_volatile_type(result);\n            return result;\n          case 0x1b:\n            result = (char *)debug_make_const_type_isra_0(result);\n            return result;\n          default:\n                    \n            terminate_execution();\n          case 0x22:\n            result = (char *)make_pointer_type(result);\n            return result;\n          case 0x23:\n            result = (char *)make_reference_type(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,input_array,0x14,local_array);\n        if (result == (char *)0x0) {\n          error_message = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison_result = compare_strings(result,\"signed char\");\n        if (comparison_result == 0) {\nLAB_0010b406:\n          error_message = (char *)make_int_type(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"bool\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_const_type(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"char\");\n        if (comparison_result == 0) goto LAB_0010b406;\n        comparison_result = compare_strings(result,\"double\");\n        if ((comparison_result == 0) || (comparison_result = compare_strings(result,\"long double\"), comparison_result == 0)) {\n          error_message = (char *)make_float_type(8);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"float\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_float_type(4);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"__float128\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_float_type(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"unsigned char\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_int_type(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"int\");\n        if (comparison_result == 0) {\nLAB_0010b504:\n          error_message = (char *)make_int_type(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"unsigned int\");\n        if (comparison_result == 0) {\nLAB_0010b528:\n          error_message = (char *)make_int_type(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"long\");\n        if (comparison_result == 0) goto LAB_0010b504;\n        comparison_result = compare_strings(result,\"unsigned long\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = compare_strings(result,\"__int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_int_type(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_int_type(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"short\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_int_type(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"unsigned short\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_int_type(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"void\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_void_type();\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"wchar_t\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = compare_strings(result,\"long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_int_type(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"unsigned long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)make_int_type(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = compare_strings(result,\"...\");\n        if (comparison_result == 0) {\n          error_message = \"Unexpected demangled varargs\\n\";\n          if (error_flag == (undefined *)0x0) goto LAB_0010b6a9;\n          *error_flag = 1;\n        }\n        else {\n          error_message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          error_message = (char *)get_text_translation(0,error_message,5);\n          print_formatted_output(standard_error,error_message);\n        }\n        error_message = (char *)0x0;\nLAB_0010b6c6:\n        release_memory(result);\n        return error_message;\n      case 0x29:\n        if (*(long *)(input_array + 4) == 0) {\n          pointer = (void *)make_void_type();\n        }\n        else {\n          pointer = (void *)improve_debug_type_0010b0fa(param1,param2,*(long *)(input_array + 4),0,0);\n        }\n        if (pointer != (void *)0x0) {\n          result_value = demangle_argument_list(param1,param2,*(undefined8 *)(input_array + 6),local_array);\n          if (result_value != 0) {\n            result = (char *)make_function_type(pointer,result_value,local_array[0]);\n            return result;\n          }\n          release_memory(pointer);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (array_length != 1) {\n      if (array_length == 4) {\n        result = (char *)cplus_demangle_print(3,input_array,0x14,local_array);\n        error_message = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          string_length = string_length(result);\n          error_message = (char *)find_tagged_type(param1,param2,result,string_length & 0xffffffff,9);\n          release_memory(result);\n          return error_message;\n        }\nLAB_0010b3d3:\n        error_message = (char *)get_text_translation(0,error_message,5);\n        print_formatted_output(standard_error,error_message);\n        return result;\n      }\n      if (array_length == 0) {\n        if ((input_value == 0) ||\n           (long_array = (long *)get_fields(input_value), long_array == (long *)0x0))\n        goto default_case_1;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    input_value = improve_debug_type_0010b0fa(param1,param2,*(undefined8 *)(input_array + 4),input_value,0);\n    if (input_value == 0) goto LAB_0010b38c;\n    input_array = *(uint **)(input_array + 6);\n    error_flag = (undefined *)0x0;\n  }\n  result = (char *)get_text_translation(0,\"Unrecognized demangle component %d\\n\",5);\n  print_formatted_output(standard_error,result,(ulong)array_length);\nLAB_0010b38c:\n  result = (char *)0x0;\ndefault_case_2:\n  return result;\nLAB_0010b1a5:\n  if (*long_array == 0) {\ndefault_case_1:\n    result = (char *)find_tagged_type\n                               (param1,param2,*(undefined8 *)(input_array + 4),input_array[6],0);\n    return result;\n  }\n  result = *(char **)(*long_array + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  error_message = (char *)get_type_name(result);\n  if (error_message != (char *)0x0) {\n    string_length = string_length(error_message);\n    if ((input_array[6] == (uint)string_length) &&\n       (comparison_result = compare_strings_n(error_message,*(char **)(input_array + 4),(long)(int)input_array[6]), comparison_result == 0)) {\n      return result;\n    }\n  }\n  long_array = long_array + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "current_name": "improve_debug_type_0010b0fa",
            "entrypoint": "0x0010b0fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b0fa": "improve_debug_type_0010b0fa",
                "__ptr": "pointer",
                "_stderr": "standard_error",
                "abort": "terminate_execution",
                "caseD_18": "case_field",
                "caseD_19": "case_field",
                "dcgettext": "get_text_translation",
                "debug_get_fields_isra_0": "get_fields",
                "debug_get_type_name_constprop_0": "get_type_name",
                "debug_make_float_type_isra_0": "make_float_type",
                "debug_make_function_type_isra_0": "make_function_type",
                "debug_make_int_type_isra_0": "make_int_type",
                "debug_make_pointer_type_isra_0": "make_pointer_type",
                "debug_make_reference_type_isra_0": "make_reference_type",
                "debug_make_type_constprop_0": "make_const_type",
                "debug_make_void_type_isra_0": "make_void_type",
                "debug_make_volatile_type_isra_0": "make_volatile_type",
                "fprintf": "print_formatted_output",
                "free": "release_memory",
                "iVar2": "comparison_result",
                "lVar7": "result_value",
                "local_40": "local_array",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "input_array",
                "param_4": "input_value",
                "param_5": "error_flag",
                "pcVar3": "result",
                "pcVar5": "error_message",
                "plVar4": "long_array",
                "sVar6": "string_length",
                "stab_demangle_v3_arglist": "demangle_argument_list",
                "stab_find_tagged_type": "find_tagged_type",
                "strcmp": "compare_strings",
                "strlen": "string_length",
                "strncmp": "compare_strings_n",
                "switchD_0010b158_caseD_18": "default_case_1",
                "switchD_0010b2de_caseD_19": "default_case_2",
                "uVar1": "array_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b6ea": {
            "additional_data": {
                "FUN_0010b6ea": {
                    "1": "decode_arglist",
                    "2": "demangle_arg_list",
                    "3": "extract_arg_list",
                    "7": "demangle_v3_arglist",
                    "8": "demangle_arglist"
                },
                "__format": {
                    "1": "error_msg_format",
                    "21": "error_message",
                    "6": "error_msg"
                },
                "__ptr": {
                    "1": "result_buffer",
                    "11": "result",
                    "2": "result_list",
                    "8": "result_array",
                    "9": "result_ptr"
                },
                "lVar1": {
                    "1": "demangled_length",
                    "2": "demangled_str",
                    "4": "demangled_result",
                    "6": "demangled_value",
                    "8": "demangled_arg"
                },
                "local_39": {
                    "1": "arg_buffer",
                    "3": "demangled_buffer",
                    "4": "temp_buffer",
                    "5": "buffer"
                },
                "param_1": {
                    "1": "context",
                    "25": "arg1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "arg_info",
                    "25": "arg2",
                    "4": "param2"
                },
                "param_3": {
                    "1": "arg_array",
                    "18": "arglist",
                    "2": "arglist_ptr",
                    "9": "arg_list"
                },
                "param_4": {
                    "1": "error_flag_ptr",
                    "15": "error_flag",
                    "2": "flag",
                    "8": "is_error"
                },
                "uVar2": {
                    "1": "counter",
                    "2": "num_args",
                    "3": "result_count",
                    "4": "num_elements",
                    "5": "arg_count",
                    "7": "index"
                },
                "uVar3": {
                    "1": "max_values",
                    "2": "max_elements",
                    "3": "array_size",
                    "4": "arg_capacity",
                    "6": "capacity"
                },
                "uVar4": {
                    "1": "index",
                    "2": "counter",
                    "3": "new_count",
                    "6": "new_index"
                }
            },
            "called": [
                "FUN_0010b0fa",
                "FUN_001048f0",
                "FUN_00104240",
                "FUN_001042b0",
                "FUN_001044b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result;\n  char *error_message;\n  long demangled_arg;\n  ulong index;\n  ulong capacity;\n  uint new_index;\n  char buffer [9];\n  \n  capacity = 10;\n  index = 0;\n  result = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangled_arg = stab_demangle_v3_arg(arg1,arg2,*(long *)(arglist + 4),0,buffer);\n    if (demangled_arg == 0) {\n      if (buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      new_index = (int)index + 1;\n      if ((uint)capacity <= new_index) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + index * 8) = demangled_arg;\n      index = (ulong)new_index;\n    }\n  }\n  *(undefined8 *)((long)result + index * 8) = 0;\n  return result;\n}\n\n",
            "current_name": "demangle_arglist_0010b6ea",
            "entrypoint": "0x0010b6ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "__format": "error_message",
                "__ptr": "result",
                "lVar1": "demangled_arg",
                "local_39": "buffer",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "uVar2": "index",
                "uVar3": "capacity",
                "uVar4": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b800": {
            "additional_data": {
                "FUN_0010b800": {
                    "1": "parse_integer_type",
                    "2": "parse_stab_int_type",
                    "3": "process_integer_type"
                },
                "auStack_8a": {
                    "1": "temp_array",
                    "2": "auxiliary_stack",
                    "3": "array",
                    "8": "stack_array"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "lVar4": {
                    "1": "temp_variable",
                    "2": "temp_value",
                    "3": "temp1",
                    "4": "temp",
                    "9": "value"
                },
                "lVar5": {
                    "1": "bit_shift",
                    "10": "bit_mask",
                    "2": "mask",
                    "4": "bitmask"
                },
                "local_8c": {
                    "1": "format_buffer",
                    "2": "output_buffer",
                    "3": "string_buffer",
                    "4": "format_string",
                    "5": "buffer",
                    "7": "output_string"
                },
                "non_fatal": {
                    "1": "handle_fatal_error"
                },
                "param_1": {
                    "1": "function_parameter",
                    "2": "input_address",
                    "27": "base_address"
                },
                "param_2": {
                    "2": "type_size",
                    "29": "size"
                },
                "param_3": {
                    "1": "is_flag_set",
                    "15": "flag",
                    "2": "is_decimal",
                    "3": "is_signed"
                },
                "plVar1": {
                    "1": "type_pointer",
                    "2": "ptr_to_value",
                    "4": "target_ptr",
                    "5": "ptr_to_long",
                    "7": "pointer"
                },
                "sVar3": {
                    "13": "string_length",
                    "3": "str_length",
                    "8": "length"
                },
                "stab_push_defined_type": {
                    "2": "push_defined_type"
                },
                "stab_push_string": {
                    "2": "push_string"
                },
                "uVar2": {
                    "2": "return_value",
                    "29": "result"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_integer_type_0010b800(long base_address,int size,char flag)\n\n{\n  long *pointer;\n  undefined8 result;\n  size_t string_length;\n  long value;\n  long bit_mask;\n  undefined2 output_string;\n  undefined4 unused_array [24];\n  \n  if (size - 1U < 8) {\n    value = base_address + 0xb8;\n    if (flag != '\\0') {\n      value = base_address + 0x78;\n    }\n    pointer = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *pointer;\n    if (value != 0) {\n      result = push_defined_type(base_address,value,size);\n      return result;\n    }\n    value = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = value + 1;\n    *pointer = value;\n    sprintf((char *)&output_string,\"%ld=r%ld;\",value,value);\n    if (flag == '\\0') {\n      bit_mask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      string_length = strlen((char *)&output_string);\n      sprintf((char *)((long)&output_string + string_length),\"%ld;%ld;\",-bit_mask,bit_mask + -1);\n    }\n    else {\n      string_length = strlen((char *)&output_string);\n      *(undefined2 *)((long)&output_string + string_length) = 0x3b30;\n      *(undefined *)((long)&output_string + string_length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&output_string + string_length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&output_string + string_length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = push_string(base_address,&output_string,value,1,size);\n  }\n  else {\n    result = get_error_message(0,\"stab_int_type: bad size %u\",5);\n    handle_non_fatal_error(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_integer_type_0010b800",
            "entrypoint": "0x0010b800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b800": "process_integer_type_0010b800",
                "auStack_8a": "unused_array",
                "dcgettext": "get_error_message",
                "lVar4": "value",
                "lVar5": "bit_mask",
                "local_8c": "output_string",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "pointer",
                "sVar3": "string_length",
                "stab_push_defined_type": "push_defined_type",
                "stab_push_string": "push_string",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b948": {
            "additional_data": {
                "FUN_0010b948": {
                    "1": "extract_type_information",
                    "2": "parse_and_push_type",
                    "7": "process_data"
                },
                "__ptr": {
                    "1": "popped_type",
                    "2": "type_ptr",
                    "3": "type_pointer",
                    "5": "ptr"
                },
                "cVar2": {
                    "1": "is_int_type_exist",
                    "11": "is_int_type",
                    "2": "is_type_int",
                    "3": "is_integer"
                },
                "lVar1": {
                    "1": "data_type_offset",
                    "2": "data_type",
                    "3": "type",
                    "4": "temp_var",
                    "5": "type_address"
                },
                "local_5a": {
                    "1": "buffer",
                    "14": "formatted_string",
                    "2": "string_value",
                    "4": "string_buffer",
                    "6": "output_string"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "input_data",
                    "4": "data",
                    "6": "base_address"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "type_index",
                    "4": "data_size",
                    "5": "count",
                    "8": "size"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stab_int_type_lto_priv_0": {
                    "1": "check_integer_type"
                },
                "stab_pop_type": {
                    "1": "pop_type_from_stack"
                },
                "stab_push_defined_type": {
                    "1": "push_defined_type_to_stack"
                },
                "stab_push_string": {
                    "1": "push_string_to_stack"
                },
                "uVar3": {
                    "1": "data_length",
                    "2": "size_u"
                },
                "uVar4": {
                    "1": "decremented_count",
                    "2": "count_minus_one"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_0010b800",
                "FUN_001048f0",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00109b2f"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010b948(long data_ptr,uint size)\n\n{\n  long type_address;\n  char is_int_type;\n  void *ptr;\n  ulong ulong_var;\n  uint count_minus_one;\n  char formatted_string [50];\n  \n  count_minus_one = size - 1;\n  ulong_var = (ulong)size;\n  if ((count_minus_one < 0x10) && (type_address = *(long *)(data_ptr + 0xf8 + (ulong)count_minus_one * 8), type_address != 0)) {\n    push_defined_type_to_stack(data_ptr,type_address,ulong_var);\n    return;\n  }\n  is_int_type = check_integer_type(data_ptr,4,0);\n  if (is_int_type != '\\0') {\n    ptr = (void *)pop_type_from_stack(data_ptr);\n    type_address = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = type_address + 1;\n    if (count_minus_one < 0x10) {\n      *(long *)(data_ptr + 0xf8 + (ulong)count_minus_one * 8) = type_address;\n    }\n    format_string(formatted_string,\"%ld=r%s;%u;0;\",type_address,ptr,ulong_var);\n    free(ptr);\n    push_string_to_stack(data_ptr,formatted_string,type_address,1,ulong_var);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0010b948",
            "entrypoint": "0x0010b948",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "__ptr": "ptr",
                "cVar2": "is_int_type",
                "lVar1": "type_address",
                "local_5a": "formatted_string",
                "param_1": "data_ptr",
                "param_2": "size",
                "sprintf": "format_string",
                "stab_int_type_lto_priv_0": "check_integer_type",
                "stab_pop_type": "pop_type_from_stack",
                "stab_push_defined_type": "push_defined_type_to_stack",
                "stab_push_string": "push_string_to_stack",
                "uVar3": "ulong_var",
                "uVar4": "count_minus_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ba08": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_param_1"
                },
                "FUN_0010ba08": {
                    "1": "process_field",
                    "13": "generate_warning_message",
                    "2": "build_warning_message"
                },
                "FUN_00119ed0": {
                    "1": "non_fatal"
                },
                "__s": {
                    "1": "field_type_string",
                    "10": "struct_name",
                    "2": "struct_type",
                    "3": "type_string",
                    "5": "type"
                },
                "__s_00": {
                    "1": "generated_string",
                    "2": "result_string",
                    "3": "new_string",
                    "6": "formatted_string"
                },
                "abort": {
                    "1": "terminate_execution"
                },
                "abort()": {
                    "1": "exit()"
                },
                "cVar1": {
                    "1": "is_flag_set",
                    "15": "flag",
                    "2": "flag_value",
                    "3": "flag_char"
                },
                "dcgettext": {
                    "1": "translate_message"
                },
                "dcgettext()": {
                    "1": "get_translated_string()"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "free()": {
                    "1": "deallocate_memory()"
                },
                "iVar2": {
                    "1": "field_length",
                    "2": "type_size",
                    "3": "int_value",
                    "4": "count",
                    "7": "struct_size"
                },
                "lVar3": {
                    "1": "temp",
                    "2": "long_value",
                    "3": "struct_ptr",
                    "5": "local_var"
                },
                "non_fatal": {
                    "1": "print_non_fatal_error"
                },
                "non_fatal()": {
                    "1": "handle_non_fatal_error()"
                },
                "param_1": {
                    "1": "pointer_array",
                    "2": "param_list",
                    "4": "param_array"
                },
                "param_2": {
                    "1": "field_key",
                    "29": "field_name"
                },
                "param_3": {
                    "1": "param_c",
                    "2": "field_size",
                    "4": "param3",
                    "7": "param_3",
                    "9": "param_value"
                },
                "param_4": {
                    "1": "unknown_size",
                    "14": "field_size",
                    "2": "param_4",
                    "6": "size"
                },
                "param_5": {
                    "1": "field_flag",
                    "11": "field_type",
                    "2": "flag_value",
                    "9": "flag"
                },
                "pcVar9": {
                    "1": "flag_text",
                    "13": "flag_string",
                    "2": "field_type_str"
                },
                "sVar4": {
                    "1": "input_length",
                    "2": "size1"
                },
                "sVar5": {
                    "1": "length_2",
                    "2": "length2",
                    "3": "field_name_size",
                    "4": "field_name_len",
                    "8": "field_name_length"
                },
                "sVar6": {
                    "1": "type_name_len",
                    "2": "size3"
                },
                "sprintf": {
                    "1": "format_message"
                },
                "sprintf()": {
                    "1": "format_string_to_buffer()"
                },
                "stab_pop_type": {
                    "1": "pop_type_from_stack"
                },
                "stab_pop_type()": {
                    "1": "pop_type_from_stack()"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "strlen()": {
                    "1": "get_string_length()"
                },
                "uVar7": {
                    "1": "gettext_message",
                    "10": "warning_message",
                    "2": "translation",
                    "3": "warning_string",
                    "4": "warning_msg",
                    "5": "message"
                },
                "uVar8": {
                    "1": "warning_result",
                    "11": "result",
                    "16": "return_value",
                    "3": "return_val"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                },
                "xmalloc()": {
                    "1": "allocate_memory()"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00104240",
                "FUN_00109b2f",
                "FUN_00119ed0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8\ngenerate_warning_message_0010ba08(undefined8 *param_array,char *field_name,undefined8 param_value,ulong field_size,int field_type)\n\n{\n  char flag;\n  int struct_size;\n  long local_var;\n  char *struct_name;\n  size_t param2_length;\n  size_t field_name_length;\n  size_t type_len;\n  char *formatted_string;\n  undefined8 warning_message;\n  undefined8 return_value;\n  char *flag_string;\n  \n  flag = *(char *)(param_array[0xc] + 0x1c);\n  struct_size = *(int *)(param_array[0xc] + 0x18);\n  struct_name = (char *)pop_type_from_stack();\n  if (*(char **)(param_array[0xc] + 0x20) == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    param2_length = get_string_length(*(char **)(param_array[0xc] + 0x20));\n    field_name_length = get_string_length(field_name);\n    type_len = get_string_length(struct_name);\n    formatted_string = (char *)allocate_memory(param2_length + 0x32 + field_name_length + type_len);\n    if (field_type == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((field_type != 2) && (flag_string = \"\", field_type != 0)) {\n                    \n        exit();\n      }\n    }\n    if ((field_size == 0) && (field_size = (ulong)(uint)(struct_size * 8), field_size == 0)) {\n      return_value = *(undefined8 *)*param_array;\n      warning_message = get_translated_string(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      report_warning(warning_message,return_value,field_name);\n    }\n    write_formatted_str(formatted_string,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(param_array[0xc] + 0x20),field_name,flag_string,struct_name,\n            param_value,field_size);\n    release_memory(*(void **)(param_array[0xc] + 0x20));\n    local_var = param_array[0xc];\n    *(char **)(local_var + 0x20) = formatted_string;\n    if (flag != '\\0') {\n      *(undefined *)(local_var + 0x1c) = 1;\n    }\n    return_value = CONCAT71((int7)((ulong)local_var >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "generate_warning_message_0010ba08",
            "entrypoint": "0x0010ba08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "__s": "struct_name",
                "__s_00": "formatted_string",
                "abort": "exit_program",
                "abort()": "exit()",
                "cVar1": "flag",
                "dcgettext": "get_translated_string",
                "free": "release_memory",
                "iVar2": "struct_size",
                "lVar3": "local_var",
                "non_fatal": "report_warning",
                "param_1": "param_array",
                "param_2": "field_name",
                "param_3": "param_value",
                "param_4": "field_size",
                "param_5": "field_type",
                "pcVar9": "flag_string",
                "sVar4": "param2_length",
                "sVar5": "field_name_length",
                "sVar6": "type_len",
                "sprintf": "write_formatted_str",
                "stab_pop_type": "pop_struct_name",
                "stab_pop_type()": "pop_type_from_stack()",
                "strlen": "get_string_length",
                "uVar7": "warning_message",
                "uVar8": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bb52": {
            "additional_data": {
                "FUN_0010bb52": {
                    "1": "create_hash_with_nulls",
                    "12": "create_hash_function",
                    "2": "create_hash_func"
                },
                "bfd_hash_allocate": {
                    "8": "allocate_hash"
                },
                "bfd_hash_newfunc": {
                    "1": "initialize_hash",
                    "2": "create_new_func"
                },
                "lVar1": {
                    "1": "hash_function",
                    "2": "hash",
                    "3": "hash_func_ptr",
                    "7": "new_hash",
                    "9": "hash_ptr"
                },
                "param_1": {
                    "1": "size_param",
                    "2": "hash",
                    "6": "hash_size",
                    "8": "input_value",
                    "9": "size"
                },
                "param_2": {
                    "1": "hash_param_1",
                    "10": "param_2",
                    "13": "param2",
                    "2": "allocation_size"
                },
                "param_3": {
                    "1": "data",
                    "11": "param_3",
                    "13": "param3"
                }
            },
            "called": [
                "FUN_00104450",
                "FUN_00104200"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long size,undefined8 param2,undefined8 param3)\n\n{\n  long hash_ptr;\n  \n  if (((size != 0) || (size = allocate_hash(param2,0x30), size != 0)) &&\n     (hash_ptr = create_new_func(size,param2,param3), hash_ptr != 0)) {\n    *(undefined8 *)(hash_ptr + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_ptr + 0x18) = 0;\n    *(undefined4 *)(hash_ptr + 0x28) = 0;\n    return hash_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_and_initialize_hash_0010bb52",
            "entrypoint": "0x0010bb52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "create_new_func",
                "lVar1": "hash_ptr",
                "param_1": "size",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bba1": {
            "additional_data": {
                "FUN_0010bba1": {
                    "1": "lookup_push_defined_type",
                    "14": "lookup_and_push_defined_type",
                    "2": "find_and_push_defined_type",
                    "4": "lookup_and_push_type"
                },
                "lVar1": {
                    "1": "entry_address",
                    "10": "hash_result",
                    "2": "hash_lookup_result",
                    "3": "lookup_result"
                },
                "param_1": {
                    "1": "binary",
                    "22": "hash_table",
                    "3": "symbol_table"
                },
                "param_2": {
                    "1": "hash_key",
                    "19": "key",
                    "2": "type"
                },
                "uVar2": {
                    "1": "stab_result",
                    "13": "push_result",
                    "16": "result"
                }
            },
            "called": [
                "FUN_00104560",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 lookup_and_push_defined_type_0010bba1(long hash_table,undefined8 key)\n\n{\n  long entry;\n  undefined8 result;\n  \n  entry = bfd_hash_lookup(hash_table + 0x1b8,key,0,0);\n  if ((entry != 0) && (0 < *(long *)(entry + 0x20))) {\n    result = stab_push_defined_type(hash_table,*(long *)(entry + 0x20),*(undefined4 *)(entry + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "lookup_and_push_defined_type_0010bba1",
            "entrypoint": "0x0010bba1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bba1": "lookup_and_push_defined_type_0010bba1",
                "lVar1": "entry",
                "param_1": "hash_table",
                "param_2": "key",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bbd3": {
            "additional_data": {
                "*param_1": {
                    "1": "struct_pointer"
                },
                "*param_2": {
                    "1": "filename"
                },
                "*pcVar6": {
                    "1": "temp_string"
                },
                "*puVar1": {
                    "1": "temp_pointer1"
                },
                "*puVar2": {
                    "1": "temp_pointer2"
                },
                "*puVar3": {
                    "1": "temp_pointer3"
                },
                "*puVar5": {
                    "1": "temp_pointer4"
                },
                "FUN_0010bbd3": {
                    "1": "initialize_file_info",
                    "2": "initialize_debug_data",
                    "26": "initialize_debug_info"
                },
                "auVar8": {
                    "1": "return_val",
                    "22": "return_value",
                    "7": "result"
                },
                "bVar7": {
                    "1": "temp_byte",
                    "14": "flag",
                    "2": "byte_value",
                    "6": "byte_var"
                },
                "lVar4": {
                    "1": "iteration",
                    "19": "loop_counter",
                    "2": "counter",
                    "3": "count"
                },
                "param_1": {
                    "1": "debug_info_array",
                    "2": "debug_data",
                    "22": "debug_info",
                    "4": "info"
                },
                "param_2": {
                    "1": "source_file_name",
                    "28": "filename"
                },
                "param_3": {
                    "1": "unused_param1",
                    "2": "arg1",
                    "22": "param3",
                    "3": "param_3"
                },
                "param_4": {
                    "1": "var4",
                    "2": "arg2",
                    "22": "param4",
                    "3": "param_4"
                },
                "pcVar6": {
                    "1": "file_name",
                    "2": "file_ptr",
                    "3": "temp_filename",
                    "6": "filename_ptr",
                    "8": "default_filename"
                },
                "puVar1": {
                    "1": "previous_info",
                    "2": "previous_debug_info",
                    "6": "prev_debug_info",
                    "7": "ptr1"
                },
                "puVar2": {
                    "1": "unit_memory",
                    "2": "units",
                    "7": "ptr2"
                },
                "puVar3": {
                    "1": "new_pointer2",
                    "2": "new_units",
                    "7": "ptr3"
                },
                "puVar5": {
                    "1": "info_ptr",
                    "2": "current_pointer",
                    "3": "ptr4",
                    "4": "ptr5"
                },
                "undefined": {
                    "1": "result"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104300",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\nresult  [16] initialize_debug_info_0010bbd3(long *debug_info,char *filename,result8 param3,result8 param4)\n\n{\n  result8 *ptr1;\n  result4 *ptr2;\n  result4 *ptr3;\n  long loop_counter;\n  result4 *ptr5;\n  char *default_filename;\n  byte flag;\n  result return_value [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  ptr2 = (result4 *)allocate_memory(0x18);\n  ptr5 = ptr2;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr5 = 0;\n    ptr5 = ptr5 + (ulong)flag * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = default_filename;\n  ptr3 = (result4 *)allocate_memory(0x18);\n  debug_info[2] = (long)ptr2;\n  ptr5 = ptr3;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr5 = 0;\n    ptr5 = ptr5 + (ulong)flag * -2 + 1;\n  }\n  ptr1 = (result8 *)debug_info[1];\n  *(result4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (result8 *)0x0) {\n    if (*debug_info != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debug_info = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debug_info[1] = (long)ptr3;\n  debug_info[5] = 0;\n  *(result (*) [16])(debug_info + 3) = ZEXT816(0);\n  return_value._8_8_ = param4;\n  return_value._0_8_ = 1;\n  return return_value;\n}\n\n",
            "current_name": "initialize_debug_info_0010bbd3",
            "entrypoint": "0x0010bbd3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "loop_counter",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar6": "default_filename",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "puVar5": "ptr5",
                "undefined": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bc80": {
            "additional_data": {
                "FUN_0010bc80": {
                    "1": "record_function_debug",
                    "20": "debug_record_function",
                    "9": "record_debug_function"
                },
                "auVar8": {
                    "1": "return_val",
                    "10": "result",
                    "15": "return_value"
                },
                "bVar7": {
                    "1": "temp_byte",
                    "15": "flag",
                    "2": "byte_value",
                    "3": "zero"
                },
                "lVar4": {
                    "1": "namespace_entry",
                    "3": "temp_var",
                    "7": "index",
                    "9": "result"
                },
                "param_1": {
                    "1": "input1",
                    "2": "function_data",
                    "3": "param_1",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "input2",
                    "24": "filename",
                    "4": "file_name"
                },
                "param_3": {
                    "1": "namespace_flag",
                    "11": "line_number",
                    "5": "size",
                    "6": "record_size"
                },
                "param_4": {
                    "1": "input4",
                    "2": "debug_flags",
                    "3": "flags",
                    "4": "record_type",
                    "8": "flag"
                },
                "param_5": {
                    "1": "unknown_param1",
                    "15": "param_5",
                    "2": "arg5",
                    "4": "param5"
                },
                "param_6": {
                    "1": "arg_2",
                    "13": "param_6",
                    "2": "arg6",
                    "4": "param6",
                    "6": "result"
                },
                "pcVar6": {
                    "1": "filename_copy",
                    "3": "empty_string",
                    "6": "filename_ptr",
                    "9": "default_filename"
                },
                "plVar2": {
                    "1": "ptr2",
                    "2": "debug_data",
                    "3": "record_ptr",
                    "5": "debug_record",
                    "9": "debug_info"
                },
                "puVar3": {
                    "1": "alloc_ptr",
                    "2": "debug_array_ptr",
                    "3": "debug_data"
                },
                "puVar5": {
                    "1": "debug_entry",
                    "2": "loop_ptr",
                    "3": "debug_ptr",
                    "5": "ptr"
                },
                "uVar1": {
                    "1": "localization_string",
                    "16": "error_message",
                    "2": "result",
                    "3": "error_msg"
                }
            },
            "called": [
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long arg1,char *filename,long line_number,uint flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *debug_info;\n  undefined4 *debug_data;\n  long result;\n  undefined4 *ptr;\n  char *default_filename;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (line_number != 0) {\n    if (*(long *)(arg1 + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      debug_info = (long *)xmalloc(0x18);\n      *debug_info = line_number;\n      *(undefined (*) [16])(debug_info + 1) = ZEXT816(0);\n      debug_data = (undefined4 *)xmalloc(0x30);\n      *(long **)(arg1 + 0x18) = debug_info;\n      debug_info[2] = (long)debug_data;\n      ptr = debug_data;\n      for (result = 0xc; result != 0; result = result + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(arg1 + 0x20) = debug_data;\n      result = *(long *)(arg1 + 0x10);\n      *(undefined8 *)(debug_data + 6) = param_5;\n      *(undefined8 *)(debug_data + 8) = 0xffffffffffffffff;\n      result = debug_add_to_namespace_constprop_0(result + 0x10,default_filename,3,(flag & 0xff) + 1);\n      if (result != 0) {\n        *(long **)(result + 0x20) = debug_info;\n        error_message = CONCAT71((int7)((ulong)result >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_record_function_0010bc80",
            "entrypoint": "0x0010bc80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "result",
                "param_1": "arg1",
                "param_2": "filename",
                "param_3": "line_number",
                "param_4": "flag",
                "pcVar6": "default_filename",
                "plVar2": "debug_info",
                "puVar3": "debug_data",
                "puVar5": "ptr",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bd62": {
            "additional_data": {
                "FUN_0010bd62": {
                    "1": "add_record_to_function",
                    "14": "record_parameter",
                    "3": "record_debug_parameter",
                    "7": "record_parameter_debug"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "bVar8": {
                    "1": "zero_flag",
                    "2": "byte_var",
                    "3": "counter",
                    "5": "is_zero",
                    "8": "flag"
                },
                "lVar5": {
                    "1": "function_ptr",
                    "12": "loop_counter",
                    "2": "temp_var",
                    "5": "temp_value"
                },
                "param_1": {
                    "1": "function_info_ptr",
                    "2": "function_data",
                    "3": "function",
                    "5": "function_address",
                    "6": "function_ptr",
                    "9": "function_info"
                },
                "param_2": {
                    "1": "param_value_1",
                    "2": "param_ptr",
                    "3": "param1",
                    "4": "param_size"
                },
                "param_3": {
                    "1": "record_ptr",
                    "2": "param_length",
                    "3": "param3",
                    "4": "param_count"
                },
                "param_4": {
                    "1": "param3_value",
                    "11": "param_type",
                    "2": "parameter3",
                    "3": "param3",
                    "4": "param4"
                },
                "param_5": {
                    "1": "param4_value",
                    "2": "parameter4",
                    "3": "debug_info",
                    "4": "param5",
                    "5": "param_value"
                },
                "puVar1": {
                    "1": "last_node",
                    "2": "current",
                    "3": "current_pointer",
                    "6": "current_node",
                    "7": "current_ptr"
                },
                "puVar3": {
                    "1": "ptr2",
                    "10": "new_record",
                    "2": "new_record_ptr",
                    "4": "allocated_memory"
                },
                "puVar4": {
                    "1": "curr_node",
                    "2": "temp_node",
                    "3": "next_node",
                    "6": "temp_ptr"
                },
                "puVar6": {
                    "1": "last_node_ptr",
                    "3": "previous_node",
                    "5": "last_node",
                    "8": "last_ptr"
                },
                "puVar7": {
                    "1": "loop_ptr",
                    "2": "new_record_ptr",
                    "3": "temp_record"
                },
                "uVar2": {
                    "1": "debug_str",
                    "25": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_info,long param_size,long param_count,undefined4 param_type,undefined8 param_value)\n\n{\n  undefined8 *current_ptr;\n  undefined8 error_message;\n  undefined4 *new_record;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  undefined8 *last_ptr;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (param_size == 0) {\n    return 0;\n  }\n  if (param_count != 0) {\n    if ((*(long *)(function_info + 8) != 0) && (*(long *)(function_info + 0x18) != 0)) {\n      new_record = (undefined4 *)xmalloc(0x28);\n      temp_ptr = new_record;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n      }\n      loop_counter = *(long *)(function_info + 0x18);\n      *(long *)(new_record + 2) = param_size;\n      *(long *)(new_record + 4) = param_count;\n      new_record[6] = param_type;\n      current_ptr = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(new_record + 8) = param_value;\n      last_ptr = (undefined8 *)(loop_counter + 8);\n      while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n        last_ptr = temp_ptr;\n        current_ptr = (undefined8 *)*temp_ptr;\n      }\n      *last_ptr = new_record;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(error_stream,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "current_name": "record_parameter_0010bd62",
            "entrypoint": "0x0010bd62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "_stderr": "error_stream",
                "bVar8": "flag",
                "lVar5": "loop_counter",
                "param_1": "function_info",
                "param_2": "param_size",
                "param_3": "param_count",
                "param_4": "param_type",
                "param_5": "param_value",
                "puVar1": "current_ptr",
                "puVar3": "new_record",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "temp_ptr",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be1a": {
            "additional_data": {
                "FUN_0010be1a": {
                    "1": "end_function",
                    "11": "debug_end_function",
                    "2": "end_debugging_function",
                    "5": "end_current_function",
                    "8": "end_function_debugging"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "auVar4": {
                    "1": "return_result",
                    "12": "return_value",
                    "3": "result"
                },
                "lVar1": {
                    "1": "block",
                    "13": "current_block",
                    "2": "block_ptr",
                    "4": "current_function",
                    "6": "block_info"
                },
                "param_1": {
                    "1": "function_state",
                    "12": "function_info",
                    "3": "function_context",
                    "4": "function_data",
                    "5": "function_ptr"
                },
                "param_2": {
                    "1": "new_end_address",
                    "2": "new_return_address",
                    "3": "return_value",
                    "4": "new_function_ptr"
                },
                "param_3": {
                    "1": "unused_1",
                    "12": "unused_param",
                    "3": "unused"
                },
                "param_4": {
                    "1": "unused_2",
                    "2": "debug_message",
                    "4": "result",
                    "6": "return_value"
                },
                "pcVar3": {
                    "1": "error_message_text",
                    "10": "error_string",
                    "12": "error_message",
                    "2": "error_message_string",
                    "3": "error_msg"
                },
                "uVar2": {
                    "1": "translation",
                    "10": "error_message",
                    "2": "localized_error_message",
                    "4": "error_msg"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_info,undefined8 new_function_ptr,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined return_value [16];\n  \n  if (((*(long *)(function_info + 8) == 0) || (current_block = *(long *)(function_info + 0x20), current_block == 0)) ||\n     (*(long *)(function_info + 0x18) == 0)) {\n    error_message = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = new_function_ptr;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_info + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_message = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(standard_error,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010be86:\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_end_function_0010be1a",
            "entrypoint": "0x0010be1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "_stderr": "standard_error",
                "auVar4": "return_value",
                "lVar1": "current_block",
                "param_1": "function_info",
                "param_2": "new_function_ptr",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be88": {
            "additional_data": {
                "FUN_0010be88": {
                    "1": "start_block_debug",
                    "12": "start_block_debugging",
                    "7": "debug_start_block"
                },
                "_stderr": {
                    "1": "file_stream"
                },
                "auVar9": {
                    "1": "return_val",
                    "14": "return_value",
                    "2": "return_value_struct",
                    "3": "output",
                    "4": "result"
                },
                "bVar8": {
                    "1": "byte_var",
                    "2": "zero",
                    "3": "loop_index",
                    "4": "loop_counter",
                    "5": "counter",
                    "6": "flag"
                },
                "lVar5": {
                    "1": "temp_val",
                    "10": "block_address",
                    "2": "current_block",
                    "3": "temp_value"
                },
                "param_1": {
                    "1": "block_identifier",
                    "10": "block_ptr",
                    "3": "block",
                    "4": "block_data",
                    "5": "block_pointer"
                },
                "param_2": {
                    "1": "start_block",
                    "2": "start_addr",
                    "3": "debugger",
                    "4": "current_block",
                    "7": "param2"
                },
                "param_3": {
                    "1": "param_b",
                    "2": "param_3",
                    "3": "unused_param1",
                    "5": "unused_param",
                    "8": "param3"
                },
                "param_4": {
                    "1": "param_c",
                    "3": "result",
                    "5": "param4",
                    "7": "return_value"
                },
                "puVar1": {
                    "1": "next_block_ptr",
                    "2": "current",
                    "3": "current_block",
                    "4": "current_pointer",
                    "6": "current_ptr"
                },
                "puVar3": {
                    "1": "alloc_ptr",
                    "15": "new_block",
                    "2": "block",
                    "3": "new_block_ptr",
                    "5": "allocated_memory"
                },
                "puVar4": {
                    "1": "ptr2",
                    "2": "next_ptr",
                    "3": "current_block",
                    "4": "next_block",
                    "7": "temp_ptr"
                },
                "puVar6": {
                    "1": "current_block",
                    "3": "last_block_ptr",
                    "4": "last_pointer",
                    "7": "last_block",
                    "8": "last_ptr"
                },
                "puVar7": {
                    "1": "loop_ptr",
                    "3": "temp_memory",
                    "6": "temp_block"
                },
                "uVar2": {
                    "1": "error_msg",
                    "19": "result",
                    "2": "success_flag",
                    "3": "error_message",
                    "4": "success"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] start_block_debugging_0010be88(long block_ptr,undefined8 param2,undefined8 param3,undefined8 return_value)\n\n{\n  undefined8 *current_ptr;\n  undefined8 result;\n  undefined4 *new_block;\n  undefined8 *temp_ptr;\n  long block_address;\n  undefined8 *last_ptr;\n  undefined4 *temp_block;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if ((*(long *)(block_ptr + 8) == 0) || (*(long *)(block_ptr + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(file_stream,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    new_block = (undefined4 *)xmalloc(0x30);\n    temp_block = new_block;\n    for (block_address = 0xc; block_address != 0; block_address = block_address + -1) {\n      *temp_block = 0;\n      temp_block = temp_block + (ulong)flag * -2 + 1;\n    }\n    block_address = *(long *)(block_ptr + 0x20);\n    *(undefined8 *)(new_block + 6) = param2;\n    *(undefined8 *)(new_block + 8) = 0xffffffffffffffff;\n    *(long *)(new_block + 2) = block_address;\n    current_ptr = *(undefined8 **)(block_address + 0x10);\n    last_ptr = (undefined8 *)(block_address + 0x10);\n    while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n      last_ptr = temp_ptr;\n      current_ptr = (undefined8 *)*temp_ptr;\n    }\n    *last_ptr = new_block;\n    result = 1;\n    *(undefined4 **)(block_ptr + 0x20) = new_block;\n  }\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "start_block_debugging_0010be88",
            "entrypoint": "0x0010be88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be88": "start_block_debugging_0010be88",
                "_stderr": "file_stream",
                "auVar9": "return_value",
                "bVar8": "flag",
                "lVar5": "block_address",
                "param_1": "block_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "return_value",
                "puVar1": "current_ptr",
                "puVar3": "new_block",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "temp_block",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf20": {
            "additional_data": {
                "FUN_0010bf20": {
                    "1": "block_debugger",
                    "10": "debug_end_block",
                    "3": "close_debug_block",
                    "5": "end_debug_block",
                    "6": "end_block"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "auVar4": {
                    "1": "return_val",
                    "2": "return_value_struct",
                    "3": "result",
                    "6": "return_value"
                },
                "lVar1": {
                    "1": "top_level_block",
                    "22": "current_block",
                    "8": "current_block_ptr"
                },
                "param_1": {
                    "1": "block",
                    "2": "block_info",
                    "20": "block_ptr",
                    "3": "block_pointer"
                },
                "param_2": {
                    "1": "block_id",
                    "2": "new_end_address",
                    "4": "debug_msg"
                },
                "param_3": {
                    "1": "unknown_arg",
                    "15": "unused_param",
                    "2": "unused_param3"
                },
                "param_4": {
                    "1": "return_val",
                    "11": "return_value",
                    "2": "unused2",
                    "5": "result"
                },
                "pcVar3": {
                    "1": "error_message_text",
                    "13": "error_message",
                    "2": "err_msg",
                    "6": "error_msg",
                    "7": "error_string"
                },
                "uVar2": {
                    "1": "return_val",
                    "2": "localized_error_msg",
                    "3": "translation",
                    "8": "error_message"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 debug_msg,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined return_value [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = debug_msg;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010bf84:\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_end_block_0010bf20",
            "entrypoint": "0x0010bf20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "_stderr": "stderr",
                "auVar4": "return_value",
                "lVar1": "current_block",
                "param_1": "block_ptr",
                "param_2": "debug_msg",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf86": {
            "additional_data": {
                "FUN_0010bf86": {
                    "1": "record_debug_line_information",
                    "2": "record_line_debug",
                    "3": "update_record_line",
                    "5": "record_line",
                    "6": "update_debug_record_line",
                    "7": "record_debug_line"
                },
                "_stderr": {
                    "1": "error_stream",
                    "2": "stderr"
                },
                "bVar7": {
                    "1": "counter",
                    "22": "flag"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "lVar5": {
                    "1": "loop_index",
                    "3": "index",
                    "4": "i",
                    "5": "count",
                    "6": "counter"
                },
                "param_1": {
                    "1": "data",
                    "2": "debug_data",
                    "5": "record_ptr",
                    "6": "unit_ptr"
                },
                "param_2": {
                    "1": "record_line_ptr",
                    "11": "line_number",
                    "2": "line",
                    "3": "line_ptr"
                },
                "param_3": {
                    "1": "line",
                    "2": "line_ptr",
                    "3": "source_file",
                    "7": "unit"
                },
                "puVar2": {
                    "1": "record_array",
                    "2": "current_unit_ptr",
                    "4": "current_record",
                    "8": "current_unit"
                },
                "puVar4": {
                    "1": "new_record_entry",
                    "12": "new_record",
                    "2": "new_debug_record",
                    "3": "allocated_memory",
                    "5": "new_record_ptr"
                },
                "puVar6": {
                    "1": "record_ptr",
                    "2": "current_record_ptr",
                    "3": "ptr"
                },
                "uVar1": {
                    "11": "result",
                    "15": "error_message",
                    "4": "message"
                },
                "uVar3": {
                    "1": "array_index",
                    "2": "counter",
                    "23": "index",
                    "3": "count"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 record_debug_line_0010bf86(long unit_ptr,undefined8 line_number,undefined8 unit)\n\n{\n  undefined8 error_message;\n  undefined8 *current_unit;\n  ulong index;\n  undefined4 *new_record;\n  long counter;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(unit_ptr + 8) == 0) {\n    error_message = get_error_message(0,\"debug_record_line: no current unit\",5);\n    print_error_message(stderr,\"%s\\n\",error_message);\n    error_message = 0;\n  }\n  else {\n    counter = *(long *)(unit_ptr + 0x28);\n    if ((counter != 0) && (*(long *)(counter + 8) == *(long *)(unit_ptr + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(counter + 0x10 + index * 8) == -1) {\n          current_unit = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(counter + 0x10 + (long)current_unit * 8) = line_number;\n          *(undefined8 *)(counter + 0x60 + (long)current_unit * 8) = unit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    new_record = (undefined4 *)allocate_memory(0xb0);\n    temp_ptr = new_record;\n    for (counter = 0x2c; counter != 0; counter = counter + -1) {\n      *temp_ptr = 0;\n      temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n    }\n    error_message = *(undefined8 *)(unit_ptr + 0x10);\n    *(undefined8 *)(new_record + 4) = line_number;\n    *(undefined8 *)(new_record + 2) = error_message;\n    *(undefined8 *)(new_record + 0x18) = unit;\n    temp_ptr = new_record + 6;\n    for (counter = 0x48; counter != 0; counter = counter + -1) {\n      *(undefined *)temp_ptr = 0xff;\n      temp_ptr = (undefined4 *)((long)temp_ptr + (ulong)flag * -2 + 1);\n    }\n    current_unit = *(undefined8 **)(unit_ptr + 0x28);\n    if (current_unit == (undefined8 *)0x0) {\n      current_unit = *(undefined8 **)(unit_ptr + 8);\n      current_unit[2] = new_record;\n    }\n    else {\n      *current_unit = new_record;\n    }\n    *(undefined4 **)(unit_ptr + 0x28) = new_record;\nLAB_0010c056:\n    error_message = CONCAT71((int7)((ulong)current_unit >> 8),1);\n  }\n  return error_message;\n}\n\n",
            "current_name": "record_debug_line_0010bf86",
            "entrypoint": "0x0010bf86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "_stderr": "stderr",
                "bVar7": "flag",
                "dcgettext": "get_error_message",
                "fprintf": "print_error_message",
                "lVar5": "counter",
                "param_1": "unit_ptr",
                "param_2": "line_number",
                "param_3": "unit",
                "puVar2": "current_unit",
                "puVar4": "new_record",
                "puVar6": "temp_ptr",
                "uVar1": "error_message",
                "uVar3": "index",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c05d": {
            "additional_data": {
                "FUN_0010c05d": {
                    "13": "debug_record_variable",
                    "2": "process_record_variable",
                    "3": "record_variable_debug"
                },
                "LAB_0010c12e": {
                    "1": "label"
                },
                "_stderr": {
                    "1": "standard_error",
                    "2": "stderr"
                },
                "auVar1": {
                    "1": "result1",
                    "10": "result",
                    "2": "output_variable",
                    "4": "return_value"
                },
                "auVar9": {
                    "1": "result_c",
                    "10": "return_value",
                    "2": "result",
                    "4": "result2"
                },
                "bVar8": {
                    "1": "counter",
                    "10": "byte_var",
                    "2": "b_var8",
                    "3": "byte_value"
                },
                "cVar4": {
                    "1": "cvar4",
                    "19": "flag",
                    "2": "temp_char",
                    "3": "condition"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "debug_add_to_namespace_constprop_0": {
                    "3": "add_to_namespace"
                },
                "fprintf": {
                    "1": "print_formatted_message",
                    "2": "print_error"
                },
                "lVar5": {
                    "1": "lvar5",
                    "12": "loop_counter",
                    "14": "counter",
                    "2": "loop_var"
                },
                "lVar6": {
                    "1": "namespace_record",
                    "10": "current_file",
                    "2": "file_offset",
                    "3": "file_ptr"
                },
                "param_1": {
                    "1": "source",
                    "2": "file_data",
                    "4": "file_pointer",
                    "8": "file_ptr"
                },
                "param_2": {
                    "1": "var_ptr",
                    "2": "variable_value",
                    "4": "variable_addr",
                    "7": "variable"
                },
                "param_3": {
                    "1": "param_b",
                    "2": "param3",
                    "3": "namespace_id",
                    "9": "namespace"
                },
                "param_4": {
                    "1": "var_count",
                    "2": "arg4",
                    "3": "type",
                    "4": "var_type",
                    "6": "record_type",
                    "7": "variable_type"
                },
                "param_5": {
                    "1": "unknown_param_1",
                    "16": "param_5",
                    "2": "data",
                    "3": "param5"
                },
                "param_6": {
                    "1": "param_6_value",
                    "14": "param_6",
                    "2": "arg6",
                    "3": "param6",
                    "9": "result"
                },
                "piVar3": {
                    "1": "pointer1",
                    "3": "ptr",
                    "4": "new_variable"
                },
                "piVar7": {
                    "1": "pi_var_end",
                    "2": "current_variable",
                    "3": "ptr2"
                },
                "uVar2": {
                    "1": "result_b",
                    "10": "result",
                    "2": "return_val",
                    "7": "return_value"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined  [16]\nrecord_variable_0010c05d(long file_ptr,long variable,ulong namespace,int variable_type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined result [16];\n  undefined8 result;\n  int *allocated_memory;\n  char flag;\n  long counter;\n  long current_file;\n  int *ptr2;\n  byte byte_var;\n  undefined return_value [16];\n  \n  byte_var = 0;\n  if (variable == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = namespace;\n    return result << 0x40;\n  }\n  if (namespace != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (current_file = *(long *)(file_ptr + 0x10), current_file == 0)) {\n      result = get_debug_message(0,\"debug_record_variable_0010c05d: no current file\",5);\n      print_error(stderr,\"%s\\n\",result);\n    }\n    else {\n      if (variable_type - 1U < 2) {\n        current_file = current_file + 0x10;\n        flag = (variable_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        current_file = current_file + 0x10;\n        flag = '\\0';\n      }\n      else {\n        current_file = *(long *)(file_ptr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      current_file = add_to_namespace(current_file,variable,2,flag);\n      if (current_file != 0) {\n        allocated_memory = (int *)allocate_memory(0x18);\n        ptr2 = allocated_memory + 1;\n        for (counter = 5; counter != 0; counter = counter + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n        }\n        *allocated_memory = variable_type;\n        result = 1;\n        *(ulong *)(allocated_memory + 2) = namespace;\n        *(undefined8 *)(allocated_memory + 4) = param_5;\n        *(int **)(current_file + 0x20) = allocated_memory;\n        goto end_label;\n      }\n    }\n  }\n  result = 0;\nend_label:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "record_variable_0010c05d",
            "entrypoint": "0x0010c05d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "LAB_0010c12e": "end_label",
                "_stderr": "stderr",
                "auVar1": "result",
                "auVar9": "return_value",
                "bVar8": "byte_var",
                "cVar4": "flag",
                "dcgettext": "get_debug_message",
                "debug_add_to_namespace_constprop_0": "add_to_namespace",
                "fprintf": "print_error",
                "lVar5": "counter",
                "lVar6": "current_file",
                "param_1": "file_ptr",
                "param_2": "variable",
                "param_3": "namespace",
                "param_4": "variable_type",
                "piVar3": "allocated_memory",
                "piVar7": "ptr2",
                "uVar2": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c139": {
            "additional_data": {
                "FUN_0010c139": {
                    "1": "process_data",
                    "2": "record_or_debug_variable",
                    "4": "process_record",
                    "7": "record_variable_or_debug"
                },
                "cVar2": {
                    "1": "value_flag",
                    "11": "char_value",
                    "2": "record_flag",
                    "3": "check_value",
                    "8": "flag"
                },
                "debug_record_variable": {
                    "1": "debug_record_variable"
                },
                "in_R10": {
                    "1": "temp_register10",
                    "2": "unused_register",
                    "3": "register_10"
                },
                "param_1": {
                    "1": "record_variable_param1",
                    "2": "function_id",
                    "3": "param1",
                    "4": "param_1",
                    "6": "record"
                },
                "param_2": {
                    "1": "record_data",
                    "2": "record_ptr",
                    "3": "data_ptr"
                },
                "param_3": {
                    "1": "new_param",
                    "2": "param_ptr",
                    "3": "value",
                    "4": "param_3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "param_b",
                    "2": "type",
                    "3": "value",
                    "4": "param_4",
                    "5": "param4"
                },
                "param_5": {
                    "1": "flags",
                    "2": "arg5",
                    "4": "type",
                    "5": "param5"
                },
                "param_6": {
                    "1": "record_variable_param6",
                    "2": "data",
                    "4": "address",
                    "5": "param_6",
                    "6": "param6"
                },
                "puVar4": {
                    "1": "pu_var",
                    "2": "new_variable",
                    "3": "new_ptr",
                    "7": "new_record"
                },
                "uVar1": {
                    "1": "previous_value",
                    "2": "temp1",
                    "3": "temp"
                },
                "uVar3": {
                    "25": "result",
                    "6": "return_value"
                },
                "unaff_R15": {
                    "1": "unaff_var_r15",
                    "2": "unaff_register",
                    "3": "param_r15",
                    "4": "unaffected_register_15"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_0010c05d",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\nulong record_variable_or_debug_0010c139(undefined8 record,long data_ptr,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 temp;\n  char char_value;\n  ulong result;\n  undefined8 *new_record;\n  undefined8 param_r10;\n  undefined8 unaffected_register_15;\n  \n  char_value = *(char *)(data_ptr + 0x60);\n  if ((char_value != '\\0') && ((*(int *)(data_ptr + 0x40) != 0 || (*(char *)(data_ptr + 0x44) == '\\0')))) {\n    new_record = (undefined8 *)allocate_memory(0x28);\n    temp = *(undefined8 *)(data_ptr + 0x78);\n    *(undefined8 *)((long)new_record + 0x1c) = 0;\n    new_record[2] = param4;\n    *(undefined4 *)(new_record + 3) = param5;\n    new_record[4] = param6;\n    *(undefined8 **)(data_ptr + 0x78) = new_record;\n    *new_record = temp;\n    new_record[1] = param3;\n    return CONCAT71((int7)((ulong)unaffected_register_15 >> 8),char_value) & 0xffffffff;\n  }\n  result = debug_record_variable(record,param3,param4,param5,param6,param_r10);\n  return result;\n}\n\n",
            "current_name": "record_variable_or_debug_0010c139",
            "entrypoint": "0x0010c139",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c139": "record_variable_or_debug_0010c139",
                "cVar2": "char_value",
                "in_R10": "param_r10",
                "param_1": "record",
                "param_2": "data_ptr",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar4": "new_record",
                "uVar1": "temp",
                "uVar3": "result",
                "unaff_R15": "unaffected_register_15",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c1c6": {
            "additional_data": {
                "*(undefined4 *)(__ptr + 3)": {
                    "1": "record_arg3",
                    "2": "var3"
                },
                "*(undefined8 *)(param_2 + 0x78)": {
                    "1": "ptr_to_first_node"
                },
                "FUN_0010c1c6": {
                    "1": "debug_and_free_memory",
                    "13": "process_debug_records",
                    "2": "record_variable_debug",
                    "4": "record_and_free_variables"
                },
                "__ptr": {
                    "1": "variable_ptr",
                    "13": "current_ptr",
                    "2": "current_pointer",
                    "3": "current_node",
                    "8": "current_record"
                },
                "__ptr[1]": {
                    "1": "record_arg1",
                    "2": "var1"
                },
                "__ptr[2]": {
                    "1": "record_arg2",
                    "2": "var2"
                },
                "__ptr[4]": {
                    "1": "record_arg4",
                    "2": "var4"
                },
                "cVar2": {
                    "1": "record_status",
                    "10": "result",
                    "3": "debug_success",
                    "8": "debug_result"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "param1",
                    "3": "function_address",
                    "5": "param_1"
                },
                "param_2": {
                    "1": "ptr2",
                    "2": "data",
                    "3": "record_ptr"
                },
                "param_3": {
                    "1": "param_z",
                    "13": "param_3",
                    "2": "unused_param1",
                    "3": "unused_param"
                },
                "param_4": {
                    "1": "ptr2",
                    "13": "param_4",
                    "2": "arg4",
                    "3": "param4"
                },
                "param_5": {
                    "1": "param_v",
                    "15": "param_5",
                    "2": "arg5",
                    "3": "unused_param3"
                },
                "param_6": {
                    "1": "arg_4",
                    "15": "param_6",
                    "2": "arg6",
                    "3": "unused_param4"
                },
                "puVar1": {
                    "1": "new_ptr",
                    "10": "next_record",
                    "12": "next_ptr",
                    "2": "next_pointer",
                    "3": "next_node"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_0010c05d"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "code": "\nundefined process_debug_records_0010c1c6(undefined8 param_1,long record_ptr,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *next_ptr;\n  char result;\n  undefined8 *current_ptr;\n  \n  current_ptr = *(undefined8 **)(record_ptr + 0x78);\n  while( true ) {\n    if (current_ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(record_ptr + 0x78) = 0;\n      return 1;\n    }\n    result = debug_record_variable\n                      (param_1,var1,var2,*(undefined4 *)(current_ptr + 3),var4,param_6,param_5\n                      );\n    if (result == '\\0') break;\n    next_ptr = (undefined8 *)*current_ptr;\n    free(current_ptr);\n    current_ptr = next_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_records_0010c1c6",
            "entrypoint": "0x0010c1c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c1c6": "process_debug_records_0010c1c6",
                "__ptr": "current_ptr",
                "__ptr[1]": "var1",
                "__ptr[2]": "var2",
                "__ptr[4]": "var4",
                "cVar2": "result",
                "param_2": "record_ptr",
                "puVar1": "next_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c218": {
            "additional_data": {
                "FUN_0010c218": {
                    "1": "process_debug_name",
                    "2": "update_debug_type",
                    "3": "add_type_to_namespace",
                    "5": "debug_name_type"
                },
                "FUN_00112904": {
                    "1": "print_debug_error"
                },
                "FUN_00112925": {
                    "1": "add_type_to_namespace"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "lVar2": {
                    "1": "type_offset",
                    "2": "type_info",
                    "4": "new_type",
                    "9": "type"
                },
                "lVar4": {
                    "1": "added_type",
                    "2": "namespace_info",
                    "3": "result",
                    "4": "namespace_ptr",
                    "5": "namespace_entry"
                },
                "param_1": {
                    "1": "file_data",
                    "2": "file_handle",
                    "4": "file_ptr",
                    "9": "file_info"
                },
                "param_2": {
                    "1": "param_flag1",
                    "13": "name_type",
                    "3": "file_id",
                    "4": "type"
                },
                "param_3": {
                    "1": "name_len",
                    "2": "type",
                    "3": "name",
                    "8": "current_file"
                },
                "pauVar3": {
                    "1": "type_info_ptr",
                    "3": "new_type_ptr",
                    "6": "type_array",
                    "7": "type_pointer",
                    "8": "type_ptr"
                },
                "uVar1": {
                    "18": "error_message",
                    "2": "err_msg",
                    "3": "error_string",
                    "7": "error_msg"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c2d2",
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010dac0"
            ],
            "code": "\n\n\nlong debug_name_type_0010c218(long file_info,long name_type,long current_file)\n\n{\n  undefined8 error_message;\n  long type;\n  undefined (*type_ptr) [16];\n  long namespace_result;\n  \n  if ((name_type != 0) && (current_file != 0)) {\n    if ((*(long *)(file_info + 8) == 0) || (*(long *)(file_info + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type_0010c218: no current file\",5);\n      fprintf(error_stream,\"%s\\n\",error_message);\n    }\n    else {\n      type = debug_make_type_constprop_0(0x16,0);\n      if (type != 0) {\n        type_ptr = (undefined (*) [16])xmalloc(0x10);\n        namespace_result = *(long *)(file_info + 0x10);\n        *type_ptr = ZEXT816(0);\n        *(long *)(*type_ptr + 8) = current_file;\n        *(undefined (**) [16])(type + 0x10) = type_ptr;\n        namespace_result = debug_add_to_namespace_constprop_0(namespace_result + 0x10,name_type,0,3);\n        if (namespace_result != 0) {\n          *(long *)(namespace_result + 0x20) = type;\n          *(long *)*type_ptr = namespace_result;\n          return type;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "debug_name_type_0010c218",
            "entrypoint": "0x0010c218",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c218": "debug_name_type_0010c218",
                "_stderr": "error_stream",
                "lVar2": "type",
                "lVar4": "namespace_result",
                "param_1": "file_info",
                "param_2": "name_type",
                "param_3": "current_file",
                "pauVar3": "type_ptr",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c2d2": {
            "additional_data": {
                "FUN_00109022": {
                    "1": "process_type"
                },
                "FUN_0010c218": {
                    "1": "make_int_type"
                },
                "FUN_0010c2d2": {
                    "1": "get_type_info",
                    "3": "get_type_from_xcoff",
                    "6": "get_data_type"
                },
                "FUN_00112904": {
                    "1": "print_warning"
                },
                "FUN_00113df2": {
                    "1": "print_message"
                },
                "FUN_00113dfe": {
                    "1": "print_error"
                },
                "FUN_00113e17": {
                    "1": "do_something"
                },
                "FUN_00113e23": {
                    "1": "make_indirect_type"
                },
                "_stderr": {
                    "1": "standard_error_output"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "debug_make_float_type_isra_0": {
                    "1": "make_float_type"
                },
                "debug_make_int_type_isra_0": {
                    "1": "make_integer_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "make_constant_type"
                },
                "debug_make_void_type_isra_0": {
                    "1": "make_void_type"
                },
                "debug_name_type": {
                    "1": "name_type"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "lVar4": {
                    "1": "type_code",
                    "2": "type_info_ptr",
                    "3": "data_type_address",
                    "7": "result",
                    "9": "type_address"
                },
                "param_1": {
                    "1": "type_info_ptr",
                    "2": "param",
                    "3": "debugger",
                    "4": "debug_info",
                    "6": "param_1"
                },
                "param_2": {
                    "1": "param_b",
                    "15": "type_table",
                    "2": "type_cache",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "param_c",
                    "2": "type",
                    "3": "type_code",
                    "4": "type_info"
                },
                "pcVar2": {
                    "1": "type_str",
                    "14": "type_name",
                    "5": "data_type_string",
                    "8": "type_string"
                },
                "plVar5": {
                    "1": "ptr_var",
                    "2": "type_slot",
                    "3": "slot_address",
                    "4": "slot"
                },
                "stab_find_slot": {
                    "1": "find_slot"
                },
                "uVar1": {
                    "1": "index",
                    "2": "type_value",
                    "4": "type_index",
                    "5": "type_id",
                    "6": "type"
                },
                "uVar3": {
                    "1": "type_signature",
                    "11": "type",
                    "3": "debug_type",
                    "6": "type_info"
                },
                "uVar6": {
                    "1": "data_type_size",
                    "11": "index",
                    "2": "negative_type_id",
                    "3": "neg_type_index"
                }
            },
            "called": [
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00112904",
                "FUN_00113e17",
                "FUN_00104240",
                "FUN_00109022",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nlong get_data_type_0010c2d2(undefined8 param_1,long type_table,int *type_info)\n\n{\n  uint type;\n  char *type_name;\n  undefined8 type;\n  long type_address;\n  long *slot;\n  uint index;\n  \n  if ((*type_info == 0) && (type = type_info[1], (int)type < 0)) {\n    index = ~type;\n    if (index < 0x22) {\n      type_address = *(long *)(type_table + 0x90 + (ulong)index * 8);\n      if (type_address == 0) {\n        switch(index) {\n        case 1:\n          type = make_integer_type(1,0);\n          type_name = \"char\";\n          break;\n        case 2:\n          type = make_integer_type(2,0);\n          type_name = \"short\";\n          break;\n        case 3:\n          type = make_integer_type(4,0);\n          type_name = \"long\";\n          break;\n        case 4:\n          type = make_integer_type(1,1);\n          type_name = \"unsigned char\";\n          break;\n        case 5:\n          type = make_integer_type(1,0);\n          type_name = \"signed char\";\n          break;\n        case 6:\n          type = make_integer_type(2,1);\n          type_name = \"unsigned short\";\n          break;\n        case 7:\n          type = make_integer_type(4,1);\n          type_name = \"unsigned int\";\n          break;\n        case 8:\n          type = make_integer_type(4,1);\n          type_name = \"unsigned\";\n          break;\n        case 9:\n          type = make_integer_type(4,1);\n          type_name = \"unsigned long\";\n          break;\n        case 10:\n          type = make_void_type();\n          type_name = \"void\";\n          break;\n        case 0xb:\n          type = make_float_type(4);\n          type_name = \"float\";\n          break;\n        case 0xc:\n          type = make_float_type(8);\n          type_name = \"double\";\n          break;\n        case 0xd:\n          type = make_float_type(8);\n          type_name = \"long double\";\n          break;\n        case 0xe:\n          type = make_integer_type(4,0);\n          type_name = \"integer\";\n          break;\n        case 0xf:\n          type = make_constant_type(6,4);\n          type_name = \"boolean\";\n          break;\n        case 0x10:\n          type = make_float_type(4);\n          type_name = \"short real\";\n          break;\n        case 0x11:\n          type = make_float_type(8);\n          type_name = \"real\";\n          break;\n        case 0x12:\n          type_name = \"stringptr\";\n          type = 0;\n          break;\n        case 0x13:\n          type = make_integer_type(1,1);\n          type_name = \"character\";\n          break;\n        case 0x14:\n          type = make_constant_type(6,1);\n          type_name = \"logical*1\";\n          break;\n        case 0x15:\n          type = make_constant_type(6,2);\n          type_name = \"logical*2\";\n          break;\n        case 0x16:\n          type = make_constant_type(6,4);\n          type_name = \"logical*4\";\n          break;\n        case 0x17:\n          type = make_constant_type(6,4);\n          type_name = \"logical\";\n          break;\n        case 0x18:\n          type = make_constant_type(5,8);\n          type_name = \"complex\";\n          break;\n        case 0x19:\n          type = make_constant_type(5,0x10);\n          type_name = \"double complex\";\n          break;\n        case 0x1a:\n          type = make_integer_type(1,0);\n          type_name = \"integer*1\";\n          break;\n        case 0x1b:\n          type = make_integer_type(2,0);\n          type_name = \"integer*2\";\n          break;\n        case 0x1c:\n          type = make_integer_type(4,0);\n          type_name = \"integer*4\";\n          break;\n        case 0x1d:\n          type = make_integer_type(2,0);\n          type_name = \"wchar\";\n          break;\n        case 0x1e:\n          type = make_integer_type(8,0);\n          type_name = \"long long\";\n          break;\n        case 0x1f:\n          type = make_integer_type(8,1);\n          type_name = \"unsigned long long\";\n          break;\n        case 0x20:\n          type = make_constant_type(6,8);\n          type_name = \"logical*8\";\n          break;\n        case 0x21:\n          type = make_integer_type(8,0);\n          type_name = \"integer*8\";\n          break;\n        default:\n          type = make_integer_type(4,0);\n          type_name = \"int\";\n        }\n        type_address = name_type(param_1,type_name,type);\n        *(long *)(type_table + 0x90 + (ulong)index * 8) = type_address;\n        return type_address;\n      }\n      return type_address;\n    }\n    type_name = (char *)localized_string(0,\"Unrecognized XCOFF type %d\\n\",5);\n    print_error_message(standard_error_output,type_name,(ulong)type);\n  }\n  else {\n    slot = (long *)find_slot(type_table);\n    if (slot != (long *)0x0) {\n      if (*slot == 0) {\n        type_address = debug_make_indirect_type_isra_0(slot,0);\n        return type_address;\n      }\n      return *slot;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "get_data_type_0010c2d2",
            "entrypoint": "0x0010c2d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c2d2": "get_data_type_0010c2d2",
                "_stderr": "standard_error_output",
                "dcgettext": "localized_string",
                "debug_make_float_type_isra_0": "make_float_type",
                "debug_make_int_type_isra_0": "make_integer_type",
                "debug_make_type_constprop_0": "make_constant_type",
                "debug_make_void_type_isra_0": "make_void_type",
                "debug_name_type": "name_type",
                "fprintf": "print_error_message",
                "lVar4": "type_address",
                "param_2": "type_table",
                "param_3": "type_info",
                "pcVar2": "type_name",
                "plVar5": "slot",
                "stab_find_slot": "find_slot",
                "uVar1": "type",
                "uVar3": "type",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c6be": {
            "additional_data": {
                "F": {
                    "1": "extract_tag_from_debug_info"
                },
                "FUN_0010c6be": {
                    "1": "extract_tag_type",
                    "16": "debug_tag_type",
                    "2": "process_debug_tag_type"
                },
                "_stderr": {
                    "1": "output_file",
                    "2": "error_output_stream"
                },
                "dcgettext": {
                    "1": "get_localization_string",
                    "2": "get_error_message"
                },
                "fprint(stderr, : %s\n: , uVar2)": {
                    "1": "print_error_message_to_stderr(u_var2)"
                },
                "iVar1": {
                    "1": "comparison_res",
                    "2": "tag_comparison_result",
                    "20": "comparison_result",
                    "4": "strcmp_result"
                },
                "lVar5": {
                    "1": "type_array_offset",
                    "2": "namespace_result",
                    "3": "namespace_entry",
                    "4": "file_offset",
                    "6": "namespace_address"
                },
                "param_1": {
                    "1": "value1",
                    "2": "base_address",
                    "3": "param_1",
                    "7": "file_handle"
                },
                "param_2": {
                    "1": "filename",
                    "15": "tag_name",
                    "5": "tag",
                    "7": "file_name"
                },
                "param_3": {
                    "1": "tag_table",
                    "2": "tag_ptr",
                    "3": "tag_info",
                    "4": "tag_type",
                    "6": "tag"
                },
                "pauVar4": {
                    "1": "tag_struct_ptr",
                    "2": "tag_entry",
                    "4": "new_tag"
                },
                "pcVar6": {
                    "31": "error_message"
                },
                "piVar3": {
                    "1": "new_type_ptr",
                    "2": "new_tag_ptr",
                    "3": "new_type",
                    "5": "new_tag_type"
                },
                "uVar2": {
                    "1": "translation",
                    "10": "translated_error_message",
                    "4": "localized_error_message",
                    "5": "translated_message"
                },
                "xmalloc(0x10)": {
                    "1": "allocate_memory(0x10)"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_001044b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "code": "\n\n\nint * debug_tag_type_0010c6be(long file_handle,char *tag_name,int *tag)\n\n{\n  int comparison_result;\n  undefined8 translated_error_message;\n  int *new_tag_type;\n  undefined (*new_tag) [16];\n  long namespace_address;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag != (int *)0x0)) {\n    if (*(long *)(file_handle + 0x10) == 0) {\n      error_message = \"debug_tag_type_0010c6be: no current file\";\n    }\n    else {\n      if (*tag != 0x17) {\n        new_tag_type = (int *)debug_make_type_constprop_0(0x17,0);\n        if (new_tag_type == (int *)0x0) {\n          return (int *)0x0;\n        }\n        new_tag = (undefined (*) [16])allocate_memory(0x10);\n        namespace_address = *(long *)(file_handle + 0x10);\n        *new_tag = ZEXT816(0);\n        *(int **)(*new_tag + 8) = tag;\n        *(undefined (**) [16])(new_tag_type + 4) = new_tag;\n        namespace_address = debug_add_to_namespace_constprop_0(namespace_address + 0x10,tag_name,1,3);\n        if (namespace_address == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(namespace_address + 0x20) = new_tag_type;\n        *(long *)*new_tag = namespace_address;\n        return new_tag_type;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag + 4) + 8),tag_name);\n      error_message = \"debug_tag_type_0010c6be: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag;\n      }\n    }\n    translated_error_message = get_error_message(0,error_message,5);\n    fprintf(error_output_stream,\"%s\\n\",translated_error_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "current_name": "debug_tag_type_0010c6be",
            "entrypoint": "0x0010c6be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c6be": "debug_tag_type_0010c6be",
                "_stderr": "error_output_stream",
                "dcgettext": "get_error_message",
                "iVar1": "comparison_result",
                "lVar5": "namespace_address",
                "param_1": "file_handle",
                "param_2": "tag_name",
                "param_3": "tag",
                "pauVar4": "new_tag",
                "pcVar6": "error_message",
                "piVar3": "new_tag_type",
                "uVar2": "translated_error_message",
                "xmalloc(0x10)": "allocate_memory(0x10)"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c7a0": {
            "additional_data": {
                "FUN_0010c7a0": {
                    "1": "set_class_identifier",
                    "19": "debug_set_class_id",
                    "7": "set_class_id"
                },
                "__s1": {
                    "1": "prev_class_name",
                    "10": "existing_class_name",
                    "2": "type_name"
                },
                "auVar8": {
                    "1": "return_val",
                    "19": "return_value",
                    "2": "return_var",
                    "5": "result"
                },
                "cVar5": {
                    "1": "same_type_flag",
                    "17": "is_same_type",
                    "5": "same_type"
                },
                "iVar6": {
                    "1": "new_class_id_incremented",
                    "2": "type_count",
                    "4": "count",
                    "5": "counter",
                    "6": "new_type_id"
                },
                "lVar3": {
                    "1": "type_data",
                    "15": "type_info",
                    "2": "temp_var3",
                    "4": "param3_value"
                },
                "param_1": {
                    "1": "type_info",
                    "11": "class_id",
                    "2": "arg1",
                    "6": "type"
                },
                "param_2": {
                    "1": "class_id",
                    "18": "class_name",
                    "2": "arg2",
                    "4": "name",
                    "6": "type_name"
                },
                "param_3": {
                    "1": "type_definition",
                    "2": "arg3",
                    "3": "kind",
                    "4": "class_type",
                    "7": "type",
                    "8": "type_kind"
                },
                "param_4": {
                    "1": "param_value",
                    "18": "param_4",
                    "2": "param",
                    "3": "unknown_param",
                    "5": "param4"
                },
                "piVar4": {
                    "1": "var_ptr",
                    "2": "pi_var",
                    "7": "type_ptr"
                },
                "puVar7": {
                    "1": "new_type_ptr",
                    "2": "new_type_info",
                    "4": "node",
                    "6": "new_node"
                },
                "strcmp": {
                    "1": "str_compare",
                    "2": "string_compare"
                },
                "uVar1": {
                    "1": "temp_var",
                    "18": "result",
                    "2": "temp_var1",
                    "3": "return_value"
                },
                "uVar2": {
                    "1": "new_id",
                    "2": "new_class_id",
                    "3": "count",
                    "4": "new_type_id",
                    "7": "type_id"
                }
            },
            "called": [
                "FUN_0010922b",
                "FUN_00104300",
                "FUN_00104470",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long class_id,char *class_name,int *type_kind,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint type_id;\n  long type_info;\n  int *type_ptr;\n  char *existing_class_name;\n  char is_same_type;\n  int new_type_id;\n  undefined8 *new_node;\n  undefined return_value [16];\n  \n  if (3 < *type_kind - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  type_info = *(long *)(type_kind + 4);\n  new_node = (undefined8 *)(ulong)*(uint *)(type_info + 0xc);\n  if (*(uint *)(type_info + 0xc) <= *(uint *)(class_id + 0x38)) {\n    for (new_node = *(undefined8 **)(class_id + 0x50); new_node != (undefined8 *)0x0;\n        new_node = (undefined8 *)*new_node) {\n      type_ptr = (int *)new_node[1];\n      if (*type_ptr == *type_kind) {\n        existing_class_name = (char *)new_node[2];\n        if (class_name == (char *)0x0) {\n          if (existing_class_name == (char *)0x0) {\nLAB_0010c82c:\n            is_same_type = debug_type_samep(class_id,type_ptr,type_kind);\n            if (is_same_type != '\\0') {\n              type_id = *(uint *)(*(long *)(new_node[1] + 0x10) + 0xc);\n              new_node = (undefined8 *)(ulong)type_id;\n              *(uint *)(type_info + 0xc) = type_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_class_name != (char *)0x0) && (*existing_class_name == *class_name)) &&\n                (new_type_id = string_compare(existing_class_name,class_name), new_type_id == 0)) goto LAB_0010c82c;\n      }\n    }\n    new_type_id = *(int *)(class_id + 0x34) + 1;\n    *(int *)(class_id + 0x34) = new_type_id;\n    *(int *)(type_info + 0xc) = new_type_id;\n    new_node = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(class_id + 0x50);\n    new_node[2] = class_name;\n    *(undefined8 **)(class_id + 0x50) = new_node;\n    *new_node = result;\n    new_node[1] = type_kind;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)new_node >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "current_name": "debug_set_class_id_0010c7a0",
            "entrypoint": "0x0010c7a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "__s1": "existing_class_name",
                "auVar8": "return_value",
                "cVar5": "is_same_type",
                "iVar6": "new_type_id",
                "lVar3": "type_info",
                "param_1": "class_id",
                "param_2": "class_name",
                "param_3": "type_kind",
                "piVar4": "type_ptr",
                "puVar7": "new_node",
                "strcmp": "string_compare",
                "uVar1": "result",
                "uVar2": "type_id"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c892": {
            "additional_data": {
                "FUN_0010be1a": {
                    "1": "debug_make_type"
                },
                "FUN_0010c1c6": {
                    "2": "end_function"
                },
                "FUN_0010c6be": {
                    "1": "process_debug_info_helper"
                },
                "FUN_0010c892": {
                    "1": "process_debug_type",
                    "3": "process_debug_info",
                    "4": "process_debug_types",
                    "8": "process_types"
                },
                "FUN_00112904": {
                    "1": "print_error_message"
                },
                "F_0010be1a": {
                    "1": "create_type"
                },
                "F_0010c1c6": {
                    "1": "process_type"
                },
                "F_0010c6be": {
                    "1": "load_types"
                },
                "F_00112904": {
                    "1": "end_function"
                },
                "_stderr": {
                    "1": "stderr",
                    "3": "error_stream"
                },
                "cVar1": {
                    "1": "is_pending_vars",
                    "2": "is_pending",
                    "3": "status",
                    "4": "char_value",
                    "5": "char_var"
                },
                "dcgettext": {
                    "1": "get_debug_message",
                    "3": "get_error_message"
                },
                "debug_end_function": {
                    "1": "end_debug_function"
                },
                "debug_make_type_constprop_0": {
                    "2": "make_type_constprop"
                },
                "debug_tag_type": {
                    "2": "tag_type"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "iVar6": {
                    "1": "int_value",
                    "20": "kind",
                    "3": "int_var"
                },
                "lVar2": {
                    "1": "type_value",
                    "2": "temp_var1",
                    "3": "result",
                    "5": "type_result",
                    "8": "type"
                },
                "lVar3": {
                    "1": "type_tag",
                    "2": "temp_var2",
                    "4": "tag",
                    "6": "tagged_type"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input",
                    "3": "param",
                    "4": "data",
                    "5": "param1",
                    "6": "arg1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "debug_info",
                    "5": "data",
                    "6": "arg2"
                },
                "puVar5": {
                    "1": "type_list",
                    "2": "current_item",
                    "3": "ptr_var",
                    "4": "current_node",
                    "7": "ptr"
                },
                "stab_emit_pending_vars": {
                    "1": "emit_pending_variables"
                },
                "uVar4": {
                    "13": "return_value",
                    "16": "result",
                    "2": "success"
                }
            },
            "called": [
                "FUN_0010c6be",
                "FUN_0010c1c6",
                "FUN_00112904",
                "FUN_00104240",
                "FUN_0010be1a",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_types_0010c892(undefined8 arg1,long arg2)\n\n{\n  char char_var;\n  long type;\n  long tagged_type;\n  undefined8 result;\n  undefined8 *ptr;\n  int kind;\n  \n  if (*(char *)(arg2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr = *(undefined8 **)(arg2 + 0x1a0); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      kind = *(int *)(ptr + 2);\n      tagged_type = ptr[1];\n      if (kind != 0) {\n        if (tagged_type != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = get_error_message(0,\"debug_make_undefined_type: unsupported kind\",5);\n          print_error(error_stream,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        ptr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tagged_type == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      type = make_type_constprop(kind,0);\n      if (type == 0) goto LAB_0010c910;\n      tagged_type = tag_type(arg1,tagged_type,type);\n      ptr[3] = tagged_type;\n      if (tagged_type == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    char_var = emit_pending_variables();\n    if (char_var != '\\0') {\n      char_var = end_debug_function(arg1,*(undefined8 *)(arg2 + 0x68));\n      if (char_var != '\\0') {\n        *(undefined *)(arg2 + 0x60) = 0;\n        *(undefined8 *)(arg2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_types_0010c892",
            "entrypoint": "0x0010c892",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c892": "process_types_0010c892",
                "_stderr": "error_stream",
                "cVar1": "char_var",
                "dcgettext": "get_error_message",
                "debug_end_function": "end_debug_function",
                "debug_make_type_constprop_0": "make_type_constprop",
                "debug_tag_type": "tag_type",
                "fprintf": "print_error",
                "iVar6": "kind",
                "lVar2": "type",
                "lVar3": "tagged_type",
                "param_1": "arg1",
                "param_2": "arg2",
                "puVar5": "ptr",
                "stab_emit_pending_vars": "emit_pending_variables",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c95e": {
            "additional_data": {
                "*param_2 = pbVar20 + 1": {
                    "1": "increment_input_string"
                },
                "*param_2 = pbVar20 + 2": {
                    "1": "increment_input_string"
                },
                "*param_2 = pbVar3 + uVar14": {
                    "1": "increment_input_string"
                },
                "*param_2 = pbVar9": {
                    "1": "update_input_string"
                },
                "*param_3 = lVar10": {
                    "1": "update_output_length"
                },
                "<__ptr>": {
                    "1": "<string>"
                },
                "<bVar1>": {
                    "1": "<current_byte>"
                },
                "<bVar2>": {
                    "1": "<next_byte>"
                },
                "<bVar4>": {
                    "1": "<is_signed>"
                },
                "<bVar5>": {
                    "1": "<is_const>"
                },
                "<bVar6>": {
                    "1": "<is_volatile>"
                },
                "<cVar7>": {
                    "1": "<error_code>"
                },
                "<lVar10>": {
                    "1": "<input_value>"
                },
                "<lVar15>": {
                    "1": "<output_value>"
                },
                "<local_40>": {
                    "1": "<string_array>"
                },
                "<local_48>": {
                    "1": "<string_length>"
                },
                "<local_49>": {
                    "1": "<is_volatile_value>"
                },
                "<param_1>": {
                    "1": "<compilation_unit>"
                },
                "<param_2>": {
                    "1": "<input_string>"
                },
                "<param_3>": {
                    "1": "<output_length>"
                },
                "<pbVar3>": {
                    "1": "<current_byte_ptr>"
                },
                "<pbVar9>": {
                    "1": "<next_byte_ptr>"
                },
                "<pcVar12>": {
                    "1": "<type_name_1>"
                },
                "<pcVar19>": {
                    "1": "<type_name_3>"
                },
                "<ppcVar18>": {
                    "1": "<tag_type>"
                },
                "<puVar16>": {
                    "1": "<array_dimensions>"
                },
                "<puVar17>": {
                    "1": "<input_bit_flag>"
                },
                "<sVar13>": {
                    "1": "<length>"
                },
                "<uVar11>": {
                    "1": "<output_value>"
                },
                "<uVar14>": {
                    "1": "<number>"
                },
                "<uVar8>": {
                    "1": "<count>"
                },
                "FUN_0010c95e": {
                    "1": "parse_demangled_type",
                    "2": "parse_and_demangle_stab_string"
                },
                "__ptr": {
                    "1": "type_name_string",
                    "2": "pointer_value",
                    "3": "ptr_var",
                    "5": "pointer",
                    "7": "ptr"
                },
                "bVar1": {
                    "1": "current_char",
                    "10": "byte_value",
                    "2": "first_byte",
                    "3": "current_byte"
                },
                "bVar2": {
                    "1": "byte_value2",
                    "10": "byte_var2",
                    "2": "second_byte_value",
                    "3": "next_byte_value"
                },
                "bVar4": {
                    "1": "is_true1",
                    "10": "bool_var1",
                    "2": "bool_value1",
                    "3": "bool1"
                },
                "bVar5": {
                    "1": "is_var5_true",
                    "10": "bool_var2",
                    "2": "is_const",
                    "3": "bool2"
                },
                "bVar6": {
                    "1": "is_fourth_byte",
                    "10": "bool_var3",
                    "2": "boolean_value_3",
                    "3": "bool3",
                    "4": "is_volatile"
                },
                "bool bVar4": {
                    "1": "bool1"
                },
                "bool bVar5": {
                    "1": "bool2"
                },
                "bool bVar6": {
                    "1": "bool3"
                },
                "byte": {
                    "1": "byte_type"
                },
                "byte **param_2": {
                    "1": "input_string"
                },
                "byte *pbVar20": {
                    "1": "byte_pointer"
                },
                "byte *pbVar3": {
                    "1": "byte_pointer"
                },
                "byte *pbVar9": {
                    "1": "byte_pointer"
                },
                "byte bVar1": {
                    "1": "byte1"
                },
                "byte bVar2": {
                    "1": "byte2"
                },
                "byte_array": {
                    "1": "byte_array"
                },
                "cVar7": {
                    "1": "char_value2",
                    "10": "char_value",
                    "2": "char1",
                    "8": "char_var"
                },
                "char **ppcVar18": {
                    "1": "char_pointer_pointer"
                },
                "char *local_40 [2]": {
                    "1": "local_array"
                },
                "char *pcVar12": {
                    "1": "char_pointer"
                },
                "char *pcVar19": {
                    "1": "char_pointer"
                },
                "char cVar7": {
                    "1": "char1"
                },
                "compilation_unit": {
                    "1": "compilation_unit"
                },
                "copy_and_null_terminate_00109a0b": {
                    "2": "copy_and_null_terminate"
                },
                "count": {
                    "1": "local48"
                },
                "create_debug_type_00113b98": {
                    "1": "create_debug_type"
                },
                "create_debug_type_00113bfa": {
                    "1": "create_debug_type"
                },
                "create_debug_type_00113ce0": {
                    "1": "create_debug_type"
                },
                "data": {
                    "1": "data"
                },
                "demangle_stab_string_0010d882": {
                    "2": "demangle_stab_string"
                },
                "error_message": {
                    "1": "error_message"
                },
                "find_matching_string_0010afd5": {
                    "2": "find_matching_string"
                },
                "find_named_type_0010914e": {
                    "2": "find_named_type"
                },
                "flag": {
                    "1": "flag"
                },
                "get_debug_type_00113d3a": {
                    "2": "get_debug_type"
                },
                "initialize_data_structure_00112904": {
                    "1": "initialize_data_structure"
                },
                "initialize_data_structure_00113c43": {
                    "2": "initialize_data_structure"
                },
                "initialize_debug_type_00113b4a": {
                    "1": "initialize_debug_type"
                },
                "initialize_debug_type_00113df2": {
                    "1": "initialize_debug_type"
                },
                "initialize_debug_type_00113e17": {
                    "2": "initialize_debug_type"
                },
                "initialize_type_00113cb9": {
                    "2": "initialize_type"
                },
                "input_param1": {
                    "1": "value1"
                },
                "input_param2": {
                    "1": "value2"
                },
                "input_param3": {
                    "1": "input3"
                },
                "input_param4": {
                    "1": "input4"
                },
                "input_ptr": {
                    "1": "input_ptr"
                },
                "input_value": {
                    "1": "input_value"
                },
                "lVar10": {
                    "1": "type_value",
                    "2": "long1",
                    "3": "temp_value",
                    "7": "long_value",
                    "9": "long_var1"
                },
                "lVar10 = debug_find_named_type(*param_1,&DAT_00120436)": {
                    "1": "find_type"
                },
                "lVar10 = debug_find_named_type(*param_1,&DAT_00120495)": {
                    "1": "find_type"
                },
                "lVar10 = debug_find_named_type(*param_1,__ptr)": {
                    "1": "find_type"
                },
                "lVar10 = debug_find_named_type(*param_1,pcVar19)": {
                    "1": "find_type"
                },
                "lVar10 = debug_make_const_type_isra_0(*param_3)": {
                    "1": "make_const_type"
                },
                "lVar10 = debug_make_float_type_isra_0(4)": {
                    "1": "make_float_type"
                },
                "lVar10 = debug_make_int_type_isra_0(1,cVar7)": {
                    "1": "make_int_type"
                },
                "lVar10 = debug_make_type_constprop_0(2,1)": {
                    "1": "make_type_constprop"
                },
                "lVar10 = debug_make_type_constprop_0(6,4)": {
                    "1": "make_type_constprop"
                },
                "lVar10 = debug_make_volatile_type_isra_0(*param_3)": {
                    "1": "make_volatile_type"
                },
                "lVar10 = stab_find_tagged_type(*param_1,param_1[1],pbVar3,(int)*param_2 - (int)pbVar3,0)": {
                    "1": "find_tagged_type"
                },
                "lVar10 = stab_find_tagged_type(*param_1,param_1[1],pbVar3,uVar8,9)": {
                    "1": "find_tagged_type"
                },
                "lVar15": {
                    "1": "output_long",
                    "2": "long_value_2",
                    "9": "long_var2"
                },
                "length": {
                    "1": "length"
                },
                "linked_list": {
                    "1": "linked_list_var"
                },
                "local_40": {
                    "1": "local_char_ptr_array40",
                    "2": "local_string_array",
                    "4": "char_array",
                    "6": "char_ptr_array"
                },
                "local_40[0]": {
                    "1": "first_local_char"
                },
                "local_48": {
                    "1": "local_long",
                    "2": "ulong2",
                    "4": "ulong_var2"
                },
                "local_49": {
                    "1": "is_const_var",
                    "2": "undefined_var2",
                    "4": "undefined_value"
                },
                "long *param_3": {
                    "1": "output_length"
                },
                "long lVar10": {
                    "1": "long1"
                },
                "long lVar15": {
                    "1": "output_value"
                },
                "output_value": {
                    "1": "output_value"
                },
                "param4": {
                    "1": "param4"
                },
                "param_1": {
                    "1": "function_param_1",
                    "4": "function_parameters",
                    "5": "compilation_unit",
                    "6": "input_array",
                    "9": "param_array"
                },
                "param_2": {
                    "1": "param_string",
                    "12": "byte_array",
                    "2": "byte_array_ptr",
                    "7": "input_string"
                },
                "param_3": {
                    "1": "output_ptr",
                    "16": "output_length",
                    "2": "param_length"
                },
                "param_4": {
                    "1": "input_param4"
                },
                "parse_and_demangle_0010d21c": {
                    "1": "parse_and_demangle"
                },
                "parse_integer_00108e76": {
                    "2": "parse_integer"
                },
                "parse_number_00108ea1": {
                    "2": "parse_number"
                },
                "pbVar20": {
                    "1": "byte_pointer_3",
                    "2": "byte_pointer3"
                },
                "pbVar20 = *param_2": {
                    "1": "assign_to_byte_pointer"
                },
                "pbVar3": {
                    "1": "current_byte",
                    "10": "byte_pointer",
                    "2": "byte_pointer1",
                    "3": "byte_ptr1",
                    "8": "byte_ptr"
                },
                "pbVar3 = *param_2": {
                    "1": "assign_to_byte_pointer"
                },
                "pbVar3 = pbVar20 + 1": {
                    "1": "increment_byte_pointer"
                },
                "pbVar9": {
                    "1": "ptr_byte_array_2",
                    "2": "byte_pointer_2",
                    "3": "next_byte_ptr",
                    "5": "byte_pointer2",
                    "7": "byte_ptr2"
                },
                "pbVar9 = pbVar3 + 1": {
                    "1": "increment_byte_pointer"
                },
                "pcVar12": {
                    "1": "char_ptr2",
                    "2": "pointer",
                    "3": "char_pointer",
                    "4": "char_ptr1",
                    "5": "char_ptr"
                },
                "pcVar19": {
                    "1": "char_pointer3",
                    "2": "char_pointer2",
                    "3": "type_name",
                    "9": "char_ptr2"
                },
                "pcVar20": {
                    "1": "parsed_char"
                },
                "ppcVar18": {
                    "1": "pointer_pointer",
                    "2": "char_ptr_ptr1",
                    "5": "char_ptr_ptr"
                },
                "print_error_message_0010911f": {
                    "2": "print_error_message"
                },
                "process_binary_data_0010d559": {
                    "1": "process_binary_data"
                },
                "puVar16": {
                    "1": "ptr_ulong",
                    "2": "ulong_ptr1",
                    "4": "ulong_pointer",
                    "5": "ulong_ptr"
                },
                "puVar17": {
                    "1": "is_signed_offset",
                    "2": "undefined_var",
                    "4": "undefined_pointer"
                },
                "sVar13": {
                    "1": "size1",
                    "2": "length",
                    "3": "string_length",
                    "8": "size_var"
                },
                "sVar13 = strlen(local_40[0])": {
                    "1": "get_string_length"
                },
                "size_t sVar13": {
                    "1": "size"
                },
                "source": {
                    "1": "source"
                },
                "string": {
                    "1": "string"
                },
                "stringArray": {
                    "1": "local40"
                },
                "symbol": {
                    "1": "symbol"
                },
                "time": {
                    "1": "local49"
                },
                "type_name": {
                    "1": "type_name"
                },
                "uVar11": {
                    "1": "function_result",
                    "2": "uint64_value",
                    "6": "return_value",
                    "8": "uint_var2"
                },
                "uVar14": {
                    "1": "ulong_value_2",
                    "2": "ulong_var1",
                    "7": "ulong_value"
                },
                "uVar8": {
                    "1": "uint_var1",
                    "2": "uint1",
                    "6": "count",
                    "9": "uint_var"
                },
                "uint uVar8": {
                    "1": "uint1"
                },
                "ulong *puVar16": {
                    "1": "ulong_pointer"
                },
                "ulong local_48": {
                    "1": "local_2"
                },
                "ulong uVar14": {
                    "1": "ulong1"
                },
                "undefined *puVar17": {
                    "1": "undefined_pointer"
                },
                "undefined local_49": {
                    "1": "local_1"
                },
                "undefined8 uVar11": {
                    "1": "u_var1"
                },
                "update_debug_type_00113dfe": {
                    "2": "update_debug_type"
                },
                "value1": {
                    "1": "value1_var"
                },
                "value2": {
                    "1": "value2"
                },
                "void *__ptr": {
                    "1": "ptr"
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00104270",
                "FUN_00113e17",
                "FUN_00108e76",
                "FUN_00113cb9",
                "FUN_00108ea1",
                "FUN_0010911f",
                "FUN_00113d3a",
                "FUN_00113df2",
                "FUN_00113b4a",
                "FUN_00113dfe",
                "FUN_00113c43",
                "FUN_00113b98",
                "FUN_001048f0",
                "FUN_0010d559",
                "FUN_00112904",
                "FUN_0010914e",
                "FUN_0010d882",
                "FUN_00113b71",
                "FUN_00113bfa",
                "FUN_0010d21c",
                "FUN_00113ce0",
                "FUN_0010afd5"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d7d4",
                "FUN_00113e5e",
                "FUN_0010d21c"
            ],
            "code": "\nundefined8 parse_and_demangle_stab_string_0010c95e(undefined8 *param_array,byte_type **byte_array,long *output_length)\n\n{\n  byte_type byte_var1;\n  byte_type byte_var2;\n  byte_type *byte_pointer;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  char char_value;\n  uint uint_var;\n  byte_type *byte_ptr2;\n  long long_var1;\n  undefined8 uint_var2;\n  char *char_ptr;\n  size_t size_value;\n  ulong ulong_value;\n  void *ptr;\n  long long_var2;\n  ulong *ulong_ptr;\n  undefined *undefined_ptr;\n  char **char_ptr_ptr;\n  char *char_ptr2;\n  byte_type *current_byte_ptr;\n  undefined undefined_value;\n  ulong ulong_var2;\n  char *char_ptr_array [2];\n  \n  while( true ) {\n    current_byte_ptr = *byte_array;\n    byte_var1 = *current_byte_ptr;\n    if ('T' < (char)byte_var1) break;\n    if ((char)byte_var1 < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(byte_var1) {\n    case 0x41:\n      long_var2 = 0;\n      byte_pointer = current_byte_ptr;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byte_array = current_byte_ptr + 1;\n      char_value = parse_and_demangle_stab_string_0010c95e(param_array,byte_array,output_length);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (output_length == (long *)0x0) {\n        return 1;\n      }\n      long_var2 = debug_make_const_type_isra_0(*output_length);\n      *output_length = long_var2;\n      return 1;\n    case 0x46:\n      *byte_array = current_byte_ptr + 1;\n      if (output_length == (long *)0x0) {\n        ulong_ptr = (ulong *)0x0;\n        char_ptr_ptr = (char **)0x0;\n      }\n      else {\n        ulong_ptr = &ulong_var2;\n        char_ptr_ptr = char_ptr_array;\n      }\n      char_value = stab_demangle_args(param_array,byte_array,char_ptr_ptr,ulong_ptr);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        char_value = parse_and_demangle_stab_string_0010c95e(param_array,byte_array,output_length);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (output_length == (long *)0x0) {\n          return 1;\n        }\n        long_var2 = debug_make_function_type_isra_0(*output_length,first_local_char,ulong_var2 & 0xff);\n        *output_length = long_var2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byte_array = current_byte_ptr + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefined_value = 0;\n      first_local_char = (char *)0x0;\n      ulong_var2 = 0;\n      *byte_array = current_byte_ptr + 1;\n      if (((&_sch_istable)[(ulong)current_byte_ptr[1] * 2] & 4) == 0) {\n        if (current_byte_ptr[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        char_ptr_ptr = char_ptr_array;\n        if (output_length == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        char_value = stab_demangle_qualified(param_array,byte_array,char_ptr_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uint_var = stab_demangle_local48(byte_array);\n        byte_pointer = *byte_array;\n        size_value = strlen((char *)byte_pointer);\n        if (size_value < uint_var) goto switchD_0010cdf9_caseD_60;\n        *byte_array = byte_pointer + uint_var;\n        if ((output_length != (long *)0x0) &&\n           (first_local_char = (char *)stab_find_tagged_type(*param_array,param_array[1],byte_pointer,uint_var,9),\n           first_local_char == (char *)0x0)) {\n          return 0;\n        }\n      }\n      byte_var2 = **byte_array;\n      if (byte_var1 == 0x4d) {\n        if ((byte_var2 == 0x43) || (byte_var2 == 0x56)) {\n          *byte_array = *byte_array + 1;\n        }\n        if (**byte_array != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byte_array = *byte_array + 1;\n        if (output_length == (long *)0x0) {\n          undefined_ptr = (undefined *)0x0;\n          ulong_ptr = (ulong *)0x0;\n        }\n        else {\n          undefined_ptr = &undefined_value;\n          ulong_ptr = &ulong_var2;\n        }\n        char_value = stab_demangle_args(param_array,byte_array,ulong_ptr,undefined_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        char_value = parse_and_demangle_stab_string_0010c95e(param_array,byte_array,output_length);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (output_length == (long *)0x0) {\n          return 1;\n        }\n        if (byte_var1 != 0x4d) {\n          long_var2 = debug_make_offset_type_isra_0(first_local_char,*output_length);\n          *output_length = long_var2;\n          return 1;\n        }\n        long_var2 = debug_make_method_type_isra_0(*output_length,first_local_char,ulong_var2,undefined_value);\n        *output_length = long_var2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      uint_var2 = stab_demangle_qualified(param_array,byte_array,output_length);\n      return uint_var2;\n    case 0x52:\n      *byte_array = current_byte_ptr + 1;\n      char_value = parse_and_demangle_stab_string_0010c95e(param_array,byte_array,output_length);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (output_length == (long *)0x0) {\n        return 1;\n      }\n      long_var2 = debug_make_reference_type_isra_0(*output_length);\n      *output_length = long_var2;\n      return 1;\n    case 0x54:\n      *byte_array = current_byte_ptr + 1;\n      char_value = stab_demangle_get_local48(byte_array,&ulong_var2);\n      if (char_value != '\\0') {\n        if ((uint)ulong_var2 < *(uint *)(param_array + 5)) {\n          first_local_char = *(char **)((ulong_var2 & 0xffffffff) * 0x10 + param_array[4]);\n          char_value = parse_and_demangle_stab_string_0010c95e(param_array,char_ptr_array,output_length);\n          if (char_value == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (byte_var1 == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byte_array = current_byte_ptr + 1;\n    char_value = parse_and_demangle_stab_string_0010c95e(param_array,byte_array,output_length);\n    if (char_value == '\\0') {\n      return 0;\n    }\n    if (output_length == (long *)0x0) {\n      return 1;\n    }\n    long_var2 = debug_make_pointer_type_isra_0(*output_length);\n    *output_length = long_var2;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bool_var3 = false;\n  bool_var1 = false;\n  char_value = '\\0';\n  bool_var2 = false;\n  do {\n    byte_pointer = *byte_array;\n    byte_var1 = *byte_pointer;\n    if (byte_var1 == 0x55) {\n      char_value = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byte_var1) {\n      if (byte_var1 == 0x56) {\n        bool_var3 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byte_var1) goto switchD_0010cdf9_caseD_60;\n      if ((char)byte_var1 < '_') goto LAB_0010cdfb;\n      switch(byte_var1) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (output_length == (long *)0x0) {\nLAB_0010d0aa:\n          *byte_array = byte_pointer + 1;\n          return 1;\n        }\n        long_var2 = debug_find_named_type(*param_array,&DAT_00120436);\n        *output_length = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_type_constprop_0(6,4);\n          *output_length = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (output_length == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned char\";\n        if ((char_value == '\\0') && (char_ptr2 = \"char\", bool_var1)) {\n          char_ptr2 = \"signed char\";\n        }\n        long_var2 = debug_find_named_type(*param_array,char_ptr2);\n        *output_length = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_int_type_isra_0(1,char_value);\n          *output_length = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (output_length == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (output_length == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = debug_find_named_type(*param_array,\"float\");\n        *output_length = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_float_type_isra_0(4);\n          *output_length = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (output_length == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned int\";\n        char_ptr = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (output_length == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long unsigned int\";\n        char_ptr = \"long int\";\nLAB_0010ced2:\n        if (char_value == '\\0') {\n          char_ptr2 = char_ptr;\n        }\n        long_var2 = debug_find_named_type(*param_array,char_ptr2);\n        *output_length = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_int_type_isra_0(4,char_value);\n          *output_length = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        char_ptr2 = \"long double\";\n        if (output_length == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        long_var2 = debug_find_named_type(*param_array,char_ptr2);\n        *output_length = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_float_type_isra_0(8);\n          *output_length = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (output_length == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"short unsigned int\";\n        if (char_value == '\\0') {\n          char_ptr2 = \"short int\";\n        }\n        long_var2 = debug_find_named_type(*param_array,char_ptr2);\n        *output_length = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_int_type_isra_0(2,char_value);\n          *output_length = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        char_ptr_ptr = char_ptr_array;\n        if (output_length == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        char_value = stab_demangle_template(param_array,byte_array,char_ptr_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (output_length == (long *)0x0) {\n          return 1;\n        }\n        size_value = strlen(first_local_char);\n        long_var2 = stab_find_tagged_type(*param_array,param_array[1],first_local_char,size_value & 0xffffffff,9);\n        *output_length = long_var2;\n        free(first_local_char);\n        long_var2 = *output_length;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (output_length == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = debug_find_named_type(*param_array,&DAT_00120495);\n        *output_length = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_void_type_isra_0();\n          *output_length = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (output_length == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = debug_find_named_type(*param_array,\"__wchar_t\");\n        *output_length = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_int_type_isra_0(2,1);\n          *output_length = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (output_length == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long long unsigned int\";\n        if (char_value == '\\0') {\n          char_ptr2 = \"long long int\";\n        }\n        long_var2 = debug_find_named_type(*param_array,char_ptr2);\n        *output_length = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_int_type_isra_0(8,char_value);\n          *output_length = long_var2;\n        }\n      }\n      *byte_array = *byte_array + 1;\n      goto LAB_0010d1de;\n    }\n    if (byte_var1 == 0x43) {\n      bool_var2 = true;\n      goto LAB_0010cd84;\n    }\n    if (byte_var1 != 0x53) goto LAB_0010cdc5;\n    bool_var1 = true;\nLAB_0010cd84:\n    *byte_array = byte_pointer + 1;\n  } while( true );\nLAB_0010ca26:\n  byte_ptr2 = byte_pointer + 1;\n  *byte_array = byte_ptr2;\n  byte_var1 = *byte_ptr2;\n  if (byte_var1 == 0) goto switchD_0010cdf9_caseD_60;\n  if (byte_var1 == 0x5f) {\n    *byte_array = byte_pointer + 2;\n    char_value = parse_and_demangle_stab_string_0010c95e(param_array,byte_array,output_length);\n    if (char_value == '\\0') {\n      return 0;\n    }\n    if (output_length == (long *)0x0) {\n      return 1;\n    }\n    long_var1 = debug_find_named_type(*param_array,\"int\");\n    if (long_var1 == 0) {\n      long_var1 = debug_make_int_type_isra_0(4,0);\n    }\n    long_var2 = debug_make_array_type_isra_0(*output_length,long_var1,0,long_var2,0);\n    *output_length = long_var2;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)byte_var1 * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  long_var2 = long_var2 * 10 + (long)((char)byte_var1 + -0x30);\n  byte_pointer = byte_ptr2;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byte_var1 < ':') {\n    if ((char)byte_var1 < '0') {\n      if (byte_var1 != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      stab_bad_demangle(current_byte_ptr);\n      if (output_length == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byte_var1 != 0x47) || (*byte_array = byte_pointer + 1, ((&_sch_istable)[(ulong)byte_pointer[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  current_byte_ptr = *byte_array;\n  uint_var = stab_demangle_local48(byte_array);\n  byte_pointer = *byte_array;\n  size_value = strlen((char *)byte_pointer);\n  ulong_value = (ulong)uint_var;\n  if (ulong_value <= size_value) {\n    *byte_array = byte_pointer + ulong_value;\n    if (output_length == (long *)0x0) {\n      return 1;\n    }\n    ptr = (void *)savestring(byte_pointer,ulong_value);\n    long_var2 = debug_find_named_type(*param_array,ptr);\n    *output_length = long_var2;\n    free(ptr);\n    if (*output_length == 0) {\n      long_var2 = stab_find_tagged_type(*param_array,param_array[1],byte_pointer,(int)*byte_array - (int)byte_pointer,0);\n      *output_length = long_var2;\njoined_r0x0010d1d8:\n      if (long_var2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bool_var2) {\n      long_var2 = debug_make_const_type_isra_0(*output_length);\n      *output_length = long_var2;\n    }\n    if (bool_var3) {\n      long_var2 = debug_make_volatile_type_isra_0(*output_length);\n      *output_length = long_var2;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  stab_bad_demangle(current_byte_ptr);\n  return 0;\n}\n\n",
            "current_name": "parse_and_demangle_stab_string_0010c95e",
            "entrypoint": "0x0010c95e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c95e": "parse_and_demangle_stab_string_0010c95e",
                "__ptr": "ptr",
                "bVar1": "byte_var1",
                "bVar2": "byte_var2",
                "bVar4": "bool_var1",
                "bVar5": "bool_var2",
                "bVar6": "bool_var3",
                "byte": "byte_type",
                "cVar7": "char_value",
                "count": "local48",
                "lVar10": "long_var1",
                "lVar15": "long_var2",
                "local_40": "char_ptr_array",
                "local_40[0]": "first_local_char",
                "local_48": "ulong_var2",
                "local_49": "undefined_value",
                "param_1": "param_array",
                "param_2": "byte_array",
                "param_3": "output_length",
                "pbVar20": "current_byte_ptr",
                "pbVar3": "byte_pointer",
                "pbVar9": "byte_ptr2",
                "pcVar12": "char_ptr",
                "pcVar19": "char_ptr2",
                "ppcVar18": "char_ptr_ptr",
                "puVar16": "ulong_ptr",
                "puVar17": "undefined_ptr",
                "sVar13": "size_value",
                "uVar11": "uint_var2",
                "uVar14": "ulong_value",
                "uVar8": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d21c": {
            "additional_data": {
                "&_sch_istable": {
                    "1": "is_table"
                },
                "FUN_0010d21c": {
                    "1": "reverse_demangled_string"
                },
                "__haystack": {
                    "1": "str_haystack",
                    "2": "haystack_string",
                    "20": "haystack",
                    "3": "haystack_var"
                },
                "__ptr": {
                    "1": "ptr_variable",
                    "12": "ptr1",
                    "2": "pointer1",
                    "3": "ptr_var",
                    "6": "ptr_var1"
                },
                "__ptr_00": {
                    "1": "ptr_variable2",
                    "13": "ptr2",
                    "2": "pointer2",
                    "3": "temp_ptr2",
                    "8": "ptr_var2"
                },
                "abort": {
                    "1": "abort_function"
                },
                "bVar": {
                    "1": "byte_variable"
                },
                "bVar1": {
                    "1": "temp_byte",
                    "15": "byte_var1",
                    "2": "temp_byte1",
                    "3": "current_byte",
                    "7": "byte1"
                },
                "bVar14": {
                    "1": "temp_byte",
                    "11": "byte_var14",
                    "2": "temp_byte4",
                    "4": "byte_var4",
                    "5": "byte4"
                },
                "bVar16": {
                    "1": "current_byte",
                    "11": "byte_var16",
                    "2": "byte16",
                    "4": "byte_var5",
                    "5": "byte5"
                },
                "bVar17": {
                    "1": "b_var17",
                    "11": "byte_var17",
                    "2": "byte17",
                    "4": "byte_var6",
                    "5": "byte6"
                },
                "bVar18": {
                    "1": "b_var18",
                    "11": "byte_var18",
                    "2": "temp_byte7",
                    "4": "byte_var7",
                    "5": "byte7"
                },
                "bVar19": {
                    "1": "byte_var5",
                    "11": "byte_var19",
                    "2": "byte19",
                    "4": "byte_var8",
                    "5": "byte8"
                },
                "bVar3": {
                    "1": "temp_byte",
                    "12": "byte_var3",
                    "2": "temp_byte2",
                    "3": "byte_var2",
                    "5": "byte2"
                },
                "bVar5": {
                    "1": "type_byte",
                    "11": "byte_var5",
                    "2": "byte5",
                    "3": "byte_var3",
                    "5": "byte3"
                },
                "byte **param_2": {
                    "1": "byte_ptr_ptr"
                },
                "byte *pbVar10": {
                    "1": "byte_ptr2"
                },
                "byte *pbVar2": {
                    "1": "byte_ptr"
                },
                "byte bVar1": {
                    "1": "byte_var"
                },
                "byte bVar14": {
                    "1": "byte_var4"
                },
                "byte bVar16": {
                    "1": "byte_var5"
                },
                "byte bVar17": {
                    "1": "byte_var6"
                },
                "byte bVar18": {
                    "1": "byte_var7"
                },
                "byte bVar19": {
                    "1": "byte_var8"
                },
                "byte bVar3": {
                    "1": "byte_var2"
                },
                "byte bVar5": {
                    "1": "byte_var3"
                },
                "cVar": {
                    "1": "char_variable"
                },
                "cVar4": {
                    "1": "char_value",
                    "2": "char4",
                    "4": "temp_char",
                    "5": "char1",
                    "6": "char_var1",
                    "7": "char_var4"
                },
                "char *__haystack": {
                    "1": "haystack_str"
                },
                "char *pcVar11": {
                    "1": "ptr_var"
                },
                "char *pcVar13": {
                    "1": "ptr_var2"
                },
                "char *pcVar15": {
                    "1": "ptr_var3"
                },
                "char cVar4": {
                    "1": "char_var"
                },
                "concat": {
                    "1": "concatenate"
                },
                "cplus_demangle": {
                    "1": "c_plus_demangle"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar": {
                    "1": "int_variable"
                },
                "iVar7": {
                    "1": "int_value",
                    "2": "int1",
                    "5": "int_var",
                    "6": "int_var1",
                    "7": "int_var7"
                },
                "int iVar7": {
                    "1": "int_var"
                },
                "local_3c": {
                    "1": "local3c",
                    "11": "local_array",
                    "2": "array",
                    "3": "array_var",
                    "5": "count_array"
                },
                "param_1": {
                    "1": "param_one",
                    "18": "param1",
                    "7": "param_1"
                },
                "param_2": {
                    "1": "input_array_param",
                    "16": "param2",
                    "2": "input_string",
                    "5": "param_2"
                },
                "param_3": {
                    "1": "param_three",
                    "17": "param3",
                    "2": "output_string",
                    "5": "param_3"
                },
                "patched_ptr2": {
                    "1": "patched_ptr2"
                },
                "pbVar": {
                    "1": "byte_pointer"
                },
                "pbVar10": {
                    "1": "inner_pointer",
                    "3": "byte_ptr10",
                    "4": "byte_ptr_var2",
                    "5": "byte_ptr_var10",
                    "7": "byte_ptr2"
                },
                "pbVar2": {
                    "1": "byte_ptr_var1",
                    "3": "byte_ptr1",
                    "4": "byte_ptr",
                    "5": "byte_ptr_var2"
                },
                "pcVar": {
                    "1": "char_pointer"
                },
                "pcVar11": {
                    "1": "pointer_var1",
                    "2": "ptr3",
                    "4": "pc_var11"
                },
                "pcVar13": {
                    "1": "char_ptr2",
                    "2": "ptr4",
                    "4": "var13"
                },
                "pcVar15": {
                    "1": "string_ptr3",
                    "2": "pointer_var15",
                    "4": "var15"
                },
                "sVar": {
                    "1": "size_variable"
                },
                "sVar9": {
                    "1": "length_var",
                    "2": "string_length",
                    "4": "size_var",
                    "6": "size_var9",
                    "8": "size"
                },
                "size_t sVar9": {
                    "1": "size_var"
                },
                "stab_bad_demangle": {
                    "1": "bad_demangle"
                },
                "stab_demangle_count": {
                    "1": "get_demangle_count"
                },
                "stab_demangle_get_count": {
                    "1": "get_demangle_count"
                },
                "stab_demangle_type_lto_priv_0": {
                    "1": "demangle_type_lto_priv0"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "strsav": {
                    "1": "save_string"
                },
                "strstr": {
                    "1": "find_substring"
                },
                "uVar": {
                    "1": "uint_variable"
                },
                "uVar12": {
                    "1": "undefined_var2",
                    "2": "uint_var12",
                    "7": "result2"
                },
                "uVar20": {
                    "1": "counter",
                    "2": "uint2",
                    "5": "uint_var20",
                    "8": "uint_var2"
                },
                "uVar21": {
                    "1": "count_var3",
                    "2": "ulong1",
                    "3": "ulong_var1",
                    "6": "ulong_var21",
                    "7": "ulong_var"
                },
                "uVar6": {
                    "1": "undefined4_var1",
                    "17": "result",
                    "2": "uint_var6",
                    "3": "return_value"
                },
                "uVar8": {
                    "1": "u_var_count",
                    "2": "uint1",
                    "4": "uint_var",
                    "6": "uint_var1"
                },
                "uint local_3c [3]": {
                    "1": "local_int_array"
                },
                "uint uVar20": {
                    "1": "uint_var2"
                },
                "uint uVar8": {
                    "1": "uint_var"
                },
                "ulong uVar21": {
                    "1": "ulong_var"
                },
                "undefined4 uVar6": {
                    "1": "return_value"
                },
                "undefined8 *param_3": {
                    "1": "output_value_ptr"
                },
                "undefined8 param_1": {
                    "1": "input_value"
                },
                "undefined8 uVar12": {
                    "1": "u_var"
                },
                "void *__ptr": {
                    "1": "void_ptr"
                },
                "void *__ptr_00": {
                    "1": "void_ptr2"
                }
            },
            "called": [
                "FUN_00109a0b",
                "FUN_0010c95e",
                "FUN_001048f0",
                "FUN_001040a0",
                "FUN_00104270",
                "FUN_001048c0",
                "FUN_00108e76",
                "FUN_00104320",
                "FUN_00108ea1",
                "FUN_001046b0",
                "FUN_0010911f"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559"
            ],
            "code": "\nundefined4 parse_and_demangle_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte byte_var1;\n  byte *byte_ptr_var2;\n  byte byte_var3;\n  char char_var4;\n  byte byte_var5;\n  undefined4 result;\n  int int_var7;\n  uint uint_var1;\n  size_t size;\n  byte *byte_ptr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *pc_var11;\n  undefined8 result2;\n  char *pc_var13;\n  byte byte_var14;\n  char *pc_var15;\n  byte byte_var16;\n  byte byte_var17;\n  byte byte_var18;\n  byte byte_var19;\n  uint uint_var2;\n  ulong ulong_var;\n  uint local_array [3];\n  \n  byte_ptr_var2 = *param2;\n  *param2 = byte_ptr_var2 + 1;\n  local_array[0] = get_demangle_count(param2);\n  ulong_var = (ulong)local_array[0];\n  if (local_array[0] != 0) {\n    byte_ptr2 = *param2;\n    size = get_string_length((char *)byte_ptr2);\n    if (ulong_var <= size) {\n      *param2 = byte_ptr2 + ulong_var;\n      uint_var2 = 0;\n      result = get_demangle_count(param2,local_array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (local_array[0] <= uint_var2) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)savestring(byte_ptr_var2,(int)*param2 - (int)byte_ptr_var2);\n          ptr2 = (void *)concatenate(\"NoSuchStrinG__\",ptr1,0);\n          free_memory(ptr1);\n          haystack = (char *)c_plus_demangle(ptr2,2);\n          free_memory(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (pc_var11 = find_substring(haystack,\"::NoSuchStrinG\"), pc_var13 = haystack,\n             pc_var15 = haystack, pc_var11 != (char *)0x0)) {\n            for (; pc_var13 != pc_var11; pc_var13 = pc_var13 + 1) {\n              if ((*pc_var13 != ' ') ||\n                 (((pc_var13[1] == '>' && (haystack < pc_var13)) && (pc_var13[-1] == '>')))) {\n                *pc_var15 = *pc_var13;\n                pc_var15 = pc_var15 + 1;\n              }\n            }\n            result2 = savestring(haystack,(int)pc_var15 - (int)haystack);\n            *param3 = result2;\n            free_memory(haystack);\n            return result;\n          }\n          bad_demangle(byte_ptr_var2);\n          free_memory(haystack);\n          return 0;\n        }\n        byte_ptr2 = *param2;\n        if (*byte_ptr2 != 0x5a) {\n          byte_var5 = demangle_type_lto_priv0(param1,param2,0);\n          if (byte_var5 == 0) {\n            return 0;\n          }\n          byte_var3 = 0;\n          byte_var14 = 0;\n          byte_var18 = 0;\n          byte_var17 = 0;\n          byte_var19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte_var16 = byte_var3;\n              byte_var1 = *byte_ptr2;\n              if ((byte_var14 | byte_var1 == 0) != 0) {\n                byte_var5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte_var3 = byte_var5;\n              byte_var14 = byte_var5;\n            } while ('v' < (char)byte_var1);\n            if ((char)byte_var1 < 'b') {\n              if ((char)byte_var1 < 'U') {\n                if ((char)byte_var1 < 'C') goto LAB_0010d2e9;\n                ulong_var = 1L << (byte_var1 + 0xbd & 0x3f);\n                if ((ulong_var & 0x11409) == 0) {\n                  if ((ulong_var & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte_var1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte_var1 + 0xab)) goto LAB_0010d2e9;\n              byte_ptr2 = byte_ptr2 + 1;\n              byte_var3 = byte_var16;\n              byte_var14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte_var1) {\n            case 0x62:\n              byte_var3 = byte_var16;\n              byte_var18 = byte_var5;\n              break;\n            case 99:\n              byte_var3 = byte_var16;\n              byte_var19 = byte_var5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte_var3 = byte_var16;\n              byte_var17 = byte_var5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort_function();\n            }\n          } while( true );\n        }\n        *param2 = byte_ptr2 + 1;\n        char_var4 = demangle_type_lto_priv0(param1,param2,0);\n        if (char_var4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  bad_demangle(byte_ptr_var2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte_var16 == 0) {\n    if (byte_var19 == 0) {\n      if (byte_var18 == 0) {\n        if (byte_var17 == 0) {\n          if (byte_var5 != 0) {\n            uint_var1 = get_demangle_count(param2);\n            if (uint_var1 == 0) goto LAB_0010d280;\n            *param2 = *param2 + uint_var1;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            byte_ptr2 = *param2;\n            if (((is_table)[(ulong)*byte_ptr2 * 2] & 4) == 0) break;\n            *param2 = byte_ptr2 + 1;\n          }\n          if (*byte_ptr2 == 0x2e) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *param2 = byte_ptr2;\n            } while (((is_table)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n          byte_ptr2 = *param2;\n          if (*byte_ptr2 == 0x65) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *param2 = byte_ptr2;\n            } while (((is_table)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uint_var1 = get_demangle_count(param2);\n        if (1 < uint_var1) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      int_var7 = get_demangle_count(param2);\n      if (int_var7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((is_table)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uint_var2 = uint_var2 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "current_name": "parse_and_demangle_0010d21c",
            "entrypoint": "0x0010d21c",
            "imported": false,
            "improved": true,
            "renaming": {
                "&_sch_istable": "is_table",
                "FUN_0010d21c": "parse_and_demangle_0010d21c",
                "__haystack": "haystack",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "abort": "abort_function",
                "bVar": "byte_variable",
                "bVar1": "byte_var1",
                "bVar14": "byte_var14",
                "bVar16": "byte_var16",
                "bVar17": "byte_var17",
                "bVar18": "byte_var18",
                "bVar19": "byte_var19",
                "bVar3": "byte_var3",
                "bVar5": "byte_var5",
                "cVar": "char_variable",
                "cVar4": "char_var4",
                "concat": "concatenate",
                "cplus_demangle": "c_plus_demangle",
                "free": "free_memory",
                "iVar": "int_variable",
                "iVar7": "int_var7",
                "local_3c": "local_array",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pbVar": "byte_pointer",
                "pbVar10": "byte_ptr2",
                "pbVar2": "byte_ptr_var2",
                "pcVar": "char_pointer",
                "pcVar11": "pc_var11",
                "pcVar13": "pc_var13",
                "pcVar15": "pc_var15",
                "sVar": "size_variable",
                "sVar9": "size",
                "stab_bad_demangle": "bad_demangle",
                "stab_demangle_count": "get_demangle_count",
                "stab_demangle_get_count": "get_demangle_count",
                "stab_demangle_type_lto_priv_0": "demangle_type_lto_priv0",
                "strlen": "get_string_length",
                "strstr": "find_substring",
                "uVar": "uint_variable",
                "uVar12": "result2",
                "uVar20": "uint_var2",
                "uVar21": "ulong_var",
                "uVar6": "result",
                "uVar8": "uint_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d559": {
            "additional_data": {
                "FUN_0010d559": {
                    "1": "process_binary_data"
                },
                "__nptr": {
                    "1": "numeric_ptr",
                    "3": "byte_ptr_3"
                },
                "__ptr": {
                    "1": "pointer_variable",
                    "11": "void_ptr",
                    "2": "temp_void_pointer",
                    "9": "void_pointer"
                },
                "__s1": {
                    "1": "type_name_ptr",
                    "2": "char_ptr2",
                    "3": "char_ptr_2"
                },
                "bVar1": {
                    "1": "second_char",
                    "4": "byte_var",
                    "5": "byte_var1",
                    "8": "byte_value",
                    "9": "first_byte"
                },
                "cVar3": {
                    "1": "template_result",
                    "3": "temp_char",
                    "4": "char_var3",
                    "7": "char_var",
                    "8": "char_value"
                },
                "iVar5": {
                    "1": "loop_index",
                    "2": "temp_int",
                    "3": "int_variable",
                    "4": "int_var5",
                    "6": "comparison_result",
                    "7": "int_value"
                },
                "lVar8": {
                    "1": "type_index",
                    "2": "result",
                    "3": "long_var8",
                    "8": "long_var",
                    "9": "long_value"
                },
                "local_40": {
                    "1": "local_array_1",
                    "2": "local_string_array",
                    "4": "char_array",
                    "8": "local_array"
                },
                "local_40[2]": {
                    "1": "local_char_ptr_array"
                },
                "local_64": {
                    "1": "counter1",
                    "2": "local_variable_1",
                    "3": "local_var1",
                    "5": "counter"
                },
                "param_1": {
                    "1": "data",
                    "13": "input_array",
                    "2": "array_ptr",
                    "6": "param_array"
                },
                "param_2": {
                    "1": "byte_pointer_pointer",
                    "2": "input_data",
                    "3": "byte_array_ptr",
                    "5": "byte_array",
                    "6": "input_string"
                },
                "param_3": {
                    "1": "long_value_ptr",
                    "2": "output_array_length",
                    "3": "long_array_ptr"
                },
                "pbVar11": {
                    "1": "temp_string_2_pointer",
                    "2": "updated_byte",
                    "3": "byte_ptr_2",
                    "4": "byte_pointer2"
                },
                "pbVar2": {
                    "1": "string_pointer",
                    "2": "string_ptr",
                    "5": "current_byte",
                    "7": "byte_pointer"
                },
                "pcVar10": {
                    "1": "string_variable",
                    "2": "char_pointer_var10",
                    "4": "char_pointer",
                    "9": "char_ptr"
                },
                "plVar9": {
                    "1": "pointer_long_var9",
                    "10": "long_ptr",
                    "2": "long_pointer_var9",
                    "8": "long_pointer"
                },
                "ppcVar6": {
                    "1": "ppc_variable",
                    "2": "char_double_pointer",
                    "3": "pointer_array",
                    "5": "char_pointer_pointer",
                    "7": "char_ptr_ptr"
                },
                "sVar7": {
                    "1": "temp_size_t",
                    "2": "size_t_var",
                    "3": "size_var7",
                    "5": "size_var",
                    "9": "string_length"
                },
                "uVar12": {
                    "1": "undefined8_var12",
                    "2": "constant_value",
                    "3": "uint_var12",
                    "4": "undefined8_var"
                },
                "uVar4": {
                    "1": "template_count",
                    "2": "demangle_count",
                    "3": "uint_variable",
                    "4": "uint_var4",
                    "6": "uint_value",
                    "7": "uint_var"
                }
            },
            "called": [
                "FUN_00109a0b",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_0010914e",
                "FUN_00108e76",
                "FUN_001129f4",
                "FUN_00113b1e",
                "FUN_0010911f",
                "FUN_00104510",
                "FUN_00104470",
                "FUN_0010d21c",
                "FUN_0010afd5"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 process_binary_data_0010d559(undefined8 *input_array,byte **input_string,long *output_length)\n\n{\n  byte first_byte;\n  byte *byte_ptr;\n  char char_value;\n  uint uint_var;\n  int int_var;\n  char **char_ptr_ptr;\n  size_t string_length;\n  long long_value;\n  long *long_ptr;\n  char *char_ptr;\n  char *char_ptr_2;\n  void *void_ptr;\n  byte *byte_pointer2;\n  undefined8 undefined8_var;\n  byte *byte_ptr_3;\n  int counter;\n  char *local_array [2];\n  \n  byte_ptr = *input_string;\n  first_byte = byte_ptr[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    counter = (char)first_byte + -0x30;\n    if (byte_ptr[2] == 0x5f) {\n      *input_string = byte_ptr + 1;\n    }\n    byte_pointer2 = *input_string + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&_sch_istable)[(ulong)byte_ptr[2] * 2] & 4) == 0)) ||\n       (byte_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    byte_ptr_3 = byte_ptr + 2;\n    long_value = strtol((char *)byte_ptr_3,(char **)0x0,10);\n    counter = (int)long_value;\n    while (((&_sch_istable)[(ulong)*byte_ptr_3 * 2] & 4) != 0) {\n      byte_ptr_3 = byte_ptr_3 + 1;\n    }\n    byte_pointer2 = byte_ptr_3 + 1;\n    if (*byte_ptr_3 != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_string = byte_pointer2;\n  char_ptr_ptr = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    char_ptr_ptr = local_array;\n  }\n  long_value = 0;\n  while( true ) {\n    while( true ) {\n      counter = counter + -1;\n      if (counter == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = long_value;\n        }\n        return 1;\n      }\n      if (**input_string == 0x5f) {\n        *input_string = *input_string + 1;\n      }\n      if (**input_string != 0x74) break;\n      char_value = stab_demangle_template(input_array,input_string,char_ptr_ptr);\n      char_ptr = local_array[0];\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        string_length = strlen(local_array[0]);\n        long_value = stab_find_tagged_type(*input_array,input_array[1],char_ptr,string_length & 0xffffffff,9);\n        free(char_ptr);\n        if (long_value == 0) {\n          return 0;\n        }\n      }\n    }\n    uint_var = stab_demangle_count(input_string);\n    string_length = strlen((char *)*input_string);\n    if (string_length < uint_var) break;\n    if (output_length != (long *)0x0) {\n      if ((long_value != 0) && (long_ptr = (long *)debug_get_fields_isra_0(long_value), long_ptr != (long *)0x0))\n      {\n        char_ptr = (char *)savestring(*input_string,uint_var);\n        for (; long_value = *long_ptr, long_value != 0; long_ptr = long_ptr + 1) {\n          long_value = *(long *)(long_value + 8);\n          if (long_value == 0) {\n            free(char_ptr);\n            return 0;\n          }\n          char_ptr_2 = (char *)debug_get_type_name_constprop_0(long_value);\n          if ((char_ptr_2 != (char *)0x0) && (int_var = strcmp(char_ptr_2,char_ptr), int_var == 0)) break;\n        }\n        free(char_ptr);\n        if (long_value != 0) goto LAB_0010d7ad;\n      }\n      undefined8_var = 9;\n      if (counter == 0) {\n        void_ptr = (void *)savestring(*input_string,uint_var);\n        long_value = debug_find_named_type(*input_array,void_ptr);\n        free(void_ptr);\n        if (long_value != 0) goto LAB_0010d7ad;\n        undefined8_var = 0;\n      }\n      long_value = stab_find_tagged_type(*input_array,input_array[1],*input_string,uint_var,undefined8_var);\n      if (long_value == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_string = *input_string + uint_var;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(byte_ptr);\n  return 0;\n}\n\n",
            "current_name": "process_binary_data_0010d559",
            "entrypoint": "0x0010d559",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d559": "process_binary_data_0010d559",
                "__nptr": "byte_ptr_3",
                "__ptr": "void_ptr",
                "__s1": "char_ptr_2",
                "bVar1": "first_byte",
                "cVar3": "char_value",
                "iVar5": "int_var",
                "lVar8": "long_value",
                "local_40": "local_array",
                "local_64": "counter",
                "param_1": "input_array",
                "param_2": "input_string",
                "param_3": "output_length",
                "pbVar11": "byte_pointer2",
                "pbVar2": "byte_ptr",
                "pcVar10": "char_ptr",
                "plVar9": "long_ptr",
                "ppcVar6": "char_ptr_ptr",
                "sVar7": "string_length",
                "uVar12": "undefined8_var",
                "uVar4": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d7d4": {
            "additional_data": {
                "(ulong)uVar6 << 3": {
                    "1": "bytes_to_allocate"
                },
                "FUN_0010d7d4": {
                    "1": "process_stab_demangle_type",
                    "15": "demangle_and_remember_type",
                    "2": "parse_and_store_types"
                },
                "cVar2": {
                    "1": "is_demangle_successful",
                    "12": "result",
                    "2": "is_demangled",
                    "3": "demangle_result"
                },
                "lVar4": {
                    "1": "array_value",
                    "2": "temp1",
                    "4": "temp_value"
                },
                "local_40": {
                    "1": "type_array",
                    "2": "type_data",
                    "4": "local_array",
                    "9": "temp_array"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "input1",
                    "3": "arg1",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "input2",
                    "3": "arg2"
                },
                "param_3": {
                    "1": "output1",
                    "2": "type_list",
                    "3": "output_buffer",
                    "5": "output_array",
                    "6": "type_array"
                },
                "param_4": {
                    "1": "result_count",
                    "2": "index",
                    "3": "type_count"
                },
                "param_5": {
                    "1": "counter_2",
                    "2": "counter2",
                    "3": "arg5"
                },
                "plVar5": {
                    "1": "temp",
                    "2": "local_buffer",
                    "3": "local_array",
                    "4": "temp_array"
                },
                "stab_demangle_remember_type": {
                    "1": "remember_type"
                },
                "stab_demangle_type_lto_priv_0": {
                    "1": "demangle_type"
                },
                "uVar1": {
                    "1": "first_name",
                    "2": "input_value",
                    "3": "start_address",
                    "4": "first_element"
                },
                "uVar3": {
                    "1": "is_type_remembered",
                    "2": "remember_result",
                    "6": "result",
                    "7": "remembered_type",
                    "9": "return_value"
                },
                "uVar6": {
                    "1": "temp_var",
                    "2": "counter",
                    "3": "new_count"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00109be3",
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010d882"
            ],
            "code": "\nundefined4\ndemangle_and_remember_type_0010d7d4(undefined8 input_param,undefined8 *input_array,long *type_array,uint *arg4,uint *arg5)\n\n{\n  undefined8 first_element;\n  char result;\n  undefined4 return_value;\n  long temp_value;\n  long *temp_array;\n  uint new_count;\n  long temp_array [2];\n  \n  first_element = *input_array;\n  temp_array = temp_array;\n  if (type_array == (long *)0x0) {\n    temp_array = (long *)0x0;\n  }\n  result = demangle_type(input_param,input_array,temp_array);\n  if ((result != '\\0') &&\n     (return_value = remember_type(input_param,first_element,(int)*input_array - (int)first_element),\n     (char)return_value != '\\0')) {\n    if (type_array == (long *)0x0) {\n      return return_value;\n    }\n    if (temp_array[0] != 0) {\n      if (*arg5 <= *arg4 + 1) {\n        new_count = *arg5 + 10;\n        temp_value = *type_array;\n        *arg5 = new_count;\n        temp_value = reallocate_memory(temp_value,(ulong)new_count << 3);\n        *type_array = temp_value;\n      }\n      new_count = *arg4;\n      *(long *)(*type_array + (ulong)new_count * 8) = temp_array[0];\n      *arg4 = new_count + 1;\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "demangle_and_remember_type_0010d7d4",
            "entrypoint": "0x0010d7d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d7d4": "demangle_and_remember_type_0010d7d4",
                "cVar2": "result",
                "lVar4": "temp_value",
                "local_40": "temp_array",
                "param_1": "input_param",
                "param_2": "input_array",
                "param_3": "type_array",
                "param_4": "arg4",
                "param_5": "arg5",
                "plVar5": "temp_array",
                "stab_demangle_remember_type": "remember_type",
                "stab_demangle_type_lto_priv_0": "demangle_type",
                "uVar1": "first_element",
                "uVar3": "return_value",
                "uVar6": "new_count",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d882": {
            "additional_data": {
                "FUN_00108ea1": {
                    "1": "process_arg2"
                },
                "FUN_0010911f": {
                    "1": "perform_some_action"
                },
                "FUN_0010d7d4": {
                    "1": "process_arg1"
                },
                "FUN_0010d882": {
                    "1": "demangle_arguments",
                    "2": "demangle_stab_string"
                },
                "bVar7": {
                    "1": "is_end",
                    "2": "is_not_zero",
                    "8": "loop_condition"
                },
                "cVar3": {
                    "1": "ch",
                    "14": "current_char",
                    "3": "current_character"
                },
                "iVar1": {
                    "1": "num_args",
                    "2": "counter",
                    "3": "iteration_count",
                    "4": "loop_counter",
                    "6": "count"
                },
                "lVar4": {
                    "1": "memory_allocation",
                    "16": "allocated_memory",
                    "3": "allocated_address"
                },
                "local_40": {
                    "1": "arg_address",
                    "2": "arguments_array",
                    "3": "arg_values",
                    "5": "temp_array"
                },
                "local_40 [2]": {
                    "1": "temp_array"
                },
                "local_44": {
                    "1": "loop_var",
                    "2": "loop_counter",
                    "3": "iteration_count",
                    "5": "loop_count"
                },
                "local_48": {
                    "1": "count_2",
                    "2": "index2",
                    "4": "arg_count",
                    "8": "count"
                },
                "local_4c": {
                    "1": "counter",
                    "2": "count2",
                    "3": "count",
                    "4": "temp_value"
                },
                "local_50": {
                    "1": "output_index",
                    "2": "symbol_index",
                    "4": "arg_count",
                    "5": "index"
                },
                "param_ 5": {
                    "1": "count"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "input1"
                },
                "param_2": {
                    "1": "param_names",
                    "2": "input2"
                },
                "param_3": {
                    "1": "arg_array",
                    "2": "output_buffer",
                    "3": "output_address",
                    "6": "output"
                },
                "param_4": {
                    "1": "is_empty",
                    "2": "output_flag",
                    "3": "flag_ptr",
                    "8": "flag"
                },
                "param_5": {
                    "1": "counter",
                    "2": "count_ptr",
                    "3": "count"
                },
                "pcVar2": {
                    "1": "str",
                    "18": "current_char",
                    "2": "current_string",
                    "4": "current_symbol"
                },
                "pcVar5": {
                    "1": "str2",
                    "2": "next_char",
                    "3": "current_char"
                },
                "stab_bad_demangle": {
                    "1": "bad_demangle"
                },
                "stab_demangle_arg": {
                    "1": "decode_argument"
                },
                "stab_demangle_get_count": {
                    "1": "get_count"
                },
                "uVar6": {
                    "1": "temp_count",
                    "3": "arg_index",
                    "5": "count",
                    "9": "index"
                }
            },
            "called": [
                "FUN_0010d7d4",
                "FUN_00108ea1",
                "FUN_0010911f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 demangle_stab_string_0010d882(long input1,char **symbol,long *output,undefined *flag)\n\n{\n  int count;\n  char *current_char;\n  char current_char;\n  long allocated_memory;\n  char *current_string;\n  ulong index;\n  bool loop_condition;\n  uint index;\n  undefined4 temp_value;\n  uint count;\n  int loop_count;\n  undefined8 temp_array [2];\n  \n  current_char = *symbol;\n  temp_value = 10;\n  if (output != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output = allocated_memory;\n    *flag = 0;\n  }\n  index = 0;\n  while( true ) {\n    current_string = *symbol;\n    current_char = *current_string;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *symbol = current_string + 1;\n      if (current_char == 'T') {\n        loop_count = 1;\n      }\n      else {\n        current_char = get_count(symbol,&loop_count);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = get_count(symbol,&count);\n      if ((current_char == '\\0') || (*(uint *)(input1 + 0x28) <= count)) {\nLAB_0010d958:\n        bad_demangle(current_char);\n        return 0;\n      }\n      index = (ulong)count;\n      while (count = loop_count + -1, loop_condition = loop_count != 0, loop_count = count, loop_condition) {\n        temp_array[0] = *(undefined8 *)(*(long *)(input1 + 0x20) + index * 0x10);\n        current_char = decode_argument(input1,temp_array,output,&index,&temp_value);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = decode_argument(input1,symbol,output,&index,&temp_value);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output + (ulong)index * 8) = 0;\n    if (*current_string != 'e') goto LAB_0010d9fa;\n    *flag = 1;\n  }\n  current_string = current_string + 1;\n  *symbol = current_string;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_string >> 8),1);\n}\n\n",
            "current_name": "demangle_stab_string_0010d882",
            "entrypoint": "0x0010d882",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d882": "demangle_stab_string_0010d882",
                "bVar7": "loop_condition",
                "cVar3": "current_char",
                "iVar1": "count",
                "lVar4": "allocated_memory",
                "local_40": "temp_array",
                "local_44": "loop_count",
                "local_48": "count",
                "local_4c": "temp_value",
                "local_50": "index",
                "param_1": "input1",
                "param_2": "symbol",
                "param_3": "output",
                "param_4": "flag",
                "pcVar2": "current_char",
                "pcVar5": "current_string",
                "stab_bad_demangle": "bad_demangle",
                "stab_demangle_arg": "decode_argument",
                "stab_demangle_get_count": "get_count",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010da0b": {
            "additional_data": {
                "FUN_0010da0b": {
                    "1": "allocate_slot",
                    "12": "allocate_and_initialize_slots",
                    "2": "allocate_and_initialize",
                    "3": "allocate_and_initialize_memory",
                    "4": "allocate_and_initialize_slot"
                },
                "auVar7": {
                    "23": "result",
                    "8": "return_value"
                },
                "bVar6": {
                    "1": "byte_value",
                    "2": "is_zero",
                    "3": "counter",
                    "4": "flag"
                },
                "lVar3": {
                    "1": "end_offset",
                    "14": "offset",
                    "3": "adjusted_slot_index",
                    "6": "slot_offset"
                },
                "lVar4": {
                    "1": "num_slots2",
                    "11": "counter",
                    "2": "iteration",
                    "9": "loop_counter"
                },
                "param_1": {
                    "1": "memory_buffer",
                    "2": "memory_pointer",
                    "3": "slots",
                    "5": "slot_list"
                },
                "param_2": {
                    "1": "num_slots",
                    "27": "slot_index",
                    "3": "index"
                },
                "param_3": {
                    "1": "unused_1",
                    "12": "param_3",
                    "2": "arg3",
                    "3": "unused_param_1",
                    "4": "param3"
                },
                "param_4": {
                    "1": "data",
                    "10": "param_4",
                    "2": "arg4",
                    "3": "unused_param_2",
                    "4": "param4"
                },
                "plVar2": {
                    "1": "new_ptr",
                    "16": "new_slot",
                    "4": "allocated_memory"
                },
                "uVar1": {
                    "1": "translated_message",
                    "2": "error_msg",
                    "22": "error_message"
                },
                "uVar5": {
                    "1": "remaining_length",
                    "13": "remaining_slots",
                    "2": "temp_slot_index",
                    "3": "index"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_list,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 error_message;\n  long *new_slot;\n  long offset;\n  long counter;\n  ulong remaining_slots;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_list == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_list = new_slot;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_list = (long **)*slot_list;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*slot_list == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_list = new_slot;\n      for (counter = 0x22; counter != 0; counter = counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = param_4;\n    result._0_8_ = *slot_list + slot_index + offset + 1;\n    return result;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(error_message,slot_index);\n}\n\n",
            "current_name": "allocate_and_initialize_slots_0010da0b",
            "entrypoint": "0x0010da0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "auVar7": "result",
                "bVar6": "flag",
                "lVar3": "offset",
                "lVar4": "counter",
                "param_1": "slot_list",
                "param_2": "slot_index",
                "plVar2": "new_slot",
                "uVar1": "error_message",
                "uVar5": "remaining_slots"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010dac0": {
            "additional_data": {
                "FUN_0010dac0": {
                    "1": "parse_and_create_debug_type",
                    "25": "parse_coff_type",
                    "4": "parse_type"
                },
                "__ptr": {
                    "1": "data1",
                    "11": "ptr1",
                    "2": "pointer1",
                    "3": "enum_names"
                },
                "__ptr_00": {
                    "1": "struct_offsets",
                    "11": "ptr2",
                    "2": "pointer2",
                    "3": "temp_ptr_2"
                },
                "bVar8": {
                    "1": "bitmask",
                    "2": "byte_value",
                    "3": "temp_byte",
                    "4": "type_code",
                    "5": "byte_var"
                },
                "cVar2": {
                    "1": "success_flag",
                    "2": "temp_var_2",
                    "3": "byte_value",
                    "4": "temp_char"
                },
                "iVar9": {
                    "1": "local_var9",
                    "2": "iteration",
                    "3": "iteration_count",
                    "4": "int_var",
                    "5": "index"
                },
                "lVar1": {
                    "1": "type_info",
                    "16": "result",
                    "2": "temp_var_1",
                    "3": "type_code"
                },
                "lVar12": {
                    "1": "loop_index",
                    "2": "loop_counter",
                    "3": "counter",
                    "4": "loop_var"
                },
                "lVar5": {
                    "1": "l_var5",
                    "2": "type_result",
                    "3": "type",
                    "4": "type_info",
                    "7": "result"
                },
                "local_47": {
                    "1": "local_byte_47",
                    "12": "local_byte",
                    "2": "byte_value"
                },
                "local_48": {
                    "1": "temp_char",
                    "12": "local_char",
                    "2": "char_flag",
                    "3": "is_struct"
                },
                "local_68": {
                    "1": "local_array_68",
                    "11": "local_buffer",
                    "2": "syment_buffer",
                    "3": "buffer",
                    "5": "local_array"
                },
                "param_1": {
                    "1": "coff_ptr",
                    "12": "input_param_1",
                    "2": "input1",
                    "3": "file_info",
                    "7": "input_param1"
                },
                "param_2": {
                    "1": "param_b",
                    "19": "symbol_table",
                    "2": "input_param2",
                    "5": "input_param_2"
                },
                "param_3": {
                    "1": "input_3",
                    "11": "input_param_3",
                    "2": "input3",
                    "3": "current_file",
                    "6": "input_param3"
                },
                "param_4": {
                    "1": "input_param3",
                    "11": "input_param_4",
                    "2": "input4",
                    "3": "current_file",
                    "4": "param_4",
                    "7": "input_param4"
                },
                "param_5": {
                    "1": "input_5",
                    "10": "input_param_5",
                    "2": "input5",
                    "7": "input_param5",
                    "8": "type_code"
                },
                "param_6": {
                    "1": "type_info",
                    "2": "input_param6",
                    "3": "symbol_table",
                    "8": "slot_list"
                },
                "param_7": {
                    "1": "input_7",
                    "2": "param7",
                    "3": "param_7",
                    "4": "input_param_7",
                    "5": "byte_count"
                },
                "param_8": {
                    "1": "input_8",
                    "13": "current_file",
                    "2": "input_param8",
                    "3": "input_param_8"
                },
                "pcVar10": {
                    "1": "var_10",
                    "13": "type_name",
                    "2": "temp_char_ptr",
                    "5": "type_string"
                },
                "plVar7": {
                    "1": "debug_type",
                    "2": "pointer_list",
                    "3": "slot",
                    "8": "slot_list"
                },
                "uVar11": {
                    "1": "ulong_var_2",
                    "2": "mask_value",
                    "4": "bit_mask"
                },
                "uVar13": {
                    "1": "uint_var_2",
                    "2": "var13"
                },
                "uVar14": {
                    "1": "temp_var_14",
                    "2": "var14",
                    "4": "ushort_value"
                },
                "uVar15": {
                    "1": "temp_ulong3",
                    "2": "var15",
                    "4": "u_var15"
                },
                "uVar3": {
                    "1": "bfd_error_code",
                    "14": "error_code",
                    "2": "temp_var_3",
                    "4": "temp_uint"
                },
                "uVar4": {
                    "1": "local_var4",
                    "2": "var4",
                    "4": "temp_ulong",
                    "6": "error_message",
                    "7": "error_msg"
                },
                "uVar6": {
                    "1": "temp_ulong2",
                    "2": "var6"
                }
            },
            "called": [
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_00113d3a",
                "FUN_0010dac0",
                "FUN_0010da0b",
                "FUN_00113df2",
                "FUN_00104370",
                "FUN_0010c218",
                "FUN_001046a0",
                "FUN_00113dfe",
                "FUN_00113c43",
                "FUN_001048f0",
                "FUN_00104240",
                "FUN_0010e07c",
                "FUN_001047a0",
                "FUN_00113d6e",
                "FUN_00113e23",
                "FUN_001042b0",
                "FUN_00119ed0",
                "FUN_00113ce0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "code": "\nlong parse_coff_type_0010dac0(long input_param_1,long *symbol_table,long input_param_3,undefined8 input_param_4,uint input_param_5,\n                 long *slot_list,char byte_count,undefined8 current_file)\n\n{\n  long result;\n  char temp_char;\n  undefined4 error_code;\n  undefined8 error_msg;\n  long result;\n  undefined8 var6;\n  long *slot_list;\n  void *ptr1;\n  void *ptr2;\n  byte byte_var;\n  int index;\n  char *type_name;\n  ulong bit_mask;\n  long loop_var;\n  uint shifted_value;\n  uint ushort_value;\n  undefined8 u_var15;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  result = *(long *)(input_param_1 + 0x110);\n  if ((~*(uint *)(result + 0x38) & input_param_5) != 0) {\n    shifted_value = (int)input_param_5 >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    bit_mask = (ulong)(input_param_5 & *(uint *)(result + 0x40));\n    byte_var = (byte)*(undefined4 *)(result + 0x3c);\n    shifted_value = (shifted_value ^ input_param_5) & *(uint *)(result + 0x38) ^ shifted_value;\n    if (bit_mask == 1L << (byte_var & 0x3f)) {\n      error_msg = parse_coff_type_0010dac0(input_param_1,symbol_table,input_param_3,input_param_4,shifted_value,slot_list,byte_count,current_file);\n      result = debug_make_pointer_type_isra_0(error_msg);\n      return result;\n    }\n    if (bit_mask != 2L << (byte_var & 0x3f)) {\n      if (bit_mask != 3L << (byte_var & 0x3f)) {\n        error_msg = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          shifted_value);\n        non_fatal(error_msg,input_param_5);\n        return 0;\n      }\n      ushort_value = 0;\n      if (slot_list != (long *)0x0) {\n        ushort_value = (uint)*(ushort *)(slot_list + 2);\n        slot_list = slot_list + 2;\n        for (index = 0; (*(short *)slot_list != 0 && (index != 3)); index = index + 1) {\n          *(short *)slot_list = *(short *)((long)slot_list + 2);\n          slot_list = (long *)((long)slot_list + 2);\n        }\n        *(short *)slot_list = 0;\n      }\n      u_var15 = 0;\n      error_msg = current_file;\n      var6 = parse_coff_type_0010dac0(input_param_1,symbol_table,input_param_3,input_param_4,shifted_value,slot_list,0);\n      result = *(long *)(input_param_3 + 0x28);\n      if (result == 0) {\n        error_msg = debug_make_int_type_isra_0(4,0,u_var15,error_msg);\n        result = debug_name_type(current_file,\"int\",error_msg);\n        *(long *)(input_param_3 + 0x28) = result;\n      }\n      result = debug_make_array_type_isra_0(var6,result,0,(long)(int)(ushort_value - 1),0);\n      return result;\n    }\n    error_msg = parse_coff_type_0010dac0(input_param_1,symbol_table,input_param_3,input_param_4,shifted_value,slot_list,byte_count,current_file);\n    result = debug_make_function_type_isra_0(error_msg,0,0);\n    return result;\n  }\n  if ((slot_list != (long *)0x0) && (0 < *slot_list)) {\n    slot_list = (long *)coff_get_slot_lto_priv_0(input_param_3);\n    if (*slot_list != 0) {\n      return *slot_list;\n    }\n    result = debug_make_indirect_type_isra_0(slot_list,0);\n    return result;\n  }\n  if (byte_count == '\\0') {\n    slot_list = (long *)0x0;\n  }\n  if (0x10 < input_param_5) {\n    result = debug_make_void_type_isra_0();\n    return result;\n  }\n  result = *(long *)(input_param_3 + 8 + (long)(int)input_param_5 * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(input_param_5) {\n  default:\n    error_msg = debug_make_void_type_isra_0();\n    type_name = \"void\";\n    break;\n  case 2:\n    error_msg = debug_make_int_type_isra_0(1,0);\n    type_name = \"char\";\n    break;\n  case 3:\n    error_msg = debug_make_int_type_isra_0(2,0);\n    type_name = \"short\";\n    break;\n  case 4:\n    error_msg = debug_make_int_type_isra_0(4,0);\n    type_name = \"int\";\n    break;\n  case 5:\n    error_msg = debug_make_int_type_isra_0(4,0);\n    type_name = \"long\";\n    break;\n  case 6:\n    error_msg = debug_make_float_type_isra_0(4);\n    type_name = \"float\";\n    break;\n  case 7:\n    error_msg = debug_make_float_type_isra_0(8);\n    type_name = \"double\";\n    break;\n  case 8:\n    if (slot_list == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    error_msg = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (slot_list == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    error_msg = 9;\nLAB_0010de7a:\n    result = parse_coff_struct_type(input_param_1,symbol_table,input_param_3,error_msg,slot_list,current_file);\nLAB_0010e046:\n    slot_list = (long *)coff_get_slot_lto_priv_0(input_param_3,input_param_4);\n    *slot_list = result;\n    return result;\n  case 10:\n    if (slot_list == (long *)0x0) {\n      result = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      result = slot_list[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      loop_var = 0;\n      do {\n        while( true ) {\n          if ((result <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          index = (int)loop_var;\n          result = *(long *)(*symbol_table + symbol_table[2] * 8);\n          temp_char = bfd_coff_get_syment(input_param_1,result,local_buffer);\n          loop_var = (long)index;\n          if (temp_char == '\\0') {\n            error_code = bfd_get_error();\n            error_msg = bfd_errmsg(error_code);\n            var6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(var6,error_msg);\n            free(ptr1);\n            free(ptr2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)local_byte + 1 + symbol_table[3];\n          if (local_char != '\\x10') break;\n          if ((int)input_param_5 <= index + 1) {\n            input_param_5 = input_param_5 + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)input_param_5 << 3);\n          }\n          loop_var = *(long *)(result + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)index * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)ptr2 + (long)index * 8) =\n               *(long *)(result + 0x10) + *(long *)(loop_var + 0x30);\n          loop_var = (long)(index + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + loop_var * 8) = 0;\n      result = debug_make_enum_type_isra_0(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    error_msg = debug_make_int_type_isra_0(1,1);\n    type_name = \"unsigned char\";\n    break;\n  case 0xd:\n    error_msg = debug_make_int_type_isra_0(2,1);\n    type_name = \"unsigned short\";\n    break;\n  case 0xe:\n    error_msg = debug_make_int_type_isra_0(4,1);\n    type_name = \"unsigned int\";\n    break;\n  case 0xf:\n    error_msg = debug_make_int_type_isra_0(4,1);\n    type_name = \"unsigned long\";\n    break;\n  case 0x10:\n    error_msg = debug_make_float_type_isra_0(0xc);\n    type_name = \"long double\";\n  }\n  result = debug_name_type(current_file,type_name,error_msg);\nLAB_0010e065:\n  *(long *)(input_param_3 + 8 + (long)(int)input_param_5 * 8) = result;\n  return result;\n}\n\n",
            "current_name": "parse_coff_type_0010dac0",
            "entrypoint": "0x0010dac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "byte_var",
                "cVar2": "temp_char",
                "iVar9": "index",
                "lVar1": "result",
                "lVar12": "loop_var",
                "lVar5": "result",
                "local_47": "local_byte",
                "local_48": "local_char",
                "local_68": "local_buffer",
                "param_1": "input_param_1",
                "param_2": "symbol_table",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "slot_list",
                "param_7": "byte_count",
                "param_8": "current_file",
                "pcVar10": "type_name",
                "plVar7": "slot_list",
                "uVar11": "bit_mask",
                "uVar13": "shifted_value",
                "uVar14": "ushort_value",
                "uVar15": "u_var15",
                "uVar3": "error_code",
                "uVar4": "error_msg",
                "uVar6": "var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e07c": {
            "additional_data": {
                "*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)": {
                    "1": "symbol_value_ptr_1"
                },
                "*(undefined8 *)(lVar2 + 0x10)": {
                    "1": "symbol_value_ptr_0"
                },
                "FUN_0010e07c": {
                    "1": "process_coff_data",
                    "2": "parse_coff_data",
                    "3": "parse_coff_types",
                    "5": "parse_coff_type",
                    "8": "parse_coff_symbols"
                },
                "__ptr": {
                    "1": "alloc_ptr",
                    "2": "symbol_info_array",
                    "3": "allocated_memory"
                },
                "bfd_coff_get_syment": {
                    "1": "get_symbol_entry"
                },
                "bfd_errmsg": {
                    "1": "get_bfd_error_message"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "cVar4": {
                    "1": "result_code",
                    "16": "result",
                    "2": "status",
                    "3": "symbol_result"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "debug_make_struct_type_isra_0": {
                    "1": "create_structure_type",
                    "2": "debug_make_struct_type"
                },
                "iVar13": {
                    "1": "var13",
                    "2": "entry_value",
                    "5": "type_offset",
                    "7": "offset"
                },
                "iVar14": {
                    "1": "struct_count",
                    "2": "struct_capacity",
                    "5": "array_size"
                },
                "lVar1": {
                    "1": "length1",
                    "2": "symbol_table_size",
                    "3": "section_header",
                    "4": "symbol_address"
                },
                "lVar12": {
                    "1": "var2",
                    "2": "struct_count",
                    "3": "entry_index"
                },
                "lVar2": {
                    "1": "ptr2",
                    "2": "symbol_address",
                    "3": "symbol_ptr",
                    "4": "symbol_table_entry",
                    "5": "symbol_entry"
                },
                "lVar2 + 0x10": {
                    "1": "symbol_offset"
                },
                "lVar2 + 0x20": {
                    "1": "symbol_table"
                },
                "lVar3": {
                    "1": "sym_count",
                    "2": "num_symbols",
                    "6": "symbol_index"
                },
                "local_56": {
                    "1": "file_symbol_index",
                    "2": "symbol_flags",
                    "3": "coff_type"
                },
                "local_60": {
                    "1": "buffer2",
                    "3": "auxent_buffer",
                    "4": "aux_data",
                    "5": "aux_data_buffer"
                },
                "local_67": {
                    "1": "auxent_part2",
                    "2": "aux_present",
                    "4": "aux_size"
                },
                "local_68": {
                    "1": "local_byte_1",
                    "2": "auxent_type",
                    "3": "aux_type"
                },
                "local_6a": {
                    "1": "local_var_6_a",
                    "2": "section_flags"
                },
                "local_88": {
                    "1": "local_array1",
                    "12": "symbol_name",
                    "2": "buffer",
                    "4": "syment_buffer"
                },
                "local_a8": {
                    "1": "data1",
                    "2": "local_var_a8",
                    "7": "type_low"
                },
                "non_fatal": {
                    "1": "handle_error"
                },
                "param_1": {
                    "1": "param_1_bfd",
                    "19": "param_1",
                    "2": "param1",
                    "3": "param"
                },
                "param_2": {
                    "1": "symbols",
                    "12": "symbol_table",
                    "2": "coff_symbols",
                    "3": "coff_data"
                },
                "param_3": {
                    "1": "symbol_table",
                    "2": "param3",
                    "21": "param_3"
                },
                "param_4": {
                    "1": "architecture",
                    "2": "param4",
                    "20": "param_4"
                },
                "param_5": {
                    "1": "coff_ptr",
                    "12": "param_5",
                    "2": "num_symbols"
                },
                "param_5 + 0x18": {
                    "1": "sym_table_limit"
                },
                "param_6": {
                    "1": "param_6_some_parameter",
                    "2": "param6",
                    "21": "param_6"
                },
                "parse_coff_type_lto_priv_0": {
                    "1": "parse_coff_type_lto"
                },
                "pcVar9": {
                    "1": "error_message_format",
                    "11": "error_message",
                    "3": "err_msg",
                    "9": "error_format"
                },
                "puVar10": {
                    "1": "aux_info_ptr",
                    "2": "aux_ptr",
                    "3": "auxiliary_data",
                    "4": "aux_entry",
                    "8": "aux_data"
                },
                "puVar8": {
                    "1": "ptr2",
                    "2": "new_struct",
                    "4": "symbol_entry"
                },
                "uStack_9c": {
                    "1": "aux_type_high",
                    "2": "aux_high"
                },
                "uStack_a0": {
                    "1": "local_var_3",
                    "2": "local_var_a0"
                },
                "uStack_a4": {
                    "1": "local_2",
                    "2": "symbol_type_high",
                    "7": "type_high"
                },
                "uVar11": {
                    "1": "var1",
                    "2": "value",
                    "3": "aux_value"
                },
                "uVar5": {
                    "1": "u_var",
                    "17": "error_code",
                    "3": "bfd_error_code",
                    "6": "bfd_error"
                },
                "uVar6": {
                    "1": "debug_type",
                    "3": "type",
                    "5": "error_message",
                    "6": "type_value"
                },
                "uVar7": {
                    "1": "type_info_2",
                    "2": "parse_result",
                    "8": "error_message"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001045b0",
                "FUN_001046a0",
                "FUN_001048f0",
                "FUN_00113da9",
                "FUN_00104240",
                "FUN_0010dac0",
                "FUN_001042b0",
                "FUN_001047a0",
                "FUN_00119ed0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010dac0"
            ],
            "code": "\nundefined8\nparse_coff_symbols_0010e07c(undefined8 param_1,long *symbol_table,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long symbol_address;\n  long symbol_entry;\n  long symbol_index;\n  char result;\n  undefined4 error_code;\n  void *allocated_memory;\n  undefined8 type_value;\n  undefined8 error_message;\n  undefined4 *symbol_entry;\n  char *error_message;\n  undefined *aux_data;\n  uint aux_value;\n  long entry_index;\n  int offset;\n  int array_size;\n  undefined4 type_low;\n  undefined4 type_high;\n  undefined4 local_var_a0;\n  undefined4 local_var4;\n  undefined symbol_name [30];\n  undefined2 aux_type;\n  byte aux_type;\n  byte aux_size;\n  undefined aux_data_buffer [10];\n  ushort coff_type;\n  \n  array_size = 10;\n  entry_index = 0;\n  symbol_address = *(long *)(param_5 + 0x18);\n  allocated_memory = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < symbol_address && (symbol_table[2] < symbol_table[1]))) {\n    symbol_entry = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = get_symbol_entry(param_1,symbol_entry,symbol_name);\n    if (result == '\\0') {\n      error_code = get_bfd_error();\n      type_value = get_bfd_error_message(error_code);\n      error_message = \"get_symbol_entry failed: %s\";\nLAB_0010e18d:\n      error_message = get_translation(0,error_message,5);\n      handle_error(error_message,type_value);\n      free(allocated_memory);\n      return 0;\n    }\n    symbol_index = symbol_table[3];\n    aux_data = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = symbol_index + 1 + (ulong)aux_size;\n    if (aux_size != 0) {\n      aux_data = aux_data_buffer;\n      result = bfd_coff_get_auxent(param_1,symbol_entry,0,aux_data);\n      if (result == '\\0') {\n        error_code = get_bfd_error();\n        type_value = get_bfd_error_message(error_code);\n        error_message = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (aux_type == 0x12) {\n      aux_value = (uint)coff_type;\n      offset = (int)*(undefined8 *)(symbol_entry + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_entry + 0x20) + 0x30);\n    }\n    else {\n      if (aux_type < 0x13) {\n        if ((aux_type == 8) || (aux_type == 0xb)) {\n          aux_value = 0;\n          offset = ((int)*(undefined8 *)(symbol_entry + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_entry + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (aux_type == 0x66) break;\n      aux_value = 0;\n      offset = 0;\n    }\nLAB_0010e214:\n    error_message = parse_auxillary_type(param_1,symbol_table,param_3,symbol_index,aux_type,aux_data,1);\n    type_value = *(undefined8 *)(symbol_entry + 8);\n    symbol_entry = (undefined4 *)xmalloc(0x20);\n    type_low = (undefined4)type_value;\n    type_high = (undefined4)((ulong)type_value >> 0x20);\n    local_var_a0 = (undefined4)error_message;\n    local_var4 = (undefined4)((ulong)error_message >> 0x20);\n    *(undefined8 *)(symbol_entry + 5) = 0;\n    symbol_entry[6] = offset;\n    symbol_entry[7] = aux_value;\n    symbol_entry[4] = 0;\n    *symbol_entry = type_low;\n    symbol_entry[1] = type_high;\n    symbol_entry[2] = local_var_a0;\n    symbol_entry[3] = local_var4;\n    if (array_size <= (int)entry_index + 1) {\n      array_size = array_size + 10;\n      allocated_memory = (void *)xrealloc(allocated_memory,(long)array_size << 3,symbol_entry,0,param_6);\n    }\n    *(undefined4 **)((long)allocated_memory + entry_index * 8) = symbol_entry;\n    entry_index = entry_index + 1;\n  }\n  *(undefined8 *)((long)allocated_memory + (long)(int)entry_index * 8) = 0;\n  type_value = debug_make_struct_type(param_4 == 8,*(undefined2 *)(param_5 + 10),allocated_memory);\n  return type_value;\n}\n\n",
            "current_name": "parse_coff_symbols_0010e07c",
            "entrypoint": "0x0010e07c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e07c": "parse_coff_symbols_0010e07c",
                "__ptr": "allocated_memory",
                "bfd_coff_get_syment": "get_symbol_entry",
                "bfd_errmsg": "get_bfd_error_message",
                "bfd_get_error": "get_bfd_error",
                "cVar4": "result",
                "dcgettext": "get_translation",
                "debug_make_struct_type_isra_0": "debug_make_struct_type",
                "iVar13": "offset",
                "iVar14": "array_size",
                "lVar1": "symbol_address",
                "lVar12": "entry_index",
                "lVar2": "symbol_entry",
                "lVar3": "symbol_index",
                "local_56": "coff_type",
                "local_60": "aux_data_buffer",
                "local_67": "aux_size",
                "local_68": "aux_type",
                "local_6a": "aux_type",
                "local_88": "symbol_name",
                "local_a8": "type_low",
                "non_fatal": "handle_error",
                "param_2": "symbol_table",
                "parse_coff_type_lto_priv_0": "parse_auxillary_type",
                "pcVar9": "error_message",
                "puVar10": "aux_data",
                "puVar8": "symbol_entry",
                "uStack_9c": "local_var4",
                "uStack_a0": "local_var_a0",
                "uStack_a4": "type_high",
                "uVar11": "aux_value",
                "uVar5": "error_code",
                "uVar6": "type_value",
                "uVar7": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e2f0": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "1": "process_string_value",
                    "19": "process_string",
                    "3": "process_data"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_error"
                },
                "bfd_hash_lookup": {
                    "1": "hash_lookup"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "lVar1": {
                    "1": "string_length",
                    "2": "var1",
                    "3": "temp1",
                    "4": "hash_result"
                },
                "lVar3": {
                    "1": "tmp2",
                    "2": "hash_lookup_result",
                    "3": "temp2",
                    "4": "lookup_result",
                    "6": "hash_result"
                },
                "lVar7": {
                    "1": "string_length",
                    "2": "temp3",
                    "3": "hash_value"
                },
                "local_3c": {
                    "1": "temp_4",
                    "2": "temp_array",
                    "3": "result2",
                    "4": "local_var2",
                    "7": "local_array"
                },
                "local_44": {
                    "1": "local_var",
                    "2": "local_var44",
                    "3": "result1",
                    "4": "result",
                    "5": "local_var1"
                },
                "non_fatal": {
                    "1": "handle_error"
                },
                "param_1": {
                    "1": "argument_list",
                    "12": "hash_table",
                    "3": "param_list"
                },
                "param_2": {
                    "1": "undefined_param",
                    "10": "param_flag",
                    "2": "param_value",
                    "3": "param",
                    "7": "flag"
                },
                "param_3": {
                    "1": "input_int",
                    "11": "param_int",
                    "2": "param_size",
                    "3": "param3"
                },
                "param_4": {
                    "1": "user_data",
                    "2": "param4",
                    "3": "param_data",
                    "4": "data",
                    "5": "param_value"
                },
                "param_5": {
                    "1": "string_ptr",
                    "2": "key",
                    "4": "str",
                    "5": "input_string",
                    "9": "param_string"
                },
                "sVar6": {
                    "1": "str_len",
                    "14": "string_length",
                    "2": "key_length",
                    "8": "str_length"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uStack_3e": {
                    "1": "stack_var",
                    "2": "stack_var3e",
                    "5": "stack_var3"
                },
                "uStack_3f": {
                    "1": "stack_var",
                    "2": "stack_var3f",
                    "4": "stack_var2"
                },
                "uStack_40": {
                    "1": "stack_var",
                    "2": "stack_flag",
                    "4": "stack_var1"
                },
                "uVar2": {
                    "1": "var4",
                    "10": "error",
                    "2": "bfd_error_code",
                    "5": "bfd_error"
                },
                "uVar4": {
                    "1": "temp_4",
                    "2": "errmsg",
                    "3": "bfd_error_msg",
                    "5": "error_msg",
                    "8": "error_message"
                },
                "uVar5": {
                    "1": "trans_error_msg",
                    "2": "error_message_format",
                    "3": "translated_error_message"
                },
                "xrealloc": {
                    "1": "realloc"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_00104270",
                "FUN_00104560",
                "FUN_00104240",
                "FUN_001042b0",
                "FUN_001047a0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_0010ec73",
                "FUN_0010e6a8",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010edb4",
                "FUN_0010e5db",
                "FUN_0010e9a0",
                "FUN_0010e8a9",
                "FUN_0010e439",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010ed2c",
                "FUN_0010ebb0"
            ],
            "code": "\nundefined8\nprocess_string_0010e2f0(long *param_array,undefined param_flag,int param_int,undefined8 param_value,char *param_string)\n\n{\n  long hash_result;\n  undefined4 error;\n  long hash_result;\n  undefined8 error_message;\n  undefined8 localized_error_message;\n  size_t string_length;\n  long hash_value;\n  undefined4 local_var1;\n  undefined stack_var1;\n  undefined stack_var2;\n  undefined2 stack_var3;\n  undefined4 local_array [3];\n  \n  if (param_string == (char *)0x0) {\n    hash_value = 0;\n  }\n  else {\n    hash_result = hash_lookup(param_array + 7,param_string,1,1);\n    if (hash_result == 0) {\n      error = get_error();\n      error_message = get_error_message(error);\n      localized_error_message = get_message(0,\"string_hash_lookup failed: %s\",5);\n      handle_error(localized_error_message,error_message);\n      return 0;\n    }\n    hash_value = *(long *)(hash_result + 0x20);\n    if (hash_value == -1) {\n      hash_value = param_array[6];\n      hash_result = param_array[5];\n      *(long *)(hash_result + 0x20) = hash_value;\n      if (hash_result == 0) {\n        param_array[4] = hash_result;\n      }\n      else {\n        *(long *)(hash_result + 0x18) = hash_result;\n      }\n      param_array[5] = hash_result;\n      string_length = get_string_length(param_string);\n      param_array[6] = hash_value + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*param_array + 8) + 0x50))(hash_value,&local_var1);\n  stack_var2 = 0;\n  stack_var1 = param_flag;\n  (**(code **)(*(long *)(*param_array + 8) + 0x68))((long)param_int,&stack_var3);\n  (**(code **)(*(long *)(*param_array + 8) + 0x50))(param_value,local_array);\n  if ((ulong)param_array[3] < param_array[2] + 0xcU) {\n    param_array[3] = param_array[3] * 2;\n    hash_value = reallocate_memory(param_array[1]);\n    param_array[1] = hash_value;\n  }\n  hash_value = param_array[2];\n  hash_result = param_array[1];\n  *(ulong *)(hash_result + hash_value) = CONCAT26(stack_var3,CONCAT15(stack_var2,CONCAT14(stack_var1,local_var1)));\n  *(undefined4 *)(hash_result + 8 + hash_value) = local_array[0];\n  param_array[2] = param_array[2] + 0xc;\n  return CONCAT71((int7)((ulong)hash_value >> 8),1);\n}\n\n",
            "current_name": "process_string_0010e2f0",
            "entrypoint": "0x0010e2f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_error",
                "bfd_hash_lookup": "hash_lookup",
                "dcgettext": "get_message",
                "lVar1": "hash_result",
                "lVar3": "hash_result",
                "lVar7": "hash_value",
                "local_3c": "local_array",
                "local_44": "local_var1",
                "non_fatal": "handle_error",
                "param_1": "param_array",
                "param_2": "param_flag",
                "param_3": "param_int",
                "param_4": "param_value",
                "param_5": "param_string",
                "sVar6": "string_length",
                "strlen": "get_string_length",
                "uStack_3e": "stack_var3",
                "uStack_3f": "stack_var2",
                "uStack_40": "stack_var1",
                "uVar2": "error",
                "uVar4": "error_message",
                "uVar5": "localized_error_message",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e439": {
            "additional_data": {
                "*(undefined8 *)(param_1 + 0x210)": {
                    "1": "symbol_address"
                },
                "FUN_0010e2f0": {
                    "1": "fun_process_param",
                    "4": "process_data"
                },
                "FUN_0010e439": {
                    "1": "write_symbol_to_buffer",
                    "2": "write_symbol_to_stab",
                    "6": "set_symbol_and_write"
                },
                "param_1": {
                    "1": "object_pointer",
                    "2": "memory_address",
                    "20": "base_address"
                },
                "param_2": {
                    "1": "new_symbol_value",
                    "13": "symbol_value",
                    "2": "param_value",
                    "3": "symbol_address"
                },
                "param_3": {
                    "1": "undefined_value_1",
                    "2": "param_3",
                    "3": "param3"
                },
                "param_4": {
                    "1": "param",
                    "3": "param4",
                    "4": "param_4"
                },
                "param_5": {
                    "1": "data",
                    "3": "param_5",
                    "4": "symbol_name"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_lto",
                    "2": "write_stab_symbol",
                    "3": "write_symbol"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_0010e451",
                "FUN_0011378f"
            ],
            "code": "\nvoid set_symbol_and_write_0010e439(long base_address,undefined8 symbol_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = symbol_value;\n  write_symbol(base_address,0x84,0,0,symbol_value);\n  return;\n}\n\n",
            "current_name": "set_symbol_and_write_0010e439",
            "entrypoint": "0x0010e439",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e439": "set_symbol_and_write_0010e439",
                "param_1": "base_address",
                "param_2": "symbol_value",
                "stab_write_symbol_lto_priv_0": "write_symbol"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e451": {
            "called": [
                "FUN_0010e439"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "current_name": "FUN_0010e451",
            "entrypoint": "0x0010e451",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_0010e453": {
            "additional_data": {
                "FUN_00109b52": {
                    "1": "push_string"
                },
                "FUN_00109cf4": {
                    "1": "stab_write_symbol_lto_priv_0"
                },
                "FUN_0010e2f0": {
                    "1": "create_symbol_string"
                },
                "FUN_0010e453": {
                    "1": "process_symbol",
                    "2": "add_symbol_to_table"
                },
                "__s": {
                    "1": "new_str",
                    "13": "formatted_string",
                    "2": "symbol",
                    "3": "formatted_symbol",
                    "4": "new_string"
                },
                "cVar2": {
                    "1": "is_string_pushed",
                    "17": "result",
                    "2": "success",
                    "5": "status"
                },
                "free": {
                    "1": "free_memory"
                },
                "lVar1": {
                    "1": "array_element",
                    "2": "symbol",
                    "6": "length"
                },
                "lVar5": {
                    "1": "counter1",
                    "2": "total_length",
                    "3": "length",
                    "4": "count",
                    "5": "type_count",
                    "8": "counter"
                },
                "lVar7": {
                    "1": "pointer_counter",
                    "11": "offset",
                    "2": "array_index",
                    "5": "index"
                },
                "param_1": {
                    "1": "symbol_address",
                    "10": "symbol_table",
                    "2": "table",
                    "4": "address",
                    "6": "input"
                },
                "param_2": {
                    "1": "function_name",
                    "3": "string",
                    "4": "string1",
                    "6": "symbol_name",
                    "9": "input_string"
                },
                "param_3": {
                    "1": "str_list",
                    "12": "string_array",
                    "2": "type_names",
                    "3": "types"
                },
                "param_4": {
                    "1": "param_4"
                },
                "param_5": {
                    "1": "undefined_parameter"
                },
                "ppcVar6": {
                    "1": "modifiers_list",
                    "11": "current_string",
                    "3": "type_ptr"
                },
                "sVar3": {
                    "1": "symbol_name_length",
                    "17": "string_length",
                    "2": "size",
                    "9": "length"
                },
                "sprintf": {
                    "2": "format_string"
                },
                "stab_push_defined_type": {
                    "1": "push_defined_type_to_symbol_table"
                },
                "stab_push_string": {
                    "1": "push_string"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol"
                },
                "strlen": {
                    "2": "get_string_length"
                },
                "uVar4": {
                    "1": "return_val",
                    "11": "result",
                    "2": "success_flag",
                    "7": "return_value",
                    "9": "success"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 reverse_string_0010e453(long symbol_table,char *input_string,char **string_array)\n\n{\n  long length;\n  char result;\n  size_t string_length;\n  undefined2 *formatted_string;\n  undefined8 result;\n  long counter;\n  char **current_string;\n  long offset;\n  \n  if (string_array == (char **)0x0) {\n    if (input_string != (char *)0x0) {\n      string_length = get_string_length(input_string);\n      formatted_string = (undefined2 *)allocate_memory(string_length + 10);\n      format_string((char *)formatted_string,\"xe%s:\",input_string);\nLAB_0010e578:\n      result = push_string(symbol_table,formatted_string,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    result = 0;\n  }\n  else {\n    counter = 10;\n    current_string = string_array;\n    if (input_string != (char *)0x0) {\n      string_length = get_string_length(input_string);\n      counter = string_length + 10;\n    }\n    for (; *current_string != (char *)0x0; current_string = current_string + 1) {\n      string_length = get_string_length(*current_string);\n      counter = counter + 0x14 + string_length;\n    }\n    formatted_string = (undefined2 *)allocate_memory(counter);\n    if (input_string == (char *)0x0) {\n      *formatted_string = 0x65;\n      counter = 0;\n    }\n    else {\n      counter = *(long *)(symbol_table + 0x68);\n      *(long *)(symbol_table + 0x68) = counter + 1;\n      format_string((char *)formatted_string,\"%s:T%ld=e\",input_string,counter);\n    }\n    offset = 0;\n    while( true ) {\n      length = *(long *)((long)string_array + offset);\n      string_length = get_string_length((char *)formatted_string);\n      if (length == 0) break;\n      offset = offset + 8;\n      format_string((char *)(undefined2 *)((long)formatted_string + string_length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_string + string_length) = 0x3b;\n    if (input_string == (char *)0x0) goto LAB_0010e578;\n    result = write_symbol(symbol_table,0x80,0,0,formatted_string);\n    if ((result == '\\0') || (result = push_type(symbol_table,counter,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    release_memory(formatted_string);\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "reverse_string_0010e453",
            "entrypoint": "0x0010e453",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e453": "reverse_string_0010e453",
                "__s": "formatted_string",
                "cVar2": "result",
                "free": "release_memory",
                "lVar1": "length",
                "lVar5": "counter",
                "lVar7": "offset",
                "param_1": "symbol_table",
                "param_2": "input_string",
                "param_3": "string_array",
                "ppcVar6": "current_string",
                "sVar3": "string_length",
                "sprintf": "format_string",
                "stab_push_defined_type": "push_type",
                "stab_push_string": "push_string",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "strlen": "get_string_length",
                "uVar4": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e5db": {
            "additional_data": {
                "FUN_0010e5db": {
                    "1": "reverse_symbol_and_modify_type",
                    "2": "reverse_and_modify_types",
                    "3": "process_data",
                    "4": "reverse_and_modify"
                },
                "__ptr": {
                    "1": "allocated_memory",
                    "2": "ptr_var",
                    "3": "ptr_variable",
                    "5": "ptr_to_free",
                    "9": "ptr"
                },
                "__s": {
                    "1": "symbol_name",
                    "2": "string_pointer",
                    "3": "string_variable",
                    "4": "string_to_free",
                    "6": "str"
                },
                "__s_00": {
                    "1": "new_string_ptr",
                    "2": "formatted_string",
                    "3": "new_string",
                    "7": "new_str",
                    "9": "modified_string"
                },
                "auVar4": {
                    "1": "result_var",
                    "10": "return_value",
                    "12": "result",
                    "3": "modified_return_value"
                },
                "cVar1": {
                    "1": "symbol_status",
                    "2": "char_result",
                    "3": "write_success",
                    "4": "symbol_written"
                },
                "free": {
                    "1": "release_memory"
                },
                "iVar3": {
                    "1": "iteration",
                    "12": "iteration_count",
                    "2": "loop_counter",
                    "5": "counter"
                },
                "in_R10": {
                    "1": "arg",
                    "2": "register_value",
                    "3": "additional_data",
                    "4": "some_value"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data",
                    "3": "param_pointer",
                    "4": "input_param"
                },
                "param_1 + 0x188": {
                    "1": "ptr1"
                },
                "param_1 + 0x60": {
                    "1": "ptr_to_struct"
                },
                "param_1 + 400": {
                    "1": "ptr2"
                },
                "param_2": {
                    "1": "iteration_count",
                    "2": "loop_limit",
                    "3": "length",
                    "5": "limit",
                    "6": "num_iterations"
                },
                "ptr_param + 0x1c": {
                    "1": "ptr_val"
                },
                "sVar2": {
                    "1": "len",
                    "18": "string_length",
                    "2": "str_len",
                    "3": "symbol_length",
                    "6": "str_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stab_modify_type": {
                    "1": "modify_type_function",
                    "2": "modify_type"
                },
                "stab_pop_type": {
                    "1": "pop_type_function",
                    "2": "pop_type"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_function",
                    "2": "write_symbol"
                },
                "strlen": {
                    "1": "calculate_string_length"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109ed3",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] reverse_and_modify_0010e5db(long input_param,int num_iterations)\n\n{\n  char symbol_write_result;\n  void *ptr;\n  char *str;\n  size_t string_length;\n  char *modified_string;\n  ulong some_value;\n  int iteration_count;\n  undefined result [16];\n  \n  iteration_count = 0;\n  do {\n    if (num_iterations <= iteration_count) {\n      result = modify_type(input_param,0x66,0,input_param + 0x188,input_param + 400,some_value);\n      return result;\n    }\n    if (*(char *)(*(long *)(input_param + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)pop_type(input_param);\n      release_memory(ptr);\n    }\n    else {\n      str = (char *)pop_type(input_param);\n      string_length = calculate_string_length(str);\n      modified_string = (char *)allocate_memory(string_length + 3);\n      format_string(modified_string,\":t%s\",str);\n      release_memory(str);\n      symbol_write_result = write_symbol(input_param,0x80,0,0,modified_string);\n      if (symbol_write_result == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = some_value;\n        return result << 0x40;\n      }\n      release_memory(modified_string);\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "current_name": "reverse_and_modify_0010e5db",
            "entrypoint": "0x0010e5db",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e5db": "reverse_and_modify_0010e5db",
                "__ptr": "ptr",
                "__s": "str",
                "__s_00": "modified_string",
                "auVar4": "result",
                "cVar1": "symbol_write_result",
                "free": "release_memory",
                "iVar3": "iteration_count",
                "in_R10": "some_value",
                "param_1": "input_param",
                "param_2": "num_iterations",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "stab_modify_type": "modify_type",
                "stab_pop_type": "pop_type",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "strlen": "calculate_string_length",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e6a8": {
            "additional_data": {
                "FUN_0010e6a8": {
                    "1": "write_symbol_to_lto",
                    "2": "write_symbol_to_binary",
                    "3": "write_symbol",
                    "8": "process_symbol"
                },
                "__s": {
                    "1": "popped_type",
                    "10": "type",
                    "2": "type_string",
                    "3": "pop_type_string",
                    "4": "symbol_type"
                },
                "__s_00": {
                    "1": "combined_str",
                    "11": "formatted_symbol",
                    "2": "new_string",
                    "8": "formatted_string"
                },
                "auVar10": {
                    "1": "output_data",
                    "10": "return_value",
                    "2": "return_struct",
                    "8": "result"
                },
                "auVar10._0_8_": {
                    "1": "return_value"
                },
                "auVar10._8_8_": {
                    "2": "param_4"
                },
                "bfd_errmsg": {
                    "1": "errmsg"
                },
                "bfd_get_error": {
                    "2": "get_error"
                },
                "bfd_hash_lookup": {
                    "2": "hash_lookup"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "free": {
                    "2": "release_memory"
                },
                "lVar5": {
                    "1": "symbol_lookup",
                    "11": "hash_lookup_result",
                    "15": "lookup_result",
                    "2": "symbol_lookup_result"
                },
                "lVar8": {
                    "1": "symbol_id",
                    "2": "index",
                    "3": "type_count",
                    "6": "counter"
                },
                "non_fatal": {
                    "1": "report_error"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "input_param",
                    "3": "binary_param",
                    "9": "symbol_table"
                },
                "param_2": {
                    "1": "input_string_1",
                    "18": "symbol_name",
                    "3": "string_param",
                    "4": "input_string"
                },
                "param_3": {
                    "1": "input_value_1",
                    "14": "param_3",
                    "15": "param3"
                },
                "param_4": {
                    "1": "input_value_2",
                    "12": "param_4",
                    "15": "param4"
                },
                "param_5": {
                    "1": "symbol_string"
                },
                "sVar3": {
                    "1": "symbol_length",
                    "16": "symbol_name_length",
                    "3": "symbol_len"
                },
                "sVar4": {
                    "1": "type_symbol_length",
                    "2": "type_string_length",
                    "3": "type_name_length",
                    "4": "symbol_type_length",
                    "8": "type_length"
                },
                "sprintf": {
                    "2": "format_string"
                },
                "stab_pop_type": {
                    "1": "pop_type_function"
                },
                "stab_write_symbol_lto_priv_0": {
                    "2": "write_symbol"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar1": {
                    "1": "symbol_status",
                    "2": "write_symbol_result",
                    "3": "write_status",
                    "9": "write_result"
                },
                "uVar2": {
                    "1": "var2",
                    "11": "symbol_type",
                    "2": "counter_value"
                },
                "uVar6": {
                    "1": "get_error_msg",
                    "2": "error_msg",
                    "3": "bfd_errmsg_result",
                    "9": "error_message"
                },
                "uVar7": {
                    "1": "error_format_string",
                    "2": "error_msg_template",
                    "3": "error_format",
                    "4": "error_message",
                    "6": "error_msg"
                },
                "uVar9": {
                    "1": "output_result",
                    "11": "return_value",
                    "2": "u_var9",
                    "8": "result"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00104560",
                "FUN_00104240",
                "FUN_00109b2f",
                "FUN_001047a0",
                "FUN_00104390",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] process_symbol_0010e6a8(long symbol_table,char *symbol_name,undefined8 param3,undefined8 param4)\n\n{\n  uint write_result;\n  undefined4 symbol_type;\n  char *type;\n  size_t symbol_name_length;\n  size_t type_length;\n  char *formatted_symbol;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_msg;\n  long symbol_index;\n  ulong return_value;\n  undefined return_value [16];\n  \n  symbol_index = *(long *)(*(long *)(symbol_table + 0x60) + 0x10);\n  symbol_type = *(undefined4 *)(*(long *)(symbol_table + 0x60) + 0x18);\n  type = (char *)pop_type();\n  symbol_name_length = get_string_length(symbol_name);\n  type_length = get_string_length(type);\n  formatted_symbol = (char *)allocate_memory(symbol_name_length + 0x14 + type_length);\n  if (symbol_index < 1) {\n    symbol_index = *(long *)(symbol_table + 0x68);\n    *(long *)(symbol_table + 0x68) = symbol_index + 1;\n    format_string(formatted_symbol,\"%s:t%ld=%s\",symbol_name,symbol_index,type);\n  }\n  else {\n    format_string(formatted_symbol,\"%s:t%s\",symbol_name,type);\n  }\n  release_memory(type);\n  write_result = write_symbol(symbol_table,0x80,0,0,formatted_symbol);\n  return_value = (ulong)write_result;\n  if ((char)write_result != '\\0') {\n    release_memory(formatted_symbol);\n    lookup_result = hash_lookup(symbol_table + 0x1b8,symbol_name,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = symbol_index;\n      *(undefined4 *)(lookup_result + 0x28) = symbol_type;\n      goto LAB_0010e7b3;\n    }\n    symbol_type = get_error();\n    error_message = error_message(symbol_type);\n    error_msg = get_text(0,\"string_hash_lookup failed: %s\",5);\n    report_error(error_msg,error_message);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  param_4 = param4;\n  return_value = return_value;\n  return return_value;\n}\n\n",
            "current_name": "process_symbol_0010e6a8",
            "entrypoint": "0x0010e6a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e6a8": "process_symbol_0010e6a8",
                "__s": "type",
                "__s_00": "formatted_symbol",
                "auVar10": "return_value",
                "auVar10._0_8_": "return_value",
                "auVar10._8_8_": "param_4",
                "bfd_errmsg": "error_message",
                "bfd_get_error": "get_error",
                "bfd_hash_lookup": "hash_lookup",
                "dcgettext": "get_text",
                "free": "release_memory",
                "lVar5": "lookup_result",
                "lVar8": "symbol_index",
                "non_fatal": "report_error",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "param3",
                "param_4": "param4",
                "sVar3": "symbol_name_length",
                "sVar4": "type_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "strlen": "get_string_length",
                "uVar1": "write_result",
                "uVar2": "symbol_type",
                "uVar6": "error_message",
                "uVar7": "error_msg",
                "uVar9": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e7c2": {
            "additional_data": {
                "FUN_0010e7c2": {
                    "1": "process_symbol",
                    "10": "reverse_and_write_symbol",
                    "2": "create_symbol_with_prefix"
                },
                "__s": {
                    "1": "str2",
                    "2": "popped_type",
                    "3": "symbol",
                    "8": "popped_string"
                },
                "__s_00": {
                    "1": "final_symbol",
                    "2": "formatted_string",
                    "3": "combined_string",
                    "5": "new_string"
                },
                "auVar3": {
                    "1": "output",
                    "2": "return_value",
                    "26": "result"
                },
                "char *param_2": {
                    "1": "symbol_name"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "param_1": {
                    "1": "input1",
                    "2": "param_1",
                    "3": "arg1",
                    "8": "symbol"
                },
                "param_2": {
                    "1": "input2",
                    "2": "symbol",
                    "3": "original_string",
                    "4": "prefix"
                },
                "param_3": {
                    "1": "param_length",
                    "2": "unknown",
                    "4": "param3",
                    "9": "param_3"
                },
                "param_4": {
                    "1": "user_input",
                    "2": "arg4",
                    "5": "data"
                },
                "param_5": {
                    "1": "string2"
                },
                "sVar1": {
                    "1": "name_len",
                    "2": "symbol_length",
                    "3": "source_length",
                    "4": "prefix_length"
                },
                "sVar2": {
                    "1": "type_name_length",
                    "2": "length2",
                    "4": "symbol_length",
                    "6": "popped_string_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stab_pop_type": {
                    "1": "pop_symbol_from_table"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_to_table"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] reverse_and_write_symbol_0010e7c2(undefined8 symbol,char *prefix,undefined8 param_3,undefined8 param4)\n\n{\n  char *popped_string;\n  size_t prefix_length;\n  size_t popped_string_length;\n  char *new_symbol;\n  undefined result [16];\n  \n  popped_string = (char *)pop_symbol_from_table();\n  prefix_length = get_string_length(prefix);\n  popped_string_length = get_string_length(popped_string);\n  new_symbol = (char *)allocate_memory(prefix_length + 3 + popped_string_length);\n  format_string(new_symbol,\"%s:T%s\",prefix,popped_string);\n  deallocate_memory(popped_string);\n  result._0_4_ = write_symbol_to_table(symbol,0x80,0,0,new_symbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    deallocate_memory(new_symbol);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "reverse_and_write_symbol_0010e7c2",
            "entrypoint": "0x0010e7c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e7c2": "reverse_and_write_symbol_0010e7c2",
                "__s": "popped_string",
                "__s_00": "new_symbol",
                "auVar3": "result",
                "free": "deallocate_memory",
                "param_1": "symbol",
                "param_2": "prefix",
                "param_4": "param4",
                "sVar1": "prefix_length",
                "sVar2": "popped_string_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_symbol_from_table",
                "stab_write_symbol_lto_priv_0": "write_symbol_to_table",
                "strlen": "get_string_length",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e842": {
            "additional_data": {
                "FUN_0010e842": {
                    "1": "write_symbol_to_lto",
                    "2": "write_symbol_to_file",
                    "3": "write_symbol",
                    "7": "write_symbol_to_stab"
                },
                "__s": {
                    "1": "extended_symbol",
                    "13": "formatted_symbol",
                    "2": "formatted_str",
                    "3": "new_symbol",
                    "4": "formatted_string"
                },
                "auVar2": {
                    "1": "return_value",
                    "30": "result"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "param_1": {
                    "1": "data",
                    "12": "symbol_table",
                    "2": "symbol",
                    "3": "file_descriptor"
                },
                "param_2": {
                    "1": "str",
                    "15": "symbol_name",
                    "2": "name",
                    "3": "input_string",
                    "7": "symbol"
                },
                "param_3": {
                    "1": "param3_value",
                    "10": "counter",
                    "2": "count",
                    "3": "integer_value",
                    "5": "index"
                },
                "param_4": {
                    "1": "param_value2",
                    "11": "data",
                    "13": "param_4",
                    "2": "param4"
                },
                "param_5": {
                    "1": "new_parameter"
                },
                "sVar1": {
                    "1": "symbol_len",
                    "11": "symbol_length",
                    "2": "string_length",
                    "3": "name_length",
                    "8": "symbol_name_length"
                },
                "sprintf": {
                    "1": "format_symbol"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_to_private_lto_file"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] write_symbol_to_stab_0010e842(undefined8 symbol_table,char *symbol_name,undefined8 counter,undefined8 param_4)\n\n{\n  size_t symbol_length;\n  char *formatted_symbol;\n  undefined result [16];\n  \n  symbol_length = strlen(symbol_name);\n  formatted_symbol = (char *)allocate_memory(symbol_length + 0x14);\n  format_symbol(formatted_symbol,\"%s:c=i%ld\",symbol_name,counter);\n  result._0_4_ = write_symbol_to_lto(symbol_table,0x80,0,0,formatted_symbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    deallocate_memory(formatted_symbol);\n  }\n  result._8_8_ = param_4;\n  return result;\n}\n\n",
            "current_name": "write_symbol_to_stab_0010e842",
            "entrypoint": "0x0010e842",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e842": "write_symbol_to_stab_0010e842",
                "__s": "formatted_symbol",
                "auVar2": "result",
                "free": "deallocate_memory",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "counter",
                "sVar1": "symbol_length",
                "sprintf": "format_symbol",
                "stab_write_symbol_lto_priv_0": "write_symbol_to_lto",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e8a9": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "1": "get_data_and_write_symbol"
                },
                "FUN_0010e8a9": {
                    "1": "write_lto_private_symbol",
                    "2": "write_symbol",
                    "3": "write_symbol_to_lto",
                    "5": "write_symbol_lto"
                },
                "__s": {
                    "1": "new_str",
                    "13": "formatted_string",
                    "2": "new_symbol",
                    "3": "new_string",
                    "6": "formatted_symbol"
                },
                "param_1": {
                    "1": "symbol_name",
                    "15": "param_1",
                    "9": "param1"
                },
                "param_2": {
                    "1": "param_b",
                    "10": "param2",
                    "15": "param_2"
                },
                "param_3": {
                    "1": "data",
                    "11": "input_string",
                    "2": "string",
                    "4": "symbol",
                    "6": "symbol_name"
                },
                "param_4": {
                    "2": "param_4"
                },
                "param_5": {
                    "1": "symbol_value",
                    "2": "param_5"
                },
                "sVar2": {
                    "1": "filename_length",
                    "2": "source_length",
                    "5": "input_length",
                    "7": "symbol_length"
                },
                "uVar1": {
                    "1": "write_result",
                    "2": "status",
                    "26": "result"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_lto_0010e8a9(undefined8 param_1,undefined8 param_2,char *input_string)\n\n{\n  undefined4 result;\n  size_t string_length;\n  char *formatted_string;\n  \n  string_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=f%g\",param_1,input_string);\n  result = stab_write_symbol_lto_0010e8a9_priv_0(param_2,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "write_symbol_lto_0010e8a9",
            "entrypoint": "0x0010e8a9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e8a9": "write_symbol_lto_0010e8a9",
                "__s": "formatted_string",
                "param_3": "input_string",
                "sVar2": "string_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e918": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_symbol"
                },
                "FUN_0010e2f0": {
                    "1": "pop_type_from_symbol_table",
                    "2": "pop_type"
                },
                "FUN_0010e918": {
                    "1": "write_symbol_to_file",
                    "2": "write_symbol",
                    "3": "write_symbol_to_lto",
                    "6": "write_symbol_with_params"
                },
                "__s": {
                    "1": "context_str",
                    "11": "type",
                    "2": "popped_type",
                    "3": "symbol",
                    "4": "popped_string"
                },
                "__s_00": {
                    "1": "allocated_string_with_param",
                    "2": "combined_string",
                    "4": "formatted_symbol",
                    "6": "formatted_string"
                },
                "free": {
                    "1": "release_memory"
                },
                "param_1": {
                    "1": "output_file",
                    "10": "symbol_table",
                    "2": "file_descriptor",
                    "5": "output_buffer"
                },
                "param_2": {
                    "1": "substring",
                    "2": "data",
                    "7": "input_string",
                    "9": "symbol_name"
                },
                "param_3": {
                    "1": "param3_value",
                    "10": "value",
                    "2": "length",
                    "3": "input_number",
                    "5": "symbol_value"
                },
                "param_4": {
                    "1": "unused_parameter"
                },
                "param_5": {
                    "1": "suffix"
                },
                "sVar2": {
                    "1": "original_str_length",
                    "2": "data_length",
                    "7": "symbol_name_length"
                },
                "sVar3": {
                    "1": "length2",
                    "10": "type_length",
                    "2": "previous_symbol_length",
                    "3": "symbol_length",
                    "4": "popped_string_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stab_pop_type": {
                    "1": "pop_symbol",
                    "4": "pop_type"
                },
                "stab_pop_type()": {
                    "1": "pop_type"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_lto",
                    "2": "write_symbol_lto_priv_0",
                    "3": "write_symbol"
                },
                "uVar1": {
                    "1": "return_value",
                    "15": "result",
                    "3": "status"
                },
                "xmalloc": {
                    "4": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_with_params_0010e918(undefined8 symbol_table,char *symbol_name,undefined8 value)\n\n{\n  undefined4 result;\n  char *type;\n  size_t symbol_name_length;\n  size_t type_length;\n  char *formatted_string;\n  \n  type = (char *)pop_type;\n  symbol_name_length = strlen(symbol_name);\n  type_length = strlen(type);\n  formatted_string = (char *)allocate_memory(symbol_name_length + 0x14 + type_length);\n  concatenate_strings(formatted_string,\"%s:c=e%s,%ld\",symbol_name,type,value);\n  release_memory(type);\n  result = write_symbol(symbol_table,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    release_memory(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "write_symbol_with_params_0010e918",
            "entrypoint": "0x0010e918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e918": "write_symbol_with_params_0010e918",
                "__s": "type",
                "__s_00": "formatted_string",
                "free": "release_memory",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "value",
                "sVar2": "symbol_name_length",
                "sVar3": "type_length",
                "sprintf": "concatenate_strings",
                "stab_pop_type": "pop_type",
                "stab_pop_type()": "pop_type",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e9a0": {
            "additional_data": {
                "&_sch_istable": {
                    "1": "sch_is_table"
                },
                "(&_sch_istable)[(ulong)*__s * 2]": {
                    "1": "sch_istable_index"
                },
                "(char)uVar2": {
                    "1": "success"
                },
                "*(long *)(param_1 + 0x68)": {
                    "1": "increment_type_count(symbol_table)"
                },
                "DAT_": {
                    "1": "data_"
                },
                "FUN_00109b2f": {
                    "1": "get_symbol"
                },
                "FUN_0010e2f0": {
                    "1": "pop_type"
                },
                "FUN_0010e9a0": {
                    "1": "write_symbol_to_buffer",
                    "15": "write_symbol",
                    "2": "write_symbol_to_file"
                },
                "PTR_": {
                    "1": "pointer_"
                },
                "__s": {
                    "1": "type",
                    "12": "symbol",
                    "2": "symbol_value",
                    "4": "pop_type_result"
                },
                "__s_00": {
                    "1": "new_type_str",
                    "4": "modified_symbol",
                    "7": "new_symbol"
                },
                "__s_01": {
                    "1": "write_str",
                    "2": "final_symbol",
                    "3": "new_string",
                    "5": "formatted_symbol"
                },
                "_sch_istable": {
                    "1": "symbol_table",
                    "2": "table",
                    "5": "character_table"
                },
                "abort": {
                    "1": "terminate_execution"
                },
                "free": {
                    "1": "free_memory_function",
                    "4": "free_memory",
                    "5": "release_memory",
                    "6": "deallocate_memory"
                },
                "lVar1": {
                    "1": "incremented_counter",
                    "4": "counter",
                    "6": "count",
                    "7": "symbol_count"
                },
                "param_1": {
                    "1": "debugger",
                    "2": "param",
                    "4": "arg1",
                    "9": "symbol_table"
                },
                "param_2": {
                    "1": "data",
                    "2": "string1",
                    "3": "symbol",
                    "4": "arg2",
                    "9": "symbol_name"
                },
                "param_3": {
                    "1": "option",
                    "18": "symbol_type",
                    "8": "type"
                },
                "param_4": {
                    "1": "flags",
                    "2": "arg4",
                    "3": "value",
                    "5": "param_4",
                    "7": "param"
                },
                "param_5": {
                    "1": "additional_symbol_info"
                },
                "pcVar5": {
                    "1": "symbol_type_code",
                    "12": "symbol_prefix",
                    "2": "symbol_type",
                    "5": "type_string"
                },
                "printf": {
                    "1": "print_string"
                },
                "sVar3": {
                    "1": "arg2_len",
                    "2": "prefix_length",
                    "4": "name_length",
                    "6": "symbol_length",
                    "7": "symbol_name_length"
                },
                "sVar4": {
                    "1": "string_length",
                    "2": "value_length",
                    "3": "type_length",
                    "6": "symbol_length"
                },
                "sprintf": {
                    "1": "compose_string",
                    "12": "format_string"
                },
                "stab_pop_type": {
                    "1": "pop_symbol_type",
                    "2": "pop_type_from_stack",
                    "9": "pop_type"
                },
                "stab_pop_type()": {
                    "1": "pop_symbol_type()"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_to_private_lto_file",
                    "2": "write_symbol",
                    "3": "write_symbol_lto"
                },
                "strlen": {
                    "1": "get_length",
                    "4": "get_string_length",
                    "6": "string_length"
                },
                "uVar2": {
                    "1": "status",
                    "6": "result"
                },
                "uVar6": {
                    "1": "flags",
                    "13": "symbol_flag",
                    "3": "type_value",
                    "7": "flag"
                },
                "xmalloc": {
                    "1": "allocate_memory_function",
                    "15": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_001040a0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_0010e9a0(long symbol_table,char *symbol_name,undefined4 symbol_type,undefined8 param)\n\n{\n  long symbol_count;\n  undefined4 result;\n  byte *symbol;\n  byte *new_symbol;\n  size_t symbol_name_length;\n  size_t symbol_length;\n  char *formatted_symbol;\n  char *symbol_prefix;\n  undefined8 symbol_flag;\n  \n  symbol = (byte *)pop_type_info();\n  switch(symbol_type) {\n  case 1:\n    symbol_prefix = \"G\";\n    symbol_flag = 0x20;\n    break;\n  case 2:\n    symbol_prefix = \"S\";\n    symbol_flag = 0x26;\n    break;\n  case 3:\n    symbol_prefix = \"V\";\n    symbol_flag = 0x26;\n    break;\n  case 4:\n    symbol_prefix = \"\";\n    symbol_flag = 0x80;\n    if (((sch_is_table)[(ulong)*symbol * 2] & 4) == 0) {\n      symbol_count = *(long *)(symbol_table + 0x68);\n      *(long *)(symbol_table + 0x68) = symbol_count + 1;\n      symbol_name_length = string_length((char *)symbol);\n      new_symbol = (byte *)allocate_memory(symbol_name_length + 0x14);\n      format_string((char *)new_symbol,\"%ld=%s\",symbol_count,symbol);\n      deallocate_memory(symbol);\n      symbol = new_symbol;\n    }\n    break;\n  case 5:\n    symbol_prefix = \"r\";\n    symbol_flag = 0x40;\n    break;\n  default:\n                    \n    abort_program();\n  }\n  symbol_name_length = string_length(symbol_name);\n  symbol_length = string_length((char *)symbol);\n  formatted_symbol = (char *)allocate_memory(symbol_name_length + 3 + symbol_length);\n  format_string(formatted_symbol,\"%s:%s%s\",symbol_name,symbol_prefix,symbol);\n  deallocate_memory(symbol);\n  result = write_symbol_0010e9a0_lto(symbol_table,symbol_flag,0,param,formatted_symbol);\n  if (success != '\\0') {\n    deallocate_memory(formatted_symbol);\n  }\n  return result;\n}\n\n",
            "current_name": "write_symbol_0010e9a0",
            "entrypoint": "0x0010e9a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "&_sch_istable": "sch_is_table",
                "(char)uVar2": "success",
                "FUN_0010e9a0": "write_symbol_0010e9a0",
                "__s": "symbol",
                "__s_00": "new_symbol",
                "__s_01": "formatted_symbol",
                "_sch_istable": "character_table",
                "abort": "abort_program",
                "free": "deallocate_memory",
                "lVar1": "symbol_count",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "symbol_type",
                "param_4": "param",
                "pcVar5": "symbol_prefix",
                "printf": "print_string",
                "sVar3": "symbol_name_length",
                "sVar4": "symbol_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_pop_type()": "pop_type_info()",
                "stab_write_symbol_lto_priv_0": "write_symbol_lto",
                "strlen": "string_length",
                "uVar2": "result",
                "uVar6": "symbol_flag",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010eafe": {
            "additional_data": {
                "(int *)(param_1 + 0x1f8)": {
                    "1": "context_flag"
                },
                "(long *)(param_1 + 0x1e8)": {
                    "1": "context_check"
                },
                "(ulong)((-(uint)(param_3 == '\\0') & 0x20) + 0x46)": {
                    "1": "character_conversion"
                },
                "(undefined8 *)(param_1 + 0x1e8)": {
                    "1": "context_update"
                },
                "0x24": {
                    "1": "symbol_size"
                },
                "FUN_0010eafe": {
                    "1": "write_symbol_to_file",
                    "2": "generate_symbol_and_write",
                    "3": "generate_symbol",
                    "7": "write_symbol"
                },
                "__s": {
                    "1": "type_to_pop",
                    "10": "popped_type",
                    "2": "symbol",
                    "4": "popped_string",
                    "7": "type"
                },
                "__s_00": {
                    "1": "result_string",
                    "2": "generated_string",
                    "3": "new_string",
                    "8": "formatted_string"
                },
                "free": {
                    "1": "free_memory"
                },
                "free()": {
                    "1": "free_memory"
                },
                "param_1": {
                    "1": "binary_offset",
                    "2": "table_pointer",
                    "3": "context",
                    "4": "function_context",
                    "7": "symbol_table"
                },
                "param_2": {
                    "1": "source_file",
                    "2": "input_string",
                    "3": "string1",
                    "4": "source_string",
                    "6": "symbol_name"
                },
                "param_3": {
                    "1": "suffix_char",
                    "2": "symbol_type",
                    "23": "flag",
                    "4": "character"
                },
                "sVar2": {
                    "1": "input_length",
                    "2": "name_length",
                    "3": "source_length",
                    "4": "symbol_length"
                },
                "sVar3": {
                    "1": "type_name_length",
                    "2": "popped_type_len",
                    "7": "popped_type_length",
                    "9": "type_length"
                },
                "sprintf": {
                    "1": "format_symbol"
                },
                "sprintf()": {
                    "1": "format_symbol"
                },
                "stab_pop_type": {
                    "1": "pop_type_from_symbol_table",
                    "10": "pop_type",
                    "2": "pop_symbol_type"
                },
                "stab_pop_type()": {
                    "1": "pop_type_from_symbol_table",
                    "2": "pop_type_from_stack"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_to_debug_log_private",
                    "2": "write_symbol_lto",
                    "3": "write_symbol_to_private",
                    "4": "write_symbol"
                },
                "stab_write_symbol_lto_priv_0()": {
                    "1": "write_symbol_to_table_priv"
                },
                "strlen()": {
                    "1": "get_string_length"
                },
                "uVar1": {
                    "1": "symbol_write_result",
                    "10": "result"
                },
                "xmalloc": {
                    "14": "allocate_memory"
                },
                "xmalloc()": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_0010eafe(long symbol_table,char *symbol_name,char flag)\n\n{\n  undefined4 result;\n  char *popped_type;\n  size_t symbol_length;\n  size_t type_length;\n  char *new_symbol;\n  \n  if ((*(int *)(symbol_table + 0x1f8) == 0) && (*(long *)(symbol_table + 0x1e8) == -1)) {\n    popped_type = (char *)pop_type_from_stack;\n    symbol_length = strlen(symbol_name);\n    type_length = strlen(popped_type);\n    new_symbol = (char *)allocate_memory(symbol_length + 3 + type_length);\n    generate_formatted_string(new_symbol,\"%s:%c%s\",symbol_name,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),popped_type);\n    *(undefined8 *)(symbol_table + 0x1e8) = *(undefined8 *)(symbol_table + 0x10);\n    result = write_symbol_0010eafe(symbol_table,0x24,0,0,new_symbol);\n    if ((char)result != '\\0') {\n      free_memory(new_symbol);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "write_symbol_0010eafe",
            "entrypoint": "0x0010eafe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010eafe": "write_symbol_0010eafe",
                "__s": "popped_type",
                "__s_00": "new_symbol",
                "free": "free_memory",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "flag",
                "sVar2": "symbol_length",
                "sVar3": "type_length",
                "sprintf": "generate_formatted_string",
                "stab_pop_type": "pop_type",
                "stab_pop_type()": "pop_type_from_stack",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ebb0": {
            "additional_data": {
                "FUN_0010ebb0": {
                    "1": "write_symbol_to_debug_file",
                    "10": "write_symbol_with_prefix",
                    "2": "write_symbol_lto",
                    "6": "write_symbol"
                },
                "__s": {
                    "1": "str2",
                    "14": "symbol",
                    "2": "type",
                    "3": "symbol_name"
                },
                "__s_00": {
                    "1": "new_str",
                    "14": "new_symbol",
                    "2": "formatted_symbol",
                    "3": "updated_symbol"
                },
                "cVar1": {
                    "1": "char_symbol",
                    "2": "symbol",
                    "3": "character",
                    "9": "symbol_char"
                },
                "param_1": {
                    "1": "param",
                    "2": "input1",
                    "3": "symbol_table",
                    "4": "arg1",
                    "9": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "filename",
                    "3": "param2",
                    "5": "file_name",
                    "6": "prefix",
                    "8": "symbol_name"
                },
                "param_3": {
                    "1": "file_type",
                    "10": "symbol_type",
                    "2": "index",
                    "3": "param3",
                    "5": "length"
                },
                "param_4": {
                    "1": "param_b",
                    "2": "param",
                    "3": "arg4",
                    "6": "param_4",
                    "9": "param4"
                },
                "sVar4": {
                    "1": "symbol_length",
                    "2": "filename_length",
                    "3": "param2_length",
                    "5": "file_name_length",
                    "6": "symbol_name_length"
                },
                "sVar5": {
                    "1": "length2",
                    "10": "symbol_length",
                    "2": "symbol_len"
                },
                "uVar2": {
                    "1": "decremented_length",
                    "2": "symbol_type_minus_one",
                    "4": "symbol_index"
                },
                "uVar3": {
                    "1": "return_val",
                    "2": "status",
                    "20": "result"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_with_prefix_0010ebb0(undefined8 param1,char *symbol_name,int symbol_type,undefined8 param4)\n\n{\n  char symbol_char;\n  uint symbol_index;\n  undefined4 result;\n  char *symbol;\n  size_t symbol_name_length;\n  size_t symbol_length;\n  char *new_symbol;\n  \n  symbol = (char *)stab_pop_type();\n  symbol_index = symbol_type - 1;\n  if (symbol_index < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)symbol_index * 4);\n    symbol_char = (&DAT_00121334)[symbol_index];\n    symbol_name_length = strlen(symbol_name);\n    symbol_length = strlen(symbol);\n    new_symbol = (char *)xmalloc(symbol_name_length + 3 + symbol_length);\n    sprintf(new_symbol,\"%s:%c%s\",symbol_name,(ulong)(uint)(int)symbol_char,symbol);\n    free(symbol);\n    result = stab_write_symbol_lto_priv_0(param1,result,0,param4,new_symbol);\n    if ((char)result != '\\0') {\n      free(new_symbol);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "current_name": "write_symbol_with_prefix_0010ebb0",
            "entrypoint": "0x0010ebb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ebb0": "write_symbol_with_prefix_0010ebb0",
                "__s": "symbol",
                "__s_00": "new_symbol",
                "cVar1": "symbol_char",
                "param_1": "param1",
                "param_2": "symbol_name",
                "param_3": "symbol_type",
                "param_4": "param4",
                "sVar4": "symbol_name_length",
                "sVar5": "symbol_length",
                "uVar2": "symbol_index",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ec73": {
            "additional_data": {
                "0x3c": {
                    "1": "value_a"
                },
                "0x3d": {
                    "1": "symbol_index2"
                },
                "0x3f": {
                    "1": "count_index"
                },
                "0x40": {
                    "1": "previous_value"
                },
                "0x41": {
                    "1": "difference"
                },
                "0xc0": {
                    "1": "constant"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_0010e2f0": {
                    "1": "write_symbol"
                },
                "FUN_0010ec73": {
                    "1": "update_and_write_symbols",
                    "2": "execute_function",
                    "3": "update_and_write_symbol",
                    "4": "process_data"
                },
                "PTR_": {
                    "1": ""
                },
                "cVar2": {
                    "1": "symbol_status",
                    "19": "result",
                    "2": "return_value"
                },
                "iVar1": {
                    "1": "index",
                    "17": "counter",
                    "7": "count"
                },
                "long *param_1": {
                    "1": "array"
                },
                "long param_2": {
                    "1": "value"
                },
                "param_1": {
                    "1": "symbol_table",
                    "2": "parameter_array",
                    "4": "data",
                    "7": "array"
                },
                "param_1[0x3c]": {
                    "1": "symbol1"
                },
                "param_1[0x3d]": {
                    "1": "symbol2"
                },
                "param_1[0x3f]": {
                    "1": "counter"
                },
                "param_1[0x40]": {
                    "1": "base_offset"
                },
                "param_1[0x41]": {
                    "1": "symbol_offset_diff"
                },
                "param_1[1]": {
                    "1": "base_address"
                },
                "param_2": {
                    "1": "param",
                    "11": "value",
                    "2": "offset",
                    "3": "input_param"
                },
                "param_3": {
                    "1": "unknown",
                    "3": "param3",
                    "4": "count",
                    "9": "index"
                },
                "param_4": {
                    "1": "some_other_param",
                    "3": "param_4",
                    "5": "param3",
                    "7": "param4"
                },
                "param_5": {
                    "1": "param_b",
                    "2": "symbol",
                    "3": "param_5",
                    "4": "param4",
                    "7": "param5"
                },
                "param_6": {
                    "1": "unknown",
                    "3": "param_6",
                    "4": "param5",
                    "9": "param6"
                },
                "stab_write_symbol_lto_priv_0": {
                    "2": "write_symbol_lto",
                    "8": "write_symbol"
                },
                "undefined8 param_3": {
                    "1": "unused1"
                },
                "undefined8 param_4": {
                    "1": "unused2"
                },
                "undefined8 param_5": {
                    "1": "unused3"
                },
                "undefined8 param_6": {
                    "1": "unused4"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined process_function_0010ec73(long *array,long value,undefined8 index,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  int counter;\n  char result;\n  \n  if (symbol_offset1 != -1) {\n    (**(code **)(*(long *)(*array + 8) + 0x50))(value,base_address + 8 + symbol_offset1);\n    symbol_offset1 = -1;\n  }\n  if (symbol_offset2 != -1) {\n    (**(code **)(*(long *)(*array + 8) + 0x50))(value,base_address + 8 + symbol_offset2);\n    symbol_offset2 = -1;\n  }\n  counter = *(int *)(array + 0x3f);\n  *(int *)(array + 0x3f) = counter + 1;\n  if (counter == 0) {\n    base_offset = value;\n  }\n  else {\n    if ((symbol_offset_diff != -1) &&\n       (result = write_symbol(array,0xc0,0,symbol_offset_diff,0,param6,param4),\n       result == '\\0')) {\n      return 0;\n    }\n    symbol_offset_diff = value - base_offset;\n  }\n  return 1;\n}\n\n",
            "current_name": "process_function_0010ec73",
            "entrypoint": "0x0010ec73",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ec73": "process_function_0010ec73",
                "cVar2": "result",
                "iVar1": "counter",
                "param_1": "array",
                "param_1[0x3c]": "symbol_offset1",
                "param_1[0x3d]": "symbol_offset2",
                "param_1[0x40]": "base_offset",
                "param_1[0x41]": "symbol_offset_diff",
                "param_1[1]": "base_address",
                "param_2": "value",
                "param_3": "index",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "stab_write_symbol_lto_priv_0": "write_symbol"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ed2c": {
            "additional_data": {
                "FUN_0010ed2c": {
                    "1": "update_symbol_information",
                    "2": "update_max_size",
                    "3": "update_symbol_data",
                    "6": "update_max_value"
                },
                "auVar4": {
                    "1": "updated_result",
                    "10": "return_value",
                    "9": "output"
                },
                "cVar1": {
                    "1": "write_status",
                    "2": "is_written",
                    "4": "success",
                    "5": "write_success"
                },
                "extraout_RDX": {
                    "1": "extra_data",
                    "2": "extra_value"
                },
                "iVar2": {
                    "1": "temp_var",
                    "10": "counter",
                    "2": "iterations"
                },
                "in_R10": {
                    "1": "helper_arg",
                    "2": "register_value",
                    "3": "extra",
                    "5": "additional_data"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "symbol",
                    "3": "buffer",
                    "4": "symbol_data",
                    "7": "data"
                },
                "param_2": {
                    "1": "data_length",
                    "15": "new_value",
                    "2": "length",
                    "7": "new_size"
                },
                "param_3": {
                    "1": "symbol_info",
                    "2": "input_value",
                    "3": "param_value"
                },
                "param_4": {
                    "1": "temp_var",
                    "2": "extra",
                    "3": "extra_param"
                },
                "param_5": {
                    "1": "temp_array",
                    "2": "symbol_name"
                },
                "stab_write_symbol_lto_priv_0": {
                    "2": "write_symbol"
                },
                "uVar3": {
                    "1": "concatenated_result",
                    "13": "result",
                    "2": "flags",
                    "8": "updated_value"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined  [16] update_max_value_0010ed2c(long data,ulong new_value,undefined8 param_value)\n\n{\n  char write_success;\n  int count;\n  undefined8 extra_value;\n  ulong result;\n  undefined8 additional_data;\n  undefined return_value [16];\n  \n  if (*(ulong *)(data + 0x1f0) < new_value) {\n    *(ulong *)(data + 0x1f0) = new_value;\n  }\n  if (*(long *)(data + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(data + 0x1f8) != 0) {\n      count = *(int *)(data + 0x1f8) + -1;\n      result = CONCAT71((int7)((ulong)param_value >> 8),1);\n      *(int *)(data + 0x1f8) = count;\n      if (count != 0) {\n        return_value = write_symbol\n                           (data,0xe0,0,new_value - *(long *)(data + 0x200),0,additional_data);\n        return return_value;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    write_success = write_symbol(data,0xc0,0,*(long *)(data + 0x208),0);\n    if (write_success != '\\0') {\n      *(undefined8 *)(data + 0x208) = 0xffffffffffffffff;\n      param_value = extra_value;\n      goto LAB_0010ed78;\n    }\n  }\n  result = 0;\nLAB_0010edae:\n  return_value._0_8_ = result & 0xffffffff;\n  return_value._8_8_ = additional_data;\n  return return_value;\n}\n\n",
            "current_name": "update_max_value_0010ed2c",
            "entrypoint": "0x0010ed2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ed2c": "update_max_value_0010ed2c",
                "auVar4": "return_value",
                "cVar1": "write_success",
                "extraout_RDX": "extra_value",
                "iVar2": "count",
                "in_R10": "additional_data",
                "param_1": "data",
                "param_2": "new_value",
                "param_3": "param_value",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010edb4": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "1": "compare_filenames_and_write_symbol"
                },
                "FUN_0010edb4": {
                    "1": "write_symbol",
                    "2": "write_symbol_lto",
                    "3": "update_symbol",
                    "5": "update_symbol_information"
                },
                "cVar1": {
                    "1": "symbol_write_result",
                    "2": "symbol_write_status",
                    "3": "success_flag",
                    "8": "success",
                    "9": "write_success"
                },
                "filename_cmp": {
                    "1": "compare_filenames"
                },
                "iVar2": {
                    "3": "comparison_result",
                    "4": "cmp_result",
                    "7": "filename_comparison_result",
                    "8": "filename_cmp_result",
                    "9": "filename_comparison"
                },
                "in_R10": {
                    "1": "unknown",
                    "2": "additional_info",
                    "3": "additional_param",
                    "6": "extra_param"
                },
                "param_1": {
                    "1": "data",
                    "3": "file_data",
                    "6": "symbol_table"
                },
                "param_2": {
                    "1": "file_name",
                    "19": "filename",
                    "2": "symbol",
                    "3": "new_symbol",
                    "5": "new_filename"
                },
                "param_3": {
                    "1": "symbol_info",
                    "19": "symbol_type",
                    "2": "type",
                    "3": "file_type",
                    "4": "flag"
                },
                "param_4": {
                    "1": "symbol_address",
                    "20": "symbol_size",
                    "3": "file_size",
                    "6": "size"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol"
                },
                "uVar3": {
                    "1": "symbol_write_status",
                    "14": "write_result",
                    "3": "symbol_write_result",
                    "7": "write_symbol_result"
                }
            },
            "called": [
                "FUN_0010e2f0",
                "FUN_001041a0"
            ],
            "calling": [
                "FUN_00112502"
            ],
            "code": "\nundefined8 update_symbol_data_0010edb4(long symbol_data,undefined8 filename,undefined4 symbol_type,ulong symbol_size)\n\n{\n  char write_success;\n  int filename_comparison;\n  undefined8 write_result;\n  undefined8 extra_param;\n  \n  if (*(long *)(symbol_data + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(symbol_data + 0x1f0) < symbol_size) {\n    *(ulong *)(symbol_data + 0x1f0) = symbol_size;\n  }\n  filename_comparison = compare_filenames(filename);\n  if (filename_comparison != 0) {\n    write_success = write_symbol(symbol_data,0x84,0,symbol_size,filename);\n    if (write_success == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(symbol_data + 0x210) = filename;\n  }\n  write_result = write_symbol\n                    (symbol_data,0x44,symbol_type,symbol_size - *(long *)(symbol_data + 0x200),0,extra_param);\n  return write_result;\n}\n\n",
            "current_name": "update_symbol_data_0010edb4",
            "entrypoint": "0x0010edb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010edb4": "update_symbol_data_0010edb4",
                "cVar1": "write_success",
                "filename_cmp": "compare_filenames",
                "iVar2": "filename_comparison",
                "in_R10": "extra_param",
                "param_1": "symbol_data",
                "param_2": "filename",
                "param_3": "symbol_type",
                "param_4": "symbol_size",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "uVar3": "write_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ee3f": {
            "called": [
                "FUN_001043e0",
                "FUN_00113da9",
                "FUN_00113d3a",
                "FUN_00112b6e",
                "FUN_00109a32",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_0010914e",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_0010d21c",
                "FUN_00104270",
                "FUN_00113fb0",
                "FUN_001129f4",
                "FUN_00109022",
                "FUN_00109be3",
                "FUN_00104550",
                "FUN_00113b71",
                "FUN_00113d6e",
                "FUN_00104700",
                "FUN_0010afd5",
                "FUN_00109a0b",
                "FUN_00109ab1",
                "FUN_001045c0",
                "FUN_00113e17",
                "FUN_001048c0",
                "FUN_00108e76",
                "FUN_001047c0",
                "FUN_0010911f",
                "FUN_00113b4a",
                "FUN_001040e0",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_00104510",
                "FUN_001042b0",
                "FUN_0010b6ea",
                "FUN_00104470",
                "FUN_0010ee3f",
                "FUN_00104290",
                "FUN_00113e5e",
                "FUN_00104320",
                "FUN_00113cb9",
                "FUN_00108fe8",
                "FUN_00113df2",
                "FUN_001047e0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00112904",
                "FUN_00108fb9",
                "FUN_00113bfa",
                "FUN_00113ce0",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "current_name": "FUNC_0010ee3f",
            "entrypoint": "0x0010ee3f",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0011173a": {
            "additional_data": {
                "DAT_0011244f": {
                    "1": "dat_0011244f"
                },
                "FUNC_0010ee3f": {
                    "2": "parse_stab_type"
                },
                "FUN_00108f08": {
                    "1": "warn_stab"
                },
                "FUN_00108fb9": {
                    "1": "debug_start_block"
                },
                "FUN_00108fe8": {
                    "1": "debug_make_pointer_type_isra_0"
                },
                "FUN_00109a0b": {
                    "2": "xmalloc"
                },
                "FUN_0010bbd3": {
                    "1": "strchr"
                },
                "FUN_0010bc80": {
                    "1": "strtol"
                },
                "FUN_0010bd62": {
                    "2": "debug_add_to_current_namespace_constprop_0"
                },
                "FUN_0010be1a": {
                    "2": "xstrdup"
                },
                "FUN_0010be88": {
                    "2": "debug_name_type"
                },
                "FUN_0010bf20": {
                    "1": "debug_make_pointer_type_isra_0"
                },
                "FUN_0010bf86": {
                    "1": "warn_stab"
                },
                "FUN_0010c05d": {
                    "1": "stab_emit_pending_vars"
                },
                "FUN_0010c139": {
                    "2": "debug_start_source"
                },
                "FUN_0010c1c6": {
                    "1": "concat"
                },
                "FUN_0010c218": {
                    "1": "debug_tag_type"
                },
                "FUN_0010c6be": {
                    "1": "debug_record_variable"
                },
                "FUN_0011173a": {
                    "1": "parse_stab",
                    "2": "process_stab_entry",
                    "3": "parse_stab_entry"
                },
                "FUN_00112996": {
                    "2": "debug_set_filename"
                },
                "FUN_00113ce0": {
                    "1": "debug_end_block"
                },
                "FUN_00113d3a": {
                    "2": "debug_end_function"
                },
                "PTR_0011244d": {
                    "1": "ptr_0011244d"
                },
                "PTR_00113aca": {
                    "1": "ptr_00113aca"
                },
                "__ptr": {
                    "1": "tmp_ptr",
                    "2": "pointer_var",
                    "6": "ptr_var",
                    "9": "ptr"
                },
                "_sch_istable": {
                    "1": "strchr_table"
                },
                "bVar2": {
                    "1": "current_byte",
                    "13": "byte_var2",
                    "2": "byte",
                    "3": "byte_value",
                    "4": "byte_var"
                },
                "cVar1": {
                    "1": "current_char",
                    "12": "char_var1",
                    "2": "character_var1",
                    "3": "character",
                    "4": "char_var"
                },
                "cVar2": {
                    "1": "byte_var2"
                },
                "cVar3": {
                    "1": "character_var2",
                    "11": "char_var3",
                    "2": "char_value",
                    "4": "char_var2"
                },
                "dVar19": {
                    "1": "result_double",
                    "2": "double",
                    "3": "double_value",
                    "7": "double_var",
                    "8": "double_var19"
                },
                "dVar21": {
                    "1": "double_var21"
                },
                "iVar5": {
                    "1": "index",
                    "2": "i_var5",
                    "3": "int_value",
                    "7": "int_var",
                    "9": "int_var5"
                },
                "lVar10": {
                    "1": "temp11",
                    "2": "long_var",
                    "3": "long_var1",
                    "9": "long_var10"
                },
                "lVar11": {
                    "1": "l_var11",
                    "2": "long_var3",
                    "3": "long_value2",
                    "4": "long_var2",
                    "9": "long_var11"
                },
                "lVar12": {
                    "1": "temp_long3",
                    "2": "long_var4",
                    "3": "long_value3",
                    "4": "long_var3",
                    "9": "long_var12"
                },
                "lVar13": {
                    "1": "l_var13",
                    "2": "long_var5",
                    "3": "long_var4",
                    "5": "long_var13"
                },
                "lVar14": {
                    "1": "tmp_ulong"
                },
                "lVar18": {
                    "2": "long_var18"
                },
                "local_13": {
                    "1": "local_count"
                },
                "local_14": {
                    "1": "local_allocated"
                },
                "local_15": {
                    "1": "local_var1"
                },
                "local_16": {
                    "1": "local_var2"
                },
                "local_17": {
                    "1": "local_var3"
                },
                "local_18": {
                    "1": "local_var4"
                },
                "local_19": {
                    "1": "local_ptr1"
                },
                "local_20": {
                    "1": "local_ptr2"
                },
                "local_21": {
                    "1": "local_ptr3"
                },
                "local_22": {
                    "1": "local_ptr4"
                },
                "local_23": {
                    "1": "local_ptr5"
                },
                "local_24": {
                    "1": "local_ptr6"
                },
                "local_25": {
                    "1": "local_ptr7"
                },
                "local_26": {
                    "1": "local_ptr8"
                },
                "local_27": {
                    "1": "local_ptr9"
                },
                "local_28": {
                    "1": "local_ptr10"
                },
                "local_40": {
                    "1": "local_pointer",
                    "3": "local_ptr_array"
                },
                "local_48": {
                    "1": "local_pointer",
                    "2": "local_pointer_char_var48",
                    "7": "local_char_ptr"
                },
                "param_1": {
                    "1": "some_parameter1",
                    "12": "param_1",
                    "4": "param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "stab",
                    "3": "stab_entry",
                    "5": "param2",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "action",
                    "2": "type",
                    "6": "param3",
                    "7": "param_3"
                },
                "param_4": {
                    "1": "flags",
                    "2": "line_number",
                    "6": "param4",
                    "9": "param_4"
                },
                "param_5": {
                    "1": "param_five",
                    "5": "address",
                    "6": "param5",
                    "9": "param_5"
                },
                "param_6": {
                    "1": "entry_name",
                    "2": "string",
                    "3": "filename",
                    "6": "param6",
                    "7": "param_6"
                },
                "pcVar16": {
                    "1": "char_array_2",
                    "2": "pointer_char_var16",
                    "3": "ptr_var16",
                    "5": "char_ptr2"
                },
                "pcVar8": {
                    "1": "temp9",
                    "2": "char_ptr_var",
                    "3": "ptr_var8",
                    "4": "char_ptr"
                },
                "plVar7": {
                    "1": "length",
                    "2": "pointer_var7",
                    "3": "ptr_var7",
                    "4": "long_var"
                },
                "pplVar13": {
                    "1": "long_pointer_pointer"
                },
                "pplVar18": {
                    "1": "temp19"
                },
                "pplVar19": {
                    "1": "ptr_ptr_var19"
                },
                "pplVar20": {
                    "1": "ptr_ptr_var20"
                },
                "puVar6": {
                    "1": "alloc_ptr",
                    "2": "pointer_var6",
                    "5": "ptr_var6"
                },
                "uVar14": {
                    "1": "unknown",
                    "2": "u_var14",
                    "3": "ulong_var1",
                    "4": "ulong_var",
                    "9": "ulong_var14"
                },
                "uVar15": {
                    "1": "unknown",
                    "2": "u_var15",
                    "3": "ulong_value2",
                    "7": "ulong_var2",
                    "9": "ulong_var15"
                },
                "uVar17": {
                    "1": "uint_var1",
                    "2": "u_var17",
                    "3": "uint_value",
                    "7": "uint_var",
                    "9": "uint_var17"
                },
                "uVar4": {
                    "1": "unknown",
                    "2": "undefined_var1",
                    "7": "undefined_var",
                    "8": "undefined_var4"
                },
                "uVar9": {
                    "1": "unknown",
                    "6": "undefined_var2",
                    "8": "undefined_var9"
                },
                "ulVar14": {
                    "1": "temp15"
                },
                "ulVar15": {
                    "1": "ulong_var_2"
                }
            },
            "called": [
                "FUN_00104170",
                "FUN_00112996",
                "FUN_00109a0b",
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00113d3a",
                "FUN_0010be1a",
                "FUN_0010bbd3",
                "FUN_0010bf86",
                "FUN_0010c05d",
                "FUN_00104240",
                "FUN_0010bc80",
                "FUN_00104510",
                "FUN_00104470",
                "FUN_001042b0",
                "FUN_00104390",
                "FUN_001043d0",
                "FUN_0010ee3f",
                "FUN_0010be88",
                "FUN_00104290",
                "FUN_00104270",
                "FUN_00104320",
                "FUN_00108f08",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_001048f0",
                "FUN_0010bf20",
                "FUN_0010bd62",
                "FUN_00108fb9",
                "FUN_00113ce0",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parse_stab_entry_0011173a(undefined8 param_1,long *param_2,int param_3,int param_4,ulong param_5,\n                      char *param_6)\n\n{\n  char char_var1;\n  byte byte_var2;\n  void *ptr;\n  char char_var3;\n  undefined undefined_var4;\n  int int_var5;\n  undefined8 *ptr_var6;\n  long *long_var;\n  char *char_ptr;\n  undefined8 undefined_var9;\n  long long_var10;\n  long long_var11;\n  long long_var12;\n  long **tmp_long_ptr_ptr2;\n  ulong ulong_var14;\n  ulong ulong_var15;\n  char *char_ptr2;\n  uint uint_var17;\n  long **temp19;\n  double double_var19;\n  char *local_char_ptr;\n  long **local_ptr_array [2];\n  \n  if (param_2[4] != 0) {\n    if (((param_3 == 100) && (*param_6 != '\\0')) && (param_2[5] == param_5)) goto LAB_00111a06;\n    char_var3 = debug_set_filename(param_1);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param_2 + 0x44) = 0;\n    *(undefined4 *)(param_2 + 8) = 0;\n    param_2[9] = param_2[4];\n    if (*(char *)(param_2 + 1) == '\\0') {\n      param_2[6] = param_2[5];\n    }\n    *(undefined4 *)(param_2 + 0x10) = 1;\n    ptr_var6 = (undefined8 *)xmalloc(8);\n    param_2[0x11] = (long)ptr_var6;\n    *ptr_var6 = 0;\n    param_2[4] = 0;\n  }\n  strlen(param_6);\n  if (param_3 == 0x84) {\nLAB_00111ab7:\n    undefined_var4 = debug_start_source(param_1,param_6);\n    return undefined_var4;\n  }\n  if (param_3 < 0x85) {\n    if (param_3 == 0x3c) {\n      int_var5 = strcmp(param_6,\"gcc2_compiled.\");\n      if (int_var5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 2;\n        return 1;\n      }\n      int_var5 = strcmp(param_6,\"gcc_compiled.\");\n      if (int_var5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param_2 + 0x44) = 1;\n      return 1;\n    }\n    if (param_3 < 0x3d) {\n      if (param_3 == 0x24) {\n        if (*param_6 == '\\0') {\n          if (*(char *)(param_2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param_2 + 1) != '\\0') {\n            param_5 = param_5 + param_2[7];\n          }\n          char_var3 = stab_emit_pending_vars(param_1,param_2);\n          if (char_var3 != '\\0') {\n            char_var3 = debug_end_function(param_1,param_5);\n            if (char_var3 != '\\0') {\n              *(undefined *)(param_2 + 0xc) = 0;\n              param_2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param_2 + 0xc) != '\\0') &&\n           ((param_5 < (ulong)param_2[0xd] || (param_2[0xd] == 0xffffffffffffffff)))) {\n          param_2[0xd] = param_5;\n        }\n      }\n      else if (param_3 < 0x25) {\n        if (param_3 == 0xc) {\n          return 1;\n        }\n        if (param_3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param_3 == 0x2a) {\n          return 1;\n        }\n        if (param_3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param_3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param_2 + 0xc) != '\\0') {\n          ulong_var14 = param_5;\n          if (((*param_6 != '\\0') && (ulong_var15 = param_2[0xd], ulong_var15 != 0xffffffffffffffff)) &&\n             (ulong_var14 = ulong_var15, param_5 < ulong_var15)) {\n            ulong_var14 = param_5;\n          }\n          char_var3 = stab_emit_pending_vars(param_1,param_2);\n          if (char_var3 == '\\0') {\n            return 0;\n          }\n          char_var3 = debug_end_function(param_1,ulong_var14);\n          if (char_var3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param_2 + 0xc) = 0;\n          param_2[0xd] = -1;\n        }\n        if (*param_6 == '\\0') {\n          return 1;\n        }\n        ptr = (void *)param_2[4];\n        if (ptr == (void *)0x0) {\n          long_var12 = xstrdup(param_6);\n          param_2[4] = long_var12;\n        }\n        else {\n          if (*param_6 == '/') {\n            long_var12 = xstrdup(param_6);\n          }\n          else {\n            long_var12 = concat(ptr,param_6,0);\n          }\n          param_2[4] = long_var12;\n          free(ptr);\n        }\n        param_2[5] = param_5;\n        return 1;\n      }\n      if (param_3 < 0x65) {\n        if (param_3 == 0x44) {\n          long_var12 = 0;\n          if (*(char *)(param_2 + 0xc) != '\\0') {\n            long_var12 = param_2[7];\n          }\n          undefined_var4 = debug_record_line(param_1,(long)param_4,long_var12 + param_5);\n          return undefined_var4;\n        }\n        if (param_3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param_3 == 0x82) {\n        long_var = (long *)xmalloc();\n        int_var5 = *(int *)(param_2 + 0x10);\n        long_var10 = param_2[10];\n        long_var11 = param_2[0xb];\n        long_var[5] = 0;\n        long_var12 = param_2[0x11];\n        *(int *)(long_var + 4) = int_var5;\n        uint_var17 = int_var5 + 1;\n        *(uint *)(param_2 + 0x10) = uint_var17;\n        *long_var = long_var11;\n        long_var[1] = long_var10;\n        long_var[2] = (long)param_6;\n        long_var[3] = param_5;\n        param_2[10] = (long)long_var;\n        param_2[0xb] = (long)long_var;\n        long_var12 = xrealloc(long_var12,(ulong)uint_var17 << 3);\n        uint_var17 = *(uint *)(long_var + 4);\n        param_2[0x11] = long_var12;\n        *(undefined8 *)(long_var12 + (ulong)uint_var17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    char_ptr = strchr(param_6,0x3a);\n    if ((char_ptr != (char *)0x0) && ((char_ptr[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param_2 + 0xc) != '\\0') {\n        ulong_var14 = param_2[0xd];\n        ulong_var15 = param_5;\n        if ((ulong_var14 != 0xffffffffffffffff) && (ulong_var15 = ulong_var14, param_5 < ulong_var14)) {\n          ulong_var15 = param_5;\n        }\n        char_var3 = stab_emit_pending_vars(param_1,param_2);\n        if (char_var3 == '\\0') {\n          return 0;\n        }\n        char_var3 = debug_end_function(param_1,ulong_var15);\n        if (char_var3 == '\\0') {\n          return 0;\n        }\n        param_2[0xd] = -1;\n      }\n      if (*(char *)(param_2 + 1) != '\\0') {\n        param_2[7] = param_5;\n      }\n      *(undefined *)(param_2 + 0xc) = 1;\n    }\n    local_char_ptr = strchr(param_6,0x3a);\n    if (local_char_ptr == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_char_ptr[1] == ':') goto code_r0x00111cc7;\n    if (*param_6 == '$') {\n      char_var3 = param_6[1];\n      char_ptr2 = \"eh_throw\";\n      if (char_var3 != 'e') {\n        if (char_var3 < 'f') {\n          if ((char_var3 != 'X') && (char_var3 != '_')) {\nLAB_00111d1a:\n            undefined_var9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            warn_stab(param_6,undefined_var9);\n          }\n        }\n        else {\n          char_ptr2 = \"this\";\n          if (char_var3 == 't') goto LAB_00111d62;\n          if (char_var3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      char_ptr2 = (char *)0x0;\n      if ((param_6 != local_char_ptr) && ((*param_6 != ' ' || (local_char_ptr != param_6 + 1)))) {\n        char_ptr2 = (char *)savestring(param_6,(int)local_char_ptr - (int)param_6);\n      }\n    }\nLAB_00111d62:\n    byte_var2 = local_char_ptr[1];\n    char_ptr = local_char_ptr + 1;\n    if (((byte)(*(ushort *)(&strchr_table + (ulong)byte_var2 * 2) >> 2) & 1 |\n        (byte_var2 == 0x2d || byte_var2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var2 == 0) goto switchD_00111de5_caseD_44;\n    char_ptr = local_char_ptr + 2;\n    char_var3 = local_char_ptr[1];\n    switch(char_var3) {\n    case 'C':\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      char_ptr = \"debug_record_label: not implemented\";\n      if (long_var12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      char_var3 = debug_record_function(param_1,char_ptr2,long_var12,char_var3 == 'F',param_5);\n      if (char_var3 != '\\0') {\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n        } while (long_var12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) goto LAB_0011208f;\n      long_var10 = param_2[3];\n      long_var = (long *)param_2[2];\n      char_var3 = *(char *)(*(long *)(*param_2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param_3 == 0x24) {\n        local_char_ptr = char_ptr;\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n        } while (long_var12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      break;\n    case 'S':\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char_var3 = local_char_ptr[2];\n      if (char_var3 == 't') {\n        char_ptr = local_char_ptr + 3;\n      }\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,char_ptr2,&local_char_ptr,local_ptr_array);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      char_var1 = *(char *)(param_2 + 0x35);\n      long_var = (long *)debug_tag_type(param_1,char_ptr2,long_var12);\n      if (long_var == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_array[0] != (long **)0x0) {\n        *local_ptr_array[0] = long_var;\n      }\n      if (char_var1 != '\\0') goto LAB_001122f0;\n      tmp_long_ptr_ptr2 = (long **)(param_2 + 0x34);\n      temp19 = (long **)param_2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      char_ptr = local_char_ptr + 3;\n      if (((local_char_ptr[2] != '\\0') && (char_ptr = local_char_ptr + 4, local_char_ptr[3] == 'n')) &&\n         (char_ptr = local_char_ptr + 5, char_ptr2 = local_char_ptr + 4, local_char_ptr = char_ptr, *char_ptr2 == '0')) {\n        for (; char_ptr = local_char_ptr, *local_char_ptr != '\\0'; local_char_ptr = local_char_ptr + 1) {\n          if (*local_char_ptr == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      break;\n    case 'c':\n      if (local_char_ptr[2] == '=') {\n        char_ptr = local_char_ptr + 4;\n        char_var3 = local_char_ptr[3];\n        local_char_ptr = char_ptr;\n        if (char_var3 == 'i') {\n          long_var12 = strtol(char_ptr,(char **)0x0,10);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long_var10 = debug_add_to_current_namespace_constprop_0(param_1,char_ptr2,4);\n          if (long_var10 != 0) {\n            *(long *)(long_var10 + 0x20) = (long)(int)long_var12;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var3 == 'r') {\n          double_var19 = strtod(char_ptr,(char **)0x0);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long_var12 = debug_add_to_current_namespace_constprop_0(param_1,char_ptr2,5);\n          if (long_var12 != 0) {\n            *(double *)(long_var12 + 0x20) = double_var19;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var3 == 'e') {\n          long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n          if (long_var12 == 0) {\n            return 0;\n          }\n          char_ptr = local_char_ptr;\n          if (*local_char_ptr == ',') {\n            long_var10 = strtol(local_char_ptr,(char **)0x0,10);\n            if (char_ptr2 == (char *)0x0) {\n              return 0;\n            }\n            long_var11 = debug_add_to_current_namespace_constprop_0(param_1,char_ptr2,6);\n            if (long_var11 != 0) {\n              long_var = (long *)xmalloc(0x10);\n              *long_var = long_var12;\n              long_var[1] = (long)(int)long_var10;\n              *(long **)(long_var11 + 0x20) = long_var;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_char_ptr[2] == 'F') {\n        local_char_ptr = local_char_ptr + 3;\n        long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n        if (long_var12 == 0) {\n          return 0;\n        }\n        undefined_var9 = debug_make_function_type_isra_0(long_var12,0,0);\n        long_var12 = debug_make_pointer_type_isra_0(undefined_var9);\n      }\n      else {\n        local_char_ptr = char_ptr;\n        long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      }\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 1;\n      break;\n    case 'r':\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 5;\nLAB_001123e8:\n      char_var3 = stab_record_variable(param_1,param_2,char_ptr2,long_var12,undefined_var9,param_5);\n      goto joined_r0x001123f8;\n    case 't':\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,char_ptr2,&local_char_ptr,local_ptr_array);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      long_var = (long *)debug_name_type(param_1,char_ptr2,long_var12);\n      if (long_var == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_array[0] = long_var;\n      return 1;\n    case 'v':\n      local_char_ptr = char_ptr;\n      long_var12 = parse_stab_type(param_1,param_2,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n    }\n    char_var3 = debug_record_parameter(param_1,char_ptr2,long_var12,undefined_var9,param_5);\n    goto joined_r0x001123f8;\n  }\n  if (param_3 == 0xe0) {\n    if ((*(char *)((long)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    char_var3 = stab_emit_pending_vars(param_1,param_2);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    char_var3 = debug_end_block(param_1,param_2[7] + param_2[6] + param_5);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    param_2 = param_2 + 0xe;\n    *(int *)param_2 = *(int *)param_2 + -1;\n    char_ptr = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param_2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param_3) {\n      if (param_3 == 0xe2) {\n        char_ptr = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        char_ptr = \"debug_end_common_block: not implemented\";\n        if (param_3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var9 = dcgettext(0,char_ptr,5);\n      fprintf(_stderr,\"%s\\n\",undefined_var9);\n      return 0;\n    }\n    if (param_3 != 0xc0) {\n      if (param_3 == 0xc2) {\n        int_var5 = *(int *)(param_2 + 0x10);\n        *(uint *)(param_2 + 0x10) = int_var5 + 1U;\n        long_var12 = xrealloc(param_2[0x11],(ulong)(int_var5 + 1U) << 3);\n        ptr_var6 = (undefined8 *)param_2[0xb];\n        param_2[0x11] = long_var12;\n        while( true ) {\n          if (ptr_var6 == (undefined8 *)0x0) {\n            undefined_var9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            warn_stab(param_6,undefined_var9);\n            *(undefined8 *)(param_2[0x11] + (ulong)(*(int *)(param_2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param_5 == ptr_var6[3]) && (int_var5 = strcmp((char *)ptr_var6[2],param_6), int_var5 == 0))\n          break;\n          ptr_var6 = (undefined8 *)*ptr_var6;\n        }\n        *(undefined8 *)(long_var12 + (ulong)(*(int *)(param_2 + 0x10) - 1) * 8) = ptr_var6[5];\n        return 1;\n      }\n      if (param_3 == 0xa2) {\n        long_var12 = param_2[10];\n        if (long_var12 != 0) {\n          long_var10 = *(long *)(long_var12 + 8);\n          uint_var17 = *(uint *)(long_var12 + 0x20);\n          param_2[10] = long_var10;\n          if ((uint_var17 < *(uint *)(param_2 + 0x10)) &&\n             (*(undefined8 *)(long_var12 + 0x28) = *(undefined8 *)(param_2[0x11] + (ulong)uint_var17 * 8),\n             long_var10 != 0)) {\n            param_6 = *(char **)(long_var10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param_6 = (char *)param_2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param_2 + 0xc) != '\\0') {\n      char_var3 = debug_start_block(param_1,param_2[7] + param_2[6] + param_5);\n      if (char_var3 == '\\0') {\n        return 0;\n      }\n      char_var3 = stab_emit_pending_vars(param_1,param_2);\n      if (char_var3 != '\\0') {\n        *(int *)(param_2 + 0xe) = *(int *)(param_2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    char_ptr = \"N_LBRAC not within function\\n\";\n  }\n  char_ptr = (char *)dcgettext(0,char_ptr,5);\n  fprintf(_stderr,char_ptr);\n  return 0;\ncode_r0x00111cc7:\n  local_char_ptr = local_char_ptr + 2;\n  local_char_ptr = strchr(local_char_ptr,0x3a);\n  if (local_char_ptr == (char *)0x0) {\n    char_ptr = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_char_ptr = char_ptr;\n    bad_stab(param_6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (temp19 == (long **)0x0) {\nLAB_001122f0:\n    if (char_var3 != 't') {\n      return 1;\n    }\n    long_var = (long *)debug_name_type(param_1,char_ptr2,long_var);\n    if (long_var != (long *)0x0) {\n      if (local_ptr_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_array[0] = long_var;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)temp19[1] == *char_ptr2) &&\n     (int_var5 = strcmp((char *)temp19[1],char_ptr2), int_var5 == 0)) {\n    temp19[3] = long_var;\n    *tmp_long_ptr_ptr2 = *temp19;\n    goto LAB_001122f0;\n  }\n  tmp_long_ptr_ptr2 = temp19;\n  temp19 = (long **)*temp19;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var10 < 1) {\nLAB_0011208f:\n    undefined_var9 = 1;\nLAB_001121c4:\n    char_var3 = debug_record_variable(param_1,char_ptr2,long_var12,undefined_var9,param_5);\njoined_r0x001123f8:\n    if (char_var3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  char_ptr = *(char **)(*long_var + 8);\n  if ((char_var3 != '\\0') && (char_var3 == *char_ptr)) {\n    char_ptr = char_ptr + 1;\n  }\n  if ((*char_ptr == *char_ptr2) && (int_var5 = strcmp(char_ptr,char_ptr2), int_var5 == 0)) {\n    param_5 = *(long *)(*long_var + 0x10) + *(long *)(*(long *)(*long_var + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var10 = long_var10 + -1;\n  long_var = long_var + 1;\n  goto LAB_00112045;\n}\n\n",
            "current_name": "parse_stab_entry_0011173a",
            "entrypoint": "0x0011173a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011173a": "parse_stab_entry_0011173a",
                "__ptr": "ptr",
                "_sch_istable": "strchr_table",
                "bVar2": "byte_var2",
                "cVar1": "char_var1",
                "cVar3": "char_var3",
                "dVar19": "double_var19",
                "iVar5": "int_var5",
                "lVar10": "long_var10",
                "lVar11": "long_var11",
                "lVar12": "long_var12",
                "lVar13": "long_var13",
                "lVar18": "long_var18",
                "local_40": "local_ptr_array",
                "local_48": "local_char_ptr",
                "pcVar16": "char_ptr2",
                "pcVar8": "char_ptr",
                "plVar7": "long_var",
                "pplVar13": "tmp_long_ptr_ptr2",
                "pplVar18": "temp19",
                "puVar6": "ptr_var6",
                "uVar14": "ulong_var14",
                "uVar15": "ulong_var15",
                "uVar17": "uint_var17",
                "uVar4": "undefined_var4",
                "uVar9": "undefined_var9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112502": {
            "additional_data": {
                "(uint *)(param_1 + 0x48)": {
                    "1": "ptr_count"
                },
                "*(int *)(param_1 + 0x48)": {
                    "1": "count_value"
                },
                "*(undefined4 *)(param_1 + 0x48)": {
                    "1": "count_reset"
                },
                "*(undefined8 *)(param_1 + 0x40)": {
                    "1": "ptr_reset"
                },
                "*(undefined8 *)(puVar2[1] + 8)": {
                    "1": "ptr_value2"
                },
                "*(undefined8 *)puVar2": {
                    "1": "ptr_value"
                },
                "*(undefined8 **)(param_1 + 0x40)": {
                    "1": "ptr1"
                },
                "<cVar4>": {
                    "1": "result"
                },
                "<original_function_name>": {
                    "1": "check_threshold"
                },
                "<param_1>": {
                    "1": "data"
                },
                "<param_2>": {
                    "1": "context"
                },
                "<param_3>": {
                    "1": "threshold"
                },
                "<puVar2>": {
                    "1": "array"
                },
                "<uVar1>": {
                    "1": "index"
                },
                "<uVar3>": {
                    "1": "next_element"
                },
                "FUN_0010edb4": {
                    "1": "process_data"
                },
                "FUN_00112502": {
                    "1": "check_valid_line_number",
                    "2": "check_and_update_data",
                    "5": "process_data"
                },
                "cVar4": {
                    "1": "line_status",
                    "12": "result",
                    "2": "check_result",
                    "3": "status"
                },
                "param_1": {
                    "1": "line_info",
                    "2": "base_address",
                    "3": "arg1",
                    "4": "input_data",
                    "6": "data"
                },
                "param_2": {
                    "1": "some_pointer",
                    "2": "param_value",
                    "4": "context"
                },
                "param_3": {
                    "1": "desired_value",
                    "2": "line_number",
                    "3": "arg3",
                    "5": "threshold",
                    "7": "value"
                },
                "param_3 <= (ulong)puVar2[(ulong)uVar1 + 0xc]": {
                    "1": "is_less_than_or_equal"
                },
                "param_4": {
                    "1": "additional_param"
                },
                "puVar2": {
                    "1": "next_array_pointer",
                    "2": "array_ptr",
                    "3": "array_pointer",
                    "4": "ptr_array",
                    "6": "ptr"
                },
                "puVar2[(ulong)uVar1 + 2]": {
                    "1": "ptr_value1"
                },
                "stab_lineno_lto_priv_0": {
                    "1": "check_line_numbers",
                    "3": "check_line_number"
                },
                "uVar1": {
                    "1": "array_index",
                    "19": "index",
                    "2": "count",
                    "6": "counter"
                },
                "uVar3": {
                    "1": "temporary_value",
                    "3": "temp_value",
                    "4": "next_ptr",
                    "6": "result"
                }
            },
            "called": [
                "FUN_0010edb4"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f",
                "FUN_001135a5"
            ],
            "code": "\nundefined process_data_00112502(long data,undefined8 param,ulong value)\n\n{\n  uint index;\n  undefined8 *ptr;\n  undefined8 result;\n  char result;\n  \n  do {\n    ptr = *(undefined8 **)(data + 0x40);\n    if (ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(data + 0x48), index < 10 && (ptr[(ulong)index + 2] != -1))) {\n      if (value <= (ulong)ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = check_line_number(param,*(undefined8 *)(ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data + 0x48) = *(int *)(data + 0x48) + 1;\n    }\n    result = *ptr;\n    *(undefined4 *)(data + 0x48) = 0;\n    *(undefined8 *)(data + 0x40) = result;\n  } while( true );\n}\n\n",
            "current_name": "process_data_00112502",
            "entrypoint": "0x00112502",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112502": "process_data_00112502",
                "cVar4": "result",
                "param_1": "data",
                "param_2": "param",
                "param_3": "value",
                "puVar2": "ptr",
                "stab_lineno_lto_priv_0": "check_line_number",
                "uVar1": "index",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011256b": {
            "additional_data": {
                "FUN_0011256b": {
                    "1": "print_formatted_strings",
                    "29": "print_matching_formats"
                },
                "F_UNP11256b": {
                    "1": "print_matching_formats"
                },
                "__format": {
                    "1": "translation",
                    "18": "format_string",
                    "2": "message_format"
                },
                "_stderr": {
                    "2": "standard_error"
                },
                "_stdout": {
                    "2": "standard_output"
                },
                "free": {
                    "1": "release_memory"
                },
                "free(param_1)": {
                    "1": "release_format_strings"
                },
                "param_1": {
                    "1": "format_array",
                    "12": "formats",
                    "2": "formats_array",
                    "3": "format_strings",
                    "4": "matching_formats",
                    "6": "format_list"
                },
                "plVar2": {
                    "1": "current_match",
                    "18": "current_format",
                    "2": "current_string"
                },
                "stderr": {
                    "1": "standard_error"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "uVar1": {
                    "1": "matching_formats",
                    "2": "format_string",
                    "3": "data",
                    "7": "default_format"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001045e0",
                "FUN_001043f0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\n\n\nvoid print_matching_formats_0011256b(long *formats)\n\n{\n  undefined8 default_format;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  default_format = DAT_001275e0;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,default_format);\n  for (current_format = formats; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  release_format_strings;\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_0011256b",
            "entrypoint": "0x0011256b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "free": "release_memory",
                "free(param_1)": "release_format_strings",
                "param_1": "formats",
                "plVar2": "current_format",
                "stderr": "standard_error",
                "stdout": "standard_output",
                "uVar1": "default_format"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001125fa": {
            "additional_data": {
                "*param_1": {
                    "1": "filename"
                },
                "DAT_00127a30": {
                    "1": "allocated_string"
                },
                "DAT_00127a38": {
                    "1": "max_len"
                },
                "FUN_001125fa": {
                    "1": "get_formatted_file_name",
                    "2": "get_modified_file_name",
                    "5": "get_modified_filename",
                    "6": "get_formatted_string"
                },
                "__assert_fail": {
                    "1": "assert_fail"
                },
                "__s": {
                    "1": "archive_filename",
                    "2": "modified_filename",
                    "3": "original_string",
                    "4": "original_filename",
                    "6": "filename"
                },
                "free": {
                    "1": "free_memory"
                },
                "param_1": {
                    "1": "file_data",
                    "11": "arguments",
                    "2": "input_strings",
                    "4": "args",
                    "5": "input_params"
                },
                "ppcVar2": {
                    "1": "pointer_to_second_string",
                    "2": "archive",
                    "3": "archive_path",
                    "4": "archive_filename"
                },
                "sVar3": {
                    "1": "archive_length",
                    "2": "length1",
                    "4": "archive_filename_length"
                },
                "sVar4": {
                    "1": "input_length",
                    "2": "file_name_length",
                    "3": "original_filename_length",
                    "6": "filename_length"
                },
                "strlen": {
                    "1": "get_str_len"
                },
                "uVar1": {
                    "1": "modified_len",
                    "2": "new_string_length",
                    "4": "modified_filename_length",
                    "7": "total_length"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00104300",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00107976",
                "FUN_00105828",
                "FUN_001152b6"
            ],
            "code": "\nchar * get_formatted_string_001125fa(char **arguments)\n\n{\n  ulong total_length;\n  char **archive_filename;\n  size_t archive_filename_length;\n  size_t filename_length;\n  char *filename;\n  \n  if (arguments == (char **)0x0) {\n                    \n    assert_failure(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archive_filename = (char **)arguments[0x1d];\n  filename = *arguments;\n  if ((archive_filename != (char **)0x0) && ((*(byte *)((long)archive_filename + 0x49) & 0x10) == 0)) {\n    archive_filename_length = get_str_len(*archive_filename);\n    filename_length = get_str_len(filename);\n    total_length = archive_filename_length + 3 + filename_length;\n    if (DAT_00127a38 < total_length) {\n      if (DAT_00127a38 != 0) {\n        free_memory(DAT_00127a30);\n      }\n      DAT_00127a38 = (total_length >> 1) + total_length;\n      DAT_00127a30 = (char *)allocate_memory();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    filename = DAT_00127a30;\n  }\n  return filename;\n}\n\n",
            "current_name": "get_formatted_string_001125fa",
            "entrypoint": "0x001125fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "__assert_fail": "assert_failure",
                "__s": "filename",
                "free": "free_memory",
                "param_1": "arguments",
                "ppcVar2": "archive_filename",
                "sVar3": "archive_filename_length",
                "sVar4": "filename_length",
                "strlen": "get_str_len",
                "uVar1": "total_length",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001126c0": {
            "additional_data": {
                "DAT_0011b4a0": {
                    "1": "constant2"
                },
                "DAT_001275e0": {
                    "1": "constant1"
                },
                "FUN_001126c0": {
                    "1": "display_error_message",
                    "16": "print_error_message",
                    "2": "print_bfd_error_message",
                    "9": "print_error"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "fwrite": {
                    "1": "write"
                },
                "iVar1": {
                    "1": "bfd_error_code",
                    "2": "error_flag",
                    "8": "error"
                },
                "in_AL": {
                    "1": "error_occurred",
                    "16": "flag",
                    "2": "is_error_set",
                    "3": "is_error"
                },
                "local_100": {
                    "1": "num_of_bytes",
                    "2": "size1",
                    "4": "local_var1",
                    "6": "buffer_size1"
                },
                "local_48": {
                    "1": "local8",
                    "2": "local_var12",
                    "3": "local_error_code8",
                    "5": "error_code8_copy"
                },
                "local_58": {
                    "1": "local_param7",
                    "2": "error_code7_local",
                    "3": "param7",
                    "5": "error_code7_copy"
                },
                "local_68": {
                    "1": "var8",
                    "2": "local_var10",
                    "3": "local_error_code6",
                    "5": "error_code6_copy"
                },
                "local_78": {
                    "1": "archive_error_code5",
                    "2": "error_code5_local",
                    "3": "local_error_code5",
                    "5": "error_code5_copy"
                },
                "local_88": {
                    "1": "local_param_4",
                    "2": "error_code4_local",
                    "3": "local_error_code4",
                    "5": "error_code4_copy"
                },
                "local_98": {
                    "1": "local_var9",
                    "2": "error_code3_local",
                    "3": "local_error_code3",
                    "5": "error_code3_copy"
                },
                "local_a8": {
                    "1": "var4",
                    "2": "local_var6",
                    "3": "param2",
                    "5": "error_code2_copy"
                },
                "local_b8": {
                    "1": "temp1",
                    "2": "local_var5",
                    "3": "param1",
                    "5": "error_code1_copy"
                },
                "local_c0": {
                    "1": "param_d",
                    "2": "local_var4",
                    "3": "param14",
                    "5": "local_param2"
                },
                "local_c8": {
                    "1": "param_c",
                    "2": "local_var3",
                    "3": "param13_copy",
                    "5": "local_param1"
                },
                "local_e8": {
                    "1": "temp_buffer",
                    "3": "buffer",
                    "5": "local_array",
                    "9": "local_buffer"
                },
                "local_f0": {
                    "1": "local_var",
                    "2": "local_var4",
                    "3": "local_buffer",
                    "4": "local_ptr2"
                },
                "local_f8": {
                    "1": "buffer",
                    "2": "stack_ptr",
                    "5": "local_ptr1"
                },
                "local_fc": {
                    "1": "temp_buffer_size",
                    "2": "size2",
                    "3": "format_buffer_size",
                    "4": "local_var2",
                    "7": "buffer_size2"
                },
                "locl_f0": {
                    "1": "local_buf3"
                },
                "param_1": {
                    "1": "error_type",
                    "2": "error1",
                    "20": "error_code1",
                    "7": "error_code"
                },
                "param_10": {
                    "1": "bfd_handle",
                    "11": "archive",
                    "3": "archive_handle",
                    "4": "archive_file"
                },
                "param_11": {
                    "1": "error_locations",
                    "2": "error_code_ptr",
                    "3": "error_flag",
                    "4": "param11"
                },
                "param_12": {
                    "1": "additional_info",
                    "13": "error_message",
                    "2": "error_format",
                    "3": "error_message_format"
                },
                "param_13": {
                    "1": "unknown_param1",
                    "15": "param13",
                    "2": "param1",
                    "3": "error_param1"
                },
                "param_14": {
                    "1": "param_b",
                    "15": "param14",
                    "2": "additional_param2",
                    "3": "error_param2"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "error2",
                    "20": "error_code2",
                    "6": "param2"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "error3",
                    "20": "error_code3",
                    "6": "param3"
                },
                "param_4": {
                    "1": "arg4",
                    "2": "error4",
                    "20": "error_code4",
                    "6": "param4"
                },
                "param_5": {
                    "1": "arg5",
                    "2": "error5",
                    "20": "error_code5",
                    "6": "param5"
                },
                "param_6": {
                    "1": "arg6",
                    "2": "error6",
                    "20": "error_code6",
                    "6": "param6"
                },
                "param_7": {
                    "1": "param_7",
                    "2": "error7",
                    "20": "error_code7",
                    "6": "param7"
                },
                "param_8": {
                    "1": "param_8",
                    "2": "error8",
                    "20": "error_code8",
                    "6": "param8"
                },
                "param_9": {
                    "1": "archive_ptr",
                    "12": "archive_filename",
                    "4": "archive_file",
                    "6": "archive_file_name"
                },
                "uVar2": {
                    "1": "error_message2",
                    "14": "error_message",
                    "2": "error_msg",
                    "3": "err_msg"
                },
                "vfprintf": {
                    "1": "print_formatted_variable"
                }
            },
            "called": [
                "FUN_00104800",
                "FUN_00104370",
                "FUN_001045e0",
                "FUN_001125fa",
                "FUN_00104770",
                "FUN_00104240",
                "FUN_001047a0",
                "FUN_001044b0",
                "FUN_00104310"
            ],
            "calling": [
                "FUN_0010551d",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_00114e50",
                "FUN_00108466",
                "FUN_00116110",
                "FUN_00104d25",
                "FUN_00107880",
                "FUN_001086af",
                "FUN_0010808f",
                "FUN_00114690",
                "FUN_0010554f"
            ],
            "code": "\n\n\nvoid print_error_message_001126c0(undefined4 error_code1,undefined4 error_code2,undefined4 error_code3,undefined4 error_code4,\n                 undefined4 error_code5,undefined4 error_code6,undefined4 error_code7,undefined4 error_code8,\n                 long archive_filename,long archive,long *param11,char *error_message,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int error;\n  undefined8 error_message;\n  undefined4 buffer_size;\n  undefined4 buffer_size2;\n  undefined *local_ptr1;\n  undefined *local_ptr2;\n  undefined local_buffer [32];\n  undefined8 local_param1;\n  undefined8 local_param2;\n  undefined4 error_code1_copy;\n  undefined4 error_code2_copy;\n  undefined4 error_code3_copy;\n  undefined4 error_code4_copy;\n  undefined4 error_code5_copy;\n  undefined4 error_code6_copy;\n  undefined4 error_code7_copy;\n  undefined4 error_code8_copy;\n  \n  if (flag != '\\0') {\n    error_code1_copy = error_code1;\n    error_code2_copy = error_code2;\n    error_code3_copy = error_code3;\n    error_code4_copy = error_code4;\n    error_code5_copy = error_code5;\n    error_code6_copy = error_code6;\n    error_code7_copy = error_code7;\n    error_code8_copy = error_code8;\n  }\n  local_param1 = param13;\n  local_param2 = param14;\n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg();\n  }\n  fflush(standard_output);\n  fputs(DAT_001275e0,standard_error);\n  if (archive != 0) {\n    if (archive_filename == 0) {\n      archive_filename = bfd_get_archive_filename(archive);\n    }\n    if ((param11 != (long *)0x0) && (*param11 != 0)) {\n      print_formatted(standard_error,\": %s[%s]\",archive_filename);\n      goto LAB_001127c1;\n    }\n  }\n  print_formatted(standard_error,\": %s\",archive_filename);\nLAB_001127c1:\n  if (error_message != (char *)0x0) {\n    local_ptr1 = &stack0x00000008;\n    local_ptr2 = local_buffer;\n    buffer_size = 0x20;\n    buffer_size2 = 0x30;\n    write(&DAT_0011b4a0,1,2,standard_error);\n    print_formatted_variable(standard_error,error_message,&buffer_size);\n  }\n  print_formatted(standard_error,\": %s\\n\",error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_001126c0",
            "entrypoint": "0x001126c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fprintf": "print_formatted",
                "fwrite": "write",
                "iVar1": "error",
                "in_AL": "flag",
                "local_100": "buffer_size",
                "local_48": "error_code8_copy",
                "local_58": "error_code7_copy",
                "local_68": "error_code6_copy",
                "local_78": "error_code5_copy",
                "local_88": "error_code4_copy",
                "local_98": "error_code3_copy",
                "local_a8": "error_code2_copy",
                "local_b8": "error_code1_copy",
                "local_c0": "local_param2",
                "local_c8": "local_param1",
                "local_e8": "local_buffer",
                "local_f0": "local_ptr2",
                "local_f8": "local_ptr1",
                "local_fc": "buffer_size2",
                "param_1": "error_code1",
                "param_10": "archive",
                "param_11": "param11",
                "param_12": "error_message",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "error_code2",
                "param_3": "error_code3",
                "param_4": "error_code4",
                "param_5": "error_code5",
                "param_6": "error_code6",
                "param_7": "error_code7",
                "param_8": "error_code8",
                "param_9": "archive_filename",
                "uVar2": "error_message",
                "vfprintf": "print_formatted_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011283f": {
            "additional_data": {
                "FUN_0011283f": {
                    "1": "check_and_update_directory",
                    "2": "check_and_return_directory",
                    "4": "find_directory",
                    "6": "check_directory_permission",
                    "7": "check_directory_access"
                },
                "iVar1": {
                    "1": "file_permissions",
                    "18": "access_result"
                },
                "param_1": {
                    "1": "path_to_check",
                    "11": "directory_path",
                    "13": "path",
                    "5": "file_path"
                },
                "param_2": {
                    "1": "result_path",
                    "2": "directory_path",
                    "4": "default_directory",
                    "8": "directory"
                },
                "sStack_a8": {
                    "1": "path_stat",
                    "3": "file_status",
                    "6": "file_info",
                    "7": "file_stats",
                    "9": "file_stat"
                }
            },
            "called": [
                "FUN_001044f0",
                "FUN_00104740"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nchar * check_directory_access_0011283f(char *path,char *default_path)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((default_path == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        default_path = path;\n      }\n    }\n  }\n  return default_path;\n}\n\n",
            "current_name": "check_directory_access_0011283f",
            "entrypoint": "0x0011283f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "iVar1": "access_result",
                "param_1": "path",
                "param_2": "default_path",
                "sStack_a8": "file_stat"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112894": {
            "additional_data": {
                "FUN_00112894": {
                    "1": "create_memory_structure",
                    "2": "allocate_memory_and_initialize",
                    "5": "initialize_memory",
                    "9": "initialize_data_structure"
                },
                "bVar4": {
                    "1": "temp_byte",
                    "2": "counter",
                    "4": "offset",
                    "5": "byte_value",
                    "8": "byte_counter"
                },
                "lVar3": {
                    "1": "loop_index",
                    "21": "loop_counter",
                    "3": "counter",
                    "4": "count"
                },
                "param_1": {
                    "1": "input_value_1",
                    "2": "input_1",
                    "3": "input_value",
                    "5": "data"
                },
                "param_2": {
                    "1": "input_value_2",
                    "2": "data2",
                    "3": "byte_value",
                    "5": "input2",
                    "6": "flag"
                },
                "param_3": {
                    "1": "input_value1",
                    "2": "arg1",
                    "3": "param3",
                    "5": "input3"
                },
                "param_4": {
                    "1": "input2",
                    "2": "input_4",
                    "3": "param4",
                    "5": "input4"
                },
                "puVar1": {
                    "1": "dynamic_memory1",
                    "2": "array_ptr",
                    "4": "allocated_memory",
                    "7": "memory_block",
                    "8": "data_structure"
                },
                "puVar2": {
                    "1": "temp_array",
                    "3": "current_pointer",
                    "4": "current_ptr",
                    "5": "temp_pointer",
                    "9": "temp_ptr"
                },
                "xmalloc": {
                    "4": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined8 *\ninitialize_data_structure_00112894(undefined8 data,undefined flag,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *data_structure;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  byte byte_counter;\n  \n  byte_counter = 0;\n  data_structure = (undefined8 *)allocate_memory(0x1b0);\n  temp_ptr = data_structure;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)temp_ptr = 0;\n    temp_ptr = (undefined8 *)((long)temp_ptr + (ulong)byte_counter * -8 + 4);\n  }\n  *data_structure = data;\n  *(undefined *)(data_structure + 1) = flag;\n  data_structure[2] = input3;\n  data_structure[3] = input4;\n  *(undefined4 *)(data_structure + 0x10) = 1;\n  temp_ptr = (undefined8 *)allocate_memory(8);\n  data_structure[0xd] = 0xffffffffffffffff;\n  data_structure[0x11] = temp_ptr;\n  *temp_ptr = 0;\n  return data_structure;\n}\n\n",
            "current_name": "initialize_data_structure_00112894",
            "entrypoint": "0x00112894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "bVar4": "byte_counter",
                "lVar3": "loop_counter",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "data_structure",
                "puVar2": "temp_ptr",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112904": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "initialize_structure",
                    "2": "initialize_data_struct",
                    "3": "create_memory_block",
                    "4": "initialize_memory",
                    "7": "initialize_data",
                    "9": "initialize_data_structure"
                },
                "param_1": {
                    "1": "parameter1",
                    "2": "input1",
                    "3": "initial_value",
                    "4": "input_value1",
                    "5": "first_param",
                    "9": "value1"
                },
                "param_2": {
                    "1": "second_value",
                    "2": "input2",
                    "4": "input_value2",
                    "5": "second_param",
                    "9": "value2"
                },
                "puVar1": {
                    "1": "array_ptr",
                    "15": "allocated_memory",
                    "2": "data_ptr",
                    "3": "data_pointer",
                    "5": "memory_block"
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_00113da9",
                "FUN_0010c892",
                "FUN_00113e17",
                "FUN_00113cb9",
                "FUN_00113d3a",
                "FUN_00113b4a",
                "FUN_00113df2",
                "FUN_0010c218",
                "FUN_0010b0fa",
                "FUN_0010c6be",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_00113b71",
                "FUN_00113bfa",
                "FUN_00113e23",
                "FUN_00113d6e",
                "FUN_00113ce0"
            ],
            "code": "\nvoid initialize_data_structure_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *allocated_memory;\n  \n  allocated_memory = (undefined4 *)xmalloc(0x18);\n  *allocated_memory = value1;\n  allocated_memory[1] = value2;\n  *(undefined (*) [16])(allocated_memory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00112904",
            "entrypoint": "0x00112904",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112904": "initialize_data_structure_00112904",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112925": {
            "additional_data": {
                "**": {
                    "1": "dereference"
                },
                "FUN_00112925": {
                    "1": "initialize_and_allocate_memory",
                    "16": "initialize_memory",
                    "4": "initialize_array",
                    "8": "initialize_data_structure"
                },
                "ZEXT816": {
                    "1": "zero_extend"
                },
                "bVar5": {
                    "1": "loop_counter",
                    "2": "temp_byte",
                    "3": "counter",
                    "4": "flag",
                    "5": "byte_value"
                },
                "lVar3": {
                    "1": "counter",
                    "20": "loop_counter",
                    "3": "iteration_count"
                },
                "param_1": {
                    "1": "memory_data",
                    "5": "memory_array",
                    "6": "memory",
                    "7": "data_structure",
                    "8": "array_pointer"
                },
                "param_2": {
                    "1": "data",
                    "12": "value",
                    "2": "param1",
                    "4": "param_value",
                    "5": "value1"
                },
                "param_3": {
                    "1": "param_b",
                    "2": "param_value2",
                    "3": "size",
                    "5": "value2",
                    "6": "value1",
                    "9": "param3"
                },
                "param_4": {
                    "1": "param_b",
                    "2": "param_value3",
                    "5": "value3",
                    "6": "value2",
                    "9": "param4"
                },
                "pauVar2": {
                    "1": "existing_structure",
                    "11": "existing_array",
                    "3": "existing_data_structure",
                    "8": "existing_memory"
                },
                "puVar1": {
                    "1": "memory_array",
                    "2": "new_array",
                    "3": "result",
                    "5": "memory_block",
                    "9": "allocated_memory"
                },
                "puVar4": {
                    "1": "current_memory_element",
                    "2": "current_ptr",
                    "3": "current_block",
                    "4": "current_memory"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c218",
                "FUN_00112996",
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010bc80"
            ],
            "code": "\nundefined4 *\ninitialize_memory_00112925(undefined (**array_pointer) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *allocated_memory;\n  undefined (*existing_array) [16];\n  long loop_counter;\n  undefined4 *current_memory;\n  byte byte_value;\n  \n  byte_value = 0;\n  allocated_memory = (undefined4 *)allocate_memory(0x28);\n  current_memory = allocated_memory;\n  for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *current_memory = 0;\n    current_memory = current_memory + (ulong)byte_value * -2 + 1;\n  }\n  existing_array = *array_pointer;\n  *(undefined8 *)(allocated_memory + 2) = value;\n  allocated_memory[5] = param3;\n  allocated_memory[6] = param4;\n  if (existing_array == (undefined (*) [16])0x0) {\n    existing_array = (undefined (*) [16])allocate_memory(0x10);\n    *existing_array = zero_extend(0);\n    *array_pointer = existing_array;\n    *(undefined (**) [16])(*existing_array + 8) = existing_array;\n  }\n  **(undefined8 **)(*existing_array + 8) = allocated_memory;\n  *(undefined4 **)(*existing_array + 8) = allocated_memory;\n  return allocated_memory;\n}\n\n",
            "current_name": "initialize_memory_00112925",
            "entrypoint": "0x00112925",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "ZEXT816": "zero_extend",
                "bVar5": "byte_value",
                "lVar3": "loop_counter",
                "param_1": "array_pointer",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "pauVar2": "existing_array",
                "puVar1": "allocated_memory",
                "puVar4": "current_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112996": {
            "additional_data": {
                "FUN_00112925": {
                    "1": "add_to_namespace"
                },
                "FUN_00112996": {
                    "1": "add_to_debug_namespace",
                    "15": "add_to_current_namespace",
                    "2": "add_debug_to_namespace",
                    "3": "debug_add_to_current_namespace",
                    "8": "add_to_namespace"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "lVar2": {
                    "1": "target_address",
                    "11": "offset",
                    "2": "temp_var",
                    "3": "file_offset"
                },
                "param_1": {
                    "1": "file_struct",
                    "2": "namespace",
                    "5": "file_info",
                    "7": "namespace_ptr",
                    "9": "file_ptr"
                },
                "param_2": {
                    "1": "constant_param",
                    "15": "param_2",
                    "2": "arg1"
                },
                "param_3": {
                    "1": "data",
                    "18": "param_3",
                    "2": "param3"
                },
                "param_4": {
                    "1": "param_4"
                },
                "uVar1": {
                    "1": "localized_string",
                    "29": "result"
                }
            },
            "called": [
                "FUN_00112925",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long file_ptr,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(file_ptr + 8) != 0) && (*(long *)(file_ptr + 0x10) != 0)) {\n    offset = *(long *)(file_ptr + 0x10) + 0x10;\n    if (*(long *)(file_ptr + 0x20) != 0) {\n      offset = *(long *)(file_ptr + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(offset,param_2,param_3,3);\n    return result;\n  }\n  result = get_error_message(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(error_stream,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "current_name": "add_to_current_namespace_00112996",
            "entrypoint": "0x00112996",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "_stderr": "error_stream",
                "dcgettext": "get_error_message",
                "lVar2": "offset",
                "param_1": "file_ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001129f4": {
            "additional_data": {
                "(int *)0x0": {
                    "1": "null_pointer"
                },
                "(param_1 != piVar2) && (param_1 = piVar2, piVar2 != (int *)0x0)": {
                    "1": "is_valid_param"
                },
                "(undefined8 *)*puVar1": {
                    "1": "dynamic_ptr"
                },
                "(undefined8 *)*puVar1)[1]": {
                    "1": "next_dynamic_ptr"
                },
                "*(undefined8 *)(**(long **)(param_1 + 4) + 8)": {
                    "1": "extracted_data"
                },
                "**(long **)(param_1 + 4)": {
                    "1": "array_element_value"
                },
                "*param_1": {
                    "1": "array_value"
                },
                "FUN_001129f4": {
                    "1": "get_description",
                    "2": "extract_data",
                    "3": "get_return_value"
                },
                "param_1": {
                    "1": "data",
                    "23": "input_array",
                    "3": "array"
                },
                "param_1 + 4": {
                    "1": "array_element"
                },
                "piVar2": {
                    "1": "memory_address",
                    "2": "temp_ptr",
                    "3": "current_element",
                    "6": "current_ptr",
                    "9": "current_pointer"
                },
                "puVar1": {
                    "1": "address_of_data_array",
                    "2": "pointer_array",
                    "3": "temp_pointer",
                    "4": "array_ptr",
                    "6": "array_pointer"
                },
                "undefined8": {
                    "1": "return_type"
                }
            },
            "called": [
                "FUN_001129f4"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_001129f4",
                "FUN_00112b6e"
            ],
            "code": "\nreturn_type get_return_value_001129f4(int *input_array)\n\n{\n  return_type *array_pointer;\n  int *current_pointer;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(return_type *)(**(long **)(input_array + 4) + 8);\n    }\n    array_pointer = (return_type *)(input_array + 4);\n    current_pointer = **(int ***)(return_type *)*array_pointer;\n  } while ((input_array != current_pointer) && (input_array = current_pointer, current_pointer != (int *)0x0));\n  return ((return_type *)*array_pointer)[1];\n}\n\n",
            "current_name": "get_return_value_001129f4",
            "entrypoint": "0x001129f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "input_array",
                "piVar2": "current_pointer",
                "puVar1": "array_pointer",
                "undefined8": "return_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112a33": {
            "additional_data": {
                "*(long *)(*(long *)(param_2 + 0x20) + 0x30)": {
                    "1": "ptr2"
                },
                "*(long *)(param_2 + 0x10)": {
                    "1": "ptr1"
                },
                "*(long *)(param_2 + 0x10) + *(long *)(*(long *)(param_2 + 0x20) + 0x30)": {
                    "1": "sum"
                },
                "*(undefined8 *)(param_2 + 8)": {
                    "1": "ptr"
                },
                "0": {
                    "1": "false"
                },
                "0x12": {
                    "1": "variable_type_limit"
                },
                "0x7f": {
                    "1": "variable_type_special"
                },
                "FUN_0010bd62": {
                    "1": "record_debug_parameter"
                },
                "FUN_0010c05d": {
                    "1": "record_variable"
                },
                "FUN_0010c218": {
                    "1": "record_debug_variable"
                },
                "FUN_0010c6be": {
                    "1": "debug_tag_type"
                },
                "FUN_0010da0b": {
                    "1": "debug_record_variable"
                },
                "FUN_00112a33": {
                    "1": "record_debug_data",
                    "14": "record_debug_info",
                    "4": "process_debug_record",
                    "7": "record_debug_information"
                },
                "PTR_FUN_0010bd62": {
                    "1": "ptr_fun_4"
                },
                "PTR_FUN_0010c05d": {
                    "1": "ptr_fun_3"
                },
                "PTR_FUN_0010c218": {
                    "1": "ptr_fun_1"
                },
                "PTR_FUN_0010c6be": {
                    "1": "ptr_fun_2"
                },
                "PTR_FUN_0010da0b": {
                    "1": "ptr_fun_5"
                },
                "caseD_2": {
                    "1": "case_2"
                },
                "coff_get_slot_lto_priv_0": {
                    "1": "get_coff_slot_lto_private",
                    "2": "get_slot_lto_priv",
                    "3": "get_coff_slot_lto_priv"
                },
                "coff_get_slot_lto_priv_0_param_1": {
                    "1": "param1"
                },
                "coff_get_slot_lto_priv_0_param_3": {
                    "1": "param3"
                },
                "data1": {
                    "1": "data_1"
                },
                "data2": {
                    "1": "data_2"
                },
                "debug_name_type": {
                    "2": "name_type_debug",
                    "3": "name_type",
                    "5": "get_name_type"
                },
                "debug_record_parameter": {
                    "1": "record_parameter_debug",
                    "7": "record_parameter"
                },
                "debug_record_variable": {
                    "1": "record_debug_variable",
                    "2": "record_variable_debug",
                    "7": "record_variable"
                },
                "debug_tag_type": {
                    "1": "get_type_tag",
                    "2": "tag_type_debug",
                    "3": "tag_type",
                    "4": "get_tag_type"
                },
                "false": {
                    "1": "false"
                },
                "lVar2": {
                    "1": "temp_var",
                    "2": "result",
                    "5": "type",
                    "6": "type_value",
                    "9": "type_result"
                },
                "param_1": {
                    "1": "extracted_data",
                    "5": "param_1",
                    "7": "param1",
                    "9": "arg1"
                },
                "param_2": {
                    "1": "param_address",
                    "2": "param_2",
                    "5": "param2",
                    "9": "arg2"
                },
                "param_2 + 0x10": {
                    "1": "param2_plus10"
                },
                "param_2 + 8": {
                    "1": "var_ptr"
                },
                "param_3": {
                    "1": "data",
                    "5": "param_3",
                    "7": "param3",
                    "9": "arg3"
                },
                "param_4": {
                    "1": "input_size",
                    "2": "byte_value",
                    "4": "type",
                    "8": "record_type"
                },
                "param_5": {
                    "1": "file_descriptor",
                    "2": "debugger",
                    "3": "arg5",
                    "6": "arg4"
                },
                "param_6": {
                    "1": "debug_param",
                    "2": "size",
                    "3": "arg6",
                    "4": "param_6",
                    "6": "arg5",
                    "7": "param6"
                },
                "param_7": {
                    "1": "misc_param",
                    "2": "param_flag",
                    "3": "flags",
                    "4": "arg6",
                    "6": "param_7",
                    "7": "param7"
                },
                "param_7 & 0xff": {
                    "1": "record_type_masked"
                },
                "plVar3": {
                    "1": "type_pointer",
                    "3": "coff_slot_ptr",
                    "4": "slot_pointer",
                    "5": "coff_slot",
                    "7": "slot"
                },
                "record_parameter": {
                    "1": "record_parameter"
                },
                "record_variable": {
                    "1": "record_variable"
                },
                "tag_type": {
                    "1": "tag_type"
                },
                "uVar1": {
                    "1": "record_result",
                    "24": "result",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010bd62",
                "FUN_0010da0b"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nbool record_debug_info_00112a33(undefined8 arg1,long arg2,undefined8 arg3,byte record_type,undefined8 arg4\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long type_result;\n  long *slot;\n  \n  if (record_type < 0x12) {\n    if (record_type != 0) {\n      switch(record_type) {\n      case 1:\n        result = record_variable\n                          (arg4,*(undefined8 *)(arg2 + 8),param6,4,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_case_2;\n      case 3:\n        result = record_variable\n                          (arg4,*(undefined8 *)(arg2 + 8),param6,(param7 & 0xff) + 2,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 4:\n        result = record_variable\n                          (arg4,*(undefined8 *)(arg2 + 8),param6,5,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 9:\n        result = record_parameter\n                          (arg4,*(undefined8 *)(arg2 + 8),param6,1,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        type_result = get_tag_type(arg4,*(undefined8 *)(arg2 + 8));\n        if (type_result == 0) {\n          return false;\n        }\n        slot = (long *)get_coff_slot_lto_priv(arg1,arg3);\n        *slot = type_result;\n        break;\n      case 0xd:\n        type_result = get_name_type(arg4,*(undefined8 *)(arg2 + 8));\n        return type_result != 0;\n      case 0x11:\n        result = record_parameter\n                          (arg4,*(undefined8 *)(arg2 + 8),param6,2,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      }\n    }\n  }\n  else if (record_type == 0x7f) {\nswitchD_00112a73_case_2:\n    result = record_variable\n                      (arg4,*(undefined8 *)(arg2 + 8),param6,1,\n                       *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "current_name": "record_debug_info_00112a33",
            "entrypoint": "0x00112a33",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112a33": "record_debug_info_00112a33",
                "caseD_2": "case_2",
                "coff_get_slot_lto_priv_0": "get_coff_slot_lto_priv",
                "debug_name_type": "get_name_type",
                "debug_record_parameter": "record_parameter",
                "debug_record_variable": "record_variable",
                "debug_tag_type": "get_tag_type",
                "lVar2": "type_result",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "record_type",
                "param_5": "arg4",
                "param_6": "param6",
                "param_7": "param7",
                "plVar3": "slot",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112b6e": {
            "additional_data": {
                "FUN_00112b6e": {
                    "1": "find_circular_debug_type",
                    "2": "get_real_type",
                    "3": "find_real_type"
                },
                "__format": {
                    "1": "type_name_format",
                    "2": "error_message_format",
                    "23": "format_string"
                },
                "bVar5": {
                    "1": "is_circular_debug",
                    "2": "is_circular_info",
                    "27": "is_circular"
                },
                "iVar1": {
                    "1": "input_value",
                    "3": "first_element_value",
                    "5": "first_element",
                    "8": "array_size"
                },
                "local_10": {
                    "1": "array_ptr",
                    "2": "input_array_copy",
                    "3": "temp_array",
                    "6": "temp_input_array",
                    "8": "current_array"
                },
                "local_18": {
                    "1": "current_debug_info",
                    "2": "debug_stack",
                    "3": "visited_debug_info"
                },
                "param_1": {
                    "31": "input_array"
                },
                "param_2": {
                    "1": "circular_list",
                    "2": "debug_info_list",
                    "20": "debug_info",
                    "6": "debug_info_array"
                },
                "piVar3": {
                    "1": "returned_array",
                    "11": "result_array",
                    "3": "result_ptr",
                    "6": "return_value",
                    "8": "result"
                },
                "plVar4": {
                    "1": "debug_ptr",
                    "15": "current_debug_info",
                    "2": "debug_info",
                    "6": "current_info"
                },
                "uVar2": {
                    "18": "type_name"
                }
            },
            "called": [
                "FUN_001129f4",
                "FUN_00104240",
                "FUN_00112b6e",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_0010ee3f",
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f"
            ],
            "code": "\n\n\nint * find_real_type_00112b6e(int *input_array,long *debug_info)\n\n{\n  int array_size;\n  undefined8 type_name;\n  char *format_string;\n  int *result_array;\n  long *current_debug_info;\n  bool is_circular;\n  long *temp_debug_info;\n  int *current_array;\n  \n  array_size = *input_array;\n  if ((array_size != 1) && (1 < array_size - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      type_name = debug_get_type_name_constprop_0\n                        (input_array,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,type_name);\n      return (int *)0x0;\n    }\n  }\n  temp_debug_info = debug_info;\n  current_array = input_array;\n  if (array_size - 0x16U < 2) {\n    result_array = (int *)find_real_type_00112b6e((*(undefined8 **)(input_array + 4))[1],&temp_debug_info);\n    return result_array;\n  }\n  result_array = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result_array) {\n    return input_array;\n  }\n  if (result_array == (int *)0x0) {\n    return input_array;\n  }\n  result_array = (int *)find_real_type_00112b6e(result_array,&temp_debug_info);\n  return result_array;\n}\n\n",
            "current_name": "find_real_type_00112b6e",
            "entrypoint": "0x00112b6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112b6e": "find_real_type_00112b6e",
                "__format": "format_string",
                "bVar5": "is_circular",
                "iVar1": "array_size",
                "local_10": "current_array",
                "local_18": "temp_debug_info",
                "param_1": "input_array",
                "param_2": "debug_info",
                "piVar3": "result_array",
                "plVar4": "current_debug_info",
                "uVar2": "type_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112c1f": {
            "additional_data": {
                "FUN_00112c1f": {
                    "1": "process_debug_data",
                    "2": "reverse_and_modify",
                    "5": "process_debug_type"
                },
                "bVar14": {
                    "1": "is_current_struct",
                    "2": "bool_value",
                    "3": "bool_var14",
                    "9": "bool_var"
                },
                "cVar5": {
                    "1": "character1",
                    "2": "c_var5",
                    "4": "char_var5",
                    "7": "flag",
                    "8": "char_var"
                },
                "iVar10": {
                    "1": "type_id",
                    "2": "int_var"
                },
                "iVar9": {
                    "1": "val2",
                    "2": "type_kind",
                    "3": "var2",
                    "4": "int_value"
                },
                "lVar2": {
                    "1": "temp_var",
                    "2": "var2",
                    "4": "long_var2",
                    "5": "var1"
                },
                "local_3c": {
                    "1": "local_variable_2",
                    "10": "local_var",
                    "3": "local_value"
                },
                "param_1": {
                    "1": "input_val",
                    "2": "input1",
                    "7": "param_address"
                },
                "param_2": {
                    "1": "type",
                    "2": "input2",
                    "5": "param_value",
                    "6": "param2",
                    "8": "param_2"
                },
                "param_3": {
                    "1": "input_param3",
                    "11": "param_array",
                    "2": "type_array",
                    "3": "type_info"
                },
                "param_4": {
                    "1": "param_value2",
                    "4": "param_size",
                    "6": "param4",
                    "8": "param_4"
                },
                "piVar6": {
                    "1": "ptr2",
                    "2": "pointer4",
                    "3": "pointer_var6"
                },
                "plVar1": {
                    "1": "ptr_temp_var",
                    "2": "pointer1",
                    "4": "pointer_var1",
                    "5": "ptr1"
                },
                "puVar3": {
                    "1": "var_ptr",
                    "2": "ptr3",
                    "3": "ptr2"
                },
                "puVar4": {
                    "1": "ptr2",
                    "2": "pointer_var3",
                    "3": "ptr3"
                },
                "uVar10": {
                    "1": "var_10",
                    "2": "undefined4_value",
                    "5": "u_var10"
                },
                "uVar11": {
                    "1": "var_11",
                    "2": "result4",
                    "4": "u_var11"
                },
                "uVar12": {
                    "1": "unsigned_long_var12",
                    "2": "ulong_value",
                    "4": "u_var12",
                    "5": "ulong_var"
                },
                "uVar13": {
                    "1": "var13",
                    "2": "uint_value",
                    "4": "u_var13",
                    "7": "uint_var"
                },
                "uVar7": {
                    "1": "output1",
                    "3": "u_var7",
                    "9": "result"
                },
                "uVar8": {
                    "1": "unsigned_long_var8",
                    "2": "undefined8_value1",
                    "3": "u_var8",
                    "4": "result2",
                    "5": "value1"
                },
                "uVar9": {
                    "2": "value2"
                }
            },
            "called": [
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_0010a69a",
                "FUN_001040a0",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_00112b6e",
                "FUN_0010e5db",
                "FUN_0010adf2",
                "FUN_0010ae0e",
                "FUN_0010a0e9",
                "FUN_0010a0a0",
                "FUN_00109e76",
                "FUN_00109d5c",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010a77a",
                "FUN_0010a0d3",
                "FUN_00104240",
                "FUN_0010add5",
                "FUN_0010c7a0",
                "FUN_0010a83e",
                "FUN_00109dfe",
                "FUN_0010a2b9",
                "FUN_0010e453",
                "FUN_00104300",
                "FUN_0010a181",
                "FUN_00112c1f",
                "FUN_0010a083",
                "FUN_0010a0bd",
                "FUN_0010ab4d",
                "FUN_00109bbb",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010bba1",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_001135a5"
            ],
            "code": "\n\n\nundefined8 process_debug_type_00112c1f(ulong param_address,undefined8 param_2,int *param_array,long param_4)\n\n{\n  long *ptr1;\n  long var1;\n  undefined8 *ptr2;\n  undefined8 *ptr3;\n  char char_var;\n  int *ptr4;\n  undefined8 result;\n  undefined8 value1;\n  int int_var;\n  undefined4 u_var10;\n  undefined8 u_var11;\n  ulong ulong_var;\n  uint uint_var;\n  bool bool_var;\n  uint local_var;\n  \n  ulong_var = param_address;\nLAB_00112c39:\n  if (param_array != (int *)0x0) {\n    int_var = *param_array;\n    if (int_var - 0x16U < 2) {\n      do {\n        ptr1 = *(long **)(param_array + 4);\n        uint_var = *(uint *)(param_address + 0x30);\n        ulong_var = (ulong)uint_var;\n        var1 = *ptr1;\n        if (*(uint *)(var1 + 0x10) == uint_var) {\n          if (int_var == 0x16) {\n            result = stab_typedef_type_lto_priv_0(param_2,*(undefined8 *)(var1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptr4 = (int *)debug_get_real_type_isra_0(param_array,0);\n          if (ptr4 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr4 - 7U < 4) && (*(long *)(ptr4 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr4 + 4) + 0xc) <= *(uint *)(param_address + 0x38)) &&\n               (char_var = debug_set_class_id_lto_priv_0\n                                  (param_address,*(undefined8 *)(**(long **)(param_array + 4) + 8),ptr4),\n               char_var == '\\0')) {\n              return 0;\n            }\n            uint_var = *(uint *)(*(long *)(ptr4 + 4) + 0xc);\n          }\n          else {\n            uint_var = 0;\n          }\n          int_var = *ptr4;\n          result = *(undefined8 *)(**(long **)(param_array + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (int_var == 0x17) {\n          if (var1 != param_4) goto LAB_00112c94;\n          *(uint *)(param_4 + 0x10) = uint_var;\n          param_4 = *ptr1;\n          param_array = (int *)ptr1[1];\n          goto LAB_00112c39;\n        }\n        if (param_4 != 0) {\n          *(uint *)(param_4 + 0x10) = uint_var;\n        }\n        param_array = (int *)ptr1[1];\n        if (param_array == (int *)0x0) goto LAB_00112dd6;\n        int_var = *param_array;\n        param_4 = 0;\n      } while (int_var - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (param_4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param_4 + 0x10) = *(undefined4 *)(param_address + 0x30);\n      if (*(int *)(param_4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(param_4 + 8);\n    }\n    switch(int_var) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = stab_void_type_lto_priv_0(param_2);\n      return result;\n    case 3:\n      result = stab_int_type_lto_priv_0(param_2,param_array[1],*(undefined *)(param_array + 4));\n      return result;\n    case 4:\n      result = stab_float_type_lto_priv_0(param_2,param_array[1]);\n      return result;\n    case 5:\n      result = stab_complex_type_lto_priv_0(param_2,param_array[1]);\n      return result;\n    case 6:\n      result = stab_bool_type_lto_priv_0(param_2,param_array[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(param_array + 4) != 0) {\n        if ((*(uint *)(*(long *)(param_array + 4) + 0xc) <= *(uint *)(param_address + 0x38)) &&\n           (char_var = debug_set_class_id_lto_priv_0(param_address,result,param_array), char_var == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(param_array + 4);\n        if (*(int *)(param_address + 0x30) == *(int *)(var1 + 8)) {\n          uint_var = *(uint *)(var1 + 0xc);\n          if (uint_var <= *(uint *)(param_address + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          int_var = *param_array;\nLAB_00112ed2:\n          result = stab_tag_type_lto_priv_0(param_2,result,uint_var,int_var);\n          return result;\n        }\n        *(int *)(var1 + 8) = *(int *)(param_address + 0x30);\n      }\n      u_var10 = 0;\n      if (*(long *)(param_array + 4) != 0) {\n        u_var10 = *(undefined4 *)(*(long *)(param_array + 4) + 0xc);\n      }\n      char_var = stab_start_struct_type_lto_priv_0(param_2,result,u_var10,*param_array == 7,param_array[1]);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param_array + 4) != (long *)0x0) && (ulong_var = 0, **(long **)(param_array + 4) != 0)) {\n        while( true ) {\n          ptr3 = *(undefined8 **)(**(long **)(param_array + 4) + ulong_var * 8);\n          if (ptr3 == (undefined8 *)0x0) break;\n          char_var = process_debug_type_00112c1f(param_address,param_2,ptr3[1],0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n          char_var = stab_struct_field_lto_priv_0\n                            (param_2,*ptr3,*(undefined4 *)(ptr3 + 3),\n                             *(undefined4 *)((long)ptr3 + 0x1c),*(undefined4 *)(ptr3 + 2));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          ulong_var = (ulong)((int)ulong_var + 1);\n        }\n      }\n      result = stab_end_struct_type_lto_priv_0(param_2);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(param_array + 4) == 0) {\n        uint_var = 0;\n        ptr4 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param_array + 4) + 0xc) <= *(uint *)(param_address + 0x38)) &&\n           (ulong_var = param_address, char_var = debug_set_class_id_lto_priv_0(param_address,result,param_array),\n           char_var == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(param_array + 4);\n        uint_var = *(uint *)(var1 + 0xc);\n        if (*(int *)(param_address + 0x30) == *(int *)(var1 + 8)) {\n          if (uint_var <= *(uint *)(param_address + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          int_var = *param_array;\n          goto LAB_00112ed2;\n        }\n        ptr4 = *(int **)(var1 + 0x20);\n        *(int *)(var1 + 8) = *(int *)(param_address + 0x30);\n        if (((ptr4 != (int *)0x0) && (param_array != ptr4)) &&\n           (ulong_var = param_address, char_var = process_debug_type_00112c1f(param_address,param_2,ptr4,0), char_var == '\\0')) {\n          return 0;\n        }\n      }\n      char_var = stab_start_class_type_lto_priv_0\n                        (param_2,result,uint_var,*param_array == 9,param_array[1],ptr4 != (int *)0x0,\n                         param_array == ptr4,ulong_var);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param_array + 4) != (long *)0x0) {\n        uint_var = 0;\n        if (**(long **)(param_array + 4) != 0) {\n          while (ptr3 = *(undefined8 **)(**(long **)(param_array + 4) + (ulong)uint_var * 8),\n                ptr3 != (undefined8 *)0x0) {\n            char_var = process_debug_type_00112c1f(param_address,param_2,ptr3[1],0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr3 + 0x14) == '\\0') {\n              char_var = stab_struct_field_lto_priv_0(param_2,*ptr3,*(undefined4 *)(ptr3 + 3));\n            }\n            else {\n              char_var = stab_class_static_member_lto_priv_0(param_2,*ptr3,ptr3[3]);\n            }\n            if (char_var == '\\0') {\n              return 0;\n            }\n            uint_var = uint_var + 1;\n          }\n        }\n        uint_var = 0;\n        if (*(long *)(*(long *)(param_array + 4) + 0x10) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_array + 4) + 0x10) + (ulong)uint_var * 8),\n                ptr3 != (undefined8 *)0x0) {\n            char_var = process_debug_type_00112c1f(param_address,param_2,*ptr3,0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            char_var = stab_class_baseclass_lto_priv_0\n                              (param_2,*(undefined4 *)(ptr3 + 1),\n                               *(undefined *)((long)ptr3 + 0xc));\n            if (char_var == '\\0') {\n              return 0;\n            }\n            uint_var = uint_var + 1;\n          }\n        }\n        local_var = 0;\n        if (*(long *)(*(long *)(param_array + 4) + 0x18) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_array + 4) + 0x18) + (ulong)local_var * 8),\n                ptr3 != (undefined8 *)0x0) {\n            char_var = stab_class_start_method_lto_priv_0(param_2,*ptr3);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            uint_var = 0;\n            while (ptr2 = *(undefined8 **)(ptr3[1] + (ulong)uint_var * 8),\n                  ptr2 != (undefined8 *)0x0) {\n              if ((ptr2[4] != 0) &&\n                 (char_var = process_debug_type_00112c1f(param_address,param_2,ptr2[4],0), char_var == '\\0')) {\n                return 0;\n              }\n              char_var = process_debug_type_00112c1f(param_address,param_2,ptr2[1],0);\n              if (char_var == '\\0') {\n                return 0;\n              }\n              if (ptr2[3] == -1) {\n                char_var = stab_class_static_method_variant_lto_priv_0\n                                  (param_2,*ptr2,*(undefined4 *)(ptr2 + 2),\n                                   *(undefined *)((long)ptr2 + 0x14),\n                                   *(undefined *)((long)ptr2 + 0x15));\n              }\n              else {\n                char_var = stab_class_method_variant_lto_priv_0(param_2);\n              }\n              if (char_var == '\\0') {\n                return 0;\n              }\n              uint_var = uint_var + 1;\n            }\n            char_var = stab_class_end_method_lto_priv_0(param_2);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            local_var = local_var + 1;\n          }\n        }\n      }\n      result = stab_end_class_type_lto_priv_0(param_2);\n      return result;\n    case 0xb:\n      ptr3 = *(undefined8 **)(param_array + 4);\n      if (ptr3 == (undefined8 *)0x0) {\n        value1 = 0;\n        u_var11 = 0;\n      }\n      else {\n        value1 = ptr3[1];\n        u_var11 = *ptr3;\n      }\n      result = stab_enum_type_lto_priv_0(param_2,result,u_var11,value1);\n      return result;\n    case 0xc:\n      char_var = process_debug_type_00112c1f(param_address,param_2,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_pointer_type_lto_priv_0(param_2);\n      return result;\n    case 0xd:\n      char_var = process_debug_type_00112c1f(param_address,param_2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      ulong_var = 0;\n      if (*(long *)(*(long *)(param_array + 4) + 8) == 0) {\n        ulong_var = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(param_array + 4) + 8) + ulong_var * 8), var1 != 0) {\n          ulong_var = ulong_var + 1;\n          char_var = process_debug_type_00112c1f(param_address,param_2,var1,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        ulong_var = ulong_var & 0xffffffff;\n      }\n      result = stab_function_type_lto_priv_0\n                        (param_2,ulong_var,*(undefined *)(*(long *)(param_array + 4) + 0x10));\n      return result;\n    case 0xe:\n      char_var = process_debug_type_00112c1f(param_address,param_2,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_reference_type_lto_priv_0(param_2);\n      return result;\n    case 0xf:\n      char_var = process_debug_type_00112c1f(param_address,param_2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_range_type_lto_priv_0\n                        (param_2,*(undefined8 *)(*(long *)(param_array + 4) + 8),\n                         *(undefined8 *)(*(long *)(param_array + 4) + 0x10));\n      return result;\n    case 0x10:\n      char_var = process_debug_type_00112c1f(param_address,param_2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = process_debug_type_00112c1f(param_address,param_2,*(undefined8 *)(*(long *)(param_array + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      var1 = *(long *)(param_array + 4);\n      result = stab_array_type_lto_priv_0\n                        (param_2,*(undefined8 *)(var1 + 0x10),*(undefined8 *)(var1 + 0x18),\n                         *(undefined *)(var1 + 0x20));\n      return result;\n    case 0x11:\n      char_var = process_debug_type_00112c1f(param_address,param_2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_set_type_lto_priv_0(param_2,*(undefined *)(*(long *)(param_array + 4) + 8));\n      return result;\n    case 0x12:\n      char_var = process_debug_type_00112c1f(param_address,param_2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = process_debug_type_00112c1f(param_address,param_2,*(undefined8 *)(*(long *)(param_array + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_offset_type_lto_priv_0(param_2);\n      return result;\n    case 0x13:\n      char_var = process_debug_type_00112c1f(param_address,param_2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      ulong_var = 0;\n      if (*(long *)(*(long *)(param_array + 4) + 0x10) == 0) {\n        ulong_var = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(param_array + 4) + 0x10) + ulong_var * 8), var1 != 0)\n        {\n          ulong_var = ulong_var + 1;\n          char_var = process_debug_type_00112c1f(param_address,param_2,var1,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param_array + 4) + 8) != 0) &&\n         (char_var = process_debug_type_00112c1f(param_address,param_2,*(long *)(*(long *)(param_array + 4) + 8),0),\n         char_var == '\\0')) {\n        return 0;\n      }\n      result = stab_method_type_lto_priv_0\n                        (param_2,*(long *)(*(long *)(param_array + 4) + 8) != 0,ulong_var & 0xffffffff,\n                         *(undefined *)(*(long *)(param_array + 4) + 0x18));\n      return result;\n    case 0x14:\n      char_var = process_debug_type_00112c1f(param_address,param_2,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_const_type_lto_priv_0(param_2);\n      return result;\n    case 0x15:\n      char_var = process_debug_type_00112c1f(param_address,param_2,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_volatile_type_lto_priv_0(param_2);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bool_var = *(int **)**(undefined8 **)(param_array + 4) == param_array;\n  param_array = *(int **)**(undefined8 **)(param_array + 4);\n  if (bool_var) {\nLAB_00112dd6:\n    result = stab_empty_type_lto_priv_0(param_2);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "current_name": "process_debug_type_00112c1f",
            "entrypoint": "0x00112c1f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112c1f": "process_debug_type_00112c1f",
                "bVar14": "bool_var",
                "cVar5": "char_var",
                "iVar9": "int_var",
                "lVar2": "var1",
                "local_3c": "local_var",
                "param_1": "param_address",
                "param_3": "param_array",
                "piVar6": "ptr4",
                "plVar1": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar10": "u_var10",
                "uVar11": "u_var11",
                "uVar12": "ulong_var",
                "uVar13": "uint_var",
                "uVar7": "result",
                "uVar8": "value1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001135a5": {
            "additional_data": {
                "*puVar4": {
                    "1": "next_list"
                },
                "*puVar5": {
                    "1": "next_element"
                },
                "FUN_00108f05": {
                    "1": "reversing_function"
                },
                "FUN_0010e6a8": {
                    "1": "function2"
                },
                "FUN_0010e7c2": {
                    "1": "process_debug_info3"
                },
                "FUN_0010e842": {
                    "1": "function9"
                },
                "FUN_0010e8a9": {
                    "1": "function7"
                },
                "FUN_0010e918": {
                    "1": "process_debug_info5"
                },
                "FUN_0010e9a0": {
                    "1": "function6"
                },
                "FUN_0010eafe": {
                    "1": "process_debug_info9"
                },
                "FUN_0010ebb0": {
                    "1": "function12"
                },
                "FUN_00112502": {
                    "1": "function1"
                },
                "FUN_00112c1f": {
                    "1": "function4"
                },
                "FUN_001135a5": {
                    "1": "parse_stab_entry",
                    "2": "process_data",
                    "6": "write_debug_info",
                    "9": "process_debug_info"
                },
                "FUN_00113a4d": {
                    "1": "function11"
                },
                "abort": {
                    "1": "abort",
                    "2": "abort_function"
                },
                "cVar2": {
                    "1": "char_val",
                    "17": "result",
                    "2": "is_successful",
                    "3": "is_success",
                    "6": "success"
                },
                "debug_write_block_constprop_0": {
                    "1": "write_block_to_debug",
                    "2": "write_debug_block",
                    "8": "write_block"
                },
                "debug_write_linenos_constprop_0": {
                    "1": "write_line_numbers_to_debug",
                    "2": "write_debug_linenos",
                    "7": "write_line_numbers"
                },
                "debug_write_type_constprop_0": {
                    "1": "write_type_const",
                    "2": "write_debug_type",
                    "7": "write_type"
                },
                "iVar1": {
                    "1": "type",
                    "15": "index",
                    "2": "count"
                },
                "param_1": {
                    "1": "file_stream",
                    "10": "arg1",
                    "11": "param1",
                    "3": "file_descriptor"
                },
                "param_2": {
                    "1": "symbol_table",
                    "10": "arg2",
                    "11": "param2",
                    "2": "debug_info"
                },
                "param_3": {
                    "1": "data",
                    "11": "param3",
                    "2": "info",
                    "9": "arg3"
                },
                "puVar4": {
                    "1": "current_pointer",
                    "2": "current_item",
                    "3": "current_param",
                    "4": "parameter",
                    "6": "ptr1"
                },
                "puVar5": {
                    "1": "block_node",
                    "3": "current_block",
                    "6": "ptr2"
                },
                "puVar5[2]": {
                    "1": "element2"
                },
                "puVar5[2] + 0x18": {
                    "1": "pu_var5_plus18"
                },
                "stab_end_function_lto_priv_0": {
                    "1": "end_function_definition",
                    "10": "end_function"
                },
                "stab_float_constant_lto_priv_0": {
                    "1": "define_float_constant",
                    "2": "write_float_constant",
                    "4": "process_float_constant"
                },
                "stab_function_parameter_lto_priv_0": {
                    "1": "function_parameter",
                    "2": "define_function_parameter",
                    "4": "process_function_parameter"
                },
                "stab_int_constant_lto_priv_0": {
                    "1": "define_integer_constant",
                    "2": "write_int_constant",
                    "4": "process_int_constant"
                },
                "stab_start_function_lto_priv_0": {
                    "1": "stab_start_function",
                    "10": "start_function"
                },
                "stab_tag_lto_priv_0": {
                    "1": "parse_tag",
                    "2": "write_tag",
                    "4": "process_tag"
                },
                "stab_typdef_lto_priv_0": {
                    "1": "process_typedef",
                    "3": "process_type_def"
                },
                "stab_typed_constant_lto_priv_0": {
                    "1": "stab_typed_constant",
                    "2": "write_typed_constant",
                    "4": "process_typed_constant"
                },
                "stab_variable_lto_priv_0": {
                    "1": "stab_variable",
                    "4": "process_variable"
                },
                "stag_variable_lto_priv_0": {
                    "1": "write_variable"
                },
                "uVar3": {
                    "12": "result",
                    "16": "return_value",
                    "2": "output"
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_001040a0",
                "FUN_0010e6a8",
                "FUN_0010e7c2",
                "FUN_00112c1f",
                "FUN_0010e918",
                "FUN_0010e9a0",
                "FUN_0010e8a9",
                "FUN_00108f05",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00113a4d",
                "FUN_0010ebb0"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "code": "\nundefined8 process_debug_info_001135a5(undefined8 param1,undefined8 param2,long param3)\n\n{\n  int index;\n  char result;\n  undefined8 return_value;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(param3 + 0x14)) {\n                    \n    abort_execution();\n  }\n  switch(*(undefined4 *)(param3 + 0x14)) {\n  case 0:\n    result = write_type(param1,param2,*(undefined8 *)(param3 + 0x20),param3);\n    if (result != '\\0') {\n      return_value = process_type_def(param2,*(undefined8 *)(param3 + 8));\n      return return_value;\n    }\n    break;\n  case 1:\n    result = write_type(param1,param2,*(undefined8 *)(param3 + 0x20),param3);\n    if (result != '\\0') {\n      return_value = process_tag(param2,*(undefined8 *)(param3 + 8));\n      return return_value;\n    }\n    break;\n  case 2:\n    result = write_type\n                      (param1,param2,*(undefined8 *)(*(long *)(param3 + 0x20) + 8),0);\n    if (result != '\\0') {\n      return_value = process_variable\n                        (param2,*(undefined8 *)(param3 + 8),**(undefined4 **)(param3 + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(param3 + 0x20) + 4));\n      return return_value;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(param3 + 0x20);\n    index = *(int *)(param3 + 0x18);\n    return_value = *(undefined8 *)(param3 + 8);\n    result = write_line_numbers(param1,param2,*(undefined8 *)(element2 + 0x18));\n    if (((result != '\\0') &&\n        (result = write_type(param1,param2,*ptr2,0), result != '\\0')) &&\n       (result = start_function(param2,return_value,index == 2), result != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        result = write_type(param1,param2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = process_function_parameter(param2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)element2;\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          return_value = end_function(param2);\n          return return_value;\n        }\n        result = write_block(param1,param2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    return_value = process_int_constant\n                      (param2,*(undefined8 *)(param3 + 8),*(undefined8 *)(param3 + 0x20));\n    return return_value;\n  case 5:\n    return_value = process_float_constant\n                      (*(undefined8 *)(param3 + 0x20),param2,*(undefined8 *)(param3 + 8));\n    return return_value;\n  case 6:\n    result = write_type(param1,param2,**(undefined8 **)(param3 + 0x20),0);\n    if (result != '\\0') {\n      return_value = process_typed_constant\n                        (param2,*(undefined8 *)(param3 + 8),\n                         *(undefined8 *)(*(long *)(param3 + 0x20) + 8));\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_info_001135a5",
            "entrypoint": "0x001135a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001135a5": "process_debug_info_001135a5",
                "abort": "abort_execution",
                "cVar2": "result",
                "debug_write_block_constprop_0": "write_block",
                "debug_write_linenos_constprop_0": "write_line_numbers",
                "debug_write_type_constprop_0": "write_type",
                "iVar1": "index",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar4": "ptr1",
                "puVar5": "ptr2",
                "puVar5[2]": "element2",
                "stab_end_function_lto_priv_0": "end_function",
                "stab_float_constant_lto_priv_0": "process_float_constant",
                "stab_function_parameter_lto_priv_0": "process_function_parameter",
                "stab_int_constant_lto_priv_0": "process_int_constant",
                "stab_start_function_lto_priv_0": "start_function",
                "stab_tag_lto_priv_0": "process_tag",
                "stab_typdef_lto_priv_0": "process_type_def",
                "stab_typed_constant_lto_priv_0": "process_typed_constant",
                "stab_variable_lto_priv_0": "process_variable",
                "uVar3": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011378f": {
            "additional_data": {
                "BFD_WRITER_DATA_TYPE": {
                    "1": "data_type"
                },
                "CONCAT44": {
                    "1": "concatenate_44"
                },
                "FUN_0011378f": {
                    "1": "reverse_binary_extraction",
                    "2": "process_binary_function"
                },
                "__dest": {
                    "1": "name_dest",
                    "11": "destination",
                    "2": "dest_ptr",
                    "3": "destination_string"
                },
                "_local_78": {
                    "1": "local_78_copy"
                },
                "auVar1": {
                    "1": "temp_variable",
                    "11": "temp_array",
                    "2": "temp_buffer",
                    "4": "temp_var"
                },
                "bVar12": {
                    "1": "byte_value",
                    "11": "flag",
                    "2": "zero_flag",
                    "3": "temp_byte",
                    "6": "byte_var"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_error_code"
                },
                "bfd_hash_table_init": {
                    "1": "init_bfd_hash_table"
                },
                "byte": {
                    "1": "byte_value"
                },
                "byte bVar12": {
                    "1": "byte_var"
                },
                "cVar2": {
                    "1": "ch",
                    "2": "temp_char",
                    "3": "char_var",
                    "6": "status",
                    "9": "result"
                },
                "char *": {
                    "1": "pointer_to_char"
                },
                "char *__dest": {
                    "1": "char_ptr"
                },
                "char cVar2": {
                    "1": "char_var"
                },
                "debug_write_linenos_constprop_0": {
                    "1": "write_debug_linenos"
                },
                "debug_write_name_constprop_0": {
                    "1": "write_debug_name"
                },
                "lVar7": {
                    "1": "counter",
                    "14": "loop_counter",
                    "2": "index",
                    "3": "loop_variable",
                    "4": "loop_var"
                },
                "local_1e8": {
                    "1": "local_array_1",
                    "2": "symbol_array",
                    "3": "local_array3"
                },
                "local_1f0": {
                    "1": "local_var_3",
                    "2": "flag2"
                },
                "local_1f8": {
                    "1": "local_long3",
                    "2": "flag1"
                },
                "local_220": {
                    "1": "local_string_array",
                    "2": "hash_table_1",
                    "3": "local_array2",
                    "4": "hash_table1"
                },
                "local_228": {
                    "1": "temp3",
                    "2": "local_var_3"
                },
                "local_238": {
                    "1": "local_temp_array",
                    "2": "temp_array2",
                    "3": "local_array1"
                },
                "local_248": {
                    "1": "result1",
                    "2": "var_1",
                    "3": "var1"
                },
                "local_250": {
                    "1": "malloc_result",
                    "2": "buffer_size"
                },
                "local_258": {
                    "1": "local_array_1",
                    "3": "local_array"
                },
                "local_58": {
                    "1": "var_8",
                    "2": "var_11"
                },
                "local_60": {
                    "1": "temp_var6",
                    "2": "var_10"
                },
                "local_68": {
                    "1": "var_68",
                    "2": "var10"
                },
                "local_78": {
                    "1": "name_symbol",
                    "2": "local_array_5",
                    "3": "local_array5"
                },
                "local_a0": {
                    "1": "local_arr3",
                    "2": "local_buffer",
                    "3": "local_array4",
                    "4": "hash_table2"
                },
                "long": {
                    "1": "long_value"
                },
                "long *": {
                    "1": "pointer_to_long"
                },
                "long *param_3": {
                    "1": "output_one"
                },
                "long *plVar11": {
                    "1": "pointer_var_five"
                },
                "long lVar7": {
                    "1": "long_var"
                },
                "long local_250": {
                    "1": "local_long_one"
                },
                "non_fatal": {
                    "1": "handle_error"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_array_1",
                    "3": "input_array"
                },
                "param_2": {
                    "1": "input2",
                    "2": "input_array_2",
                    "3": "output_array"
                },
                "param_3": {
                    "1": "output_ptr1",
                    "2": "result"
                },
                "param_4": {
                    "1": "compilation_units",
                    "2": "input_array_3",
                    "3": "param_4"
                },
                "param_5": {
                    "1": "output_ptr3",
                    "2": "param_5",
                    "3": "source_files"
                },
                "param_6": {
                    "1": "temp_array3",
                    "2": "compilation_unit",
                    "3": "param_6"
                },
                "plVar11": {
                    "1": "pointer_list",
                    "4": "pointer_array_2"
                },
                "puVar": {
                    "1": "pointer_to_undefined4"
                },
                "puVar10": {
                    "1": "temp_ptr_4",
                    "2": "ptr"
                },
                "puVar5": {
                    "1": "pointer_to_undefined",
                    "2": "dest_ptr",
                    "3": "buffer"
                },
                "puVar8": {
                    "1": "temp_pointer_2",
                    "2": "ptr2",
                    "3": "ptr"
                },
                "puVar9": {
                    "1": "stab_header_pointer",
                    "2": "array_iterator",
                    "4": "pointer_array"
                },
                "sVar": {
                    "1": "size_t_value"
                },
                "sVar6": {
                    "1": "size_t_value",
                    "11": "string_length",
                    "3": "str_len",
                    "4": "str_length"
                },
                "size_t": {
                    "1": "size_t"
                },
                "size_t sVar6": {
                    "1": "size_var"
                },
                "stab_start_compilation_unit_lto_priv_0": {
                    "1": "start_compilation_unit"
                },
                "stab_start_source_lto_priv_0": {
                    "1": "start_source"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol"
                },
                "strcpy": {
                    "2": "copy_string"
                },
                "string_hash_newfunc_lto_priv_0": {
                    "1": "hash_function_lto_private"
                },
                "strlen": {
                    "1": "get_length_of_string"
                },
                "uStack_23c": {
                    "1": "u_stack_bottom",
                    "2": "var_4",
                    "3": "var4"
                },
                "uStack_240": {
                    "1": "stack_var_2",
                    "2": "buffer_size",
                    "3": "var3"
                },
                "uStack_244": {
                    "1": "u_stack_var_1",
                    "2": "var_2",
                    "3": "var2"
                },
                "uStack_4c": {
                    "1": "var_11",
                    "2": "var15"
                },
                "uStack_50": {
                    "1": "var_10",
                    "2": "var14"
                },
                "uStack_54": {
                    "1": "local_variable_9",
                    "2": "var13"
                },
                "uStack_70": {
                    "1": "temp_val2",
                    "2": "var_8"
                },
                "uVar3": {
                    "1": "result_var1",
                    "16": "error_code",
                    "3": "return_value",
                    "4": "error"
                },
                "uVar4": {
                    "1": "err_msg",
                    "10": "error_msg",
                    "13": "error_message"
                },
                "ulong": {
                    "1": "unsigned_long"
                },
                "undefined *": {
                    "1": "pointer_to_undefined"
                },
                "undefined *puVar5": {
                    "1": "pointer_var"
                },
                "undefined auVar1[16]": {
                    "1": "temp_buffer"
                },
                "undefined local_220[40]": {
                    "1": "local_array_two"
                },
                "undefined local_238[16]": {
                    "1": "local_array_one"
                },
                "undefined local_78[8]": {
                    "1": "local_array_five"
                },
                "undefined local_a0[40]": {
                    "1": "local_array_four"
                },
                "undefined4": {
                    "1": "undefined4_value"
                },
                "undefined4 *puVar9": {
                    "1": "pointer_var_three"
                },
                "undefined4 local_1e8[82]": {
                    "1": "local_array_three"
                },
                "undefined4 local_248": {
                    "1": "local_variable_one"
                },
                "undefined4 local_58": {
                    "1": "local_variable_seven"
                },
                "undefined4 local_60": {
                    "1": "local_variable_six"
                },
                "undefined4 uStack_23c": {
                    "1": "stack_variable_three"
                },
                "undefined4 uStack_240": {
                    "1": "stack_variable_two"
                },
                "undefined4 uStack_244": {
                    "1": "stack_variable_one"
                },
                "undefined4 uStack_4c": {
                    "1": "stack_variable_seven"
                },
                "undefined4 uStack_50": {
                    "1": "stack_variable_six"
                },
                "undefined4 uStack_54": {
                    "1": "stack_variable_five"
                },
                "undefined4 uVar3": {
                    "1": "return_value"
                },
                "undefined8": {
                    "1": "undefined8_value"
                },
                "undefined8 *": {
                    "1": "pointer_to_undefined8"
                },
                "undefined8 *local_258": {
                    "1": "local_pointer_one"
                },
                "undefined8 *param_1": {
                    "1": "input_one"
                },
                "undefined8 *param_2": {
                    "1": "input_two"
                },
                "undefined8 *param_4": {
                    "1": "output_two"
                },
                "undefined8 *param_5": {
                    "1": "output_three"
                },
                "undefined8 *param_6": {
                    "1": "output_four"
                },
                "undefined8 *puVar10": {
                    "1": "pointer_var_four"
                },
                "undefined8 *puVar8": {
                    "1": "pointer_var_two"
                },
                "undefined8 local_1f0": {
                    "1": "local_variable_four"
                },
                "undefined8 local_1f8": {
                    "1": "local_variable_three"
                },
                "undefined8 local_228": {
                    "1": "local_variable_two"
                },
                "undefined8 local_68": {
                    "1": "local_variable_five"
                },
                "undefined8 uStack_70": {
                    "1": "stack_variable_four"
                },
                "undefined8 uVar4": {
                    "1": "error_message"
                },
                "unique0x100000e9": {
                    "1": "var_15"
                },
                "unique0x100000ed": {
                    "1": "temp_var13"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_00104270",
                "FUN_0010e451",
                "FUN_001135a5",
                "FUN_00104370",
                "FUN_00104100",
                "FUN_0010e439",
                "FUN_0010e2f0",
                "FUN_0010bb52",
                "FUN_001047a0",
                "FUN_00104830",
                "FUN_00119ed0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined4_value\nprocess_binary_function_0011378f(undefined8_value *input_array,undefined8_value *output_array,long_value *output_array_1,undefined8_value *param_4,\n            undefined8_value *source_files,undefined8_value *param_6)\n\n{\n  undefined temp_array [16];\n  char result;\n  undefined4_value error_code;\n  undefined8_value error_message;\n  undefined *temp_ptr;\n  size_t string_length;\n  long_value loop_counter;\n  undefined8_value *ptr;\n  undefined4_value *pointer_array;\n  char *destination;\n  undefined8_value *ptr;\n  long_value *pointer_array_2;\n  byte_value flag;\n  undefined8_value *local_array;\n  long_value allocated_memory_size;\n  undefined4_value var1;\n  undefined4_value var2;\n  undefined4_value var3;\n  undefined4_value var4;\n  undefined local_array1 [16];\n  undefined8_value var5;\n  undefined hash_table1 [40];\n  undefined8_value var6;\n  undefined8_value var7;\n  undefined4_value local_array3 [82];\n  undefined hash_table2 [40];\n  undefined local_array5 [8];\n  undefined8_value u_stack_70;\n  undefined8_value local_variable_6;\n  undefined4_value local_variable_7;\n  undefined4_value local_variable_8;\n  undefined4_value u_stack_54;\n  undefined4_value u_stack_50;\n  undefined4_value u_stack_4c;\n  \n  flag = 0;\n  var1 = 0;\n  var2 = 0;\n  var3 = 500;\n  var4 = 0;\n  local_array = input_array;\n  allocated_memory_size = allocate_memory(500);\n  var5 = 1;\n  local_array1 = ZEXT816(0);\n  result = initialize_hash_table(hash_table1,hash_function,0x30);\n  if ((result == '\\0') ||\n     (result = initialize_hash_table(hash_table2,hash_function,0x30), result == '\\0')) {\n    error_code = get_error_code();\n    error_message = get_error_message(error_code);\n    handle_error(\"initialize_hash_table_failed: %s\",error_message);\n  }\n  else {\n    var6 = 0;\n    temp_var12 = 0xffffffff;\n    local_array5 = (undefined  [8])0xffffffffffffffff;\n    temp_var13 = 0xffffffff;\n    pointer_array = local_array3;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *pointer_array = 0;\n      pointer_array = pointer_array + (unsigned_long)flag * -2 + 1;\n    }\n    local_variable_6 = 0;\n    local_variable_7 = 0;\n    var7 = 1;\n    local_variable_8 = 0;\n    u_stack_54 = 0;\n    u_stack_50 = 0xffffffff;\n    u_stack_4c = 0xffffffff;\n    result = write_symbol(&local_array,0,0,0,0);\n    temp_array = temp_var11;\n    if (result != '\\0') {\n      local_array5._4_4_ = var2;\n      local_array5._0_4_ = var1;\n      u_stack_70 = temp_array._8_8_;\n      result = write_symbol(&local_array,100,0,0,*input_array);\n      if (result != '\\0') {\n        *(int *)(output_array + 6) = *(int *)(output_array + 6) + 1;\n        output_array[10] = 0;\n        ptr = (undefined8_value *)*output_array;\n        *(undefined4_value *)(output_array + 7) = *(undefined4_value *)((long_value)output_array + 0x34);\n        for (; ptr != (undefined8_value *)0x0; ptr = (undefined8_value *)*ptr) {\n          output_array[8] = ptr[2];\n          *(undefined4_value *)(output_array + 9) = 0;\n          result = start_compilation_unit(&local_array,*(undefined8_value *)(ptr[1] + 8))\n          ;\n          if (result == '\\0') {\n            return 0;\n          }\n          pointer_array_2 = (long_value *)ptr[1];\n          if (pointer_array_2 != (long_value *)0x0) {\n            while( true ) {\n              if ((undefined8_value *)pointer_array_2[2] != (undefined8_value *)0x0) {\n                for (ptr = *(undefined8_value **)(undefined8_value *)pointer_array_2[2]; ptr != (undefined8_value *)0x0;\n                    ptr = (undefined8_value *)*ptr) {\n                  result = write_debug_name(output_array,&local_array);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              pointer_array_2 = (long_value *)*pointer_array_2;\n              if (pointer_array_2 == (long_value *)0x0) break;\n              result = start_source(&local_array,pointer_array_2[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = write_debug_linenos(output_array,&local_array,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((concatenate_44(u_stack_4c,u_stack_50) == -1) &&\n           (error_code = write_symbol(&local_array,100,0,local_variable_6,0), (char)error_code != '\\0'))\n        {\n          (**(code **)(input_array[1] + 0x50))(var5,allocated_memory_size + 8);\n          *output_array_1 = allocated_memory_size;\n          *param_4 = concatenate_44(var2,var1);\n          *param_6 = var5;\n          temp_ptr = (undefined *)allocate_memory();\n          *temp_ptr = 0;\n          destination = temp_ptr + 1;\n          *source_files = temp_ptr;\n          for (loop_counter = local_array1._0_8_; loop_counter != 0; loop_counter = *(long_value *)(loop_counter + 0x18)) {\n            copy_string(destination,*(char **)(loop_counter + 8));\n            string_length = get_length_of_string(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_binary_function_0011378f",
            "entrypoint": "0x0011378f",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_44",
                "FUN_0011378f": "process_binary_function_0011378f",
                "__dest": "destination",
                "_local_78": "temp_var11",
                "auVar1": "temp_array",
                "bVar12": "flag",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_error_code",
                "bfd_hash_table_init": "initialize_hash_table",
                "byte": "byte_value",
                "cVar2": "result",
                "debug_write_linenos_constprop_0": "write_debug_linenos",
                "debug_write_name_constprop_0": "write_debug_name",
                "lVar7": "loop_counter",
                "local_1e8": "local_array3",
                "local_1f0": "var7",
                "local_1f8": "var6",
                "local_220": "hash_table1",
                "local_228": "var5",
                "local_238": "local_array1",
                "local_248": "var1",
                "local_250": "allocated_memory_size",
                "local_258": "local_array",
                "local_58": "local_variable_8",
                "local_60": "local_variable_7",
                "local_68": "local_variable_6",
                "local_78": "local_array5",
                "local_a0": "hash_table2",
                "long": "long_value",
                "non_fatal": "handle_error",
                "param_1": "input_array",
                "param_2": "output_array",
                "param_3": "output_array_1",
                "param_5": "source_files",
                "plVar11": "pointer_array_2",
                "puVar": "pointer_to_undefined4",
                "puVar10": "ptr",
                "puVar5": "temp_ptr",
                "puVar8": "ptr",
                "puVar9": "pointer_array",
                "sVar": "size_t_value",
                "sVar6": "string_length",
                "stab_start_compilation_unit_lto_priv_0": "start_compilation_unit",
                "stab_start_source_lto_priv_0": "start_source",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "strcpy": "copy_string",
                "string_hash_newfunc_lto_priv_0": "hash_function",
                "strlen": "get_length_of_string",
                "uStack_23c": "var4",
                "uStack_240": "var3",
                "uStack_244": "var2",
                "uStack_4c": "u_stack_4c",
                "uStack_50": "u_stack_50",
                "uStack_54": "u_stack_54",
                "uStack_70": "u_stack_70",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "ulong": "unsigned_long",
                "undefined4": "undefined4_value",
                "undefined8": "undefined8_value",
                "unique0x100000e9": "temp_var12",
                "unique0x100000ed": "temp_var13",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113a4d": {
            "additional_data": {
                "*(long *)(param_3 + 0x28)": {
                    "1": "length_ptr_array"
                },
                "*(long *)(param_3 + 0x8)": {
                    "1": "value_2"
                },
                "*(undefined8 *)(param_3 + 0x10)": {
                    "1": "array_ptr"
                },
                "*(undefined8 *)(param_3 + 0x20)": {
                    "1": "array_data"
                },
                "*(undefined8 *)(param_3 + 0x28)": {
                    "1": "ptr_array"
                },
                "FUN_00113a4d": {
                    "1": "traverse_debug_data",
                    "15": "process_debug_info",
                    "4": "process_debug_data",
                    "5": "process_debug_blocks"
                },
                "array": {
                    "1": "array"
                },
                "auVar4": {
                    "1": "status_array",
                    "2": "line_result",
                    "5": "result_array",
                    "9": "debug_result"
                },
                "cVar1": {
                    "1": "char_val",
                    "2": "flag",
                    "23": "result"
                },
                "data": {
                    "1": "data"
                },
                "debug_write_linenos_constprop_0": {
                    "1": "write_line_numbers"
                },
                "debug_write_name_constprop_0": {
                    "2": "write_name"
                },
                "index": {
                    "1": "index"
                },
                "param_1": {
                    "1": "data",
                    "12": "param1",
                    "3": "data_1",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "param",
                    "12": "param2",
                    "3": "data_2",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "block",
                    "12": "param3",
                    "2": "arg3",
                    "5": "data"
                },
                "param_3 + 0x18": {
                    "1": "data_offset"
                },
                "param_3 + 0x20": {
                    "1": "array_offset"
                },
                "param_3 + 0x28": {
                    "1": "ptr_array_offset"
                },
                "param_4": {
                    "1": "param_four",
                    "14": "param4",
                    "3": "index",
                    "4": "arg4",
                    "5": "param_4"
                },
                "param_5": {
                    "1": "param_five",
                    "13": "param5",
                    "2": "param_value",
                    "3": "arg5",
                    "5": "param_5"
                },
                "param_value": {
                    "1": "param_value"
                },
                "process_data_00112502": {
                    "6": "process_data"
                },
                "process_debug_info_001135a5": {
                    "3": "process_debug_info"
                },
                "process_function_0010ec73": {
                    "6": "process_function"
                },
                "puVar3": {
                    "1": "current_pointer",
                    "2": "block_ptr",
                    "22": "ptr",
                    "3": "current_ptr"
                },
                "stab_end_block_lto_priv_0": {
                    "3": "end_block"
                },
                "stab_start_block_lto_priv_0": {
                    "3": "start_block"
                },
                "uVar2": {
                    "1": "output_data",
                    "20": "return_value",
                    "7": "result"
                },
                "update_max_value_0010ed2c": {
                    "6": "update_max_value"
                },
                "value": {
                    "1": "value"
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_0010ec73",
                "FUN_00113a4d",
                "FUN_0010ed2c",
                "FUN_001135a5"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_001135a5"
            ],
            "code": "\nundefined8\nprocess_debug_info_00113a4d(undefined8 param1,undefined8 param2,long param3,undefined8 param4,\n            undefined8 param5)\n\n{\n  char result;\n  undefined8 return_value;\n  undefined8 *ptr;\n  undefined debug_result [16];\n  \n  result = write_line_numbers(param1,param2,*(undefined8 *)(param3 + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(param3 + 0x28) == 0 && (*(long *)(param3 + 8) != 0)) ||\n      (result = start_block(param2,*(undefined8 *)(param3 + 0x18)), result != '\\0'))\n     )) {\n    if (*(undefined8 **)(param3 + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(param3 + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = write_name(param1,param2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(param3 + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = process_debug_info_00113a4d(param1,param2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    debug_result = write_line_numbers(param1,param2,*(undefined8 *)(param3 + 0x20));\n    if (debug_result[0] != '\\0') {\n      if ((*(long *)(param3 + 0x28) == 0) && (*(long *)(param3 + 8) != 0)) {\n        return debug_result._0_8_;\n      }\n      return_value = end_block\n                        (param2,*(undefined8 *)(param3 + 0x20),debug_result._8_8_,param5);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_info_00113a4d",
            "entrypoint": "0x00113a4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113a4d": "process_debug_info_00113a4d",
                "auVar4": "debug_result",
                "cVar1": "result",
                "debug_write_linenos_constprop_0": "write_line_numbers",
                "debug_write_name_constprop_0": "write_name",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar3": "ptr",
                "stab_end_block_lto_priv_0": "end_block",
                "stab_start_block_lto_priv_0": "start_block",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b1e": {
            "additional_data": {
                "FUN_00113b1e": {
                    "1": "decode_and_extract_param",
                    "13": "extract_real_type",
                    "2": "get_real_type",
                    "3": "extract_real_value"
                },
                "auVar1": {
                    "1": "result1",
                    "2": "result",
                    "3": "default_output"
                },
                "auVar4": {
                    "1": "result2",
                    "2": "output_value",
                    "5": "output",
                    "8": "result"
                },
                "debug_get_real_type_isra_0": {
                    "1": "get_real_type"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_address",
                    "3": "input",
                    "8": "input_value",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "ptr_to_real_type",
                    "12": "unused_param",
                    "3": "debug_info"
                },
                "param_3": {
                    "1": "initial_value",
                    "2": "result",
                    "5": "default_value"
                },
                "param_4": {
                    "1": "param_val",
                    "2": "result_value",
                    "3": "default_value"
                },
                "piVar2": {
                    "1": "type",
                    "2": "type_pointer",
                    "7": "real_type_ptr",
                    "8": "type_info",
                    "9": "real_type"
                },
                "uVar3": {
                    "1": "data",
                    "10": "result",
                    "2": "real_type",
                    "3": "extracted_value",
                    "5": "real_type_value"
                }
            },
            "called": [
                "FUN_00112b6e"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "code": "\nundefined  [16] extract_real_type_00113b1e(long input_param,undefined8 unused_param,ulong default_value,undefined8 default_value)\n\n{\n  undefined default_output [16];\n  int *real_type;\n  undefined8 result;\n  undefined result [16];\n  \n  if (input_param != 0) {\n    real_type = (int *)get_real_type(input_param,0);\n    if ((real_type == (int *)0x0) || (3 < *real_type - 7U)) {\n      result = 0;\n    }\n    else {\n      result = **(undefined8 **)(real_type + 4);\n    }\n    result._8_8_ = default_value;\n    result._0_8_ = result;\n    return result;\n  }\n  default_output._8_8_ = 0;\n  default_output._0_8_ = default_value;\n  return default_output << 0x40;\n}\n\n",
            "current_name": "extract_real_type_00113b1e",
            "entrypoint": "0x00113b1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b1e": "extract_real_type_00113b1e",
                "auVar1": "default_output",
                "auVar4": "result",
                "debug_get_real_type_isra_0": "get_real_type",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "default_value",
                "piVar2": "real_type",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b4a": {
            "additional_data": {
                "0x10": {
                    "1": "offset"
                },
                "0x15": {
                    "1": "type_code"
                },
                "FUN_00112904": {
                    "1": "set_debug_flags"
                },
                "FUN_00113b4a": {
                    "1": "extract_value_from_binary",
                    "2": "extract_parameter",
                    "4": "initialize_type",
                    "7": "initialize_debug_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_constprop_0"
                },
                "lVar1": {
                    "1": "debug_type_object",
                    "2": "type_ptr",
                    "3": "type_pointer",
                    "4": "debug_type",
                    "6": "result"
                },
                "param_1": {
                    "1": "value",
                    "28": "input_value"
                },
                "param_2": {
                    "1": "param2"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_debug_type_00113b4a(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = create_debug_type(0x15,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_debug_type_00113b4a",
            "entrypoint": "0x00113b4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b4a": "initialize_debug_type_00113b4a",
                "debug_make_type_constprop_0": "create_debug_type",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b71": {
            "additional_data": {
                "0x10": {
                    "1": "offset"
                },
                "0x14": {
                    "1": "type_constant"
                },
                "FUN_00112904": {
                    "1": "initialize_debug_type"
                },
                "FUN_00113b71": {
                    "1": "prepare_debug_info",
                    "2": "create_constprop",
                    "6": "initialize_debug_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_debug_type_value"
                },
                "lVar1": {
                    "1": "debug_type_address",
                    "2": "type_ptr",
                    "6": "debug_type"
                },
                "param_1": {
                    "1": "original_value",
                    "19": "input_value",
                    "2": "input_parameter",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "param2"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_debug_type_00113b71(long input_value)\n\n{\n  long debug_type;\n  \n  if (input_value != 0) {\n    debug_type = create_type(0x14,0);\n    if (debug_type == 0) {\n      debug_type = 0;\n    }\n    else {\n      *(long *)(debug_type + 0x10) = input_value;\n    }\n    return debug_type;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_debug_type_00113b71",
            "entrypoint": "0x00113b71",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b71": "initialize_debug_type_00113b71",
                "debug_make_type_constprop_0": "create_type",
                "lVar1": "debug_type",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b98": {
            "additional_data": {
                "0": {
                    "1": "return_value"
                },
                "0x10": {
                    "1": "ptr_shift"
                },
                "0x13": {
                    "1": "type_const"
                },
                "0x19": {
                    "1": "var_1_offset"
                },
                "0x1c": {
                    "1": "var_2_offset"
                },
                "0x20": {
                    "1": "debug_type_size"
                },
                "FUN_00112904": {
                    "1": "initialize_function"
                },
                "FUN_00113b98": {
                    "1": "create_new_object",
                    "12": "create_debug_type",
                    "2": "initialize_debug_type",
                    "3": "initialize_data_structure"
                },
                "debug_make_type_constprop_0": {
                    "1": "get_struct_index"
                },
                "lVar1": {
                    "1": "object_pointer",
                    "15": "debug_type",
                    "2": "type",
                    "3": "type_result"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_param1",
                    "3": "input_param",
                    "4": "input_1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "param2_value",
                    "2": "input_param2",
                    "3": "value_2",
                    "4": "input_2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "param3_value",
                    "2": "input_param3",
                    "3": "value_3",
                    "4": "input_3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "data4",
                    "2": "input_param4",
                    "3": "value_4",
                    "4": "input_4",
                    "8": "input4"
                },
                "plVar2": {
                    "1": "debug_type",
                    "2": "new_object",
                    "3": "debug_type_ptr",
                    "5": "allocated_memory"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong create_debug_type_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long debug_type;\n  long *allocated_memory;\n  \n  if ((input1 != 0) && (debug_type = make_type_const(0x13,0), debug_type != 0)) {\n    allocated_memory = (long *)allocate_memory(0x20);\n    *(undefined4 *)((long)allocated_memory + 0x19) = 0;\n    *allocated_memory = input1;\n    *(undefined4 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[1] = input2;\n    allocated_memory[2] = input3;\n    *(undefined *)(allocated_memory + 3) = input4;\n    *(long **)(debug_type + 0x10) = allocated_memory;\n    return debug_type;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_debug_type_00113b98",
            "entrypoint": "0x00113b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b98": "create_debug_type_00113b98",
                "debug_make_type_constprop_0": "make_type_const",
                "lVar1": "debug_type",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113bfa": {
            "additional_data": {
                "FUN_00113bfa": {
                    "1": "create_object",
                    "2": "allocate_and_store_data",
                    "3": "create_debug_object",
                    "5": "create_data_structure",
                    "7": "create_debug_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "get_debug_type"
                },
                "lVar1": {
                    "1": "debug_object_addr",
                    "2": "data_ptr",
                    "6": "debug_type"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_param_1",
                    "3": "data1",
                    "5": "input1",
                    "6": "input_1",
                    "7": "value1"
                },
                "param_2": {
                    "1": "data",
                    "2": "input_param_2",
                    "3": "data2",
                    "5": "input2",
                    "6": "input_2",
                    "7": "value2"
                },
                "plVar2": {
                    "1": "ptr_values",
                    "2": "debug_object_ptr",
                    "3": "allocated_ptr",
                    "5": "debug_type_ptr",
                    "7": "allocated_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong create_debug_type_00113bfa(long value1,long value2)\n\n{\n  long debug_type;\n  long *allocated_memory;\n  \n  if (((value1 != 0) && (value2 != 0)) &&\n     (debug_type = get_debug_type(0x12,0), debug_type != 0)) {\n    allocated_memory = (long *)allocate_memory(0x10);\n    *allocated_memory = value1;\n    allocated_memory[1] = value2;\n    *(long **)(debug_type + 0x10) = allocated_memory;\n    return debug_type;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_debug_type_00113bfa",
            "entrypoint": "0x00113bfa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113bfa": "create_debug_type_00113bfa",
                "debug_make_type_constprop_0": "get_debug_type",
                "lVar1": "debug_type",
                "param_1": "value1",
                "param_2": "value2",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113c43": {
            "additional_data": {
                "FUN_00113c43": {
                    "1": "process_data",
                    "2": "extract_data",
                    "3": "create_debug_type",
                    "4": "initialize_data_structure"
                },
                "auVar3": {
                    "1": "output_data",
                    "11": "result",
                    "12": "return_value"
                },
                "debug_make_type_constprop_0": {
                    "1": "allocate_debug_type"
                },
                "lVar1": {
                    "1": "type_creation_result",
                    "2": "data_type",
                    "3": "debug_type",
                    "4": "result"
                },
                "param_1": {
                    "1": "param1",
                    "2": "arg1",
                    "3": "input_param_1",
                    "5": "input1",
                    "6": "input_param1"
                },
                "param_2": {
                    "1": "account_id",
                    "2": "arg2",
                    "3": "value2",
                    "5": "input2",
                    "6": "input_param2"
                },
                "param_3": {
                    "1": "value_3",
                    "2": "param_3",
                    "3": "param3",
                    "4": "input3",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "argument4",
                    "2": "arg4",
                    "3": "param4",
                    "4": "input4",
                    "5": "input_4"
                },
                "param_5": {
                    "1": "value_5",
                    "2": "arg5",
                    "3": "value5",
                    "4": "input5",
                    "5": "input_5"
                },
                "param_6": {
                    "1": "argument6",
                    "2": "arg6",
                    "3": "input_param_6",
                    "4": "input6",
                    "5": "input_param6"
                },
                "plVar2": {
                    "1": "allocated_struct",
                    "2": "object_ptr",
                    "3": "dynamic_array",
                    "6": "allocated_memory"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16]\ninitialize_data_structure_00113c43(long input_param1,long input_param2,long input_param3,long input_param4,undefined input_param5,\n            undefined8 input_param6)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if ((input_param1 != 0) && (input_param2 != 0)) {\n    result = allocate_debug_type(0x10,0);\n    if (result != 0) {\n      allocated_memory = (long *)allocate_memory(0x28);\n      *(undefined4 *)((long)allocated_memory + 0x21) = 0;\n      *allocated_memory = input_param1;\n      *(undefined4 *)((long)allocated_memory + 0x24) = 0;\n      allocated_memory[1] = input_param2;\n      allocated_memory[2] = input_param3;\n      allocated_memory[3] = input_param4;\n      *(undefined *)(allocated_memory + 4) = input_param5;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113caa;\n    }\n  }\n  result = 0;\nLAB_00113caa:\n  return_value._8_8_ = input_param6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "initialize_data_structure_00113c43",
            "entrypoint": "0x00113c43",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113c43": "initialize_data_structure_00113c43",
                "auVar3": "return_value",
                "debug_make_type_constprop_0": "allocate_debug_type",
                "lVar1": "result",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "param_5": "input_param5",
                "param_6": "input_param6",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113cb9": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "set_debug_flags",
                    "2": "set_debug_type"
                },
                "FUN_00113cb9": {
                    "1": "map_param_to_value",
                    "2": "extract_parameter_value",
                    "3": "initialize_debug_type",
                    "6": "initialize_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_special_type"
                },
                "lVar1": {
                    "1": "type_constprop_ptr",
                    "10": "result",
                    "2": "type_ptr",
                    "3": "type_pointer",
                    "5": "debug_type"
                },
                "param_1": {
                    "1": "input_parameter",
                    "17": "input_value",
                    "2": "input",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "value_2"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_type_00113cb9(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = create_constant_property(0xe,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_type_00113cb9",
            "entrypoint": "0x00113cb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113cb9": "initialize_type_00113cb9",
                "debug_make_type_constprop_0": "create_constant_property",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ce0": {
            "additional_data": {
                "FUN_00113ce0": {
                    "1": "extract_function",
                    "2": "initialize_data_structure",
                    "3": "extract_data_from_binary",
                    "4": "create_debug_type"
                },
                "LAB_00113d2f": {
                    "1": "end_of_allocation"
                },
                "auVar3": {
                    "1": "output_variable",
                    "16": "result",
                    "8": "return_value"
                },
                "debug_make_type_constprop_0": {
                    "1": "debug_make_type"
                },
                "lVar1": {
                    "1": "type_const_prop",
                    "2": "type",
                    "5": "type_constant",
                    "9": "debug_type"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "original_value",
                    "3": "input_value",
                    "4": "input_param",
                    "5": "input1",
                    "7": "input_param1"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "output_param",
                    "3": "input_param_2",
                    "5": "input2",
                    "8": "input_param2"
                },
                "param_3": {
                    "1": "input_param",
                    "2": "input_3",
                    "3": "input_param_3",
                    "4": "undefined_param",
                    "5": "input3",
                    "8": "input_param3"
                },
                "param_4": {
                    "1": "config1",
                    "2": "unused_parameter",
                    "3": "input_param_4",
                    "4": "param_4",
                    "7": "input_param4"
                },
                "param_5": {
                    "1": "debug_info2",
                    "3": "input_param_5",
                    "4": "param_5",
                    "5": "param5",
                    "7": "input_param5"
                },
                "plVar2": {
                    "1": "allocated_structure_ptr",
                    "15": "allocated_memory",
                    "2": "debug_data"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16]\ncreate_debug_type_00113ce0(long input_param1,long input_param2,undefined input_param3,undefined8 input_param4,undefined8 input_param5)\n\n{\n  long debug_type;\n  long *allocated_memory;\n  undefined result [16];\n  \n  if (input_param1 != 0) {\n    debug_type = debug_make_type(0xd,0);\n    if (debug_type != 0) {\n      allocated_memory = (long *)allocate_memory(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_param1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_param2;\n      *(undefined *)(allocated_memory + 2) = input_param3;\n      *(long **)(debug_type + 0x10) = allocated_memory;\n      goto end_of_allocation;\n    }\n  }\n  debug_type = 0;\nend_of_allocation:\n  result._8_8_ = input_param5;\n  result._0_8_ = debug_type;\n  return result;\n}\n\n",
            "current_name": "create_debug_type_00113ce0",
            "entrypoint": "0x00113ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ce0": "create_debug_type_00113ce0",
                "LAB_00113d2f": "end_of_allocation",
                "auVar3": "result",
                "debug_make_type_constprop_0": "debug_make_type",
                "lVar1": "debug_type",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "param_5": "input_param5",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d3a": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "create_type"
                },
                "FUN_00113d3a": {
                    "1": "get_custom_type",
                    "2": "initialize_pointer",
                    "3": "get_or_create_type",
                    "4": "get_debug_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_new_object",
                    "2": "create_new_type"
                },
                "lVar1": {
                    "1": "type_from_param",
                    "3": "debug_type",
                    "4": "pointer_value"
                },
                "param_1": {
                    "1": "data",
                    "3": "type_id",
                    "4": "input_param",
                    "5": "input_value",
                    "6": "input"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nlong get_debug_type_00113d3a(long input)\n\n{\n  long type_ptr;\n  \n  if (input != 0) {\n    type_ptr = *(long *)(input + 8);\n    if (type_ptr == 0) {\n      type_ptr = create_new_type(0xc,0);\n      if (type_ptr == 0) {\n        type_ptr = 0;\n      }\n      else {\n        *(long *)(type_ptr + 0x10) = input;\n        *(long *)(input + 8) = type_ptr;\n      }\n    }\n    return type_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "get_debug_type_00113d3a",
            "entrypoint": "0x00113d3a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d3a": "get_debug_type_00113d3a",
                "debug_make_type_constprop_0": "create_new_type",
                "lVar1": "type_ptr",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d6e": {
            "additional_data": {
                "FUN_00113d6e": {
                    "1": "create_constprop",
                    "10": "create_debug_type",
                    "2": "store_debug_type"
                },
                "lVar1": {
                    "1": "extracted_data",
                    "2": "type_constant",
                    "3": "debug_type_ptr",
                    "9": "debug_type"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_1",
                    "3": "input_value_1",
                    "7": "input_param_1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "input_value2",
                    "2": "input_param2",
                    "3": "input_value_2",
                    "7": "input_param_2",
                    "8": "input2"
                },
                "puVar2": {
                    "1": "new_instance",
                    "16": "allocated_memory",
                    "4": "allocated_ptr"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nlong create_debug_type_00113d6e(undefined8 input1,undefined8 input2)\n\n{\n  long debug_type;\n  undefined8 *allocated_memory;\n  \n  debug_type = debug_make_type_constprop_0(0xb,0);\n  if (debug_type != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input1;\n    allocated_memory[1] = input2;\n    *(undefined8 **)(debug_type + 0x10) = allocated_memory;\n  }\n  return debug_type;\n}\n\n",
            "current_name": "create_debug_type_00113d6e",
            "entrypoint": "0x00113d6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d6e": "create_debug_type_00113d6e",
                "lVar1": "debug_type",
                "param_1": "input1",
                "param_2": "input2",
                "puVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113da9": {
            "additional_data": {
                "FUN_00113da9": {
                    "1": "initialize_data",
                    "12": "initialize_data_structure",
                    "4": "initialize_buffer"
                },
                "auVar5": {
                    "1": "debug_data",
                    "20": "result",
                    "5": "return_value"
                },
                "bVar4": {
                    "1": "loop_index",
                    "2": "initial_value",
                    "4": "offset",
                    "5": "temp_byte"
                },
                "lVar2": {
                    "1": "loop_index",
                    "22": "loop_counter",
                    "3": "counter"
                },
                "param_1": {
                    "1": "byte_param",
                    "3": "input_size",
                    "5": "input_byte",
                    "6": "byte_value",
                    "7": "byte_count"
                },
                "param_2": {
                    "1": "size_param",
                    "13": "param2",
                    "2": "unused_param"
                },
                "param_3": {
                    "1": "input_param3",
                    "12": "param3",
                    "2": "data"
                },
                "param_4": {
                    "1": "param_c",
                    "13": "param4",
                    "2": "param_4",
                    "3": "additional_data"
                },
                "puVar1": {
                    "1": "buffer_ptr",
                    "12": "allocated_memory",
                    "3": "buffer",
                    "5": "data_structure"
                },
                "puVar3": {
                    "1": "ptr2",
                    "2": "current_element",
                    "3": "ptr",
                    "7": "current_pointer"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16] initialize_data_structure_00113da9(byte byte_count,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *allocated_memory;\n  long loop_counter;\n  undefined8 *current_pointer;\n  byte byte_value;\n  undefined result [16];\n  \n  byte_value = 0;\n  result._0_8_ = debug_make_type_constprop_0(8 - (uint)byte_count);\n  if (result._0_8_ != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x28);\n    current_pointer = allocated_memory + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)current_pointer = 0;\n      current_pointer = (undefined8 *)((long)current_pointer + (ulong)byte_value * -8 + 4);\n    }\n    *allocated_memory = param3;\n    *(undefined8 **)(result._0_8_ + 0x10) = allocated_memory;\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_00113da9",
            "entrypoint": "0x00113da9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113da9": "initialize_data_structure_00113da9",
                "auVar5": "result",
                "bVar4": "byte_value",
                "lVar2": "loop_counter",
                "param_1": "byte_count",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "allocated_memory",
                "puVar3": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113df2": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "process_data",
                    "2": "debug_set_type",
                    "5": "set_debug_type"
                },
                "FUN_00113df2": {
                    "1": "make_type_constant",
                    "2": "debug_make_type_constprop",
                    "3": "make_type_const",
                    "4": "initialize_debug",
                    "7": "initialize_debug_type"
                },
                "param_1": {
                    "1": "argument",
                    "2": "param",
                    "4": "input_value",
                    "5": "input",
                    "7": "data"
                },
                "param_2": {
                    "1": "constant",
                    "2": "type",
                    "4": "property_value"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nvoid initialize_debug_type_00113df2(undefined4 data)\n\n{\n  debug_make_type_constprop_0(4,data);\n  return;\n}\n\n",
            "current_name": "initialize_debug_type_00113df2",
            "entrypoint": "0x00113df2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113df2": "initialize_debug_type_00113df2",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113dfe": {
            "additional_data": {
                "FUN_00113dfe": {
                    "1": "update_type_value",
                    "2": "update_parameter_value",
                    "4": "update_debug_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "get_variable_result"
                },
                "lVar1": {
                    "1": "type_info",
                    "2": "type_constant",
                    "3": "type_pointer",
                    "4": "debug_type",
                    "5": "type_ptr"
                },
                "lVar1 + 0x10": {
                    "1": "new_address"
                },
                "param_1": {
                    "1": "type_value",
                    "2": "input1",
                    "3": "type",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "data",
                    "19": "new_value",
                    "2": "input2",
                    "7": "value"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nvoid update_debug_type_00113dfe(undefined4 input_value,undefined new_value)\n\n{\n  long type_ptr;\n  \n  type_ptr = get_variable_result(3,input_value);\n  if (type_ptr != 0) {\n    *(undefined *)(type_ptr + 0x10) = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_debug_type_00113dfe",
            "entrypoint": "0x00113dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113dfe": "update_debug_type_00113dfe",
                "debug_make_type_constprop_0": "get_variable_result",
                "lVar1": "type_ptr",
                "param_1": "input_value",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e17": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "handle_sub_function"
                },
                "FUN_00113e17": {
                    "1": "set_type_as_constprop",
                    "2": "set_type_constprop",
                    "3": "set_constant_property",
                    "4": "initialize_constants"
                },
                "param_1": {
                    "1": "undefined1",
                    "11": "arg1",
                    "2": "value1",
                    "3": "param1"
                },
                "param_2": {
                    "1": "undefined2",
                    "11": "arg2",
                    "2": "value2",
                    "3": "param2"
                },
                "undefined4 param_1": {
                    "1": "flag"
                },
                "undefined4 param_2": {
                    "1": "counter"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nvoid initialize_debug_type_00113e17(void)\n\n{\n  debug_make_type_constprop_0(2,0);\n  return;\n}\n\n",
            "current_name": "initialize_debug_type_00113e17",
            "entrypoint": "0x00113e17",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e17": "initialize_debug_type_00113e17"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e23": {
            "additional_data": {
                "FUN_00113e23": {
                    "1": "create_constprop",
                    "2": "create_type_constprop",
                    "6": "create_debug_type"
                },
                "lVar1": {
                    "1": "type_const_property",
                    "2": "type",
                    "6": "result",
                    "7": "debug_type"
                },
                "param_1": {
                    "1": "input_data_1",
                    "2": "input1",
                    "3": "value1",
                    "4": "input_param1",
                    "5": "input_1",
                    "6": "input_param_1"
                },
                "param_2": {
                    "1": "input_var_2",
                    "2": "input2",
                    "3": "value2",
                    "4": "input_param2",
                    "5": "input_2",
                    "6": "input_param_2"
                },
                "puVar2": {
                    "1": "alloc_ptr",
                    "15": "allocated_memory",
                    "2": "allocated_data"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010afd5"
            ],
            "code": "\nlong create_debug_type_00113e23(undefined8 input_param_1,undefined8 input_param_2)\n\n{\n  long debug_type;\n  undefined8 *allocated_memory;\n  \n  debug_type = debug_make_type_constprop_0(1,0);\n  if (debug_type != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_param_1;\n    allocated_memory[1] = input_param_2;\n    *(undefined8 **)(debug_type + 0x10) = allocated_memory;\n  }\n  return debug_type;\n}\n\n",
            "current_name": "create_debug_type_00113e23",
            "entrypoint": "0x00113e23",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e23": "create_debug_type_00113e23",
                "lVar1": "debug_type",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "puVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e5e": {
            "additional_data": {
                "FUN_0010c95e": {
                    "1": "read_bytes"
                },
                "FUN_00113e5e": {
                    "1": "extract_demangled_type",
                    "2": "parse_type_signature",
                    "3": "extract_and_demangle_type"
                },
                "FUN_00113fb0": {
                    "1": "compare_strings"
                },
                "cVar1": {
                    "1": "char1",
                    "3": "result",
                    "5": "starts_with_type"
                },
                "local_20": {
                    "1": "substring_array",
                    "2": "type_str",
                    "4": "current_string"
                },
                "local_20[0]": {
                    "1": "current_char"
                },
                "param_1": {
                    "1": "data",
                    "2": "input_buffer",
                    "3": "param",
                    "5": "input_string",
                    "6": "input"
                },
                "param_2": {
                    "1": "type_str",
                    "2": "input_string",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "arg_len",
                    "3": "param_3",
                    "4": "length",
                    "6": "string_length",
                    "8": "offset"
                },
                "stab_demangle_type_lto_priv_0": {
                    "1": "parse_type"
                },
                "startswith_lto_priv_0_lto_priv_0": {
                    "1": "is_type"
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 demangle_type_00113e5e(undefined8 input,char **input,long offset)\n\n{\n  char startswith_result;\n  char *current_string [2];\n  \n  temp_str = *input;\n  *input = (char *)(offset + 2);\n  if ((((long)(char *)(offset + 2) - (long)temp_str < 5) ||\n      (startswith_result = is_type(temp_str,\"type\"), startswith_result == '\\0')) ||\n     ((temp_str[4] != '$' && (temp_str[4] != '.')))) {\n    if (*temp_str != '_') {\n      return 1;\n    }\n    if (temp_str[1] != '_') {\n      return 1;\n    }\n    if (temp_str[2] != 'o') {\n      return 1;\n    }\n    if (temp_str[3] != 'p') {\n      return 1;\n    }\n    temp_str = temp_str + 4;\n  }\n  else {\n    temp_str = temp_str + 5;\n  }\n  startswith_result = parse_type(input,current_string,0);\n  if (startswith_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "demangle_type_00113e5e",
            "entrypoint": "0x00113e5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e5e": "demangle_type_00113e5e",
                "cVar1": "startswith_result",
                "local_20": "current_string",
                "local_20[0]": "temp_str",
                "param_1": "input",
                "param_2": "input",
                "param_3": "offset",
                "stab_demangle_type_lto_priv_0": "parse_type",
                "startswith_lto_priv_0_lto_priv_0": "is_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ede": {
            "additional_data": {
                "FUN_00113ede": {
                    "1": "check_if_string_starts_with_lto_priv_key",
                    "2": "check_startswith",
                    "3": "check_suffix",
                    "4": "check_string_suffix",
                    "7": "check_string_length"
                },
                "FUN_00113fb0": {
                    "1": "compare_suffix"
                },
                "__s": {
                    "1": "filename",
                    "2": "str",
                    "4": "input_string",
                    "7": "current_string",
                    "9": "string"
                },
                "param_1": {
                    "1": "filename_list",
                    "11": "string_array",
                    "2": "input_strings",
                    "5": "strings",
                    "7": "input_string"
                },
                "sVar1": {
                    "1": "filename_length",
                    "2": "length",
                    "25": "string_length"
                },
                "uVar2": {
                    "1": "is_suffix_present",
                    "11": "result",
                    "2": "is_suffix_match",
                    "3": "starts_with",
                    "8": "startswith_result"
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_0010829e",
                "FUN_001082b3"
            ],
            "code": "\nundefined8 check_string_length_00113ede(char **string_array)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (string_array == (char **)0x0) {\n    return 0;\n  }\n  string = *string_array;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = startswith_lto_priv_0_lto_priv_0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_string_length_00113ede",
            "entrypoint": "0x00113ede",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "__s": "string",
                "param_1": "string_array",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f20": {
            "additional_data": {
                "FUN_00113f20": {
                    "1": "create_string_hash_table",
                    "10": "initialize_hash_table",
                    "12": "create_hash_table",
                    "5": "create_hashtable"
                },
                "free": {
                    "12": "deallocate_memory",
                    "16": "release_memory",
                    "3": "free_memory"
                },
                "htab_create_alloc": {
                    "1": "create_hashtable",
                    "2": "create_hashtable_with_allocation",
                    "3": "allocate_hashtable",
                    "8": "create_hash_table",
                    "9": "allocate_hash_table"
                },
                "htab_eq_string": {
                    "1": "string_equals",
                    "13": "compare_strings",
                    "2": "string_equality_function",
                    "4": "compare_string",
                    "7": "is_equal_string"
                },
                "htab_hash_string": {
                    "1": "calculate_hash",
                    "2": "string_hash",
                    "25": "hash_string"
                },
                "xcalloc": {
                    "1": "allocate_memory_with_zero",
                    "30": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104720",
                "FUN_001284f0",
                "FUN_001284f8",
                "FUN_00128500",
                "FUN_001280f0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid create_hash_table_00113f20(void)\n\n{\n  allocate_hash_table(0x10,hash_string,compare_strings,0,allocate_memory,release_memory);\n  return;\n}\n\n",
            "current_name": "create_hash_table_00113f20",
            "entrypoint": "0x00113f20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f20": "create_hash_table_00113f20",
                "free": "release_memory",
                "htab_create_alloc": "allocate_hash_table",
                "htab_eq_string": "compare_strings",
                "htab_hash_string": "hash_string",
                "xcalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f50": {
            "additional_data": {
                "FUN_00113f50": {
                    "1": "check_file_info",
                    "16": "check_file",
                    "2": "get_file_info",
                    "4": "check_file_properties"
                },
                "__errno_location": {
                    "1": "get_errno_address"
                },
                "__errno_location()": {
                    "1": "get_error_location()"
                },
                "dcgettext": {
                    "1": "translate_message"
                },
                "iVar1": {
                    "1": "status_code",
                    "16": "status",
                    "6": "result",
                    "7": "stat_result"
                },
                "non_fatal": {
                    "1": "handle_error"
                },
                "param_1": {
                    "24": "file_path",
                    "7": "filename"
                },
                "pcVar4": {
                    "1": "error_description",
                    "16": "error_reason",
                    "3": "reason"
                },
                "piVar2": {
                    "1": "error_ptr",
                    "18": "errno_ptr",
                    "3": "error",
                    "5": "error_code"
                },
                "sStack_a8": {
                    "1": "file_stat_struct",
                    "12": "file_stat",
                    "8": "file_info",
                    "9": "file_stats"
                },
                "sStack_a8.st_mode": {
                    "1": "file_mode"
                },
                "sStack_a8.st_size": {
                    "1": "file_size"
                },
                "uVar3": {
                    "18": "error_message",
                    "2": "localized_message",
                    "3": "message",
                    "8": "error_msg"
                }
            },
            "called": [
                "FUN_001044f0",
                "FUN_00104966",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "code": "\nlong check_file_00113f50(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stat);\n    if (status < 0) {\n      errno_ptr = get_error_location();\n      if (*errno_ptr == 2) {\n        error_message = translate_message(0,\"\\'%s\\': No such file\",5);\n        show_warning(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = translate_message(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        show_warning(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_mode & 0xf000) == 0x4000) {\n      error_message = translate_message(0,\"Warning: \\'%s\\' is a directory\",5);\n      show_warning(error_message,file_path);\n    }\n    else if ((file_mode & 0xf000) == 0x8000) {\n      if (-1 < file_size) {\n        return file_size;\n      }\n      error_message = translate_message(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      show_warning(error_message,file_path);\n    }\n    else {\n      error_message = translate_message(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      show_warning(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "current_name": "check_file_00113f50",
            "entrypoint": "0x00113f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "__errno_location": "get_errno_address",
                "__errno_location()": "get_error_location()",
                "dcgettext": "translate_message",
                "iVar1": "status",
                "non_fatal": "show_warning",
                "param_1": "file_path",
                "pcVar4": "error_reason",
                "piVar2": "errno_ptr",
                "sStack_a8": "file_stat",
                "sStack_a8.st_mode": "file_mode",
                "sStack_a8.st_size": "file_size",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fb0": {
            "additional_data": {
                "FUF_00113fb0": {
                    "1": "string_compare"
                },
                "FUN_00113fb0": {
                    "1": "string_comparison_function",
                    "15": "string_comparison",
                    "2": "reverse_compare_strings",
                    "3": "string_compare",
                    "9": "compare_strings"
                },
                "__n": {
                    "1": "target_length",
                    "2": "str2_length",
                    "22": "length"
                },
                "auVar2": {
                    "1": "output_array",
                    "21": "result",
                    "3": "comparison_result"
                },
                "extraout_var": {
                    "1": "additional_output",
                    "2": "extra_output",
                    "4": "comparison_result"
                },
                "iVar1": {
                    "1": "string_comparison_result",
                    "21": "comparison_result",
                    "4": "result"
                },
                "in_RAX": {
                    "1": "unknown_value"
                },
                "param_1": {
                    "1": "input_string1",
                    "22": "string1",
                    "3": "str1",
                    "4": "input_string"
                },
                "param_2": {
                    "1": "target_string",
                    "2": "compare_string",
                    "22": "string2",
                    "3": "str2"
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_001040e0"
            ],
            "calling": [
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00107880",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00113ede",
                "FUN_00108c86",
                "FUN_0010554f"
            ],
            "code": "\nundefined  [16] string_comparison_00113fb0(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_address;\n  size_t length;\n  undefined4 comparison_result;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(comparison_result,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "string_comparison_00113fb0",
            "entrypoint": "0x00113fb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "comparison_result",
                "iVar1": "comparison_result",
                "in_RAX": "return_address",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fe0": {
            "additional_data": {
                "FUN_00113fe0": {
                    "1": "find_section_flags",
                    "2": "process_section_flags",
                    "27": "parse_section_flags"
                },
                "auVar8": {
                    "1": "parsed_section",
                    "14": "result",
                    "3": "return_val",
                    "5": "return_value"
                },
                "dcgettext": {
                    "1": "translate_text"
                },
                "fatal": {
                    "1": "handle_fatal_error"
                },
                "iVar1": {
                    "1": "str_cmp_result",
                    "10": "result",
                    "16": "comparison_result"
                },
                "iVar6": {
                    "1": "flag_length_int",
                    "2": "section_flag_length",
                    "3": "substring_length",
                    "5": "flag_index"
                },
                "non_fatal": {
                    "1": "handle_non_fatal_error"
                },
                "param_1": {
                    "1": "section_name",
                    "12": "section_flags",
                    "2": "section_flag_string",
                    "4": "flag_string",
                    "9": "input_string"
                },
                "param_2": {
                    "1": "unused_param_2",
                    "12": "param2",
                    "15": "param_2",
                    "2": "arg2"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "12": "param3",
                    "15": "param_3",
                    "2": "arg3"
                },
                "param_4": {
                    "1": "unused3",
                    "10": "param_4",
                    "11": "param4",
                    "2": "arg4",
                    "3": "section_name"
                },
                "pcVar3": {
                    "1": "comma_pointer",
                    "2": "comma_location",
                    "3": "comma_ptr",
                    "4": "delimiter",
                    "7": "comma_position"
                },
                "pcVar4": {
                    "1": "substring",
                    "11": "next_section_flag",
                    "2": "next_substring",
                    "3": "next_flag_string",
                    "7": "next_flag"
                },
                "sVar5": {
                    "1": "input_length",
                    "10": "flag_length",
                    "2": "flag_string_length",
                    "3": "string_length",
                    "6": "section_flag_length"
                },
                "uVar2": {
                    "1": "error_msg",
                    "9": "error_message"
                },
                "uVar7": {
                    "1": "flags",
                    "12": "section_flags",
                    "2": "section_flag",
                    "3": "parsed_flags",
                    "5": "result"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_section_flags_00113fe0(char *section_flags,undefined8 param_2,undefined8 param_3,undefined8 param4)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *next_section_flag;\n  size_t flag_length;\n  int section_flag_index;\n  uint section_flags;\n  undefined result [16];\n  \n  section_flags = 0;\n  do {\n    comma_position = strchr(section_flags,0x2c);\n    if (comma_position == (char *)0x0) {\n      flag_length = strlen(section_flags);\n      section_flag_index = (int)flag_length;\n      next_section_flag = (char *)0x0;\n    }\n    else {\n      next_section_flag = comma_position + 1;\n      section_flag_index = (int)comma_position - (int)section_flags;\n    }\n    flag_length = (size_t)section_flag_index;\n    comparison_result = strncasecmp(\"alloc\",section_flags,flag_length);\n    if (comparison_result == 0) {\n      section_flags = section_flags | 1;\n    }\n    else {\n      comparison_result = strncasecmp(\"load\",section_flags,flag_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 2;\n      }\n      else {\n        comparison_result = strncasecmp(\"noload\",section_flags,flag_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x200;\n        }\n        else {\n          comparison_result = strncasecmp(\"readonly\",section_flags,flag_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 8;\n          }\n          else {\n            comparison_result = strncasecmp(\"debug\",section_flags,flag_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x2000;\n            }\n            else {\n              comparison_result = strncasecmp(\"code\",section_flags,flag_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x10;\n              }\n              else {\n                comparison_result = strncasecmp(\"data\",section_flags,flag_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x20;\n                }\n                else {\n                  comparison_result = strncasecmp(\"rom\",section_flags,flag_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x40;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"exclude\",section_flags,flag_length);\n                    if (comparison_result == 0) {\n                      section_flags = section_flags | 0x8000;\n                    }\n                    else {\n                      comparison_result = strncasecmp(\"share\",section_flags,flag_length);\n                      if (comparison_result == 0) {\n                        section_flags = section_flags | 0x8000000;\n                      }\n                      else {\n                        comparison_result = strncasecmp(\"contents\",section_flags,flag_length);\n                        if (comparison_result == 0) {\n                          section_flags = section_flags | 0x100;\n                        }\n                        else {\n                          comparison_result = strncasecmp(\"merge\",section_flags,flag_length);\n                          if (comparison_result == 0) {\n                            section_flags = section_flags | 0x800000;\n                          }\n                          else {\n                            comparison_result = strncasecmp(\"strings\",section_flags,flag_length);\n                            if (comparison_result != 0) {\n                              comma_position = (char *)allocate_memory((long)(section_flag_index + 1));\n                              strncpy(comma_position,section_flags,flag_length);\n                              comma_position[flag_length] = '\\0';\n                              error_message = translate_text(0,\"unrecognized section flag `%s\\'\",5);\n                              handle_non_fatal_error(error_message,comma_position);\n                              error_message = translate_text(0,\"supported flags: %s\",5);\n                    \n                              handle_fatal_error(error_message,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            section_flags = section_flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    section_flags = next_section_flag;\n  } while (next_section_flag != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = section_flags;\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "parse_section_flags_00113fe0",
            "entrypoint": "0x00113fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "auVar8": "result",
                "dcgettext": "translate_text",
                "fatal": "handle_fatal_error",
                "iVar1": "comparison_result",
                "iVar6": "section_flag_index",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "section_flags",
                "param_4": "param4",
                "pcVar3": "comma_position",
                "pcVar4": "next_section_flag",
                "sVar5": "flag_length",
                "uVar2": "error_message",
                "uVar7": "section_flags",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114190": {
            "additional_data": {
                "FUN_00114190": {
                    "1": "match_pattern",
                    "2": "find_matching_entry",
                    "4": "find_matching_pattern"
                },
                "iVar4": {
                    "1": "index",
                    "15": "comparison_result",
                    "2": "match_result",
                    "9": "temp_var4"
                },
                "param_1": {
                    "1": "input_param",
                    "17": "input_array",
                    "2": "input_pattern",
                    "5": "input_string"
                },
                "param_2": {
                    "1": "is_null",
                    "12": "flag",
                    "2": "condition_flag",
                    "5": "is_exact_match"
                },
                "param_3": {
                    "1": "bitwise_flag",
                    "10": "flags",
                    "2": "param",
                    "3": "options",
                    "5": "mask"
                },
                "plVar2": {
                    "1": "temp_array",
                    "2": "match_pattern",
                    "5": "pattern",
                    "9": "temp_var2"
                },
                "pplVar3": {
                    "1": "next_node",
                    "2": "current_pattern",
                    "3": "return_value",
                    "6": "result"
                },
                "pplVar6": {
                    "1": "temp_array_ptr",
                    "2": "current_match",
                    "4": "temp_var6"
                },
                "pplVar7": {
                    "1": "prev_prev_entry",
                    "2": "current_array_ptr",
                    "3": "temp_var7"
                },
                "pplVar8": {
                    "1": "temp_array3",
                    "2": "next_pattern",
                    "3": "next_node",
                    "4": "next_array_ptr"
                },
                "uVar1": {
                    "1": "flags",
                    "2": "flag",
                    "3": "flag_check",
                    "7": "temp_var",
                    "9": "temp_var1"
                },
                "uVar5": {
                    "1": "temp_var3",
                    "16": "error_message",
                    "2": "error_string",
                    "3": "error_msg",
                    "9": "temp_var5"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104bba",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_00104340",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_00107880",
                "FUN_00116110",
                "FUN_00115b70",
                "FUN_00114c20",
                "FUN_00108072",
                "FUN_00115530"
            ],
            "code": "\nlong ** find_matching_pattern_00114190(long *input_array,char flag,uint flags)\n\n{\n  uint temp_var1;\n  long *temp_var2;\n  long **temp_var3;\n  int comparison_result;\n  undefined8 error_message;\n  long **temp_var6;\n  long **temp_var7;\n  long **next_array_ptr;\n  \n  temp_var7 = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((flags & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      temp_var6 = (long **)*temp_var7;\n      if (temp_var6 == (long **)0x0) {\n        return (long **)0x0;\n      }\n      temp_var7 = (long **)0x0;\n    }\n    else {\n      temp_var2 = DAT_001278e0[1];\n      if (*(char *)temp_var2 == '!') {\n        comparison_result = fnmatch((char *)((long)temp_var2 + 1),(char *)input_array,0);\n        temp_var6 = temp_var7;\n        if (comparison_result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparison_result = fnmatch((char *)temp_var2,(char *)input_array,0);\n      if (comparison_result != 0) goto LAB_001141e5;\n      temp_var6 = (long **)*temp_var7;\n      if (temp_var6 == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)temp_var6 + 0x14)) != 0) {\n      temp_var2 = temp_var6[1];\n      if (*(char *)temp_var2 == '!') {\n        comparison_result = fnmatch((char *)((long)temp_var2 + 1),(char *)input_array,0);\n        if (comparison_result == 0) {\nLAB_0011438e:\n          *(undefined *)(temp_var6 + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparison_result = fnmatch((char *)temp_var2,(char *)input_array,0);\n        if ((temp_var7 == (long **)0x0) && (comparison_result == 0)) {\n          next_array_ptr = (long **)*temp_var6;\n          temp_var7 = temp_var6;\n          if (next_array_ptr == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_array_ptr = (long **)*temp_var6;\n    temp_var6 = temp_var7;\n    if (next_array_ptr != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparison_result = strcmp((char *)DAT_001278e0[1],(char *)input_array);\n    if (comparison_result == 0) {\nLAB_001143cd:\n      temp_var1 = *(uint *)((long)temp_var7 + 0x14);\n      if ((((temp_var1 & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((temp_var1 & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        fatal(error_message,input_array);\n      }\n      if ((((temp_var1 & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        fatal(error_message,input_array);\n      }\n      if ((((temp_var1 & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)temp_var7 + 0x14) = temp_var1 | flags;\n        return temp_var7;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      fatal(error_message,input_array);\n    }\n    temp_var7 = (long **)*temp_var7;\n    if (temp_var7 == (long **)0x0) goto LAB_001142a9;\n    comparison_result = strcmp((char *)temp_var7[1],(char *)input_array);\n    if (comparison_result == 0) goto LAB_001143cd;\n    next_array_ptr = (long **)*temp_var7;\n    temp_var6 = (long **)0x0;\n    if (next_array_ptr == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      temp_var7 = temp_var6;\n      if (flag == '\\0') {\n        while (temp_var6 = next_array_ptr, temp_var3 = temp_var7, next_array_ptr = temp_var6,\n              (flags & *(uint *)((long)temp_var6 + 0x14)) != 0) {\n          temp_var2 = temp_var6[1];\n          if (*(char *)temp_var2 == '!') {\n            comparison_result = fnmatch((char *)((long)temp_var2 + 1),(char *)input_array,0);\n            if (comparison_result == 0) goto LAB_0011438e;\n            next_array_ptr = (long **)*temp_var6;\n            if ((long **)*temp_var6 == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparison_result = fnmatch((char *)temp_var2,(char *)input_array,0);\n            if ((temp_var7 == (long **)0x0) && (comparison_result == 0)) {\n              temp_var7 = temp_var6;\n              next_array_ptr = (long **)*temp_var6;\n              if ((long **)*temp_var6 == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_array_ptr = (long **)*temp_var6;\n              if ((long **)*temp_var6 == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparison_result = strcmp((char *)next_array_ptr[1],(char *)input_array);\n        temp_var3 = temp_var6;\n        temp_var7 = next_array_ptr;\n        if (comparison_result == 0) goto LAB_001143cd;\n      }\n      temp_var6 = temp_var3;\n      next_array_ptr = (long **)*next_array_ptr;\n      temp_var7 = temp_var6;\n    } while (next_array_ptr != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      temp_var6 = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(temp_var6 + 3) = (undefined  [16])0x0;\n      *(undefined *)(temp_var6 + 2) = 0;\n      *(uint *)((long)temp_var6 + 0x14) = flags;\n      temp_var6[5] = (long *)0x0;\n      temp_var7 = temp_var6;\n      *temp_var6 = (long *)DAT_001278e0;\n      DAT_001278e0 = temp_var7;\n      temp_var6[1] = input_array;\n      return temp_var6;\n    }\n  }\nLAB_00114212:\n  if (temp_var7 == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(temp_var7 + 2) = 1;\n  return temp_var7;\n}\n\n",
            "current_name": "find_matching_pattern_00114190",
            "entrypoint": "0x00114190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114190": "find_matching_pattern_00114190",
                "iVar4": "comparison_result",
                "param_1": "input_array",
                "param_2": "flag",
                "param_3": "flags",
                "plVar2": "temp_var2",
                "pplVar3": "temp_var3",
                "pplVar6": "temp_var6",
                "pplVar7": "temp_var7",
                "pplVar8": "next_array_ptr",
                "uVar1": "temp_var1",
                "uVar5": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114460": {
            "additional_data": {
                "*__ptr": {
                    "1": "first_byte"
                },
                "D48": {
                    "1": "line_number"
                },
                "DAT_00127a20": {
                    "1": "error_flag"
                },
                "FUN_00114460": {
                    "1": "parse_file_and_store_lines",
                    "18": "read_and_process_file",
                    "3": "parse_file",
                    "8": "process_file"
                },
                "__errno_location()": {
                    "1": "get_error_number_location()"
                },
                "__n": {
                    "31": "file_size"
                },
                "__ptr": {
                    "1": "file_content",
                    "10": "file_buffer",
                    "16": "buffer",
                    "4": "file_data"
                },
                "__stream": {
                    "1": "file_ptr",
                    "23": "file_stream",
                    "7": "file"
                },
                "bVar8": {
                    "1": "byte_value",
                    "2": "current_char",
                    "23": "current_byte"
                },
                "bVar9": {
                    "1": "next_char"
                },
                "check_file_00113f50": {
                    "1": "check_file"
                },
                "fclose(__stream)": {
                    "1": "close_file(file_stream)"
                },
                "ferror(__stream)": {
                    "1": "check_stream_error(file_stream)"
                },
                "fopen(param_1, : r: )": {
                    "1": "open_file(file_path)"
                },
                "get_file_size()": {
                    "1": "get_filesize()"
                },
                "iVar1": {
                    "1": "line_num",
                    "2": "line_counter",
                    "22": "line_number",
                    "5": "line_count"
                },
                "param_1": {
                    "31": "file_path"
                },
                "param_2": {
                    "1": "file_map",
                    "2": "htab_ptr",
                    "23": "hash_table",
                    "5": "htab"
                },
                "param_3": {
                    "1": "data",
                    "10": "file_content",
                    "12": "file_data"
                },
                "pbVar10": {
                    "1": "cursor",
                    "2": "current_character",
                    "3": "current_char",
                    "6": "current_position"
                },
                "pbVar10[6]": {
                    "1": "temp_pointer"
                },
                "pbVar11": {
                    "1": "new_line_character",
                    "2": "next_char",
                    "3": "next_position"
                },
                "pbVar12": {
                    "1": "start_pointer",
                    "11": "line_start",
                    "2": "start_position",
                    "3": "line_start_ptr"
                },
                "pbVar7": {
                    "1": "line_pointer",
                    "2": "current_position",
                    "3": "line_start",
                    "6": "current_char"
                },
                "pbVar8": {
                    "1": "next_char_ptr",
                    "2": "next_char"
                },
                "pbVar9": {
                    "1": "next_character",
                    "14": "next_byte",
                    "2": "next_position",
                    "3": "line_end"
                },
                "pcVar3": {
                    "1": "error_string",
                    "24": "error_message"
                },
                "piVar2": {
                    "1": "error_number_ptr",
                    "2": "errno_ptr",
                    "5": "error_code",
                    "8": "errno_location"
                },
                "ppbVar6": {
                    "1": "hash_entry",
                    "10": "hash_table_slot",
                    "2": "htab_slot",
                    "5": "slot",
                    "7": "hash_slot"
                },
                "process_lines_00104d1c()": {
                    "1": "process_lines()"
                },
                "report_and_exit_00119dd0": {
                    "1": "report_and_exit"
                },
                "return": {
                    "1": "end_function"
                },
                "sVar5": {
                    "28": "bytes_read",
                    "3": "read_size"
                },
                "uVar4": {
                    "1": "error_translated",
                    "13": "translated_message",
                    "2": "translation",
                    "4": "error_message"
                }
            },
            "called": [
                "FUN_00104210",
                "FUN_00113f50",
                "FUN_00104160",
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104750",
                "FUN_00104130",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_and_process_file_00114460(char *file_path,undefined8 hash_table,byte **file_data)\n\n{\n  int line_number;\n  int *error_number;\n  char *error_message;\n  undefined8 translated_message;\n  size_t file_size;\n  byte *buffer;\n  FILE *file_stream;\n  size_t bytes_read;\n  byte **hash_table_slot;\n  byte *current_char;\n  byte current_byte;\n  byte *next_byte;\n  byte *current_position;\n  byte *next_position;\n  byte *line_start;\n  \n  file_size = get_filesize();\n  if (file_size == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(file_size + 2);\n    file_stream = fopen(file_path,\"r\");\n    if (file_stream == (FILE *)0x0) {\n      error_number = get_error_number_location();\n      error_message = strerror(*error_number);\n      translated_message = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(translated_message,file_path,error_message);\n    }\n    bytes_read = fread(buffer,1,file_size,file_stream);\n    if ((bytes_read == 0) || (line_number = check_stream_error(file_stream), line_number != 0)) {\n      translated_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(translated_message,file_path);\n    }\n    line_number = 1;\n    close_file(file_stream);\n    *(undefined2 *)(buffer + file_size) = 10;\n    current_byte = *buffer;\n    line_start = buffer;\n    while (current_position = line_start, current_byte != 0) {\n      for (; current_byte = *current_position, next_position = current_position, current_byte != 10; current_position = current_position + 1) {\n        if ((char)current_byte < '\\v') {\n          if (current_byte == 0) {\n            next_byte = current_position + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (current_byte == 0xd) {\n            *current_position = 0;\n            next_byte = current_position + 1;\n            if (current_position[1] == 10) {\n              next_byte = current_position + 2;\n              next_position = current_position + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (current_byte == 0x23) {\n            process_lines();\n            end_function;\n          }\n        }\n      }\n      *current_position = 0;\n      if (current_position[1] == 0xd) {\n        next_position = current_position + 1;\n        next_byte = current_position + 2;\n      }\n      else {\n        next_byte = current_position + 1;\n      }\nLAB_00114553:\n      current_byte = *line_start;\n      while ((current_byte == 0x20 || (current_position = line_start, current_byte == 9))) {\n        current_position = line_start + 1;\n        line_start = line_start + 1;\n        current_byte = *current_position;\n      }\n      do {\n        if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n        if (current_byte == 0) goto LAB_00114599;\n        current_byte = current_position[1];\n        current_position = current_position + 1;\n      } while ((current_byte != 0x20) && (current_byte != 9));\n      if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        current_byte = current_position[1];\n        if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n              ((current_byte = current_position[2], current_byte == 9 || (current_byte == 0x20)))) &&\n             ((current_byte = current_position[3], current_byte == 9 || (current_byte == 0x20)))) &&\n            ((current_byte = current_position[4], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = current_position[5], current_byte == 9 || (current_byte == 0x20)))) {\n          current_byte = temp_pointer;\n          current_char = current_position + 6;\n          if ((current_byte == 9) || (current_byte == 0x20)) {\n            do {\n              do {\n                current_byte = current_char[1];\n                current_char = current_char + 1;\n              } while (current_byte == 0x20);\n            } while (current_byte == 9);\n          }\n        }\n        if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n          translated_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(translated_message,file_path,line_number);\n        }\n      }\nLAB_00114599:\n      *current_position = 0;\n      if (line_start < current_position) {\n        hash_table_slot = (byte **)htab_find_slot(hash_table,line_start,1);\n        *hash_table_slot = line_start;\n      }\n      line_number = line_number + 1;\n      line_start = next_byte;\n      current_byte = next_position[1];\n    }\n    *file_data = buffer;\n  }\n  end_function;\n}\n\n",
            "current_name": "read_and_process_file_00114460",
            "entrypoint": "0x00114460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "__errno_location()": "get_error_number_location()",
                "__n": "file_size",
                "__ptr": "buffer",
                "__stream": "file_stream",
                "bVar8": "current_byte",
                "bVar9": "next_char",
                "fclose(__stream)": "close_file(file_stream)",
                "ferror(__stream)": "check_stream_error(file_stream)",
                "get_file_size()": "get_filesize()",
                "iVar1": "line_number",
                "param_1": "file_path",
                "param_2": "hash_table",
                "param_3": "file_data",
                "pbVar10": "current_position",
                "pbVar10[6]": "temp_pointer",
                "pbVar11": "next_position",
                "pbVar12": "line_start",
                "pbVar7": "current_char",
                "pbVar9": "next_byte",
                "pcVar3": "error_message",
                "piVar2": "error_number",
                "ppbVar6": "hash_table_slot",
                "process_lines_00104d1c()": "process_lines()",
                "return": "end_function",
                "sVar5": "bytes_read",
                "uVar4": "translated_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114690": {
            "additional_data": {
                "FUN_00114690": {
                    "1": "improve_extracted_binary",
                    "2": "process_binary_file",
                    "3": "process_binary"
                },
                "__ptr": {
                    "1": "ptr_var",
                    "2": "temp_file_list"
                },
                "__ptr: ": {
                    "1": "ptr_var1"
                },
                "bVar1": {
                    "1": "byte_var_1",
                    "14": "byte_var1",
                    "4": "byte_var",
                    "5": "flag"
                },
                "bVar25": {
                    "1": "boolean_var",
                    "4": "bool_value",
                    "5": "bool_var",
                    "6": "bool_var25",
                    "7": "bool_var1"
                },
                "bVar26": {
                    "1": "byte_var",
                    "2": "byte_value2",
                    "5": "byte_var26",
                    "9": "byte_var2"
                },
                "cVar2": {
                    "1": "char_variable_1",
                    "10": "char_var1",
                    "3": "char_value",
                    "7": "char_var2"
                },
                "cVar3": {
                    "1": "copy_object_result",
                    "11": "char_var2",
                    "2": "char_value2",
                    "7": "char_var3"
                },
                "iVar4": {
                    "1": "inner_int_var",
                    "2": "int_value",
                    "6": "int_var4",
                    "9": "int_var1"
                },
                "iVar5": {
                    "1": "int_value",
                    "2": "bfd_stat_result",
                    "6": "int_var5",
                    "9": "int_var2"
                },
                "lStack_98": {
                    "1": "negative_file_size",
                    "2": "long_stack_var1",
                    "3": "l_stack_var1"
                },
                "lVar13": {
                    "1": "long_var_13",
                    "4": "long_var13",
                    "6": "long_var2",
                    "8": "file_size"
                },
                "lVar21": {
                    "1": "long_value3",
                    "2": "bytes_read",
                    "4": "long_var21",
                    "5": "long_var3"
                },
                "lVar8": {
                    "1": "long_var_8",
                    "10": "long_var1",
                    "2": "buffer_size",
                    "3": "long_value",
                    "6": "long_var8"
                },
                "local_158": {
                    "1": "stat_value",
                    "2": "temp_stat",
                    "4": "local_stat_struct"
                },
                "local_198": {
                    "1": "temp_addr",
                    "2": "long_ptr_local_198",
                    "4": "long_pointer"
                },
                "local_1a0": {
                    "1": "output_bfd_file",
                    "2": "output_file"
                },
                "local_c8": {
                    "1": "temp_dir_ptr",
                    "2": "void_ptr_array",
                    "3": "void_pointer_array"
                },
                "local_c8[3]": {
                    "1": "local_pointer_voidc8[3]"
                },
                "pData": {
                    "1": "byte_pointer_var1"
                },
                "pStat": {
                    "1": "stat_pointer_var1"
                },
                "param_1": {
                    "1": "input_file_name",
                    "18": "input_file_path",
                    "4": "file_path",
                    "5": "input_file"
                },
                "param_2": {
                    "1": "output_file_name",
                    "19": "output_file_path",
                    "4": "output_path",
                    "5": "output_file"
                },
                "param_3": {
                    "2": "fd",
                    "29": "file_descriptor"
                },
                "param_4": {
                    "1": "output_mode",
                    "2": "stat_buf",
                    "3": "file_status",
                    "6": "stat_struct"
                },
                "param_5": {
                    "1": "file_type",
                    "2": "open_mode",
                    "3": "target_architecture",
                    "9": "target_format"
                },
                "param_6": {
                    "1": "flags",
                    "2": "file_mode",
                    "6": "file_size",
                    "8": "section_size"
                },
                "param_7": {
                    "1": "flags",
                    "2": "copy_condition",
                    "4": "copy_options",
                    "8": "condition"
                },
                "pcVar15": {
                    "1": "pointer_to_char1",
                    "6": "temp_dir_path"
                },
                "pcVar16": {
                    "1": "current_archived_file",
                    "2": "current_file_path"
                },
                "pcVar17": {
                    "1": "char_pointer_1",
                    "2": "current_char"
                },
                "pcVar18": {
                    "1": "pointer_to_char3",
                    "2": "char_pointer3",
                    "5": "temp_file_path"
                },
                "pcVar19": {
                    "1": "temp_file_path"
                },
                "pcVar20": {
                    "1": "code_ptr",
                    "2": "code_pointer"
                },
                "pcVar21": {
                    "1": "non_fatal_error_string"
                },
                "pcVar23": {
                    "1": "archive_filename",
                    "2": "pointer_to_char_var23"
                },
                "piVar10": {
                    "1": "int_ptr_var10",
                    "2": "pointer_to_int_var10",
                    "3": "error_code"
                },
                "ppcVar16": {
                    "1": "archive_file",
                    "2": "char_double_pointer2"
                },
                "ppcVar19": {
                    "1": "char_double_pointer_4"
                },
                "ppcVar20": {
                    "1": "code_pointer1",
                    "2": "close_function"
                },
                "ppcVar6": {
                    "1": "string_array_var6",
                    "2": "archived_file",
                    "3": "char_double_pointer"
                },
                "psVar24": {
                    "1": "stat_var24",
                    "2": "stat_ptr",
                    "4": "stat_pointer"
                },
                "puVar14": {
                    "1": "bfd_handle_ptr",
                    "2": "input_file_descriptor",
                    "3": "bfd_handle"
                },
                "puVar19": {
                    "1": "char_double_pointer"
                },
                "puVar20": {
                    "1": "char_double_pointer"
                },
                "puVar23": {
                    "1": "char_pointer"
                },
                "puVar9": {
                    "1": "temp_dir_info",
                    "2": "pointer_var1",
                    "3": "undefined8_pointer"
                },
                "pvVar7": {
                    "1": "pointer_var7",
                    "2": "pointer_to_void_var7",
                    "5": "buffer"
                },
                "uStack_b0": {
                    "1": "uint_var3",
                    "2": "permission",
                    "3": "file_permissions"
                },
                "uVar11": {
                    "1": "stat_error_message",
                    "2": "uint_var1",
                    "3": "error_message",
                    "4": "ulong_var1"
                },
                "uVar12": {
                    "1": "undefined_var2",
                    "2": "undefined8_var12",
                    "4": "ulong_var2"
                },
                "uVar22": {
                    "1": "bit_flag",
                    "2": "ulong_var22",
                    "3": "uint_var22",
                    "4": "uint_var1"
                }
            },
            "called": [
                "FUN_00104820",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104690",
                "FUN_0011256b",
                "FUN_00104810",
                "FUN_001040b0",
                "FUN_00104780",
                "FUN_00114d50",
                "FUN_00104908",
                "FUN_00104370",
                "FUN_001043c0",
                "FUN_00104900",
                "FUN_00104240",
                "FUN_0011a0e0",
                "FUN_001041b0",
                "FUN_00119ed0",
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104d25",
                "FUN_001043a0",
                "FUN_00113f50",
                "FUN_001048f0",
                "FUN_001048d0",
                "FUN_00104500",
                "FUN_001041f0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid process_binary_00114690(undefined8 input_file_path,undefined8 output_file_path,int file_descriptor,undefined8 stat_struct,\n                 undefined8 target_format,long section_size,undefined8 condition)\n\n{\n  byte byte_var1;\n  char char_var1;\n  char char_var2;\n  int int_var1;\n  int int_var2;\n  char **char_double_pointer;\n  void *void_pointer;\n  long long_var1;\n  undefined8 *undefined8_pointer;\n  int *error_code;\n  undefined8 ulong_var1;\n  undefined8 ulong_var2;\n  long file_size;\n  undefined8 *bfd_handle;\n  char *temp_dir_path;\n  char **char_double_pointer2;\n  char *char_pointer2;\n  char *temp_file_path;\n  undefined8 *undefined8_pointer3;\n  char **char_double_pointer3;\n  code *code_pointer;\n  long long_var3;\n  uint uint_var1;\n  char *pointer_to_char_var23;\n  stat *stat_pointer;\n  bool bool_var1;\n  byte byte_var2;\n  undefined8 *undefined8_pointer4;\n  long *long_pointer;\n  stat local_stat_struct;\n  void *void_pointer_array [3];\n  uint u_stack_var1;\n  long l_stack_var1;\n  \n  byte_var2 = 0;\n  file_size = get_file_size();\n  if (file_size < 1) {\n    if (file_size == 0) {\n      ulong_var2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      non_fatal(ulong_var2,input_file_path);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  bfd_handle = (undefined8 *)bfd_openr(input_file_path,target_format);\n  if ((bfd_handle == (undefined8 *)0x0) || (int_var2 = bfd_stat(bfd_handle,stat_struct), int_var2 != 0)) {\n    bfd_nonfatal_message(input_file_path,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x40000;\n  }\n  char_var1 = bfd_check_format(bfd_handle,2);\n  if (char_var1 != '\\0') {\n    if (section_size == 0) {\n      char_var1 = '\\0';\n      section_size = *(long *)bfd_handle[1];\n    }\n    if (file_descriptor < 0) {\n      undefined8_pointer4 = (undefined8 *)bfd_openw(output_file_path,section_size);\n    }\n    else {\n      undefined8_pointer4 = (undefined8 *)bfd_fdopenw(output_file_path,section_size,file_descriptor);\n    }\n    if (undefined8_pointer4 != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        ulong_var2 = *bfd_handle;\n        ulong_var1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        non_fatal(ulong_var1,ulong_var2);\n        DAT_00127a10 = 0;\n      }\n      set_long_section_mode(undefined8_pointer4,bfd_handle,DAT_001264b4);\n      long_pointer = undefined8_pointer4 + 0x1f;\n      if ((*(byte *)((long)bfd_handle + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        ulong_var2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfd_nonfatal_message(0,bfd_handle,0,ulong_var2);\n        return;\n      }\n      temp_dir_path = (char *)make_tempdir(*undefined8_pointer4);\n      if (temp_dir_path == (char *)0x0) {\n        error_code = __errno_location();\n        temp_dir_path = strerror(*error_code);\n        ulong_var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        fatal(ulong_var2,temp_dir_path);\n      }\n      if (DAT_00127a2c == 7) {\n        byte_var1 = *(byte *)((long)bfd_handle + 0x49);\n        uint_var1 = 0;\n      }\n      else {\n        byte_var1 = *(byte *)((long)bfd_handle + 0x49);\n        uint_var1 = byte_var1 >> 3 & 1;\n      }\n      bool_var1 = _DAT_001264b0 != 0;\n      *(byte *)((long)undefined8_pointer4 + 0x49) =\n           byte_var1 & 0x10 | (byte)(uint_var1 << 3) | *(byte *)((long)undefined8_pointer4 + 0x49) & 0xe7;\n      if (bool_var1) {\n        *(uint *)((long)undefined8_pointer4 + 0x44) = *(uint *)((long)undefined8_pointer4 + 0x44) | 0x2000;\n      }\n      undefined8_pointer3 = (undefined8 *)0x0;\n      char_double_pointer2 = (char **)bfd_openr_next_archived_file(bfd_handle,0);\n      char_var2 = bfd_set_format(undefined8_pointer4,*(byte *)(bfd_handle + 9) & 7);\n      if (char_var2 == '\\0') {\n        DAT_00127a20 = 1;\n        bfd_nonfatal_message(0,undefined8_pointer4,0,0);\n        remove_and_free_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (char_double_pointer2 != (char **)0x0))) {\n        temp_file_path = *char_double_pointer2;\n        char_pointer2 = temp_file_path;\n        if (*temp_file_path == '/') {\nLAB_0010527d:\n          ulong_var2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          non_fatal(ulong_var2,temp_file_path);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*char_pointer2 != '\\0') {\n          pointer_to_char_var23 = char_pointer2;\n          if ((*char_pointer2 == '.') && (pointer_to_char_var23 = char_pointer2 + 1, char_pointer2[1] == '.')) {\n            pointer_to_char_var23 = char_pointer2 + 2;\n            if ((char_pointer2[2] == '\\0') || (char_pointer2[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointer_to_char_var23 != '\\0' && (*pointer_to_char_var23 != '/')); pointer_to_char_var23 = pointer_to_char_var23 + 1) {\n          }\n          char_pointer2 = pointer_to_char_var23;\n          if (*pointer_to_char_var23 == '/') {\n            copy_archive_001052a2();\n            return;\n          }\n        }\n        temp_file_path = (char *)concat(temp_dir_path,&DAT_0011b47d);\n        int_var2 = stat(temp_file_path,&local_stat_struct);\n        undefined8_pointer = undefined8_pointer3;\n        if (-1 < int_var2) {\n          file_size = make_tempdir(temp_file_path);\n          free(temp_file_path);\n          if (file_size == 0) {\n            error_code = __errno_location();\n            temp_file_path = strerror(*error_code);\n            ulong_var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            non_fatal(ulong_var2,temp_file_path);\n            goto LAB_00104e93;\n          }\n          undefined8_pointer = (undefined8 *)xmalloc(0x18);\n          temp_file_path = *char_double_pointer2;\n          *undefined8_pointer = undefined8_pointer3;\n          undefined8_pointer[2] = 0;\n          undefined8_pointer[1] = file_size;\n          temp_file_path = (char *)concat(file_size,&DAT_0011b47d,temp_file_path);\n        }\n        int_var2 = 0;\n        if (DAT_001279cb != '\\0') {\n          stat_pointer = &local_stat_struct;\n          for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n            *(undefined4 *)&stat_pointer->st_dev = 0;\n            stat_pointer = (stat *)((long)stat_pointer + (ulong)byte_var2 * -8 + 4);\n          }\n          char_double_pointer3 = (char **)char_double_pointer2[0x1d];\n          if ((char **)char_double_pointer2[0x1d] == (char **)0x0) {\n            char_double_pointer3 = char_double_pointer2;\n          }\n          int_var2 = (**(code **)(char_double_pointer3[1] + 0x1e8))(char_double_pointer2,&local_stat_struct);\n          if (int_var2 != 0) {\n            char_pointer2 = *char_double_pointer2;\n            ulong_var2 = dcgettext(0,\"internal stat error on %s\",5);\n            non_fatal(ulong_var2,char_pointer2);\n          }\n        }\n        undefined8_pointer3 = (undefined8 *)xmalloc(0x18);\n        undefined8_pointer3[1] = temp_file_path;\n        *undefined8_pointer3 = undefined8_pointer;\n        undefined8_pointer3[2] = 0;\n        char_var2 = bfd_check_format(char_double_pointer2,1);\n        if (char_var2 == '\\0') {\n          ulong_var2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          bfd_nonfatal_message(0,char_double_pointer2,0,ulong_var2);\n          char_double_pointer3 = (char **)bfd_openw(temp_file_path,section_size);\n          if (char_double_pointer3 == (char **)0x0) {\nLAB_00104e80:\n            bfd_nonfatal_message(temp_file_path,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          char_double_pointer = (char **)char_double_pointer2[0x1d];\n          if ((char **)char_double_pointer2[0x1d] == (char **)0x0) {\n            char_double_pointer = char_double_pointer2;\n          }\n          int_var1 = (**(code **)(char_double_pointer[1] + 0x1e8))(char_double_pointer2);\n          file_size = l_stack_var1;\n          if (int_var1 == 0) {\n            if (l_stack_var1 < 0) {\n              bfd_get_archive_filename(char_double_pointer2);\n              ulong_var2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              non_fatal(ulong_var2);\n            }\n            else {\n              int_var1 = bfd_seek(char_double_pointer2,0,0);\n              if (int_var1 == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  char_pointer2 = *char_double_pointer3;\n                  ulong_var2 = bfd_get_archive_filename(char_double_pointer2);\n                  pointer_to_char_var23 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointer_to_char_var23,ulong_var2,char_pointer2);\n                }\n                void_pointer = (void *)xmalloc(0x2000);\n                for (; file_size != 0; file_size = file_size - long_var3) {\n                  long_var3 = 0x2000;\n                  if (file_size < 0x2001) {\n                    long_var3 = file_size;\n                  }\n                  long_var1 = bfd_bread(void_pointer,long_var3,char_double_pointer2);\n                  char_double_pointer = char_double_pointer2;\n                  if ((long_var3 != long_var1) ||\n                     (long_var1 = bfd_bwrite(void_pointer,long_var3,char_double_pointer3), char_double_pointer = char_double_pointer3,\n                     long_var3 != long_var1)) {\n                    bfd_nonfatal_message(0,char_double_pointer,0,0);\n                    free(void_pointer);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*char_double_pointer3,u_stack_var1 | 0x100);\n                free(void_pointer);\n                char_var2 = bfd_close_all_done(char_double_pointer3);\n                if (char_var2 == '\\0') {\n                  bfd_nonfatal_message(temp_file_path,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              ulong_var2 = bfd_get_archive_filename(char_double_pointer2);\n              bfd_nonfatal(ulong_var2);\n            }\n          }\n          else {\n            bfd_nonfatal_message(0,char_double_pointer2,0,0);\n          }\nLAB_00104f00:\n          char_var2 = bfd_close_all_done(char_double_pointer3);\n          if (char_var2 == '\\0') {\n            bfd_nonfatal_message(temp_file_path,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(temp_file_path);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (char_var1 == '\\0') {\n            char_double_pointer3 = (char **)bfd_openw(temp_file_path,*(undefined8 *)char_double_pointer2[1]);\n          }\n          else {\n            char_double_pointer3 = (char **)bfd_openw(temp_file_path,section_size);\n          }\n          if (char_double_pointer3 == (char **)0x0) goto LAB_00104e80;\n          char_var2 = copy_object(char_double_pointer2,char_double_pointer3,condition);\n          if (char_var2 == '\\0') {\n            int_var1 = bfd_get_arch(char_double_pointer2);\n            if (int_var1 == 0) goto LAB_00104d75;\n            char_var2 = bfd_close_all_done(char_double_pointer3);\n            if (char_var2 == '\\0') {\n              bfd_nonfatal_message(temp_file_path,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          char_var2 = bfd_close(char_double_pointer3);\n          if (char_var2 == '\\0') {\n            bfd_nonfatal_message(temp_file_path,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (int_var2 == 0)) {\n            set_times(temp_file_path,&local_stat_struct);\n          }\n          file_size = bfd_openr(temp_file_path,section_size);\n          undefined8_pointer3[2] = file_size;\n          *long_pointer = file_size;\n          long_pointer = (long *)(file_size + 0xf0);\n          char_double_pointer3 = (char **)bfd_openr_next_archived_file(bfd_handle);\n          bfd_close(char_double_pointer2);\n          char_double_pointer2 = char_double_pointer3;\n        }\n      }\n      *long_pointer = 0;\n      void_pointer = (void *)xstrdup(*undefined8_pointer4);\n      if (DAT_00127a20 == 0) {\n        code_pointer = bfd_close;\n      }\n      else {\n        code_pointer = bfd_close_all_done;\n      }\n      char_var1 = (*code_pointer)(undefined8_pointer4);\n      if (char_var1 == '\\0') {\n        DAT_00127a20 = 1;\n        bfd_nonfatal_message(void_pointer,0,0,0);\n      }\n      free(void_pointer);\n      void_pointer = (void *)xstrdup(*bfd_handle);\n      char_var1 = bfd_close(bfd_handle);\n      if (char_var1 == '\\0') {\n        DAT_00127a20 = 1;\n        bfd_nonfatal_message(void_pointer,0,0,0);\n      }\n      free(void_pointer);\nLAB_00114b4b:\n      while (undefined8_pointer3 != (undefined8 *)0x0) {\n        if (undefined8_pointer3[2] == 0) {\n          rmdir((char *)undefined8_pointer3[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)undefined8_pointer3[1]);\n        }\n        free((void *)undefined8_pointer3[1]);\n        bfd_handle = (undefined8 *)*undefined8_pointer3;\n        free(undefined8_pointer3);\n        undefined8_pointer3 = bfd_handle;\n      }\n      rmdir(temp_dir_path);\n      free(temp_dir_path);\n      return;\n    }\nLAB_00105231:\n    close(file_descriptor);\n    bfd_nonfatal_message(output_file_path,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  char_var1 = bfd_check_format_matches(bfd_handle,1,void_pointer_array);\n  if (char_var1 == '\\0') {\n    int_var2 = bfd_get_error();\n    char_var1 = bfd_check_format_matches(bfd_handle,3,&local_stat_struct);\n    if (char_var1 == '\\0') {\n      int_var1 = bfd_get_error();\n      if (int_var2 != int_var1) {\n        bfd_set_error(int_var2);\n      }\n      bfd_nonfatal_message(input_file_path,0,0,0);\n      if (int_var2 == 0xd) {\n        list_matching_formats(void_pointer_array[0]);\n      }\n      if (int_var1 != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      list_matching_formats(local_stat_struct.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (int_var2 == 0xd) {\n      free(void_pointer_array[0]);\n    }\n  }\n  if (section_size == 0) {\n    section_size = *(long *)bfd_handle[1];\n  }\n  if (file_descriptor < 0) {\n    file_size = bfd_openw(output_file_path,section_size);\n  }\n  else {\n    file_size = bfd_fdopenw(output_file_path,section_size,file_descriptor);\n  }\n  if (file_size == 0) goto LAB_00105231;\n  set_long_section_mode(file_size,bfd_handle,DAT_001264b4);\n  char_var1 = copy_object(bfd_handle,file_size,condition);\n  if (char_var1 == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    char_var1 = bfd_close(file_size);\n    goto LAB_001147d5;\n  }\n  char_var1 = bfd_close_all_done(file_size);\nLAB_001147d5:\n  if (char_var1 != '\\x01') {\n    DAT_00127a20 = 1;\n    bfd_nonfatal_message(output_file_path,0,0,0);\n    return;\n  }\n  char_var1 = bfd_close(bfd_handle);\n  if (char_var1 == '\\0') {\n    DAT_00127a20 = 1;\n    bfd_nonfatal_message(input_file_path,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_binary_00114690",
            "entrypoint": "0x00114690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114690": "process_binary_00114690",
                "__ptr": "undefined8_pointer3",
                "bVar1": "byte_var1",
                "bVar25": "bool_var1",
                "bVar26": "byte_var2",
                "cVar2": "char_var1",
                "cVar3": "char_var2",
                "iVar4": "int_var1",
                "iVar5": "int_var2",
                "lStack_98": "l_stack_var1",
                "lVar13": "file_size",
                "lVar21": "long_var3",
                "lVar8": "long_var1",
                "local_158": "local_stat_struct",
                "local_198": "long_pointer",
                "local_1a0": "undefined8_pointer4",
                "local_c8": "void_pointer_array",
                "param_1": "input_file_path",
                "param_2": "output_file_path",
                "param_3": "file_descriptor",
                "param_4": "stat_struct",
                "param_5": "target_format",
                "param_6": "section_size",
                "param_7": "condition",
                "pcVar15": "temp_dir_path",
                "pcVar16": "current_file_path",
                "pcVar17": "char_pointer2",
                "pcVar18": "temp_file_path",
                "pcVar19": "temp_file_path",
                "pcVar20": "code_pointer",
                "pcVar23": "pointer_to_char_var23",
                "piVar10": "error_code",
                "ppcVar16": "char_double_pointer2",
                "ppcVar19": "char_double_pointer3",
                "ppcVar6": "char_double_pointer",
                "psVar24": "stat_pointer",
                "puVar14": "bfd_handle",
                "puVar9": "undefined8_pointer",
                "pvVar7": "void_pointer",
                "uStack_b0": "u_stack_var1",
                "uVar11": "ulong_var1",
                "uVar12": "ulong_var2",
                "uVar22": "uint_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114b84": {
            "additional_data": {
                "FUN_00114b84": {
                    "1": "delete_directory",
                    "11": "remove_directory",
                    "13": "remove_and_free_directory",
                    "3": "remove_directory_and_free"
                },
                "param_9": {
                    "31": "directory_path"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_00104230"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "code": "\nvoid remove_and_free_directory_00114b84(void)\n\n{\n  char *directory_path;\n  \n  rmdir(directory_path);\n  free(directory_path);\n  return;\n}\n\n",
            "current_name": "remove_and_free_directory_00114b84",
            "entrypoint": "0x00114b84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114b84": "remove_and_free_directory_00114b84",
                "param_9": "directory_path"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c20": {
            "additional_data": {
                "DAT_0011b499": {
                    "1": "constant",
                    "2": "target_string",
                    "3": "section_identifier"
                },
                "DAT_001278b8": {
                    "1": "section_found",
                    "7": "flag"
                },
                "FUN_00113fb0": {
                    "1": "compare_string",
                    "2": "startswith",
                    "4": "starts_with_lto_priv_0_lto_priv_0"
                },
                "FUN_00114190": {
                    "1": "retrieve_section_list",
                    "2": "find_section",
                    "5": "find_section_list"
                },
                "FUN_00114c20": {
                    "1": "process_param",
                    "2": "analyze_binary",
                    "4": "process_section",
                    "5": "process_binary",
                    "6": "find_and_process_sections"
                },
                "cVar1": {
                    "1": "startswith_match",
                    "2": "starts_with_dat_0011b499",
                    "4": "startswith_result",
                    "5": "starts_with",
                    "6": "starts_with_match"
                },
                "param_1": {
                    "1": "binary_data",
                    "2": "input_param",
                    "3": "input_address",
                    "6": "binary_address"
                },
                "param_2": {
                    "1": "prefix_string",
                    "2": "str2",
                    "3": "flag"
                },
                "param_3": {
                    "1": "size_limit",
                    "2": "size",
                    "4": "value"
                },
                "pcVar2": {
                    "1": "section_start_ptr",
                    "2": "next_section",
                    "3": "section_ptr",
                    "9": "section_address"
                }
            },
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid find_and_process_sections_00114c20(long binary_address)\n\n{\n  char starts_with_match;\n  char *section_address;\n  \n  find_section_list(binary_address,1,1);\n  starts_with_match = startswith_lto_priv_0_lto_priv_0(binary_address,&DAT_0011b499);\n  if (starts_with_match != '\\0') {\n    section_address = (char *)(binary_address + 5);\n    if (*(char *)(binary_address + 4) != 'a') {\n      section_address = (char *)(binary_address + 4);\n    }\n    if (*section_address != '\\0') {\n      find_section_list(section_address,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "current_name": "find_and_process_sections_00114c20",
            "entrypoint": "0x00114c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c20": "find_and_process_sections_00114c20",
                "cVar1": "starts_with_match",
                "param_1": "binary_address",
                "pcVar2": "section_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c80": {
            "additional_data": {
                "FUN_001053b5": {
                    "1": "handle_failure"
                },
                "FUN_00114c80": {
                    "1": "parse_parameters",
                    "11": "parse_parameter",
                    "3": "parse_param",
                    "4": "parse_assignment"
                },
                "FUN_0011a480": {
                    "1": "validate_buffer"
                },
                "auVar3": {
                    "1": "extracted_data",
                    "2": "result_struct",
                    "4": "parsed_values",
                    "6": "result",
                    "8": "parsed_data"
                },
                "dcgettext": {
                    "1": "get_message",
                    "3": "get_error_message"
                },
                "fatal": {
                    "1": "show_fatal_error",
                    "2": "exit_program"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_str",
                    "23": "input_string",
                    "4": "query_string"
                },
                "param_2": {
                    "1": "param2_value",
                    "10": "value_1",
                    "5": "param_2"
                },
                "param_3": {
                    "1": "param3_value",
                    "3": "value2",
                    "6": "param_3",
                    "8": "error_message"
                },
                "param_4": {
                    "1": "param4_value",
                    "2": "value2",
                    "3": "value3",
                    "4": "value_2",
                    "6": "value_3"
                },
                "pcVar1": {
                    "1": "equal_pointer",
                    "2": "equals_position",
                    "3": "equal_sign_pos",
                    "5": "equal_sign",
                    "7": "equal_sign_ptr",
                    "9": "equal_sign_position"
                },
                "strchr": {
                    "2": "find_character"
                },
                "uVar2": {
                    "1": "parsed_string",
                    "3": "format_error",
                    "9": "substring"
                },
                "xmalloc": {
                    "5": "allocate_memory"
                },
                "xstrndup": {
                    "2": "copy_substring",
                    "3": "duplicate_string"
                }
            },
            "called": [
                "FUN_0011a480",
                "FUN_001053b5",
                "FUN_00104290",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_parameter_00114c80(char *input_string,undefined8 value_1,undefined8 error_message,undefined8 value_3)\n\n{\n  char *equal_sign_position;\n  undefined8 substring;\n  undefined parsed_data [16];\n  \n  equal_sign_position = find_character(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    parsed_data._0_8_ = (undefined8 *)allocate_memory(0x30);\n    substring = duplicate_string(input_string,(long)equal_sign_position - (long)input_string);\n    parsed_data._0_8_[2] = equal_sign_position + 1;\n    parsed_data._0_8_[1] = substring;\n    parsed_data._0_8_[4] = 0;\n    parsed_data._0_8_[3] = 0;\n    *parsed_data._0_8_ = value_1;\n    parsed_data._8_8_ = value_3;\n    return parsed_data;\n  }\n  substring = get_error_message(0,\"bad format for %s\",5);\n                    \n  exit_program(substring,error_message);\n}\n\n",
            "current_name": "parse_parameter_00114c80",
            "entrypoint": "0x00114c80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c80": "parse_parameter_00114c80",
                "auVar3": "parsed_data",
                "dcgettext": "get_error_message",
                "fatal": "exit_program",
                "param_1": "input_string",
                "param_2": "value_1",
                "param_3": "error_message",
                "param_4": "value_3",
                "pcVar1": "equal_sign_position",
                "strchr": "find_character",
                "uVar2": "substring",
                "xmalloc": "allocate_memory",
                "xstrndup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114cf0": {
            "additional_data": {
                "FUN_00114cf0": {
                    "1": "allocate_path_memory",
                    "2": "allocate_file_path",
                    "4": "extract_file_name",
                    "9": "create_file_path"
                },
                "bVar6": {
                    "1": "found_last_slash",
                    "13": "found_slash",
                    "2": "slash_found",
                    "6": "is_slash"
                },
                "lVar2": {
                    "1": "len",
                    "10": "index",
                    "5": "length"
                },
                "lVar3": {
                    "1": "starting_index",
                    "2": "length",
                    "4": "path_length",
                    "5": "prefix_length",
                    "6": "offset"
                },
                "lVar4": {
                    "1": "file_name_index",
                    "2": "file_name_length",
                    "4": "last_slash_index"
                },
                "param_1": {
                    "1": "filename",
                    "11": "file_path",
                    "3": "input_path",
                    "4": "filepath"
                },
                "pcVar1": {
                    "1": "filename",
                    "25": "last_slash",
                    "3": "last_forward_slash"
                },
                "pcVar5": {
                    "1": "output_path",
                    "2": "current_char",
                    "3": "new_filepath",
                    "6": "new_file_path",
                    "8": "new_path"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104390",
                "FUN_001042c0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "code": "\nvoid create_file_path_00114cf0(char *file_path)\n\n{\n  char *last_slash;\n  long index;\n  long offset;\n  long slash_offset;\n  char *new_path;\n  byte found_slash;\n  \n  found_slash = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)allocate_memory(9);\n    offset = 0;\n  }\n  else {\n    slash_offset = (long)last_slash - (long)file_path;\n    last_slash = (char *)allocate_memory(slash_offset + 0xb);\n    offset = slash_offset + 1;\n    new_path = last_slash;\n    for (index = slash_offset; index != 0; index = index + -1) {\n      *new_path = *file_path;\n      file_path = file_path + (ulong)found_slash * -2 + 1;\n      new_path = new_path + (ulong)found_slash * -2 + 1;\n    }\n    last_slash[slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + offset) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + offset) + 8) = 0;\n  return;\n}\n\n",
            "current_name": "create_file_path_00114cf0",
            "entrypoint": "0x00114cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114cf0": "create_file_path_00114cf0",
                "bVar6": "found_slash",
                "lVar2": "index",
                "lVar3": "offset",
                "lVar4": "slash_offset",
                "param_1": "file_path",
                "pcVar1": "last_slash",
                "pcVar5": "new_path",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d50": {
            "additional_data": {
                "(**(code **)(*(long *)(*(long *)(param1 + 8) + 0x380) + 0x78))": {
                    "1": "call_function"
                },
                "(**code **)(*(long *)(*(long *)(param_1 + 8) + 0x380) + 0x78)": {
                    "1": "jumptable_function"
                },
                "(int *)(*(long *)(param_1 + 8) + 8)": {
                    "1": "ptr1"
                },
                "(int *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "ptr2"
                },
                "(uint)*(byte *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71)": {
                    "1": "value_from_ptr2"
                },
                "**(code **)": {
                    "1": "call_function_pointer"
                },
                "FUN_0010540e": {
                    "1": "call_function",
                    "10": "execute_sub_function",
                    "2": "perform_action",
                    "3": "process_function",
                    "4": "sub_function"
                },
                "FUN_00114d50": {
                    "1": "execute_action_based_on_condition",
                    "17": "execute_function",
                    "2": "execute_action"
                },
                "byte": {
                    "1": "value",
                    "2": "byte_value"
                },
                "byte *": {
                    "1": "byte_pointer"
                },
                "code": {
                    "1": "func_ptr"
                },
                "code **": {
                    "1": "function_pointer"
                },
                "param_1": {
                    "1": "function_ptr1",
                    "2": "input_1",
                    "5": "arg1",
                    "6": "input1"
                },
                "param_1_sub": {
                    "1": "input1_sub"
                },
                "param_2": {
                    "1": "argument2",
                    "2": "data2",
                    "5": "arg2",
                    "6": "input2"
                },
                "param_2_sub": {
                    "1": "input2_sub"
                },
                "param_3": {
                    "1": "sub_condition",
                    "2": "status",
                    "3": "arg3",
                    "6": "flag",
                    "7": "condition"
                },
                "param_3_sub": {
                    "1": "condition_flag_sub"
                }
            },
            "called": [
                "FUN_0010540e"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid execute_function_00114d50(long input1,long input2,uint condition)\n\n{\n  if (*(int *)(*(long *)(input1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((condition == 2) && (*(int *)(*(long *)(input2 + 8) + 8) == 2)) {\n    condition = (uint)*(byte_value *)(*(long *)(*(long *)(input2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(func_ptr **)(*(long *)(*(long *)(input1 + 8) + 0x380) + 0x78))(input1,condition != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_00114d50",
            "entrypoint": "0x00114d50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "byte": "byte_value",
                "code": "func_ptr",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d60": {
            "additional_data": {
                "0x0": {
                    "1": "null"
                },
                "FUN_0010543c": {
                    "1": "initialize"
                },
                "FUN_00114d60": {
                    "1": "read_and_store_file",
                    "2": "read_file_and_store_data",
                    "3": "read_and_store_file_contents",
                    "4": "read_file_and_store_content",
                    "5": "read_file"
                },
                "F_ExtractAndReadFile": {
                    "1": "extract_and_read_file"
                },
                "__errno_location": {
                    "1": "get_error_number_location",
                    "3": "get_errno_location"
                },
                "__stream": {
                    "12": "file_stream",
                    "5": "file_pointer",
                    "6": "file_ptr",
                    "8": "file"
                },
                "dcgettext": {
                    "1": "translate_error_message",
                    "3": "get_error_message"
                },
                "fatal": {
                    "1": "show_error_message",
                    "2": "handle_error"
                },
                "fclose": {
                    "1": "close_file"
                },
                "ferror": {
                    "1": "check_error"
                },
                "fopen": {
                    "1": "open_file"
                },
                "fread": {
                    "1": "read_bytes"
                },
                "iVar1": {
                    "1": "is_eof",
                    "11": "eof_indicator",
                    "2": "eof_flag",
                    "3": "feof_result",
                    "6": "end_of_file"
                },
                "lVar7": {
                    "1": "data_offset",
                    "3": "bytes_read",
                    "4": "current_offset",
                    "5": "current_position",
                    "6": "total_bytes_read",
                    "7": "current_size"
                },
                "lVar8": {
                    "1": "current_max_size",
                    "19": "buffer_size",
                    "2": "allocated_size",
                    "5": "max_size"
                },
                "param_1": {
                    "1": "file_data",
                    "10": "file_path",
                    "14": "file_info"
                },
                "pcVar3": {
                    "1": "error_description",
                    "10": "error_string",
                    "13": "error_message",
                    "3": "error_msg",
                    "4": "err_msg"
                },
                "piVar2": {
                    "1": "err_num_ptr",
                    "11": "errno_ptr",
                    "2": "error_code",
                    "5": "error_location",
                    "8": "errno_location"
                },
                "sVar6": {
                    "1": "read_bytes",
                    "21": "bytes_read",
                    "9": "read_size"
                },
                "strerror": {
                    "4": "get_error_string"
                },
                "uVar4": {
                    "1": "error_message_format",
                    "11": "error_message",
                    "2": "error_msg",
                    "4": "error_string"
                },
                "uVar5": {
                    "1": "buffer_ptr",
                    "2": "buffer_address",
                    "3": "buffer",
                    "8": "allocated_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "FUN_00104750",
                "FUN_00104390",
                "FUN_0010543c"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_file_00114d60(long file_info)\n\n{\n  int eof_indicator;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 error_message;\n  FILE *file_stream;\n  undefined8 allocated_memory;\n  size_t bytes_read;\n  long current_size;\n  long buffer_size;\n  \n  file_stream = open_file(*(char **)(file_info + 0x10),\"r\");\n  if (file_stream == (FILE *)0x0) {\n    errno_ptr = get_errno_location();\n    error_message = get_error_string(*errno_ptr);\n    allocated_memory = *(undefined8 *)(file_info + 0x10);\n    error_message = get_error_message(0,\"cannot open: %s: %s\",5);\n                    \n    handle_error(error_message,allocated_memory,error_message);\n  }\n  buffer_size = 0x1000;\n  current_size = 0;\n  allocated_memory = allocate_memory(0x1000);\n  *(undefined8 *)(file_info + 0x20) = allocated_memory;\n  while( true ) {\n    eof_indicator = feof(file_stream);\n    if (eof_indicator != 0) {\n      *(long *)(file_info + 0x18) = current_size;\n      close_file(file_stream);\n      return;\n    }\n    if (current_size == buffer_size) {\n      buffer_size = current_size * 2;\n      allocated_memory = reallocate_memory(*(undefined8 *)(file_info + 0x20),buffer_size);\n      *(undefined8 *)(file_info + 0x20) = allocated_memory;\n    }\n    bytes_read = read_bytes((void *)(*(long *)(file_info + 0x20) + current_size),1,buffer_size - current_size,file_stream);\n    eof_indicator = check_error(file_stream);\n    if (eof_indicator != 0) break;\n    current_size = current_size + bytes_read;\n  }\n  allocated_memory = *(undefined8 *)(file_info + 0x10);\n  error_message = get_error_message(0,\"%s: read_bytes failed\",5);\n                    \n  handle_error(error_message,allocated_memory);\n}\n\n",
            "current_name": "read_file_00114d60",
            "entrypoint": "0x00114d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d60": "read_file_00114d60",
                "__errno_location": "get_errno_location",
                "__stream": "file_stream",
                "dcgettext": "get_error_message",
                "fatal": "handle_error",
                "fclose": "close_file",
                "ferror": "check_error",
                "fopen": "open_file",
                "fread": "read_bytes",
                "iVar1": "eof_indicator",
                "lVar7": "current_size",
                "lVar8": "buffer_size",
                "param_1": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "sVar6": "bytes_read",
                "strerror": "get_error_string",
                "uVar4": "error_message",
                "uVar5": "allocated_memory",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114dc7": {
            "additional_data": {
                "FUN_00114dc7": {
                    "1": "read_and_process_file",
                    "15": "read_and_resize_buffer",
                    "2": "read_and_enlarge_buffer",
                    "3": "read_file"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "fatal": {
                    "1": "handle_fatal_error"
                },
                "iVar1": {
                    "1": "read_result",
                    "13": "error",
                    "2": "error_status",
                    "3": "error_check",
                    "8": "error_flag"
                },
                "param_1": {
                    "1": "buf_size"
                },
                "param_2": {
                    "1": "stream"
                },
                "sVar4": {
                    "1": "read_count",
                    "25": "bytes_read",
                    "4": "read_size"
                },
                "uVar2": {
                    "1": "err_msg_format",
                    "19": "error_message",
                    "4": "error_msg"
                },
                "uVar3": {
                    "1": "error_msg_arg",
                    "2": "error_argument",
                    "3": "category",
                    "4": "translated_error_message",
                    "5": "error_context"
                },
                "unaff_R12": {
                    "1": "start_idx",
                    "2": "read_offset",
                    "3": "start_position",
                    "5": "current_position",
                    "7": "start_offset"
                },
                "unaff_R14": {
                    "1": "buffer_limit",
                    "2": "end_pos",
                    "3": "buffer_size",
                    "7": "end_position",
                    "8": "end_offset"
                },
                "unaff_RBP": {
                    "1": "buffer_base",
                    "2": "buffer_data",
                    "4": "buffer_ptr",
                    "6": "buffer_pointer",
                    "9": "buffer"
                },
                "unaff_RBX": {
                    "1": "input_file",
                    "21": "file",
                    "4": "file_ptr",
                    "5": "file_pointer"
                }
            },
            "called": [
                "FUN_00104210",
                "FUN_001044d0",
                "FUN_00104160",
                "FUN_00119dd0",
                "FUN_00104130",
                "FUN_00104240",
                "FUN_00114dc7",
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\nvoid read_and_resize_buffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 error_context;\n  size_t bytes_read;\n  FILE *file;\n  long buffer;\n  long start_offset;\n  long end_offset;\n  \n  while( true ) {\n    bytes_read = fread((void *)(*(long *)(buffer + 0x20) + start_offset),1,end_offset - start_offset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      error_context = *(undefined8 *)(buffer + 0x10);\n      error_message = get_error_message(0,\"%s: fread failed\",5);\n                    \n      handle_fatal_error(error_message,error_context);\n    }\n    start_offset = start_offset + bytes_read;\n    error = feof(file);\n    if (error != 0) break;\n    if (start_offset == end_offset) {\n      end_offset = start_offset * 2;\n      error_context = xrealloc(*(undefined8 *)(buffer + 0x20),end_offset);\n      *(undefined8 *)(buffer + 0x20) = error_context;\n    }\n  }\n  *(long *)(buffer + 0x18) = start_offset;\n  fclose(file);\n  return;\n}\n\n",
            "current_name": "read_and_resize_buffer_00114dc7",
            "entrypoint": "0x00114dc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "dcgettext": "get_error_message",
                "fatal": "handle_fatal_error",
                "iVar1": "error",
                "sVar4": "bytes_read",
                "uVar2": "error_message",
                "uVar3": "error_context",
                "unaff_R12": "start_offset",
                "unaff_R14": "end_offset",
                "unaff_RBP": "buffer",
                "unaff_RBX": "file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e00": {
            "additional_data": {
                "\"big endian\"": {
                    "1": "text_big_endian"
                },
                "\"endianness unknown\"": {
                    "1": "text_unknown_endianness"
                },
                "\"little endian\"": {
                    "1": "text_little_endian"
                },
                "0": {
                    "1": "domain"
                },
                "5": {
                    "1": "category"
                },
                "FUN_00114e00": {
                    "1": "get_endian",
                    "12": "print_endianness",
                    "2": "get_endianness_string"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "translate_message",
                    "7": "translate"
                },
                "param_1": {
                    "19": "endianness",
                    "2": "endianness_code",
                    "3": "endianness_value",
                    "4": "endianness_type"
                }
            },
            "called": [
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nvoid get_endianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    translate(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    translate(0,\"little endian\",5);\n    return;\n  }\n  translate(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "current_name": "get_endianness_00114e00",
            "entrypoint": "0x00114e00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "dcgettext": "translate",
                "param_1": "endianness"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e50": {
            "called": [
                "FUN_001125fa",
                "FUN_001126c0",
                "FUN_00104240",
                "FUN_00107976",
                "FUN_00104500",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = recognize_input_file_format_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUNC_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') ||\n                   (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00114e50",
            "entrypoint": "0x00114e50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001152b6": {
            "called": [
                "FUN_00107880",
                "FUN_001125fa",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_input_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') ||\n                   (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_001152b6",
            "entrypoint": "0x001152b6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00115530": {
            "additional_data": {
                "**": {
                    "1": "pointer_dereference"
                },
                "DAT_001264b8": {
                    "1": "scale"
                },
                "DAT_001264bc": {
                    "1": "condition3"
                },
                "DAT_001278d8": {
                    "2": "section_data"
                },
                "DAT_001278ec": {
                    "1": "condition6"
                },
                "DAT_001278f8": {
                    "1": "section_data_temp1"
                },
                "DAT_00127900": {
                    "1": "section_data_temp2"
                },
                "DAT_00127a1c": {
                    "1": "condition7"
                },
                "DAT_00127a20": {
                    "1": "is_error"
                },
                "DAT_00127a2c": {
                    "1": "condition"
                },
                "FUN_00108072": {
                    "1": "copy_private_data"
                },
                "FUN_00115530": {
                    "1": "convert_section",
                    "18": "process_section",
                    "2": "create_output_section"
                },
                "LAB_00115771": {
                    "1": "label1"
                },
                "LAB_001158e7": {
                    "1": "label2"
                },
                "_DAT_00127990": {
                    "1": "offset"
                },
                "bVar14": {
                    "1": "bool14",
                    "2": "bool_flag",
                    "4": "flag"
                },
                "bfd_convert_section_setup": {
                    "1": "setup_section"
                },
                "bfd_make_section_anyway_with_flags": {
                    "1": "make_section"
                },
                "bfd_nonfatal_message": {
                    "1": "display_non_fatal_message"
                },
                "bfd_set_section_size": {
                    "1": "change_section_size"
                },
                "cVar4": {
                    "1": "section_check",
                    "2": "temp_var4",
                    "3": "result",
                    "8": "flag",
                    "9": "is_strip_section"
                },
                "check_new_section_flags": {
                    "2": "check_flags"
                },
                "check_strip_section_001159d0": {
                    "1": "check_if_strip_section",
                    "2": "check_strip_section"
                },
                "copy_private_data_0010808f": {
                    "3": "copy_private_data"
                },
                "dcgettext": {
                    "1": "get_translated_text"
                },
                "drop_share_flag_if_not_coff_00115f30": {
                    "1": "drop_share_flag",
                    "3": "drop_share_flag_if_not_coff"
                },
                "find_matching_pattern_00114190": {
                    "3": "find_matching_pattern"
                },
                "find_section_list": {
                    "2": "find_section"
                },
                "group_signature_isra_0": {
                    "1": "find_group_signature"
                },
                "iVar5": {
                    "1": "index",
                    "16": "comparison_result",
                    "2": "int_var"
                },
                "is_strip_section_isra_0": {
                    "2": "check_if_strip_section"
                },
                "lVar1": {
                    "1": "length1",
                    "2": "section_address",
                    "3": "section_flags",
                    "4": "temp_var1"
                },
                "lVar9": {
                    "1": "matched_pattern",
                    "2": "temp_var9",
                    "3": "matching_pattern",
                    "4": "section_info"
                },
                "local_40": {
                    "1": "temp_array",
                    "12": "size_array",
                    "2": "section_size_array",
                    "3": "section_size",
                    "4": "section_sizes"
                },
                "local_40 [2]": {
                    "1": "section_size_temp"
                },
                "local_40[0]": {
                    "1": "section_size"
                },
                "local_40[2]": {
                    "1": "temp_array"
                },
                "local_48": {
                    "1": "new_current_string",
                    "3": "section_name",
                    "5": "new_section_name"
                },
                "local_50": {
                    "1": "local_var3",
                    "16": "error_message",
                    "2": "error_msg",
                    "3": "error_code"
                },
                "param_1": {
                    "1": "first_param",
                    "10": "section_address",
                    "2": "input_address",
                    "4": "param_address",
                    "7": "address"
                },
                "param_2": {
                    "1": "sections",
                    "2": "section_data",
                    "3": "section_array",
                    "4": "section_names",
                    "6": "input_array"
                },
                "param_3": {
                    "1": "flags",
                    "2": "param3",
                    "23": "output_format"
                },
                "pcVar10": {
                    "1": "string1",
                    "2": "temp_var10",
                    "3": "new_section_name",
                    "4": "section_name"
                },
                "pcVar11": {
                    "1": "str2",
                    "2": "temp_var11"
                },
                "pcVar12": {
                    "1": "temp_var11",
                    "2": "temp_var12"
                },
                "pcVar2": {
                    "1": "second_local_var",
                    "2": "pc_var",
                    "3": "current_section_name",
                    "4": "temp_var2",
                    "6": "section_name"
                },
                "ppcVar3": {
                    "1": "third_local_var",
                    "13": "section_list",
                    "2": "pattern_array",
                    "4": "temp_var3"
                },
                "sVar7": {
                    "1": "src_length",
                    "2": "size1",
                    "3": "length_pc_var10",
                    "4": "len1",
                    "5": "length1"
                },
                "sVar8": {
                    "1": "size_var8",
                    "2": "length_local_48",
                    "4": "len2",
                    "5": "length2"
                },
                "set_alignment_00108179": {
                    "1": "set_alignment"
                },
                "setup_section_cold": {
                    "1": "setup_section2",
                    "2": "setup_section_cold"
                },
                "strcat": {
                    "1": "concatenate_strings"
                },
                "strcmp": {
                    "1": "compare_string"
                },
                "strcpy": {
                    "1": "copy_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar13": {
                    "1": "uint13",
                    "2": "uint_var2",
                    "3": "new_flags",
                    "4": "section_flags",
                    "8": "flags"
                },
                "uVar6": {
                    "1": "uint6",
                    "2": "flags",
                    "4": "updated_flags"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_001159d0",
                "FUN_001047c0",
                "FUN_00104190",
                "FUN_001040f0",
                "FUN_00108072",
                "FUN_00104100",
                "FUN_00114190",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_00104390",
                "FUN_00115f30",
                "FUN_001045f0"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid process_section_00115530(long section_address,char **input_array,long output_format)\n\n{\n  long temp_var1;\n  char *section_name;\n  char **section_list;\n  char is_strip_section;\n  int comparison_result;\n  uint updated_flags;\n  size_t length_1;\n  size_t length_2;\n  long section_info;\n  char *section_name;\n  char *section_ptr;\n  char *temp_var12;\n  uint flags;\n  bool flag;\n  long error_message;\n  char *new_section_name;\n  long size_array [2];\n  \n  is_strip_section = check_if_strip_section(input_array);\n  if (is_strip_section != '\\0') {\n    return;\n  }\n  section_name = *input_array;\n  flags = *(uint *)((long)input_array + 0x24);\n  new_section_name = section_name;\n  section_list = DAT_001278d8;\n  if (*(int *)(*(long *)(section_address + 8) + 8) != *(int *)(*(long *)(output_format + 8) + 8)) {\n    flags = flags & *(uint *)(*(long *)(section_address + 8) + 0x18) &\n             *(uint *)(*(long *)(output_format + 8) + 0x18);\n  }\n  for (; section_list != (char **)0x0; section_list = (char **)section_list[3]) {\n    comparison_result = compare_string(*section_list,section_name);\n    if (comparison_result == 0) {\n      if (*(uint *)(section_list + 2) != 0xffffffff) {\n        flags = *(uint *)(section_list + 2);\n      }\n      if (section_name != section_list[1]) {\n        new_section_name = section_list[1];\n        flags = check_flags(flags,output_format);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (section_name = DAT_001278f8, (*(byte *)((long)input_array + 0x24) & 1) != 0)) ||\n     (section_name = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    length_1 = get_string_length(section_name);\n    length_2 = get_string_length(new_section_name);\n    temp_var12 = (char *)allocate_memory(length_1 + 1 + length_2);\n    section_name = copy_string(temp_var12,section_name);\n    new_section_name = concatenate_strings(section_name,new_section_name);\n  }\n  section_info = find_section(*input_array,0,0x80);\n  flag = false;\n  if (section_info == 0) {\n    if ((DAT_00127a2c == 4) && ((flags & 0x2000001) != 0)) {\n      comparison_result = *(int *)(*(long *)(section_address + 8) + 8);\n      if (comparison_result == 5) {\n        if (*(int *)(input_array[0x1a] + 4) != 7) {\nlabel1:\n          if (*(int *)(*(long *)(output_format + 8) + 8) == 5) {\n            flag = (flags & 0x2000000) == 0;\n            updated_flags = ~((-(uint)((flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)input_array + 0x24) = *(uint *)((long)input_array + 0x24) & updated_flags;\n          }\n          else {\n            updated_flags = 0xfdfffefd;\n          }\n          flags = flags & updated_flags;\n        }\n      }\n      else if ((comparison_result != 2) || (comparison_result = compare_string(*input_array,\".buildid\"), comparison_result != 0)) goto label1;\n    }\n  }\n  else {\n    flags = check_flags(flags & 0x104 | *(uint *)(section_info + 0x28),output_format,*input_array);\n  }\n  is_strip_section = convert_section_setup(section_address,input_array,output_format,&new_section_name,size_array);\n  if (is_strip_section == '\\0') {\n    section_name = (char *)0x0;\n    error_message = error_string(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  section_name = (char *)make_section_with_flags(output_format,new_section_name,flags);\n  if (section_name == (char *)0x0) {\n    error_message = error_string(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      section_size = 0;\n      goto label2;\n    }\n    is_strip_section = change_section_size(section_name,section_size);\n    if (is_strip_section == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  else {\n    section_size = ((((long)DAT_00127a1c - 1U) + section_size) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nlabel2:\n    is_strip_section = change_section_size(section_name);\n    if (is_strip_section == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  error_message = 0;\n  temp_var12 = input_array[6];\n  section_info = find_section(*input_array,0,0x18);\n  if (section_info == 0) {\n    section_name[0x28] = section_name[0x28] | 1;\n    section_ptr = *input_array;\n    temp_var12 = temp_var12 + _DAT_00127990;\n    *(char **)(section_name + 0x30) = temp_var12;\n    *(char **)(section_name + 0x38) = temp_var12;\n    temp_var12 = input_array[7];\n    section_info = find_section(section_ptr,0,0x60);\n    if (section_info == 0) goto LAB_00115695;\nLAB_00115860:\n    section_ptr = *(char **)(section_info + 0x20);\n    if ((*(byte *)(section_info + 0x14) & 0x40) != 0) {\n      section_ptr = section_ptr + (long)temp_var12;\n    }\n    *(char **)(section_name + 0x38) = section_ptr;\n    section_info = find_section(*input_array,0,0x200);\n    if (section_info != 0) goto LAB_00115889;\nLAB_001156b8:\n    flags = *(uint *)((long)input_array + 0x7c);\n    if (flags < 0x3f) goto LAB_001156c4;\n    error_message = error_string(0,\"failed to set alignment\",5);\n    *(undefined4 *)(section_name + 0xb4) = *(undefined4 *)((long)input_array + 0xb4);\n    section_name[0x28] = section_name[0x28] & 0xcfU | *(byte *)(input_array + 5) & 0x30;\n    input_array[0xc] = section_name;\n    input_array[0xb] = (char *)0x0;\n    if ((*(byte *)((long)input_array + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    is_strip_section = (**(code **)(*(long *)(output_format + 8) + 0x158))(section_address,input_array,output_format,section_name);\n    if (is_strip_section == '\\0') {\n      copy_private_data();\n      return;\n    }\n  }\n  else {\n    section_ptr = *(char **)(section_info + 0x18);\n    if ((*(byte *)(section_info + 0x14) & 8) == 0) {\n      section_ptr = section_ptr + (long)temp_var12;\n    }\n    section_name[0x28] = section_name[0x28] | 1;\n    section_name = *input_array;\n    *(char **)(section_name + 0x30) = section_ptr;\n    *(char **)(section_name + 0x38) = section_ptr;\n    temp_var12 = input_array[7];\n    section_info = find_section(section_name,0,0x60);\n    if (section_info != 0) goto LAB_00115860;\nLAB_00115695:\n    section_ptr = *input_array;\n    *(char **)(section_name + 0x38) = temp_var12 + _DAT_00127990;\n    section_info = find_section(section_ptr,0,0x200);\n    if (section_info == 0) goto LAB_001156b8;\nLAB_00115889:\n    flags = *(uint *)(section_info + 0x2c);\n    if (0x3e < flags) {\n      set_alignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(section_name + 0x7c) = flags;\n    *(undefined4 *)(section_name + 0xb4) = *(undefined4 *)((long)input_array + 0xb4);\n    section_name[0x28] = section_name[0x28] & 0xcfU | *(byte *)(input_array + 5) & 0x30;\n    input_array[0xc] = section_name;\n    input_array[0xb] = (char *)0x0;\n    if ((*(byte *)((long)input_array + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    temp_var12 = input_array[0x1a];\n    section_info = find_group_signature(temp_var12,input_array[0x1c]);\n    if ((section_info == 0) ||\n       (temp_var1 = *(long *)(section_address + 8), *(uint *)(section_info + 0x18) = *(uint *)(section_info + 0x18) | 0x20,\n       *(int *)(temp_var1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(temp_var12 + 0xb0) = section_info;\n    is_strip_section = (**(code **)(*(long *)(output_format + 8) + 0x158))(section_address,input_array,output_format,section_name);\n    if (is_strip_section == '\\0') {\n      copy_private_data();\n      return;\n    }\n  }\n  if (flag) {\n    *(undefined4 *)(*(long *)(section_name + 0xd0) + 4) = 8;\n  }\n  if (error_message == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  display_non_fatal_message(0,output_format,section_name,error_message);\n  return;\n}\n\n",
            "current_name": "process_section_00115530",
            "entrypoint": "0x00115530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115530": "process_section_00115530",
                "LAB_00115771": "label1",
                "LAB_001158e7": "label2",
                "bVar14": "flag",
                "bfd_convert_section_setup": "convert_section_setup",
                "bfd_make_section_anyway_with_flags": "make_section_with_flags",
                "bfd_nonfatal_message": "display_non_fatal_message",
                "bfd_set_section_size": "change_section_size",
                "cVar4": "is_strip_section",
                "check_new_section_flags": "check_flags",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "error_string",
                "find_section_list": "find_section",
                "group_signature_isra_0": "find_group_signature",
                "iVar5": "comparison_result",
                "is_strip_section_isra_0": "check_if_strip_section",
                "lVar1": "temp_var1",
                "lVar9": "section_info",
                "local_40": "size_array",
                "local_40[0]": "section_size",
                "local_48": "new_section_name",
                "local_50": "error_message",
                "param_1": "section_address",
                "param_2": "input_array",
                "param_3": "output_format",
                "pcVar10": "section_name",
                "pcVar11": "section_ptr",
                "pcVar12": "temp_var12",
                "pcVar2": "section_name",
                "ppcVar3": "section_list",
                "sVar7": "length_1",
                "sVar8": "length_2",
                "set_alignment_00108179": "set_alignment",
                "strcat": "concatenate_strings",
                "strcmp": "compare_string",
                "strcpy": "copy_string",
                "strlen": "get_string_length",
                "uVar13": "flags",
                "uVar6": "updated_flags",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115970": {
            "additional_data": {
                "FUN_00115970": {
                    "1": "copy_and_set_file_attributes",
                    "3": "copy_file",
                    "4": "copy_and_remove_file",
                    "5": "copy_and_delete_file",
                    "7": "copy_and_set_times"
                },
                "__errno_location": {
                    "1": "get_error_location"
                },
                "auVar6": {
                    "1": "return_value_struct",
                    "17": "return_value",
                    "2": "return_data",
                    "5": "result"
                },
                "dcgettext": {
                    "1": "get_error_description"
                },
                "non_fatal": {
                    "1": "handle_non_fatal_error"
                },
                "param_1": {
                    "1": "src_file",
                    "16": "source_file",
                    "2": "source_filepath",
                    "3": "source_path",
                    "8": "source_file_path"
                },
                "param_2": {
                    "1": "src_path",
                    "16": "destination_file",
                    "2": "destination_filepath",
                    "3": "destination_path",
                    "7": "destination_file_path"
                },
                "param_3": {
                    "1": "flags",
                    "10": "file_permissions",
                    "16": "buffer_size"
                },
                "param_4": {
                    "1": "timestamp",
                    "17": "file_size",
                    "2": "modification_time",
                    "4": "file_timestamp"
                },
                "param_5": {
                    "1": "copy_attributes_flag",
                    "2": "set_time_flag",
                    "5": "preserve_times",
                    "7": "should_set_times",
                    "9": "set_times_flag"
                },
                "param_6": {
                    "1": "return_value_address",
                    "12": "result",
                    "2": "original_return_value",
                    "4": "error_code"
                },
                "pcVar3": {
                    "1": "error_description",
                    "19": "error_message",
                    "2": "error_msg",
                    "4": "error_string"
                },
                "piVar2": {
                    "1": "err_num_ptr",
                    "16": "errno_location",
                    "2": "errno_location_ptr"
                },
                "set_times": {
                    "1": "update_file_timestamp"
                },
                "simple_copy": {
                    "1": "copy_file"
                },
                "strerror": {
                    "1": "get_error_message"
                },
                "uVar1": {
                    "1": "copy_success",
                    "29": "copy_result"
                },
                "uVar4": {
                    "1": "error_message_text",
                    "2": "error_msg",
                    "3": "gettext_result",
                    "4": "localized_error_message"
                },
                "uVar5": {
                    "1": "copy_file_size",
                    "10": "unlink_result",
                    "2": "copy_error",
                    "3": "bytes_copied",
                    "4": "copy_size",
                    "5": "copy_bytes"
                },
                "unlink": {
                    "1": "remove_file"
                }
            },
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16]\ncopy_and_set_times_00115970(char *source_file,char *destination_file,undefined4 buffer_size,undefined8 file_size,char set_times_flag,\n            undefined8 result)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 localized_error_message;\n  ulong unlink_result;\n  undefined return_value [16];\n  \n  if (destination_file == source_file) {\n    unlink_result = 0;\n  }\n  else {\n    copy_result = copy_file(buffer_size,destination_file,file_size);\n    unlink_result = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = get_error_location();\n      error_message = get_error_message(*errno_location);\n      localized_error_message = get_error_description(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      handle_non_fatal_error(localized_error_message,destination_file,error_message);\n    }\n    remove_file(source_file);\n  }\n  if (set_times_flag != '\\0') {\n    update_file_timestamp(destination_file,file_size);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = unlink_result;\n  return return_value;\n}\n\n",
            "current_name": "copy_and_set_times_00115970",
            "entrypoint": "0x00115970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115970": "copy_and_set_times_00115970",
                "__errno_location": "get_error_location",
                "auVar6": "return_value",
                "dcgettext": "get_error_description",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "source_file",
                "param_2": "destination_file",
                "param_3": "buffer_size",
                "param_4": "file_size",
                "param_5": "set_times_flag",
                "param_6": "result",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "set_times": "update_file_timestamp",
                "simple_copy": "copy_file",
                "strerror": "get_error_message",
                "uVar1": "copy_result",
                "uVar4": "localized_error_message",
                "uVar5": "unlink_result",
                "unlink": "remove_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001159d0": {
            "additional_data": {
                "CHECK_STRIP_SECTION_ISRA_0": {
                    "1": "is_strip_section"
                },
                "DAT_001279f8": {
                    "1": "constant_3",
                    "2": "specified_symbol_2"
                },
                "DAT_00127a08": {
                    "1": "specified_symbol_2",
                    "2": "specified_symbol_1"
                },
                "DAT_00127a2c": {
                    "1": "condition"
                },
                "FUN_001159d0": {
                    "1": "check_group_signature",
                    "16": "check_strip_section"
                },
                "FUN_00115b70": {
                    "1": "find_symbol",
                    "7": "is_specified_symbol"
                },
                "FUN_00115d00": {
                    "1": "is_specified_symbol",
                    "2": "get_group_signature"
                },
                "FUN_00115d70": {
                    "1": "iterate_strip_section",
                    "2": "is_strip_section_1",
                    "3": "is_strip_section_1_isra_0"
                },
                "GROUP_SIGNATURE_ISRA_0": {
                    "1": "find_group_signature"
                },
                "cVar2": {
                    "1": "symbol_valid",
                    "2": "symbol_found",
                    "3": "is_symbol_specified",
                    "6": "symbol_check"
                },
                "group_signature_isra_0": {
                    "5": "get_group_signature",
                    "6": "find_group_signature"
                },
                "is_specified_symbol": {
                    "1": "check_if_specified_symbol",
                    "2": "check_symbol",
                    "5": "check_specified_symbol"
                },
                "is_strip_section_1_isra_0": {
                    "1": "check_if_strip_section",
                    "2": "check_strip_section",
                    "9": "is_strip_section"
                },
                "lVar4": {
                    "1": "signature1_result",
                    "14": "group_signature",
                    "2": "group_signature_result",
                    "3": "signature",
                    "4": "signature_result"
                },
                "lVar5": {
                    "1": "current_section",
                    "2": "current_group",
                    "7": "current_group_signature",
                    "9": "current_signature"
                },
                "param_1": {
                    "1": "arg",
                    "2": "section_data",
                    "3": "param",
                    "6": "input_param",
                    "8": "section_address"
                },
                "param_2": {
                    "1": "strip_param_2"
                },
                "uVar1": {
                    "1": "signature_check",
                    "2": "return_value",
                    "3": "result",
                    "7": "symbol_address",
                    "8": "symbol"
                },
                "uVar3": {
                    "1": "return_val",
                    "10": "result",
                    "2": "is_strip_section"
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_00115b70",
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "code": "\nundefined4 check_strip_section_001159d0(long section_address)\n\n{\n  undefined8 symbol;\n  char symbol_check;\n  undefined4 result;\n  long group_signature;\n  long current_signature;\n  \n  result = is_strip_section();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(section_address + 0x27) & 2) == 0) {\n      return result;\n    }\n    group_signature = find_group_signature(*(undefined8 *)(section_address + 0xd0),*(undefined8 *)(section_address + 0xe0));\n    if ((group_signature != 0) &&\n       (((symbol = *(undefined8 *)(group_signature + 8), DAT_00127a2c != 7 ||\n         (symbol_check = check_specified_symbol(symbol,DAT_00127a08), symbol_check != '\\0')) &&\n        (symbol_check = check_specified_symbol(symbol,DAT_001279f8), symbol_check == '\\0')))) {\n      group_signature = *(long *)(*(long *)(section_address + 0xd0) + 0xc0);\n      current_signature = group_signature;\n      do {\n        if (current_signature == 0) {\n          return 1;\n        }\n        symbol_check = is_strip_section(current_signature);\n        if (symbol_check == '\\0') {\n          return result;\n        }\n        current_signature = *(long *)(*(long *)(current_signature + 0xd0) + 0xc0);\n      } while (group_signature != current_signature);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_strip_section_001159d0",
            "entrypoint": "0x001159d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001159d0": "check_strip_section_001159d0",
                "cVar2": "symbol_check",
                "group_signature_isra_0": "find_group_signature",
                "is_specified_symbol": "check_specified_symbol",
                "is_strip_section_1_isra_0": "is_strip_section",
                "lVar4": "group_signature",
                "lVar5": "current_signature",
                "param_1": "section_address",
                "uVar1": "symbol",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115a90": {
            "additional_data": {
                "FUN_00115a90": {
                    "1": "binary_copy",
                    "2": "file_copy",
                    "25": "copy_file"
                },
                "_Var3": {
                    "1": "position",
                    "2": "source_file_size",
                    "3": "file_position",
                    "5": "current_position",
                    "6": "current_offset"
                },
                "__fd": {
                    "1": "target_fd",
                    "10": "destination_fd",
                    "16": "destination_file_descriptor",
                    "2": "dest_fd"
                },
                "iVar1": {
                    "1": "error_temp",
                    "12": "original_errno",
                    "2": "original_error_code",
                    "5": "error_code",
                    "6": "errno_value"
                },
                "iVar2": {
                    "1": "bytes_remaining",
                    "17": "read_result",
                    "4": "bytes_read"
                },
                "local_2038": {
                    "30": "buffer"
                },
                "param_1": {
                    "1": "source_file_fd",
                    "13": "source_fd",
                    "16": "source_file_descriptor"
                },
                "param_2": {
                    "1": "output_file",
                    "10": "destination_path",
                    "11": "destination_file_path",
                    "3": "destination_filename"
                },
                "param_3": {
                    "1": "permission_data",
                    "2": "source_stat",
                    "5": "file_stat"
                },
                "piVar6": {
                    "1": "errno_location_ptr",
                    "2": "error_code",
                    "3": "error_pointer",
                    "4": "error_location",
                    "6": "errno_ptr",
                    "9": "errno_location"
                },
                "sVar5": {
                    "1": "bytes_written_check",
                    "10": "write_result",
                    "20": "bytes_written"
                },
                "uVar4": {
                    "1": "return_val",
                    "10": "bytes_read",
                    "2": "copy_result",
                    "4": "total_bytes_copied",
                    "9": "bytes_copied"
                }
            },
            "called": [
                "FUN_00104730",
                "FUN_001043c0",
                "FUN_00108237",
                "FUN_001041c0",
                "FUN_00104410",
                "FUN_001046c0",
                "FUN_001040b0",
                "FUN_001042e0"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nulong copy_file_00115a90(int source_file_descriptor,char *destination_file_path,long file_stat)\n\n{\n  int original_errno;\n  int destination_file_descriptor;\n  int read_result;\n  __off_t seek_result;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (seek_result = lseek(source_file_descriptor,0,0), seek_result == 0)) {\n    destination_file_descriptor = open(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_read = simple_copy_cold();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read(source_file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_read;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        original_errno = *errno_location;\n        fchmod(destination_file_descriptor,*(__mode_t *)(file_stat + 0x18));\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (read_result != 0) {\n          *errno_location = original_errno;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write(destination_file_descriptor,buffer,(long)read_result);\n    } while (bytes_written == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "copy_file_00115a90",
            "entrypoint": "0x00115a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "_Var3": "seek_result",
                "__fd": "destination_file_descriptor",
                "iVar1": "original_errno",
                "iVar2": "read_result",
                "local_2038": "buffer",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "param_3": "file_stat",
                "piVar6": "errno_location",
                "sVar5": "bytes_written",
                "uVar4": "bytes_read"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115b70": {
            "additional_data": {
                "DAT_001278b8": {
                    "1": "flag1",
                    "2": "flag_1"
                },
                "DAT_00127980": {
                    "1": "flag_5"
                },
                "DAT_001279b8": {
                    "1": "update_remove_option_list"
                },
                "DAT_00127a19": {
                    "1": "flag2",
                    "2": "flag_2"
                },
                "DAT_00127a28": {
                    "1": "flag_4"
                },
                "DAT_00127a2c": {
                    "1": "flag3"
                },
                "DAT_00127a2c - 2U < 2": {
                    "1": "check_flag_condition"
                },
                "FUN_00115b70": {
                    "1": "process_section_match",
                    "2": "handle_section",
                    "3": "process_section",
                    "4": "check_section",
                    "6": "check_section_options",
                    "8": "check_section_match"
                },
                "fatal": {
                    "1": "handle_section_match_error"
                },
                "find_matching_pattern_00114190": {
                    "5": "find_matching_pattern"
                },
                "find_section_list": {
                    "1": "find_section"
                },
                "handle_section_match_error_0010827b": {
                    "5": "handle_section_match_error"
                },
                "iVar2": {
                    "1": "section_name_compare",
                    "14": "comparison_result",
                    "2": "section_comparison",
                    "5": "section_comparison_result"
                },
                "iVar3": {
                    "1": "check_result",
                    "14": "section_type",
                    "3": "section_flag"
                },
                "invert_result_001082b3": {
                    "1": "invert_result"
                },
                "is_dwo_section_constprop_0": {
                    "1": "is_dwo_section"
                },
                "lVar4": {
                    "1": "section_match_result1",
                    "2": "matching_section_1",
                    "3": "section_list1",
                    "9": "section_list_1"
                },
                "lVar5": {
                    "1": "found_section2",
                    "2": "matching_section_2",
                    "3": "section_list_1",
                    "4": "section_list2",
                    "9": "section_list_2"
                },
                "param_1": {
                    "1": "input_strings",
                    "10": "section_name",
                    "2": "file_paths",
                    "5": "section_names",
                    "8": "section_list"
                },
                "pcVar1": {
                    "1": "section_name_comparison",
                    "12": "section_name",
                    "2": "current_section_name"
                },
                "plVar7": {
                    "1": "matching_sections_list",
                    "4": "section_list",
                    "5": "section_ptr"
                },
                "process_ebp_value_0010829e": {
                    "5": "process_ebp_value"
                },
                "report_and_exit_00119dd0": {
                    "5": "report_and_exit"
                },
                "return 0": {
                    "1": "continue_execution"
                },
                "return 1": {
                    "1": "exit_with_error"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "uVar6": {
                    "25": "result",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_0010827b",
                "FUN_00119dd0",
                "FUN_00114190",
                "FUN_0010829e",
                "FUN_00104240",
                "FUN_00104470"
            ],
            "calling": [
                "FUN_001159d0"
            ],
            "code": "\nundefined8 check_section_match_00115b70(char **section_name)\n\n{\n  char *section_name;\n  int comparison_result;\n  int section_type;\n  long section_list_1;\n  long section_list_2;\n  undefined8 result;\n  long *section_ptr;\n  \n  section_list_1 = find_section(*section_name,0,4);\n  if (section_list_1 == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      section_list_1 = find_section(*section_name,0,1);\n      section_list_2 = find_section(*section_name,0,2);\n      if (section_list_1 != 0) {\n        if (section_list_2 != 0) {\n          section_name = *section_name;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          handle_section_match_error(result,section_name);\n        }\n        if (section_list_1 != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          section_name = *section_name;\n          section_ptr = DAT_001279b8;\n          do {\n            section_type = compare_strings(section_name,(char *)section_ptr[1]);\n            if (section_type == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              handle_section_match_error(result,section_name);\n            }\n            section_ptr = (long *)*section_ptr;\n          } while (section_ptr != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (section_list_2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a2c;\n    if ((*(byte *)((long)section_name + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        section_name = *section_name;\n        comparison_result = compare_strings(section_name,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = compare_strings(section_name,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_type = compare_strings(section_name,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          result = process_ebp_value();\n          return result;\n        }\n      }\n      if (section_type == 5) {\n        result = is_dwo_section(section_name);\n        return result;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      result = invert_result();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_section_match_00115b70",
            "entrypoint": "0x00115b70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115b70": "check_section_match_00115b70",
                "fatal": "handle_section_match_error",
                "find_section_list": "find_section",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "invert_result_001082b3": "invert_result",
                "is_dwo_section_constprop_0": "is_dwo_section",
                "lVar4": "section_list_1",
                "lVar5": "section_list_2",
                "param_1": "section_name",
                "pcVar1": "section_name",
                "plVar7": "section_ptr",
                "process_ebp_value_0010829e": "process_ebp_value",
                "strcmp": "compare_strings",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d00": {
            "additional_data": {
                "*(byte *)(*(long *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x340) + 5)": {
                    "1": "sub_func3_value",
                    "2": "byte_value"
                },
                "*(int *)(*(long *)(param_2 + 0x110) + 0xd40)": {
                    "1": "get_value_from_offset3",
                    "3": "value3"
                },
                "*(int *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "retrieved_value",
                    "3": "value1"
                },
                "*(int *)(param_1 + 0x28)": {
                    "1": "value1_check",
                    "3": "value2"
                },
                "*(long *)(DAT_001278b0 + (ulong)(uVar1 - 1) * 8)": {
                    "1": "extracted_result"
                },
                "*(long *)(param_2 + 0x110)": {
                    "1": "ptr2"
                },
                "*(long *)(param_2 + 8)": {
                    "1": "ptr1"
                },
                "*(uint *)(param_1 + 0x2c)": {
                    "1": "counter_value",
                    "2": "value4"
                },
                "*(ulong *)(*(long *)(param_2 + 0x110) + 0x88)": {
                    "1": "calculation_value_1",
                    "2": "divisor"
                },
                "*(ulong *)(*(long *)(param_2 + 0x110) + 0x88) / (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x340) + 5)": {
                    "1": "value5"
                },
                "DAT_001278b0": {
                    "1": "binary_data"
                },
                "FUN_001082c3": {
                    "1": "get_signature"
                },
                "FUN_00115d00": {
                    "1": "get_associated_value",
                    "10": "find_matching_value",
                    "5": "get_matching_value"
                },
                "lVar2": {
                    "1": "extracted_data",
                    "15": "result",
                    "8": "matching_value"
                },
                "param_1": {
                    "1": "input_value1",
                    "13": "input_value",
                    "3": "value1",
                    "4": "input_data",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "external_data",
                    "11": "binary_data",
                    "2": "binary_param",
                    "3": "value2",
                    "5": "data_structure"
                },
                "uVar1": {
                    "1": "division_result",
                    "2": "temp_value",
                    "3": "counter",
                    "4": "threshold"
                },
                "value_1": {
                    "1": "value_1"
                },
                "value_2": {
                    "1": "value_2"
                }
            },
            "called": [
                "FUN_001082c3"
            ],
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "code": "\nlong find_matching_value_00115d00(long input_value,long binary_data)\n\n{\n  uint count;\n  long result;\n  \n  result = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(binary_data + 8) + 8) == 5) {\n      if (*(int *)(input_value + 0x28) == *(int *)(*(long *)(binary_data + 0x110) + 0xd40)) {\n        count = *(uint *)(input_value + 0x2c);\n        if (count == 0) {\n          result = 0;\n        }\n        else if ((ulong)count <\n                 *(ulong *)(*(long *)(binary_data + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binary_data + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278b0 + (ulong)(count - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "find_matching_value_00115d00",
            "entrypoint": "0x00115d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "lVar2": "result",
                "param_1": "input_value",
                "param_2": "binary_data",
                "uVar1": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d70": {
            "additional_data": {
                "FUN_00115d70": {
                    "1": "check_symbol_predicate",
                    "2": "find_value_in_hash_table",
                    "3": "find_symbol_in_table",
                    "4": "check_symbol_presence"
                },
                "lVar1": {
                    "1": "found_value",
                    "15": "result",
                    "2": "symbol_address",
                    "5": "symbol_found"
                },
                "local_10": {
                    "1": "found_flag",
                    "2": "is_symbol_found",
                    "5": "is_found"
                },
                "local_18": {
                    "1": "traverse_param",
                    "2": "search_value",
                    "3": "symbol_found",
                    "5": "symbol_to_find"
                },
                "param_1": {
                    "1": "symbol_name",
                    "18": "symbol",
                    "2": "key",
                    "3": "input_1"
                },
                "param_2": {
                    "1": "hashtable",
                    "10": "symbol_table",
                    "3": "input_2",
                    "6": "hash_table",
                    "9": "table"
                }
            },
            "called": [
                "FUN_00104580",
                "FUN_0011a170",
                "FUN_001047d0"
            ],
            "calling": [
                "FUN_001159d0",
                "FUN_001082df",
                "FUN_0010554f"
            ],
            "code": "\nundefined find_symbol_00115d70(undefined8 symbol,undefined8 symbol_table)\n\n{\n  long result;\n  undefined8 symbol_to_find;\n  undefined is_found;\n  \n  if (DAT_001279ca == '\\0') {\n    result = htab_find(symbol_table,symbol);\n    is_found = result != 0;\n  }\n  else {\n    is_found = 0;\n    symbol_to_find = symbol;\n    htab_traverse(symbol_table,is_specified_symbol_predicate,&symbol_to_find);\n  }\n  return is_found;\n}\n\n",
            "current_name": "find_symbol_00115d70",
            "entrypoint": "0x00115d70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d70": "find_symbol_00115d70",
                "lVar1": "result",
                "local_10": "is_found",
                "local_18": "symbol_to_find",
                "param_1": "symbol",
                "param_2": "symbol_table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115dc0": {
            "additional_data": {
                "DAT_001278b0": {
                    "1": "canonicalize_flags"
                },
                "DAT_00127a08": {
                    "1": "constant3",
                    "3": "specified_symbol"
                },
                "DAT_00127a20": {
                    "1": "reloc_error",
                    "2": "constant_value2"
                },
                "DAT_00127a2c": {
                    "1": "section_type",
                    "2": "constant1"
                },
                "FUN_001082df": {
                    "1": "exit_program"
                },
                "FUN_001126c0": {
                    "1": "is_specified_symbol"
                },
                "FUN_00114190": {
                    "1": "filter_reloc_table",
                    "2": "get_specified_symbols"
                },
                "FUN_00115dc0": {
                    "1": "process_binary_section",
                    "11": "process_binary",
                    "3": "process_section",
                    "8": "process_binary_function"
                },
                "FUN_00115f50": {
                    "1": "process_section"
                },
                "FUN_0011a110": {
                    "1": "do_something"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "relocation_handler",
                    "12": "jump_table",
                    "6": "jmp_table",
                    "7": "jumptable"
                },
                "bfd_alloc": {
                    "1": "allocate_bfd_memory",
                    "2": "allocate_memory"
                },
                "bfd_canonicalize_reloc": {
                    "1": "canonicalize_reloc",
                    "2": "canonicalize_relocation"
                },
                "bfd_get_error": {
                    "1": "get_error"
                },
                "bfd_get_reloc_upper_bound": {
                    "1": "get_relocation_upper_bound",
                    "2": "get_reloc_upper_bound"
                },
                "bfd_nonfatal": {
                    "1": "nonfatal"
                },
                "bfd_nonfatal_message": {
                    "1": "display_fatal_message"
                },
                "cVar1": {
                    "1": "section_skip_status",
                    "3": "section_skip_result",
                    "7": "skip_section_result",
                    "9": "section_skipped"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "find_section_list": {
                    "1": "find_section"
                },
                "iVar2": {
                    "1": "bfd_error_code",
                    "12": "bfd_error",
                    "2": "error_status",
                    "5": "error",
                    "9": "error_code"
                },
                "is_specified_symbol": {
                    "1": "check_symbol_validity",
                    "2": "check_specified_symbol"
                },
                "lVar4": {
                    "1": "section_list_entry_address",
                    "10": "section_list_result",
                    "11": "section_list",
                    "2": "section_index"
                },
                "param_1": {
                    "1": "file_descriptor",
                    "18": "param1",
                    "3": "file_handle",
                    "5": "param_1"
                },
                "param_2": {
                    "1": "param_b",
                    "15": "param2",
                    "2": "section_list",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "param_c",
                    "17": "param3",
                    "3": "param_3"
                },
                "puVar5": {
                    "1": "reloc_buf",
                    "10": "reloc_array",
                    "3": "reloc_data",
                    "7": "reloc_table",
                    "8": "reloc_list"
                },
                "puVar7": {
                    "1": "matched_symbols",
                    "2": "reloc_list_ptr",
                    "4": "relocated_symbols",
                    "5": "filtered_reloc_array"
                },
                "puVar8": {
                    "1": "temp_reloc_data",
                    "2": "updated_symbols"
                },
                "sizeof(long)": {
                    "1": "size_of_long"
                },
                "skip_section": {
                    "1": "section_is_skipped"
                },
                "uStack_38": {
                    "1": "temp_var",
                    "2": "u_stack38",
                    "6": "stack_variable",
                    "7": "stack_var"
                },
                "uVar3": {
                    "1": "alloc_error",
                    "3": "reloc_result",
                    "8": "reloc_count",
                    "9": "reloc_upper_bound"
                },
                "uVar6": {
                    "1": "reloc_count_temp",
                    "2": "reloc_array_size",
                    "24": "reloc_count"
                },
                "uVar9": {
                    "1": "rel_entry_index",
                    "2": "filtered_reloc_count",
                    "3": "iteration_count",
                    "4": "loop_index",
                    "8": "index"
                },
                "xexit": {
                    "1": "terminate_program",
                    "2": "exit_program"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_00115f50",
                "FUN_001047b0",
                "FUN_0011a110",
                "FUN_00104250",
                "FUN_00114190",
                "FUN_001126c0",
                "FUN_001082df",
                "FUN_00104240",
                "FUN_00104760",
                "FUN_00104840"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_binary_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char section_skipped;\n  int bfd_error;\n  undefined8 reloc_upper_bound;\n  long section_list;\n  undefined8 *reloc_array;\n  ulong reloc_count;\n  code *jump_table;\n  undefined8 *filtered_reloc_array;\n  undefined8 *current_symbol;\n  ulong index;\n  undefined8 stack_var;\n  \n  section_skipped = check_section(param1,param2,0);\n  if (section_skipped != '\\0') {\n    return;\n  }\n  reloc_upper_bound = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (section_list = find_section(*param2,0,0x100), section_list == 0)) {\n    section_list = get_reloc_upper_bound(param1,param2);\n    if (section_list < 0) {\n      if ((section_list != -1) || (bfd_error = get_error(), bfd_error != 5)) {\n        DAT_00127a20 = 1;\n        reloc_upper_bound = 0;\nLAB_00108315:\n        display_fatal_message(0,param1,param2,reloc_upper_bound,stack_var);\n        return;\n      }\n    }\n    else if (section_list != 0) {\n      reloc_array = (undefined8 *)param2[0xe];\n      if (reloc_array == (undefined8 *)0x0) {\n        reloc_array = (undefined8 *)allocate_memory(param3);\n        if (reloc_array == (undefined8 *)0x0) {\n          display_nonfatal_error(0);\n                    \n          exit_program(1);\n        }\n        reloc_count = canonicalize_relocation(param1,param2,reloc_array,DAT_001278b0);\n        if ((long)reloc_count < 0) {\n          DAT_00127a20 = 1;\n          reloc_upper_bound = get_error_message(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        reloc_count = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        filtered_reloc_array = reloc_array;\n        for (index = 0; index != reloc_count; index = index + 1) {\n          current_symbol = filtered_reloc_array;\n          if (((*(long **)reloc_array[index] != (long *)0x0) &&\n              (section_list = **(long **)reloc_array[index], section_list != 0)) &&\n             (section_skipped = check_specified_symbol(*(undefined8 *)(section_list + 8),DAT_00127a08), section_skipped != '\\0'))\n          {\n            current_symbol = filtered_reloc_array + 1;\n            *filtered_reloc_array = reloc_array[index];\n          }\n          filtered_reloc_array = current_symbol;\n        }\n        *filtered_reloc_array = 0;\n        reloc_count = (long)filtered_reloc_array - (long)reloc_array >> 3;\n      }\n      jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (reloc_count == 0) {\n        reloc_count = 0;\n        reloc_array = (undefined8 *)0x0;\n      }\n      else {\n        reloc_count = reloc_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  reloc_count = 0;\n  reloc_array = (undefined8 *)0x0;\n  jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(param3,reloc_upper_bound,reloc_array,reloc_count);\n  return;\n}\n\n",
            "current_name": "process_binary_00115dc0",
            "entrypoint": "0x00115dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bfd_alloc": "allocate_memory",
                "bfd_canonicalize_reloc": "canonicalize_relocation",
                "bfd_get_error": "get_error",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "bfd_nonfatal": "display_nonfatal_error",
                "bfd_nonfatal_message": "display_fatal_message",
                "cVar1": "section_skipped",
                "dcgettext": "get_error_message",
                "find_section_list": "find_section",
                "iVar2": "bfd_error",
                "is_specified_symbol": "check_specified_symbol",
                "lVar4": "section_list",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar5": "reloc_array",
                "puVar7": "filtered_reloc_array",
                "puVar8": "current_symbol",
                "skip_section": "check_section",
                "uStack_38": "stack_var",
                "uVar3": "reloc_upper_bound",
                "uVar6": "reloc_count",
                "uVar9": "index",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f30": {
            "additional_data": {
                "0x8000000": {
                    "1": "mask_share_flag"
                },
                "FUN_00115f30": {
                    "1": "check_share_flag_and_drop",
                    "11": "drop_share_flag_if_not_coff",
                    "3": "remove_share_flag",
                    "7": "remove_share_flag_if_not_coff"
                },
                "dcgettext": {
                    "1": "get_formatted_message"
                },
                "non_fatal": {
                    "3": "handle_non_fatal_error"
                },
                "param_1": {
                    "1": "input_flag",
                    "24": "flags",
                    "3": "flag"
                },
                "param_2": {
                    "1": "input_params",
                    "12": "params",
                    "3": "args",
                    "4": "pointers"
                },
                "param_2[1]": {
                    "1": "arguments[1]"
                },
                "param_3": {
                    "1": "extra_param",
                    "2": "data",
                    "3": "param",
                    "4": "output",
                    "8": "output_format"
                },
                "uVar1": {
                    "1": "first_string_element",
                    "2": "first_param",
                    "4": "flag_value",
                    "5": "value"
                },
                "uVar2": {
                    "1": "string",
                    "2": "error_msg",
                    "3": "error_string",
                    "4": "note_message",
                    "6": "error_message",
                    "8": "message"
                }
            },
            "called": [
                "FUN_00108375"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "code": "\nuint drop_share_flag_if_not_coff_00115f30(uint flags,undefined8 *params,undefined8 output_format)\n\n{\n  undefined8 value;\n  undefined8 message;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(arguments[1] + 8) != 2)) {\n    value = *params;\n    flags = flags & 0xf7ffffff;\n    message = get_localized_text(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    handle_non_fatal_error(message,value,output_format);\n  }\n  return flags;\n}\n\n",
            "current_name": "drop_share_flag_if_not_coff_00115f30",
            "entrypoint": "0x00115f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "dcgettext": "get_localized_text",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "flags",
                "param_2": "params",
                "param_2[1]": "arguments[1]",
                "param_3": "output_format",
                "uVar1": "value",
                "uVar2": "message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f50": {
            "additional_data": {
                "(byte *)((long)param_2 + 0x27)": {
                    "1": "param_2_flag"
                },
                "*(byte *)((long)param_2 + 0x27)": {
                    "1": "section_flags"
                },
                "*(int *)(*(long *)(param_1 + 8) + 8)": {
                    "1": "section_type"
                },
                "*(int *)(param_2[0x1a] + 4)": {
                    "1": "param_2_size"
                },
                "*(long *)(param_1 + 8)": {
                    "1": "section_entry"
                },
                "*(long *)(param_1 + 8) + 8": {
                    "1": "section_type"
                },
                "*(long *)(param_2[0x1a]": {
                    "1": "param_2_offset"
                },
                ".gnu.build.attributes": {
                    "1": "gnu_build_attributes"
                },
                "CONCAT31": {
                    "1": "combine_flags"
                },
                "CONCAT31(auVar4._9_3_,param_2[0xc] == (char *)0x0)": {
                    "1": "result2"
                },
                "CONCAT71": {
                    "1": "combine_flags"
                },
                "CONCAT71(auVar4._1_7_,param_2[8] == (char *)0x0)": {
                    "1": "result1"
                },
                "DAT_001278ec": {
                    "1": "has_duplicate_section",
                    "3": "flag2"
                },
                "DAT_001279b8": {
                    "1": "duplicate_sections_list",
                    "2": "section_list"
                },
                "DAT_00127a00": {
                    "1": "is_attributes_enabled",
                    "3": "flag3"
                },
                "DAT_00127a20": {
                    "1": "is_strip_section_enabled",
                    "3": "flag1"
                },
                "FUN_00115f50": {
                    "1": "check_and_validate_parameters",
                    "2": "check_valid_section",
                    "4": "check_build_attributes",
                    "6": "check_section_and_attributes"
                },
                "__s1": {
                    "1": "arg",
                    "2": "string1",
                    "3": "section_name",
                    "4": "current_string",
                    "6": "current_section"
                },
                "auVar4": {
                    "1": "check_result",
                    "2": "comparison_result",
                    "3": "result_array"
                },
                "current_section": {
                    "1": "current_section"
                },
                "entry_count": {
                    "1": "entry_count"
                },
                "extraout_EDX": {
                    "1": "unused_value"
                },
                "is_strip": {
                    "1": "is_strip"
                },
                "is_strip_section_isra_0": {
                    "3": "check_strip_section",
                    "5": "is_strip_section"
                },
                "param_1": {
                    "1": "input_value",
                    "2": "section_address",
                    "3": "address"
                },
                "param_1 + 8": {
                    "1": "section_header"
                },
                "param_2": {
                    "1": "program_arguments",
                    "2": "section_data",
                    "4": "arguments",
                    "5": "strings",
                    "8": "section_names"
                },
                "param_2[0x1a]": {
                    "1": "param_2[26]"
                },
                "param_2[0x1a] + 4": {
                    "1": "attribute_section_type"
                },
                "param_2[0xc]": {
                    "1": "attr2"
                },
                "param_2[8]": {
                    "1": "attr1"
                },
                "param_3": {
                    "1": "arg3",
                    "15": "flag",
                    "2": "has_attributes",
                    "3": "is_strip"
                },
                "plVar3": {
                    "1": "section_list_pointer",
                    "2": "pointer_list",
                    "4": "section_list"
                },
                "section_entry": {
                    "1": "section_entry"
                },
                "section_names": {
                    "1": "section_names"
                },
                "startsWith_lto_priv_0_lto_priv_0": {
                    "1": "starts_with"
                },
                "startswith_lto_priv_0_lto_priv_0": {
                    "1": "starts_with_build_attribute"
                },
                "startwith_lto_priv_0_lto_priv_0": {
                    "1": "check_with_start"
                },
                "strcmp": {
                    "1": "string_compare",
                    "2": "compare_strings"
                },
                "strcmp_result": {
                    "1": "strcmp_result"
                },
                "strcmp_result_2": {
                    "1": "strcmp_result_2"
                },
                "strcpy": {
                    "1": "copy_strings"
                },
                "strncmp_result": {
                    "1": "strncmp_result"
                },
                "uVar1": {
                    "1": "compare_result",
                    "10": "strcmp_result",
                    "12": "comparison_result",
                    "6": "string_comparison_result"
                },
                "uVar2": {
                    "1": "extra_output",
                    "2": "comparison_result",
                    "3": "extra_data",
                    "7": "result"
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_001159d0",
                "FUN_00104470"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "code": "\nuint check_section_and_attributes_00115f50(long address,char **section_names,char flag)\n\n{\n  char *current_section;\n  uint comparison_result;\n  undefined4 result;\n  undefined4 comparison_result;\n  long *section_list;\n  undefined result_array [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  result_array = is_strip_section(section_names);\n  if (result_array[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      current_section = *section_names;\n      section_list = DAT_001279b8;\n      do {\n        comparison_result = compare_strings(current_section,(char *)section_list[1]);\n        result_array._4_4_ = 0;\n        result_array._0_4_ = comparison_result;\n        result_array._8_4_ = comparison_result;\n        if (comparison_result == 0) {\n          return 1;\n        }\n        section_list = (long *)*section_list;\n      } while (section_list != (long *)0x0);\n    }\n    result = result_array._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (result_array._8_4_ = result, result_array._0_8_ = *(long *)(address + 8),\n         *(int *)(*(long *)(address + 8) + 8) != 5)) ||\n        ((result_array._0_8_ = (ulong)param_2[26], *(int *)(param_2[26] + 4) != 7 ||\n         (result_array = check_attribute_prefix(*section_names,\"gnu_build_attributes\"),\n         result_array[0] == '\\0')))) && ((*(byte *)((long)section_names + 0x27) & 2) == 0)) {\n      return (uint)combine_flags(result_array._1_7_,attr1 == (char *)0x0) |\n             combine_flags(result_array._9_3_,attr2 == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_section_and_attributes_00115f50",
            "entrypoint": "0x00115f50",
            "imported": false,
            "improved": true,
            "renaming": {
                ".gnu.build.attributes": "gnu_build_attributes",
                "CONCAT31": "combine_flags",
                "CONCAT71": "combine_flags",
                "FUN_00115f50": "check_section_and_attributes_00115f50",
                "__s1": "current_section",
                "auVar4": "result_array",
                "extraout_EDX": "comparison_result",
                "is_strip_section_isra_0": "is_strip_section",
                "param_1": "address",
                "param_2": "section_names",
                "param_2[0x1a]": "param_2[26]",
                "param_2[0xc]": "attr2",
                "param_2[8]": "attr1",
                "param_3": "flag",
                "plVar3": "section_list",
                "startswith_lto_priv_0_lto_priv_0": "check_attribute_prefix",
                "strcmp": "compare_strings",
                "uVar1": "comparison_result",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116030": {
            "additional_data": {
                "FUN_00116030": {
                    "1": "process_binary",
                    "11": "process_relocation",
                    "2": "process_reloc_table",
                    "3": "process_reloc_data",
                    "4": "process_reloc"
                },
                "FUN_0011a110": {
                    "1": "sub_function2"
                },
                "_DAT_00128568": {
                    "1": "_dat_00128568"
                },
                "_DAT_00128680": {
                    "1": "fwrite_address"
                },
                "__ptr": {
                    "1": "reloc_entry_buffer",
                    "11": "reloc_buffer",
                    "2": "reloc_data_ptr",
                    "3": "reloc_data",
                    "6": "reloc_array"
                },
                "_fwrite": {
                    "1": "write_function"
                },
                "bfd_canonicalize_reloc": {
                    "1": "canonicalize_reloc"
                },
                "bfd_get_error": {
                    "1": "get_error"
                },
                "bfd_get_reloc_upper_bound": {
                    "1": "get_reloc_upper_bound"
                },
                "bfd_nonfatal": {
                    "1": "handle_fatal_error"
                },
                "extraout_RAX": {
                    "1": "return_val",
                    "2": "exit_code",
                    "3": "return_value_2",
                    "4": "return_value"
                },
                "free": {
                    "1": "free_memory"
                },
                "fun_001083b7": {
                    "1": "sub_function1"
                },
                "iVar5": {
                    "1": "bfd_error_code",
                    "21": "error_code",
                    "3": "error",
                    "6": "bfd_error"
                },
                "in_RAX": {
                    "1": "return_val",
                    "11": "result",
                    "17": "return_value"
                },
                "lVar1": {
                    "1": "upper_bound"
                },
                "lVar2": {
                    "1": "pointer_value",
                    "2": "value",
                    "3": "reloc_address",
                    "4": "reloc_entry_value",
                    "9": "reloc_value"
                },
                "lVar3": {
                    "1": "dat_00128568",
                    "2": "address1",
                    "4": "l_var3"
                },
                "lVar4": {
                    "1": "second_special_value",
                    "2": "address2",
                    "4": "l_var4"
                },
                "lVar6": {
                    "1": "reloc_write_func",
                    "2": "fwrite_value",
                    "3": "fwrite_address",
                    "4": "fwrite",
                    "5": "fwrite_func"
                },
                "lVar7": {
                    "1": "num_entries",
                    "11": "num_relocs",
                    "13": "reloc_count",
                    "2": "canonicalize_result"
                },
                "lVar8": {
                    "1": "loop_variable",
                    "11": "reloc_index",
                    "3": "loop_index",
                    "4": "index",
                    "7": "i"
                },
                "param_1": {
                    "1": "header",
                    "2": "param",
                    "3": "bfd_file",
                    "5": "bfd_handle"
                },
                "param_2": {
                    "1": "reloc_section_address",
                    "2": "reloc_section_offset",
                    "3": "param_2"
                },
                "plVar1": {
                    "1": "current_symbol_value",
                    "10": "reloc_entry",
                    "2": "reloc_entry_ptr",
                    "8": "reloc_ptr"
                },
                "uStack_28": {
                    "1": "zero_result",
                    "2": "fallback_value",
                    "3": "return_value_3"
                },
                "xexit": {
                    "1": "exit_with_status"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047b0",
                "FUN_001048f0",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_00128450",
                "FUN_00104760",
                "FUN_00104840",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *bfd_handle,long param_2)\n\n{\n  long *reloc_entry;\n  long reloc_value;\n  long l_var3;\n  long l_var4;\n  int error_code;\n  undefined8 return_value;\n  long fwrite_func;\n  void *reloc_buffer;\n  long reloc_count;\n  undefined8 return_value;\n  long reloc_index;\n  undefined8 stack_variable;\n  \n  if (*(long *)(param_2 + 0x60) == 0) {\n    return return_value;\n  }\n  fwrite_func = get_reloc_upper_bound();\n  if (fwrite_func < 0) {\n    if ((fwrite_func != -1) || (error_code = get_error(), error_code != 5)) {\n      handle_fatal_error(*bfd_handle);\n                    \n      exit_with_status(1);\n    }\n  }\n  else if (fwrite_func != 0) {\n    reloc_buffer = (void *)allocate_memory();\n    reloc_count = canonicalize_reloc(bfd_handle,param_2,reloc_buffer);\n    l_var4 = _DAT_00128680;\n    l_var3 = _DAT_00128568;\n    fwrite_func = write_function;\n    if (reloc_count < 0) {\n      handle_fatal_error(*bfd_handle);\n                    \n      exit_with_status(1);\n    }\n    if (reloc_count != 0) {\n      reloc_index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + reloc_index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_value = *reloc_entry, reloc_value != 0)) && (reloc_value != fwrite_func)) &&\n           ((reloc_value != l_var4 && (reloc_value != l_var3)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        reloc_index = reloc_index + 1;\n      } while (reloc_count != reloc_index);\n    }\n    free_memory(reloc_buffer);\n    return return_value;\n  }\n  return stack_variable;\n}\n\n",
            "current_name": "process_relocation_00116030",
            "entrypoint": "0x00116030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "__ptr": "reloc_buffer",
                "_fwrite": "write_function",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_error": "get_error",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "bfd_nonfatal": "handle_fatal_error",
                "extraout_RAX": "return_value",
                "free": "free_memory",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar1": "upper_bound",
                "lVar2": "reloc_value",
                "lVar3": "l_var3",
                "lVar4": "l_var4",
                "lVar6": "fwrite_func",
                "lVar7": "reloc_count",
                "lVar8": "reloc_index",
                "param_1": "bfd_handle",
                "plVar1": "reloc_entry",
                "uStack_28": "stack_variable",
                "xexit": "exit_with_status",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116110": {
            "additional_data": {
                "FUN_00116110": {
                    "1": "improve_binary_section",
                    "2": "reverse_section",
                    "5": "process_section",
                    "9": "reverse_section_contents"
                },
                "__ptr": {
                    "1": "new_section_contents",
                    "2": "section_data",
                    "3": "buffer_ptr",
                    "4": "allocated_memory",
                    "8": "buffer"
                },
                "bVar20": {
                    "1": "temp_byte",
                    "12": "flag",
                    "2": "byte_flag",
                    "3": "temp_byte2"
                },
                "bfd_convert_section_contents": {
                    "1": "convert_section_contents"
                },
                "bfd_get_full_section_contents": {
                    "1": "get_full_section_contents"
                },
                "bfd_nonfatal_message": {
                    "1": "print_non_fatal_message"
                },
                "bfd_set_section_contents": {
                    "1": "set_section_contents"
                },
                "bfd_set_section_size": {
                    "1": "set_section_size"
                },
                "byte bVar20": {
                    "1": "temp20"
                },
                "cVar6": {
                    "1": "temp_char1",
                    "2": "temp_char",
                    "4": "flag",
                    "5": "status",
                    "9": "result"
                },
                "char cVar6": {
                    "1": "temp6"
                },
                "dcgettext": {
                    "1": "localize_text"
                },
                "fatal": {
                    "1": "print_fatal_error_message"
                },
                "find_matching_pattern_00114190": {
                    "1": "find_matching_pattern"
                },
                "find_section_list": {
                    "1": "find_section_list"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "free_memory_and_set_message_00108466": {
                    "1": "free_memory_and_set_error_message"
                },
                "iVar10": {
                    "1": "loop_counter4",
                    "2": "length",
                    "3": "divisor"
                },
                "iVar4": {
                    "1": "counter1",
                    "2": "temp_var4",
                    "3": "temp3",
                    "4": "temp_int1"
                },
                "iVar5": {
                    "1": "temp_i_var5",
                    "2": "loop_counter2",
                    "3": "temp5",
                    "4": "temp_int2"
                },
                "int iVar10": {
                    "1": "temp10"
                },
                "int iVar4": {
                    "1": "temp4"
                },
                "int iVar5": {
                    "1": "temp5"
                },
                "lVar13": {
                    "1": "section_index",
                    "2": "section_list_offset",
                    "3": "section_list_address"
                },
                "lVar3": {
                    "1": "length",
                    "2": "section_offset",
                    "3": "section_size",
                    "4": "section_index",
                    "7": "section_address"
                },
                "lVar8": {
                    "1": "temp_var6",
                    "2": "temp8",
                    "3": "loop_index1"
                },
                "local_30": {
                    "1": "data",
                    "10": "section_contents",
                    "5": "section_data",
                    "9": "section_content"
                },
                "local_38": {
                    "1": "size",
                    "22": "section_size",
                    "4": "section_length"
                },
                "long lVar13": {
                    "1": "temp13"
                },
                "long lVar3": {
                    "1": "temp3"
                },
                "long lVar8": {
                    "1": "temp8"
                },
                "param_1": {
                    "1": "binary",
                    "2": "binary_file",
                    "4": "param1",
                    "5": "input_file"
                },
                "param_2": {
                    "1": "header_data",
                    "2": "section_data",
                    "4": "param2",
                    "6": "section_header"
                },
                "param_3": {
                    "1": "output_handle",
                    "3": "output_binary",
                    "4": "param3",
                    "5": "output_bfd",
                    "6": "output_file"
                },
                "print_error_message_001126c0": {
                    "1": "print_error_message"
                },
                "puVar12": {
                    "1": "temp_pu_var12",
                    "2": "ptr_var",
                    "3": "ptr",
                    "4": "temp_pointer",
                    "7": "temp_ptr"
                },
                "puVar14": {
                    "1": "new_section_contents_ptr",
                    "2": "ptr_1",
                    "3": "buffer_ptr",
                    "4": "ptr2"
                },
                "puVar15": {
                    "1": "loop_ptr",
                    "2": "ptr2",
                    "3": "temp_ptr3",
                    "4": "ptr3"
                },
                "pvVar16": {
                    "1": "ptr_temp_var4",
                    "2": "temp_ptr4",
                    "3": "ptr4"
                },
                "reverse_bytes_001083de": {
                    "1": "reverse_bytes"
                },
                "skip_section": {
                    "1": "check_and_skip_section"
                },
                "uVar1": {
                    "1": "byte_var",
                    "11": "temp_byte",
                    "2": "temp",
                    "9": "temp1"
                },
                "uVar11": {
                    "1": "temp_var6",
                    "2": "counter"
                },
                "uVar17": {
                    "1": "loop_var4",
                    "2": "temp_var17"
                },
                "uVar18": {
                    "1": "temp13",
                    "2": "temp_ulong2"
                },
                "uVar19": {
                    "1": "loop_var",
                    "2": "temp19",
                    "3": "temp_ulong3"
                },
                "uVar2": {
                    "1": "temp_byte2",
                    "2": "temp_2",
                    "4": "temp_var2",
                    "9": "temp2"
                },
                "uVar7": {
                    "1": "temp5",
                    "2": "temp_var7",
                    "4": "error_msg",
                    "8": "error_message"
                },
                "uVar9": {
                    "1": "loop_index",
                    "2": "temp_var9",
                    "3": "loop_index2"
                },
                "ulong local_38": {
                    "1": "section_length"
                },
                "ulong uVar11": {
                    "1": "temp11"
                },
                "ulong uVar17": {
                    "1": "temp17"
                },
                "ulong uVar18": {
                    "1": "temp18"
                },
                "ulong uVar19": {
                    "1": "temp19"
                },
                "ulong uVar9": {
                    "1": "temp9"
                },
                "undefined *puVar12": {
                    "1": "temp_ptr2"
                },
                "undefined uVar1": {
                    "1": "temp1"
                },
                "undefined8 *__ptr": {
                    "1": "temp_ptr"
                },
                "undefined8 *param_2": {
                    "1": "param2"
                },
                "undefined8 *puVar14": {
                    "1": "temp_ptr3"
                },
                "undefined8 *puVar15": {
                    "1": "temp_ptr4"
                },
                "undefined8 param_1": {
                    "1": "param1"
                },
                "undefined8 param_3": {
                    "1": "param3"
                },
                "undefined8 uVar2": {
                    "1": "temp2"
                },
                "undefined8 uVar7": {
                    "1": "temp7"
                },
                "void *local_30": {
                    "1": "section_contents"
                },
                "void *pvVar16": {
                    "1": "temp_ptr5"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104440",
                "FUN_00115f50",
                "FUN_001048f0",
                "FUN_00104330",
                "FUN_00108466",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_001042f0",
                "FUN_001083de",
                "FUN_00104390",
                "FUN_001045f0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid reverse_section_contents_00116110(undefined8 input_file,undefined8 *section_info,undefined8 output_section)\n\n{\n  undefined temp_byte;\n  undefined8 temp2;\n  long section_address;\n  int temp_int1;\n  int temp_int2;\n  char result;\n  undefined8 error_message;\n  undefined8 *buffer;\n  long loop_index1;\n  ulong loop_index2;\n  int divisor;\n  ulong temp_var11;\n  undefined *temp_ptr;\n  long remaining_bytes;\n  undefined8 *ptr2;\n  undefined8 *ptr3;\n  void *ptr4;\n  ulong temp_var17;\n  ulong temp_var18;\n  ulong temp_ulong3;\n  byte flag;\n  ulong section_size;\n  void *section_contents;\n  \n  flag = 0;\n  result = check_and_skip_section(input_file,section_info,1);\n  if (result != '\\0') {\n    return;\n  }\n  section_size = section_info[8];\n  section_address = section_info[0xc];\n  if (((*(byte *)((long)section_info + 0x25) & 1) == 0) || ((*(byte *)(section_address + 0x25) & 1) == 0)) {\n    remaining_bytes = find_section_list(*section_info,0,0x80);\n    if (remaining_bytes == 0) {\n      return;\n    }\n    if ((*(byte *)(remaining_bytes + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)allocate_memory(section_size);\n    ptr3 = buffer;\n    if (7 < section_size) {\n      for (temp_var18 = section_size >> 3; temp_var18 != 0; temp_var18 = temp_var18 - 1) {\n        *ptr3 = 0;\n        ptr3 = ptr3 + (ulong)flag * -2 + 1;\n      }\n    }\n    ptr2 = ptr3;\n    if ((section_size & 4) != 0) {\n      ptr2 = (undefined8 *)((long)ptr3 + (ulong)flag * -8 + 4);\n      *(undefined4 *)ptr3 = 0;\n    }\n    ptr3 = ptr2;\n    if ((section_size & 2) != 0) {\n      ptr3 = (undefined8 *)((long)ptr2 + (ulong)flag * -4 + 2);\n      *(undefined2 *)ptr2 = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)ptr3 = 0;\n    }\n    result = set_section_contents(output_section,section_address,buffer,0);\n    if (result != '\\0') {\n      deallocate_memory(buffer);\n      return;\n    }\n    DAT_00127a20 = 1;\n    print_non_fatal_message(0,output_section,section_address,0);\n    deallocate_memory(buffer);\n    return;\n  }\n  section_contents = (void *)0x0;\n  result = get_full_section_contents(input_file,section_info,&section_contents);\n  if ((result == '\\0') ||\n     (result = convert_section_contents(input_file,section_info,output_section,&section_contents,&section_size),\n     divisor = DAT_001278e8, result == '\\0')) {\n    set_section_size(section_address,0);\n    DAT_00127a20 = 1;\n    print_non_fatal_message(0,input_file,section_info,0);\n    deallocate_memory(section_contents);\n    return;\n  }\n  temp_int1 = DAT_001264b8;\n  temp_int2 = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    temp_var18 = (ulong)DAT_001278e8;\n    if (section_size % temp_var18 != 0) {\n      temp2 = *section_info;\n      error_message = localize_text(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_fatal_error_message(error_message,temp2,divisor);\n    }\n    divisor = DAT_001278e8 / 2;\n    temp_var11 = 0;\n    while (temp_ulong3 = temp_var11, temp_int1 = DAT_001264b8, temp_int2 = DAT_001264bc, temp_ulong3 < section_size) {\n      temp_var11 = temp_var18 + temp_ulong3;\n      temp_var17 = temp_var11;\n      for (loop_index2 = 0; loop_index2 < (ulong)(long)divisor; loop_index2 = loop_index2 + 1) {\n        temp_var17 = temp_var17 - 1;\n        temp_ptr = (undefined *)(temp_ulong3 + loop_index2 + (long)section_contents);\n        temp_byte = *temp_ptr;\n        *temp_ptr = *(undefined *)((long)section_contents + temp_var17);\n        *(undefined *)((long)section_contents + temp_var17) = temp_byte;\n      }\n    }\n  }\n  DAT_001264b8 = temp_int1;\n  DAT_001264bc = temp_int2;\n  if (-1 < temp_int2) {\n    temp_var18 = (ulong)DAT_00127a1c;\n    divisor = (int)((ulong)section_info[7] % temp_var18);\n    temp_var11 = ((long)temp_int2 - (long)divisor) + (long)section_contents;\n    if (temp_int2 < divisor) {\n      temp_var11 = temp_var11 + temp_var18;\n    }\n    remaining_bytes = (section_size + (long)section_contents) - temp_var11;\n    ptr4 = section_contents;\n    for (; temp_var11 < section_size + (long)section_contents; temp_var11 = temp_var11 + temp_var18) {\n      for (loop_index1 = 0; ((int)loop_index1 < temp_int1 && (loop_index1 != remaining_bytes)); loop_index1 = loop_index1 + 1) {\n        *(undefined *)((long)ptr4 + loop_index1) = *(undefined *)(temp_var11 + loop_index1);\n      }\n      ptr4 = (void *)((long)ptr4 + loop_index1);\n      remaining_bytes = remaining_bytes - temp_var18;\n    }\n    section_size = ((((temp_var18 - 1) + section_size) - (long)temp_int2) / temp_var18) * (long)temp_int1;\n    temp_var18 = *(ulong *)(section_address + 0x38) / temp_var18;\n    *(ulong *)(section_address + 0x38) = temp_var18;\n    if (temp_int2 < divisor) {\n      *(ulong *)(section_address + 0x38) = temp_var18 + 1;\n      result = set_section_contents(output_section,section_address,section_contents,0,section_size);\n      if (result == '\\0') {\n        free_memory_and_set_error_message();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = set_section_contents(output_section,section_address,section_contents,0,section_size);\n  if (result == '\\0') {\n    free_memory_and_set_error_message();\n    return;\n  }\nLAB_001161d8:\n  deallocate_memory(section_contents);\n  return;\n}\n\n",
            "current_name": "reverse_section_contents_00116110",
            "entrypoint": "0x00116110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116110": "reverse_section_contents_00116110",
                "__ptr": "buffer",
                "bVar20": "flag",
                "bfd_convert_section_contents": "convert_section_contents",
                "bfd_get_full_section_contents": "get_full_section_contents",
                "bfd_nonfatal_message": "print_non_fatal_message",
                "bfd_set_section_contents": "set_section_contents",
                "bfd_set_section_size": "set_section_size",
                "cVar6": "result",
                "dcgettext": "localize_text",
                "fatal": "print_fatal_error_message",
                "free": "deallocate_memory",
                "free_memory_and_set_message_00108466": "free_memory_and_set_error_message",
                "iVar10": "divisor",
                "iVar4": "temp_int1",
                "iVar5": "temp_int2",
                "lVar13": "remaining_bytes",
                "lVar3": "section_address",
                "lVar8": "loop_index1",
                "local_30": "section_contents",
                "local_38": "section_size",
                "param_1": "input_file",
                "param_2": "section_info",
                "param_3": "output_section",
                "puVar12": "temp_ptr",
                "puVar14": "ptr2",
                "puVar15": "ptr3",
                "pvVar16": "ptr4",
                "skip_section": "check_and_skip_section",
                "uVar1": "temp_byte",
                "uVar11": "temp_var11",
                "uVar17": "temp_var17",
                "uVar18": "temp_var18",
                "uVar19": "temp_ulong3",
                "uVar2": "temp2",
                "uVar7": "error_message",
                "uVar9": "loop_index2",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001163d0": {
            "additional_data": {
                "<param_1>": {
                    "1": "<input_1>"
                },
                "<param_2>": {
                    "1": "<input_2>"
                },
                "<param_3>": {
                    "1": "<input_size>"
                },
                "<param_4>": {
                    "1": "<output>"
                },
                "FUN_001163d0": {
                    "1": "extract_and_process_build_attribute_notes",
                    "17": "extract_build_attribute_notes",
                    "2": "extract_gnu_build_attribute_notes",
                    "4": "extract_and_merge_build_attribute_notes"
                },
                "__nmemb": {
                    "1": "var13",
                    "2": "note_count",
                    "4": "size",
                    "5": "num_notes"
                },
                "__ptr": {
                    "1": "ptr_var",
                    "2": "ptr_1",
                    "3": "ptr",
                    "4": "temp_buffer",
                    "5": "buffer"
                },
                "__ptr_00": {
                    "1": "temp_buffer",
                    "2": "buffer2"
                },
                "bVar26": {
                    "1": "bool_flag",
                    "2": "bool_var",
                    "3": "alignment",
                    "4": "byte_var"
                },
                "bVar4": {
                    "1": "is_corrupt",
                    "11": "condition",
                    "3": "is_valid",
                    "6": "flag"
                },
                "bVar5": {
                    "1": "unreachable_block_removed"
                },
                "cVar19": {
                    "1": "note_name_indicator",
                    "3": "char1",
                    "4": "temp_char",
                    "7": "char_var"
                },
                "compare_gnu_build_notes": {
                    "1": "compare_notes"
                },
                "extract_and_merge_build_attribute_notes": {
                    "1": "new_function"
                },
                "extract_build_notes_00116852": {
                    "1": "extract_build_notes"
                },
                "iVar21": {
                    "1": "counter_2",
                    "2": "counter",
                    "3": "var21",
                    "6": "loop_counter"
                },
                "iVar28": {
                    "1": "note_loop_count"
                },
                "iVar6": {
                    "1": "compare_result",
                    "2": "temp_var",
                    "3": "counter",
                    "4": "comparison_result"
                },
                "iVar7": {
                    "1": "ptr_val"
                },
                "lVar10": {
                    "1": "canonicalize_result"
                },
                "lVar8": {
                    "1": "message_ptr",
                    "11": "length",
                    "2": "len"
                },
                "lVar9": {
                    "1": "reloc_upper_bound"
                },
                "local_60": {
                    "1": "note_entries",
                    "2": "build_attribute_notes",
                    "3": "local_ptr"
                },
                "local_68": {
                    "1": "result1",
                    "2": "result_size",
                    "5": "local_var4"
                },
                "local_70": {
                    "1": "local_var_3",
                    "2": "value3",
                    "5": "local_var3"
                },
                "local_88": {
                    "1": "local_large_alignment_note",
                    "2": "value1",
                    "6": "local_var1"
                },
                "param_1": {
                    "1": "section_name",
                    "10": "input1",
                    "3": "input_1",
                    "4": "input_param_1"
                },
                "param_2": {
                    "1": "output_file",
                    "10": "input2",
                    "3": "input_2",
                    "4": "input_param_2"
                },
                "param_3": {
                    "1": "param3",
                    "2": "section_size",
                    "3": "param_3",
                    "4": "input_param_3",
                    "7": "input3",
                    "9": "size"
                },
                "param_4": {
                    "1": "data",
                    "2": "output_data",
                    "4": "input_param_4",
                    "5": "output",
                    "6": "output_buffer",
                    "7": "input4"
                },
                "puVar16": {
                    "1": "note_ptr"
                },
                "puVar17": {
                    "1": "temp_array_ptr",
                    "2": "ptr3",
                    "3": "ptr2",
                    "6": "note_ptr"
                },
                "puVar18": {
                    "1": "note_data_ptr",
                    "2": "ptr2",
                    "3": "ptr3"
                },
                "puVar19": {
                    "1": "ptr_less_0xc_minus_8"
                },
                "puVar20": {
                    "1": "ptr2",
                    "2": "ptr3",
                    "3": "ptr20"
                },
                "puVar22": {
                    "1": "temp_var_22",
                    "2": "ptr2",
                    "3": "ptr22"
                },
                "puVar23": {
                    "1": "pointer_var_6",
                    "2": "ptr3",
                    "3": "ptr6"
                },
                "puVar25": {
                    "1": "ptr_var25",
                    "2": "ptr4",
                    "3": "ptr25"
                },
                "puVar26": {
                    "1": "next_note_ptr"
                },
                "puVar29": {
                    "1": "compare_func_ptr"
                },
                "puVar5": {
                    "1": "prev_entry",
                    "2": "ptr5",
                    "5": "ptr1",
                    "6": "temp_ptr",
                    "8": "ptr"
                },
                "puVar6": {
                    "1": "ptr"
                },
                "sort_gnu_build_notes": {
                    "1": "sort_notes"
                },
                "uStack_80": {
                    "1": "val6",
                    "2": "value2",
                    "5": "local_var2"
                },
                "uVar1": {
                    "1": "val1",
                    "25": "result",
                    "3": "temp1"
                },
                "uVar10": {
                    "1": "var_10",
                    "2": "temp_value2",
                    "3": "temp2",
                    "5": "var10"
                },
                "uVar11": {
                    "1": "var_11",
                    "2": "note_type",
                    "3": "temp3",
                    "5": "var11"
                },
                "uVar12": {
                    "1": "temp3",
                    "2": "temp_value4",
                    "3": "temp4",
                    "5": "var12"
                },
                "uVar13": {
                    "1": "alignment",
                    "2": "temp9",
                    "5": "var13"
                },
                "uVar14": {
                    "1": "temp_ulong_6",
                    "2": "var9",
                    "5": "var14"
                },
                "uVar15": {
                    "1": "size1",
                    "2": "var10",
                    "5": "var15"
                },
                "uVar16": {
                    "1": "temp_var",
                    "2": "temp7",
                    "5": "var16"
                },
                "uVar17": {
                    "1": "version_note_missing"
                },
                "uVar2": {
                    "1": "ptr_1",
                    "3": "temp2",
                    "4": "var2",
                    "8": "var1"
                },
                "uVar20": {
                    "1": "note_name"
                },
                "uVar21": {
                    "1": "note_desc"
                },
                "uVar22": {
                    "1": "extract_build_attr_notes_result"
                },
                "uVar23": {
                    "1": "extract_build_notes_result"
                },
                "uVar24": {
                    "1": "size1",
                    "2": "temp13",
                    "5": "var24"
                },
                "uVar25": {
                    "1": "sect_empty_size"
                },
                "uVar27": {
                    "1": "note_offset_correction"
                },
                "uVar3": {
                    "1": "param_2_copy",
                    "3": "temp3",
                    "4": "var3",
                    "8": "var2"
                },
                "uVar30": {
                    "1": "l_val"
                },
                "uVar31": {
                    "1": "memcmp_result"
                },
                "uVar32": {
                    "1": "sort_gnu_build_notes_result"
                },
                "uVar4": {
                    "1": "flag"
                },
                "uVar7": {
                    "1": "result_var_4",
                    "3": "temp4",
                    "4": "error_msg",
                    "5": "var7",
                    "7": "error_message"
                },
                "uVar8": {
                    "1": "ptr_u_val1"
                },
                "uVar9": {
                    "1": "length1",
                    "2": "temp_value1",
                    "3": "temp1",
                    "5": "var9"
                }
            },
            "called": [
                "FUN_001047b0",
                "FUN_001048f0",
                "FUN_00104918",
                "FUN_00104240",
                "FUN_00119ed0",
                "FUN_00104390",
                "FUN_00104840"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong extract_build_attribute_notes_001163d0(undefined8 *input1,undefined8 *input2,ulong size,undefined *input4)\n\n{\n  ulong result;\n  undefined8 var1;\n  undefined8 var2;\n  bool condition;\n  ulong *ptr;\n  int comparison_result;\n  undefined8 error_message;\n  long length;\n  void *reloc_buffer;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *buffer2;\n  ulong var13;\n  ulong var14;\n  ulong var15;\n  ulong remaining_size;\n  ulong *note_ptr;\n  undefined *ptr3;\n  char char_var;\n  undefined *ptr4;\n  int loop_counter;\n  undefined *ptr5;\n  ulong *ptr6;\n  ulong var24;\n  size_t num_notes;\n  ulong *ptr7;\n  byte byte_var;\n  ulong local_var1;\n  ulong local_var2;\n  ulong local_var3;\n  ulong local_var4;\n  ulong *notes_array;\n  \n  byte_var = 0;\n  length = bfd_get_reloc_upper_bound();\n  local_var4 = size;\n  if (0 < length) {\n    reloc_buffer = (void *)xmalloc(length);\n    length = bfd_canonicalize_reloc(input1,input2,reloc_buffer,DAT_001278b0);\n    free(reloc_buffer);\n    if (length != 0) {\n      if (_DAT_00127a24 == 0) {\n        var1 = *input1;\n        var2 = *input2;\n        error_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        non_fatal(error_message,var1,var2);\n      }\n      notes_array = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  notes_array = (ulong *)xcalloc(size / 0xc,0x48,size % 0xc);\n  local_var1 = 0;\n  local_var3 = 0;\n  remaining_size = size;\n  var15 = 0;\n  ptr6 = notes_array;\n  var14 = 0;\n  ptr5 = input4;\n  while (0xb < remaining_size) {\n    var10 = (**(code **)(input1[1] + 0x40))(ptr5);\n    *ptr6 = var10;\n    var10 = (**(code **)(input1[1] + 0x40))(ptr5 + 4);\n    ptr6[1] = var10;\n    var11 = (**(code **)(input1[1] + 0x40))(ptr5 + 8);\n    var10 = *ptr6;\n    ptr6[2] = var11;\n    var12 = ptr6[1];\n    var13 = var10 + 3 & 0xfffffffffffffffc;\n    ptr6[6] = var13;\n    if (var12 != (var12 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var11 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var13 + var12 + 0xc;\n    if (remaining_size < result) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var10 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr6[3] = (ulong)(ptr5 + 0xc);\n    ptr6[4] = (ulong)(ptr5 + var13 + 0xc);\n    remaining_size = remaining_size + (-0xc - (var13 + var12));\n    if (var10 != 2) {\n      if (ptr5[0xc] == '$') {\n        if ((ptr5[0xd] == '\\x01') && (ptr5[0xe] == '1')) {\n          remaining_size = extract_build_attribute_notes_001163d0_00116490();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < var10) && (ptr5[0xc] == 'G')) && (ptr5[0xd] == 'A')) &&\n              ((ptr5[0xe] == '$' && (ptr5[0xf] == '\\x01')))) {\n        if (ptr5[0x10] == '2') {\n          remaining_size = extract_build_attribute_notes_001163d0_00116490();\n          return remaining_size;\n        }\n        if (ptr5[0x10] == '3') {\n          remaining_size = extract_build_attribute_notes_001163d0_00116490();\n          return remaining_size;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var9 = var15;\n    var24 = var14;\n    if (var12 == 0) {\n      if (var11 == 0x100) {\n        ptr6[7] = local_var1;\nLAB_001164af:\n        var12 = var14;\n        var24 = var14;\n      }\n      else {\n        ptr6[7] = local_var3;\nLAB_0011669e:\n        var9 = var15;\n        var12 = var15;\n      }\n    }\n    else {\n      if (var12 != 0x10) {\n        if (var12 < 0x11) {\n          if (var12 == 4) {\n            var11 = (**(code **)(input1[1] + 0x40))();\n            var12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var12 == 8) {\n            remaining_size = extract_build_notes_001086af();\n            return remaining_size;\n          }\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var11 = (**(code **)(input1[1] + 0x28))(ptr5 + var13 + 0xc);\n      var12 = (**(code **)(input1[1] + 0x28))();\n      if (var12 < var11) {\n        var11 = var12;\n      }\nLAB_00116631:\n      if (ptr6[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = local_var1;\n        }\n        var10 = *ptr6;\n        ptr6[7] = var11;\n        var24 = var12;\n        local_var1 = var11;\n        if (var12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = local_var3;\n        }\n        var10 = *ptr6;\n        ptr6[7] = var11;\n        var9 = var12;\n        local_var3 = var11;\n        if (var12 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr6[8] = var12;\n    if (*(char *)((ptr6[3] - 1) + var10) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr6 = ptr6 + 9;\n    var15 = var9;\n    var14 = var24;\n    ptr5 = ptr5 + result;\n  }\n  if (remaining_size == 0) {\n    var1 = *input1;\n    var2 = *input2;\n    error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    non_fatal(error_message,var1,var2);\n    num_notes = ((long)ptr6 - (long)notes_array >> 3) * -0x71c71c71c71c71c7;\n    qsort(notes_array,num_notes,0x48,compare_notes);\n    for (note_ptr = notes_array; note_ptr < ptr6; note_ptr = note_ptr + 9) {\n      remaining_size = note_ptr[2];\n      if (remaining_size != 0) {\n        var15 = note_ptr[7];\n        var14 = note_ptr[8];\n        ptr7 = note_ptr;\n        loop_counter = 0;\n        if (var15 == var14) {\n          note_ptr[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr = ptr7;\n              ptr7 = ptr + -9;\n              if (ptr7 < notes_array) goto LAB_001167f5;\n              var10 = ptr[-7];\n            } while (var10 == 0);\n            if ((*ptr7 != *note_ptr) ||\n               (comparison_result = memcmp((void *)ptr[-6],(void *)note_ptr[3],*note_ptr), comparison_result != 0)) break;\n            var12 = ptr[-2];\n            var11 = ptr[-1];\n            if (var15 == var12) {\n              if (var14 == var11) {\n                note_ptr[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var14 <= var11) {\n                note_ptr[2] = 0;\n                break;\n              }\n              if (var11 < var15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var11) || (var15 <= (var11 + 0xf & 0xfffffffffffffff0))\n                   ) goto extract_build_notes;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (var10 == 0x101)) {\n                if (var11 <= var14) {\n                  var11 = var14;\n                }\n                if (var12 < var15) {\n                  var15 = var12;\n                }\n                ptr[-1] = var11;\n                ptr[-2] = var15;\n                note_ptr[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var12 <= var15) goto LAB_001167a6;\n              if (var11 < var15) goto LAB_0010852c;\n              if (var14 < var15) {\n                if ((0xfffffffffffffff0 < var14) || (var12 <= (var14 + 0xf & 0xfffffffffffffff0))\n                   ) goto extract_build_notes;\n                goto LAB_001167b8;\n              }\n              if (var14 != var11) goto LAB_001167b8;\n            }\nextract_build_notes:\n            condition = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (condition);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(notes_array,num_notes,0x48,sort_notes);\n    buffer2 = (undefined *)xmalloc(size * 2);\n    local_var2 = 0;\n    local_var3 = 0;\n    ptr5 = buffer2;\n    for (note_ptr = notes_array; note_ptr < ptr6; note_ptr = note_ptr + 9) {\n      if (note_ptr[2] != 0) {\n        ptr3 = ptr5 + 0xc;\n        if ((note_ptr[7] == local_var3) && (note_ptr[8] == local_var2)) {\n          (**(code **)(input1[1] + 0x50))(*note_ptr,ptr5);\n          (**(code **)(input1[1] + 0x50))(0,ptr5 + 4);\n          (**(code **)(input1[1] + 0x50))(note_ptr[2],ptr5 + 8);\n          var15 = note_ptr[6];\n          remaining_size = *note_ptr;\n          ptr5 = (undefined *)note_ptr[3];\n          ptr4 = ptr3;\n          for (var14 = remaining_size; var14 != 0; var14 = var14 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          if (remaining_size < var15) {\n            for (length = var15 - remaining_size; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          ptr5 = ptr3 + var15;\n        }\n        else {\n          (**(code **)(input1[1] + 0x50))();\n          if (*(int *)(input1[1] + 8) == 5) {\n            char_var = (*(char *)(input1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(input1[1] + 0x50))(char_var,ptr5 + 4);\n          (**(code **)(input1[1] + 0x50))(note_ptr[2],ptr5 + 8);\n          remaining_size = *note_ptr;\n          ptr5 = (undefined *)note_ptr[3];\n          ptr4 = ptr3;\n          for (var15 = remaining_size; var15 != 0; var15 = var15 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          var15 = note_ptr[6];\n          if (remaining_size < var15) {\n            for (length = var15 - remaining_size; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          length = input1[1];\n          ptr3 = ptr3 + var15;\n          ptr5 = ptr3 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(input1[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(note_ptr[7],ptr3);\n            (**(code **)(input1[1] + 0x38))(note_ptr[8],ptr5);\n            ptr5 = ptr3 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(note_ptr[7],ptr3);\n            (**(code **)(input1[1] + 0x50))(note_ptr[8],ptr3 + 4);\n          }\n          local_var3 = note_ptr[7];\n          local_var2 = note_ptr[8];\n        }\n      }\n    }\n    var15 = (long)ptr5 - (long)buffer2;\n    remaining_size = var15;\n    ptr5 = buffer2;\n    local_var4 = size;\n    if (var15 < size) {\n      for (; local_var4 = var15, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *input4 = *ptr5;\n        ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n        input4 = input4 + (ulong)byte_var * -2 + 1;\n      }\n    }\n    free(buffer2);\n  }\n  else {\n    length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      bfd_set_error(0x11);\n      bfd_nonfatal_message(0,input1,input2,length);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(notes_array);\n  return local_var4;\n}\n\n",
            "current_name": "extract_build_attribute_notes_001163d0",
            "entrypoint": "0x001163d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001163d0": "extract_build_attribute_notes_001163d0",
                "__nmemb": "num_notes",
                "__ptr": "reloc_buffer",
                "__ptr_00": "buffer2",
                "bVar26": "byte_var",
                "bVar4": "condition",
                "cVar19": "char_var",
                "compare_gnu_build_notes": "compare_notes",
                "extract_build_notes_00116852": "extract_build_notes",
                "iVar21": "loop_counter",
                "iVar6": "comparison_result",
                "lVar8": "length",
                "local_60": "notes_array",
                "local_68": "local_var4",
                "local_70": "local_var3",
                "local_88": "local_var1",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "size",
                "param_4": "input4",
                "puVar17": "note_ptr",
                "puVar18": "ptr3",
                "puVar20": "ptr4",
                "puVar22": "ptr5",
                "puVar23": "ptr6",
                "puVar25": "ptr7",
                "puVar5": "ptr",
                "sort_gnu_build_notes": "sort_notes",
                "uStack_80": "local_var2",
                "uVar1": "result",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar16": "remaining_size",
                "uVar17": "version_note_missing",
                "uVar2": "var1",
                "uVar20": "note_name",
                "uVar22": "extract_build_attr_notes_result",
                "uVar23": "extract_build_notes_result",
                "uVar24": "var24",
                "uVar25": "sect_empty_size",
                "uVar3": "var2",
                "uVar7": "error_message",
                "uVar9": "var9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116490": {
            "additional_data": {
                "FUN_00116490": {
                    "1": "extract_gnu_build_attribute_notes"
                },
                "__nmemb": {
                    "1": "var13",
                    "2": "num_notes",
                    "4": "num_elements"
                },
                "__ptr": {
                    "1": "temp_buffer",
                    "6": "ptr",
                    "8": "buffer"
                },
                "bVar21": {
                    "1": "temp_var10",
                    "2": "byte_value",
                    "3": "byte_flag",
                    "8": "byte_var"
                },
                "bVar4": {
                    "1": "is_corrupt",
                    "14": "flag",
                    "2": "temp_var4",
                    "3": "is_true"
                },
                "cVar16": {
                    "1": "note_version_flag",
                    "3": "character",
                    "4": "char_value",
                    "8": "char_var"
                },
                "iVar22": {
                    "1": "counter_2",
                    "2": "counter2",
                    "3": "int_var2",
                    "4": "counter",
                    "6": "var22"
                },
                "iVar6": {
                    "1": "temp_var",
                    "2": "int_var",
                    "4": "counter",
                    "8": "index"
                },
                "in_R11": {
                    "1": "input2",
                    "2": "description",
                    "3": "r11_value"
                },
                "in_RAX": {
                    "1": "in_value1",
                    "2": "note_size",
                    "3": "rax_value",
                    "7": "note_type"
                },
                "in_stack_00000020": {
                    "1": "malloc_size",
                    "2": "output_buffer_size",
                    "3": "stack_value1",
                    "5": "stack_var1"
                },
                "in_stack_00000028": {
                    "1": "var_in_stack_00000028",
                    "2": "note_buffer",
                    "3": "stack_var2",
                    "4": "stack_ptr1"
                },
                "in_stack_00000030": {
                    "1": "buffer_ptr2",
                    "2": "temp_ptr",
                    "3": "output_buffer",
                    "4": "output_ptr"
                },
                "in_stack_00000038": {
                    "1": "var_in_stack_00000038",
                    "2": "has_version_note",
                    "3": "stack_value2"
                },
                "in_stack_00000040": {
                    "1": "stack_arg5",
                    "2": "warning_flag",
                    "3": "stack_value3"
                },
                "in_stack_00000048": {
                    "1": "non_fatal_error_message",
                    "2": "warning_message_ptr",
                    "3": "stack_ptr3"
                },
                "lVar7": {
                    "1": "len",
                    "2": "loop_var",
                    "3": "var7",
                    "8": "length"
                },
                "param_1": {
                    "1": "unused_param",
                    "2": "input_param1",
                    "4": "input_param",
                    "8": "param1"
                },
                "param_2": {
                    "1": "size_param",
                    "2": "input_param2",
                    "4": "note_size",
                    "5": "size"
                },
                "param_3": {
                    "1": "name_param",
                    "2": "data",
                    "3": "name",
                    "4": "param3",
                    "8": "note_name"
                },
                "param_4": {
                    "1": "len",
                    "2": "note_description",
                    "3": "note_size",
                    "4": "arg4"
                },
                "param_7": {
                    "1": "temp_var",
                    "2": "param_7",
                    "4": "output_size",
                    "9": "param7"
                },
                "param_8": {
                    "1": "temp_var",
                    "2": "param_8",
                    "3": "version_flag",
                    "4": "arg8",
                    "9": "param8"
                },
                "param_9": {
                    "1": "input_7",
                    "2": "flag2",
                    "4": "arg9",
                    "8": "param9"
                },
                "puVar14": {
                    "1": "ptr2",
                    "2": "ptr14",
                    "3": "ptr1",
                    "4": "note_ptr"
                },
                "puVar15": {
                    "1": "new_array_ptr",
                    "2": "pointer_var3",
                    "3": "ptr15",
                    "4": "ptr2"
                },
                "puVar17": {
                    "1": "temp_var17",
                    "2": "pointer_var4",
                    "3": "ptr1",
                    "4": "ptr3"
                },
                "puVar18": {
                    "1": "version_description",
                    "2": "pointer_var5",
                    "3": "ptr2",
                    "4": "ptr4"
                },
                "puVar19": {
                    "1": "ptr_var8",
                    "2": "pointer_var6",
                    "3": "ptr6"
                },
                "puVar20": {
                    "1": "ptr2",
                    "2": "pointer_var7"
                },
                "puVar5": {
                    "1": "temporary_pointer1",
                    "10": "ptr",
                    "2": "pointer_var1",
                    "3": "ptr5"
                },
                "uVar1": {
                    "1": "message_param_1",
                    "2": "temp_var1",
                    "3": "result1",
                    "6": "result",
                    "9": "var1"
                },
                "uVar10": {
                    "1": "result10",
                    "9": "var10"
                },
                "uVar11": {
                    "1": "temp_var11",
                    "2": "ret_addr",
                    "9": "var11"
                },
                "uVar12": {
                    "1": "temp_var3",
                    "9": "var12"
                },
                "uVar13": {
                    "1": "length_aligned",
                    "9": "var13"
                },
                "uVar2": {
                    "1": "temp_var",
                    "2": "temp_var2",
                    "3": "result2",
                    "6": "temp",
                    "9": "var2"
                },
                "uVar3": {
                    "1": "temp_var_3",
                    "2": "result_3",
                    "3": "result3",
                    "9": "var3"
                },
                "uVar8": {
                    "1": "temp_var6",
                    "2": "temp3",
                    "9": "var8"
                },
                "uVar9": {
                    "1": "attribute_size",
                    "9": "var9"
                },
                "unaff_R12": {
                    "1": "build_attribute",
                    "2": "current_note",
                    "3": "r12_value"
                },
                "unaff_R13": {
                    "1": "version_desc_size_with_padding",
                    "2": "r13",
                    "3": "r13_value"
                },
                "unaff_R14": {
                    "1": "msg_table",
                    "2": "r14",
                    "3": "r14_value"
                },
                "unaff_RAX": {
                    "1": "note_version"
                },
                "unaff_RBP": {
                    "1": "current_retaddr",
                    "2": "note_address",
                    "4": "rbp_value"
                },
                "unaff_RBX": {
                    "1": "value7",
                    "2": "remaining_bytes",
                    "3": "remaining_data_size",
                    "4": "rbx_value"
                },
                "unaff_retaddr": {
                    "1": "value5",
                    "2": "return_addr",
                    "3": "ret_address",
                    "4": "ret_addr",
                    "7": "return_address"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001086af"
            ],
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "code": "\nulong extract_build_attribute_notes_00116490(undefined8 param1,ulong size,ulong note_name,long arg4)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool flag;\n  ulong *ptr;\n  int index;\n  long length;\n  undefined8 var8;\n  ulong note_type;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *buffer;\n  ulong var13;\n  ulong rbx_value;\n  ulong rbp_value;\n  ulong *note_ptr;\n  undefined *ptr2;\n  char char_var;\n  undefined *ptr3;\n  undefined *ptr4;\n  ulong r11_value;\n  ulong *r12_value;\n  ulong *ptr6;\n  ulong r13_value;\n  size_t num_elements;\n  undefined8 *r14_value;\n  ulong *temp_ptr;\n  byte byte_var;\n  int var22;\n  ulong return_address;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong stack_var1;\n  ulong *stack_ptr1;\n  undefined *output_ptr;\n  uint stack_value2;\n  uint stack_value3;\n  undefined8 *stack_ptr3;\n  \n  byte_var = 0;\ncode_r0x00116490:\n  length = arg4;\n  var10 = rbp_value;\n  var13 = r13_value;\n  if (note_type == 0) {\n    if (size == 0x100) {\n      r12_value[7] = return_address;\n      var11 = return_address;\nLAB_001164af:\n      var9 = r13_value;\n      var13 = r13_value;\n      return_address = var11;\n    }\n    else {\n      r12_value[7] = param9;\nLAB_0011669e:\n      var10 = rbp_value;\n      var9 = rbp_value;\n    }\nLAB_001164bb:\n    r12_value[8] = var9;\n    if (*(char *)((r12_value[3] - 1) + note_name) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr6 = r12_value + 9;\n    if (0xb < rbx_value) {\n      var9 = (**(code **)(r14_value[1] + 0x40))(length);\n      *ptr6 = var9;\n      var9 = (**(code **)(r14_value[1] + 0x40))(length + 4);\n      r12_value[10] = var9;\n      size = (**(code **)(r14_value[1] + 0x40))(length + 8);\n      note_name = *ptr6;\n      r12_value[0xb] = size;\n      note_type = r12_value[10];\n      var9 = note_name + 3 & 0xfffffffffffffffc;\n      r12_value[0xf] = var9;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < size - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + note_type + 0xc;\n      if (rbx_value < var11) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (note_name < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      r12_value[0xc] = length + 0xc;\n      r11_value = length + 0xc + var9;\n      r12_value[0xd] = r11_value;\n      rbx_value = rbx_value + (-0xc - (var9 + note_type));\n      arg4 = length + var11;\n      rbp_value = var10;\n      r12_value = ptr6;\n      r13_value = var13;\n      if (note_name != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            var10 = extract_build_attribute_notes_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < note_name) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            var10 = extract_build_attribute_notes_00116490();\n            return var10;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            var10 = extract_build_attribute_notes_00116490();\n            return var10;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (rbx_value != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stack_value2 | stack_value3 | param8) == 0) {\n      var1 = *r14_value;\n      var2 = *stack_ptr3;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(var8,var1,var2);\nLAB_0011671b:\n      num_elements = ((long)ptr6 - (long)stack_ptr1 >> 3) * -0x71c71c71c71c71c7;\n      qsort(stack_ptr1,num_elements,0x48,compare_gnu_build_notes);\n      for (note_ptr = stack_ptr1; note_ptr < ptr6; note_ptr = note_ptr + 9) {\n        var10 = note_ptr[2];\n        if (var10 != 0) {\n          var13 = note_ptr[7];\n          var9 = note_ptr[8];\n          temp_ptr = note_ptr;\n          var22 = 0;\n          if (var13 == var9) {\n            note_ptr[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr = temp_ptr;\n                temp_ptr = ptr + -9;\n                if (temp_ptr < stack_ptr1) goto LAB_001167f5;\n                var11 = ptr[-7];\n              } while (var11 == 0);\n              if ((*temp_ptr != *note_ptr) ||\n                 (index = memcmp((void *)ptr[-6],(void *)note_ptr[3],*note_ptr), index != 0))\n              break;\n              var3 = ptr[-2];\n              var12 = ptr[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  note_ptr[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  note_ptr[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto extract_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  ptr[-1] = var12;\n                  ptr[-2] = var13;\n                  note_ptr[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto extract_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nextract_build_notes_00116852:\n              flag = var22 < 0x11;\n              var22 = var22 + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(stack_ptr1,num_elements,0x48,sort_gnu_build_notes);\n      buffer = (undefined *)xmalloc(stack_var1 * 2);\n      param7 = 0;\n      param9 = 0;\n      ptr4 = buffer;\n      for (note_ptr = stack_ptr1; note_ptr < ptr6; note_ptr = note_ptr + 9) {\n        if (note_ptr[2] != 0) {\n          ptr3 = ptr4 + 4;\n          ptr2 = ptr4 + 0xc;\n          if ((note_ptr[7] == param9) && (note_ptr[8] == param7)) {\n            (**(code **)(r14_value[1] + 0x50))(*note_ptr,ptr4);\n            (**(code **)(r14_value[1] + 0x50))(0,ptr3);\n            (**(code **)(r14_value[1] + 0x50))(note_ptr[2],ptr4 + 8);\n            var13 = note_ptr[6];\n            var10 = *note_ptr;\n            ptr4 = (undefined *)note_ptr[3];\n            ptr3 = ptr2;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *ptr3 = *ptr4;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n              ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (length = var13 - var10; length != 0; length = length + -1) {\n                *ptr3 = 0;\n                ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            ptr4 = ptr2 + var13;\n          }\n          else {\n            (**(code **)(r14_value[1] + 0x50))();\n            if (*(int *)(r14_value[1] + 8) == 5) {\n              char_var = (*(char *)(r14_value[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_var = '\\b';\n            }\n            (**(code **)(r14_value[1] + 0x50))(char_var,ptr3);\n            (**(code **)(r14_value[1] + 0x50))(note_ptr[2],ptr4 + 8);\n            var10 = *note_ptr;\n            ptr4 = (undefined *)note_ptr[3];\n            ptr3 = ptr2;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *ptr3 = *ptr4;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n              ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n            }\n            var13 = note_ptr[6];\n            if (var10 < var13) {\n              for (length = var13 - var10; length != 0; length = length + -1) {\n                *ptr3 = 0;\n                ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            length = r14_value[1];\n            ptr2 = ptr2 + var13;\n            ptr4 = ptr2 + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(r14_value[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(note_ptr[7],ptr2);\n              (**(code **)(r14_value[1] + 0x38))(note_ptr[8],ptr4);\n              ptr4 = ptr2 + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(note_ptr[7],ptr2);\n              (**(code **)(r14_value[1] + 0x50))(note_ptr[8],ptr2 + 4);\n            }\n            param9 = note_ptr[7];\n            param7 = note_ptr[8];\n          }\n        }\n      }\n      var13 = (long)ptr4 - (long)buffer;\n      var10 = var13;\n      ptr4 = buffer;\n      if (var13 < stack_var1) {\n        for (; stack_var1 = var13, var10 != 0; var10 = var10 - 1) {\n          *output_ptr = *ptr4;\n          ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          output_ptr = output_ptr + (ulong)byte_var * -2 + 1;\n        }\n      }\n      free(buffer);\nLAB_001166f8:\n      free(stack_ptr1);\n      return stack_var1;\n    }\n    if (((stack_value3 | param8) == 0) || (stack_value2 == 0)) {\n      if (stack_value3 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      var11 = (**(code **)(r14_value[1] + 0x28))(r11_value);\n      var9 = (**(code **)(r14_value[1] + 0x28))(r12_value[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (r12_value[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = return_address;\n        }\n        note_name = *r12_value;\n        r12_value[7] = var11;\n        var13 = var9;\n        return_address = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param9;\n        }\n        note_name = *r12_value;\n        r12_value[7] = var11;\n        var10 = var9;\n        param9 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        var11 = (**(code **)(r14_value[1] + 0x40))(r11_value);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        var10 = extract_build_notes_001086af();\n        return var10;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,r14_value,stack_ptr3,length);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto extract_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto extract_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nextract_build_notes_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "current_name": "extract_build_attribute_notes_00116490",
            "entrypoint": "0x00116490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116490": "extract_build_attribute_notes_00116490",
                "__nmemb": "num_elements",
                "__ptr": "buffer",
                "bVar21": "byte_var",
                "bVar4": "flag",
                "cVar16": "char_var",
                "iVar22": "var22",
                "iVar6": "index",
                "in_R11": "r11_value",
                "in_RAX": "note_type",
                "in_stack_00000020": "stack_var1",
                "in_stack_00000028": "stack_ptr1",
                "in_stack_00000030": "output_ptr",
                "in_stack_00000038": "stack_value2",
                "in_stack_00000040": "stack_value3",
                "in_stack_00000048": "stack_ptr3",
                "lVar7": "length",
                "param_1": "param1",
                "param_2": "size",
                "param_3": "note_name",
                "param_4": "arg4",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "puVar14": "note_ptr",
                "puVar15": "ptr2",
                "puVar17": "ptr3",
                "puVar18": "ptr4",
                "puVar19": "ptr6",
                "puVar20": "temp_ptr",
                "puVar5": "ptr",
                "uVar1": "var1",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar8": "var8",
                "uVar9": "var9",
                "unaff_R12": "r12_value",
                "unaff_R13": "r13_value",
                "unaff_R14": "r14_value",
                "unaff_RBP": "rbp_value",
                "unaff_RBX": "rbx_value",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116852": {
            "additional_data": {
                "FUN_00116852": {
                    "1": "extract_and_process_build_notes",
                    "2": "decompiled_function"
                },
                "__ptr": {
                    "1": "pointer_var_ptr",
                    "2": "dynamic_memory",
                    "3": "buffer"
                },
                "bVar14": {
                    "1": "byte",
                    "2": "byte_counter",
                    "3": "byte_value",
                    "4": "temp_byte",
                    "7": "byte_var"
                },
                "cVar10": {
                    "1": "constant",
                    "3": "char_value",
                    "4": "temp_char"
                },
                "iVar3": {
                    "1": "result",
                    "12": "comparison_result",
                    "3": "cmp_result",
                    "6": "memcmp_result"
                },
                "in_R10": {
                    "1": "loop_index",
                    "2": "note_index",
                    "4": "loop_counter",
                    "7": "index",
                    "9": "counter"
                },
                "in_R11": {
                    "1": "index2",
                    "2": "note_type",
                    "4": "flag"
                },
                "in_R13": {
                    "1": "current_record"
                },
                "in_R14": {
                    "1": "next_record"
                },
                "in_R15": {
                    "1": "previous_block_length"
                },
                "in_RBP": {
                    "1": "original_data"
                },
                "in_RBX": {
                    "1": "input_length"
                },
                "in_RCX": {
                    "1": "size_list",
                    "2": "end_pointer"
                },
                "lVar7": {
                    "1": "len",
                    "10": "loop_counter",
                    "7": "loop_var"
                },
                "param_10": {
                    "1": "param_result",
                    "2": "param_10",
                    "3": "result_size",
                    "4": "result"
                },
                "param_11": {
                    "1": "input_data",
                    "2": "note_entries",
                    "4": "array"
                },
                "param_12": {
                    "1": "output_array",
                    "2": "buffer",
                    "3": "output",
                    "8": "output_buffer"
                },
                "param_13": {
                    "1": "comparison_param",
                    "2": "struct_ptr",
                    "4": "param13",
                    "9": "context"
                },
                "param_14": {
                    "1": "function_param_7",
                    "2": "param14",
                    "5": "array_size"
                },
                "param_7": {
                    "1": "function_param_1",
                    "2": "param2",
                    "4": "size",
                    "5": "param7",
                    "6": "param_7"
                },
                "param_9": {
                    "1": "function_param_2",
                    "2": "param3",
                    "3": "offset",
                    "6": "param9"
                },
                "pcVar2": {
                    "1": "sort_gnu_build_notes_ptr",
                    "2": "code_pointer",
                    "3": "sort_function",
                    "4": "function_ptr",
                    "6": "function_pointer"
                },
                "psVar13": {
                    "1": "note_ptr_chunk",
                    "2": "current_note"
                },
                "puVar11": {
                    "1": "note_data_pointer",
                    "2": "ptr2"
                },
                "puVar12": {
                    "1": "buffer",
                    "2": "dest_ptr2"
                },
                "puVar12 + 4": {
                    "1": "destination_offset"
                },
                "puVar12 + 8": {
                    "1": "destination_offset2"
                },
                "puVar13": {
                    "1": "current_note"
                },
                "puVar9": {
                    "1": "temp_data_ptr",
                    "2": "ptr1",
                    "5": "dest_ptr"
                },
                "sVar1": {
                    "1": "current_block_length",
                    "2": "size_var1",
                    "4": "size",
                    "6": "note_size"
                },
                "uVar4": {
                    "1": "loop_index",
                    "2": "temp",
                    "4": "index",
                    "8": "counter"
                },
                "uVar5": {
                    "1": "min_note_size",
                    "2": "note_start",
                    "3": "min_size"
                },
                "uVar6": {
                    "1": "temp_var6",
                    "2": "max_size",
                    "3": "note_end"
                },
                "uVar8": {
                    "1": "temp_offset",
                    "2": "value",
                    "3": "var8"
                },
                "un_RCX": {
                    "1": "end"
                },
                "unaff_R10": {
                    "1": "iterator"
                },
                "unaff_R13": {
                    "1": "record_end",
                    "2": "start_ptr",
                    "3": "array_end"
                },
                "unaff_R14": {
                    "1": "current_block",
                    "2": "current_ptr",
                    "3": "current_entry"
                },
                "unaff_R15": {
                    "1": "current_note_addr",
                    "2": "max_value",
                    "3": "max_size"
                },
                "unaff_RBP": {
                    "1": "original_data_ptr",
                    "2": "current_note",
                    "3": "current_element"
                },
                "unaff_RBP[2]": {
                    "1": "flag2"
                },
                "unaff_RBP[3]": {
                    "1": "data_pointer"
                },
                "unaff_RBP[7]": {
                    "1": "entry_min_size"
                },
                "unaff_RBP[8]": {
                    "1": "entry_max_size"
                },
                "unaff_RBX": {
                    "1": "min_entry_address",
                    "2": "min_address"
                },
                "unaff_RCX": {
                    "1": "array_end"
                }
            },
            "called": [
                "FUN_00116852",
                "FUN_001048f0",
                "FUN_00104140",
                "FUN_00104420",
                "FUN_0011a250",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nulong extract_build_notes_00116852(void)\n\n{\n  size_t note_size;\n  code *function_pointer;\n  int comparison_result;\n  uint counter;\n  undefined *buffer;\n  size_t *end_of_notes;\n  ulong min_size;\n  ulong note_end;\n  long loop_counter;\n  ulong var8;\n  size_t min_value;\n  size_t *current_element;\n  undefined *dest_ptr;\n  char character;\n  undefined *dest_ptr1;\n  ulong counter;\n  undefined *dest_ptr2;\n  size_t flag;\n  size_t *start;\n  size_t *current_entry;\n  size_t max_size;\n  size_t *current_note;\n  byte byte_var;\n  size_t param_7;\n  size_t param_9;\n  ulong result;\n  size_t *array;\n  undefined *output_buffer;\n  long context;\n  size_t array_size;\n  \n  byte_var = 0;\ncode_r0x00116852:\n  counter = (int)counter + 1;\n  if (0x10 < (int)counter) goto LAB_001167f5;\nLAB_00116863:\n  current_entry = current_entry + -9;\n  do {\n    if (start <= current_entry) {\n      note_size = current_entry[2];\n      if (note_size == 0) goto LAB_00116863;\n      var8 = (ulong)counter;\n      if ((*current_entry == *current_element) &&\n         (comparison_result = memcmp((void *)current_entry[3],(void *)data_pointer,*current_element), comparison_result == 0)) {\n        note_end = current_entry[7];\n        min_size = current_entry[8];\n        counter = var8 & 0xffffffff;\n        if (max_size == note_end) {\n          if (min_value != min_size) goto LAB_001167a6;\n          is_match = 0;\n        }\n        else {\n          if (max_size < note_end) {\n            if (min_size < max_size) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < min_size) || (max_size <= (min_size + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (min_value < max_size) {\n              if ((0xfffffffffffffff0 < min_value) ||\n                 (note_end <= (min_value + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (min_value == min_size) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (min_value <= min_size) {\n              is_match = 0;\n              goto LAB_001167f5;\n            }\n            if (min_size < max_size) goto LAB_0010852c;\n          }\n          if ((flag == 0x101) != (note_size == 0x101)) goto code_r0x00116852;\n          if (min_size <= min_value) {\n            min_size = min_value;\n          }\n          if (note_end < max_size) {\n            max_size = note_end;\n          }\n          current_entry[8] = min_size;\n          current_entry[7] = max_size;\n          is_match = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_entry = current_element;\n        current_element = current_entry + 9;\n        if (end_of_notes <= current_element) {\n          qsort(array,array_size,0x48,sort_gnu_build_notes);\n          buffer = (undefined *)xmalloc(result * 2);\n          param_7 = 0;\n          dest_ptr2 = buffer;\n          for (current_note = array; current_note < end_of_notes; current_note = current_note + 9) {\n            if (current_note[2] != 0) {\n              dest_ptr1 = dest_ptr2 + 4;\n              dest_ptr = dest_ptr2 + 0xc;\n              function_pointer = *(code **)(*(long *)(context + 8) + 0x50);\n              if ((current_note[7] == param_9) && (current_note[8] == param_7)) {\n                (*function_pointer)(*current_note,dest_ptr2);\n                (**(code **)(*(long *)(context + 8) + 0x50))(0,dest_ptr1);\n                (**(code **)(*(long *)(context + 8) + 0x50))(current_note[2],dest_ptr2 + 8);\n                note_end = current_note[6];\n                var8 = *current_note;\n                dest_ptr2 = (undefined *)current_note[3];\n                dest_ptr1 = dest_ptr;\n                for (min_size = var8; min_size != 0; min_size = min_size - 1) {\n                  *dest_ptr1 = *dest_ptr2;\n                  dest_ptr2 = dest_ptr2 + (ulong)byte_var * -2 + 1;\n                  dest_ptr1 = dest_ptr1 + (ulong)byte_var * -2 + 1;\n                }\n                if (var8 < note_end) {\n                  for (loop_counter = note_end - var8; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *dest_ptr1 = 0;\n                    dest_ptr1 = dest_ptr1 + (ulong)byte_var * -2 + 1;\n                  }\n                }\n                dest_ptr2 = dest_ptr + note_end;\n              }\n              else {\n                (*function_pointer)();\n                if (*(int *)(*(long *)(context + 8) + 8) == 5) {\n                  character = (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  character = '\\b';\n                }\n                (**(code **)(*(long *)(context + 8) + 0x50))(character,dest_ptr1);\n                (**(code **)(*(long *)(context + 8) + 0x50))(current_note[2],dest_ptr2 + 8);\n                var8 = *current_note;\n                dest_ptr2 = (undefined *)current_note[3];\n                dest_ptr1 = dest_ptr;\n                for (note_end = var8; note_end != 0; note_end = note_end - 1) {\n                  *dest_ptr1 = *dest_ptr2;\n                  dest_ptr2 = dest_ptr2 + (ulong)byte_var * -2 + 1;\n                  dest_ptr1 = dest_ptr1 + (ulong)byte_var * -2 + 1;\n                }\n                note_end = current_note[6];\n                if (var8 < note_end) {\n                  for (loop_counter = note_end - var8; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *dest_ptr1 = 0;\n                    dest_ptr1 = dest_ptr1 + (ulong)byte_var * -2 + 1;\n                  }\n                }\n                loop_counter = *(long *)(context + 8);\n                dest_ptr = dest_ptr + note_end;\n                dest_ptr2 = dest_ptr + 8;\n                if ((*(int *)(loop_counter + 8) == 5) &&\n                   (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loop_counter + 0x38))(current_note[7],dest_ptr);\n                  (**(code **)(*(long *)(context + 8) + 0x38))(current_note[8],dest_ptr2);\n                  dest_ptr2 = dest_ptr + 0x10;\n                }\n                else {\n                  (**(code **)(loop_counter + 0x50))(current_note[7],dest_ptr);\n                  (**(code **)(*(long *)(context + 8) + 0x50))(current_note[8],dest_ptr + 4);\n                }\n                param_9 = current_note[7];\n                param_7 = current_note[8];\n              }\n            }\n          }\n          note_end = (long)dest_ptr2 - (long)buffer;\n          var8 = note_end;\n          dest_ptr2 = buffer;\n          if (note_end < result) {\n            for (; result = note_end, var8 != 0; var8 = var8 - 1) {\n              *output_buffer = *dest_ptr2;\n              dest_ptr2 = dest_ptr2 + (ulong)byte_var * -2 + 1;\n              output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n            }\n          }\n          free(buffer);\n          free(array);\n          return result;\n        }\n        flag = current_entry[0xb];\n      } while (flag == 0);\n      max_size = current_entry[0x10];\n      min_value = current_entry[0x11];\n      counter = 0;\n      if (max_size != min_value) break;\n      current_entry[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "current_name": "extract_build_notes_00116852",
            "entrypoint": "0x00116852",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116852": "extract_build_notes_00116852",
                "__ptr": "buffer",
                "bVar14": "byte_var",
                "cVar10": "character",
                "iVar3": "comparison_result",
                "in_R10": "counter",
                "in_R11": "flag",
                "in_RCX": "end_of_notes",
                "lVar7": "loop_counter",
                "param_10": "result",
                "param_11": "array",
                "param_12": "output_buffer",
                "param_13": "context",
                "param_14": "array_size",
                "pcVar2": "function_pointer",
                "psVar13": "current_note",
                "puVar11": "dest_ptr1",
                "puVar12": "dest_ptr2",
                "puVar9": "dest_ptr",
                "sVar1": "note_size",
                "uVar4": "counter",
                "uVar5": "min_size",
                "uVar6": "note_end",
                "uVar8": "var8",
                "unaff_R13": "start",
                "unaff_R14": "current_entry",
                "unaff_R15": "max_size",
                "unaff_RBP": "current_element",
                "unaff_RBP[2]": "is_match",
                "unaff_RBP[3]": "data_pointer",
                "unaff_RBX": "min_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116aa0": {
            "additional_data": {
                "FUNC_00116b90": {
                    "1": "process_param",
                    "2": "process_params"
                },
                "FUN_00116aa0": {
                    "1": "process_entry",
                    "3": "start_main",
                    "6": "start_main_loop"
                },
                "__libc_start_main": {
                    "2": "start_main"
                },
                "auStack_8": {
                    "1": "stack_array",
                    "3": "stack_8",
                    "6": "stack"
                },
                "main": {
                    "1": "main_function"
                },
                "param_1": {
                    "1": "param1_process_params",
                    "10": "arg1",
                    "3": "param_1",
                    "5": "param1",
                    "7": "argc"
                },
                "param_2": {
                    "1": "param_b",
                    "10": "arg2",
                    "2": "arguments",
                    "3": "param_2",
                    "5": "param2",
                    "7": "argv"
                },
                "processEntry": {
                    "1": "start_main_process",
                    "14": "start_main_loop",
                    "2": "initialize_program"
                },
                "stack0x00000008": {
                    "1": "libc_stack"
                }
            },
            "called": [
                "FUN_00116b90",
                "FUN_00128040"
            ],
            "calling": [],
            "code": "\nvoid start_main_loop_00116aa0 start_main_loop_00116aa0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stack [8];\n  \n  start_main(main_function,arg2,&libc_stack,0,0,arg1,stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "start_main_loop_00116aa0",
            "entrypoint": "0x00116aa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116aa0": "start_main_loop_00116aa0",
                "__libc_start_main": "start_main",
                "auStack_8": "stack",
                "main": "main_function",
                "param_1": "arg1",
                "param_2": "arg2",
                "processEntry": "start_main_loop",
                "stack0x00000008": "libc_stack"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116ad0": {
            "called": [
                "FUN_00128070"
            ],
            "calling": [
                "FUN_00116b40"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116ad0",
            "entrypoint": "0x00116ad0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b00": {
            "called": [
                "FUN_00128468"
            ],
            "calling": [
                "FUN_00116b80"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116b00",
            "entrypoint": "0x00116b00",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b40": {
            "additional_data": {
                "FUNC_00116ad0": {
                    "1": "finalize",
                    "2": "deregister_tm_clones",
                    "9": "perform_cleanup"
                },
                "FUN_00116b40": {
                    "1": "initialize_if_needed",
                    "16": "initialize_program",
                    "3": "initialize",
                    "6": "initialize_application"
                }
            },
            "called": [
                "FUN_00116ad0",
                "FUN_00104910"
            ],
            "calling": [],
            "code": "\nvoid initialize_program_00116b40(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  deregister_tm_clones();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_program_00116b40",
            "entrypoint": "0x00116b40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116b40": "initialize_program_00116b40"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116b80": {
            "called": [
                "FUN_00116b00"
            ],
            "calling": [],
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "current_name": "FUN_00116b80",
            "entrypoint": "0x00116b80",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00116b90": {
            "called": [
                "FUN_00119970",
                "FUN_00113fe0",
                "FUN_00108898",
                "FUN_00104220",
                "FUN_00104280",
                "FUN_001044e0",
                "FUN_001041d0",
                "FUN_001040b0",
                "FUN_0011a390",
                "FUN_001046f0",
                "FUN_001043c0",
                "FUN_00104750",
                "FUN_001045d0",
                "FUN_00104240",
                "FUN_001041a0",
                "FUN_00114c20",
                "FUN_001284f8",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_001048b0",
                "FUN_001044c0",
                "FUN_0011a480",
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104270",
                "FUN_00113fb0",
                "FUN_00108916",
                "FUN_00114cf0",
                "FUN_00113f50",
                "FUN_00104210",
                "FUN_001199d0",
                "FUN_00104660",
                "FUN_00114460",
                "FUN_001040d0",
                "FUN_00104720",
                "FUN_001046e0",
                "FUN_001054af",
                "FUN_001045c0",
                "FUN_00113f20",
                "FUN_001126c0",
                "FUN_00104760",
                "FUN_00104430",
                "FUN_00104610",
                "FUN_00108c86",
                "FUN_001044a0",
                "FUN_00114c80",
                "FUN_00104370",
                "FUN_00108a2a",
                "FUN_00119940",
                "FUN_00108800",
                "FUN_00114190",
                "FUN_00115970",
                "FUN_00104080",
                "FUN_00104510",
                "FUN_001042b0",
                "FUN_00104470",
                "FUN_00104790",
                "FUN_00114d60",
                "FUN_00104680",
                "FUN_001043d0",
                "FUN_001042d0",
                "FUN_00104640",
                "FUN_00104290",
                "FUN_001044f0",
                "FUN_00104710",
                "FUN_00104130",
                "FUN_001284f0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00104160",
                "FUN_001043b0",
                "FUN_00104150",
                "FUN_00108d9a",
                "FUN_001047a0",
                "FUN_00114690",
                "FUN_00104540",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00116aa0"
            ],
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = create_symbol_htab();\n  DAT_001279f0 = create_symbol_htab();\n  DAT_00127a08 = create_symbol_htab();\n  DAT_001279e8 = create_symbol_htab();\n  DAT_001279e0 = create_symbol_htab();\n  DAT_001279d8 = create_symbol_htab();\n  DAT_001279d0 = create_symbol_htab();\n  DAT_001278d0 = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  DAT_001278c8 = create_symbol_htab();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = init_section_add(_optarg,DAT_001279c0,\"--add-section\");\n    section_add_load_file(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = parse_vma(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = init_section_add(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = parse_vma(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = parse_vma(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = init_section_add(_optarg,DAT_001279b8,\"--update-section\");\n    section_add_load_file(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "current_name": "FUNC_00116b90",
            "entrypoint": "0x00116b90",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00119940": {
            "additional_data": {
                "FUN_00119940": {
                    "1": "check_for_bad_number",
                    "10": "check_and_fatal_error",
                    "2": "check_and_fatal_if_bad_number",
                    "4": "validate_number"
                },
                "local_20": {
                    "1": "scanned_results",
                    "11": "scan_result",
                    "2": "scanned_values",
                    "4": "scanned_value"
                },
                "param_1": {
                    "1": "scan_address",
                    "2": "vma",
                    "3": "input_address",
                    "4": "input_param",
                    "5": "vma_address"
                },
                "param_2": {
                    "1": "additional_info",
                    "18": "error_message",
                    "3": "error_param",
                    "5": "message"
                },
                "uVar1": {
                    "1": "error_msg",
                    "2": "localized_error_message",
                    "3": "translated_error_message",
                    "4": "translated_message",
                    "6": "error_message"
                }
            },
            "called": [
                "FUN_00104920",
                "FUN_00104070"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid check_and_fatal_error_00119940(undefined8 vma_address,undefined8 error_message)\n\n{\n  undefined8 error_message;\n  char *scan_result [2];\n  \n  bfd_scan_vma(vma_address,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(error_message,error_message,vma_address);\n}\n\n",
            "current_name": "check_and_fatal_error_00119940",
            "entrypoint": "0x00119940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119940": "check_and_fatal_error_00119940",
                "local_20": "scan_result",
                "param_1": "vma_address",
                "param_2": "error_message",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119970": {
            "additional_data": {
                "5": {
                    "1": "lc_messages"
                },
                "FUN_00119970": {
                    "1": "print_program_information",
                    "19": "print_version_info",
                    "2": "print_gnu_version",
                    "4": "print_program_info"
                },
                "param_1": {
                    "1": "package_name",
                    "15": "version",
                    "5": "version_string",
                    "6": "program_name"
                },
                "pcVar1": {
                    "1": "copy_right_string",
                    "10": "copyright_message",
                    "2": "copyright_text",
                    "3": "license_text",
                    "4": "copyright_string",
                    "6": "message"
                }
            },
            "called": [
                "FUN_001047f0",
                "FUN_001042a0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_version_info_00119970(undefined8 version)\n\n{\n  char *copyright_message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyright_message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyright_message);\n  copyright_message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyright_message);\n                    \n  exit(0);\n}\n\n",
            "current_name": "print_version_info_00119970",
            "entrypoint": "0x00119970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "version",
                "pcVar1": "copyright_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001199d0": {
            "additional_data": {
                "DAT_001278c0": {
                    "1": "temp_dir_buffer"
                },
                "FUN_00104943": {
                    "1": "print_error_message"
                },
                "FUN_0011283f": {
                    "1": "unknown_function_2"
                },
                "FUN_001199d0": {
                    "1": "print_bfd_header_version",
                    "2": "display_binutils_version",
                    "5": "display_bfd_header_info"
                },
                "FUN_00119f70": {
                    "1": "unknown_function_3"
                },
                "__errno_location": {
                    "1": "get_errno_location",
                    "2": "get_error_number_location",
                    "3": "get_error_location"
                },
                "_stderr": {
                    "1": "error_output",
                    "2": "standard_error"
                },
                "_stdout": {
                    "2": "stdout",
                    "4": "standard_output"
                },
                "abort": {
                    "1": "stop_execution",
                    "2": "abort_program"
                },
                "bfd_iterate_over_targets": {
                    "1": "iterate_over_bfd_targets",
                    "4": "iterate_over_targets"
                },
                "bfd_printable_arch_mach": {
                    "1": "printable_arch_mach"
                },
                "close": {
                    "1": "close_file_descriptor",
                    "5": "close_file"
                },
                "dcgettext": {
                    "1": "get_bfd_header"
                },
                "do_display_target": {
                    "1": "display_target_information",
                    "2": "display_target"
                },
                "fprintf": {
                    "1": "formatted_print",
                    "3": "print_error_message"
                },
                "fputc": {
                    "1": "put_character"
                },
                "fputs": {
                    "1": "print_string_to_file",
                    "2": "write_string",
                    "3": "put_string"
                },
                "free": {
                    "2": "deallocate_memory",
                    "3": "free_memory"
                },
                "getenv": {
                    "6": "get_environment_variable"
                },
                "iVar1": {
                    "1": "max_arch_name_length",
                    "13": "columns",
                    "2": "temp_file_length",
                    "5": "column_width"
                },
                "iVar2": {
                    "1": "file_descriptor",
                    "10": "target_index",
                    "2": "target_iterator",
                    "3": "arch_index"
                },
                "iVar3": {
                    "1": "arch_index2",
                    "2": "strcmp_result",
                    "8": "comparison_result"
                },
                "iVar9": {
                    "1": "target_iterator",
                    "2": "arch_index",
                    "3": "counter",
                    "5": "arch_mach_index"
                },
                "isdigit": {
                    "1": "is_character_digit"
                },
                "itoa": {
                    "1": "integer_to_string"
                },
                "lVar10": {
                    "1": "loop_index",
                    "2": "index1",
                    "3": "length"
                },
                "lVar11": {
                    "1": "arch_mach_array_index",
                    "2": "start_index",
                    "3": "index2"
                },
                "local_70": {
                    "1": "loop_index",
                    "2": "arch_mach_index",
                    "5": "temp_file_descriptor"
                },
                "mkstemps": {
                    "1": "make_temp_file",
                    "2": "create_temporary_file",
                    "3": "create_temp_file"
                },
                "pcVar4": {
                    "1": "header",
                    "2": "header_message",
                    "3": "message",
                    "4": "header_string",
                    "5": "header_format",
                    "8": "header_version"
                },
                "pcVar6": {
                    "1": "temp",
                    "11": "temp_file_path",
                    "2": "temporary_dir",
                    "7": "temp_dir"
                },
                "piVar8": {
                    "1": "errno_value",
                    "2": "error_num",
                    "3": "error",
                    "6": "errno_location",
                    "8": "error_number"
                },
                "ppcVar12": {
                    "1": "string_array_ptr",
                    "2": "arch_mach_ptr",
                    "3": "arch_list",
                    "9": "arch_mach_array"
                },
                "printf": {
                    "1": "print_output"
                },
                "putc": {
                    "1": "write_character",
                    "4": "put_character"
                },
                "puts": {
                    "1": "print_string"
                },
                "sVar5": {
                    "1": "header_len",
                    "2": "header_format_length",
                    "3": "length",
                    "4": "header_version_length",
                    "5": "header_length",
                    "8": "string_length"
                },
                "strcmp": {
                    "5": "compare_strings"
                },
                "strcpy": {
                    "1": "string_copy",
                    "4": "copy_string"
                },
                "strerror": {
                    "1": "get_error_string",
                    "5": "get_error_message"
                },
                "strlen": {
                    "1": "get_string_length",
                    "2": "string_length"
                },
                "strncmp": {
                    "1": "compare_strings"
                },
                "strtol": {
                    "1": "convert_string_to_long",
                    "2": "string_to_long"
                },
                "try_dir_lto_priv_0": {
                    "1": "try_directories"
                },
                "uVar13": {
                    "1": "max_arch_mach_string_length",
                    "2": "max_arch_mach_len",
                    "4": "max_arch_length",
                    "6": "max_arch_mach_length",
                    "9": "max_length"
                },
                "uVar14": {
                    "1": "temp_var",
                    "2": "arch_mach_len",
                    "3": "length",
                    "4": "str_length",
                    "5": "arch_mach_length"
                },
                "uVar7": {
                    "1": "arch_mach_ptr",
                    "16": "result",
                    "2": "temp_dir_result"
                },
                "unlink": {
                    "2": "remove_file",
                    "4": "delete_file"
                },
                "xmalloc": {
                    "1": "dynamically_allocate_memory",
                    "4": "allocate_memory"
                }
            },
            "called": [
                "FUN_001040a0",
                "FUN_00104270",
                "FUN_00104890",
                "FUN_00104030",
                "FUN_001040c0",
                "FUN_001042a0",
                "FUN_00104620",
                "FUN_001040b0",
                "FUN_00104943",
                "FUN_00104040",
                "FUN_0011283f",
                "FUN_00104100",
                "FUN_001043c0",
                "FUN_00119f70",
                "FUN_001048f0",
                "FUN_001045a0",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid display_bfd_header_info_001199d0(void)\n\n{\n  int columns;\n  int target_index;\n  int comparison_result;\n  char *header_version;\n  size_t string_length;\n  char *temp_file_path;\n  undefined8 result;\n  int *error_number;\n  int arch_mach_index;\n  long length;\n  long index2;\n  char **arch_mach_array;\n  uint max_length;\n  ulong arch_mach_length;\n  int temp_file_descriptor;\n  \n  header_version = (char *)get_bfd_header_file_version(0,\"BFD header file version %s\\n\",5);\n  print_formatted(header_version,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    header_version = get_environment_variable(\"TMPDIR\");\n    result = try_temp_dir(header_version,0);\n    header_version = get_environment_variable(\"TMP\");\n    result = try_temp_dir(header_version,result);\n    header_version = get_environment_variable(\"TEMP\");\n    result = try_temp_dir(header_version,result);\n    result = try_temp_dir(&DAT_0011b39a,result);\n    result = try_temp_dir(\"/var/tmp\",result);\n    header_version = (char *)try_temp_dir(&DAT_00120324,result);\n    if (header_version == (char *)0x0) {\n      header_version = \".\";\n    }\n    string_length = string_length(header_version);\n    temp_file_path = (char *)allocate_memory((int)string_length + 2);\n    DAT_001278c0 = copy_string(temp_file_path,header_version);\n    DAT_001278c0[string_length & 0xffffffff] = '/';\n    DAT_001278c0[(int)string_length + 1] = '\\0';\n  }\n  header_version = DAT_001278c0;\n  string_length = string_length(DAT_001278c0);\n  length = (long)(int)string_length;\n  temp_file_path = (char *)allocate_memory(length + 9);\n  copy_string(temp_file_path,header_version);\n  *(undefined2 *)(temp_file_path + length) = 0x6363;\n  *(undefined4 *)(temp_file_path + length + 2) = 0x58585858;\n  *(undefined4 *)((long)(temp_file_path + length + 2) + 3) = 0x585858;\n  temp_file_path[length + 8] = '\\0';\n  target_index = create_temp_file(temp_file_path,0);\n  if (target_index == -1) {\n    error_number = get_error_location();\n    temp_file_path = get_error_message(*error_number);\n    print_error_message(standard_error,\"Cannot create temporary file in %s: %s\\n\",header_version,temp_file_path);\n                    \n    terminate_program();\n  }\n  target_index = close_file(target_index);\n  if (target_index != 0) {\n                    \n    terminate_program();\n  }\n  max_length = 0;\n  target_index = 2;\n  iterate_over_targets(display_target);\n  delete_file(temp_file_path);\n  free_memory(temp_file_path);\n  temp_file_descriptor = 0;\n  do {\n    header_version = (char *)printable_arch_mach(target_index);\n    string_length = string_length(header_version);\n    if ((int)max_length < (int)(uint)string_length) {\n      max_length = (uint)string_length;\n    }\n    target_index = target_index + 1;\n  } while (target_index != 0x57);\n  header_version = get_environment_variable(\"COLUMNS\");\n  target_index = temp_file_descriptor;\n  if (header_version != (char *)0x0) {\n    length = string_to_long(header_version,(char **)0x0,10);\n    columns = (int)length;\n    if (columns != 0) goto LAB_00119b11;\n  }\n  columns = 0x50;\nLAB_00119b11:\n  do {\n    temp_file_descriptor = target_index;\n    if (-1 < temp_file_descriptor) {\n      return;\n    }\n    index2 = (long)temp_file_descriptor;\n    arch_mach_index = (columns - max_length) + -1;\n    length = index2;\n    do {\n      target_index = (int)length;\n      if (-1 < target_index) break;\n      string_length = string_length(*(char **)(length * 0x60));\n      length = length + 1;\n      arch_mach_index = (arch_mach_index - (int)string_length) + -1;\n    } while (-1 < arch_mach_index);\n    print_formatted(\"\\n%*s\",(ulong)(max_length + 1),&DAT_0011b4a1);\n    for (arch_mach_array = (char **)(index2 * 0x60);\n        ((ulong)(uint)(target_index - temp_file_descriptor) + index2) * 0x60 - (long)arch_mach_array != 0;\n        arch_mach_array = arch_mach_array + 0xc) {\n      print_formatted(\"%s \",*arch_mach_array);\n    }\n    arch_mach_index = 2;\n    put_character(10,standard_output);\n    do {\n      header_version = (char *)printable_arch_mach(arch_mach_index,0);\n      comparison_result = compare_strings(header_version,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        result = printable_arch_mach(arch_mach_index,0);\n        print_formatted(\"%*s \",(ulong)max_length,result);\n        arch_mach_array = (char **)(index2 * 0x60);\n        comparison_result = temp_file_descriptor;\n        while (target_index != comparison_result) {\n          if (*(char *)((long)arch_mach_array + (ulong)(arch_mach_index - 2) + 8) == '\\0') {\n            string_length = string_length(*arch_mach_array);\n            for (arch_mach_length = string_length & 0xffffffff; (int)arch_mach_length != 0; arch_mach_length = (ulong)((int)arch_mach_length - 1)) {\n              put_character(0x2d,standard_output);\n            }\n          }\n          else {\n            put_string(*arch_mach_array,standard_output);\n          }\n          comparison_result = comparison_result + 1;\n          if (target_index != comparison_result) {\n            put_character(0x20,standard_output);\n          }\n          arch_mach_array = arch_mach_array + 0xc;\n        }\n        put_character(10,standard_output);\n      }\n      arch_mach_index = arch_mach_index + 1;\n    } while (arch_mach_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "display_bfd_header_info_001199d0",
            "entrypoint": "0x001199d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001199d0": "display_bfd_header_info_001199d0",
                "__errno_location": "get_error_location",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "abort": "terminate_program",
                "bfd_iterate_over_targets": "iterate_over_targets",
                "bfd_printable_arch_mach": "printable_arch_mach",
                "close": "close_file",
                "dcgettext": "get_bfd_header_file_version",
                "do_display_target": "display_target",
                "fprintf": "print_error_message",
                "fputs": "put_string",
                "free": "free_memory",
                "getenv": "get_environment_variable",
                "iVar1": "columns",
                "iVar2": "target_index",
                "iVar3": "comparison_result",
                "iVar9": "arch_mach_index",
                "lVar10": "length",
                "lVar11": "index2",
                "local_70": "temp_file_descriptor",
                "mkstemps": "create_temp_file",
                "pcVar4": "header_version",
                "pcVar6": "temp_file_path",
                "piVar8": "error_number",
                "ppcVar12": "arch_mach_array",
                "printf": "print_formatted",
                "putc": "put_character",
                "puts": "print_string",
                "sVar5": "string_length",
                "strcmp": "compare_strings",
                "strcpy": "copy_string",
                "strerror": "get_error_message",
                "strlen": "string_length",
                "strtol": "string_to_long",
                "try_dir_lto_priv_0": "try_temp_dir",
                "uVar13": "max_length",
                "uVar14": "arch_mach_length",
                "uVar7": "result",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119dd0": {
            "additional_data": {
                "FUN_00119dd0": {
                    "1": "reverse_and_report",
                    "17": "report_and_exit",
                    "3": "process_data",
                    "7": "execute_report_and_exit"
                },
                "FUN_00119e70": {
                    "1": "print_report"
                },
                "in_AL": {
                    "1": "should_report",
                    "13": "flag",
                    "2": "input_flag",
                    "5": "condition"
                },
                "local_18": {
                    "1": "report_param_8_copy",
                    "2": "report_param8_copy",
                    "4": "report_param8",
                    "5": "input8_copy"
                },
                "local_28": {
                    "1": "local_param7",
                    "2": "param7",
                    "4": "report_param7",
                    "5": "input7_copy"
                },
                "local_38": {
                    "1": "input_6_new",
                    "2": "report_param6_copy",
                    "4": "report_param6",
                    "5": "input6_copy"
                },
                "local_48": {
                    "1": "input_5_new",
                    "2": "report_param5_copy",
                    "4": "report_param5",
                    "5": "input5_copy"
                },
                "local_58": {
                    "1": "data4_copy",
                    "2": "report_param4_copy",
                    "4": "report_param4",
                    "5": "input4_copy"
                },
                "local_68": {
                    "1": "flag3_copy",
                    "2": "param3",
                    "4": "report_param3",
                    "5": "input3_copy"
                },
                "local_78": {
                    "1": "input2_improved",
                    "2": "report_param2_copy",
                    "4": "report_param2",
                    "5": "input2_copy"
                },
                "local_88": {
                    "1": "arg1",
                    "2": "report_param1_copy",
                    "4": "report_param1",
                    "5": "input1_copy"
                },
                "local_90": {
                    "1": "output6_temp",
                    "2": "report_param14_copy",
                    "3": "param14_copy",
                    "5": "param14"
                },
                "local_98": {
                    "1": "input_4_copy",
                    "2": "report_param13_copy",
                    "3": "param13_copy",
                    "5": "param13"
                },
                "local_a0": {
                    "1": "sub_output4",
                    "2": "local_param12",
                    "3": "param12_copy",
                    "5": "param12"
                },
                "local_a8": {
                    "1": "eleventh_param_copy",
                    "2": "report_param11_copy",
                    "3": "param11_copy",
                    "5": "param11"
                },
                "local_b0": {
                    "1": "report_param_10_copy",
                    "2": "local_param10",
                    "3": "param10_copy",
                    "5": "param10"
                },
                "local_b8": {
                    "1": "temp_array",
                    "11": "local_buffer",
                    "2": "temporary_buffer",
                    "5": "temp_buffer"
                },
                "local_b8 [8]": {
                    "1": "local_buffer"
                },
                "local_c8": {
                    "1": "local_var4",
                    "11": "local_buffer",
                    "4": "local_array",
                    "9": "buffer"
                },
                "local_d0": {
                    "1": "local_variable_3",
                    "3": "stack_pointer",
                    "4": "stack_ptr",
                    "5": "buffer"
                },
                "local_d4": {
                    "1": "local_size_of_local_d4",
                    "2": "constant",
                    "3": "length"
                },
                "local_d8": {
                    "1": "report_size",
                    "10": "size",
                    "2": "stack_size",
                    "5": "buffer_size"
                },
                "param_1": {
                    "1": "option_1",
                    "2": "input_1",
                    "3": "arg1",
                    "6": "report_param1",
                    "8": "input1"
                },
                "param_10": {
                    "1": "input_1",
                    "2": "output2",
                    "3": "param2",
                    "5": "report_param10",
                    "6": "param10"
                },
                "param_11": {
                    "1": "eleventh_param",
                    "2": "output3",
                    "3": "param3",
                    "5": "report_param11",
                    "6": "param11"
                },
                "param_12": {
                    "1": "data4",
                    "2": "arg3",
                    "3": "param4",
                    "5": "report_param12",
                    "6": "param12"
                },
                "param_13": {
                    "1": "param_d",
                    "2": "output5",
                    "3": "param5",
                    "5": "report_param13",
                    "6": "param13"
                },
                "param_14": {
                    "1": "data6",
                    "2": "arg5",
                    "3": "param6",
                    "5": "report_param14",
                    "6": "param14"
                },
                "param_2": {
                    "1": "option_2",
                    "2": "input_2",
                    "3": "arg2",
                    "6": "report_param2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "option_3",
                    "2": "input_3",
                    "3": "arg3",
                    "6": "report_param3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "data4",
                    "2": "input_4",
                    "3": "arg4",
                    "6": "report_param4",
                    "8": "input4"
                },
                "param_5": {
                    "1": "flag5",
                    "2": "value5",
                    "3": "arg5",
                    "6": "report_param5",
                    "8": "input5"
                },
                "param_6": {
                    "1": "data6",
                    "2": "sixth_param",
                    "3": "arg6",
                    "6": "report_param6",
                    "8": "input6"
                },
                "param_7": {
                    "1": "data7",
                    "2": "input_7",
                    "3": "arg7",
                    "6": "report_param7",
                    "8": "input7"
                },
                "param_8": {
                    "1": "data8",
                    "2": "input_8",
                    "3": "arg8",
                    "6": "report_param8",
                    "8": "input8"
                },
                "param_9": {
                    "1": "report_ptr",
                    "2": "output1",
                    "3": "param1",
                    "5": "report_data",
                    "6": "report_param9"
                },
                "report": {
                    "1": "report_function"
                },
                "xexit": {
                    "1": "exit_function",
                    "2": "exit_program"
                }
            },
            "called": [
                "FUN_00119e70",
                "FUN_00104760"
            ],
            "calling": [
                "FUN_00108808",
                "FUN_00116b90",
                "FUN_00104920",
                "FUN_00114dc7",
                "FUN_0010da0b",
                "FUN_0010543c",
                "FUN_0010827b",
                "FUN_001053b5",
                "FUN_00114190",
                "FUN_001083de",
                "FUN_00108d9a",
                "FUN_00114460",
                "FUN_00115b70",
                "FUN_00114690",
                "FUN_00104ad6",
                "FUN_0010554f"
            ],
            "code": "\nvoid report_and_exit_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 report_param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  length = 0x30;\n  param10 = param10;\n  param11 = param11;\n  param12 = param12;\n  param13 = param13;\n  param14 = param14;\n  log_data(report_param9,&size);\n                    \n  exit_program(1);\n}\n\n",
            "current_name": "report_and_exit_00119dd0",
            "entrypoint": "0x00119dd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119dd0": "report_and_exit_00119dd0",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param14",
                "local_98": "param13",
                "local_a0": "param12",
                "local_a8": "param11",
                "local_b0": "param10",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "length",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "report_param9",
                "report": "log_data",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119e70": {
            "additional_data": {
                "10": {
                    "1": "line_break"
                },
                "DAT_001275e0": {
                    "2": "program_name"
                },
                "FUN_00119e70": {
                    "1": "print_formatted_message",
                    "26": "print_error_message",
                    "3": "print_formatted_error_message"
                },
                "__gnuc_va_list": {
                    "1": "variable_arguments"
                },
                "__gnuc_va_list param_2": {
                    "1": "va_arguments",
                    "2": "args"
                },
                "_stderr": {
                    "1": "error_output_stream",
                    "18": "standard_error",
                    "2": "stderr"
                },
                "_stdout": {
                    "1": "standard_output_stream",
                    "19": "standard_output",
                    "2": "stdout"
                },
                "fflush": {
                    "1": "clear_stream",
                    "3": "flush_standard_output"
                },
                "flush": {
                    "1": "flush_output"
                },
                "fprintf": {
                    "1": "format_and_write_to_standard_error",
                    "2": "print_to_standard_error"
                },
                "param_1": {
                    "1": "message_format",
                    "18": "error_message",
                    "4": "format_string",
                    "8": "message"
                },
                "param_2": {
                    "1": "format_args",
                    "15": "arguments",
                    "7": "args"
                },
                "putc": {
                    "1": "put_character",
                    "2": "print_new_line",
                    "4": "write_character"
                },
                "putchar": {
                    "1": ""
                },
                "vfprintf": {
                    "1": "print_formatted_error"
                }
            },
            "called": [
                "FUN_001045e0",
                "FUN_00104480",
                "FUN_00104770",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "code": "\n\n\nvoid print_error_message_00119e70(char *error_message,variadic_arguments arguments)\n\n{\n  flush_standard_output(standard_output);\n  print_to_standard_error(standard_error,\"%s: \",DAT_001275e0);\n  vprint_to_standard_error(standard_error,error_message,arguments);\n  write_character(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_00119e70",
            "entrypoint": "0x00119e70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "__gnuc_va_list": "variadic_arguments",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_standard_output",
                "flush": "flush_output",
                "fprintf": "print_to_standard_error",
                "param_1": "error_message",
                "param_2": "arguments",
                "putc": "write_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119ed0": {
            "additional_data": {
                "FUN_00119e70": {
                    "1": "process_data"
                },
                "FUN_00119ed0": {
                    "1": "report_and_send_data",
                    "20": "report_data",
                    "3": "report_function"
                },
                "in_AL": {
                    "1": "some_condition",
                    "11": "flag",
                    "2": "input_flag"
                },
                "local_18": {
                    "1": "value_8_copy",
                    "2": "data8_copy",
                    "3": "input8_copy"
                },
                "local_28": {
                    "1": "value7",
                    "2": "input_7",
                    "3": "input7_copy"
                },
                "local_38": {
                    "1": "user_param6",
                    "2": "data6_copy",
                    "3": "input6_copy"
                },
                "local_48": {
                    "1": "user_param5",
                    "2": "local_data5",
                    "3": "input5_copy"
                },
                "local_58": {
                    "1": "local_var13",
                    "2": "data4_copy",
                    "3": "input4_copy"
                },
                "local_68": {
                    "1": "local_var_12",
                    "2": "local_data3",
                    "3": "input3_copy"
                },
                "local_78": {
                    "1": "temp_report_param_2",
                    "2": "input2",
                    "3": "input2_copy"
                },
                "local_88": {
                    "1": "data1",
                    "2": "input1",
                    "3": "input1_copy"
                },
                "local_90": {
                    "1": "local_output5",
                    "3": "param_14"
                },
                "local_98": {
                    "1": "temp_param_13",
                    "3": "param_13"
                },
                "local_a0": {
                    "1": "param_d",
                    "3": "param_12"
                },
                "local_a8": {
                    "1": "ptr2",
                    "3": "param_11"
                },
                "local_b0": {
                    "1": "temp1",
                    "3": "param10_copy"
                },
                "local_b8": {
                    "1": "buffer_data",
                    "2": "temporary_buffer",
                    "4": "buffer",
                    "6": "temp_buffer",
                    "7": "local_buffer"
                },
                "local_c8": {
                    "1": "local_var4",
                    "13": "local_buffer",
                    "2": "pointer2",
                    "4": "buffer"
                },
                "local_d0": {
                    "1": "local_var_3",
                    "10": "buffer",
                    "2": "pointer1"
                },
                "local_d4": {
                    "1": "local_var4",
                    "2": "buffer_length",
                    "3": "length"
                },
                "local_d8": {
                    "1": "stack_array_size",
                    "14": "size",
                    "2": "length",
                    "3": "stack_size",
                    "7": "buffer_size"
                },
                "param_1": {
                    "1": "report_param_1",
                    "10": "input1",
                    "2": "input_1",
                    "6": "data1"
                },
                "param_10": {
                    "1": "ptr2",
                    "2": "report_param2",
                    "3": "param_10",
                    "4": "param10",
                    "5": "output2"
                },
                "param_11": {
                    "1": "ptr2",
                    "2": "report_param3",
                    "3": "param_11",
                    "4": "param11",
                    "5": "output3"
                },
                "param_12": {
                    "1": "param4_pointer",
                    "2": "report_param4",
                    "3": "param_12",
                    "4": "param12",
                    "5": "output4"
                },
                "param_13": {
                    "1": "input_param13",
                    "2": "report_param5",
                    "3": "param_13",
                    "4": "param13",
                    "5": "output5"
                },
                "param_14": {
                    "1": "input_param14",
                    "2": "report_param6",
                    "3": "param_14",
                    "4": "param14",
                    "5": "output6"
                },
                "param_2": {
                    "1": "user_param2",
                    "10": "input2",
                    "2": "input_param2",
                    "6": "data2"
                },
                "param_3": {
                    "1": "report_param_3",
                    "10": "input3",
                    "2": "input_3",
                    "6": "data3"
                },
                "param_4": {
                    "1": "value_4",
                    "10": "input4",
                    "2": "input_4",
                    "6": "data4"
                },
                "param_5": {
                    "1": "value5",
                    "10": "input5",
                    "2": "input_5",
                    "6": "data5"
                },
                "param_6": {
                    "1": "data_6",
                    "10": "input6",
                    "2": "input_param6",
                    "6": "data6"
                },
                "param_7": {
                    "1": "value7",
                    "10": "input7",
                    "2": "input_7",
                    "6": "data7"
                },
                "param_8": {
                    "1": "local_param_8",
                    "10": "input8",
                    "2": "input_8",
                    "6": "data8"
                },
                "param_9": {
                    "1": "report_value",
                    "2": "report_param1",
                    "3": "report_pointer",
                    "5": "output1"
                },
                "report": {
                    "1": "send_report"
                }
            },
            "called": [
                "FUN_00119e70"
            ],
            "calling": [
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_0010882c",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_00108200",
                "FUN_0010dac0",
                "FUN_00108375",
                "FUN_00105828",
                "FUN_0011378f",
                "FUN_001152b6",
                "FUN_00113f50",
                "FUN_0010e2f0",
                "FUN_00107880",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00104cc1",
                "FUN_0010e07c",
                "FUN_001086af",
                "FUN_00114690",
                "FUN_00104ad6",
                "FUN_0010554f"
            ],
            "code": "\nvoid report_data_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 output1,undefined8 output2,undefined8 output3,undefined8 output4,\n                 undefined8 output5,undefined8 output6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param_10;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  length = 0x30;\n  param_10 = output2;\n  param_11 = output3;\n  param_12 = output4;\n  param_13 = output5;\n  param_14 = output6;\n  send_report(output1,&size);\n  return;\n}\n\n",
            "current_name": "report_data_00119ed0",
            "entrypoint": "0x00119ed0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119ed0": "report_data_00119ed0",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param_14",
                "local_98": "param_13",
                "local_a0": "param_12",
                "local_a8": "param_11",
                "local_b0": "param_10",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "length",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "output2",
                "param_11": "output3",
                "param_12": "output4",
                "param_13": "output5",
                "param_14": "output6",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "output1",
                "report": "send_report"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119f70": {
            "additional_data": {
                "FUN_001053d5": {
                    "1": "func1",
                    "3": "initialize"
                },
                "FUN_00114e00": {
                    "1": "bfd_close_all_done"
                },
                "FUN_00119f70": {
                    "1": "parse_and_print_header_data",
                    "2": "process_header_data",
                    "3": "process_binary"
                },
                "FUN_0011a110": {
                    "1": "print_architecture"
                },
                "__format": {
                    "1": "output_format",
                    "20": "format_string",
                    "3": "print_format"
                },
                "bfd_close_all_done": {
                    "1": "close_all_done"
                },
                "bfd_get_error": {
                    "2": "get_bfd_error"
                },
                "bfd_nonfatal": {
                    "1": "nonfatal_bfd"
                },
                "bfd_openw": {
                    "1": "open_writable_bfd"
                },
                "bfd_printable_arch_mach": {
                    "1": "printable_arch_mach"
                },
                "bfd_set_format": {
                    "2": "set_bfd_format"
                },
                "cVar2": {
                    "1": "success_flag",
                    "10": "result",
                    "2": "format_result",
                    "3": "char_var",
                    "4": "status"
                },
                "iVar3": {
                    "1": "count",
                    "14": "index",
                    "2": "arch_mach_index",
                    "3": "counter",
                    "5": "arch_index"
                },
                "lVar6": {
                    "1": "open_result",
                    "2": "memory_size",
                    "5": "allocation_size",
                    "7": "allocated_size",
                    "9": "buffer_size"
                },
                "lVar8": {
                    "1": "buffer_ptr",
                    "2": "new_buffer",
                    "5": "allocated_memory",
                    "7": "realloc_result"
                },
                "param_1": {
                    "1": "header_array",
                    "14": "header",
                    "2": "header_info",
                    "9": "header_data"
                },
                "param_2": {
                    "1": "bfd_info",
                    "2": "file_data",
                    "5": "output_data",
                    "7": "data"
                },
                "uVar1": {
                    "1": "status",
                    "2": "header_length",
                    "3": "format_version",
                    "6": "header_size",
                    "9": "format"
                },
                "uVar4": {
                    "1": "endian_header_format",
                    "2": "endian_string_header",
                    "3": "endian_header",
                    "4": "endian_string_1",
                    "8": "endian_string1"
                },
                "uVar5": {
                    "1": "endian_data_string",
                    "2": "endian_string_data",
                    "3": "endian_data",
                    "4": "endian_string_2",
                    "8": "endian_string2"
                },
                "uVar7": {
                    "1": "filename",
                    "4": "printable_arch_mach",
                    "5": "header_value"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001053d5",
                "FUN_00104360",
                "FUN_00104900",
                "FUN_0011a110",
                "FUN_001045a0",
                "FUN_00114e00",
                "FUN_00104690",
                "FUN_001042a0",
                "FUN_00104240",
                "FUN_001042b0",
                "FUN_00104500"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nundefined4 parse_and_print_header_00119f70(undefined8 *header,undefined8 *data)\n\n{\n  undefined4 format;\n  char result;\n  int index;\n  undefined8 endian_string1;\n  undefined8 endian_string2;\n  char *format_string;\n  long buffer_size;\n  undefined8 header_value;\n  long realloc_result;\n  \n  index = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = index;\n  if ((ulong)data[2] < (ulong)((long)index * 0x60)) {\n    buffer_size = 0x3000;\n    if (0x3f < index) {\n      buffer_size = (long)index * 0xc0;\n    }\n    realloc_result = xrealloc(data[3]);\n    data[3] = realloc_result;\n    memset((void *)(realloc_result + data[2]),0,buffer_size - data[2]);\n    data[2] = buffer_size;\n  }\n  format = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header;\n  endian_string1 = endian_string(format);\n  endian_string2 = endian_string(*(undefined4 *)(header + 2));\n  header_value = *header;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,header_value,endian_string2,endian_string1);\n  buffer_size = open_writable_bfd(*data,*header);\n  if (buffer_size == 0) {\n    nonfatal_bfd(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    index = 2;\n    result = set_bfd_format(buffer_size,1);\n    if (result == '\\0') {\n      index = get_bfd_error();\n      if (index != 5) {\n        nonfatal_bfd(*header);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        result = (**(code **)(*(long *)(buffer_size + 8) + 0x2a0))(buffer_size,index,0);\n        if (result != '\\0') {\n          header_value = printable_arch_mach(index,0);\n          printf(\"  %s\\n\",header_value);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    close_all_done(buffer_size);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "current_name": "parse_and_print_header_00119f70",
            "entrypoint": "0x00119f70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119f70": "parse_and_print_header_00119f70",
                "__format": "format_string",
                "bfd_close_all_done": "close_all_done",
                "bfd_get_error": "get_bfd_error",
                "bfd_nonfatal": "nonfatal_bfd",
                "bfd_openw": "open_writable_bfd",
                "bfd_printable_arch_mach": "printable_arch_mach",
                "bfd_set_format": "set_bfd_format",
                "cVar2": "result",
                "iVar3": "index",
                "lVar6": "buffer_size",
                "lVar8": "realloc_result",
                "param_1": "header",
                "param_2": "data",
                "uVar1": "format",
                "uVar4": "endian_string1",
                "uVar5": "endian_string2",
                "uVar7": "header_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a0e0": {
            "additional_data": {
                "FUM_0011a0e0": {
                    "1": "create_temp_directory"
                },
                "FUN_001081e9": {
                    "1": "initialize_template_directory"
                },
                "FUN_00114cf0": {
                    "1": "remove_directory"
                },
                "FUN_0011a0e0": {
                    "1": "generate_temp_directory",
                    "2": "create_temporary_directory",
                    "26": "create_temp_directory"
                },
                "__template": {
                    "1": "directory_path",
                    "15": "template_path",
                    "2": "directory_template",
                    "4": "template"
                },
                "free": {
                    "1": "free_directory",
                    "3": "free_memory",
                    "6": "release_memory"
                },
                "mkdtemp": {
                    "1": "create_temporary_directory",
                    "12": "make_temp_directory",
                    "2": "make_temporary_directory"
                },
                "param_1": {
                    "1": "directory_path"
                },
                "pcVar1": {
                    "1": "temporary_directory_path",
                    "2": "temporary_directory",
                    "3": "created_directory",
                    "4": "temp_dir_path",
                    "5": "temp_directory",
                    "6": "result",
                    "7": "temp_directory_path"
                },
                "template": {
                    "1": "template"
                },
                "template_in_dir": {
                    "1": "get_template_from_directory",
                    "14": "get_template_directory",
                    "2": "get_template_directory_path",
                    "5": "get_template_path"
                }
            },
            "called": [
                "FUN_00104670",
                "FUN_001081e9",
                "FUN_00114cf0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template_path;\n  char *temp_directory_path;\n  \n  template_path = (char *)get_template_directory();\n  temp_directory_path = make_temp_directory(template_path);\n  if (temp_directory_path == (char *)0x0) {\n    release_memory(template_path);\n  }\n  return temp_directory_path;\n}\n\n",
            "current_name": "create_temp_directory_0011a0e0",
            "entrypoint": "0x0011a0e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template_path",
                "free": "release_memory",
                "mkdtemp": "make_temp_directory",
                "pcVar1": "temp_directory_path",
                "template_in_dir": "get_template_directory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a110": {
            "additional_data": {
                "FUN_0010871c": {
                    "1": "helper_function"
                },
                "FUN_0011a110": {
                    "1": "print_error_details",
                    "19": "print_error_message",
                    "2": "print_bfd_error_message",
                    "8": "print_error"
                },
                "iVar1": {
                    "1": "error_status",
                    "15": "error",
                    "2": "error_type",
                    "8": "error_code"
                },
                "in_R10": {
                    "1": "unknown_argument",
                    "2": "unknown_value",
                    "8": "additional_info"
                },
                "param_1": {
                    "1": "error",
                    "10": "error_message",
                    "2": "filename",
                    "4": "file_name",
                    "9": "error_type"
                },
                "stderr": {
                    "1": "standard_error"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "uVar2": {
                    "1": "err_msg",
                    "2": "error_message_text",
                    "20": "error_message",
                    "4": "error_msg"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001047a0",
                "FUN_0010871c"
            ],
            "calling": [
                "FUN_001053d5",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_00119f70",
                "FUN_001083b7"
            ],
            "code": "\n\n\nvoid print_error_message_0011a110(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(_standard_output);\n  if (error_message != 0) {\n    fprintf(_standard_error,\"%s: %s: %s\\n\",DAT_001275e0,error_message,error_message,additional_info);\n    return;\n  }\n  fprintf(_standard_error,\"%s: %s\\n\",DAT_001275e0,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_0011a110",
            "entrypoint": "0x0011a110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "iVar1": "error",
                "in_R10": "additional_info",
                "param_1": "error_message",
                "stderr": "standard_error",
                "stdout": "standard_output",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a170": {
            "additional_data": {
                "FUN_0011a170": {
                    "1": "reverse_pattern_match",
                    "11": "pattern_match",
                    "12": "match_pattern",
                    "2": "check_fnmatch"
                },
                "__pattern": {
                    "1": "pattern_first_char",
                    "19": "current_pattern",
                    "5": "pattern"
                },
                "iVar1": {
                    "1": "matching_result",
                    "19": "match_result",
                    "7": "result"
                },
                "param_1": {
                    "1": "pattern_pointer",
                    "2": "pattern1",
                    "26": "pattern"
                },
                "param_2": {
                    "1": "string_pointer",
                    "2": "pattern2",
                    "4": "string_to_match",
                    "6": "input_string",
                    "8": "string"
                }
            },
            "called": [
                "FUN_00104340"
            ],
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "code": "\nint match_pattern_0011a170(char **pattern,char **string)\n\n{\n  char *current_pattern;\n  int match_result;\n  \n  current_pattern = *pattern;\n  if (*current_pattern == '!') {\n    match_result = fnmatch(current_pattern + 1,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 0;\n      return match_result;\n    }\n  }\n  else {\n    match_result = fnmatch(current_pattern,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "match_pattern_0011a170",
            "entrypoint": "0x0011a170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a170": "match_pattern_0011a170",
                "__pattern": "current_pattern",
                "iVar1": "match_result",
                "param_1": "pattern",
                "param_2": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a1b0": {
            "additional_data": {
                "FUN_0011a1b0": {
                    "1": "compare_and_determine_order",
                    "2": "compare_data",
                    "3": "compare_memory_regions",
                    "8": "compare_memory"
                },
                "auVar5": {
                    "1": "return_val",
                    "7": "output",
                    "9": "result"
                },
                "extraout_var": {
                    "1": "extra_out_var",
                    "2": "extra_output",
                    "3": "extra_result"
                },
                "iVar3": {
                    "1": "compare_result",
                    "12": "comparison_result",
                    "6": "memcmp_result",
                    "9": "result"
                },
                "memcmp": {
                    "1": "compare_memory"
                },
                "memcmp_arg1": {
                    "1": "first_array_memory"
                },
                "memcmp_arg2": {
                    "1": "second_array_memory"
                },
                "param_1": {
                    "1": "source1",
                    "2": "size1",
                    "3": "data1",
                    "4": "input1"
                },
                "param_2": {
                    "1": "input_set2",
                    "2": "region2",
                    "3": "data2",
                    "4": "input2"
                },
                "param_3": {
                    "1": "size_of_source_memory",
                    "2": "value1",
                    "3": "param1",
                    "4": "size1"
                },
                "param_4": {
                    "1": "length_2",
                    "2": "value2",
                    "3": "param2",
                    "4": "param4"
                },
                "uVar1": {
                    "1": "input1_value",
                    "2": "size1"
                },
                "uVar2": {
                    "1": "length_2",
                    "2": "array2_length"
                },
                "uVar4": {
                    "1": "function_result",
                    "11": "combined_result",
                    "4": "comparison_result",
                    "6": "result",
                    "8": "final_result"
                }
            },
            "called": [
                "FUN_00104420",
                "FUN_001087da"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nundefined  [16] compare_memory_0011a1b0(ulong *input1,ulong *input2,undefined8 param3,undefined8 param4)\n\n{\n  ulong size1;\n  ulong size2;\n  int comparison_result;\n  undefined4 extra_result;\n  ulong combined_result;\n  undefined return_value [16];\n  \n  combined_result = *input1;\n  if (*input2 <= *input1) {\n    combined_result = *input2;\n  }\n  comparison_result = compare_memory_0011a1b0((void *)(input1[3] + 3),(void *)(input2[3] + 3),combined_result - 3);\n  combined_result = CONCAT44(extra_result,comparison_result);\n  if (comparison_result == 0) {\n    size1 = input1[8];\n    if (size1 < input2[7]) {\n      combined_result = 0xffffffff;\n    }\n    else {\n      size2 = input2[8];\n      if (size2 < input1[7]) {\n        combined_result = 1;\n      }\n      else {\n        combined_result = 0xffffffff;\n        if (input2[7] <= input1[7]) {\n          if (size2 < size1) {\n            combined_result = 1;\n          }\n          else {\n            combined_result = 0xffffffff;\n            if (size2 <= size1) {\n              if (input1[2] == 0x100) {\n                combined_result = (ulong)-(uint)(input2[2] != 0x100);\n              }\n              else {\n                combined_result = (ulong)(input2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return_value._8_8_ = param4;\n  return_value._0_8_ = combined_result;\n  return return_value;\n}\n\n",
            "current_name": "compare_memory_0011a1b0",
            "entrypoint": "0x0011a1b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "auVar5": "return_value",
                "extraout_var": "extra_result",
                "iVar3": "comparison_result",
                "memcmp": "compare_memory",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "size1",
                "uVar2": "size2",
                "uVar4": "combined_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a250": {
            "additional_data": {
                "*(char *)(param_1[3] + 3)": {
                    "1": "record1_value3_plus3"
                },
                "*(char *)(param_2[3] + 3)": {
                    "1": "record2_val3_char"
                },
                "*param_1": {
                    "1": "record1_field"
                },
                "*param_1[3]": {
                    "1": "record1_data"
                },
                "*param_2": {
                    "1": "record2_value1"
                },
                "*param_2[3]": {
                    "1": "record2_data"
                },
                "3": {
                    "1": "char_index"
                },
                "4": {
                    "1": "record_size"
                },
                "7": {
                    "1": "value_index1"
                },
                "8": {
                    "1": "value_index2"
                },
                "FUN_0011a250": {
                    "1": "compare_param_values",
                    "24": "compare_records"
                },
                "char": {
                    "1": "character"
                },
                "param_1": {
                    "1": "block_1",
                    "18": "record1",
                    "6": "record_1"
                },
                "param_1[0]": {
                    "1": "record_1_length"
                },
                "param_1[2]": {
                    "1": "record1_value2"
                },
                "param_1[3]": {
                    "1": "record_a_data"
                },
                "param_1[7]": {
                    "1": "record1_value7",
                    "2": "record1_value_7"
                },
                "param_1[8]": {
                    "1": "record1_value2",
                    "2": "record1_value_8"
                },
                "param_2": {
                    "1": "block_2",
                    "18": "record2",
                    "6": "record_2"
                },
                "param_2[0]": {
                    "1": "record_2_length"
                },
                "param_2[2]": {
                    "1": "record_b_key"
                },
                "param_2[3]": {
                    "1": "record2_data"
                },
                "param_2[7]": {
                    "1": "record2_value1",
                    "2": "record2_value_7"
                },
                "param_2[8]": {
                    "1": "second_parameter_element_8",
                    "2": "record2_value_8"
                },
                "record1[2]": {
                    "1": "record1_value2",
                    "2": "record1_field2"
                },
                "record1[3]": {
                    "1": "record1_field3"
                },
                "record1[7]": {
                    "1": "record1_value7"
                },
                "record1[8]": {
                    "1": "record1_field8",
                    "2": "record1_value"
                },
                "record2[2]": {
                    "1": "record2_timestamp",
                    "2": "record2_field2"
                },
                "record2[3]": {
                    "1": "record2_address3"
                },
                "record2[7]": {
                    "1": "record2_field7"
                },
                "record2[8]": {
                    "1": "record2_field8",
                    "2": "record2_value"
                },
                "record_1[2]": {
                    "1": "record_1_flag"
                },
                "record_1[7]": {
                    "1": "record_1_value_1"
                },
                "record_1[8]": {
                    "1": "record_1_value_2"
                },
                "record_2[2]": {
                    "1": "record_2_flag"
                },
                "record_2[7]": {
                    "1": "record_2_field_7_value"
                },
                "record_2[8]": {
                    "1": "record_2_field_8_value"
                },
                "return value": {
                    "1": "comparison_result"
                },
                "uVar1": {
                    "1": "block2_param2_value",
                    "2": "record1_value",
                    "3": "record1_field2"
                }
            },
            "called": [
                "FUN_001087fd"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nint compare_records_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_value2;\n  \n  record1_value2 = record1_val2;\n  if (record1_value2 == record2_val2) {\n    if (record2_value_7 <= record1_value_7) {\n      if (record1_value_7 <= record2_value_7) {\n        if (record2_value_8 < record1_value_8) {\n          return -1;\n        }\n        if (record2_value_8 <= record1_value_8) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(character *)(record1_data + 3) != *(character *)(record2_data + 3)) {\n              return (int)*(character *)(record1_data + 3) - (int)*(character *)(record2_data + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_value2 == 0) || ((record1_value2 != 0x100 && (record2_val2 != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "current_name": "compare_records_0011a250",
            "entrypoint": "0x0011a250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "char": "character",
                "param_1": "record1",
                "param_1[2]": "record1_val2",
                "param_1[3]": "record1_data",
                "param_1[7]": "record1_value_7",
                "param_1[8]": "record1_value_8",
                "param_2": "record2",
                "param_2[2]": "record2_val2",
                "param_2[3]": "record2_data",
                "param_2[7]": "record2_value_7",
                "param_2[8]": "record2_value_8",
                "uVar1": "record1_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a2e0": {
            "additional_data": {
                "0x128598": {
                    "1": "default_section_value"
                },
                "FUN_0011a2e0": {
                    "1": "decode_and_update_section",
                    "11": "extract_section_info",
                    "3": "extract_section_from_binary",
                    "4": "extract_section_data"
                },
                "bfd_get_section_by_name": {
                    "2": "get_section_by_name"
                },
                "dcgettext": {
                    "1": "translate_error_message",
                    "2": "get_error_message"
                },
                "fatal": {
                    "1": "handle_error",
                    "2": "handle_fatal_error"
                },
                "lVar3": {
                    "1": "decoded_section_ptr",
                    "2": "section_info",
                    "3": "section_info_ptr",
                    "4": "section"
                },
                "lVar4": {
                    "1": "section_id",
                    "10": "section_ptr",
                    "2": "section_offset",
                    "3": "section_by_name",
                    "8": "section_name"
                },
                "param_1": {
                    "1": "src_data",
                    "2": "source_data",
                    "3": "section_data",
                    "7": "section_info"
                },
                "param_2": {
                    "1": "bfd_ptr",
                    "2": "param",
                    "3": "binary_file",
                    "4": "binary_ptr",
                    "5": "binary_data",
                    "9": "binary"
                },
                "uVar1": {
                    "1": "section_ptr_name",
                    "2": "original_section_name",
                    "3": "section_name"
                },
                "uVar2": {
                    "1": "section_name",
                    "4": "error_msg",
                    "6": "error_message"
                }
            },
            "called": [
                "FUN_00108808",
                "FUN_00104400"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nlong extract_section_info_0011a2e0(long section_info,long binary)\n\n{\n  undefined8 section_ptr;\n  undefined8 error_message;\n  long section;\n  long section_ptr;\n  \n  section = (**(code **)(*(long *)(binary + 8) + 0x208))(binary);\n  section_ptr = *(long *)(section_info + 0x20);\n  *(undefined8 *)(section + 8) = *(undefined8 *)(section_info + 8);\n  *(undefined8 *)(section + 0x10) = *(undefined8 *)(section_info + 0x10);\n  *(undefined4 *)(section + 0x18) = *(undefined4 *)(section_info + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = get_section_by_name(binary);\n    if (section_ptr == 0) {\n      section_ptr = *(undefined8 *)(section_info + 0x20);\n      error_message = get_error_message(0,\"Section %s not found\",5);\n                    \n      handle_fatal_error(error_message,section_ptr);\n    }\n  }\n  *(long *)(section + 0x20) = section_ptr;\n  return section;\n}\n\n",
            "current_name": "extract_section_info_0011a2e0",
            "entrypoint": "0x0011a2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "bfd_get_section_by_name": "get_section_by_name",
                "dcgettext": "get_error_message",
                "fatal": "handle_fatal_error",
                "lVar3": "section",
                "lVar4": "section_ptr",
                "param_1": "section_info",
                "param_2": "binary",
                "uVar1": "section_ptr",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a350": {
            "additional_data": {
                "*pcVar3": {
                    "1": "error_string"
                },
                "*piVar2": {
                    "1": "error_code"
                },
                "FUN_0011a350": {
                    "1": "set_file_times",
                    "2": "set_file_timestamps",
                    "20": "set_file_time",
                    "3": "set_file_modification_time"
                },
                "iVar1": {
                    "29": "result"
                },
                "local_28": {
                    "1": "target_directory_access_time",
                    "2": "backup_access_time"
                },
                "local_38": {
                    "1": "time_spec1",
                    "13": "access_time",
                    "2": "timespec_buf"
                },
                "non_fatal": {
                    "1": "handle_non_fatal_error"
                },
                "param_1": {
                    "1": "file_name",
                    "2": "filename",
                    "28": "file_path"
                },
                "param_2": {
                    "1": "file_struct",
                    "22": "file_info",
                    "3": "file_info_ptr"
                },
                "pcVar3": {
                    "1": "error_str",
                    "11": "error_message",
                    "3": "err_msg",
                    "5": "error_msg",
                    "7": "error_string"
                },
                "piVar2": {
                    "1": "p_error",
                    "2": "error_ptr",
                    "3": "error",
                    "5": "error_code",
                    "7": "errno_ptr"
                },
                "uStack_1c": {
                    "1": "backup_creation_time"
                },
                "uStack_20": {
                    "1": "x60_value"
                },
                "uStack_24": {
                    "1": "current_access_time_nsec",
                    "2": "backup_modification_time"
                },
                "uStack_2c": {
                    "1": "mod_time_nsec",
                    "2": "change_time",
                    "5": "creation_time"
                },
                "uStack_30": {
                    "1": "flags",
                    "2": "creation_time",
                    "5": "change_time"
                },
                "uStack_34": {
                    "1": "time_spec2",
                    "9": "modification_time"
                },
                "uVar4": {
                    "1": "err_msg_str",
                    "2": "translated_message",
                    "3": "error_msg",
                    "4": "localized_error_message",
                    "5": "error_message",
                    "6": "translated_error_message"
                },
                "utimensat": {
                    "1": "set_file_times"
                }
            },
            "called": [
                "FUN_0010882c",
                "FUN_00104060"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "code": "\nvoid set_file_time_0011a350(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 translated_error_message;\n  undefined4 access_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 creation_time;\n  undefined4 modification_time;\n  undefined4 backup_modification_time;\n  undefined4 target_directory_creation_time;\n  undefined4 target_directory_change_time;\n  \n  modification_time = *(undefined4 *)(file_info + 0x58);\n  backup_modification_time = *(undefined4 *)(file_info + 0x5c);\n  target_directory_creation_time = *(undefined4 *)(file_info + 0x60);\n  target_directory_change_time = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  modification_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  creation_time = *(undefined4 *)(file_info + 0x54);\n  result = set_file_time_0011a350s(-100,file_path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_message = strerror(*errno_ptr);\n    translated_error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    handle_non_fatal_error(translated_error_message,file_path,error_message);\n  }\n  return;\n}\n\n",
            "current_name": "set_file_time_0011a350",
            "entrypoint": "0x0011a350",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "iVar1": "result",
                "local_28": "modification_time",
                "local_38": "access_time",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "file_path",
                "param_2": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "uStack_1c": "target_directory_change_time",
                "uStack_20": "target_directory_creation_time",
                "uStack_24": "backup_modification_time",
                "uStack_2c": "creation_time",
                "uStack_30": "change_time",
                "uStack_34": "modification_time",
                "uVar4": "translated_error_message",
                "utimensat": "set_file_times"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a390": {
            "additional_data": {
                "FUN_0011a390": {
                    "1": "execute_instructions",
                    "3": "execute_functions",
                    "8": "execute_function_chain"
                },
                "PTR_DAT_001264c0": {
                    "1": "function_list_pointer"
                },
                "code": {
                    "1": "function_pointer"
                },
                "lVar1": {
                    "1": "array_index",
                    "10": "index",
                    "2": "index1",
                    "8": "current_index"
                },
                "lVar2": {
                    "1": "inner_loop_counter",
                    "2": "index2",
                    "3": "temp_index",
                    "8": "previous_index",
                    "9": "prev_index"
                },
                "lVar3": {
                    "1": "temp_loop_index",
                    "12": "temp_index",
                    "2": "index3",
                    "3": "inner_index",
                    "4": "prev_prev_index"
                },
                "plVar4": {
                    "1": "function_pointer_list",
                    "2": "function_array",
                    "3": "callback_list",
                    "5": "function_pointers",
                    "7": "function_list",
                    "8": "function_chain"
                },
                "uVar5": {
                    "1": "loop_index",
                    "2": "index",
                    "3": "counter",
                    "4": "function_count",
                    "5": "function_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid execute_function_chain_0011a390(void)\n\n{\n  long index;\n  long prev_index;\n  long temp_index;\n  long *function_chain;\n  uint function_index;\n  \n  function_chain = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      function_index = *(int *)(function_chain + 1) - 1;\n      if (-1 < (int)function_index) {\n        index = (long)(int)function_index;\n        function_index = function_index & 7;\n        (*(function_pointer *)function_chain[index + 2])();\n        prev_index = index + -1;\n        if (-1 < (int)prev_index) {\n          temp_index = prev_index;\n          if (function_index != 0) {\n            if (function_index != 1) {\n              if (function_index != 2) {\n                if (function_index != 3) {\n                  if (function_index != 4) {\n                    if (function_index != 5) {\n                      if (function_index != 6) {\n                        (*(function_pointer *)function_chain[index + 1])();\n                        prev_index = index + -2;\n                      }\n                      (*(function_pointer *)function_chain[prev_index + 2])();\n                      prev_index = prev_index + -1;\n                    }\n                    (*(function_pointer *)function_chain[prev_index + 2])();\n                    prev_index = prev_index + -1;\n                  }\n                  (*(function_pointer *)function_chain[prev_index + 2])();\n                  prev_index = prev_index + -1;\n                }\n                (*(function_pointer *)function_chain[prev_index + 2])();\n                prev_index = prev_index + -1;\n              }\n              (*(function_pointer *)function_chain[prev_index + 2])();\n              prev_index = prev_index + -1;\n            }\n            (*(function_pointer *)function_chain[prev_index + 2])();\n            temp_index = prev_index + -1;\n            if ((int)(prev_index + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(function_pointer *)function_chain[temp_index + 2])();\n            index = temp_index + -1;\n            (*(function_pointer *)function_chain[temp_index + 1])();\n            (*(function_pointer *)function_chain[temp_index])();\n            (*(function_pointer *)function_chain[index])();\n            (*(function_pointer *)function_chain[temp_index + -2])();\n            (*(function_pointer *)function_chain[temp_index + -3])();\n            (*(function_pointer *)function_chain[temp_index + -4])();\n            (*(function_pointer *)function_chain[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      function_chain = (long *)*function_chain;\n    } while (function_chain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_chain_0011a390",
            "entrypoint": "0x0011a390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a390": "execute_function_chain_0011a390",
                "code": "function_pointer",
                "lVar1": "index",
                "lVar2": "prev_index",
                "lVar3": "temp_index",
                "plVar4": "function_chain",
                "uVar5": "function_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a480": {
            "additional_data": {
                "FUN_0011a480": {
                    "1": "copy_string_with_padding",
                    "2": "copy_string_with_null_terminator",
                    "23": "copy_string",
                    "4": "copy_string_with_length"
                },
                "__dest": {
                    "1": "dest_memory",
                    "2": "dest",
                    "3": "new_string",
                    "6": "copied_string",
                    "9": "destination"
                },
                "__n": {
                    "1": "str_size",
                    "17": "string_length",
                    "3": "source_length",
                    "6": "length"
                },
                "param_1": {
                    "1": "input",
                    "13": "source_string",
                    "2": "src",
                    "6": "input_string",
                    "9": "source"
                },
                "param_2": {
                    "1": "src_size",
                    "2": "max_size",
                    "20": "max_length",
                    "3": "source_length"
                }
            },
            "called": [
                "FUN_00104540",
                "FUN_00104390",
                "FUN_00104380"
            ],
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "code": "\nvoid copy_string_0011a480(char *source_string,size_t max_length)\n\n{\n  size_t string_length;\n  void *destination;\n  \n  string_length = strnlen(source_string,max_length);\n  destination = (void *)xmalloc(string_length + 1);\n  *(undefined *)((long)destination + string_length) = 0;\n  memcpy(destination,source_string,string_length);\n  return;\n}\n\n",
            "current_name": "copy_string_0011a480",
            "entrypoint": "0x0011a480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "__dest": "destination",
                "__n": "string_length",
                "param_1": "source_string",
                "param_2": "max_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a4b4": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0011a4b4",
            "entrypoint": "0x0011a4b4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00104000",
            "FUN_00104020",
            "FUN_00104920",
            "FUN_00104943",
            "FUN_00104966",
            "FUN_00104a35",
            "FUN_00104ad6",
            "FUN_00104bba",
            "FUN_00104c36",
            "FUN_00104d1c",
            "FUN_001052a2",
            "FUN_001053b5",
            "FUN_001053d5",
            "FUN_0010540e",
            "FUN_0010543c",
            "FUN_001054af",
            "FUN_0010554f",
            "FUN_00105828",
            "FUN_0010808f",
            "FUN_001081e9",
            "FUN_00108200",
            "FUN_00108237",
            "FUN_0010827b",
            "FUN_001082b3",
            "FUN_001082c3",
            "FUN_001082df",
            "FUN_00108375",
            "FUN_001083b7",
            "FUN_001083de",
            "FUN_00108466",
            "FUN_0010870e",
            "FUN_0010871c",
            "FUN_0010875d",
            "FUN_001087da",
            "FUN_001087fd",
            "FUN_00108800",
            "FUN_00108808",
            "FUN_0010882c",
            "FUN_00108863",
            "FUN_00108898",
            "FUN_001088ae",
            "FUN_00108916",
            "FUN_00108a2a",
            "FUN_00108b3e",
            "FUN_00108c86",
            "FUN_00108d9a",
            "FUN_00108e76",
            "FUN_00108ea1",
            "FUN_00108f05",
            "FUN_00108f08",
            "FUN_00108fb9",
            "FUN_00108fe8",
            "FUN_00109022",
            "FUN_0010911f",
            "FUN_0010914e",
            "FUN_00109a0b",
            "FUN_00109a32",
            "FUN_00109ab1",
            "FUN_00109b2f",
            "FUN_00109b52",
            "FUN_00109bbb",
            "FUN_00109be3",
            "FUN_00109c2e",
            "FUN_00109cf4",
            "FUN_00109d3e",
            "FUN_00109d5c",
            "FUN_00109d97",
            "FUN_00109dfe",
            "FUN_00109e76",
            "FUN_00109ed3",
            "FUN_0010a083",
            "FUN_0010a0a0",
            "FUN_0010a0bd",
            "FUN_0010a0d3",
            "FUN_0010a0e9",
            "FUN_0010a181",
            "FUN_0010a2b9",
            "FUN_0010a377",
            "FUN_0010a424",
            "FUN_0010a69a",
            "FUN_0010a77a",
            "FUN_0010a83e",
            "FUN_0010a94e",
            "FUN_0010aa53",
            "FUN_0010ab4d",
            "FUN_0010abdd",
            "FUN_0010add5",
            "FUN_0010adf2",
            "FUN_0010ae0e",
            "FUN_0010afd5",
            "FUN_0010b6ea",
            "FUN_0010b800",
            "FUN_0010b948",
            "FUN_0010ba08",
            "FUN_0010bb52",
            "FUN_0010bba1",
            "FUN_0010bbd3",
            "FUN_0010bc80",
            "FUN_0010bd62",
            "FUN_0010be1a",
            "FUN_0010be88",
            "FUN_0010bf20",
            "FUN_0010bf86",
            "FUN_0010c05d",
            "FUN_0010c139",
            "FUN_0010c1c6",
            "FUN_0010c218",
            "FUN_0010c2d2",
            "FUN_0010c6be",
            "FUN_0010c7a0",
            "FUN_0010c892",
            "FUN_0010d21c",
            "FUN_0010d559",
            "FUN_0010d7d4",
            "FUN_0010d882",
            "FUN_0010da0b",
            "FUN_0010e07c",
            "FUN_0010e2f0",
            "FUN_0010e439",
            "FUN_0010e453",
            "FUN_0010e5db",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010e842",
            "FUN_0010e8a9",
            "FUN_0010e918",
            "FUN_0010e9a0",
            "FUN_0010eafe",
            "FUN_0010ebb0",
            "FUN_0010ec73",
            "FUN_0010ed2c",
            "FUN_0010edb4",
            "FUN_0011173a",
            "FUN_00112502",
            "FUN_0011256b",
            "FUN_001125fa",
            "FUN_001126c0",
            "FUN_0011283f",
            "FUN_00112894",
            "FUN_00112904",
            "FUN_00112925",
            "FUN_00112996",
            "FUN_001129f4",
            "FUN_00112a33",
            "FUN_001135a5",
            "FUN_0011378f",
            "FUN_00113b1e",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00113b98",
            "FUN_00113bfa",
            "FUN_00113c43",
            "FUN_00113cb9",
            "FUN_00113ce0",
            "FUN_00113d3a",
            "FUN_00113d6e",
            "FUN_00113da9",
            "FUN_00113df2",
            "FUN_00113dfe",
            "FUN_00113e17",
            "FUN_00113e23",
            "FUN_00113e5e",
            "FUN_00113ede",
            "FUN_00113f20",
            "FUN_00113f50",
            "FUN_00113fb0",
            "FUN_00113fe0",
            "FUN_00114190",
            "FUN_00114b84",
            "FUN_00114c20",
            "FUN_00114c80",
            "FUN_00114cf0",
            "FUN_00114d50",
            "FUN_00114d60",
            "FUN_00114dc7",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_001159d0",
            "FUN_00115a90",
            "FUN_00115d00",
            "FUN_00115d70",
            "FUN_00115dc0",
            "FUN_00115f30",
            "FUN_00115f50",
            "FUN_00116030",
            "FUN_00116852",
            "FUN_00116aa0",
            "FUN_00116b40",
            "FUN_00119940",
            "FUN_00119970",
            "FUN_001199d0",
            "FUN_00119dd0",
            "FUN_00119e70",
            "FUN_00119ed0",
            "FUN_00119f70",
            "FUN_0011a0e0",
            "FUN_0011a110",
            "FUN_0011a170",
            "FUN_0011a1b0",
            "FUN_0011a250",
            "FUN_0011a2e0",
            "FUN_0011a350",
            "FUN_0011a390",
            "FUN_0011a480"
        ],
        [
            "FUN_00104cc1",
            "FUN_00104d25",
            "FUN_00104ea2",
            "FUN_0010551d",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114460",
            "FUN_00114690",
            "FUN_00116110"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_0010b0fa",
            "FUN_0010c95e",
            "FUN_0010dac0",
            "FUN_00112b6e",
            "FUN_00112c1f",
            "FUN_00113a4d"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 1174464
}