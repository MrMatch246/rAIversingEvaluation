{
    "functions": {
        "FUN_00102000": {
            "entrypoint": "0x00102000",
            "current_name": "initialize_program_00102000",
            "code": "\nvoid initialize_program_00102000(void)\n\n{\n  start_monitoring();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102000": "initialize_program_00102000",
                "__gmon_start__": "start_monitoring"
            },
            "calling": [],
            "called": [
                "FUN_00108118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102000": {
                    "1": "initialize_profiling",
                    "2": "initialize_profiler",
                    "6": "initialize_monitoring",
                    "17": "initialize_program"
                },
                "__gmon_start__": {
                    "1": "start_gmon",
                    "2": "initialize_monitoring",
                    "3": "start_profiling",
                    "12": "start_monitoring"
                },
                "": {
                    "2": ""
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                }
            }
        },
        "FUN_00102020": {
            "entrypoint": "0x00102020",
            "current_name": "execute_indirect_jump_00102020",
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(memory_address *)0x0)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "undefined": "memory_address",
                "code": "function_pointer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102020": {
                    "17": "execute_indirect_jump",
                    "1": "call_indirect_jump",
                    "4": "execute_indirect_call",
                    "2": "execute_function"
                },
                "undefined": {
                    "1": "function_ptr",
                    "2": "target_address",
                    "3": "memory_address"
                },
                "code": {
                    "4": "function_pointer",
                    "2": "indirect_function",
                    "1": "indirect_function_pointer"
                },
                "PTR_00102020": {
                    "1": ""
                },
                "0x0": {
                    "1": "target_address"
                },
                "PTR_0": {
                    "1": "ptr_to_zero"
                },
                "ptr_0": {
                    "1": "function_pointer"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_00102020": {
                    "1": ""
                }
            }
        },
        "FUN_00102030": {
            "entrypoint": "0x00102030",
            "current_name": "FUN_00102030",
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102a90",
                "FUN_0010278c",
                "FUN_0010281b",
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108000"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102040": {
            "entrypoint": "0x00102040",
            "current_name": "FUN_00102040",
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102a40",
                "FUN_00102fe0"
            ],
            "called": [
                "FUN_00108008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102050": {
            "entrypoint": "0x00102050",
            "current_name": "FUN_00102050",
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102360"
            ],
            "called": [
                "FUN_00108018"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102060": {
            "entrypoint": "0x00102060",
            "current_name": "FUN_00102060",
            "code": "\nvoid bfd_core_file_failing_command(void)\n\n{\n  bfd_core_file_failing_command();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024d2"
            ],
            "called": [
                "FUN_00108030"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102070": {
            "entrypoint": "0x00102070",
            "current_name": "FUN_00102070",
            "code": "\n\n\nint puts(char *__s)\n\n{\n  int iVar1;\n  \n  iVar1 = puts(__s);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102a90",
                "FUN_001024d2"
            ],
            "called": [
                "FUN_00108038"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102080": {
            "entrypoint": "0x00102080",
            "current_name": "FUN_00102080",
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108040"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102090": {
            "entrypoint": "0x00102090",
            "current_name": "FUN_00102090",
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108048"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020a0": {
            "entrypoint": "0x001020a0",
            "current_name": "FUN_001020a0",
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108050"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020b0": {
            "entrypoint": "0x001020b0",
            "current_name": "FUN_001020b0",
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108058"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020c0": {
            "entrypoint": "0x001020c0",
            "current_name": "FUN_001020c0",
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102980"
            ],
            "called": [
                "FUN_00108060"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020d0": {
            "entrypoint": "0x001020d0",
            "current_name": "FUN_001020d0",
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020e0": {
            "entrypoint": "0x001020e0",
            "current_name": "FUN_001020e0",
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020f0": {
            "entrypoint": "0x001020f0",
            "current_name": "FUN_001020f0",
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010278c",
                "FUN_0010281b",
                "FUN_00103130",
                "FUN_00102980",
                "FUN_0010274b",
                "FUN_00102360"
            ],
            "called": [
                "FUN_00108080"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102100": {
            "entrypoint": "0x00102100",
            "current_name": "FUN_00102100",
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103c50",
                "FUN_00103130",
                "FUN_00102e50"
            ],
            "called": [
                "FUN_00108088"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102110": {
            "entrypoint": "0x00102110",
            "current_name": "FUN_00102110",
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108090"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102120": {
            "entrypoint": "0x00102120",
            "current_name": "FUN_00102120",
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102710",
                "FUN_00102a90",
                "FUN_00102e90",
                "FUN_00103130",
                "FUN_00102fe0",
                "FUN_001024d2",
                "FUN_0010259c"
            ],
            "called": [
                "FUN_00108098"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102130": {
            "entrypoint": "0x00102130",
            "current_name": "FUN_00102130",
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_001080a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102140": {
            "entrypoint": "0x00102140",
            "current_name": "FUN_00102140",
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102a90"
            ],
            "called": [
                "FUN_001080a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102150": {
            "entrypoint": "0x00102150",
            "current_name": "FUN_00102150",
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010281b"
            ],
            "called": [
                "FUN_001080b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102160": {
            "entrypoint": "0x00102160",
            "current_name": "FUN_00102160",
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001023b6",
                "FUN_00103130",
                "FUN_001024d2",
                "FUN_00103d20"
            ],
            "called": [
                "FUN_001080c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102170": {
            "entrypoint": "0x00102170",
            "current_name": "FUN_00102170",
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102a90",
                "FUN_00103130"
            ],
            "called": [
                "FUN_001080c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102180": {
            "entrypoint": "0x00102180",
            "current_name": "FUN_00102180",
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001023b6"
            ],
            "called": [
                "FUN_001080d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102190": {
            "entrypoint": "0x00102190",
            "current_name": "FUN_00102190",
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_001080d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021a0": {
            "entrypoint": "0x001021a0",
            "current_name": "FUN_001021a0",
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_001080e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021b0": {
            "entrypoint": "0x001021b0",
            "current_name": "FUN_001021b0",
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010278c",
                "FUN_0010281b"
            ],
            "called": [
                "FUN_001080e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021c0": {
            "entrypoint": "0x001021c0",
            "current_name": "FUN_001021c0",
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_001080f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021d0": {
            "entrypoint": "0x001021d0",
            "current_name": "FUN_001021d0",
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102a90",
                "FUN_00103130",
                "FUN_00102ee0"
            ],
            "called": [
                "FUN_001080f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021e0": {
            "entrypoint": "0x001021e0",
            "current_name": "FUN_001021e0",
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010278c",
                "FUN_0010281b",
                "FUN_00103130",
                "FUN_00102ee0",
                "FUN_0010274b"
            ],
            "called": [
                "FUN_00108108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021f0": {
            "entrypoint": "0x001021f0",
            "current_name": "FUN_001021f0",
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102200": {
            "entrypoint": "0x00102200",
            "current_name": "FUN_00102200",
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130",
                "FUN_00102980"
            ],
            "called": [
                "FUN_00108120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102210": {
            "entrypoint": "0x00102210",
            "current_name": "FUN_00102210",
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108128"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102220": {
            "entrypoint": "0x00102220",
            "current_name": "FUN_00102220",
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102230": {
            "entrypoint": "0x00102230",
            "current_name": "FUN_00102230",
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010278c",
                "FUN_00102ee0",
                "FUN_0010274b"
            ],
            "called": [
                "FUN_00108138"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102240": {
            "entrypoint": "0x00102240",
            "current_name": "FUN_00102240",
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102250": {
            "entrypoint": "0x00102250",
            "current_name": "FUN_00102250",
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108150"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102260": {
            "entrypoint": "0x00102260",
            "current_name": "FUN_00102260",
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102270": {
            "entrypoint": "0x00102270",
            "current_name": "FUN_00102270",
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108160"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102280": {
            "entrypoint": "0x00102280",
            "current_name": "FUN_00102280",
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102290": {
            "entrypoint": "0x00102290",
            "current_name": "FUN_00102290",
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102db0",
                "FUN_00102a90",
                "FUN_00103130"
            ],
            "called": [
                "FUN_00108170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001022a0": {
            "entrypoint": "0x001022a0",
            "current_name": "FUN_001022a0",
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001023b6"
            ],
            "called": [
                "FUN_00108178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001022b0": {
            "entrypoint": "0x001022b0",
            "current_name": "FUN_001022b0",
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102ee0"
            ],
            "called": [
                "FUN_00108180"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001022c0": {
            "entrypoint": "0x001022c0",
            "current_name": "FUN_001022c0",
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102a40",
                "FUN_001024d2"
            ],
            "called": [
                "FUN_00108188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001022d0": {
            "entrypoint": "0x001022d0",
            "current_name": "FUN_001022d0",
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130",
                "FUN_00103d20"
            ],
            "called": [
                "FUN_00108190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001022e0": {
            "entrypoint": "0x001022e0",
            "current_name": "FUN_001022e0",
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102710",
                "FUN_00102e90",
                "FUN_00102e50"
            ],
            "called": [
                "FUN_00108198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001022f0": {
            "entrypoint": "0x001022f0",
            "current_name": "FUN_001022f0",
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010281b",
                "FUN_00103130"
            ],
            "called": [
                "FUN_001081a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102300": {
            "entrypoint": "0x00102300",
            "current_name": "FUN_00102300",
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103130",
                "FUN_001024d2"
            ],
            "called": [
                "FUN_001081a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102310": {
            "entrypoint": "0x00102310",
            "current_name": "FUN_00102310",
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102a40",
                "FUN_00102980"
            ],
            "called": [
                "FUN_001081b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102320": {
            "entrypoint": "0x00102320",
            "current_name": "FUN_00102320",
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001023b6"
            ],
            "called": [
                "FUN_001081b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102330": {
            "entrypoint": "0x00102330",
            "current_name": "FUN_00102330",
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102a90"
            ],
            "called": [
                "FUN_001081c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102340": {
            "entrypoint": "0x00102340",
            "current_name": "FUN_00102340",
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102360"
            ],
            "called": [
                "FUN_001081d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102350": {
            "entrypoint": "0x00102350",
            "current_name": "FUN_00102350",
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001030e0"
            ],
            "called": [
                "FUN_001081e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102360": {
            "entrypoint": "0x00102360",
            "current_name": "handle_file_error_00102360",
            "code": "\nvoid handle_file_error_00102360(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = get_error_code();\n  if (*errno_ptr == 2) {\n    error_message = get_localized_message(0,\"\\'%s\\': No such file\",5);\n    handle_non_fatal_error(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = get_localized_message(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    handle_non_fatal_error(error_message);\n  }\n  DAT_00107314 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102360": "handle_file_error_00102360",
                "uVar2": "error_message",
                "piVar1": "errno_ptr",
                "__errno_location": "get_error_code",
                "dcgettext": "get_localized_message",
                "non_fatal": "handle_non_fatal_error"
            },
            "calling": [
                "FUN_00102980"
            ],
            "called": [
                "FUN_00102340",
                "FUN_001020f0",
                "FUN_00102f40",
                "FUN_00102050"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102360": {
                    "1": "handle_file_localization",
                    "18": "handle_file_error",
                    "3": "file_not_found_error"
                },
                "uVar2": {
                    "22": "error_message",
                    "6": "error_string",
                    "2": "error_msg",
                    "1": "translated_error_message"
                },
                "piVar1": {
                    "1": "error_location_ptr",
                    "4": "errno_location",
                    "9": "errno_ptr",
                    "2": "error_pointer",
                    "5": "error_ptr"
                },
                "__errno_location": {
                    "1": "get_error_code"
                },
                "dcgettext": {
                    "2": "get_localized_message",
                    "1": "get_translated_string"
                },
                "non_fatal": {
                    "1": "report_fatal_error",
                    "3": "handle_non_fatal_error",
                    "2": "report_error"
                },
                "DAT_00107314": {
                    "1": "is_error"
                },
                "*piVar1": {
                    "1": "errno_location"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                }
            }
        },
        "FUN_001023b6": {
            "entrypoint": "0x001023b6",
            "current_name": "process_archived_files_001023b6",
            "code": "\nvoid process_archived_files_001023b6(void)\n\n{\n  char close_success;\n  int error_code;\n  long current_file;\n  undefined8 *archived_files;\n  long previous_file;\n  \n  current_file = 0;\n  do {\n    previous_file = current_file;\n    set_error(0);\n    current_file = open_next_archived_file();\n    if (current_file == 0) {\n      error_code = get_error();\n      if (error_code != 9) {\n        nonfatal(*archived_files);\n        DAT_00107314 = 2;\n      }\n      if (previous_file != 0) {\n        close_bfd(previous_file);\n      }\n      break;\n    }\n    display_bfd();\n  } while ((previous_file == 0) || (close_bfd(), previous_file != current_file));\n  close_success = close_bfd();\n  if (close_success == '\\0') {\n    nonfatal();\n    DAT_00107314 = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_001023b6": "process_archived_files_001023b6",
                "unaff_RBX": "archived_files",
                "lVar3": "current_file",
                "lVar4": "previous_file",
                "cVar1": "close_success",
                "iVar2": "error_code",
                "bfd_set_error": "set_error",
                "bfd_openr_next_archived_file": "open_next_archived_file",
                "bfd_get_error": "get_error",
                "bfd_nonfatal": "nonfatal",
                "bfd_close": "close_bfd"
            },
            "calling": [
                "FUN_00102980"
            ],
            "called": [
                "FUN_00102160",
                "FUN_00102a40",
                "FUN_001022a0",
                "FUN_00102180",
                "FUN_00102320",
                "FUN_00103d20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001023b6": {
                    "7": "extract_archived_files",
                    "24": "process_archived_files"
                },
                "unaff_RBX": {
                    "1": "error_log",
                    "5": "file_handles",
                    "2": "archive_files",
                    "8": "archived_files"
                },
                "lVar3": {
                    "1": "archive_file",
                    "2": "archived_file",
                    "5": "current_file_handle",
                    "9": "current_file",
                    "7": "file_handle"
                },
                "lVar4": {
                    "1": "previous_file_pointer",
                    "8": "previous_file_handle",
                    "10": "previous_file",
                    "3": "previous_handle",
                    "2": "prev_file_handle"
                },
                "cVar1": {
                    "1": "close_successful",
                    "9": "close_result",
                    "8": "close_status"
                },
                "iVar2": {
                    "24": "error_code",
                    "2": "bfd_error"
                },
                "bfd_set_error": {
                    "2": "set_error"
                },
                "bfd_openr_next_archived_file": {
                    "3": "open_next_archived_file",
                    "1": "get_next_archived_file"
                },
                "bfd_get_error": {
                    "2": "get_bfd_error"
                },
                "bfd_nonfatal": {
                    "1": "nonfatal"
                },
                "bfd_close": {
                    "2": "close_bfd",
                    "1": "close_file"
                },
                "display_bfd": {
                    "1": "print_file_details",
                    "2": "display_bfd"
                },
                "DAT_00107314": {
                    "1": "error_status"
                },
                "param_1": {
                    "1": "error_conditions"
                },
                "FUN_00102a40": {
                    "3": "display_bfd"
                },
                "FUN_00103d20": {
                    "2": "bfd_nonfatal",
                    "1": "bfd_close"
                },
                "param_2": {
                    "1": "bfd_handle"
                },
                "BFD_00107314": {
                    "1": "error_status"
                }
            }
        },
        "FUN_001024d2": {
            "entrypoint": "0x001024d2",
            "current_name": "handle_bfd_error_001024d2",
            "code": "\n\n\nvoid handle_bfd_error_001024d2(void)\n\n{\n  char format_matches;\n  int error_code;\n  long failing_command;\n  undefined8 *bfd_handle;\n  undefined8 format;\n  \n  error_code = get_bfd_error();\n  if (error_code == 0xd) {\n    handle_bfd_nonfatal(*bfd_handle);\n    print_matching_formats(format);\n    DAT_00107314 = 3;\n  }\n  else {\n    format_matches = check_format_matches();\n    if (format_matches == '\\0') {\n      handle_bfd_nonfatal(*bfd_handle);\n      error_code = get_bfd_error();\n      if (error_code == 0xd) {\n        print_matching_formats(format);\n      }\n      DAT_00107314 = 3;\n    }\n    else {\n      print_bfd_sizes();\n      fwrite(\" (core file\",1,0xb,standard_output);\n      failing_command = bfd_core_file_failing_command();\n      if (failing_command != 0) {\n        printf(\" invoked as %s\",failing_command);\n      }\n      puts(\")\\n\");\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_001024d2": "handle_bfd_error_001024d2",
                "param_7": "format",
                "cVar1": "format_matches",
                "iVar2": "error_code",
                "lVar3": "failing_command",
                "unaff_RBX": "bfd_handle",
                "bfd_get_error": "get_bfd_error",
                "bfd_nonfatal": "handle_bfd_nonfatal",
                "list_matching_formats": "print_matching_formats",
                "bfd_check_format_matches": "check_format_matches",
                "print_sizes": "print_bfd_sizes",
                "_stdout": "standard_output"
            },
            "calling": [
                "FUN_00102a40"
            ],
            "called": [
                "FUN_00102070",
                "FUN_00102120",
                "FUN_00102160",
                "FUN_00102a90",
                "FUN_00102300",
                "FUN_0010278c",
                "FUN_00102060",
                "FUN_001022c0",
                "FUN_00103d20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001024d2": {
                    "1": "process_bfd_output",
                    "3": "process_bfd_error",
                    "2": "process_bfd",
                    "12": "handle_bfd_error"
                },
                "param_7": {
                    "2": "format_list",
                    "1": "matching_formats",
                    "5": "format"
                },
                "cVar1": {
                    "2": "is_format_match",
                    "1": "is_matching_format",
                    "6": "format_match",
                    "15": "format_matches"
                },
                "iVar2": {
                    "1": "error_status",
                    "21": "error_code",
                    "6": "error",
                    "2": "bfd_error_code"
                },
                "lVar3": {
                    "1": "command",
                    "28": "failing_command"
                },
                "unaff_RBX": {
                    "1": "format_handle",
                    "2": "bfd_handle_ptr",
                    "9": "bfd_handle"
                },
                "DAT_00107314": {
                    "1": "status"
                },
                "FUN_00102a90": {
                    "1": "print_error_message"
                },
                "param_1": {
                    "1": "formats_param"
                },
                "FUN_0010278c": {
                    "1": "print_failing_command"
                },
                "FUN_00103d20": {
                    "1": "print_command"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "bfd_nonfatal": {
                    "1": "handle_bfd_nonfatal"
                },
                "list_matching_formats": {
                    "1": "print_matching_formats"
                },
                "bfd_check_format_matches": {
                    "1": "check_format_matches"
                },
                "print_sizes": {
                    "1": "print_bfd_sizes"
                },
                "_stdout": {
                    "1": "standard_output"
                }
            }
        },
        "FUN_0010259c": {
            "entrypoint": "0x0010259c",
            "current_name": "print_ex_string_0010259c",
            "code": "\nvoid print_ex_string_0010259c(void)\n\n{\n  undefined8 *ex_string;\n  \n  print(\" (ex %s)\",*ex_string);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010259c": "print_ex_string_0010259c",
                "in_RAX": "ex_string",
                "printf": "print"
            },
            "calling": [
                "FUN_00102a90"
            ],
            "called": [
                "FUN_00102120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010259c": {
                    "1": "print_selected_value",
                    "2": "print_ex_message",
                    "23": "print_ex_string",
                    "3": "print_extracted_string"
                },
                "in_RAX": {
                    "1": "message_pointer",
                    "2": "extracted_string",
                    "4": "ex_string_ptr",
                    "3": "input_string",
                    "11": "ex_string"
                },
                "printf": {
                    "1": "print"
                }
            }
        },
        "FUN_001026ea": {
            "entrypoint": "0x001026ea",
            "current_name": "initialize_data_001026ea",
            "code": "\nundefined8 initialize_data_001026ea(void)\n\n{\n  undefined8 input_value;\n  undefined8 return_address;\n  \n  DAT_001072d8 = input_value;\n  return return_address;\n}\n\n",
            "renaming": {
                "FUN_001026ea": "initialize_data_001026ea",
                "in_RAX": "input_value",
                "unaff_retaddr": "return_address"
            },
            "calling": [
                "FUN_00103c50"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001026ea": {
                    "5": "initialize_function",
                    "3": "initialize_program",
                    "1": "initialize_variables",
                    "2": "initialize_return_value",
                    "13": "initialize_data"
                },
                "in_RAX": {
                    "8": "return_value",
                    "1": "input_parameter",
                    "2": "input_data",
                    "11": "input_value",
                    "3": "initial_value"
                },
                "unaff_retaddr": {
                    "2": "return_value",
                    "26": "return_address",
                    "1": "saved_return_address"
                }
            }
        },
        "FUN_001026f6": {
            "entrypoint": "0x001026f6",
            "current_name": "print_formatted_value_001026f6",
            "code": "\nvoid print_formatted_value_001026f6(void)\n\n{\n  int number_type;\n  char *format_string;\n  \n  format_string = \"0x%lx\";\n  if (number_type == 1) {\n    format_string = \"0%lo\";\n  }\n  sprintf(&stack0x00000000,format_string);\n  strlen(&stack0x00000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001026f6": "print_formatted_value_001026f6",
                "in_EAX": "number_type",
                "__format": "format_string"
            },
            "calling": [
                "FUN_00102e50"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001026f6": {
                    "1": "print_hex_string",
                    "9": "print_formatted_number",
                    "12": "print_formatted_value",
                    "2": "format_and_print_number"
                },
                "in_EAX": {
                    "1": "number_format_type",
                    "3": "number",
                    "4": "format_option",
                    "2": "input_value",
                    "5": "number_type"
                },
                "__format": {
                    "1": "conversion_format",
                    "30": "format_string"
                }
            }
        },
        "FUN_00102710": {
            "entrypoint": "0x00102710",
            "current_name": "print_formatted_value_00102710",
            "code": "\nvoid print_formatted_value_00102710(void)\n\n{\n  int input_value;\n  uint field_width;\n  char *format_string;\n  \n  format_string = \"0x%lx\";\n  if (input_value == 1) {\n    format_string = \"0%lo\";\n  }\n  sprintf(&stack0x00000000,format_string);\n  printf(\"%*s\",(ulong)field_width);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102710": "print_formatted_value_00102710",
                "in_EAX": "input_value",
                "unaff_EBX": "field_width",
                "__format": "format_string"
            },
            "calling": [
                "FUN_00102e90"
            ],
            "called": [
                "FUN_00102120",
                "FUN_001022e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102710": {
                    "1": "format_and_print_number",
                    "10": "print_formatted_number",
                    "3": "print_formatted_output",
                    "17": "print_formatted_value"
                },
                "in_EAX": {
                    "1": "number_format_type",
                    "2": "format_option",
                    "5": "input_number",
                    "7": "input_value",
                    "6": "number_type"
                },
                "unaff_EBX": {
                    "16": "field_width",
                    "1": "alignment_width",
                    "10": "width",
                    "2": "padding_size"
                },
                "__format": {
                    "5": "format_specifier",
                    "26": "format_string"
                },
                "PTR_stack0x00000000": {
                    "1": "output_buffer"
                }
            }
        },
        "FUN_0010274a": {
            "entrypoint": "0x0010274a",
            "current_name": "FUNC_0010274a",
            "code": "\nvoid FUNC_0010274a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010274a": "FUNC_0010274a"
            },
            "calling": [
                "FUN_00103cc0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0010274b": {
            "entrypoint": "0x0010274b",
            "current_name": "print_error_message_0010274b",
            "code": "\n\n\nvoid print_error_message_0010274b(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00107350);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00107350,error_message,return_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010274b": "print_error_message_0010274b",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address",
                "uVar1": "error_message"
            },
            "calling": [
                "FUN_00103d20"
            ],
            "called": [
                "FUN_001021e0",
                "FUN_001020f0",
                "FUN_00102230"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010274b": {
                    "4": "print_error",
                    "3": "handle_error",
                    "23": "print_error_message",
                    "1": "print_error_cause"
                },
                "unaff_RBX": {
                    "21": "error_code",
                    "8": "error_flag",
                    "1": "error_status"
                },
                "unaff_retaddr": {
                    "30": "return_address"
                },
                "uVar1": {
                    "24": "error_message",
                    "2": "error_string",
                    "1": "error_description"
                }
            }
        },
        "FUN_0010278c": {
            "entrypoint": "0x0010278c",
            "current_name": "print_matching_formats_0010278c",
            "code": "\n\n\nvoid print_matching_formats_0010278c(long *format_strings)\n\n{\n  undefined8 default_format;\n  char *format_string;\n  long *current_format;\n  \n  flush_output(standard_output);\n  default_format = DAT_00107350;\n  format_string = (char *)get_translated_string(0,\"%s: Matching formats:\",5);\n  print_formatted_message(standard_error,format_string,default_format);\n  for (current_format = format_strings; *current_format != 0; current_format = current_format + 1) {\n    print_formatted_message(standard_error,\" %s\");\n  }\n  free_memory(format_strings);\n  put_character(10,standard_error);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010278c": "print_matching_formats_0010278c",
                "param_1": "format_strings",
                "uVar1": "default_format",
                "__format": "format_string",
                "plVar2": "current_format",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "fflush": "flush_output",
                "dcgettext": "get_translated_string",
                "fprintf": "print_formatted_message",
                "free": "free_memory",
                "fputc": "put_character"
            },
            "calling": [
                "FUN_001024d2"
            ],
            "called": [
                "FUN_001021e0",
                "FUN_001021b0",
                "FUN_001020f0",
                "FUN_00102030",
                "FUN_00102230"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010278c": {
                    "31": "print_matching_formats"
                },
                "param_1": {
                    "17": "format_strings",
                    "1": "matching_formats",
                    "4": "format_list",
                    "6": "formats"
                },
                "uVar1": {
                    "1": "translation",
                    "11": "default_format",
                    "3": "matching_formats"
                },
                "__format": {
                    "1": "translation",
                    "2": "message_format",
                    "5": "format_message",
                    "15": "format_string"
                },
                "plVar2": {
                    "6": "current_format_string",
                    "3": "current_string",
                    "19": "current_format"
                },
                "_stdout": {
                    "7": "standard_output",
                    "1": "standard_out"
                },
                "_stderr": {
                    "8": "standard_error",
                    "1": "stderr"
                },
                "fflush": {
                    "1": "flush_stdout"
                },
                "dcgettext": {
                    "2": "get_translated_string"
                },
                "fprintf": {
                    "1": "print_formatted_message"
                },
                "free": {
                    "2": "free_memory"
                },
                "fputc": {
                    "2": "put_character"
                }
            }
        },
        "FUN_0010281b": {
            "entrypoint": "0x0010281b",
            "current_name": "print_section_sizes_0010281b",
            "code": "\nvoid print_section_sizes_0010281b(FILE *output_file,int exit_code)\n\n{\n  long default_target;\n  char *message;\n  long *target_list;\n  long *target;\n  \n  default_target = DAT_00107350;\n  message = (char *)get_localized_message(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  print_formatted(output_file,message,default_target);\n  message = (char *)get_localized_message(0,\" Displays the sizes of sections inside binary files\\n\",5);\n  print_formatted(output_file,message);\n  message = (char *)get_localized_message(0,\" If no input file(s) are specified, a.out is assumed\\n\",5);\n  print_formatted(output_file,message);\n  message = (char *)get_localized_message(0,\n                             \" The options are:\\n  -A|-B|-G  --format={sysv|berkeley|gnu}  Select output style (default is %s)\\n  -o|-d|-x  --radix={8|10|16}         Display numbers in octal, decimal or hex\\n  -t        --totals                  Display the total sizes (Berkeley only)\\n  -f                                  Ignored.\\n            --common                  Display total size for *COM* syms\\n            --target=<bfdname>        Set the binary file format\\n            @<file>                   Read options from <file>\\n  -h|-H|-?  --help                    Display this information\\n  -v|-V     --version                 Display the program\\'s version\\n\\n\"\n                             ,5);\n  print_formatted(output_file,message,\"berkeley\");\n  default_target = DAT_00107350;\n  if (DAT_00107350 == 0) {\n    message = (char *)get_localized_message(0,\"Supported targets:\",5);\n    print_formatted(output_file,message);\n  }\n  else {\n    message = (char *)get_localized_message(0,\"%s: supported targets:\",5);\n    print_formatted(output_file,message,default_target);\n  }\n  target_list = (long *)get_target_list();\n  target = target_list;\n  while( true ) {\n    default_target = *target;\n    target = target + 1;\n    if (default_target == 0) break;\n    print_formatted(output_file,\" %s\");\n  }\n  write_character(10,output_file);\n  release_memory(target_list);\n  if (exit_code == 0) {\n    message = (char *)get_localized_message(0,\"Report bugs to %s\\n\",5);\n    print_formatted(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminate_program(exit_code);\n}\n\n",
            "renaming": {
                "FUN_0010281b": "print_section_sizes_0010281b",
                "param_1": "output_file",
                "param_2": "exit_code",
                "lVar1": "default_target",
                "pcVar2": "message",
                "__ptr": "target_list",
                "plVar3": "target",
                "fprintf": "print_formatted",
                "dcgettext": "get_localized_message",
                "fputc": "write_character",
                "free": "release_memory",
                "exit": "terminate_program",
                "bfd_target_list": "get_target_list"
            },
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_001021e0",
                "FUN_001021b0",
                "FUN_001020f0",
                "FUN_00102030",
                "FUN_001022f0",
                "FUN_00102150"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010281b": {
                    "1": "print_binary_file_section_sizes",
                    "20": "print_section_sizes",
                    "8": "display_section_sizes"
                },
                "param_1": {
                    "30": "output_file",
                    "1": "file"
                },
                "param_2": {
                    "30": "exit_code",
                    "1": "error_code"
                },
                "lVar1": {
                    "5": "default_target",
                    "1": "language_var1",
                    "2": "data_address",
                    "4": "default_style"
                },
                "pcVar2": {
                    "24": "message",
                    "1": "localized_text",
                    "2": "text"
                },
                "__ptr": {
                    "1": "ptr_list",
                    "29": "target_list"
                },
                "plVar3": {
                    "9": "target",
                    "1": "target_list_item",
                    "6": "ptr",
                    "5": "current_target",
                    "3": "target_ptr",
                    "2": "target_pointer"
                },
                "fprintf": {
                    "1": "write",
                    "2": "print_formatted_message",
                    "3": "print_formatted"
                },
                "dcgettext": {
                    "1": "get_message",
                    "2": "get_translated_text"
                },
                "fputc": {
                    "3": "write_character",
                    "1": "write_char",
                    "2": "put_character"
                },
                "free": {
                    "6": "release_memory"
                },
                "exit": {
                    "3": "terminate_program",
                    "2": "exit_program"
                },
                "bfd_target_list": {
                    "1": "target_list",
                    "2": "get_target_list"
                }
            }
        },
        "FUN_00102980": {
            "entrypoint": "0x00102980",
            "current_name": "check_file_00102980",
            "code": "\nvoid check_file_00102980(char *file_path)\n\n{\n  char format_check;\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  long bfd_handle;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stat);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = translate_message(0,\"\\'%s\\': No such file\",5);\n        display_error_message(error_message,file_path);\n      }\n      else {\n        error_reason = get_error_message(*errno_ptr);\n        error_message = translate_message(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        display_error_message(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_mode & 0xf000) == 0x4000) {\n      error_message = translate_message(0,\"Warning: \\'%s\\' is a directory\",5);\n      display_error_message(error_message,file_path);\n    }\n    else if ((file_mode & 0xf000) == 0x8000) {\n      if (file_size < 0) {\n        error_message = translate_message(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        display_error_message(error_message,file_path);\n      }\n      else if (file_size != 0) {\n        bfd_handle = open_bfd_file(file_path,DAT_00107340);\n        if (bfd_handle != 0) {\n          format_check = check_bfd_format(bfd_handle,2);\n          if (format_check != '\\0') {\n            process_archived_files();\n            return;\n          }\n          print_bfd(bfd_handle);\n          format_check = close_bfd(bfd_handle);\n          if (format_check != '\\0') {\n            return;\n          }\n        }\n        handle_bfd_error(file_path);\n        DAT_00107314 = 1;\n        return;\n      }\n    }\n    else {\n      error_message = translate_message(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      display_error_message(error_message,file_path);\n    }\n  }\n  DAT_00107314 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102980": "check_file_00102980",
                "param_1": "file_path",
                "cVar1": "format_check",
                "iVar2": "status",
                "piVar3": "errno_ptr",
                "uVar4": "error_message",
                "pcVar5": "error_reason",
                "lVar6": "bfd_handle",
                "sStack_b8": "file_stat",
                "process_archived_files_001023b6": "process_archived_files",
                "sStack_b8.st_mode": "file_mode",
                "sStack_b8.st_size": "file_size",
                "non_fatal": "display_error_message",
                "strerror": "get_error_message",
                "dcgettext": "translate_message",
                "bfd_openr": "open_bfd_file",
                "bfd_check_format": "check_bfd_format",
                "display_bfd": "print_bfd",
                "bfd_close": "close_bfd",
                "bfd_nonfatal": "handle_bfd_error"
            },
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_001023b6",
                "FUN_00102310",
                "FUN_00102200",
                "FUN_001020f0",
                "FUN_00102f40",
                "FUN_00102a40",
                "FUN_001020c0",
                "FUN_00102360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102980": {
                    "2": "check_file_status",
                    "3": "check_file_properties",
                    "1": "check_file_info",
                    "17": "check_file"
                },
                "param_1": {
                    "2": "filename",
                    "3": "file_name",
                    "26": "file_path"
                },
                "cVar1": {
                    "4": "file_format",
                    "10": "format_check",
                    "1": "format_result",
                    "6": "format_check_result",
                    "5": "check_result",
                    "3": "format_valid"
                },
                "iVar2": {
                    "1": "result",
                    "17": "status",
                    "12": "stat_result"
                },
                "piVar3": {
                    "4": "error_code",
                    "1": "errno_location_ptr",
                    "3": "error_location",
                    "6": "errno_ptr",
                    "2": "error_ptr"
                },
                "uVar4": {
                    "1": "warning_message",
                    "2": "message",
                    "17": "error_message",
                    "3": "localized_message",
                    "4": "error_msg"
                },
                "pcVar5": {
                    "4": "str_error",
                    "5": "error_message",
                    "2": "error_msg",
                    "10": "error_reason",
                    "1": "error_description"
                },
                "lVar6": {
                    "1": "file_desc",
                    "2": "file_handle",
                    "3": "file_handler",
                    "6": "bfd_file",
                    "4": "file_descriptor",
                    "13": "bfd_handle"
                },
                "sStack_b8": {
                    "14": "file_stat",
                    "3": "file_info",
                    "1": "file_status",
                    "10": "file_stats"
                },
                "process_archived_files_001023b6": {
                    "3": "process_archived_files"
                },
                "report_data_00102f40": {
                    "2": "report_data"
                },
                "check_and_print_formats_00102a40": {
                    "2": "check_and_print_formats"
                },
                "handle_file_error_00102360": {
                    "2": "handle_file_error"
                },
                "sStack_b8.st_mode": {
                    "1": "file_mode"
                },
                "sStack_b8.st_size": {
                    "1": "file_size"
                },
                "process_archived_files_00102360": {
                    "1": "handle_file_error"
                },
                "non_fatal": {
                    "1": "display_error_message"
                },
                "strerror": {
                    "1": "get_error_message"
                },
                "dcgettext": {
                    "1": "translate_message"
                },
                "bfd_openr": {
                    "1": "open_bfd_file"
                },
                "bfd_check_format": {
                    "1": "check_bfd_format"
                },
                "display_bfd": {
                    "1": "print_bfd"
                },
                "bfd_close": {
                    "1": "close_bfd"
                },
                "bfd_nonfatal": {
                    "1": "handle_bfd_error"
                }
            }
        },
        "FUN_00102a40": {
            "entrypoint": "0x00102a40",
            "current_name": "check_and_print_formats_00102a40",
            "code": "\n\n\nvoid check_and_print_formats_00102a40(undefined8 *binary_file)\n\n{\n  char format_check_result;\n  int error_code;\n  long failing_command;\n  undefined8 matching_formats [2];\n  \n  format_check_result = bfd_check_format(binary_file,2);\n  if (format_check_result == '\\0') {\n    format_check_result = bfd_check_format_matches(binary_file,1,matching_formats);\n    if (format_check_result == '\\0') {\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\n        bfd_nonfatal(*binary_file);\n        display_matching_formats(format_value);\n        DAT_00107314 = 3;\n      }\n      else {\n        format_check_result = bfd_check_format_matches(binary_file,3,matching_formats);\n        if (format_check_result == '\\0') {\n          bfd_nonfatal(*binary_file);\n          error_code = bfd_get_error();\n          if (error_code == 0xd) {\n            display_matching_formats(format_value);\n          }\n          DAT_00107314 = 3;\n        }\n        else {\n          print_file_sizes(binary_file);\n          fwrite(\" (core file\",1,0xb,standard_output);\n          failing_command = get_failing_command(binary_file);\n          if (failing_command != 0) {\n            printf(\" invoked as %s\",failing_command);\n          }\n          puts(\")\\n\");\n        }\n      }\n    }\n    else {\n      print_file_sizes(binary_file);\n      write_character(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102a40": "check_and_print_formats_00102a40",
                "param_1": "binary_file",
                "cVar1": "format_check_result",
                "iVar2": "error_code",
                "local_20": "matching_formats",
                "list_matching_formats": "display_matching_formats",
                "print_sizes": "print_file_sizes",
                "_stdout": "standard_output",
                "bfd_core_file_failing_command": "get_failing_command",
                "lVar3": "failing_command",
                "local_20[0]": "format_value",
                "putchar": "write_character",
                "stdout": "stdout_stream"
            },
            "calling": [
                "FUN_001023b6",
                "FUN_00102980"
            ],
            "called": [
                "FUN_00102310",
                "FUN_00102a90",
                "FUN_001022c0",
                "FUN_001024d2",
                "FUN_00102040"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102a40": {
                    "1": "parse_executable_format",
                    "3": "check_file_format",
                    "2": "check_binary_format",
                    "10": "check_and_print_formats"
                },
                "param_1": {
                    "2": "file_pointer",
                    "1": "input_formats",
                    "4": "binary_file",
                    "3": "file_handle"
                },
                "cVar1": {
                    "2": "format_checked",
                    "1": "format_result",
                    "4": "format_check",
                    "3": "is_valid_format",
                    "7": "format_check_result",
                    "5": "format_valid"
                },
                "iVar2": {
                    "29": "error_code",
                    "2": "bfd_error"
                },
                "local_20": {
                    "1": "matching_format",
                    "2": "format_options",
                    "26": "matching_formats"
                },
                "DAT_00107314": {
                    "1": "result_code"
                },
                "list_matching_formats": {
                    "1": "display_matching_formats"
                },
                "print_sizes": {
                    "2": "print_file_sizes",
                    "1": "print_format_sizes"
                },
                "_stdout": {
                    "2": "standard_output",
                    "1": "stdout_stream"
                },
                "bfd_core_file_failing_command": {
                    "1": "get_failing_command"
                },
                "lVar3": {
                    "1": "command_address",
                    "23": "failing_command"
                },
                "FUN_00102a90": {
                    "1": "print_sizes_and_newline"
                },
                "FUN_001024d2": {
                    "1": "display_core_info"
                },
                "param_1[0]": {
                    "1": "file_ptr_value"
                },
                "local_20[0]": {
                    "1": "format_value"
                },
                "putchar": {
                    "1": "write_character"
                },
                "stdout": {
                    "1": "stdout_stream"
                },
                "get_functions_matching_format": {
                    "1": "list_matching_formats"
                }
            }
        },
        "FUN_00102a90": {
            "entrypoint": "0x00102a90",
            "current_name": "print_sections_summary_00102a90",
            "code": "\n\n\nvoid print_sections_summary_00102a90(char **parameters)\n\n{\n  long section_size;\n  undefined8 extra_data;\n  long total_size;\n  long extra_data2;\n  undefined8 extra_data3;\n  undefined8 extra_var;\n  void *section_sizes;\n  int index;\n  char flag;\n  void *ptr;\n  char *print_format;\n  int width;\n  long total_size;\n  bool loop_condition;\n  bool is_first_iteration;\n  undefined *prefix;\n  \n  if ((_DAT_00107310 == 0) || (DAT_001072f0 = 0, (*(uint *)((long)parameters + 0x44) & 0x52) != 0x10))\n  goto LAB_00102aa8;\n  total_size = (**(code **)(section_info + 0x1f8))();\n  if (total_size < 0) {\n    bfd_nonfatal_function(*parameters);\n    exit_function(1);\nLAB_001026b4:\n    section_sizes = (void *)malloc_function();\n  }\n  else {\n    section_sizes = (void *)0x0;\n    if (total_size != 0) goto LAB_001026b4;\n  }\n  ptr = section_sizes;\n  total_size = (**(code **)(section_info + 0x200))(parameters);\n  flag = (char)ptr;\n  if (total_size < 0) {\n    bfd_nonfatal_function(*parameters);\n    exit_function(1);\n    total_size = extra_data2;\n  }\n  else {\n    flag = '\\0';\n    total_size = DAT_001072f0;\n    while (loop_condition = total_size != 0, total_size = total_size + -1, loop_condition) {\n      section_size = *(long *)((long)section_sizes + total_size * 8);\n      if (((*(byte *)(*(long *)(section_size + 0x20) + 0x25) & 0x10) != 0) &&\n         ((*(byte *)(section_size + 0x19) & 1) == 0)) {\n        total_size = total_size + *(long *)(section_size + 0x10);\n        flag = '\\x01';\n      }\n    }\n  }\n  if (flag != '\\0') {\n    DAT_001072f0 = total_size;\n  }\n  free(section_sizes);\nLAB_00102aa8:\n  if (DAT_00107348 == 1) {\n    DAT_001072e0 = 0;\n    DAT_001072d8 = 0;\n    DAT_001072d0 = 0;\n    bfd_map_over_sections_function(parameters,section_sizer_function,0);\n    if (_DAT_00107310 != 0) {\n      if ((int)DAT_001072d0 < 5) {\n        DAT_001072d0 = 5;\n      }\n      DAT_001072e0 = DAT_001072e0 + DAT_001072f0;\n    }\n    DAT_001072cc = size_number_function(DAT_001072d8);\n    if (DAT_001072cc < 4) {\n      DAT_001072cc = 4;\n    }\n    DAT_001072c8 = size_number_function();\n    if (DAT_001072c8 < 4) {\n      DAT_001072c8 = 4;\n    }\n    DAT_001072e0 = 0;\n    printf(\"%s  \",*parameters);\n    extra_var = extra_data3;\n    if ((undefined8 *)parameters[0x1d] != (undefined8 *)0x0) {\n      printf(\" (ex %s)\",*(undefined8 *)parameters[0x1d]);\n      extra_var = extra_data;\n    }\n    prefix = &DAT_001040fc;\n    printf(\":\\n%-*s   %*s   %*s\\n\",(ulong)DAT_001072d0,\"section\",(ulong)DAT_001072c8,&DAT_00104067,\n           (ulong)DAT_001072cc,&DAT_001040fc,extra_var);\n    bfd_map_over_sections_function(parameters,section_printer_function,0);\n    if (_DAT_00107310 != 0) {\n      DAT_001072e0 = DAT_001072e0 + DAT_001072f0;\n      sysv_one_line(\"*COM*\",DAT_001072f0,0,prefix);\n    }\n    printf(\"%-*s   \",(ulong)DAT_001072d0,\"Total\");\n    print_number_function(DAT_001072c8,DAT_001072e0);\n    puts(\"\\n\");\n    return;\n  }\n  width = (-(uint)(DAT_00107348 == 0) & 0xfffffffd) + 10;\n  loop_condition = DAT_00107348 == 0;\n  DAT_00107308 = 0;\n  DAT_00107300 = 0;\n  DAT_001072f8 = 0;\n  bfd_map_over_sections_function(parameters,berkeley_or_gnu_sum_function,0);\n  DAT_00107308 = DAT_00107308 + DAT_001072f0;\n  index = DAT_001072e8 + 1;\n  is_first_iteration = DAT_001072e8 == 0;\n  DAT_001072e8 = index;\n  if (is_first_iteration) {\n    if (DAT_00107348 == 0) {\n      print_format = \"   text\\t   data\\t    bss\\t    dec\\t    hex\\tfilename\";\n      if (DAT_0010733c == 1) {\n        print_format = \"   text\\t   data\\t    bss\\t    oct\\t    hex\\tfilename\";\n      }\n      puts(print_format);\n    }\n    else {\n      puts(\"      text       data        bss      total filename\");\n    }\n  }\n  total_size = DAT_001072f8 + DAT_00107300 + DAT_00107308;\n  if (_DAT_00107334 != 0) {\n    DAT_00107328 = DAT_00107328 + DAT_001072f8;\n    DAT_00107320 = DAT_00107320 + DAT_00107300;\n    DAT_00107318 = DAT_00107318 + DAT_00107308;\n  }\n  index = (int)(char)((-loop_condition & 0xe9U) + 0x20);\n  print_number_function(width);\n  putc(index,_stdout);\n  print_number_function(width,DAT_00107300);\n  putc(index,_stdout);\n  print_number_function(width,DAT_00107308);\n  putc(index,_stdout);\n  if (DAT_00107348 == 0) {\n    print_format = \"%7lu\\t%7lx\";\n    if (DAT_0010733c == 1) {\n      print_format = \"%7lo\\t%7lx\";\n    }\n    printf(print_format,total_size,total_size);\n  }\n  else {\n    print_number_function(width,total_size);\n  }\n  putc(index,_stdout);\n  fputs(*parameters,_stdout);\n  if ((undefined8 *)parameters[0x1d] == (undefined8 *)0x0) {\n    return;\n  }\n  printf(\" (ex %s)\",*(undefined8 *)parameters[0x1d]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102a90": "print_sections_summary_00102a90",
                "param_1": "parameters",
                "lVar1": "section_size",
                "extraout_RDX": "extra_data",
                "lVar2": "total_size",
                "extraout_RDX_00": "extra_data2",
                "extraout_RDX_01": "extra_data3",
                "uVar3": "extra_var",
                "__ptr": "section_sizes",
                "iVar4": "index",
                "cVar5": "flag",
                "pvVar6": "ptr",
                "pcVar7": "print_format",
                "iVar8": "width",
                "lVar9": "total_size",
                "bVar10": "loop_condition",
                "bVar11": "is_first_iteration",
                "puVar12": "prefix",
                "param_1[1]": "section_info",
                "sysv_internal_sizer": "section_sizer_function",
                "sysv_internal_printer": "section_printer_function",
                "berkeley_or_gnu_sum": "berkeley_or_gnu_sum_function",
                "xexit": "exit_function",
                "bfd_nonfatal": "bfd_nonfatal_function",
                "bfd_map_over_sections": "bfd_map_over_sections_function",
                "rprint_number": "print_number_function",
                "size_number": "size_number_function",
                "xmalloc": "malloc_function"
            },
            "calling": [
                "FUN_00102a40",
                "FUN_001024d2"
            ],
            "called": [
                "FUN_00102070",
                "FUN_00102170",
                "FUN_00102330",
                "FUN_00102fe0",
                "FUN_00102290",
                "FUN_0010259c",
                "FUN_00102e50",
                "FUN_00103d20",
                "FUN_00102120",
                "FUN_00103c50",
                "FUN_00102e90",
                "FUN_00102030",
                "FUN_00103cc0",
                "FUN_001021d0",
                "FUN_00102140",
                "FUN_00102d70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102a90": {
                    "1": "print_sections_stats",
                    "10": "print_sections_summary",
                    "2": "print_section_info",
                    "4": "print_section_summary"
                },
                "param_1": {
                    "3": "sections",
                    "1": "command_line_arguments",
                    "6": "arguments",
                    "2": "input_files"
                },
                "lVar1": {
                    "1": "section_ptr",
                    "2": "section_address",
                    "11": "section_size",
                    "3": "section_index"
                },
                "extraout_RDX": {
                    "2": "extra_data",
                    "1": "ex_1"
                },
                "lVar2": {
                    "1": "total_size_temp",
                    "22": "total_size"
                },
                "extraout_RDX_00": {
                    "1": "total_size_temp",
                    "2": "extraout_rdx_00"
                },
                "extraout_RDX_01": {
                    "1": "extra_string",
                    "2": "extraout_rdx_01"
                },
                "uVar3": {
                    "1": "unknown",
                    "5": "extra_var",
                    "3": "unused_variable"
                },
                "__ptr": {
                    "9": "section_sizes",
                    "3": "section_array",
                    "2": "buffer",
                    "1": "section_ptr",
                    "6": "allocated_memory"
                },
                "iVar4": {
                    "2": "i_var",
                    "1": "counter",
                    "3": "count",
                    "4": "index"
                },
                "cVar5": {
                    "1": "print_total_size",
                    "7": "flag",
                    "5": "section_found"
                },
                "pvVar6": {
                    "1": "pointer2",
                    "5": "temp_ptr",
                    "4": "temp_pointer",
                    "8": "ptr"
                },
                "pcVar7": {
                    "1": "format_specifier",
                    "6": "print_format",
                    "2": "format_string"
                },
                "iVar8": {
                    "2": "length",
                    "3": "padding",
                    "1": "format_specifier",
                    "4": "width"
                },
                "lVar9": {
                    "1": "index",
                    "6": "total_size",
                    "3": "counter",
                    "2": "loop_index"
                },
                "bVar10": {
                    "1": "is_true1",
                    "2": "condition1",
                    "3": "has_sections",
                    "5": "loop_condition"
                },
                "bVar11": {
                    "1": "is_zero",
                    "3": "condition2",
                    "4": "is_first_time",
                    "2": "first_iteration",
                    "6": "is_first_iteration"
                },
                "puVar12": {
                    "1": "last_ptr",
                    "2": "format_specifier",
                    "4": "prefix"
                },
                "FUN_00102fe0": {
                    "1": "sizer_function",
                    "2": "calculate_section_sizes"
                },
                "FUN_0010259c": {
                    "5": "bfd_nonfatal"
                },
                "FUN_00102e50": {
                    "5": "xexit"
                },
                "FUN_00103d20": {
                    "5": "xmalloc"
                },
                "FUN_00103c50": {
                    "1": "sysv_internal_sizer",
                    "3": "sysv_internal_printer"
                },
                "FUN_00102e90": {
                    "1": "sysv_internal_sizer",
                    "2": "sysv_one_line"
                },
                "FUN_00103cc0": {
                    "1": "sysv_internal_sizer",
                    "2": "sysv_one_line"
                },
                "FUN_00102d70": {
                    "2": "rprint_number",
                    "1": "size_number"
                },
                "_DAT_00107310": {
                    "1": "enable_sections"
                },
                "DAT_001072f0": {
                    "1": "total_alloc_size"
                },
                "DAT_00107348": {
                    "1": "enable_total"
                },
                "DAT_001072e0": {
                    "1": "total_size_text"
                },
                "DAT_001072d0": {
                    "1": "section_header_size"
                },
                "DAT_001072cc": {
                    "1": "section_data_size"
                },
                "DAT_001072c8": {
                    "1": "size_width_bss"
                },
                "DAT_0010733c": {
                    "1": "enable_octal"
                },
                "_DAT_00107334": {
                    "1": "some_flag"
                },
                "DAT_00107328": {
                    "1": "total_size_text2"
                },
                "DAT_00107320": {
                    "1": "total_size_data2"
                },
                "DAT_00107318": {
                    "1": "total_bss_size"
                },
                "DAT_00107308": {
                    "1": "total_section_size"
                },
                "DAT_00107300": {
                    "1": "total_data_bss_size"
                },
                "DAT_001072f8": {
                    "1": "total_text_data_size"
                },
                "DAT_001072e8": {
                    "1": "section_count"
                },
                "param_2": {
                    "1": "section_table"
                },
                "getVar2": {
                    "1": "section_info"
                },
                "param_1[1]": {
                    "1": "file"
                },
                "param_1[1] + 0x1f8": {
                    "1": "section_size_func"
                },
                "param_1[1] + 0x200": {
                    "1": "section_print_func"
                },
                "BERKLEY": {
                    "1": "section_size_func_name"
                },
                "GNU": {
                    "1": "section_print_func_name"
                },
                "*param_1": {
                    "1": "argv"
                },
                "**param_1": {
                    "1": "argv"
                },
                "DAT_00107310": {
                    "1": "flag"
                },
                "DAT_001072d8": {
                    "1": "total_size_data"
                },
                "_DAT_0010733c": {
                    "1": "octal_flag"
                },
                "_DAT_00107308": {
                    "1": "total_size_all"
                },
                "_DAT_00107300": {
                    "1": "total_size_data_all"
                },
                "_DAT_001072f8": {
                    "1": "total_size_bss_all"
                },
                "_DAT_001072e8": {
                    "1": "num_times"
                },
                "sysv_internal_sizer": {
                    "1": "section_sizer_function"
                },
                "sysv_internal_printer": {
                    "1": "section_printer_function"
                },
                "berkeley_or_gnu_sum": {
                    "1": "berkeley_or_gnu_sum_function"
                },
                "xexit": {
                    "1": "exit_function"
                },
                "bfd_nonfatal": {
                    "1": "bfd_nonfatal_function"
                },
                "bfd_map_over_sections": {
                    "1": "bfd_map_over_sections_function"
                },
                "rprint_number": {
                    "1": "print_number_function"
                },
                "size_number": {
                    "1": "size_number_function"
                },
                "xmalloc": {
                    "1": "malloc_function"
                }
            }
        },
        "FUN_00102d70": {
            "entrypoint": "0x00102d70",
            "current_name": "update_data_00102d70",
            "code": "\nvoid update_data_00102d70(undefined8 param1,long param2)\n\n{\n  uint flags;\n  long value;\n  \n  flags = *(uint *)(param2 + 0x24);\n  if ((flags & 1) != 0) {\n    value = *(long *)(param2 + 0x40);\n    if (((flags & 0x10) != 0) || ((DAT_00107348 == 0 && ((flags & 8) != 0)))) {\n      DAT_001072f8 = DAT_001072f8 + value;\n      return;\n    }\n    if ((flags & 0x100) != 0) {\n      DAT_00107300 = DAT_00107300 + value;\n      return;\n    }\n    DAT_00107308 = DAT_00107308 + value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102d70": "update_data_00102d70",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "flags",
                "lVar2": "value"
            },
            "calling": [
                "FUN_00102a90"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102d70": {
                    "1": "accumulate_data",
                    "17": "update_data",
                    "5": "update_counts",
                    "3": "update_data_based_on_flags"
                },
                "param_1": {
                    "1": "data",
                    "2": "undefined_param",
                    "13": "param1",
                    "5": "param"
                },
                "param_2": {
                    "2": "data_ptr",
                    "13": "param2",
                    "1": "data_address",
                    "8": "data"
                },
                "uVar1": {
                    "2": "data_flag",
                    "1": "value_flag",
                    "24": "flags"
                },
                "lVar2": {
                    "1": "count_value",
                    "16": "value",
                    "4": "offset",
                    "6": "value_to_add",
                    "2": "data_value"
                },
                "0x24": {
                    "1": "offset1"
                },
                "0x40": {
                    "1": "offset2"
                },
                "0x10": {
                    "1": "flag1_mask"
                },
                "0x8": {
                    "1": "flag2_mask"
                },
                "0x100": {
                    "1": "flag3_mask"
                }
            }
        },
        "FUN_00102db0": {
            "entrypoint": "0x00102db0",
            "current_name": "report_and_exit_00102db0",
            "code": "\nvoid report_and_exit_00102db0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char flag;\n  char *format_string;\n  undefined8 value;\n  char output_string [48];\n  undefined4 size;\n  undefined4 length;\n  undefined *pointer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  pointer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  length = 0x30;\n  param_10_copy = param2;\n  param_11_copy = param3;\n  param_12_copy = param4;\n  param_13_copy = param5;\n  param_14_copy = param6;\n  log_report(param1,&size);\n  value = 1;\n  xexit(1);\n  if (DAT_0010733c == 0) {\n    format_string = \"%lu\";\n  }\n  else {\n    format_string = \"0x%lx\";\n    if (DAT_0010733c == 1) {\n      format_string = \"0%lo\";\n    }\n  }\n  format_and_print(output_string,format_string,value);\n  length;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102db0": "report_and_exit_00102db0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "flag",
                "acStack_110": "output_string",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "pointer",
                "local_c8": "local_buffer",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "input1_copy",
                "local_78": "input2_copy",
                "local_68": "input3_copy",
                "local_58": "input4_copy",
                "local_48": "input5_copy",
                "local_38": "input6_copy",
                "local_28": "input7_copy",
                "local_18": "input8_copy",
                "__format": "format_string",
                "uVar1": "value",
                "strlen(acStack_110)": "length",
                "local_b8": "local_buffer",
                "sprintf": "format_and_print",
                "strlen": "get_formatted_string_length",
                "report": "log_report"
            },
            "calling": [
                "FUN_00103130"
            ],
            "called": [
                "FUN_00102290",
                "FUN_00102ee0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102db0": {
                    "1": "print_report_and_exit",
                    "17": "report_and_exit",
                    "5": "reverse_and_report"
                },
                "param_1": {
                    "1": "first_param",
                    "6": "error_code",
                    "3": "input_1",
                    "9": "input1"
                },
                "param_2": {
                    "6": "arg2",
                    "1": "report_var2",
                    "4": "param2",
                    "2": "param_2",
                    "3": "input_2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "third_param",
                    "6": "arg3",
                    "2": "param_3",
                    "4": "param3",
                    "9": "input3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "report_var4",
                    "4": "param4",
                    "2": "param_4",
                    "6": "arg4",
                    "3": "input_4",
                    "9": "input4"
                },
                "param_5": {
                    "1": "value5",
                    "4": "param5",
                    "9": "input5",
                    "2": "param_5",
                    "3": "input_5",
                    "6": "arg5"
                },
                "param_6": {
                    "1": "report_var6",
                    "3": "input_6",
                    "4": "param6",
                    "9": "input6",
                    "2": "param_6",
                    "6": "arg6"
                },
                "param_7": {
                    "6": "arg7",
                    "9": "input7",
                    "1": "value7",
                    "2": "param_7",
                    "3": "input_7",
                    "4": "param7"
                },
                "param_8": {
                    "1": "eighth_param",
                    "6": "arg8",
                    "9": "input8",
                    "4": "param8",
                    "2": "param_8",
                    "3": "input_8"
                },
                "param_9": {
                    "1": "report_var9",
                    "3": "param9",
                    "7": "param1",
                    "2": "report_value"
                },
                "param_10": {
                    "1": "data1",
                    "3": "value1",
                    "7": "param2",
                    "2": "num1",
                    "4": "param_10"
                },
                "param_11": {
                    "2": "num2",
                    "3": "value2",
                    "4": "param_11",
                    "1": "param_value2",
                    "7": "param3"
                },
                "param_12": {
                    "1": "report_var12",
                    "3": "value3",
                    "2": "num3",
                    "4": "param12",
                    "7": "param4"
                },
                "param_13": {
                    "1": "data4",
                    "4": "param13",
                    "3": "value4",
                    "7": "param5",
                    "2": "num4"
                },
                "param_14": {
                    "1": "long_value6",
                    "7": "param6",
                    "3": "value5",
                    "2": "num5",
                    "4": "param14"
                },
                "in_AL": {
                    "1": "should_report",
                    "11": "flag",
                    "4": "condition",
                    "2": "is_non_zero",
                    "3": "is_error"
                },
                "acStack_110": {
                    "1": "formatted_value",
                    "9": "output_string",
                    "3": "formatted_string",
                    "2": "result_string",
                    "4": "output_buffer"
                },
                "local_d8": {
                    "1": "length_var",
                    "6": "buffer_size",
                    "9": "size",
                    "5": "length",
                    "2": "stack_size",
                    "3": "buffer_length"
                },
                "local_d4": {
                    "1": "buffer_length",
                    "2": "length"
                },
                "local_d0": {
                    "1": "data",
                    "3": "pointer",
                    "2": "stack_pointer"
                },
                "local_c8": {
                    "1": "local_var4",
                    "12": "local_buffer",
                    "3": "local_array",
                    "4": "buffer"
                },
                "local_b0": {
                    "1": "num2_copy",
                    "2": "param10_copy",
                    "5": "param_10_copy"
                },
                "local_a8": {
                    "5": "param_11_copy",
                    "1": "var2",
                    "2": "param11"
                },
                "local_a0": {
                    "5": "param_12_copy",
                    "1": "local_param_12",
                    "2": "param12"
                },
                "local_98": {
                    "2": "param_13",
                    "1": "input5_copy",
                    "5": "param_13_copy"
                },
                "local_90": {
                    "1": "variable5",
                    "2": "param14",
                    "5": "param_14_copy"
                },
                "local_88": {
                    "1": "param1_value",
                    "3": "error_code_copy",
                    "2": "param1",
                    "4": "input1_copy"
                },
                "local_78": {
                    "1": "var2_copy",
                    "2": "local_78",
                    "3": "param2_copy",
                    "4": "input2_copy"
                },
                "local_68": {
                    "4": "input3_copy",
                    "2": "param3",
                    "1": "param3_value",
                    "3": "param3_copy"
                },
                "local_58": {
                    "1": "param4_value",
                    "2": "input_4_copy",
                    "3": "param4_copy",
                    "4": "input4_copy"
                },
                "local_48": {
                    "2": "local_48",
                    "1": "arg5",
                    "3": "param5_copy",
                    "4": "input5_copy"
                },
                "local_38": {
                    "2": "input_6_copy",
                    "1": "local_arg6",
                    "4": "input6_copy",
                    "3": "param6_copy"
                },
                "local_28": {
                    "1": "if_var7",
                    "2": "param7",
                    "4": "input7_copy",
                    "3": "param7_copy"
                },
                "local_18": {
                    "2": "local8",
                    "3": "param8_copy",
                    "1": "var8_copy",
                    "4": "input8_copy"
                },
                "__format": {
                    "1": "format",
                    "6": "format_specifier",
                    "18": "format_string",
                    "4": "format_str"
                },
                "uVar1": {
                    "1": "formatted_value",
                    "17": "value",
                    "4": "result",
                    "2": "format_value"
                },
                "strlen(acStack_110)": {
                    "1": "length"
                },
                "local_b8": {
                    "9": "local_buffer",
                    "6": "local_array",
                    "1": "temp_array",
                    "3": "buffer",
                    "2": "temp_buffer"
                },
                "__gnuc_va_list": {
                    "1": "va_list"
                },
                "sprintf": {
                    "1": "format_and_print"
                },
                "strlen": {
                    "1": "get_formatted_string_length"
                },
                "DAT_0010733c": {
                    "4": "format_type",
                    "1": "print_option",
                    "3": "data_flag"
                },
                "<param_1>": {
                    "1": "flag"
                },
                "<param_2>": {
                    "1": "value1"
                },
                "<param_3>": {
                    "1": "value2"
                },
                "<param_4>": {
                    "1": "value3"
                },
                "<param_5>": {
                    "1": "value4"
                },
                "<param_6>": {
                    "1": "value5"
                },
                "<param_7>": {
                    "1": "value6"
                },
                "<param_8>": {
                    "1": "value7"
                },
                "<param_9>": {
                    "1": "param1"
                },
                "<param_10>": {
                    "1": "param2"
                },
                "<param_11>": {
                    "1": "param3"
                },
                "<param_12>": {
                    "1": "param4"
                },
                "<param_13>": {
                    "1": "param5"
                },
                "<param_14>": {
                    "1": "param6"
                },
                "report": {
                    "1": "log_report"
                },
                "undefined4 param_1": {
                    "1": "error_flag"
                },
                "undefined4 param_2": {
                    "1": "error_code"
                },
                "undefined4 param_3": {
                    "1": "error_type"
                },
                "undefined4 param_4": {
                    "1": "error_source"
                },
                "undefined4 param_5": {
                    "1": "error_dest"
                },
                "undefined4 param_6": {
                    "1": "error_info"
                },
                "undefined4 param_7": {
                    "1": "error_value"
                },
                "undefined4 param_8": {
                    "1": "error_index"
                },
                "undefined8 param_9": {
                    "1": "error_param1"
                },
                "undefined8 param_10": {
                    "1": "error_param2"
                },
                "undefined8 param_11": {
                    "1": "error_param3"
                },
                "undefined8 param_12": {
                    "1": "error_param4"
                },
                "undefined8 param_13": {
                    "1": "error_param5"
                },
                "undefined8 param_14": {
                    "1": "error_param6"
                }
            }
        },
        "FUN_00102e50": {
            "entrypoint": "0x00102e50",
            "current_name": "format_and_print_value_00102e50",
            "code": "\nvoid format_and_print_value_00102e50(undefined8 value)\n\n{\n  char *format_string;\n  char output_buffer [48];\n  \n  if (DAT_0010733c == 0) {\n    format_string = \"%lu\";\n  }\n  else {\n    format_string = \"0x%lx\";\n    if (DAT_0010733c == 1) {\n      format_string = \"0%lo\";\n    }\n  }\n  sprintf(output_buffer,format_string,value);\n  strlen(output_buffer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102e50": "format_and_print_value_00102e50",
                "param_1": "value",
                "__format": "format_string",
                "acStack_38": "output_buffer"
            },
            "calling": [
                "FUN_00102a90"
            ],
            "called": [
                "FUN_001022e0",
                "FUN_00102100",
                "FUN_001026f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102e50": {
                    "6": "print_formatted_number",
                    "1": "format_and_print_integer_value",
                    "3": "print_formatted_value",
                    "7": "format_and_print_number",
                    "5": "format_and_print"
                },
                "param_1": {
                    "1": "input_value",
                    "12": "number",
                    "2": "input_number",
                    "15": "value"
                },
                "__format": {
                    "2": "format_specifier",
                    "27": "format_string"
                },
                "acStack_38": {
                    "1": "formatted_value_buffer",
                    "2": "formatted_number",
                    "3": "output_string",
                    "14": "output_buffer",
                    "10": "buffer"
                }
            }
        },
        "FUN_00102e90": {
            "entrypoint": "0x00102e90",
            "current_name": "print_formatted_number_00102e90",
            "code": "\nvoid print_formatted_number_00102e90(ulong width,undefined8 number)\n\n{\n  char *format_string;\n  char formatted_number [56];\n  \n  if (DAT_0010733c == 0) {\n    sprintf(formatted_number,\"%lu\",number);\n    printf(\"%*s\",width & 0xffffffff,formatted_number);\n  }\n  else {\n    format_string = \"0x%lx\";\n    if (DAT_0010733c == 1) {\n      format_string = \"0%lo\";\n    }\n    sprintf(formatted_number,format_string,number);\n    printf(\"%*s\",width & 0xffffffff,formatted_number);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102e90": "print_formatted_number_00102e90",
                "param_1": "width",
                "param_2": "number",
                "acStack_48": "formatted_number",
                "__format": "format_string"
            },
            "calling": [
                "FUN_00102a90",
                "FUN_00103130",
                "FUN_00102fe0"
            ],
            "called": [
                "FUN_00102120",
                "FUN_00102710",
                "FUN_001022e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102e90": {
                    "16": "print_formatted_number",
                    "1": "format_and_print_value",
                    "13": "print_formatted_value"
                },
                "param_1": {
                    "1": "padding_length",
                    "23": "width",
                    "2": "length"
                },
                "param_2": {
                    "17": "number",
                    "14": "value"
                },
                "acStack_48": {
                    "1": "output",
                    "7": "buffer",
                    "2": "formatted_string",
                    "3": "output_buffer",
                    "5": "formatted_value"
                },
                "__format": {
                    "7": "format",
                    "4": "format_specifier",
                    "15": "format_string"
                }
            }
        },
        "FUN_00102ee0": {
            "entrypoint": "0x00102ee0",
            "current_name": "print_error_message_00102ee0",
            "code": "\n\n\nvoid print_error_message_00102ee0(char *message,arguments arguments)\n\n{\n  flush_standard_output(standard_output);\n  print_formatted(standard_error,\"%s: \",DAT_00107350);\n  print_formatted_to_standard_error(standard_error,message,arguments);\n  put_character_to_standard_error(10,standard_error);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102ee0": "print_error_message_00102ee0",
                "param_1": "message",
                "__gnuc_va_list": "arguments",
                "param_2": "arguments",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "stdout": "standard_output",
                "stderr": "standard_error",
                "fprintf": "print_formatted",
                "fflush": "flush_standard_output",
                "vfprintf": "print_formatted_to_standard_error",
                "putc": "put_character_to_standard_error"
            },
            "calling": [
                "FUN_00102db0",
                "FUN_00102f40"
            ],
            "called": [
                "FUN_001021e0",
                "FUN_001021d0",
                "FUN_001022b0",
                "FUN_00102230"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102ee0": {
                    "1": "print_formatted_message",
                    "28": "print_error_message"
                },
                "param_1": {
                    "1": "error_message_format",
                    "13": "message",
                    "3": "format_string"
                },
                "__gnuc_va_list": {
                    "1": "variable_arguments"
                },
                "param_2": {
                    "1": "error_message_args",
                    "12": "arguments",
                    "2": "argument_list",
                    "9": "args"
                },
                "_stdout": {
                    "1": "stdout_file",
                    "11": "standard_output",
                    "4": "stdout_stream",
                    "2": "stdout"
                },
                "_stderr": {
                    "3": "error_stream",
                    "1": "stderr_file",
                    "4": "stderr_stream",
                    "8": "standard_error",
                    "2": "stderr"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "stderr": {
                    "1": "standard_error"
                },
                "__gnuc_va_list param_2": {
                    "1": "args"
                },
                "fprintf": {
                    "1": "print_to_standard_error"
                },
                "fflush": {
                    "1": "flush_standard_output"
                },
                "vfprintf": {
                    "1": "print_formatted_to_standard_error"
                },
                "putc": {
                    "1": "put_character_to_standard_error"
                }
            }
        },
        "FUN_00102f40": {
            "entrypoint": "0x00102f40",
            "current_name": "report_data_00102f40",
            "code": "\nvoid report_data_00102f40(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 buffer_size;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 local_param10;\n  undefined8 local_param11;\n  undefined8 local_param12;\n  undefined8 local_param13;\n  undefined8 local_param14;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  buffer_size = 0x30;\n  local_param10 = param10;\n  local_param11 = param11;\n  local_param12 = param12;\n  local_param13 = param13;\n  local_param14 = param14;\n  report(data,&size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102f40": "report_data_00102f40",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "buffer_size",
                "local_d0": "buffer",
                "local_c8": "local_buffer",
                "local_b8": "local_buffer",
                "local_b0": "local_param10",
                "local_a8": "local_param11",
                "local_a0": "local_param12",
                "local_98": "local_param13",
                "local_90": "local_param14",
                "local_88": "input1_copy",
                "local_78": "input2_copy",
                "local_68": "input3_copy",
                "local_58": "input4_copy",
                "local_48": "input5_copy",
                "local_38": "input6_copy",
                "local_28": "input7_copy",
                "local_18": "input8_copy"
            },
            "calling": [
                "FUN_00103130",
                "FUN_00102980",
                "FUN_00102360"
            ],
            "called": [
                "FUN_00102ee0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102f40": {
                    "5": "report_function",
                    "1": "report_parameters",
                    "17": "report_data",
                    "2": "report_and_process_data"
                },
                "param_1": {
                    "1": "first_param",
                    "3": "data1",
                    "2": "arg1",
                    "8": "input1"
                },
                "param_2": {
                    "2": "arg2",
                    "1": "arg_2",
                    "3": "report_param2",
                    "8": "input2"
                },
                "param_3": {
                    "3": "input_3",
                    "1": "input_param3",
                    "2": "arg3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "arg_4",
                    "3": "data4",
                    "2": "arg4",
                    "8": "input4"
                },
                "param_5": {
                    "3": "value5",
                    "1": "condition_5",
                    "8": "input5",
                    "2": "arg5"
                },
                "param_6": {
                    "1": "input_param6",
                    "3": "data6",
                    "8": "input6",
                    "2": "arg6"
                },
                "param_7": {
                    "1": "input_param7",
                    "2": "arg7",
                    "8": "input7",
                    "3": "data7"
                },
                "param_8": {
                    "3": "input_8",
                    "1": "input_param8",
                    "2": "arg8",
                    "8": "input8"
                },
                "param_9": {
                    "1": "report_param_1",
                    "2": "report_param9",
                    "3": "param1",
                    "6": "data"
                },
                "param_10": {
                    "2": "param_b",
                    "1": "output2",
                    "7": "param10",
                    "3": "param_10"
                },
                "param_11": {
                    "1": "data_11",
                    "7": "param11",
                    "2": "param_b",
                    "3": "param_11"
                },
                "param_12": {
                    "1": "data_param3",
                    "2": "param_c",
                    "3": "param_12",
                    "7": "param12"
                },
                "param_13": {
                    "1": "source_param4",
                    "3": "param_13",
                    "2": "data4",
                    "7": "param13"
                },
                "param_14": {
                    "2": "param_e",
                    "1": "updated_param_14",
                    "3": "param_14",
                    "7": "param14"
                },
                "in_AL": {
                    "1": "conditional_check",
                    "16": "flag",
                    "6": "condition"
                },
                "local_d8": {
                    "1": "size1",
                    "7": "buffer_size",
                    "10": "size",
                    "4": "length",
                    "2": "stack_size"
                },
                "local_d4": {
                    "2": "size",
                    "3": "buffer_size",
                    "1": "buffer_length"
                },
                "local_d0": {
                    "1": "local_pointer",
                    "2": "buffer_address",
                    "9": "buffer",
                    "5": "stack_pointer"
                },
                "local_c8": {
                    "1": "local_array_pointer",
                    "2": "local_buffer2",
                    "13": "local_buffer",
                    "6": "buffer"
                },
                "local_b8": {
                    "1": "copy_buffer",
                    "7": "local_buffer",
                    "5": "temp_buffer",
                    "2": "data_array",
                    "3": "temporary_buffer"
                },
                "local_b0": {
                    "1": "temp1",
                    "4": "param10_copy",
                    "2": "local_param_10"
                },
                "local_a8": {
                    "4": "local_param11",
                    "1": "local_param_b",
                    "2": "local_param_11"
                },
                "local_a0": {
                    "4": "local_param12",
                    "1": "param12_var",
                    "2": "local_param_12"
                },
                "local_98": {
                    "1": "param5_copy",
                    "4": "param_13_copy",
                    "2": "local_param_13"
                },
                "local_90": {
                    "1": "param14",
                    "4": "param_14_copy",
                    "2": "local_param_14"
                },
                "local_88": {
                    "1": "data1",
                    "2": "value1_copy",
                    "4": "input1_copy"
                },
                "local_78": {
                    "1": "new_second_param",
                    "2": "value2_copy",
                    "4": "input2_copy"
                },
                "local_68": {
                    "1": "local_data3",
                    "2": "value3_copy",
                    "4": "input3_copy"
                },
                "local_58": {
                    "1": "input_4_copy",
                    "2": "local_input4",
                    "4": "input4_copy"
                },
                "local_48": {
                    "1": "data_5_copy",
                    "2": "local_input5",
                    "4": "input5_copy"
                },
                "local_38": {
                    "1": "condition_6_copy",
                    "4": "input6_copy",
                    "2": "value6_copy"
                },
                "local_28": {
                    "2": "value7_copy",
                    "1": "local_param7",
                    "4": "input7_copy"
                },
                "local_18": {
                    "1": "data8_copy",
                    "4": "input8_copy",
                    "2": "local_input8"
                },
                "FUN_00102ee0": {
                    "1": "process_data"
                }
            }
        },
        "FUN_00102fe0": {
            "entrypoint": "0x00102fe0",
            "current_name": "print_numbers_00102fe0",
            "code": "\nvoid print_numbers_00102fe0(undefined8 label,undefined8 number1,undefined8 number2)\n\n{\n  print_formatted(\"%-*s   \",(ulong)DAT_001072d0,label);\n  reverse_print_number(DAT_001072c8,number1);\n  print_formatted(\"   \");\n  reverse_print_number(DAT_001072cc,number2);\n  print_newline(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102fe0": "print_numbers_00102fe0",
                "param_1": "label",
                "param_2": "number1",
                "param_3": "number2",
                "rprint_number": "reverse_print_number",
                "printf": "print_formatted",
                "putchar": "print_newline"
            },
            "calling": [
                "FUN_00102a90",
                "FUN_00103cc0"
            ],
            "called": [
                "FUN_00102120",
                "FUN_00102e90",
                "FUN_00102040"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102fe0": {
                    "2": "print_params",
                    "1": "print_formatted_output",
                    "16": "print_numbers",
                    "3": "print_formatted_numbers"
                },
                "param_1": {
                    "1": "output_format",
                    "2": "text",
                    "5": "message",
                    "4": "string",
                    "12": "label"
                },
                "param_2": {
                    "2": "value_1",
                    "4": "value1",
                    "1": "number",
                    "15": "number1",
                    "6": "number_1"
                },
                "param_3": {
                    "3": "value_2",
                    "4": "value2",
                    "1": "param_3",
                    "2": "num_param_2",
                    "15": "number2",
                    "6": "number_2"
                },
                "rprint_number": {
                    "4": "reverse_print_number"
                },
                "printf": {
                    "2": "print_formatted"
                },
                "putchar": {
                    "3": "print_newline"
                },
                "FUN_00102e90": {
                    "1": "print_number"
                }
            }
        },
        "FUN_00103040": {
            "entrypoint": "0x00103040",
            "current_name": "start_main_loop_00103040",
            "code": "\nvoid start_main_loop_00103040 start_main_loop_00103040(undefined8 arg1,undefined8 argv)\n\n{\n  undefined auxiliary_stack [8];\n  \n  __libc_start_main(main,argv,&stack0x00000008,0,0,arg1,auxiliary_stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00103040": "start_main_loop_00103040",
                "param_1": "arg1",
                "param_2": "argv",
                "auStack_8": "auxiliary_stack",
                "processEntry": "start_main_loop"
            },
            "calling": [],
            "called": [
                "FUN_00108010",
                "FUN_00103130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103040": {
                    "2": "process_entry",
                    "4": "start_main_loop",
                    "1": "start_main_process"
                },
                "param_1": {
                    "1": "undefined_1",
                    "4": "argc",
                    "2": "unused_param",
                    "5": "arg1",
                    "3": "entry_point"
                },
                "param_2": {
                    "5": "argv",
                    "1": "undefined_2",
                    "4": "param_2",
                    "2": "argument2",
                    "3": "argc"
                },
                "auStack_8": {
                    "2": "stack_8",
                    "1": "stack_frame",
                    "4": "auxiliary_stack",
                    "3": "stack"
                },
                "FUN_00103130": {
                    "1": "process_entry_data"
                },
                "processEntry": {
                    "1": "execute_main_with_parameters",
                    "13": "start_main_loop",
                    "2": "start_main"
                }
            }
        },
        "FUN_00103070": {
            "entrypoint": "0x00103070",
            "current_name": "FUNC_00103070",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103083) */\n/* WARNING: Removing unreachable block (ram,0x0010308f) */\n\nvoid FUNC_00103070(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103070": "FUNC_00103070"
            },
            "calling": [
                "FUN_001030e0"
            ],
            "called": [
                "FUN_00108020"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_001030a0": {
            "entrypoint": "0x001030a0",
            "current_name": "FUNC_001030a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001030c4) */\n/* WARNING: Removing unreachable block (ram,0x001030d0) */\n\nvoid FUNC_001030a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_001030a0": "FUNC_001030a0"
            },
            "calling": [
                "FUN_00103120"
            ],
            "called": [
                "FUN_001081c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_001030e0": {
            "entrypoint": "0x001030e0",
            "current_name": "initialize_program_001030e0",
            "code": "\nvoid initialize_program_001030e0(void)\n\n{\n  if (DAT_001072c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_001071a8);\n  deregister_tm_clones();\n  DAT_001072c0 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_001030e0": "initialize_program_001030e0"
            },
            "calling": [],
            "called": [
                "FUN_00102350",
                "FUN_00103070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001030e0": {
                    "9": "initialize",
                    "3": "initialize_application",
                    "1": "initialize_if_needed",
                    "15": "initialize_program"
                },
                "FUNC_00103070": {
                    "1": "cleanup_operations",
                    "2": "deregister_tm_clones",
                    "4": "cleanup_resources",
                    "6": "cleanup",
                    "11": "perform_cleanup"
                }
            }
        },
        "FUN_00103120": {
            "entrypoint": "0x00103120",
            "current_name": "FUN_00103120",
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_001030a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00103130": {
            "entrypoint": "0x00103130",
            "current_name": "parse_command_line_arguments_00103130",
            "code": "\n\n\nundefined4 parse_command_line_arguments_00103130(int argc,long *argv)\n\n{\n  byte *byte_pointer1;\n  byte byte_var2;\n  bool bool_var1;\n  bool bool_var2;\n  char *char_pointer1;\n  byte byte_var2;\n  char char_var;\n  int index;\n  undefined4 result;\n  FILE *file_stream;\n  byte *byte_pointer2;\n  char *char_pointer2;\n  size_t size;\n  byte *byte_pointer3;\n  long *long_pointer;\n  long long_var1;\n  long *long_pointer2;\n  long *long_pointer3;\n  ulong ulong_var1;\n  undefined8 undefined_var2;\n  char *char_pointer3;\n  byte *byte_pointer4;\n  undefined **undefined_pointer;\n  long long_var2;\n  byte *byte_pointer5;\n  int index2;\n  int index3;\n  bool bool_var3;\n  int local_var1;\n  int local_var2;\n  size_t local_var3;\n  get_file_info local_stat;\n  \n  set_locale(5,\"\");\n  char_pointer3 = \"binutils\";\n  set_locale(0,\"\");\n  bind_text_domain(\"binutils\",\"/usr/share/locale\");\n  text_domain(\"binutils\");\n  DAT_00107350 = *argv;\n  set_program_name();\n  set_error_program_name(DAT_00107350);\n  long_pointer2 = argv;\n  if (1 < argc) {\n    local_var2 = 2000;\n    local_var1 = 0;\n    index = 1;\n    do {\n      while( true ) {\n        index3 = index;\n        undefined_pointer = (undefined **)(long)index3;\n        if (*(char *)long_pointer2[(long)undefined_pointer] == '@') break;\nLAB_001035a0:\n        if (argc <= index3 + 1) goto LAB_00103612;\nLAB_001035aa:\n        index = index3 + 1;\n        local_var1 = index3;\n      }\n      local_var2 = local_var2 + -1;\n      if (local_var2 == 0) goto LAB_001039c5;\n      char_pointer3 = (char *)long_pointer2[(long)undefined_pointer] + 1;\n      index = get_file_info(char_pointer3,&local_stat);\n      if (index < 0) goto LAB_001035a0;\n      if ((local_stat.st_mode & 0xf000) == 0x4000) {\n        long_var2 = *long_pointer2;\n        char_pointer3 = \"%s: error: @-file refers to a directory\\n\";\n        do {\n          print_to_stream(standard_error,char_pointer3,long_var2);\n          exit_program(1);\nLAB_001039c5:\n          long_var2 = *long_pointer2;\n          char_pointer3 = \"%s: error: too many @-files encountered\\n\";\n        } while( true );\n      }\n      file_stream = open_file(char_pointer3,\"r\");\n      if (file_stream == (FILE *)0x0) goto LAB_001035a0;\n      index = set_file_position(file_stream,0,2);\n      if (((index == -1) ||\n          (char_pointer3 = (char *)get_file_position(file_stream), char_pointer3 == (char *)0xffffffffffffffff)) ||\n         (index = set_file_position(file_stream,0,0), index == -1)) {\nLAB_00103600:\n        close_file(file_stream);\n        if (index3 + 1 < argc) goto LAB_001035aa;\n        break;\n      }\n      byte_pointer2 = (byte *)allocate_memory(char_pointer3 + 1);\n      char_pointer2 = (char *)read_file(byte_pointer2,1,(size_t)char_pointer3,file_stream);\n      if ((char_pointer3 != char_pointer2) && (index = file_error(file_stream), index != 0)) {\n        free_memory(byte_pointer2);\n        goto LAB_00103600;\n      }\n      byte_pointer2[(long)char_pointer2] = 0;\n      byte_var2 = *byte_pointer2;\n      byte_pointer4 = byte_pointer2;\n      if (byte_var2 != 0) {\nLAB_00103300:\n        if (((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) goto LAB_001032f0;\n        size = get_string_length((char *)byte_pointer2);\n        byte_pointer3 = (byte *)allocate_memory(size + 1);\n        index = 0;\n        bool_var3 = false;\n        bool_var2 = false;\n        long_var2 = 0;\n        long_pointer = (long *)0x0;\n        bool_var1 = false;\n        byte_pointer4 = byte_pointer2;\n        do {\n          while (((&_sch_istable)[(ulong)*byte_pointer4 * 2] & 0x40) != 0) {\n            byte_pointer4 = byte_pointer4 + 1;\n          }\n          if ((index == 0) || (long_pointer3 = long_pointer + long_var2, index + -1 <= (int)long_var2)) {\n            if (long_pointer == (long *)0x0) {\n              index = 8;\n              long_pointer = (long *)allocate_memory(0x40);\n              long_pointer3 = long_pointer + long_var2;\n              *long_pointer3 = 0;\n            }\n            else {\n              index = index * 2;\n              long_pointer = (long *)reallocate_memory(long_pointer,(long)index << 3);\n              long_pointer3 = long_pointer + long_var2;\n              *long_pointer3 = 0;\n            }\n          }\n          byte_var2 = *byte_pointer4;\n          byte_pointer5 = byte_pointer3;\n          while (byte_var2 != 0) {\n            while( true ) {\n              if ((((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) &&\n                 (!(bool)(bool_var2 | bool_var1 | bool_var3))) {\n                bool_var1 = false;\n                bool_var3 = false;\n                bool_var2 = false;\n                goto LAB_00103410;\n              }\n              if (!bool_var1) break;\n              byte_pointer4 = byte_pointer4 + 1;\n              *byte_pointer5 = byte_var2;\n              byte_pointer5 = byte_pointer5 + 1;\n              bool_var1 = false;\n              byte_var2 = *byte_pointer4;\n              if (byte_var2 == 0) goto LAB_00103410;\n            }\n            if (byte_var2 == 0x5c) {\n              bool_var1 = true;\n            }\n            else if (bool_var2) {\n              if (byte_var2 == 0x27) {\n                bool_var2 = false;\n              }\n              else {\nLAB_00103585:\n                *byte_pointer5 = byte_var2;\n                byte_pointer5 = byte_pointer5 + 1;\n              }\n            }\n            else if (bool_var3) {\n              if (byte_var2 != 0x22) goto LAB_00103585;\n              bool_var3 = false;\n            }\n            else if (byte_var2 == 0x27) {\n              bool_var2 = true;\n            }\n            else {\n              if (byte_var2 != 0x22) goto LAB_00103585;\n              bool_var3 = true;\n            }\n            byte_pointer1 = byte_pointer4 + 1;\n            byte_pointer4 = byte_pointer4 + 1;\n            byte_var2 = *byte_pointer1;\n          }\nLAB_00103410:\n          *byte_pointer5 = 0;\n          long_var1 = duplicate_string(byte_pointer3);\n          *long_pointer3 = long_var1;\n          long_pointer[long_var2 + 1] = 0;\n          byte_var2 = *byte_pointer4;\n          byte_var2 = (&_sch_istable)[(ulong)byte_var2 * 2];\n          while ((byte_var2 & 0x40) != 0) {\n            byte_var2 = byte_pointer4[1];\n            byte_pointer4 = byte_pointer4 + 1;\n            byte_var2 = (&_sch_istable)[(ulong)byte_var2 * 2];\n          }\n          long_var2 = long_var2 + 1;\n        } while (byte_var2 != 0);\n        free_memory(byte_pointer3);\n        long_pointer3 = long_pointer2;\n        if (argv == long_pointer2) goto LAB_0010372c;\n        goto LAB_001034ad;\n      }\nLAB_0010370f:\n      long_pointer = (long *)allocate_memory_checked();\n      *long_pointer = 0;\n      if (argv == long_pointer2) {\nLAB_0010372c:\n        if (*long_pointer2 == 0) {\n          index = 0;\n        }\n        else {\n          long_var2 = 1;\n          do {\n            index = (int)long_var2;\n            long_pointer3 = long_pointer2 + long_var2;\n            long_var2 = long_var2 + 1;\n          } while (*long_pointer3 != 0);\n        }\n        long_var1 = 0;\n        long_pointer3 = (long *)allocate_memory((long)(index + 1) << 3);\n        long_var2 = *long_pointer2;\n        while (long_var2 != 0) {\n          undefined_var2 = duplicate_string();\n          *(undefined8 *)((long)long_pointer3 + long_var1) = undefined_var2;\n          long_var1 = long_var1 + 8;\n          long_var2 = *(long *)((long)long_pointer2 + long_var1);\n        }\n        *(undefined8 *)((long)long_pointer3 + long_var1) = 0;\nLAB_001034ad:\n        long_pointer2 = long_pointer3;\n        if (*long_pointer == 0) goto LAB_001038cc;\n        char_pointer3 = (char *)0x0;\n        do {\n          char_pointer3 = char_pointer3 + 1;\n        } while (long_pointer[(long)char_pointer3] != 0);\n        local_var3 = (long)char_pointer3 * 8;\n      }\n      else {\nLAB_001038cc:\n        char_pointer3 = (char *)0x0;\n        local_var3 = 0;\n      }\n      free_memory((void *)long_pointer2[(long)undefined_pointer]);\n      long_pointer2 = (long *)reallocate_memory(long_pointer2,(long)(char_pointer3 + (long)argc + 1) * 8);\n      index2 = argc + -1 + (int)char_pointer3;\n      move_memory(long_pointer2 + (long)(undefined **)((long)undefined_pointer + (long)char_pointer3),\n              long_pointer2 + (long)((long)undefined_pointer + 1),(long)(argc - index3) << 3);\n      copy_memory(long_pointer2 + (long)undefined_pointer,long_pointer,local_var3);\n      free_memory(long_pointer);\n      free_memory(byte_pointer2);\n      close_file(file_stream);\n      undefined_pointer = (undefined **)((long)undefined_pointer + (long)char_pointer3);\n      index = local_var1 + 1;\n      argc = index2;\n    } while (local_var1 + 1 < index2);\n  }\nLAB_00103612:\n  index = bfd_init();\n  if (index != 0x118) goto LAB_001039f8;\n  char_pointer2 = \"x86_64-pc-linux-gnu\";\n  undefined_pointer = &PTR_s_common_001071c0;\n  char_pointer3 = \"ABGHhVvdfotx\";\n  char_var = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n  if (char_var == '\\0') {\n    result = bfd_get_error();\n    char_pointer3 = (char *)bfd_errmsg(result);\n    undefined_var2 = get_localized_message(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    ulong_var1 = fatal_error(undefined_var2,\"x86_64-pc-linux-gnu\",char_pointer3);\n    goto LAB_00103b74;\n  }\n  do {\n    while (index = get_long_option(argc,long_pointer2,char_pointer3,undefined_pointer,0), index != -1) {\n      char_pointer1 = char_pointer2;\n      if (index < 0x79) {\n        if (index < 0x3f) {\nswitchD_001037fd_caseD_40:\n          index = get_long_option(argc,long_pointer2,char_pointer3,undefined_pointer,0);\n          if (index == -1) break;\n          if (0x78 < index) goto LAB_00103937;\n          if (0x3e < index) {\n            switch(index) {\n            case 0x3f:\n            case 0x48:\n            case 0x68:\n              goto switchD_001037fd_caseD_3f;\n            case 0x41:\n              goto switchD_001037fd_caseD_41;\n            case 0x42:\n              goto switchD_001037fd_caseD_42;\n            case 0x47:\n              goto switchD_001037fd_caseD_47;\n            case 0x56:\n            case 0x76:\n              goto switchD_001037fd_caseD_56;\n            case 100:\n              goto switchD_001037fd_caseD_64;\n            case 0x6f:\n              goto switchD_001037fd_caseD_6f;\n            case 0x74:\n              goto switchD_001037fd_caseD_74;\n            case 0x78:\n              goto switchD_001037fd_caseD_78;\n            }\n          }\n          do {\n            do {\n              while( true ) {\n                index = get_long_option(argc,long_pointer2,char_pointer3,undefined_pointer,0);\n                if (index == -1) goto LAB_00103664;\n                if (0x78 < index) break;\n                if (0x3e < index) {\n                  switch(index) {\n                  case 0x3f:\n                  case 0x48:\n                  case 0x68:\n                    goto switchD_001037fd_caseD_3f;\n                  case 0x41:\n                    goto switchD_001037fd_caseD_41;\n                  case 0x42:\n                    goto switchD_001037fd_caseD_42;\n                  case 0x47:\n                    goto switchD_001037fd_caseD_47;\n                  case 0x56:\n                  case 0x76:\n                    goto switchD_001037fd_caseD_56;\n                  case 100:\n                    goto switchD_001037fd_caseD_64;\n                  case 0x6f:\n                    goto switchD_001037fd_caseD_6f;\n                  case 0x74:\n                    goto switchD_001037fd_caseD_74;\n                  case 0x78:\n                    goto switchD_001037fd_caseD_78;\n                  }\n                }\n              }\nLAB_00103937:\n              if (index == 0xca) goto LAB_001039d1;\n            } while (0xca < index);\n            if (index == 200) goto LAB_00103869;\n          } while (index != 0xc9);\n          goto LAB_00103a15;\n        }\n        switch(index) {\n        case 0x3f:\n        case 0x48:\n        case 0x68:\n          goto switchD_001037fd_caseD_3f;\n        default:\n          goto switchD_001037fd_caseD_40;\n        case 0x41:\n          goto switchD_001037fd_caseD_41;\n        case 0x42:\nswitchD_001037fd_caseD_42:\n          DAT_00107348 = 0;\n          break;\n        case 0x47:\nswitchD_001037fd_caseD_47:\n          DAT_00107348 = 2;\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_001037fd_caseD_56:\n          _DAT_00107338 = 1;\n          break;\n        case 100:\n          goto switchD_001037fd_caseD_64;\n        case 0x6f:\n          goto switchD_001037fd_caseD_6f;\n        case 0x74:\nswitchD_001037fd_caseD_74:\n          _DAT_00107334 = 1;\n          break;\n        case 0x78:\n          goto switchD_001037fd_caseD_78;\n        }\n      }\n      else if (index == 0xca) {\nLAB_001039d1:\n        DAT_00107340 = optional_argument;\n      }\n      else {\n        if (0xca < index) goto switchD_001037fd_caseD_40;\n        if (index != 200) {\n          if (index != 0xc9) goto switchD_001037fd_caseD_40;\n          goto LAB_00103a15;\n        }\nLAB_00103869:\n        char_pointer2 = optional_argument;\n        if (0x31 < (byte)(*optional_argument + 0xbeU)) goto LAB_00103bc8;\n        ulong_var1 = 1L << (*optional_argument + 0xbeU & 0x3f);\n        if ((ulong_var1 & 0x2000000020) != 0) goto switchD_001037fd_caseD_47;\n        if ((ulong_var1 & 0x2000000020000) == 0) {\nLAB_00103b74:\n          if ((ulong_var1 & 0x100000001) == 0) goto LAB_00103bc8;\n          goto switchD_001037fd_caseD_42;\n        }\nswitchD_001037fd_caseD_41:\n        DAT_00107348 = 1;\n      }\n    }\nLAB_00103664:\n    if (_DAT_00107338 != 0) {\n      print_formatted(\"GNU %s %s\\n\",&DAT_00104067,\"(GNU Binutils for Debian) 2.40\");\n      char_pointer3 = (char *)get_localized_message(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      print_formatted(char_pointer3);\n      char_pointer3 = (char *)get_localized_message(0,\n                                  \"This program is free_memory software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      print_formatted(char_pointer3);\n                    \n      exit_program(0);\n    }\n    if (_DAT_00107330 == 0) {\n      index = optional_index - argc;\n      if (optional_index == argc) {\n        display_file(\"a.out\");\n      }\n      else {\n        while (long_var2 = (long)optional_index, SBORROW4(optional_index,argc) != index < 0) {\n          optional_index = optional_index + 1;\n          display_file(long_pointer2[long_var2]);\n          index = optional_index - argc;\n        }\n      }\n      if ((_DAT_00107334 != 0) && ((DAT_00107348 & 0xfffffffd) == 0)) {\n        long_var2 = DAT_00107320 + DAT_00107328 + DAT_00107318;\n        index = (-(uint)(DAT_00107348 == 0) & 0xfffffffd) + 10;\n        bool_var3 = DAT_00107348 == 0;\n        rprint_number(index);\n        index3 = (int)(char)((-bool_var3 & 0xe9U) + 0x20);\n        put_char(index3,standard_output);\n        rprint_number(index,DAT_00107320);\n        put_char(index3,standard_output);\n        rprint_number(index,DAT_00107318);\n        put_char(index3,standard_output);\n        if (DAT_00107348 == 0) {\n          char_pointer3 = \"%7lu\\t%7lx\";\n          if (DAT_0010733c == 1) {\n            char_pointer3 = \"%7lo\\t%7lx\";\n          }\n          print_formatted(char_pointer3,long_var2,long_var2);\n        }\n        else {\n          rprint_number(index,long_var2);\n        }\n        put_char(index3,standard_output);\n        write_to_file(\"(TOTALS)\\n\",1,9,standard_output);\n      }\n      return DAT_00107314;\n    }\n    print_usage(standard_output,0);\nLAB_001039f8:\n    undefined_var2 = get_localized_message(0,\"fatal_error error: libbfd ABI mismatch\",5);\n    fatal_error(undefined_var2);\nLAB_00103a15:\n    long_var2 = string_to_long(optional_argument,(char **)0x0,10);\n    char_pointer2 = optional_argument;\n    index = (int)long_var2;\n    char_pointer1 = &option_argument;\n    if (index == 10) {\nswitchD_001037fd_caseD_64:\n      char_pointer2 = char_pointer1;\n      DAT_0010733c = 0;\n    }\n    else if (index == 0x10) {\nswitchD_001037fd_caseD_78:\n      char_pointer2 = char_pointer1;\n      DAT_0010733c = 2;\n    }\n    else {\n      if (index != 8) {\n        undefined_var2 = get_localized_message(0,\"Invalid radix: %s\\n\",5);\n        char_pointer3 = &option_argument;\n        do {\n          non_fatal_error(undefined_var2,char_pointer2);\n          char_pointer2 = char_pointer3;\nswitchD_001037fd_caseD_3f:\n          print_usage(standard_error,1);\nLAB_00103bc8:\n          undefined_var2 = get_localized_message(0,\"invalid argument to --format: %s\",5);\n          char_pointer3 = char_pointer2;\n        } while( true );\n      }\nswitchD_001037fd_caseD_6f:\n      char_pointer2 = char_pointer1;\n      DAT_0010733c = 1;\n    }\n  } while( true );\nLAB_001032f0:\n  byte_var2 = byte_pointer4[1];\n  byte_pointer4 = byte_pointer4 + 1;\n  if (byte_var2 == 0) goto LAB_0010370f;\n  goto LAB_00103300;\n}\n\n",
            "renaming": {
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_pointer1",
                "bVar2": "byte_var2",
                "bVar3": "bool_var1",
                "bVar4": "bool_var2",
                "pcVar5": "char_pointer1",
                "bVar6": "byte_var2",
                "cVar7": "char_var",
                "iVar8": "index",
                "uVar9": "result",
                "__stream": "file_stream",
                "__s": "byte_pointer2",
                "pcVar10": "char_pointer2",
                "sVar11": "size",
                "__ptr": "byte_pointer3",
                "__src": "long_pointer",
                "lVar12": "long_var1",
                "plVar13": "long_pointer2",
                "plVar14": "long_pointer3",
                "uVar15": "ulong_var1",
                "uVar16": "undefined_var2",
                "pcVar17": "char_pointer3",
                "pbVar18": "byte_pointer4",
                "unaff_RBP": "undefined_pointer",
                "lVar19": "long_var2",
                "pbVar20": "byte_pointer5",
                "iVar21": "index2",
                "iVar22": "index3",
                "bVar23": "bool_var3",
                "local_110": "local_var1",
                "local_10c": "local_var2",
                "local_108": "local_var3",
                "local_c8": "local_stat",
                "FUN_00103130": "parse_command_line_arguments_00103130",
                "setlocale": "set_locale",
                "bindtextdomain": "bind_text_domain",
                "textdomain": "text_domain",
                "xmalloc_set_program_name": "set_program_name",
                "bfd_set_error_program_name": "set_error_program_name",
                "ftell": "get_file_position",
                "fseek": "set_file_position",
                "fread": "read_file",
                "ferror": "file_error",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string",
                "xrealloc": "reallocate_memory",
                "fwrite": "write_to_file",
                "printf": "print_formatted",
                "fprintf": "print_to_stream",
                "fclose": "close_file",
                "fopen": "open_file",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "free": "free_memory",
                "getopt_long": "get_long_option",
                "usage": "print_usage",
                "optarg": "option_argument",
                "fatal": "fatal_error",
                "non_fatal": "non_fatal_error",
                "exit": "exit_program",
                "dcgettext": "get_localized_message",
                "putc": "put_char",
                "strtol": "string_to_long",
                "strlen": "get_string_length",
                "stat": "get_file_info",
                "xexit": "exit_program",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "_optarg": "optional_argument",
                "_optind": "optional_index",
                "realloc": "reallocate_memory",
                "malloc": "allocate_memory",
                "xmalloc_set_program_name()": "set_program_name()",
                "malloc()": "allocate_memory()",
                "xmalloc()": "allocate_memory_checked()",
                "optind": "opt_index",
                "fprint": "file_print"
            },
            "calling": [
                "FUN_00103040"
            ],
            "called": [
                "FUN_00102200",
                "FUN_00102170",
                "FUN_00102160",
                "FUN_001020b0",
                "FUN_001022d0",
                "FUN_00102190",
                "FUN_00102250",
                "FUN_0010281b",
                "FUN_00102210",
                "FUN_001020a0",
                "FUN_00102290",
                "FUN_00102980",
                "FUN_00102110",
                "FUN_001021e0",
                "FUN_00102030",
                "FUN_00102e90",
                "FUN_001021d0",
                "FUN_00102270",
                "FUN_001022f0",
                "FUN_00102240",
                "FUN_00102220",
                "FUN_001021a0",
                "FUN_00102db0",
                "FUN_001020e0",
                "FUN_00102f40",
                "FUN_00102300",
                "FUN_001020d0",
                "FUN_00102090",
                "FUN_001021c0",
                "FUN_00102120",
                "FUN_001021f0",
                "FUN_001020f0",
                "FUN_00102130",
                "FUN_00102260",
                "FUN_00102280",
                "FUN_00102080",
                "FUN_00102100"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "num_files",
                    "7": "num_params",
                    "1": "num_args",
                    "5": "count",
                    "12": "argc"
                },
                "param_2": {
                    "2": "param_list",
                    "1": "array_pointer",
                    "3": "file_names",
                    "12": "argv",
                    "4": "param_array"
                },
                "pbVar1": {
                    "4": "byte_ptr",
                    "1": "byte_ptr_var1",
                    "7": "byte_pointer1",
                    "2": "ptr",
                    "3": "byte_pointer",
                    "6": "byte_ptr1"
                },
                "bVar2": {
                    "11": "byte_var2",
                    "2": "byte_var_2",
                    "1": "bool_var1",
                    "4": "byte_var1",
                    "8": "byte_var"
                },
                "bVar3": {
                    "5": "bool_var3",
                    "1": "is_dir",
                    "17": "bool_var1",
                    "2": "bool_var_3"
                },
                "bVar4": {
                    "5": "bool_var4",
                    "1": "in_quotes",
                    "2": "bool_var_4",
                    "17": "bool_var2"
                },
                "pcVar5": {
                    "1": "ptr2",
                    "5": "char_pointer",
                    "3": "char_ptr",
                    "7": "char_pointer1",
                    "2": "char_ptr5"
                },
                "bVar6": {
                    "10": "byte_var2",
                    "2": "byte_var_6",
                    "1": "byte_var",
                    "3": "byte_var1",
                    "6": "byte_var3",
                    "4": "byte_var6"
                },
                "cVar7": {
                    "12": "char_var",
                    "10": "char_var1",
                    "1": "result",
                    "4": "char_var7",
                    "2": "char_var_7"
                },
                "iVar8": {
                    "2": "counter",
                    "1": "loop_index",
                    "3": "index_var",
                    "18": "index"
                },
                "uVar9": {
                    "1": "uint_var1",
                    "4": "return_value",
                    "8": "result",
                    "5": "undefined_var1",
                    "2": "undefined4_var"
                },
                "__stream": {
                    "3": "file_ptr",
                    "22": "file_stream",
                    "1": "file",
                    "5": "file_pointer"
                },
                "__s": {
                    "6": "byte_ptr2",
                    "2": "file_content",
                    "5": "byte_array",
                    "1": "buffer",
                    "8": "byte_pointer2"
                },
                "pcVar10": {
                    "1": "ptr_char_10",
                    "10": "char_pointer2",
                    "2": "char_ptr10",
                    "6": "char_ptr2"
                },
                "sVar11": {
                    "2": "size_t_var",
                    "1": "size_var11",
                    "3": "file_size",
                    "11": "size",
                    "6": "size_var"
                },
                "__ptr": {
                    "2": "byte_pointer2",
                    "1": "byte_pointer_3",
                    "8": "byte_pointer3",
                    "6": "byte_ptr3"
                },
                "__src": {
                    "1": "ptr_long_var1",
                    "6": "long_pointer",
                    "4": "long_ptr",
                    "5": "long_pointer1",
                    "2": "source"
                },
                "lVar12": {
                    "1": "string_pointer",
                    "8": "long_var",
                    "13": "long_var1",
                    "2": "long_var12"
                },
                "plVar13": {
                    "1": "arg_array_pointer",
                    "2": "param_ptr",
                    "6": "long_pointer2"
                },
                "plVar14": {
                    "1": "arg_array_pointer_2",
                    "2": "long_ptr3",
                    "6": "long_pointer3",
                    "3": "long_pointer2"
                },
                "uVar15": {
                    "1": "u_variable15",
                    "10": "ulong_var1",
                    "3": "ulong_var15",
                    "2": "ulong_var_15"
                },
                "uVar16": {
                    "1": "u_variable16",
                    "5": "undefined8_var",
                    "2": "ulong_var2",
                    "3": "undefined8_var1",
                    "4": "undefined_var",
                    "6": "undefined_var2"
                },
                "pcVar17": {
                    "2": "char_ptr17",
                    "1": "locale_name",
                    "5": "char_ptr3",
                    "8": "char_pointer3"
                },
                "pbVar18": {
                    "1": "ptr_byte",
                    "8": "byte_pointer4",
                    "6": "byte_ptr4"
                },
                "unaff_RBP": {
                    "1": "ptr_void_var1",
                    "3": "unaff_rbp",
                    "4": "undefined_pointer1",
                    "2": "undefined_ptr1",
                    "7": "undefined_pointer"
                },
                "lVar19": {
                    "1": "temp_long3",
                    "19": "long_var2",
                    "2": "long_var_19"
                },
                "pbVar20": {
                    "1": "byte_pointer_3",
                    "6": "byte_ptr5",
                    "8": "byte_pointer5"
                },
                "iVar21": {
                    "1": "loop_index",
                    "2": "int_var2",
                    "10": "index2"
                },
                "iVar22": {
                    "1": "int_var_22",
                    "2": "int_var2",
                    "10": "index3"
                },
                "bVar23": {
                    "1": "bool_var_23",
                    "16": "bool_var3",
                    "4": "bool_var5"
                },
                "local_110": {
                    "1": "local_int_110",
                    "11": "local_var1",
                    "4": "local_index",
                    "5": "local_index1"
                },
                "local_10c": {
                    "1": "var_5",
                    "2": "local_var1",
                    "6": "local_index2",
                    "11": "local_var2"
                },
                "local_108": {
                    "1": "file_length",
                    "11": "local_var3",
                    "9": "local_size"
                },
                "local_c8": {
                    "1": "local_stat_struct",
                    "9": "local_stat",
                    "7": "stat_struct",
                    "3": "stat_var",
                    "2": "local_var4"
                },
                "FUN_00103130": {
                    "2": "parse_command_line_arguments",
                    "1": "parse_input_files"
                },
                "setlocale": {
                    "3": "set_locale"
                },
                "bindtextdomain": {
                    "3": "bind_text_domain"
                },
                "textdomain": {
                    "2": "text_domain",
                    "1": "set_text_domain"
                },
                "xmalloc_set_program_name": {
                    "3": "set_program_name"
                },
                "bfd_set_error_program_name": {
                    "2": "set_error_program_name",
                    "1": "set_bfd_error_program_name"
                },
                "ftell": {
                    "1": "file_position",
                    "2": "get_file_position"
                },
                "fseek": {
                    "1": "seek_file",
                    "2": "set_file_position"
                },
                "fread": {
                    "2": "read_file",
                    "1": "read_from_file"
                },
                "ferror": {
                    "2": "file_error"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                },
                "xstrdup": {
                    "3": "duplicate_string"
                },
                "xrealloc": {
                    "2": "reallocate_memory"
                },
                "fwrite": {
                    "1": "write_file"
                },
                "printf": {
                    "1": "print",
                    "2": "print_formatted"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "fclose": {
                    "1": "file_close",
                    "3": "close_file"
                },
                "fopen": {
                    "1": "file_open",
                    "2": "open_file"
                },
                "memcpy": {
                    "3": "copy_memory"
                },
                "memmove": {
                    "1": "memory_move"
                },
                "free": {
                    "1": "free_memory"
                },
                "getopt_long": {
                    "3": "get_long_option"
                },
                "usage": {
                    "4": "print_usage"
                },
                "optarg": {
                    "2": "option_argument",
                    "1": "opt_argument"
                },
                "fatal": {
                    "1": "handle_fatal_error",
                    "2": "fatal_error"
                },
                "non_fatal": {
                    "1": "non_fatal_error"
                },
                "exit": {
                    "2": "exit_program"
                },
                "dcgettext": {
                    "1": "get_cataloged_string"
                },
                "dgettext": {
                    "1": "get_domain_localized_message"
                },
                "putc": {
                    "1": "put_character"
                },
                "strtol": {
                    "3": "string_to_long",
                    "1": "convert_string_to_long"
                },
                "strcmp": {
                    "2": "compare_strings"
                },
                "strlen": {
                    "3": "get_string_length"
                },
                "stat": {
                    "1": "stat_function"
                },
                "xexit": {
                    "3": "exit_program"
                },
                "_stderr": {
                    "2": "standard_error"
                },
                "_stdout": {
                    "2": "standard_output"
                },
                "_optarg": {
                    "1": "optional_argument"
                },
                "_optind": {
                    "1": "optional_index"
                },
                "putchar": {
                    "1": "print_char"
                },
                "memset": {
                    "2": "set_memory"
                },
                "display_file": {
                    "2": "display_file"
                },
                "realloc": {
                    "1": "reallocate_memory"
                },
                "xfree": {
                    "1": "free_memory"
                },
                "malloc": {
                    "1": "allocate_memory"
                },
                "strcat": {
                    "1": "concatenate_strings"
                },
                "xmalloc_set_program_name()": {
                    "1": "set_program_name()"
                },
                "bfd_set_error_program_name()": {
                    "1": "set_error_program_name()"
                },
                "fseek()": {
                    "1": "file_seek()"
                },
                "ftell()": {
                    "1": "file_tell()"
                },
                "fopen()": {
                    "1": "file_open()"
                },
                "fread()": {
                    "1": "file_read()"
                },
                "ferror()": {
                    "1": "file_error()"
                },
                "fwrite()": {
                    "1": "file_write()"
                },
                "fclose()": {
                    "1": "file_close()"
                },
                "xexit()": {
                    "1": "exit_program()"
                },
                "malloc()": {
                    "1": "allocate_memory()"
                },
                "xmalloc()": {
                    "1": "allocate_memory_checked()"
                },
                "xrealloc()": {
                    "1": "reallocate_memory_checked()"
                },
                "xfree()": {
                    "1": "free_memory_checked()"
                },
                "memmove()": {
                    "1": "move_memory()"
                },
                "memset()": {
                    "1": "set_memory()"
                },
                "fprintf()": {
                    "1": "print_to_file()"
                },
                "F_00103a0_name()": {
                    "1": "display_file()"
                },
                "optind": {
                    "1": "opt_index"
                },
                "dgettext()": {
                    "1": "get_translation()"
                },
                "fatal()": {
                    "1": "fatal_error()"
                },
                "non_fatal()": {
                    "1": "non_fatal_error()"
                },
                "usage()": {
                    "1": "show_usage()"
                },
                "putc()": {
                    "1": "put_char()"
                },
                "printf()": {
                    "1": "print()"
                },
                "strtol()": {
                    "1": "parse_long()"
                },
                "rprint_number()": {
                    "1": "print_reverse_number"
                },
                "DIR_00107350": {
                    "1": "dir_00107350"
                },
                "fprint": {
                    "1": "file_print"
                }
            }
        },
        "FUN_00103c50": {
            "entrypoint": "0x00103c50",
            "current_name": "update_data_00103c50",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nundefined8 update_data_00103c50(undefined8 arg1,char **arg2,undefined8 arg3,undefined8 arg4)\n\n{\n  char *string_pointer;\n  undefined8 return_value;\n  size_t string_length;\n  \n  if (*(uint *)((long)arg2 + 0x24) != 0) {\n    if (((arg2 != (char **)0x108370) && ((*(uint *)((long)arg2 + 0x24) & 0x1000) == 0)) &&\n       (arg2 != (char **)0x108258)) {\n      string_pointer = arg2[8];\n      string_length = strlen(*arg2);\n      if (DAT_001072d0 < (int)string_length) {\n        DAT_001072d0 = (int)string_length;\n      }\n      DAT_001072e0 = DAT_001072e0 + (long)string_pointer;\n      if (DAT_001072d8 < arg2[6]) {\n        DAT_001072d8 = arg2[6];\n      }\n    }\n    return arg4;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00103c50": "update_data_00103c50",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "pcVar1": "string_pointer",
                "sVar2": "string_length",
                "in_RAX": "return_value"
            },
            "calling": [
                "FUN_00102a90"
            ],
            "called": [
                "FUN_001026ea",
                "FUN_00102100"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103c50": {
                    "1": "process_parameters",
                    "2": "process_param",
                    "8": "update_data",
                    "4": "process_params",
                    "5": "process_data"
                },
                "param_1": {
                    "1": "input_param",
                    "9": "arg1",
                    "2": "input1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "input_array",
                    "8": "arg2",
                    "4": "param2",
                    "7": "arguments",
                    "3": "args",
                    "2": "input2"
                },
                "param_3": {
                    "1": "data",
                    "2": "data1",
                    "9": "arg3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "var2",
                    "4": "return_value",
                    "2": "input4",
                    "5": "param4",
                    "9": "arg4"
                },
                "pcVar1": {
                    "1": "ptr_to_arg8",
                    "2": "argument8",
                    "3": "pointer",
                    "4": "string_pointer"
                },
                "sVar2": {
                    "1": "len",
                    "2": "str_len",
                    "4": "length",
                    "13": "string_length",
                    "5": "str_length"
                },
                "in_RAX": {
                    "6": "result",
                    "2": "return_val",
                    "11": "return_value"
                },
                "DAT_001072d0": {
                    "5": "max_string_length",
                    "1": "max_len"
                },
                "DAT_001072e0": {
                    "1": "accumulated_pointer"
                },
                "DAT_001072d8": {
                    "1": "max_value",
                    "2": "max_array_element"
                }
            }
        },
        "FUN_00103cc0": {
            "entrypoint": "0x00103cc0",
            "current_name": "process_data_00103cc0",
            "code": "\nvoid process_data_00103cc0(undefined8 unused,undefined8 *data)\n\n{\n  if ((((*(uint *)((long)data + 0x24) != 0) && (data != (undefined8 *)0x108370)) &&\n      ((*(uint *)((long)data + 0x24) & 0x1000) == 0)) && (data != (undefined8 *)0x108258)) {\n    DAT_001072e0 = DAT_001072e0 + data_value;\n    execute_sysv_one_line(*data,data_value,flag);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103cc0": "process_data_00103cc0",
                "param_1": "unused",
                "param_2": "data",
                "sysv_one_line": "execute_sysv_one_line",
                "param_2[8]": "data_value",
                "param_2[6]": "flag"
            },
            "calling": [
                "FUN_00102a90"
            ],
            "called": [
                "FUN_0010274a",
                "FUN_00102fe0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103cc0": {
                    "1": "process_params",
                    "2": "update_data_and_invoke_sysv",
                    "24": "process_data"
                },
                "param_1": {
                    "1": "unknown",
                    "2": "unused_param",
                    "5": "arg1",
                    "7": "unused",
                    "4": "param1",
                    "3": "data"
                },
                "param_2": {
                    "3": "arg2",
                    "4": "param2",
                    "1": "args",
                    "2": "param_array",
                    "6": "data_array",
                    "9": "data"
                },
                "DAT_001072e0": {
                    "1": "data",
                    "6": "total"
                },
                "FUNC_0010274a": {
                    "1": "perform_cleanup",
                    "2": "perform_action"
                },
                "FUN_00102fe0": {
                    "1": "perform_task_b"
                },
                "data_ptr": {
                    "1": "ptr"
                },
                "FUN_0010274a": {
                    "1": "initialize"
                },
                "param_3": {
                    "1": "value2"
                },
                "sysv_one_line": {
                    "1": "do_something",
                    "2": "execute_sysv_one_line"
                },
                "*(uint *)((long)param_2 + 0x24)": {
                    "1": "var1"
                },
                "param_2 != (undefined8 *)0x108370": {
                    "1": "var2"
                },
                "*(uint *)((long)param_2 + 0x24) & 0x1000": {
                    "1": "var3"
                },
                "param_2 != (undefined8 *)0x108258": {
                    "1": "var4"
                },
                "PTR_00103620": {
                    "1": "check_value"
                },
                "PTR_001034d0": {
                    "1": "check_address"
                },
                "PTR_001034d8": {
                    "1": "address_limit"
                },
                "*param_2": {
                    "1": "data_array_ptr"
                },
                "param_2[8]": {
                    "1": "value"
                },
                "param_2[6]": {
                    "1": "flag"
                },
                "(*((uint *)((long)param_2 + 0x24)": {
                    "1": "flag"
                },
                "0x108370": {
                    "1": "skip_ptr"
                },
                "(*((uint *)((long)param_2 + 0x24) & 0x1000)": {
                    "1": "check_flag"
                },
                "0x108258": {
                    "1": "exit_ptr"
                }
            }
        },
        "FUN_00103d20": {
            "entrypoint": "0x00103d20",
            "current_name": "print_error_message_00103d20",
            "code": "\n\n\nvoid print_error_message_00103d20(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = get_error_message(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = get_error_code(error);\n  }\n  flush_standard_output(standard_output);\n  if (error_message != 0) {\n    print_formatted_output(standard_error,\"%s: %s: %s\\n\",DAT_00107350,error_message,error_message,additional_info);\n    return;\n  }\n  print_formatted_output(standard_error,\"%s: %s\\n\",DAT_00107350,error_message,additional_info);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103d20": "print_error_message_00103d20",
                "param_1": "error_message",
                "iVar1": "error",
                "uVar2": "error_message",
                "in_R10": "additional_info",
                "dcgettext": "get_error_message",
                "bfd_errmsg": "get_error_code",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "fflush": "flush_standard_output",
                "fprintf": "print_formatted_output"
            },
            "calling": [
                "FUN_001023b6",
                "FUN_00102a90",
                "FUN_001024d2"
            ],
            "called": [
                "FUN_00102160",
                "FUN_001022d0",
                "FUN_0010274b"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103d20": {
                    "8": "print_error",
                    "23": "print_error_message"
                },
                "param_1": {
                    "2": "error_string",
                    "11": "error_message",
                    "1": "error_cause",
                    "4": "error_description",
                    "8": "error_type",
                    "3": "filename"
                },
                "iVar1": {
                    "1": "error_type",
                    "2": "bfd_error",
                    "10": "error_code",
                    "15": "error"
                },
                "uVar2": {
                    "3": "error_message_text",
                    "1": "error_message_string",
                    "19": "error_message",
                    "2": "error_msg"
                },
                "in_R10": {
                    "1": "unknown",
                    "12": "additional_info",
                    "2": "unknown_cause"
                },
                "FUN_0010274b": {
                    "1": "initialize"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "bfd_errmsg": {
                    "1": "get_error_code"
                },
                "_stdout": {
                    "5": "standard_output",
                    "1": "stdout"
                },
                "_stderr": {
                    "5": "standard_error",
                    "1": "stderr"
                },
                "DAT_00107350": {
                    "3": "program_name"
                },
                "fflush": {
                    "1": "flush_standard_output"
                },
                "fprintf": {
                    "1": "print_formatted_output"
                }
            }
        },
        "FUN_00103d80": {
            "entrypoint": "0x00103d80",
            "current_name": "FUNC_00103d80",
            "code": "\nvoid FUNC_00103d80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103d80": "FUNC_00103d80"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 115229,
    "layers": [
        [
            "FUN_00102000",
            "FUN_00102020",
            "FUN_00102360",
            "FUN_001023b6",
            "FUN_001024d2",
            "FUN_0010259c",
            "FUN_001026ea",
            "FUN_001026f6",
            "FUN_00102710",
            "FUN_0010274b",
            "FUN_0010278c",
            "FUN_0010281b",
            "FUN_00102a40",
            "FUN_00102a90",
            "FUN_00102d70",
            "FUN_00102db0",
            "FUN_00102e50",
            "FUN_00102e90",
            "FUN_00102ee0",
            "FUN_00102f40",
            "FUN_00102fe0",
            "FUN_00103040",
            "FUN_001030e0",
            "FUN_00103130",
            "FUN_00103c50",
            "FUN_00103cc0",
            "FUN_00103d20"
        ],
        [
            "FUN_00102980"
        ]
    ],
    "locked_functions": []
}