{
  "functions": {
    "_init": {
      "entrypoint": "0x00102000",
      "current_name": "_init",
      "code": "\nint _init(EVP_PKEY_CTX *ctx)\n\n{\n  int iVar1;\n  \n  iVar1 \u003d __gmon_start__();\n  return iVar1;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "__gmon_start__"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "FUN_00102020": {
      "entrypoint": "0x00102020",
      "current_name": "FUN_00102020",
      "code": "\nvoid FUN_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [],
      "improved": false,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "free": {
      "entrypoint": "0x00108000",
      "current_name": "free",
      "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "free"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "putchar": {
      "entrypoint": "0x00108008",
      "current_name": "putchar",
      "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "putchar"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__errno_location": {
      "entrypoint": "0x00108018",
      "current_name": "__errno_location",
      "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "__errno_location"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_core_file_failing_command": {
      "entrypoint": "0x00102060",
      "current_name": "bfd_core_file_failing_command",
      "code": "\nvoid bfd_core_file_failing_command(void)\n\n{\n  bfd_core_file_failing_command();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "display_bfd.cold"
      ],
      "called": [
        "bfd_core_file_failing_command"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "puts": {
      "entrypoint": "0x00108038",
      "current_name": "puts",
      "code": "\n\n\n\nint puts(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* puts@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "puts"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ferror": {
      "entrypoint": "0x00108040",
      "current_name": "ferror",
      "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "ferror"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_set_default_target": {
      "entrypoint": "0x00102090",
      "current_name": "bfd_set_default_target",
      "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_set_default_target"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fread": {
      "entrypoint": "0x00108050",
      "current_name": "fread",
      "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fread"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "textdomain": {
      "entrypoint": "0x00108058",
      "current_name": "textdomain",
      "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "textdomain"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_openr": {
      "entrypoint": "0x001020c0",
      "current_name": "bfd_openr",
      "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "display_file"
      ],
      "called": [
        "bfd_openr"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fclose": {
      "entrypoint": "0x00108068",
      "current_name": "fclose",
      "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fclose"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bindtextdomain": {
      "entrypoint": "0x00108078",
      "current_name": "bindtextdomain",
      "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "bindtextdomain"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "dcgettext": {
      "entrypoint": "0x00108080",
      "current_name": "dcgettext",
      "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "dcgettext"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strlen": {
      "entrypoint": "0x00108088",
      "current_name": "strlen",
      "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strlen"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "getopt_long": {
      "entrypoint": "0x00108090",
      "current_name": "getopt_long",
      "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "getopt_long"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "printf": {
      "entrypoint": "0x00108098",
      "current_name": "printf",
      "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "printf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xrealloc": {
      "entrypoint": "0x00102130",
      "current_name": "xrealloc",
      "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xrealloc"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fputs": {
      "entrypoint": "0x001080a8",
      "current_name": "fputs",
      "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fputs"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_target_list": {
      "entrypoint": "0x00102150",
      "current_name": "bfd_target_list",
      "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "usage"
      ],
      "called": [
        "bfd_target_list"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_get_error": {
      "entrypoint": "0x00102160",
      "current_name": "bfd_get_error",
      "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "FUN_001023b6",
        "bfd_nonfatal",
        "display_bfd.cold"
      ],
      "called": [
        "bfd_get_error"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xmalloc": {
      "entrypoint": "0x00102170",
      "current_name": "xmalloc",
      "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "print_sizes"
      ],
      "called": [
        "xmalloc"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_set_error": {
      "entrypoint": "0x00102180",
      "current_name": "bfd_set_error",
      "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "FUN_001023b6"
      ],
      "called": [
        "bfd_set_error"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xmalloc_set_program_name": {
      "entrypoint": "0x00102190",
      "current_name": "xmalloc_set_program_name",
      "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xmalloc_set_program_name"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xstrdup": {
      "entrypoint": "0x001021a0",
      "current_name": "xstrdup",
      "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xstrdup"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fputc": {
      "entrypoint": "0x001080e8",
      "current_name": "fputc",
      "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fputc"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_init": {
      "entrypoint": "0x001021c0",
      "current_name": "bfd_init",
      "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_init"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "putc": {
      "entrypoint": "0x001080f8",
      "current_name": "putc",
      "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "putc"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fprintf": {
      "entrypoint": "0x00108108",
      "current_name": "fprintf",
      "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fprintf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "ftell": {
      "entrypoint": "0x00108110",
      "current_name": "ftell",
      "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "ftell"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "stat": {
      "entrypoint": "0x00108120",
      "current_name": "stat",
      "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "stat"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strtol": {
      "entrypoint": "0x00108128",
      "current_name": "strtol",
      "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strtol"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "memcpy": {
      "entrypoint": "0x00108130",
      "current_name": "memcpy",
      "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "memcpy"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fflush": {
      "entrypoint": "0x00108138",
      "current_name": "fflush",
      "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fflush"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fseek": {
      "entrypoint": "0x00108148",
      "current_name": "fseek",
      "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fseek"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "setlocale": {
      "entrypoint": "0x00108150",
      "current_name": "setlocale",
      "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "setlocale"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_set_error_program_name": {
      "entrypoint": "0x00102260",
      "current_name": "bfd_set_error_program_name",
      "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "bfd_set_error_program_name"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "memmove": {
      "entrypoint": "0x00108160",
      "current_name": "memmove",
      "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "memmove"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fopen": {
      "entrypoint": "0x00108168",
      "current_name": "fopen",
      "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fopen"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "xexit": {
      "entrypoint": "0x00102290",
      "current_name": "xexit",
      "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "fatal",
        "print_sizes"
      ],
      "called": [
        "xexit"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_close": {
      "entrypoint": "0x001022a0",
      "current_name": "bfd_close",
      "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "FUN_001023b6"
      ],
      "called": [
        "bfd_close"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "vfprintf": {
      "entrypoint": "0x00108180",
      "current_name": "vfprintf",
      "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "vfprintf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_check_format_matches": {
      "entrypoint": "0x001022c0",
      "current_name": "bfd_check_format_matches",
      "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "display_bfd",
        "display_bfd.cold"
      ],
      "called": [
        "bfd_check_format_matches"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_errmsg": {
      "entrypoint": "0x001022d0",
      "current_name": "bfd_errmsg",
      "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "bfd_nonfatal"
      ],
      "called": [
        "bfd_errmsg"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "sprintf": {
      "entrypoint": "0x00108198",
      "current_name": "sprintf",
      "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "sprintf"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "exit": {
      "entrypoint": "0x001081a0",
      "current_name": "exit",
      "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "exit"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fwrite": {
      "entrypoint": "0x001081a8",
      "current_name": "fwrite",
      "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "fwrite"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_check_format": {
      "entrypoint": "0x00102310",
      "current_name": "bfd_check_format",
      "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "display_file",
        "display_bfd"
      ],
      "called": [
        "bfd_check_format"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_openr_next_archived_file": {
      "entrypoint": "0x00102320",
      "current_name": "bfd_openr_next_archived_file",
      "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "FUN_001023b6"
      ],
      "called": [
        "bfd_openr_next_archived_file"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_map_over_sections": {
      "entrypoint": "0x00102330",
      "current_name": "bfd_map_over_sections",
      "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "print_sizes"
      ],
      "called": [
        "bfd_map_over_sections"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "strerror": {
      "entrypoint": "0x001081d0",
      "current_name": "strerror",
      "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "strerror"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__cxa_finalize": {
      "entrypoint": "0x001081e0",
      "current_name": "__cxa_finalize",
      "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "__cxa_finalize"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "display_file.cold": {
      "entrypoint": "0x00102360",
      "current_name": "display_file.cold",
      "code": "\nvoid display_file_cold(void)\n\n{\n  int *piVar1;\n  undefined8 uVar2;\n  \n  piVar1 \u003d __errno_location();\n  if (*piVar1 \u003d\u003d 2) {\n    uVar2 \u003d dcgettext(0,\"\\\u0027%s\\\u0027: No such file\",5);\n    non_fatal(uVar2);\n  }\n  else {\n    strerror(*piVar1);\n    uVar2 \u003d dcgettext(0,\"Warning: could not locate \\\u0027%s\\\u0027.  reason: %s\",5);\n    non_fatal(uVar2);\n  }\n  return_code \u003d 1;\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "display_file"
      ],
      "called": [
        "strerror",
        "dcgettext",
        "non_fatal",
        "__errno_location"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "FUN_001023b6": {
      "entrypoint": "0x001023b6",
      "current_name": "FUN_001023b6",
      "code": "\nvoid FUN_001023b6(void)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  undefined8 *unaff_RBX;\n  long lVar4;\n  \n  lVar3 \u003d 0;\n  do {\n    lVar4 \u003d lVar3;\n    bfd_set_error(0);\n    lVar3 \u003d bfd_openr_next_archived_file();\n    if (lVar3 \u003d\u003d 0) {\n      iVar2 \u003d bfd_get_error();\n      if (iVar2 !\u003d 9) {\n        bfd_nonfatal(*unaff_RBX);\n        return_code \u003d 2;\n      }\n      if (lVar4 !\u003d 0) {\n        bfd_close(lVar4);\n      }\n      break;\n    }\n    display_bfd();\n  } while ((lVar4 \u003d\u003d 0) || (bfd_close(), lVar4 !\u003d lVar3));\n  cVar1 \u003d bfd_close();\n  if (cVar1 \u003d\u003d \u0027\\0\u0027) {\n    bfd_nonfatal();\n    return_code \u003d 1;\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "display_file"
      ],
      "called": [
        "bfd_set_error",
        "bfd_get_error",
        "display_bfd",
        "bfd_nonfatal",
        "bfd_close",
        "bfd_openr_next_archived_file"
      ],
      "improved": false,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "display_bfd.cold": {
      "entrypoint": "0x001024d2",
      "current_name": "display_bfd.cold",
      "code": "\n\n\nvoid display_bfd_cold(void)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  undefined8 *unaff_RBX;\n  undefined8 param_7;\n  \n  iVar2 \u003d bfd_get_error();\n  if (iVar2 \u003d\u003d 0xd) {\n    bfd_nonfatal(*unaff_RBX);\n    list_matching_formats(param_7);\n    return_code \u003d 3;\n  }\n  else {\n    cVar1 \u003d bfd_check_format_matches();\n    if (cVar1 \u003d\u003d \u0027\\0\u0027) {\n      bfd_nonfatal(*unaff_RBX);\n      iVar2 \u003d bfd_get_error();\n      if (iVar2 \u003d\u003d 0xd) {\n        list_matching_formats(param_7);\n      }\n      return_code \u003d 3;\n    }\n    else {\n      print_sizes();\n      fwrite(\" (core file\",1,0xb,_stdout);\n      lVar3 \u003d bfd_core_file_failing_command();\n      if (lVar3 !\u003d 0) {\n        printf(\" invoked as %s\",lVar3);\n      }\n      puts(\")\\n\");\n    }\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "display_bfd"
      ],
      "called": [
        "bfd_check_format_matches",
        "list_matching_formats",
        "fwrite",
        "bfd_get_error",
        "bfd_core_file_failing_command",
        "printf",
        "bfd_nonfatal",
        "puts",
        "print_sizes"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "print_sizes.cold": {
      "entrypoint": "0x0010259c",
      "current_name": "print_sizes.cold",
      "code": "\nvoid print_sizes_cold(void)\n\n{\n  undefined8 *in_RAX;\n  \n  printf(\" (ex %s)\",*in_RAX);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "print_sizes"
      ],
      "called": [
        "printf"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "sysv_internal_sizer.cold": {
      "entrypoint": "0x001026ea",
      "current_name": "sysv_internal_sizer.cold",
      "code": "\nundefined8 sysv_internal_sizer_cold(void)\n\n{\n  undefined8 in_RAX;\n  undefined8 unaff_retaddr;\n  \n  svi_maxvma \u003d in_RAX;\n  return unaff_retaddr;\n}\n\n",
      "renaming": {},
      "calling": [
        "sysv_internal_sizer"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "size_number.cold": {
      "entrypoint": "0x001026f6",
      "current_name": "size_number.cold",
      "code": "\nvoid size_number_cold(void)\n\n{\n  int in_EAX;\n  char *__format;\n  \n  __format \u003d \"0x%lx\";\n  if (in_EAX \u003d\u003d 1) {\n    __format \u003d \"0%lo\";\n  }\n  sprintf(\u0026stack0x00000000,__format);\n  strlen(\u0026stack0x00000000);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "size_number"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "rprint_number.cold": {
      "entrypoint": "0x00102710",
      "current_name": "rprint_number.cold",
      "code": "\nvoid rprint_number_cold(void)\n\n{\n  int in_EAX;\n  uint unaff_EBX;\n  char *__format;\n  \n  __format \u003d \"0x%lx\";\n  if (in_EAX \u003d\u003d 1) {\n    __format \u003d \"0%lo\";\n  }\n  sprintf(\u0026stack0x00000000,__format);\n  printf(\"%*s\",(ulong)unaff_EBX);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "rprint_number"
      ],
      "called": [
        "printf",
        "sprintf"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "sysv_internal_printer.cold": {
      "entrypoint": "0x0010274a",
      "current_name": "sysv_internal_printer.cold",
      "code": "\nvoid sysv_internal_printer_cold(void)\n\n{\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "sysv_internal_printer"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_nonfatal.cold": {
      "entrypoint": "0x0010274b",
      "current_name": "bfd_nonfatal.cold",
      "code": "\n\n\nvoid bfd_nonfatal_cold(void)\n\n{\n  undefined8 uVar1;\n  long unaff_RBX;\n  undefined8 unaff_retaddr;\n  \n  uVar1 \u003d dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (unaff_RBX !\u003d 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,uVar1,unaff_retaddr);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "bfd_nonfatal"
      ],
      "called": [
        "fprintf",
        "dcgettext",
        "fflush"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "list_matching_formats": {
      "entrypoint": "0x0010278c",
      "current_name": "list_matching_formats",
      "code": "\n\n\nvoid list_matching_formats(long *param_1)\n\n{\n  undefined8 uVar1;\n  char *__format;\n  long *plVar2;\n  \n  fflush(_stdout);\n  uVar1 \u003d program_name;\n  __format \u003d (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,__format,uVar1);\n  for (plVar2 \u003d param_1; *plVar2 !\u003d 0; plVar2 \u003d plVar2 + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(param_1);\n  fputc(10,_stderr);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "display_bfd.cold"
      ],
      "called": [
        "fprintf",
        "dcgettext",
        "fflush",
        "free",
        "fputc"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "usage": {
      "entrypoint": "0x0010281b",
      "current_name": "usage",
      "code": "\nvoid usage(FILE *param_1,int param_2)\n\n{\n  long lVar1;\n  char *pcVar2;\n  long *__ptr;\n  long *plVar3;\n  \n  lVar1 \u003d program_name;\n  pcVar2 \u003d (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(param_1,pcVar2,lVar1);\n  pcVar2 \u003d (char *)dcgettext(0,\" Displays the sizes of sections inside binary files\\n\",5);\n  fprintf(param_1,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\" If no input file(s) are specified, a.out is assumed\\n\",5);\n  fprintf(param_1,pcVar2);\n  pcVar2 \u003d (char *)dcgettext(0,\n                             \" The options are:\\n  -A|-B|-G  --format\u003d{sysv|berkeley|gnu}  Select output style (default is %s)\\n  -o|-d|-x  --radix\u003d{8|10|16}         Display numbers in octal, decimal or hex\\n  -t        --totals                  Display the total sizes (Berkeley only)\\n  -f                                  Ignored.\\n            --common                  Display total size for *COM* syms\\n            --target\u003d\u003cbfdname\u003e        Set the binary file format\\n            @\u003cfile\u003e                   Read options from \u003cfile\u003e\\n  -h|-H|-?  --help                    Display this information\\n  -v|-V     --version                 Display the program\\\u0027s version\\n\\n\"\n                             ,5);\n  fprintf(param_1,pcVar2,\"berkeley\");\n  lVar1 \u003d program_name;\n  if (program_name \u003d\u003d 0) {\n    pcVar2 \u003d (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(param_1,pcVar2);\n  }\n  else {\n    pcVar2 \u003d (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(param_1,pcVar2,lVar1);\n  }\n  __ptr \u003d (long *)bfd_target_list();\n  plVar3 \u003d __ptr;\n  while( true ) {\n    lVar1 \u003d *plVar3;\n    plVar3 \u003d plVar3 + 1;\n    if (lVar1 \u003d\u003d 0) break;\n    fprintf(param_1,\" %s\");\n  }\n  fputc(10,param_1);\n  free(__ptr);\n  if (param_2 \u003d\u003d 0) {\n    pcVar2 \u003d (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(param_1,pcVar2,\"\u003chttps://sourceware.org/bugzilla/\u003e\");\n  }\n                    \n  exit(param_2);\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "fprintf",
        "exit",
        "bfd_target_list",
        "dcgettext",
        "free",
        "fputc"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "display_file": {
      "entrypoint": "0x00102980",
      "current_name": "display_file",
      "code": "\nvoid display_file(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  int *piVar3;\n  undefined8 uVar4;\n  char *pcVar5;\n  long lVar6;\n  stat sStack_b8;\n  \n  if (param_1 !\u003d (char *)0x0) {\n    iVar2 \u003d stat(param_1,\u0026sStack_b8);\n    if (iVar2 \u003c 0) {\n      piVar3 \u003d __errno_location();\n      if (*piVar3 \u003d\u003d 2) {\n        uVar4 \u003d dcgettext(0,\"\\\u0027%s\\\u0027: No such file\",5);\n        non_fatal(uVar4,param_1);\n      }\n      else {\n        pcVar5 \u003d strerror(*piVar3);\n        uVar4 \u003d dcgettext(0,\"Warning: could not locate \\\u0027%s\\\u0027.  reason: %s\",5);\n        non_fatal(uVar4,param_1,pcVar5);\n      }\n    }\n    else if ((sStack_b8.st_mode \u0026 0xf000) \u003d\u003d 0x4000) {\n      uVar4 \u003d dcgettext(0,\"Warning: \\\u0027%s\\\u0027 is a directory\",5);\n      non_fatal(uVar4,param_1);\n    }\n    else if ((sStack_b8.st_mode \u0026 0xf000) \u003d\u003d 0x8000) {\n      if (sStack_b8.st_size \u003c 0) {\n        uVar4 \u003d dcgettext(0,\"Warning: \\\u0027%s\\\u0027 has negative size, probably it is too large\",5);\n        non_fatal(uVar4,param_1);\n      }\n      else if (sStack_b8.st_size !\u003d 0) {\n        lVar6 \u003d bfd_openr(param_1,target);\n        if (lVar6 !\u003d 0) {\n          cVar1 \u003d bfd_check_format(lVar6,2);\n          if (cVar1 !\u003d \u0027\\0\u0027) {\n            FUN_001023b6();\n            return;\n          }\n          display_bfd(lVar6);\n          cVar1 \u003d bfd_close(lVar6);\n          if (cVar1 !\u003d \u0027\\0\u0027) {\n            return;\n          }\n        }\n        bfd_nonfatal(param_1);\n        return_code \u003d 1;\n        return;\n      }\n    }\n    else {\n      uVar4 \u003d dcgettext(0,\"Warning: \\\u0027%s\\\u0027 is not an ordinary file\",5);\n      non_fatal(uVar4,param_1);\n    }\n  }\n  return_code \u003d 1;\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "FUN_001023b6",
        "display_file.cold",
        "bfd_check_format",
        "dcgettext",
        "display_bfd",
        "stat",
        "non_fatal",
        "bfd_openr"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "display_bfd": {
      "entrypoint": "0x00102a40",
      "current_name": "display_bfd",
      "code": "\n\n\nvoid display_bfd(undefined8 *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  undefined8 local_20 [2];\n  \n  cVar1 \u003d bfd_check_format(param_1,2);\n  if (cVar1 \u003d\u003d \u0027\\0\u0027) {\n    cVar1 \u003d bfd_check_format_matches(param_1,1,local_20);\n    if (cVar1 \u003d\u003d \u0027\\0\u0027) {\n      iVar2 \u003d bfd_get_error();\n      if (iVar2 \u003d\u003d 0xd) {\n        bfd_nonfatal(*param_1);\n        list_matching_formats(local_20[0]);\n        return_code \u003d 3;\n      }\n      else {\n        cVar1 \u003d bfd_check_format_matches(param_1,3,local_20);\n        if (cVar1 \u003d\u003d \u0027\\0\u0027) {\n          bfd_nonfatal(*param_1);\n          iVar2 \u003d bfd_get_error();\n          if (iVar2 \u003d\u003d 0xd) {\n            list_matching_formats(local_20[0]);\n          }\n          return_code \u003d 3;\n        }\n        else {\n          print_sizes(param_1);\n          fwrite(\" (core file\",1,0xb,_stdout);\n          lVar3 \u003d bfd_core_file_failing_command(param_1);\n          if (lVar3 !\u003d 0) {\n            printf(\" invoked as %s\",lVar3);\n          }\n          puts(\")\\n\");\n        }\n      }\n    }\n    else {\n      print_sizes(param_1);\n      putchar(10);\n    }\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "FUN_001023b6",
        "display_file"
      ],
      "called": [
        "bfd_check_format_matches",
        "bfd_check_format",
        "putchar",
        "display_bfd.cold",
        "print_sizes"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "print_sizes": {
      "entrypoint": "0x00102a90",
      "current_name": "print_sizes",
      "code": "\n\n\nvoid print_sizes(char **param_1)\n\n{\n  long lVar1;\n  undefined8 extraout_RDX;\n  long lVar2;\n  long extraout_RDX_00;\n  undefined8 extraout_RDX_01;\n  undefined8 uVar3;\n  void *__ptr;\n  int iVar4;\n  char cVar5;\n  void *pvVar6;\n  char *pcVar7;\n  int iVar8;\n  long lVar9;\n  bool bVar10;\n  bool bVar11;\n  undefined *puVar12;\n  \n  if ((show_common \u003d\u003d 0) || (common_size \u003d 0, (*(uint *)((long)param_1 + 0x44) \u0026 0x52) !\u003d 0x10))\n  goto LAB_00102aa8;\n  lVar9 \u003d (**(code **)(param_1[1] + 0x1f8))();\n  if (lVar9 \u003c 0) {\n    bfd_nonfatal(*param_1);\n    xexit(1);\nLAB_001026b4:\n    __ptr \u003d (void *)xmalloc();\n  }\n  else {\n    __ptr \u003d (void *)0x0;\n    if (lVar9 !\u003d 0) goto LAB_001026b4;\n  }\n  pvVar6 \u003d __ptr;\n  lVar9 \u003d (**(code **)(param_1[1] + 0x200))(param_1);\n  cVar5 \u003d (char)pvVar6;\n  if (lVar9 \u003c 0) {\n    bfd_nonfatal(*param_1);\n    xexit(1);\n    lVar2 \u003d extraout_RDX_00;\n  }\n  else {\n    cVar5 \u003d \u0027\\0\u0027;\n    lVar2 \u003d common_size;\n    while (bVar10 \u003d lVar9 !\u003d 0, lVar9 \u003d lVar9 + -1, bVar10) {\n      lVar1 \u003d *(long *)((long)__ptr + lVar9 * 8);\n      if (((*(byte *)(*(long *)(lVar1 + 0x20) + 0x25) \u0026 0x10) !\u003d 0) \u0026\u0026\n         ((*(byte *)(lVar1 + 0x19) \u0026 1) \u003d\u003d 0)) {\n        lVar2 \u003d lVar2 + *(long *)(lVar1 + 0x10);\n        cVar5 \u003d \u0027\\x01\u0027;\n      }\n    }\n  }\n  if (cVar5 !\u003d \u0027\\0\u0027) {\n    common_size \u003d lVar2;\n  }\n  free(__ptr);\nLAB_00102aa8:\n  if (selected_output_format \u003d\u003d 1) {\n    svi_total \u003d 0;\n    svi_maxvma \u003d 0;\n    svi_namelen \u003d 0;\n    bfd_map_over_sections(param_1,sysv_internal_sizer,0);\n    if (show_common !\u003d 0) {\n      if ((int)svi_namelen \u003c 5) {\n        svi_namelen \u003d 5;\n      }\n      svi_total \u003d svi_total + common_size;\n    }\n    svi_vmalen \u003d size_number(svi_maxvma);\n    if (svi_vmalen \u003c 4) {\n      svi_vmalen \u003d 4;\n    }\n    svi_sizelen \u003d size_number();\n    if (svi_sizelen \u003c 4) {\n      svi_sizelen \u003d 4;\n    }\n    svi_total \u003d 0;\n    printf(\"%s  \",*param_1);\n    uVar3 \u003d extraout_RDX_01;\n    if ((undefined8 *)param_1[0x1d] !\u003d (undefined8 *)0x0) {\n      printf(\" (ex %s)\",*(undefined8 *)param_1[0x1d]);\n      uVar3 \u003d extraout_RDX;\n    }\n    puVar12 \u003d \u0026DAT_001040fc;\n    printf(\":\\n%-*s   %*s   %*s\\n\",(ulong)svi_namelen,\"section\",(ulong)svi_sizelen,\u0026DAT_00104067,\n           (ulong)svi_vmalen,\u0026DAT_001040fc,uVar3);\n    bfd_map_over_sections(param_1,sysv_internal_printer,0);\n    if (show_common !\u003d 0) {\n      svi_total \u003d svi_total + common_size;\n      sysv_one_line(\"*COM*\",common_size,0,puVar12);\n    }\n    printf(\"%-*s   \",(ulong)svi_namelen,\"Total\");\n    rprint_number(svi_sizelen,svi_total);\n    puts(\"\\n\");\n    return;\n  }\n  iVar8 \u003d (-(uint)(selected_output_format \u003d\u003d 0) \u0026 0xfffffffd) + 10;\n  bVar10 \u003d selected_output_format \u003d\u003d 0;\n  bsssize \u003d 0;\n  datasize \u003d 0;\n  textsize \u003d 0;\n  bfd_map_over_sections(param_1,berkeley_or_gnu_sum,0);\n  bsssize \u003d bsssize + common_size;\n  iVar4 \u003d files_seen_0 + 1;\n  bVar11 \u003d files_seen_0 \u003d\u003d 0;\n  files_seen_0 \u003d iVar4;\n  if (bVar11) {\n    if (selected_output_format \u003d\u003d 0) {\n      pcVar7 \u003d \"   text\\t   data\\t    bss\\t    dec\\t    hex\\tfilename\";\n      if (radix \u003d\u003d 1) {\n        pcVar7 \u003d \"   text\\t   data\\t    bss\\t    oct\\t    hex\\tfilename\";\n      }\n      puts(pcVar7);\n    }\n    else {\n      puts(\"      text       data        bss      total filename\");\n    }\n  }\n  lVar9 \u003d textsize + datasize + bsssize;\n  if (show_totals !\u003d 0) {\n    total_textsize \u003d total_textsize + textsize;\n    total_datasize \u003d total_datasize + datasize;\n    total_bsssize \u003d total_bsssize + bsssize;\n  }\n  iVar4 \u003d (int)(char)((-bVar10 \u0026 0xe9U) + 0x20);\n  rprint_number(iVar8);\n  putc(iVar4,_stdout);\n  rprint_number(iVar8,datasize);\n  putc(iVar4,_stdout);\n  rprint_number(iVar8,bsssize);\n  putc(iVar4,_stdout);\n  if (selected_output_format \u003d\u003d 0) {\n    pcVar7 \u003d \"%7lu\\t%7lx\";\n    if (radix \u003d\u003d 1) {\n      pcVar7 \u003d \"%7lo\\t%7lx\";\n    }\n    printf(pcVar7,lVar9,lVar9);\n  }\n  else {\n    rprint_number(iVar8,lVar9);\n  }\n  putc(iVar4,_stdout);\n  fputs(*param_1,_stdout);\n  if ((undefined8 *)param_1[0x1d] \u003d\u003d (undefined8 *)0x0) {\n    return;\n  }\n  printf(\" (ex %s)\",*(undefined8 *)param_1[0x1d]);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "display_bfd",
        "display_bfd.cold"
      ],
      "called": [
        "putc",
        "xexit",
        "xmalloc",
        "sysv_internal_printer",
        "bfd_map_over_sections",
        "fputs",
        "berkeley_or_gnu_sum",
        "print_sizes.cold",
        "sysv_internal_sizer",
        "sysv_one_line",
        "size_number",
        "printf",
        "bfd_nonfatal",
        "free",
        "puts",
        "rprint_number"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "berkeley_or_gnu_sum": {
      "entrypoint": "0x00102d70",
      "current_name": "berkeley_or_gnu_sum",
      "code": "\nvoid berkeley_or_gnu_sum(undefined8 param_1,long param_2)\n\n{\n  uint uVar1;\n  long lVar2;\n  \n  uVar1 \u003d *(uint *)(param_2 + 0x24);\n  if ((uVar1 \u0026 1) !\u003d 0) {\n    lVar2 \u003d *(long *)(param_2 + 0x40);\n    if (((uVar1 \u0026 0x10) !\u003d 0) || ((selected_output_format \u003d\u003d 0 \u0026\u0026 ((uVar1 \u0026 8) !\u003d 0)))) {\n      textsize \u003d textsize + lVar2;\n      return;\n    }\n    if ((uVar1 \u0026 0x100) !\u003d 0) {\n      datasize \u003d datasize + lVar2;\n      return;\n    }\n    bsssize \u003d bsssize + lVar2;\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "print_sizes"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "fatal": {
      "entrypoint": "0x00102db0",
      "current_name": "fatal",
      "code": "\nvoid fatal(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n          undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n          undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined8 uVar1;\n  char acStack_110 [48];\n  undefined4 local_d8;\n  undefined4 local_d4;\n  undefined *local_d0;\n  undefined *local_c8;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (in_AL !\u003d \u0027\\0\u0027) {\n    local_88 \u003d param_1;\n    local_78 \u003d param_2;\n    local_68 \u003d param_3;\n    local_58 \u003d param_4;\n    local_48 \u003d param_5;\n    local_38 \u003d param_6;\n    local_28 \u003d param_7;\n    local_18 \u003d param_8;\n  }\n  local_d0 \u003d \u0026stack0x00000008;\n  local_d8 \u003d 8;\n  local_c8 \u003d local_b8;\n  local_d4 \u003d 0x30;\n  local_b0 \u003d param_10;\n  local_a8 \u003d param_11;\n  local_a0 \u003d param_12;\n  local_98 \u003d param_13;\n  local_90 \u003d param_14;\n  report(param_9,\u0026local_d8);\n  uVar1 \u003d 1;\n  xexit(1);\n  if (radix \u003d\u003d 0) {\n    __format \u003d \"%lu\";\n  }\n  else {\n    __format \u003d \"0x%lx\";\n    if (radix \u003d\u003d 1) {\n      __format \u003d \"0%lo\";\n    }\n  }\n  sprintf(acStack_110,__format,uVar1);\n  strlen(acStack_110);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main"
      ],
      "called": [
        "xexit",
        "report"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "size_number": {
      "entrypoint": "0x00102e50",
      "current_name": "size_number",
      "code": "\nvoid size_number(undefined8 param_1)\n\n{\n  char *__format;\n  char acStack_38 [48];\n  \n  if (radix \u003d\u003d 0) {\n    __format \u003d \"%lu\";\n  }\n  else {\n    __format \u003d \"0x%lx\";\n    if (radix \u003d\u003d 1) {\n      __format \u003d \"0%lo\";\n    }\n  }\n  sprintf(acStack_38,__format,param_1);\n  strlen(acStack_38);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "print_sizes"
      ],
      "called": [
        "size_number.cold",
        "strlen",
        "sprintf"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "rprint_number": {
      "entrypoint": "0x00102e90",
      "current_name": "rprint_number",
      "code": "\nvoid rprint_number(ulong param_1,undefined8 param_2)\n\n{\n  char *__format;\n  char acStack_48 [56];\n  \n  if (radix \u003d\u003d 0) {\n    sprintf(acStack_48,\"%lu\",param_2);\n    printf(\"%*s\",param_1 \u0026 0xffffffff,acStack_48);\n  }\n  else {\n    __format \u003d \"0x%lx\";\n    if (radix \u003d\u003d 1) {\n      __format \u003d \"0%lo\";\n    }\n    sprintf(acStack_48,__format,param_2);\n    printf(\"%*s\",param_1 \u0026 0xffffffff,acStack_48);\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "sysv_one_line",
        "print_sizes"
      ],
      "called": [
        "rprint_number.cold",
        "printf",
        "sprintf"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "report": {
      "entrypoint": "0x00102ee0",
      "current_name": "report",
      "code": "\n\n\nvoid report(char *param_1,__gnuc_va_list param_2)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",program_name);\n  vfprintf(_stderr,param_1,param_2);\n  putc(10,_stderr);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "fatal",
        "non_fatal"
      ],
      "called": [
        "putc",
        "fprintf",
        "vfprintf",
        "fflush"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "non_fatal": {
      "entrypoint": "0x00102f40",
      "current_name": "non_fatal",
      "code": "\nvoid non_fatal(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n              undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n              undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n              undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  undefined4 local_d8;\n  undefined4 local_d4;\n  undefined *local_d0;\n  undefined *local_c8;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (in_AL !\u003d \u0027\\0\u0027) {\n    local_88 \u003d param_1;\n    local_78 \u003d param_2;\n    local_68 \u003d param_3;\n    local_58 \u003d param_4;\n    local_48 \u003d param_5;\n    local_38 \u003d param_6;\n    local_28 \u003d param_7;\n    local_18 \u003d param_8;\n  }\n  local_d0 \u003d \u0026stack0x00000008;\n  local_d8 \u003d 8;\n  local_c8 \u003d local_b8;\n  local_d4 \u003d 0x30;\n  local_b0 \u003d param_10;\n  local_a8 \u003d param_11;\n  local_a0 \u003d param_12;\n  local_98 \u003d param_13;\n  local_90 \u003d param_14;\n  report(param_9,\u0026local_d8);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "main",
        "display_file.cold",
        "display_file"
      ],
      "called": [
        "report"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "sysv_one_line": {
      "entrypoint": "0x00102fe0",
      "current_name": "sysv_one_line",
      "code": "\nvoid sysv_one_line(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  printf(\"%-*s   \",(ulong)svi_namelen,param_1);\n  rprint_number(svi_sizelen,param_2);\n  printf(\"   \");\n  rprint_number(svi_vmalen,param_3);\n  putchar(10);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "sysv_internal_printer",
        "print_sizes"
      ],
      "called": [
        "putchar",
        "printf",
        "rprint_number"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "_start": {
      "entrypoint": "0x00103040",
      "current_name": "_start",
      "code": "\nvoid processEntry _start(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(main,param_2,\u0026stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "main",
        "__libc_start_main"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "deregister_tm_clones": {
      "entrypoint": "0x00103070",
      "current_name": "deregister_tm_clones",
      "code": "\n/* WARNING: Removing unreachable block (ram,0x00103083) */\n/* WARNING: Removing unreachable block (ram,0x0010308f) */\n\nvoid deregister_tm_clones(void)\n\n{\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "__do_global_dtors_aux"
      ],
      "called": [
        "_ITM_deregisterTMCloneTable"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "register_tm_clones": {
      "entrypoint": "0x001030a0",
      "current_name": "register_tm_clones",
      "code": "\n/* WARNING: Removing unreachable block (ram,0x001030c4) */\n/* WARNING: Removing unreachable block (ram,0x001030d0) */\n\nvoid register_tm_clones(void)\n\n{\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "frame_dummy"
      ],
      "called": [
        "_ITM_registerTMCloneTable"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__do_global_dtors_aux": {
      "entrypoint": "0x001030e0",
      "current_name": "__do_global_dtors_aux",
      "code": "\nvoid __do_global_dtors_aux(void)\n\n{\n  if (completed_0 !\u003d \u0027\\0\u0027) {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  completed_0 \u003d 1;\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "__cxa_finalize",
        "deregister_tm_clones"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "frame_dummy": {
      "entrypoint": "0x00103120",
      "current_name": "frame_dummy",
      "code": "\nvoid frame_dummy(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [
        "register_tm_clones"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "main": {
      "entrypoint": "0x00103130",
      "current_name": "main",
      "code": "\n\n\nundefined4 main(int param_1,long *param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  bool bVar3;\n  bool bVar4;\n  char *pcVar5;\n  byte bVar6;\n  char cVar7;\n  int iVar8;\n  undefined4 uVar9;\n  FILE *__stream;\n  byte *__s;\n  char *pcVar10;\n  size_t sVar11;\n  byte *__ptr;\n  long *__src;\n  long lVar12;\n  long *plVar13;\n  long *plVar14;\n  ulong uVar15;\n  undefined8 uVar16;\n  char *pcVar17;\n  byte *pbVar18;\n  undefined1 *unaff_RBP;\n  long lVar19;\n  byte *pbVar20;\n  int iVar21;\n  int iVar22;\n  bool bVar23;\n  int local_110;\n  int local_10c;\n  size_t local_108;\n  stat local_c8;\n  \n  setlocale(5,\"\");\n  pcVar17 \u003d \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name \u003d *param_2;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  plVar13 \u003d param_2;\n  if (1 \u003c param_1) {\n    local_10c \u003d 2000;\n    local_110 \u003d 0;\n    iVar8 \u003d 1;\n    do {\n      while( true ) {\n        iVar22 \u003d iVar8;\n        unaff_RBP \u003d (undefined1 *)(long)iVar22;\n        if (*(char *)plVar13[(long)unaff_RBP] \u003d\u003d \u0027@\u0027) break;\nLAB_001035a0:\n        if (param_1 \u003c\u003d iVar22 + 1) goto LAB_00103612;\nLAB_001035aa:\n        iVar8 \u003d iVar22 + 1;\n        local_110 \u003d iVar22;\n      }\n      local_10c \u003d local_10c + -1;\n      if (local_10c \u003d\u003d 0) goto LAB_001039c5;\n      pcVar17 \u003d (char *)plVar13[(long)unaff_RBP] + 1;\n      iVar8 \u003d stat(pcVar17,\u0026local_c8);\n      if (iVar8 \u003c 0) goto LAB_001035a0;\n      if ((local_c8.st_mode \u0026 0xf000) \u003d\u003d 0x4000) {\n        lVar19 \u003d *plVar13;\n        pcVar17 \u003d \"%s: error: @-file refers to a directory\\n\";\n        do {\n          fprintf(_stderr,pcVar17,lVar19);\n          xexit(1);\nLAB_001039c5:\n          lVar19 \u003d *plVar13;\n          pcVar17 \u003d \"%s: error: too many @-files encountered\\n\";\n        } while( true );\n      }\n      __stream \u003d fopen(pcVar17,\"r\");\n      if (__stream \u003d\u003d (FILE *)0x0) goto LAB_001035a0;\n      iVar8 \u003d fseek(__stream,0,2);\n      if (((iVar8 \u003d\u003d -1) ||\n          (pcVar17 \u003d (char *)ftell(__stream), pcVar17 \u003d\u003d (char *)0xffffffffffffffff)) ||\n         (iVar8 \u003d fseek(__stream,0,0), iVar8 \u003d\u003d -1)) {\nLAB_00103600:\n        fclose(__stream);\n        if (iVar22 + 1 \u003c param_1) goto LAB_001035aa;\n        break;\n      }\n      __s \u003d (byte *)xmalloc(pcVar17 + 1);\n      pcVar10 \u003d (char *)fread(__s,1,(size_t)pcVar17,__stream);\n      if ((pcVar17 !\u003d pcVar10) \u0026\u0026 (iVar8 \u003d ferror(__stream), iVar8 !\u003d 0)) {\n        free(__s);\n        goto LAB_00103600;\n      }\n      __s[(long)pcVar10] \u003d 0;\n      bVar6 \u003d *__s;\n      pbVar18 \u003d __s;\n      if (bVar6 !\u003d 0) {\nLAB_00103300:\n        if (((\u0026_sch_istable)[(ulong)bVar6 * 2] \u0026 0x40) !\u003d 0) goto LAB_001032f0;\n        sVar11 \u003d strlen((char *)__s);\n        __ptr \u003d (byte *)xmalloc(sVar11 + 1);\n        iVar8 \u003d 0;\n        bVar23 \u003d false;\n        bVar4 \u003d false;\n        lVar19 \u003d 0;\n        __src \u003d (long *)0x0;\n        bVar3 \u003d false;\n        pbVar18 \u003d __s;\n        do {\n          while (((\u0026_sch_istable)[(ulong)*pbVar18 * 2] \u0026 0x40) !\u003d 0) {\n            pbVar18 \u003d pbVar18 + 1;\n          }\n          if ((iVar8 \u003d\u003d 0) || (plVar14 \u003d __src + lVar19, iVar8 + -1 \u003c\u003d (int)lVar19)) {\n            if (__src \u003d\u003d (long *)0x0) {\n              iVar8 \u003d 8;\n              __src \u003d (long *)xmalloc(0x40);\n              plVar14 \u003d __src + lVar19;\n              *plVar14 \u003d 0;\n            }\n            else {\n              iVar8 \u003d iVar8 * 2;\n              __src \u003d (long *)xrealloc(__src,(long)iVar8 \u003c\u003c 3);\n              plVar14 \u003d __src + lVar19;\n              *plVar14 \u003d 0;\n            }\n          }\n          bVar6 \u003d *pbVar18;\n          pbVar20 \u003d __ptr;\n          while (bVar6 !\u003d 0) {\n            while( true ) {\n              if ((((\u0026_sch_istable)[(ulong)bVar6 * 2] \u0026 0x40) !\u003d 0) \u0026\u0026\n                 (!(bool)(bVar4 | bVar3 | bVar23))) {\n                bVar3 \u003d false;\n                bVar23 \u003d false;\n                bVar4 \u003d false;\n                goto LAB_00103410;\n              }\n              if (!bVar3) break;\n              pbVar18 \u003d pbVar18 + 1;\n              *pbVar20 \u003d bVar6;\n              pbVar20 \u003d pbVar20 + 1;\n              bVar3 \u003d false;\n              bVar6 \u003d *pbVar18;\n              if (bVar6 \u003d\u003d 0) goto LAB_00103410;\n            }\n            if (bVar6 \u003d\u003d 0x5c) {\n              bVar3 \u003d true;\n            }\n            else if (bVar4) {\n              if (bVar6 \u003d\u003d 0x27) {\n                bVar4 \u003d false;\n              }\n              else {\nLAB_00103585:\n                *pbVar20 \u003d bVar6;\n                pbVar20 \u003d pbVar20 + 1;\n              }\n            }\n            else if (bVar23) {\n              if (bVar6 !\u003d 0x22) goto LAB_00103585;\n              bVar23 \u003d false;\n            }\n            else if (bVar6 \u003d\u003d 0x27) {\n              bVar4 \u003d true;\n            }\n            else {\n              if (bVar6 !\u003d 0x22) goto LAB_00103585;\n              bVar23 \u003d true;\n            }\n            pbVar1 \u003d pbVar18 + 1;\n            pbVar18 \u003d pbVar18 + 1;\n            bVar6 \u003d *pbVar1;\n          }\nLAB_00103410:\n          *pbVar20 \u003d 0;\n          lVar12 \u003d xstrdup(__ptr);\n          *plVar14 \u003d lVar12;\n          __src[lVar19 + 1] \u003d 0;\n          bVar6 \u003d *pbVar18;\n          bVar2 \u003d (\u0026_sch_istable)[(ulong)bVar6 * 2];\n          while ((bVar2 \u0026 0x40) !\u003d 0) {\n            bVar6 \u003d pbVar18[1];\n            pbVar18 \u003d pbVar18 + 1;\n            bVar2 \u003d (\u0026_sch_istable)[(ulong)bVar6 * 2];\n          }\n          lVar19 \u003d lVar19 + 1;\n        } while (bVar6 !\u003d 0);\n        free(__ptr);\n        plVar14 \u003d plVar13;\n        if (param_2 \u003d\u003d plVar13) goto LAB_0010372c;\n        goto LAB_001034ad;\n      }\nLAB_0010370f:\n      __src \u003d (long *)xmalloc();\n      *__src \u003d 0;\n      if (param_2 \u003d\u003d plVar13) {\nLAB_0010372c:\n        if (*plVar13 \u003d\u003d 0) {\n          iVar8 \u003d 0;\n        }\n        else {\n          lVar19 \u003d 1;\n          do {\n            iVar8 \u003d (int)lVar19;\n            plVar14 \u003d plVar13 + lVar19;\n            lVar19 \u003d lVar19 + 1;\n          } while (*plVar14 !\u003d 0);\n        }\n        lVar12 \u003d 0;\n        plVar14 \u003d (long *)xmalloc((long)(iVar8 + 1) \u003c\u003c 3);\n        lVar19 \u003d *plVar13;\n        while (lVar19 !\u003d 0) {\n          uVar16 \u003d xstrdup();\n          *(undefined8 *)((long)plVar14 + lVar12) \u003d uVar16;\n          lVar12 \u003d lVar12 + 8;\n          lVar19 \u003d *(long *)((long)plVar13 + lVar12);\n        }\n        *(undefined8 *)((long)plVar14 + lVar12) \u003d 0;\nLAB_001034ad:\n        plVar13 \u003d plVar14;\n        if (*__src \u003d\u003d 0) goto LAB_001038cc;\n        pcVar17 \u003d (char *)0x0;\n        do {\n          pcVar17 \u003d pcVar17 + 1;\n        } while (__src[(long)pcVar17] !\u003d 0);\n        local_108 \u003d (long)pcVar17 * 8;\n      }\n      else {\nLAB_001038cc:\n        pcVar17 \u003d (char *)0x0;\n        local_108 \u003d 0;\n      }\n      free((void *)plVar13[(long)unaff_RBP]);\n      plVar13 \u003d (long *)xrealloc(plVar13,(long)(pcVar17 + (long)param_1 + 1) * 8);\n      iVar21 \u003d param_1 + -1 + (int)pcVar17;\n      memmove(plVar13 + (long)(unaff_RBP + (long)pcVar17),plVar13 + (long)(unaff_RBP + 1),\n              (long)(param_1 - iVar22) \u003c\u003c 3);\n      memcpy(plVar13 + (long)unaff_RBP,__src,local_108);\n      free(__src);\n      free(__s);\n      fclose(__stream);\n      unaff_RBP \u003d unaff_RBP + (long)pcVar17;\n      iVar8 \u003d local_110 + 1;\n      param_1 \u003d iVar21;\n    } while (local_110 + 1 \u003c iVar21);\n  }\nLAB_00103612:\n  iVar8 \u003d bfd_init();\n  if (iVar8 !\u003d 0x118) goto LAB_001039f8;\n  pcVar10 \u003d \"x86_64-pc-linux-gnu\";\n  unaff_RBP \u003d long_options;\n  pcVar17 \u003d \"ABGHhVvdfotx\";\n  cVar7 \u003d bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n  if (cVar7 \u003d\u003d \u0027\\0\u0027) {\n    uVar9 \u003d bfd_get_error();\n    pcVar17 \u003d (char *)bfd_errmsg(uVar9);\n    uVar16 \u003d dcgettext(0,\"can\\\u0027t set BFD default target to `%s\\\u0027: %s\",5);\n    uVar15 \u003d fatal(uVar16,\"x86_64-pc-linux-gnu\",pcVar17);\n    goto LAB_00103b74;\n  }\n  do {\n    while (iVar8 \u003d getopt_long(param_1,plVar13,pcVar17,unaff_RBP,0), iVar8 !\u003d -1) {\n      pcVar5 \u003d pcVar10;\n      if (iVar8 \u003c 0x79) {\n        if (iVar8 \u003c 0x3f) {\nswitchD_001037fd_caseD_40:\n          iVar8 \u003d getopt_long(param_1,plVar13,pcVar17,unaff_RBP,0);\n          if (iVar8 \u003d\u003d -1) break;\n          if (0x78 \u003c iVar8) goto LAB_00103937;\n          if (0x3e \u003c iVar8) {\n            switch(iVar8) {\n            case 0x3f:\n            case 0x48:\n            case 0x68:\n              goto switchD_001037fd_caseD_3f;\n            case 0x41:\n              goto switchD_001037fd_caseD_41;\n            case 0x42:\n              goto switchD_001037fd_caseD_42;\n            case 0x47:\n              goto switchD_001037fd_caseD_47;\n            case 0x56:\n            case 0x76:\n              goto switchD_001037fd_caseD_56;\n            case 100:\n              goto switchD_001037fd_caseD_64;\n            case 0x6f:\n              goto switchD_001037fd_caseD_6f;\n            case 0x74:\n              goto switchD_001037fd_caseD_74;\n            case 0x78:\n              goto switchD_001037fd_caseD_78;\n            }\n          }\n          do {\n            do {\n              while( true ) {\n                iVar8 \u003d getopt_long(param_1,plVar13,pcVar17,unaff_RBP,0);\n                if (iVar8 \u003d\u003d -1) goto LAB_00103664;\n                if (0x78 \u003c iVar8) break;\n                if (0x3e \u003c iVar8) {\n                  switch(iVar8) {\n                  case 0x3f:\n                  case 0x48:\n                  case 0x68:\n                    goto switchD_001037fd_caseD_3f;\n                  case 0x41:\n                    goto switchD_001037fd_caseD_41;\n                  case 0x42:\n                    goto switchD_001037fd_caseD_42;\n                  case 0x47:\n                    goto switchD_001037fd_caseD_47;\n                  case 0x56:\n                  case 0x76:\n                    goto switchD_001037fd_caseD_56;\n                  case 100:\n                    goto switchD_001037fd_caseD_64;\n                  case 0x6f:\n                    goto switchD_001037fd_caseD_6f;\n                  case 0x74:\n                    goto switchD_001037fd_caseD_74;\n                  case 0x78:\n                    goto switchD_001037fd_caseD_78;\n                  }\n                }\n              }\nLAB_00103937:\n              if (iVar8 \u003d\u003d 0xca) goto LAB_001039d1;\n            } while (0xca \u003c iVar8);\n            if (iVar8 \u003d\u003d 200) goto LAB_00103869;\n          } while (iVar8 !\u003d 0xc9);\n          goto LAB_00103a15;\n        }\n        switch(iVar8) {\n        case 0x3f:\n        case 0x48:\n        case 0x68:\n          goto switchD_001037fd_caseD_3f;\n        default:\n          goto switchD_001037fd_caseD_40;\n        case 0x41:\n          goto switchD_001037fd_caseD_41;\n        case 0x42:\nswitchD_001037fd_caseD_42:\n          selected_output_format \u003d 0;\n          break;\n        case 0x47:\nswitchD_001037fd_caseD_47:\n          selected_output_format \u003d 2;\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_001037fd_caseD_56:\n          show_version \u003d 1;\n          break;\n        case 100:\n          goto switchD_001037fd_caseD_64;\n        case 0x6f:\n          goto switchD_001037fd_caseD_6f;\n        case 0x74:\nswitchD_001037fd_caseD_74:\n          show_totals \u003d 1;\n          break;\n        case 0x78:\n          goto switchD_001037fd_caseD_78;\n        }\n      }\n      else if (iVar8 \u003d\u003d 0xca) {\nLAB_001039d1:\n        target \u003d _optarg;\n      }\n      else {\n        if (0xca \u003c iVar8) goto switchD_001037fd_caseD_40;\n        if (iVar8 !\u003d 200) {\n          if (iVar8 !\u003d 0xc9) goto switchD_001037fd_caseD_40;\n          goto LAB_00103a15;\n        }\nLAB_00103869:\n        pcVar10 \u003d _optarg;\n        if (0x31 \u003c (byte)(*_optarg + 0xbeU)) goto LAB_00103bc8;\n        uVar15 \u003d 1L \u003c\u003c (*_optarg + 0xbeU \u0026 0x3f);\n        if ((uVar15 \u0026 0x2000000020) !\u003d 0) goto switchD_001037fd_caseD_47;\n        if ((uVar15 \u0026 0x2000000020000) \u003d\u003d 0) {\nLAB_00103b74:\n          if ((uVar15 \u0026 0x100000001) \u003d\u003d 0) goto LAB_00103bc8;\n          goto switchD_001037fd_caseD_42;\n        }\nswitchD_001037fd_caseD_41:\n        selected_output_format \u003d 1;\n      }\n    }\nLAB_00103664:\n    if (show_version !\u003d 0) {\n      printf(\"GNU %s %s\\n\",\u0026DAT_00104067,\"(GNU Binutils for Debian) 2.40\");\n      pcVar17 \u003d (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(pcVar17);\n      pcVar17 \u003d (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(pcVar17);\n                    \n      exit(0);\n    }\n    if (show_help \u003d\u003d 0) {\n      iVar8 \u003d _optind - param_1;\n      if (_optind \u003d\u003d param_1) {\n        display_file(\"a.out\");\n      }\n      else {\n        while (lVar19 \u003d (long)_optind, SBORROW4(_optind,param_1) !\u003d iVar8 \u003c 0) {\n          _optind \u003d _optind + 1;\n          display_file(plVar13[lVar19]);\n          iVar8 \u003d _optind - param_1;\n        }\n      }\n      if ((show_totals !\u003d 0) \u0026\u0026 ((selected_output_format \u0026 0xfffffffd) \u003d\u003d 0)) {\n        lVar19 \u003d total_datasize + total_textsize + total_bsssize;\n        iVar8 \u003d (-(uint)(selected_output_format \u003d\u003d 0) \u0026 0xfffffffd) + 10;\n        bVar23 \u003d selected_output_format \u003d\u003d 0;\n        rprint_number(iVar8);\n        iVar22 \u003d (int)(char)((-bVar23 \u0026 0xe9U) + 0x20);\n        putc(iVar22,_stdout);\n        rprint_number(iVar8,total_datasize);\n        putc(iVar22,_stdout);\n        rprint_number(iVar8,total_bsssize);\n        putc(iVar22,_stdout);\n        if (selected_output_format \u003d\u003d 0) {\n          pcVar17 \u003d \"%7lu\\t%7lx\";\n          if (radix \u003d\u003d 1) {\n            pcVar17 \u003d \"%7lo\\t%7lx\";\n          }\n          printf(pcVar17,lVar19,lVar19);\n        }\n        else {\n          rprint_number(iVar8,lVar19);\n        }\n        putc(iVar22,_stdout);\n        fwrite(\"(TOTALS)\\n\",1,9,_stdout);\n      }\n      return return_code;\n    }\n    usage(_stdout,0);\nLAB_001039f8:\n    uVar16 \u003d dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    fatal(uVar16);\nLAB_00103a15:\n    lVar19 \u003d strtol(_optarg,(char **)0x0,10);\n    pcVar10 \u003d _optarg;\n    iVar8 \u003d (int)lVar19;\n    pcVar5 \u003d \u0026optarg;\n    if (iVar8 \u003d\u003d 10) {\nswitchD_001037fd_caseD_64:\n      pcVar10 \u003d pcVar5;\n      radix \u003d 0;\n    }\n    else if (iVar8 \u003d\u003d 0x10) {\nswitchD_001037fd_caseD_78:\n      pcVar10 \u003d pcVar5;\n      radix \u003d 2;\n    }\n    else {\n      if (iVar8 !\u003d 8) {\n        uVar16 \u003d dcgettext(0,\"Invalid radix: %s\\n\",5);\n        pcVar17 \u003d \u0026optarg;\n        do {\n          non_fatal(uVar16,pcVar10);\n          pcVar10 \u003d pcVar17;\nswitchD_001037fd_caseD_3f:\n          usage(_stderr,1);\nLAB_00103bc8:\n          uVar16 \u003d dcgettext(0,\"invalid argument to --format: %s\",5);\n          pcVar17 \u003d pcVar10;\n        } while( true );\n      }\nswitchD_001037fd_caseD_6f:\n      pcVar10 \u003d pcVar5;\n      radix \u003d 1;\n    }\n  } while( true );\nLAB_001032f0:\n  bVar6 \u003d pbVar18[1];\n  pbVar18 \u003d pbVar18 + 1;\n  if (bVar6 \u003d\u003d 0) goto LAB_0010370f;\n  goto LAB_00103300;\n}\n\n",
      "renaming": {},
      "calling": [
        "_start"
      ],
      "called": [
        "fopen",
        "strtol",
        "putc",
        "usage",
        "xexit",
        "exit",
        "bfd_errmsg",
        "display_file",
        "xstrdup",
        "xrealloc",
        "fwrite",
        "textdomain",
        "bfd_get_error",
        "printf",
        "setlocale",
        "memcpy",
        "fclose",
        "strlen",
        "xmalloc",
        "bfd_set_error_program_name",
        "bfd_init",
        "ferror",
        "ftell",
        "bindtextdomain",
        "non_fatal",
        "fatal",
        "fprintf",
        "fseek",
        "memmove",
        "dcgettext",
        "getopt_long",
        "bfd_set_default_target",
        "stat",
        "free",
        "fread",
        "xmalloc_set_program_name",
        "rprint_number"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "sysv_internal_sizer": {
      "entrypoint": "0x00103c50",
      "current_name": "sysv_internal_sizer",
      "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nundefined8\nsysv_internal_sizer(undefined8 param_1,char **param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  char *pcVar1;\n  undefined8 in_RAX;\n  size_t sVar2;\n  \n  if (*(uint *)((long)param_2 + 0x24) !\u003d 0) {\n    if (((param_2 !\u003d (char **)0x108370) \u0026\u0026 ((*(uint *)((long)param_2 + 0x24) \u0026 0x1000) \u003d\u003d 0)) \u0026\u0026\n       (param_2 !\u003d (char **)0x108258)) {\n      pcVar1 \u003d param_2[8];\n      sVar2 \u003d strlen(*param_2);\n      if (svi_namelen \u003c (int)sVar2) {\n        svi_namelen \u003d (int)sVar2;\n      }\n      svi_total \u003d svi_total + (long)pcVar1;\n      if (svi_maxvma \u003c param_2[6]) {\n        svi_maxvma \u003d param_2[6];\n      }\n    }\n    return param_4;\n  }\n  return in_RAX;\n}\n\n",
      "renaming": {},
      "calling": [
        "print_sizes"
      ],
      "called": [
        "sysv_internal_sizer.cold",
        "strlen"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "sysv_internal_printer": {
      "entrypoint": "0x00103cc0",
      "current_name": "sysv_internal_printer",
      "code": "\nvoid sysv_internal_printer(undefined8 param_1,undefined8 *param_2)\n\n{\n  if ((((*(uint *)((long)param_2 + 0x24) !\u003d 0) \u0026\u0026 (param_2 !\u003d (undefined8 *)0x108370)) \u0026\u0026\n      ((*(uint *)((long)param_2 + 0x24) \u0026 0x1000) \u003d\u003d 0)) \u0026\u0026 (param_2 !\u003d (undefined8 *)0x108258)) {\n    svi_total \u003d svi_total + param_2[8];\n    sysv_one_line(*param_2,param_2[8],param_2[6]);\n    return;\n  }\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "print_sizes"
      ],
      "called": [
        "sysv_one_line",
        "sysv_internal_printer.cold"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "bfd_nonfatal": {
      "entrypoint": "0x00103d20",
      "current_name": "bfd_nonfatal",
      "code": "\n\n\nvoid bfd_nonfatal(long param_1)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  undefined8 in_R10;\n  \n  iVar1 \u003d bfd_get_error();\n  if (iVar1 \u003d\u003d 0) {\n    uVar2 \u003d dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    uVar2 \u003d bfd_errmsg(iVar1);\n  }\n  fflush(_stdout);\n  if (param_1 !\u003d 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,param_1,uVar2,in_R10);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,uVar2,in_R10);\n  return;\n}\n\n",
      "renaming": {},
      "calling": [
        "FUN_001023b6",
        "display_bfd.cold",
        "print_sizes"
      ],
      "called": [
        "bfd_nonfatal.cold",
        "bfd_errmsg",
        "bfd_get_error"
      ],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "_fini": {
      "entrypoint": "0x00103d80",
      "current_name": "_fini",
      "code": "\nvoid _fini(void)\n\n{\n  return;\n}\n\n",
      "renaming": {},
      "calling": [],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    },
    "__libc_start_main": {
      "entrypoint": "0x00108010",
      "current_name": "__libc_start_main",
      "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
      "renaming": {},
      "calling": [
        "_start"
      ],
      "called": [],
      "improved": true,
      "skipped": false,
      "imported": false,
      "tags": []
    }
  },
  "layers": [],
  "locked_functions": [],
  "used_tokens": 0
}