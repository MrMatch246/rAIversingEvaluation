{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "(undefined *)0x0": {
                    "1": "function_pointer"
                },
                "0x0": {
                    "1": "function_ptr"
                },
                "<no_change>": {
                    "1": "<no_change>"
                },
                "DAT": {
                    "1": "dat"
                },
                "FUN_00102020": {
                    "1": "execute_indirect_function",
                    "12": "execute_indirect_jump",
                    "2": "call_indirect_jump",
                    "3": "execute_indirect_call",
                    "4": "execute_function"
                },
                "PTR": {
                    "1": "ptr"
                },
                "PTR_0": {
                    "1": "function_pointer"
                },
                "PTR_undefined": {
                    "1": "arg_ptr"
                },
                "code": {
                    "1": "indirect_jump",
                    "6": "function_pointer"
                },
                "original variable name": {
                    "1": "new_variable_name"
                },
                "ptrToFunction": {
                    "1": "function_pointer"
                },
                "undefined": {
                    "1": "target_address",
                    "3": "function_pointer"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102360": {
            "additional_data": {
                "*piVar1": {
                    "1": "error_ptr",
                    "3": "errno_value"
                },
                "DAT_00107314": {
                    "1": "return_value"
                },
                "FUN_00102360": {
                    "1": "print_error_or_warning",
                    "2": "print_file_not_found_error",
                    "4": "print_file_error_message",
                    "6": "handle_file_not_found_error",
                    "9": "handle_file_error"
                },
                "__errno_location": {
                    "2": "get_errno_location"
                },
                "dcgettext": {
                    "1": "get_translated_msg",
                    "2": "get_localized_message",
                    "3": "get_error_message"
                },
                "piVar1": {
                    "1": "error_location_ptr",
                    "16": "errno_ptr",
                    "2": "errno_location_ptr",
                    "4": "errno_location"
                },
                "print_error_message_00102f40": {
                    "22": "print_error_message"
                },
                "uVar2": {
                    "1": "translated_error_message",
                    "24": "error_message",
                    "5": "error_msg"
                }
            },
            "called": [
                "dcgettext",
                "FUN_00102f40",
                "strerror",
                "__errno_location"
            ],
            "calling": [
                "FUN_00102980"
            ],
            "code": "\nvoid handle_file_error_00102360(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_message);\n  }\n  DAT_00107314 = 1;\n  return;\n}\n\n",
            "current_name": "handle_file_error_00102360",
            "entrypoint": "0x00102360",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102360": "handle_file_error_00102360",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_error_message",
                "piVar1": "errno_ptr",
                "print_error_message_00102f40": "print_error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001023b6": {
            "additional_data": {
                "*unaff_RBX": {
                    "1": "error_message_ptr"
                },
                "DAT_00107314": {
                    "1": "file_status"
                },
                "FUN_001023b6": {
                    "1": "process_archive_files",
                    "21": "process_archived_files",
                    "7": "extract_archived_files"
                },
                "bfd_close": {
                    "1": "close",
                    "2": "close_bfd"
                },
                "bfd_get_error": {
                    "1": "get_error",
                    "2": "get_bfd_error"
                },
                "bfd_openr_next_archived_file": {
                    "3": "open_next_archived_file"
                },
                "bfd_set_error": {
                    "1": "set_error",
                    "2": "set_bfd_error"
                },
                "cVar1": {
                    "1": "close_successful",
                    "15": "close_success",
                    "2": "close_error",
                    "3": "close_result",
                    "6": "close_status"
                },
                "check_and_print_formats_00102a40": {
                    "4": "check_and_print_formats"
                },
                "iVar2": {
                    "1": "bfd_error_code",
                    "21": "error_code",
                    "5": "error"
                },
                "lVar3": {
                    "1": "file_count",
                    "10": "file_handle",
                    "11": "current_file",
                    "2": "file_descriptor"
                },
                "lVar4": {
                    "1": "last_file_handle",
                    "11": "previous_file",
                    "2": "prev_file_handle",
                    "7": "previous_file_handle"
                },
                "print_error_message_00103d20": {
                    "3": "print_error_message"
                },
                "unaff_RBX": {
                    "1": "file_names",
                    "3": "output_file",
                    "5": "error_message"
                }
            },
            "called": [
                "bfd_openr_next_archived_file",
                "FUN_00102a40",
                "FUN_00103d20",
                "bfd_set_error",
                "bfd_get_error",
                "bfd_close"
            ],
            "calling": [
                "FUN_00102980"
            ],
            "code": "\nvoid process_archived_files_001023b6(void)\n\n{\n  char close_success;\n  int error_code;\n  long current_file;\n  undefined8 *error_message;\n  long previous_file;\n  \n  current_file = 0;\n  do {\n    previous_file = current_file;\n    bfd_set_error(0);\n    current_file = bfd_openr_next_archived_file();\n    if (current_file == 0) {\n      error_code = bfd_get_error();\n      if (error_code != 9) {\n        print_error_message(*error_message);\n        DAT_00107314 = 2;\n      }\n      if (previous_file != 0) {\n        bfd_close(previous_file);\n      }\n      break;\n    }\n    check_and_print_formats();\n  } while ((previous_file == 0) || (bfd_close(), previous_file != current_file));\n  close_success = bfd_close();\n  if (close_success == '\\0') {\n    print_error_message();\n    DAT_00107314 = 1;\n  }\n  return;\n}\n\n",
            "current_name": "process_archived_files_001023b6",
            "entrypoint": "0x001023b6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001023b6": "process_archived_files_001023b6",
                "bfd_close": "close_bfd",
                "bfd_get_error": "get_bfd_error",
                "bfd_openr_next_archived_file": "open_next_archived_file",
                "bfd_set_error": "set_bfd_error",
                "cVar1": "close_success",
                "check_and_print_formats_00102a40": "check_and_print_formats",
                "iVar2": "error_code",
                "lVar3": "current_file",
                "lVar4": "previous_file",
                "print_error_message_00103d20": "print_error_message",
                "unaff_RBX": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001024d2": {
            "additional_data": {
                "DAT_00107314": {
                    "1": "error_code"
                },
                "FUN_001024d2": {
                    "1": "handle_bfd",
                    "12": "handle_core_file",
                    "2": "process_binary",
                    "3": "process_core_file",
                    "6": "handle_bfd_error"
                },
                "_stdout": {
                    "1": "output_stream"
                },
                "bfd_check_format_matches": {
                    "1": "check_format_matches"
                },
                "bfd_core_file_failing_command": {
                    "1": "get_failing_command"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "cVar1": {
                    "1": "format_valid",
                    "14": "format_matches",
                    "2": "is_format_match",
                    "3": "format_match"
                },
                "calculate_section_sizes_00102a90": {
                    "4": "calculate_section_sizes"
                },
                "iVar2": {
                    "1": "bfd_error_code",
                    "19": "error_code",
                    "2": "error_type",
                    "5": "error"
                },
                "lVar3": {
                    "1": "core_file_failing_command",
                    "2": "command",
                    "23": "failing_command"
                },
                "param_7": {
                    "1": "command",
                    "2": "matching_formats",
                    "5": "error_message",
                    "7": "format"
                },
                "print_error_message_00103d20": {
                    "1": "print_bfd_error_message",
                    "3": "print_error_message"
                },
                "print_matching_formats_0010278c": {
                    "4": "print_matching_formats"
                },
                "unaff_RBX": {
                    "1": "message_pointer",
                    "2": "file_pointer"
                }
            },
            "called": [
                "puts",
                "fwrite",
                "FUN_00103d20",
                "FUN_00102a90",
                "FUN_0010278c",
                "bfd_core_file_failing_command",
                "bfd_get_error",
                "bfd_check_format_matches",
                "printf"
            ],
            "calling": [
                "FUN_00102a40"
            ],
            "code": "\n\n\nvoid handle_core_file_001024d2(void)\n\n{\n  char format_matches;\n  int error_code;\n  long failing_command;\n  undefined8 *error_message;\n  undefined8 format;\n  \n  error_code = bfd_get_error();\n  if (error_code == 0xd) {\n    print_error_message(*error_message);\n    print_matching_formats(format);\n    DAT_00107314 = 3;\n  }\n  else {\n    format_matches = bfd_check_format_matches();\n    if (format_matches == '\\0') {\n      print_error_message(*error_message);\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\n        print_matching_formats(format);\n      }\n      DAT_00107314 = 3;\n    }\n    else {\n      calculate_section_sizes();\n      fwrite(\" (core file\",1,0xb,output_stream);\n      failing_command = bfd_core_file_failing_command();\n      if (failing_command != 0) {\n        printf(\" invoked as %s\",failing_command);\n      }\n      puts(\")\\n\");\n    }\n  }\n  return;\n}\n\n",
            "current_name": "handle_core_file_001024d2",
            "entrypoint": "0x001024d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001024d2": "handle_core_file_001024d2",
                "_stdout": "output_stream",
                "bfd_check_format_matches": "check_format_matches",
                "bfd_core_file_failing_command": "get_failing_command",
                "bfd_get_error": "get_bfd_error",
                "cVar1": "format_matches",
                "calculate_section_sizes_00102a90": "calculate_section_sizes",
                "iVar2": "error_code",
                "lVar3": "failing_command",
                "param_7": "format",
                "print_error_message_00103d20": "print_error_message",
                "print_matching_formats_0010278c": "print_matching_formats",
                "unaff_RBX": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010259c": {
            "additional_data": {
                "FUN_0010259c": {
                    "1": "print_ex_variable",
                    "19": "print_ex_string",
                    "5": "print_ex_message"
                },
                "in_RAX": {
                    "1": "message_pointer",
                    "2": "data_pointer",
                    "3": "string_pointer",
                    "7": "ex_string"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00102a90"
            ],
            "code": "\nvoid print_ex_string_0010259c(void)\n\n{\n  undefined8 *ex_string_ptr;\n  \n  printf(\" (ex %s)\",*ex_string_ptr);\n  return;\n}\n\n",
            "current_name": "print_ex_string_0010259c",
            "entrypoint": "0x0010259c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010259c": "print_ex_string_0010259c",
                "in_RAX": "ex_string_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001026ea": {
            "additional_data": {
                "FUN_001026ea": {
                    "1": "extract_return_value",
                    "3": "initialize_memory",
                    "4": "initialize_return_address",
                    "5": "initialize_return_value",
                    "8": "initialize_data"
                },
                "in_RAX": {
                    "1": "initial_value",
                    "11": "return_value",
                    "13": "input_value",
                    "2": "input_data"
                },
                "unaff_retaddr": {
                    "1": "original_return_address",
                    "2": "return_value",
                    "25": "return_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103c50"
            ],
            "code": "\nundefined8 initialize_data_001026ea(void)\n\n{\n  undefined8 input_value;\n  undefined8 return_address;\n  \n  DAT_001072d8 = input_value;\n  return return_address;\n}\n\n",
            "current_name": "initialize_data_001026ea",
            "entrypoint": "0x001026ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001026ea": "initialize_data_001026ea",
                "in_RAX": "input_value",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001026f6": {
            "additional_data": {
                "FUN_001026f6": {
                    "1": "format_and_print_number",
                    "16": "print_formatted_number",
                    "2": "print_number",
                    "3": "format_and_print_value",
                    "5": "print_formatted_value"
                },
                "__format": {
                    "1": "number_format",
                    "30": "format_string"
                },
                "in_EAX": {
                    "1": "num_format_type",
                    "2": "format_option",
                    "3": "input_value",
                    "4": "number_format",
                    "7": "number_type"
                },
                "stack0x00000000": {
                    "1": "output_buffer"
                }
            },
            "called": [],
            "calling": [
                "FUN_00102e50"
            ],
            "code": "\nvoid print_formatted_number_001026f6(void)\n\n{\n  int number_type;\n  char *format_string;\n  \n  format_string = \"0x%lx\";\n  if (number_type == 1) {\n    format_string = \"0%lo\";\n  }\n  sprintf(&output_buffer,format_string);\n  strlen(&output_buffer);\n  return;\n}\n\n",
            "current_name": "print_formatted_number_001026f6",
            "entrypoint": "0x001026f6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001026f6": "print_formatted_number_001026f6",
                "__format": "format_string",
                "in_EAX": "number_type",
                "stack0x00000000": "output_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102710": {
            "additional_data": {
                "FUN_00102710": {
                    "1": "print_with_format",
                    "15": "print_formatted_number",
                    "3": "print_formatted_output",
                    "6": "print_formatted_value"
                },
                "__format": {
                    "2": "format_specifier",
                    "28": "format_string"
                },
                "in_EAX": {
                    "1": "integer_input",
                    "2": "input_flag",
                    "9": "number_type"
                },
                "unaff_EBX": {
                    "1": "text_width",
                    "12": "width",
                    "15": "field_width"
                }
            },
            "called": [
                "sprintf",
                "printf"
            ],
            "calling": [
                "FUN_00102e90"
            ],
            "code": "\nvoid print_formatted_number_00102710(void)\n\n{\n  int input_value;\n  uint field_width;\n  char *format_string;\n  \n  format_string = \"0x%lx\";\n  if (input_value == 1) {\n    format_string = \"0%lo\";\n  }\n  sprintf(&stack0x00000000,format_string);\n  printf(\"%*s\",(ulong)field_width);\n  return;\n}\n\n",
            "current_name": "print_formatted_number_00102710",
            "entrypoint": "0x00102710",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102710": "print_formatted_number_00102710",
                "__format": "format_string",
                "in_EAX": "input_value",
                "unaff_EBX": "field_width"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010274a": {
            "called": [],
            "calling": [
                "FUN_00103cc0"
            ],
            "code": "\nvoid FUNC_0010274a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0010274a",
            "entrypoint": "0x0010274a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0010274a": "FUNC_0010274a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0010274b": {
            "additional_data": {
                "FUN_0010274b": {
                    "1": "log_error_message",
                    "2": "print_error",
                    "25": "print_error_message"
                },
                "uVar1": {
                    "1": "error_msg",
                    "24": "error_message"
                },
                "unaff_RBX": {
                    "1": "error_type",
                    "10": "error_flag",
                    "19": "error_code"
                },
                "unaff_retaddr": {
                    "31": "return_address"
                }
            },
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00103d20"
            ],
            "code": "\n\n\nvoid print_error_message_0010274b(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00107350);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00107350,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010274b",
            "entrypoint": "0x0010274b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010274b": "print_error_message_0010274b",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010278c": {
            "additional_data": {
                "FUN_0010278c": {
                    "1": "print_and_free_matching_formats",
                    "29": "print_matching_formats"
                },
                "__format": {
                    "1": "error_format",
                    "15": "format_string",
                    "5": "format_message"
                },
                "_stderr": {
                    "3": "stderr",
                    "4": "standard_error"
                },
                "_stdout": {
                    "3": "stdout"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "fflush": {
                    "1": "flush_standard_output"
                },
                "fprintf": {
                    "1": "print_formatted_string"
                },
                "fputc": {
                    "1": "put_character"
                },
                "free": {
                    "1": "free_memory"
                },
                "param_1": {
                    "1": "matching_formats",
                    "2": "formats_list",
                    "8": "formats",
                    "9": "format_strings"
                },
                "plVar2": {
                    "1": "format_iterator",
                    "14": "current_format",
                    "2": "format_ptr",
                    "6": "current_format_string"
                },
                "stderr": {
                    "1": "standard_error"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "uVar1": {
                    "1": "translation",
                    "2": "format_string",
                    "3": "data",
                    "5": "default_format"
                }
            },
            "called": [
                "fflush",
                "dcgettext",
                "fputc",
                "fprintf",
                "free"
            ],
            "calling": [
                "FUN_001024d2"
            ],
            "code": "\n\n\nvoid print_matching_formats_0010278c(long *format_strings)\n\n{\n  undefined8 default_format;\n  char *format_string;\n  long *current_format;\n  \n  fflush(stdout);\n  default_format = DAT_00107350;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,default_format);\n  for (current_format = format_strings; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free_memory(format_strings);\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_0010278c",
            "entrypoint": "0x0010278c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010278c": "print_matching_formats_0010278c",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "stdout",
                "dcgettext": "get_translated_string",
                "fflush": "flush_standard_output",
                "fprintf": "print_formatted_string",
                "fputc": "put_character",
                "free": "free_memory",
                "param_1": "format_strings",
                "plVar2": "current_format",
                "stderr": "standard_error",
                "stdout": "standard_output",
                "uVar1": "default_format"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010281b": {
            "additional_data": {
                "DAT_00107350": {
                    "1": "default_target"
                },
                "FUN_0010281b": {
                    "1": "print_file_section_sizes",
                    "10": "display_section_sizes",
                    "14": "print_section_sizes",
                    "2": "print_binary_section_sizes"
                },
                "__ptr": {
                    "1": "bfd_target_list",
                    "29": "target_list"
                },
                "bfd_target_list": {
                    "1": "get_target_list"
                },
                "dcgettext": {
                    "1": "get_translated_string",
                    "4": "get_message"
                },
                "exit": {
                    "3": "terminate_program",
                    "5": "exit_program"
                },
                "fprintf": {
                    "1": "print",
                    "2": "write_to_output",
                    "4": "print_formatted"
                },
                "fputc": {
                    "1": "write_char",
                    "5": "put_character"
                },
                "free": {
                    "1": "free_memory",
                    "6": "release_memory"
                },
                "lVar1": {
                    "1": "language_value",
                    "2": "data",
                    "3": "target_name",
                    "4": "language_code",
                    "5": "default_style",
                    "6": "default_format"
                },
                "lvar1": {
                    "1": "default_output"
                },
                "param_1": {
                    "1": "file_ptr",
                    "27": "output_file",
                    "3": "file"
                },
                "param_2": {
                    "1": "exit_status",
                    "29": "exit_code"
                },
                "pcVar2": {
                    "1": "string",
                    "2": "localized_string",
                    "26": "message"
                },
                "plVar3": {
                    "2": "ptr_target",
                    "3": "target_pointer",
                    "4": "target_ptr",
                    "7": "target",
                    "8": "current_target"
                },
                "printf": {
                    "1": "print"
                }
            },
            "called": [
                "dcgettext",
                "bfd_target_list",
                "fputc",
                "fprintf",
                "free",
                "exit"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid print_section_sizes_0010281b(FILE *output_file,int exit_code)\n\n{\n  long default_format;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  default_format = DAT_00107350;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(output_file,message,default_format);\n  message = (char *)dcgettext(0,\" Displays the sizes of sections inside binary files\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" If no input file(s) are specified, a.out is assumed\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  -A|-B|-G  --format={sysv|berkeley|gnu}  Select output style (default is %s)\\n  -o|-d|-x  --radix={8|10|16}         Display numbers in octal, decimal or hex\\n  -t        --totals                  Display the total sizes (Berkeley only)\\n  -f                                  Ignored.\\n            --common                  Display total size for *COM* syms\\n            --target=<bfdname>        Set the binary file format\\n            @<file>                   Read options from <file>\\n  -h|-H|-?  --help                    Display this information\\n  -v|-V     --version                 Display the program\\'s version\\n\\n\"\n                             ,5);\n  fprintf(output_file,message,\"berkeley\");\n  default_format = DAT_00107350;\n  if (DAT_00107350 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,default_format);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    default_format = *current_target;\n    current_target = current_target + 1;\n    if (default_format == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_section_sizes_0010281b",
            "entrypoint": "0x0010281b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010281b": "print_section_sizes_0010281b",
                "__ptr": "target_list",
                "bfd_target_list": "get_target_list",
                "dcgettext": "get_message",
                "exit": "exit_program",
                "fprintf": "print_formatted",
                "fputc": "put_character",
                "free": "release_memory",
                "lVar1": "default_format",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "plVar3": "current_target",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102980": {
            "additional_data": {
                "FUN_00102980": {
                    "1": "check_and_print_file",
                    "16": "check_file",
                    "2": "check_file_stats",
                    "4": "check_file_status"
                },
                "cVar1": {
                    "1": "format_result",
                    "10": "format_check_result",
                    "4": "check_result",
                    "5": "format_valid"
                },
                "iVar2": {
                    "1": "result",
                    "14": "stat_result"
                },
                "lVar6": {
                    "1": "bfd_file",
                    "17": "bfd_handle",
                    "4": "file_handle",
                    "6": "file_descriptor"
                },
                "param_1": {
                    "25": "file_path",
                    "6": "filename"
                },
                "pcVar5": {
                    "1": "error_msg",
                    "14": "error_reason",
                    "2": "str_error",
                    "3": "reason",
                    "8": "error_message"
                },
                "piVar3": {
                    "1": "error_num",
                    "2": "error",
                    "3": "error_ptr",
                    "7": "errno_location",
                    "8": "errno_ptr"
                },
                "sStack_b8": {
                    "1": "stat_buffer",
                    "11": "file_stat",
                    "12": "file_stats",
                    "2": "file_info"
                },
                "sStack_b8.st_mode": {
                    "1": "file_mode"
                },
                "sStack_b8.st_size": {
                    "1": "file_size"
                },
                "uVar4": {
                    "1": "localized_error",
                    "19": "error_message",
                    "2": "error_msg"
                }
            },
            "called": [
                "dcgettext",
                "FUN_00102a40",
                "FUN_00102f40",
                "bfd_openr",
                "FUN_001023b6",
                "stat",
                "FUN_00102360",
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid check_file_00102980(char *file_path)\n\n{\n  char format_check;\n  int stat_result;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  long bfd_handle;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    stat_result = stat(file_path,&file_stats);\n    if (stat_result < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00102f40(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00102f40(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00102f40(error_message,file_path);\n    }\n    else if ((file_mode & 0xf000) == 0x8000) {\n      if (file_size < 0) {\n        error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        print_error_message_00102f40(error_message,file_path);\n      }\n      else if (file_size != 0) {\n        bfd_handle = bfd_openr(file_path,DAT_00107340);\n        if (bfd_handle != 0) {\n          format_check = bfd_check_format(bfd_handle,2);\n          if (format_check != '\\0') {\n            process_archived_files_001023b6();\n            return;\n          }\n          check_and_print_formats_00102a40(bfd_handle);\n          format_check = bfd_close(bfd_handle);\n          if (format_check != '\\0') {\n            return;\n          }\n        }\n        print_error_message_00103d20(file_path);\n        DAT_00107314 = 1;\n        return;\n      }\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00102f40(error_message,file_path);\n    }\n  }\n  DAT_00107314 = 1;\n  return;\n}\n\n",
            "current_name": "check_file_00102980",
            "entrypoint": "0x00102980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102980": "check_file_00102980",
                "cVar1": "format_check",
                "iVar2": "stat_result",
                "lVar6": "bfd_handle",
                "param_1": "file_path",
                "pcVar5": "error_reason",
                "piVar3": "errno_ptr",
                "sStack_b8": "file_stats",
                "sStack_b8.st_mode": "file_mode",
                "sStack_b8.st_size": "file_size",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102a40": {
            "additional_data": {
                "DAT_00107314": {
                    "1": "status"
                },
                "FUN_00102a40": {
                    "1": "check_core_file_format",
                    "2": "process_binary_file",
                    "8": "check_and_print_formats"
                },
                "_stdout": {
                    "2": "standard_output"
                },
                "bfd_core_file_failing_command": {
                    "1": "get_failing_command"
                },
                "cVar1": {
                    "1": "format_supported",
                    "10": "is_valid_format",
                    "2": "check_result",
                    "4": "format_valid",
                    "5": "format_check"
                },
                "calculate_section_sizes_00102a90": {
                    "2": "calculate_section_sizes"
                },
                "fwrite": {
                    "1": "write_to_stdout"
                },
                "iVar2": {
                    "1": "bfd_error_code",
                    "2": "bfd_error",
                    "27": "error_code"
                },
                "lVar3": {
                    "1": "command",
                    "2": "command_name",
                    "23": "failing_command"
                },
                "local_20": {
                    "1": "format_matches",
                    "29": "matching_formats"
                },
                "param_1": {
                    "1": "file_data",
                    "2": "input_formats",
                    "9": "binary_file"
                },
                "print_error_message_00103d20": {
                    "2": "print_error_message"
                },
                "print_matching_formats_0010278c": {
                    "2": "print_matching_formats"
                }
            },
            "called": [
                "FUN_001024d2",
                "FUN_00102a90",
                "putchar",
                "bfd_check_format_matches",
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00102980",
                "FUN_001023b6"
            ],
            "code": "\n\n\nvoid check_and_print_formats_00102a40(undefined8 *binary_file)\n\n{\n  char is_valid_format;\n  int error_code;\n  long failing_command;\n  undefined8 matching_formats [2];\n  \n  is_valid_format = bfd_check_format(binary_file,2);\n  if (is_valid_format == '\\0') {\n    is_valid_format = bfd_check_format_matches(binary_file,1,matching_formats);\n    if (is_valid_format == '\\0') {\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\n        print_error_message(*binary_file);\n        print_matching_formats(matching_formats[0]);\n        DAT_00107314 = 3;\n      }\n      else {\n        is_valid_format = bfd_check_format_matches(binary_file,3,matching_formats);\n        if (is_valid_format == '\\0') {\n          print_error_message(*binary_file);\n          error_code = bfd_get_error();\n          if (error_code == 0xd) {\n            print_matching_formats(matching_formats[0]);\n          }\n          DAT_00107314 = 3;\n        }\n        else {\n          calculate_section_sizes(binary_file);\n          fwrite(\" (core file\",1,0xb,standard_output);\n          failing_command = bfd_core_file_failing_command(binary_file);\n          if (failing_command != 0) {\n            printf(\" invoked as %s\",failing_command);\n          }\n          puts(\")\\n\");\n        }\n      }\n    }\n    else {\n      calculate_section_sizes(binary_file);\n      putchar(10);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "check_and_print_formats_00102a40",
            "entrypoint": "0x00102a40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102a40": "check_and_print_formats_00102a40",
                "_stdout": "standard_output",
                "bfd_core_file_failing_command": "get_failing_command",
                "cVar1": "is_valid_format",
                "calculate_section_sizes_00102a90": "calculate_section_sizes",
                "fwrite": "write_to_stdout",
                "iVar2": "error_code",
                "lVar3": "failing_command",
                "local_20": "matching_formats",
                "param_1": "binary_file",
                "print_error_message_00103d20": "print_error_message",
                "print_matching_formats_0010278c": "print_matching_formats"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102a90": {
            "additional_data": {
                "FUN_00102a90": {
                    "1": "process_binary",
                    "14": "calculate_section_sizes",
                    "2": "analyze_sections"
                },
                "_DAT_001072f0": {
                    "1": "initialized_memory"
                },
                "_DAT_00107310": {
                    "1": "is_condition1_true"
                },
                "_DAT_00107318": {
                    "1": "bss_total"
                },
                "_DAT_00107320": {
                    "1": "data_total"
                },
                "_DAT_00107328": {
                    "1": "text_total"
                },
                "_DAT_00107334": {
                    "1": "is_condition4_true"
                },
                "_DAT_0010733c": {
                    "1": "is_condition3_true"
                },
                "_DAT_00107348": {
                    "1": "is_condition2_true"
                },
                "__ptr": {
                    "1": "malloced_memory",
                    "22": "allocated_memory"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "bVar10": {
                    "1": "is_not_zero",
                    "2": "loop_condition",
                    "3": "condition"
                },
                "bVar11": {
                    "1": "is_first_run",
                    "2": "loop_condition2",
                    "4": "is_first_iteration",
                    "6": "is_zero"
                },
                "cVar5": {
                    "1": "has_matching_sections",
                    "11": "flag",
                    "2": "section_flag"
                },
                "extraout_RDX": {
                    "1": "formatted_value",
                    "2": "extra_value1",
                    "3": "extra_output_rdx"
                },
                "extraout_RDX_00": {
                    "1": "extra_data",
                    "2": "result",
                    "3": "extra_value2"
                },
                "extraout_RDX_01": {
                    "1": "extra_value_01",
                    "2": "extra_output_rdx_01",
                    "3": "return_value3"
                },
                "format_and_print_00102e50": {
                    "1": "format_and_print"
                },
                "iVar4": {
                    "1": "iteration",
                    "2": "counter",
                    "4": "loop_counter",
                    "5": "index"
                },
                "iVar8": {
                    "1": "alignment",
                    "2": "column_width",
                    "3": "indentation",
                    "6": "indentation_spaces"
                },
                "lVar1": {
                    "1": "current_section_address",
                    "10": "section_address",
                    "2": "section_info",
                    "3": "section_offset",
                    "4": "section_size",
                    "5": "section_pointer"
                },
                "lVar2": {
                    "2": "section_size",
                    "23": "total_size",
                    "3": "total_section_size"
                },
                "lVar9": {
                    "1": "loop_index",
                    "2": "count",
                    "3": "loop_counter",
                    "4": "total_size",
                    "5": "counter"
                },
                "param_1": {
                    "1": "binary",
                    "2": "section_data",
                    "6": "parameters",
                    "8": "arguments"
                },
                "pcVar7": {
                    "1": "filename",
                    "2": "print_string",
                    "3": "section_name",
                    "4": "message"
                },
                "print_formatted_value_00102e90": {
                    "1": "print_formatted_value"
                },
                "print_formatted_values_00102fe0": {
                    "1": "print_formatted_values"
                },
                "process_data_00103cc0": {
                    "1": "process_data_section"
                },
                "puVar12": {
                    "1": "unknown",
                    "2": "format_string",
                    "3": "format_specifier"
                },
                "pvVar6": {
                    "1": "processed_memory",
                    "11": "temp_pointer",
                    "2": "ptr_var",
                    "4": "pointer"
                },
                "uVar3": {
                    "1": "extra_variable",
                    "2": "return_value",
                    "3": "formatted_value"
                },
                "update_data_00103c50": {
                    "1": "update_data_section"
                }
            },
            "called": [
                "FUN_00102e50",
                "putc",
                "fputs",
                "free",
                "FUN_0010259c",
                "FUN_00102fe0",
                "FUN_00103c50",
                "bfd_map_over_sections",
                "puts",
                "xexit",
                "xmalloc",
                "FUN_00103d20",
                "FUN_00103cc0",
                "FUN_00102e90",
                "FUN_00102d70",
                "printf"
            ],
            "calling": [
                "FUN_00102a40",
                "FUN_001024d2"
            ],
            "code": "\n\n\nvoid calculate_section_sizes_00102a90(char **arguments)\n\n{\n  long section_address;\n  undefined8 extra_output_rdx;\n  long total_size;\n  long return_value2;\n  undefined8 return_value3;\n  undefined8 formatted_value;\n  void *allocated_memory;\n  int index;\n  char flag;\n  void *temp_pointer;\n  char *message;\n  int indent_size;\n  long counter;\n  bool condition;\n  bool is_zero;\n  undefined *format_specifier;\n  \n  if ((_DAT_00107310 == 0) || (DAT_001072f0 = 0, (*(uint *)((long)arguments + 0x44) & 0x52) != 0x10))\n  goto LAB_00102aa8;\n  counter = (**(code **)(arguments[1] + 0x1f8))();\n  if (counter < 0) {\n    print_error_message_00103d20(*arguments);\n    xexit(1);\nLAB_001026b4:\n    allocated_memory = (void *)xmalloc();\n  }\n  else {\n    allocated_memory = (void *)0x0;\n    if (counter != 0) goto LAB_001026b4;\n  }\n  temp_pointer = allocated_memory;\n  counter = (**(code **)(arguments[1] + 0x200))(arguments);\n  flag = (char)temp_pointer;\n  if (counter < 0) {\n    print_error_message_00103d20(*arguments);\n    xexit(1);\n    total_size = return_value2;\n  }\n  else {\n    flag = '\\0';\n    total_size = DAT_001072f0;\n    while (condition = counter != 0, counter = counter + -1, condition) {\n      section_address = *(long *)((long)allocated_memory + counter * 8);\n      if (((*(byte *)(*(long *)(section_address + 0x20) + 0x25) & 0x10) != 0) &&\n         ((*(byte *)(section_address + 0x19) & 1) == 0)) {\n        total_size = total_size + *(long *)(section_address + 0x10);\n        flag = '\\x01';\n      }\n    }\n  }\n  if (flag != '\\0') {\n    DAT_001072f0 = total_size;\n  }\n  free(allocated_memory);\nLAB_00102aa8:\n  if (DAT_00107348 == 1) {\n    DAT_001072e0 = 0;\n    DAT_001072d8 = 0;\n    DAT_001072d0 = 0;\n    bfd_map_over_sections(arguments,update_data_section,0);\n    if (_DAT_00107310 != 0) {\n      if ((int)DAT_001072d0 < 5) {\n        DAT_001072d0 = 5;\n      }\n      DAT_001072e0 = DAT_001072e0 + DAT_001072f0;\n    }\n    DAT_001072cc = format_and_print(DAT_001072d8);\n    if (DAT_001072cc < 4) {\n      DAT_001072cc = 4;\n    }\n    DAT_001072c8 = format_and_print();\n    if (DAT_001072c8 < 4) {\n      DAT_001072c8 = 4;\n    }\n    DAT_001072e0 = 0;\n    printf(\"%s  \",*arguments);\n    formatted_value = return_value3;\n    if ((undefined8 *)arguments[0x1d] != (undefined8 *)0x0) {\n      printf(\" (ex %s)\",*(undefined8 *)arguments[0x1d]);\n      formatted_value = extra_output_rdx;\n    }\n    format_specifier = &DAT_001040fc;\n    printf(\":\\n%-*s   %*s   %*s\\n\",(ulong)DAT_001072d0,\"section\",(ulong)DAT_001072c8,&DAT_00104067,\n           (ulong)DAT_001072cc,&DAT_001040fc,formatted_value);\n    bfd_map_over_sections(arguments,process_data_section,0);\n    if (_DAT_00107310 != 0) {\n      DAT_001072e0 = DAT_001072e0 + DAT_001072f0;\n      print_formatted_values(\"*COM*\",DAT_001072f0,0,format_specifier);\n    }\n    printf(\"%-*s   \",(ulong)DAT_001072d0,\"Total\");\n    print_formatted_value(DAT_001072c8,DAT_001072e0);\n    puts(\"\\n\");\n    return;\n  }\n  indent_size = (-(uint)(DAT_00107348 == 0) & 0xfffffffd) + 10;\n  condition = DAT_00107348 == 0;\n  DAT_00107308 = 0;\n  DAT_00107300 = 0;\n  DAT_001072f8 = 0;\n  bfd_map_over_sections(arguments,update_data_00102d70,0);\n  DAT_00107308 = DAT_00107308 + DAT_001072f0;\n  index = DAT_001072e8 + 1;\n  is_zero = DAT_001072e8 == 0;\n  DAT_001072e8 = index;\n  if (is_zero) {\n    if (DAT_00107348 == 0) {\n      message = \"   text\\t   data\\t    bss\\t    dec\\t    hex\\tfilename\";\n      if (DAT_0010733c == 1) {\n        message = \"   text\\t   data\\t    bss\\t    oct\\t    hex\\tfilename\";\n      }\n      puts(message);\n    }\n    else {\n      puts(\"      text       data        bss      total filename\");\n    }\n  }\n  counter = DAT_001072f8 + DAT_00107300 + DAT_00107308;\n  if (_DAT_00107334 != 0) {\n    DAT_00107328 = DAT_00107328 + DAT_001072f8;\n    DAT_00107320 = DAT_00107320 + DAT_00107300;\n    DAT_00107318 = DAT_00107318 + DAT_00107308;\n  }\n  index = (int)(char)((-condition & 0xe9U) + 0x20);\n  print_formatted_value(indent_size);\n  putc(index,standard_output);\n  print_formatted_value(indent_size,DAT_00107300);\n  putc(index,standard_output);\n  print_formatted_value(indent_size,DAT_00107308);\n  putc(index,standard_output);\n  if (DAT_00107348 == 0) {\n    message = \"%7lu\\t%7lx\";\n    if (DAT_0010733c == 1) {\n      message = \"%7lo\\t%7lx\";\n    }\n    printf(message,counter,counter);\n  }\n  else {\n    print_formatted_value(indent_size,counter);\n  }\n  putc(index,standard_output);\n  fputs(*arguments,standard_output);\n  if ((undefined8 *)arguments[0x1d] == (undefined8 *)0x0) {\n    return;\n  }\n  printf(\" (ex %s)\",*(undefined8 *)arguments[0x1d]);\n  return;\n}\n\n",
            "current_name": "calculate_section_sizes_00102a90",
            "entrypoint": "0x00102a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102a90": "calculate_section_sizes_00102a90",
                "__ptr": "allocated_memory",
                "_stdout": "standard_output",
                "bVar10": "condition",
                "bVar11": "is_zero",
                "cVar5": "flag",
                "extraout_RDX": "extra_output_rdx",
                "extraout_RDX_00": "return_value2",
                "extraout_RDX_01": "return_value3",
                "format_and_print_00102e50": "format_and_print",
                "iVar4": "index",
                "iVar8": "indent_size",
                "lVar1": "section_address",
                "lVar2": "total_size",
                "lVar9": "counter",
                "param_1": "arguments",
                "pcVar7": "message",
                "print_formatted_value_00102e90": "print_formatted_value",
                "print_formatted_values_00102fe0": "print_formatted_values",
                "process_data_00103cc0": "process_data_section",
                "puVar12": "format_specifier",
                "pvVar6": "temp_pointer",
                "uVar3": "formatted_value",
                "update_data_00103c50": "update_data_section"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102d70": {
            "additional_data": {
                "FUN_00102d70": {
                    "1": "update_sum",
                    "2": "update_counts",
                    "21": "update_data",
                    "3": "update_values"
                },
                "lVar2": {
                    "1": "value_to_update",
                    "16": "value",
                    "2": "value_to_add",
                    "5": "data_value",
                    "6": "offset"
                },
                "param_1": {
                    "1": "input",
                    "16": "param1",
                    "3": "param",
                    "4": "data"
                },
                "param_2": {
                    "1": "p2",
                    "16": "param2",
                    "2": "pointer",
                    "6": "data"
                },
                "uVar1": {
                    "1": "flag_value",
                    "16": "flags",
                    "4": "data_flag",
                    "8": "flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_00102a90"
            ],
            "code": "\nvoid update_data_00102d70(undefined8 param1,long param2)\n\n{\n  uint flags;\n  long value;\n  \n  flags = *(uint *)(param2 + 0x24);\n  if ((flags & 1) != 0) {\n    value = *(long *)(param2 + 0x40);\n    if (((flags & 0x10) != 0) || ((DAT_00107348 == 0 && ((flags & 8) != 0)))) {\n      DAT_001072f8 = DAT_001072f8 + value;\n      return;\n    }\n    if ((flags & 0x100) != 0) {\n      DAT_00107300 = DAT_00107300 + value;\n      return;\n    }\n    DAT_00107308 = DAT_00107308 + value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_00102d70",
            "entrypoint": "0x00102d70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102d70": "update_data_00102d70",
                "lVar2": "value",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102db0": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "print_formatted_number"
                },
                "DAT_0010733c": {
                    "1": "data_flag",
                    "2": "format_type"
                },
                "FUN_00102db0": {
                    "1": "print_error_message",
                    "3": "print_and_exit",
                    "4": "print_formatted_error_message",
                    "6": "print_formatted_value",
                    "7": "print_formatted_number"
                },
                "__format": {
                    "1": "formatted_string",
                    "2": "format_specifier",
                    "21": "format_string"
                },
                "acStack_110": {
                    "1": "char_stack",
                    "2": "buffer",
                    "3": "formatted_number",
                    "4": "formatted_value",
                    "7": "formatted_output"
                },
                "in_AL": {
                    "1": "is_enabled",
                    "2": "input_flag",
                    "4": "condition",
                    "9": "flag"
                },
                "local_18": {
                    "1": "error_code_8_copy",
                    "2": "param_8_copy",
                    "7": "param_8"
                },
                "local_28": {
                    "1": "param7",
                    "2": "param7_copy",
                    "7": "param_7"
                },
                "local_38": {
                    "1": "if_input_6",
                    "2": "param_6_copy",
                    "7": "param_6"
                },
                "local_48": {
                    "1": "if_input_5",
                    "2": "param5_copy",
                    "7": "param_5"
                },
                "local_58": {
                    "1": "local_param_4",
                    "2": "param_4_copy",
                    "7": "param_4"
                },
                "local_68": {
                    "1": "variable3",
                    "2": "param3_copy",
                    "7": "param_3"
                },
                "local_78": {
                    "1": "if_input_2",
                    "2": "param_2_copy",
                    "7": "param_2"
                },
                "local_88": {
                    "1": "optional_param1",
                    "2": "param_1_copy",
                    "3": "error_code",
                    "5": "param_1"
                },
                "local_90": {
                    "1": "param_14_copy",
                    "3": "param14_copy",
                    "8": "param_14"
                },
                "local_98": {
                    "1": "local_variable4",
                    "3": "param13_copy",
                    "8": "param_13"
                },
                "local_a0": {
                    "1": "variable12",
                    "3": "param12_copy",
                    "8": "param_12"
                },
                "local_a8": {
                    "1": "other_param11",
                    "3": "param11_copy",
                    "8": "param_11"
                },
                "local_b0": {
                    "1": "local_var_3",
                    "3": "param10_copy",
                    "8": "param_10"
                },
                "local_b8": {
                    "1": "temp_buffer",
                    "2": "local_buffer_array",
                    "3": "buffer",
                    "7": "local_buffer"
                },
                "local_c8": {
                    "1": "buffer_ptr",
                    "12": "local_buffer",
                    "5": "buffer"
                },
                "local_d0": {
                    "1": "local_ptr_1",
                    "2": "pointer",
                    "3": "buffer_ptr",
                    "4": "buffer"
                },
                "local_d4": {
                    "1": "stack_length",
                    "2": "format_length"
                },
                "local_d8": {
                    "1": "buffer_length",
                    "19": "buffer_size",
                    "2": "length",
                    "3": "size"
                },
                "param_1": {
                    "1": "error_message_1",
                    "22": "error_code",
                    "3": "value1"
                },
                "param_10": {
                    "1": "number_1",
                    "4": "value1",
                    "5": "value_1",
                    "6": "param10",
                    "9": "param_10"
                },
                "param_11": {
                    "1": "number_2",
                    "4": "value2",
                    "5": "value_2",
                    "6": "param11",
                    "9": "param_11"
                },
                "param_12": {
                    "1": "value12",
                    "4": "value3",
                    "5": "value_3",
                    "6": "param12",
                    "9": "param_12"
                },
                "param_13": {
                    "1": "value_5",
                    "4": "value4",
                    "5": "value_4",
                    "6": "param13",
                    "9": "param_13"
                },
                "param_14": {
                    "1": "arg5",
                    "4": "value5",
                    "5": "value_5",
                    "6": "param14",
                    "9": "param_14"
                },
                "param_2": {
                    "1": "format_option_2",
                    "10": "param_2",
                    "3": "value2"
                },
                "param_3": {
                    "1": "input_3",
                    "10": "param3",
                    "3": "value3"
                },
                "param_4": {
                    "1": "param_3",
                    "10": "param_4",
                    "3": "value4"
                },
                "param_5": {
                    "1": "format_option_5",
                    "10": "param5",
                    "11": "param_5",
                    "3": "value5"
                },
                "param_6": {
                    "1": "flag5",
                    "10": "param6",
                    "11": "param_6",
                    "3": "value6"
                },
                "param_7": {
                    "1": "input_7",
                    "10": "param7",
                    "11": "param_7",
                    "3": "value7"
                },
                "param_8": {
                    "1": "input_8",
                    "10": "param8",
                    "11": "param_8",
                    "3": "value8"
                },
                "param_9": {
                    "1": "message_ptr",
                    "2": "format_string",
                    "3": "file_descriptor",
                    "6": "error_message"
                },
                "sprintf": {
                    "1": "format_string_into_buffer"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar1": {
                    "1": "formatted_result",
                    "2": "result",
                    "4": "value",
                    "5": "formatted_number",
                    "8": "formatted_value"
                }
            },
            "called": [
                "xexit",
                "FUN_00102ee0"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid print_formatted_number_00102db0(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char flag;\n  char *format_string;\n  undefined8 formatted_value;\n  char formatted_output [48];\n  undefined4 buffer_size;\n  undefined4 format_length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param_10;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 param_1;\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 param_5;\n  undefined4 param_6;\n  undefined4 param_7;\n  undefined4 param_8;\n  \n  if (flag != '\\0') {\n    param_1 = error_code;\n    param_2 = param2;\n    param_3 = param3;\n    param_4 = param4;\n    param_5 = param_5;\n    param_6 = param_6;\n    param_7 = param_7;\n    param_8 = param_8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_buffer;\n  format_length = 0x30;\n  param_10 = error_code0;\n  param_11 = error_code1;\n  param_12 = error_code2;\n  param_13 = error_code3;\n  param_14 = error_code4;\n  print_error_message_00102ee0(error_message,&buffer_size);\n  formatted_value = 1;\n  xexit(1);\n  if (DAT_0010733c == 0) {\n    format_string = \"%lu\";\n  }\n  else {\n    format_string = \"0x%lx\";\n    if (DAT_0010733c == 1) {\n      format_string = \"0%lo\";\n    }\n  }\n  sprintf(formatted_output,format_string,formatted_value);\n  strlen(formatted_output);\n  return;\n}\n\n",
            "current_name": "print_formatted_number_00102db0",
            "entrypoint": "0x00102db0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102db0": "print_formatted_number_00102db0",
                "__format": "format_string",
                "acStack_110": "formatted_output",
                "in_AL": "flag",
                "local_18": "param_8",
                "local_28": "param_7",
                "local_38": "param_6",
                "local_48": "param_5",
                "local_58": "param_4",
                "local_68": "param_3",
                "local_78": "param_2",
                "local_88": "param_1",
                "local_90": "param_14",
                "local_98": "param_13",
                "local_a0": "param_12",
                "local_a8": "param_11",
                "local_b0": "param_10",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "format_length",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_9": "error_message",
                "sprintf": "format_string_into_buffer",
                "strlen": "get_string_length",
                "uVar1": "formatted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102e50": {
            "additional_data": {
                "FUN_00102e50": {
                    "1": "convert_to_hex",
                    "2": "format_number",
                    "4": "print_formatted_value",
                    "6": "format_and_print_number",
                    "7": "format_and_print_value",
                    "8": "format_and_print"
                },
                "__format": {
                    "1": "format_str",
                    "2": "format",
                    "24": "format_string",
                    "4": "format_specifier"
                },
                "acStack_38": {
                    "1": "formatted_number",
                    "15": "output_buffer",
                    "2": "output",
                    "3": "formatted_value",
                    "9": "output_string"
                },
                "param_1": {
                    "1": "decimal_number",
                    "13": "value",
                    "2": "input",
                    "4": "input_value",
                    "9": "number"
                }
            },
            "called": [
                "strlen",
                "sprintf",
                "FUN_001026f6"
            ],
            "calling": [
                "FUN_00102a90"
            ],
            "code": "\nvoid format_and_print_00102e50(undefined8 value)\n\n{\n  char *format_string;\n  char output_buffer [48];\n  \n  if (DAT_0010733c == 0) {\n    format_string = \"%lu\";\n  }\n  else {\n    format_string = \"0x%lx\";\n    if (DAT_0010733c == 1) {\n      format_string = \"0%lo\";\n    }\n  }\n  sprintf(output_buffer,format_string,value);\n  strlen(output_buffer);\n  return;\n}\n\n",
            "current_name": "format_and_print_00102e50",
            "entrypoint": "0x00102e50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102e50": "format_and_print_00102e50",
                "__format": "format_string",
                "acStack_38": "output_buffer",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102e90": {
            "additional_data": {
                "FUN_00102e90": {
                    "1": "format_and_print",
                    "18": "print_formatted_value",
                    "2": "format_and_print_number",
                    "8": "print_formatted_number"
                },
                "__format": {
                    "1": "format_str",
                    "13": "format_string",
                    "5": "format",
                    "9": "format_specifier"
                },
                "acStack_48": {
                    "1": "format_string",
                    "11": "formatted_value",
                    "2": "formatted_string",
                    "6": "buffer",
                    "7": "formatted_number"
                },
                "param_1": {
                    "1": "alignment",
                    "2": "field_width",
                    "26": "width"
                },
                "param_2": {
                    "10": "number",
                    "21": "value"
                }
            },
            "called": [
                "FUN_00102710",
                "sprintf",
                "printf"
            ],
            "calling": [
                "FUN_00103130",
                "FUN_00102a90",
                "FUN_00102fe0"
            ],
            "code": "\nvoid print_formatted_value_00102e90(ulong width,undefined8 value)\n\n{\n  char *format_string;\n  char formatted_value [56];\n  \n  if (DAT_0010733c == 0) {\n    sprintf(formatted_value,\"%lu\",value);\n    printf(\"%*s\",width & 0xffffffff,formatted_value);\n  }\n  else {\n    format_string = \"0x%lx\";\n    if (DAT_0010733c == 1) {\n      format_string = \"0%lo\";\n    }\n    sprintf(formatted_value,format_string,value);\n    printf(\"%*s\",width & 0xffffffff,formatted_value);\n  }\n  return;\n}\n\n",
            "current_name": "print_formatted_value_00102e90",
            "entrypoint": "0x00102e90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102e90": "print_formatted_value_00102e90",
                "__format": "format_string",
                "acStack_48": "formatted_value",
                "param_1": "width",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102ee0": {
            "additional_data": {
                "DAT_00107350": {
                    "1": "error_prefix"
                },
                "FUN_00102ee0": {
                    "1": "print_formatted_message",
                    "29": "print_error_message"
                },
                "__gnuc_va_list": {
                    "1": "argument_list"
                },
                "__gnuc_va_list param_2": {
                    "1": "variable_arguments"
                },
                "_stderr": {
                    "1": "stderr",
                    "17": "standard_error"
                },
                "_stdout": {
                    "1": "stream_out",
                    "17": "standard_output"
                },
                "fflush": {
                    "1": "flush_standard_output"
                },
                "fprintf": {
                    "1": "print_to_standard_error"
                },
                "param_1": {
                    "1": "error_format_string",
                    "10": "message",
                    "13": "error_message",
                    "3": "message_format",
                    "4": "format_string"
                },
                "param_2": {
                    "1": "var_args",
                    "11": "arguments",
                    "2": "format_args",
                    "9": "args"
                },
                "put(10,_stderr)": {
                    "1": "print_newline(standard_error)"
                },
                "putc": {
                    "1": "write_new_line_to_standard_error",
                    "2": "put_character"
                },
                "vfprintf": {
                    "1": "print_formatted_error"
                }
            },
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "calling": [
                "FUN_00102db0",
                "FUN_00102f40"
            ],
            "code": "\n\n\nvoid print_error_message_00102ee0(char *error_message,varargs arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_00107350);\n  vfprintf(standard_error,error_message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_00102ee0",
            "entrypoint": "0x00102ee0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102ee0": "print_error_message_00102ee0",
                "__gnuc_va_list": "varargs",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_standard_output",
                "fprintf": "print_to_standard_error",
                "param_1": "error_message",
                "param_2": "arguments",
                "putc": "put_character",
                "vfprintf": "print_formatted_error"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f40": {
            "additional_data": {
                "FUN_00102f40": {
                    "1": "print_error_and_parameters",
                    "27": "print_error_message",
                    "3": "print_error"
                },
                "in_AL": {
                    "1": "enable_error_printing",
                    "11": "flag",
                    "3": "is_error",
                    "7": "condition"
                },
                "local_18": {
                    "1": "local_var15",
                    "12": "param8_copy",
                    "2": "local8"
                },
                "local_28": {
                    "1": "local_var9",
                    "12": "param7_copy",
                    "2": "param7"
                },
                "local_38": {
                    "1": "param_6_dup",
                    "12": "param6_copy",
                    "2": "param_6_copy"
                },
                "local_48": {
                    "1": "local_param10",
                    "12": "param5_copy",
                    "2": "arg5"
                },
                "local_58": {
                    "1": "local_variable11",
                    "12": "param4_copy",
                    "2": "param_4_copy"
                },
                "local_68": {
                    "1": "arg3_copy",
                    "12": "param3_copy",
                    "2": "param3"
                },
                "local_78": {
                    "1": "local_var4",
                    "11": "param2_copy",
                    "2": "param_2_copy"
                },
                "local_88": {
                    "1": "param_1_dup",
                    "14": "error_code_copy",
                    "2": "local1",
                    "3": "error_code"
                },
                "local_90": {
                    "1": "local_param14",
                    "11": "param14_copy",
                    "4": "param_14_copy"
                },
                "local_98": {
                    "1": "arg13",
                    "11": "param13_copy",
                    "4": "param_13_copy"
                },
                "local_a0": {
                    "1": "value12",
                    "11": "param12_copy",
                    "4": "param12"
                },
                "local_a8": {
                    "1": "local_var4",
                    "11": "param11_copy",
                    "4": "param11"
                },
                "local_b0": {
                    "1": "local_param10",
                    "11": "param10_copy",
                    "4": "param10"
                },
                "local_b8": {
                    "1": "temp_buffer",
                    "2": "buffer",
                    "4": "temporary_buffer",
                    "6": "local_array"
                },
                "local_c8": {
                    "1": "local_arr2",
                    "12": "local_buffer",
                    "2": "buffer"
                },
                "local_d0": {
                    "1": "stack_pointer",
                    "11": "buffer",
                    "2": "buffer_ptr"
                },
                "local_d4": {
                    "1": "local_variable1",
                    "2": "local_d4",
                    "3": "buffer_length"
                },
                "local_d8": {
                    "1": "buffer_length",
                    "15": "buffer_size",
                    "2": "local_variable1",
                    "3": "length"
                },
                "param_1": {
                    "1": "input1",
                    "2": "arg1",
                    "26": "error_code"
                },
                "param_10": {
                    "1": "error_message",
                    "19": "param10",
                    "2": "parameter10",
                    "7": "param_10"
                },
                "param_11": {
                    "1": "long_param2",
                    "2": "parameter11",
                    "20": "param11",
                    "7": "param_11"
                },
                "param_12": {
                    "1": "long_param3",
                    "2": "parameter12",
                    "20": "param12",
                    "7": "param_12"
                },
                "param_13": {
                    "1": "value4",
                    "2": "parameter13",
                    "20": "param13",
                    "7": "param_13"
                },
                "param_14": {
                    "1": "long_param5",
                    "2": "parameter14",
                    "20": "param14",
                    "7": "param_14"
                },
                "param_2": {
                    "1": "input2",
                    "18": "param2",
                    "3": "param_2",
                    "5": "arg2"
                },
                "param_3": {
                    "1": "input3",
                    "19": "param3",
                    "3": "param_3",
                    "5": "arg3"
                },
                "param_4": {
                    "1": "input4",
                    "19": "param4",
                    "4": "param_4",
                    "5": "arg4"
                },
                "param_5": {
                    "1": "flag4",
                    "19": "param5",
                    "4": "param_5",
                    "5": "arg5"
                },
                "param_6": {
                    "1": "parameter6",
                    "19": "param6",
                    "4": "param_6",
                    "5": "arg6"
                },
                "param_7": {
                    "1": "input7",
                    "19": "param7",
                    "4": "param_7",
                    "5": "arg7"
                },
                "param_8": {
                    "1": "parameter8",
                    "19": "param8",
                    "4": "param_8",
                    "5": "arg8"
                },
                "param_9": {
                    "1": "error_ptr",
                    "17": "error_message",
                    "2": "error_code",
                    "5": "param9"
                }
            },
            "called": [
                "FUN_00102ee0"
            ],
            "calling": [
                "FUN_00102980",
                "FUN_00103130",
                "FUN_00102360"
            ],
            "code": "\nvoid print_error_message_00102f40(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 buffer_length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_array;\n  buffer_length = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_error_message_00102f40_00102ee0(error_message,&buffer_size);\n  return;\n}\n\n",
            "current_name": "print_error_message_00102f40",
            "entrypoint": "0x00102f40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f40": "print_error_message_00102f40",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "local_array",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "buffer_length",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fe0": {
            "additional_data": {
                "FUN_00102fe0": {
                    "1": "print_three_formatted_values",
                    "2": "print_three_values",
                    "26": "print_formatted_values"
                },
                "param_1": {
                    "1": "param_1_width",
                    "10": "label",
                    "2": "header",
                    "4": "title"
                },
                "param_2": {
                    "1": "value_param1",
                    "11": "value_1",
                    "13": "value1"
                },
                "param_3": {
                    "1": "val2",
                    "11": "value_2",
                    "13": "value2"
                },
                "printf": {
                    "1": "print"
                },
                "putchar": {
                    "2": "print_newline"
                }
            },
            "called": [
                "FUN_00102e90",
                "putchar",
                "printf"
            ],
            "calling": [
                "FUN_00103cc0",
                "FUN_00102a90"
            ],
            "code": "\nvoid print_formatted_values_00102fe0(undefined8 label,undefined8 value1,undefined8 value2)\n\n{\n  printf(\"%-*s   \",(ulong)DAT_001072d0,label);\n  print_formatted_value_00102e90(DAT_001072c8,value1);\n  printf(\"   \");\n  print_formatted_value_00102e90(DAT_001072cc,value2);\n  putchar(10);\n  return;\n}\n\n",
            "current_name": "print_formatted_values_00102fe0",
            "entrypoint": "0x00102fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fe0": "print_formatted_values_00102fe0",
                "param_1": "label",
                "param_2": "value1",
                "param_3": "value2",
                "printf": "print_with_padding",
                "putchar": "print_newline"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103070": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103083) */\n/* WARNING: Removing unreachable block (ram,0x0010308f) */\n\nvoid FUNC_00103070(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103070",
            "entrypoint": "0x00103070",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103070": "FUNC_00103070"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001030a0": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001030c4) */\n/* WARNING: Removing unreachable block (ram,0x001030d0) */\n\nvoid FUNC_001030a0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_001030a0",
            "entrypoint": "0x001030a0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001030a0": "FUNC_001030a0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103130": {
            "additional_data": {
                "FUN_00103130": {
                    "1": "extract_and_process_files",
                    "3": "parse_command_line",
                    "6": "parse_command_line_arguments"
                },
                "__ptr": {
                    "1": "temp_buffer",
                    "2": "ptr_byte2",
                    "4": "byte_pointer3",
                    "6": "byte_ptr3"
                },
                "__s": {
                    "1": "file_string",
                    "2": "buffer",
                    "4": "byte_pointer2",
                    "6": "byte_ptr2"
                },
                "__src": {
                    "1": "lines_array",
                    "4": "long_ptr",
                    "6": "long_ptr1"
                },
                "__stream": {
                    "1": "file_stream_ptr",
                    "2": "file_pointer",
                    "22": "file_stream",
                    "6": "file_ptr"
                },
                "bVar2": {
                    "1": "byte_flag1",
                    "10": "byte_var2",
                    "2": "byte_val2",
                    "6": "byte_var"
                },
                "bVar23": {
                    "1": "in_double_quotes",
                    "11": "bool_var3",
                    "2": "bool_var23",
                    "5": "bool_var5"
                },
                "bVar3": {
                    "1": "bool_flag1",
                    "11": "bool_var1",
                    "2": "bool_var2",
                    "3": "escape_flag",
                    "7": "bool_var3"
                },
                "bVar4": {
                    "1": "bool3",
                    "11": "bool_var2",
                    "2": "bool_var3",
                    "3": "single_quote_flag",
                    "7": "bool_var4"
                },
                "bVar6": {
                    "1": "temp_byte",
                    "2": "current_char",
                    "3": "byte_var1",
                    "4": "byte_var3",
                    "6": "byte_var6",
                    "7": "byte_var2"
                },
                "cVar7": {
                    "1": "bfd_set_default_target_result",
                    "2": "temp_char",
                    "6": "char_var7",
                    "8": "char_var1"
                },
                "iVar21": {
                    "1": "int1",
                    "2": "i_var1",
                    "3": "index2"
                },
                "iVar22": {
                    "1": "loop_index",
                    "2": "i_var2",
                    "3": "index3"
                },
                "iVar8": {
                    "1": "loop_index",
                    "14": "index",
                    "2": "counter",
                    "4": "index_var"
                },
                "lVar12": {
                    "1": "num_tokens",
                    "10": "long_var1",
                    "2": "long_var12",
                    "6": "long_var"
                },
                "lVar19": {
                    "1": "current_value",
                    "16": "long_var2",
                    "2": "long_var19"
                },
                "local_108": {
                    "1": "local_var_3",
                    "11": "local_var3",
                    "2": "local_var108",
                    "6": "local_size"
                },
                "local_10c": {
                    "1": "index2",
                    "11": "local_var2",
                    "2": "local_int2"
                },
                "local_110": {
                    "1": "local_index_1",
                    "11": "local_var1",
                    "2": "local_index1"
                },
                "local_c8": {
                    "1": "stat_info",
                    "2": "local_var4",
                    "4": "stat_var",
                    "5": "local_stat",
                    "6": "stat_struct"
                },
                "param_1": {
                    "1": "num_args",
                    "15": "argc",
                    "2": "input_count",
                    "3": "num_files",
                    "7": "num_params"
                },
                "param_2": {
                    "1": "arg_ptr",
                    "15": "argv",
                    "2": "input_array",
                    "4": "param_array",
                    "5": "file_paths"
                },
                "pbVar1": {
                    "1": "byte_value",
                    "2": "ptr1",
                    "3": "current_byte",
                    "4": "byte_pointer1",
                    "5": "ptr_byte1",
                    "8": "byte_ptr1"
                },
                "pbVar18": {
                    "1": "file_char_pointer",
                    "2": "ptr_byte3",
                    "4": "byte_ptr2",
                    "6": "byte_ptr4"
                },
                "pbVar20": {
                    "1": "byte_ptr4",
                    "2": "ptr_byte4",
                    "4": "byte_pointer5",
                    "6": "byte_ptr5"
                },
                "pcVar10": {
                    "1": "str_var2",
                    "3": "ptr_char2",
                    "4": "char_pointer2",
                    "9": "char_ptr2"
                },
                "pcVar17": {
                    "1": "format_string",
                    "2": "string_ptr1",
                    "3": "char_pointer3",
                    "4": "char_ptr3"
                },
                "pcVar5": {
                    "1": "filename",
                    "2": "char_pointer1",
                    "3": "char_pointer",
                    "4": "char_ptr",
                    "8": "char_ptr1"
                },
                "plVar13": {
                    "1": "file_names_pointer",
                    "2": "param_ptr",
                    "3": "param_array_ptr"
                },
                "plVar14": {
                    "1": "param_2_i",
                    "2": "result_ptr",
                    "3": "long_ptr2"
                },
                "sVar11": {
                    "1": "size_var11",
                    "11": "size",
                    "2": "size_var",
                    "6": "file_size"
                },
                "uVar15": {
                    "1": "bit_flag",
                    "2": "ulong_val",
                    "3": "formatted_number",
                    "7": "ulong_var1",
                    "9": "ulong_var"
                },
                "uVar16": {
                    "1": "result2",
                    "2": "undefined8_var1",
                    "3": "undefined_var2",
                    "6": "formatted_string"
                },
                "uVar9": {
                    "1": "bfd_init_result",
                    "10": "return_value",
                    "2": "undefined_var9",
                    "3": "return_val",
                    "9": "result"
                },
                "unaff_RBP": {
                    "1": "stack_pointer",
                    "2": "unaff_rbp",
                    "3": "undefined_pointer",
                    "4": "unaffected_rbp"
                }
            },
            "called": [
                "FUN_00102db0",
                "memcpy",
                "FUN_00102f40",
                "fprintf",
                "fseek",
                "free",
                "strlen",
                "textdomain",
                "dcgettext",
                "getopt_long",
                "strtol",
                "bindtextdomain",
                "xstrdup",
                "bfd_set_error_program_name",
                "fopen",
                "putc",
                "FUN_00102980",
                "bfd_errmsg",
                "stat",
                "bfd_get_error",
                "bfd_init",
                "FUN_0010281b",
                "memmove",
                "setlocale",
                "xexit",
                "xmalloc",
                "fwrite",
                "fclose",
                "ftell",
                "xrealloc",
                "xmalloc_set_program_name",
                "FUN_00102e90",
                "ferror",
                "bfd_set_default_target",
                "fread",
                "printf",
                "exit"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nundefined4 parse_command_line_arguments_00103130(int argc,long *argv)\n\n{\n  byte *byte_ptr1;\n  byte byte_var2;\n  bool bool_var1;\n  bool bool_var2;\n  char *char_ptr1;\n  byte byte_var2;\n  char char_var;\n  int index;\n  undefined4 return_value;\n  FILE *file_stream;\n  byte *byte_ptr2;\n  char *char_ptr2;\n  size_t size;\n  byte *byte_ptr3;\n  long *long_ptr1;\n  long long_var1;\n  long *file_paths_ptr;\n  long *long_ptr2;\n  ulong ulong_var;\n  undefined8 formatted_string;\n  char *error_message;\n  byte *byte_ptr4;\n  undefined **unaffected_rbp;\n  long long_var2;\n  byte *byte_ptr5;\n  int index_var2;\n  int index_var3;\n  bool bool_var3;\n  int local_var1;\n  int local_var2;\n  size_t local_var3;\n  stat stat_struct;\n  \n  setlocale(5,\"\");\n  error_message = \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00107350 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00107350);\n  file_paths_ptr = argv;\n  if (1 < argc) {\n    local_var2 = 2000;\n    local_var1 = 0;\n    index = 1;\n    do {\n      while( true ) {\n        index_var3 = index;\n        unaffected_rbp = (undefined **)(long)index_var3;\n        if (*(char *)file_paths_ptr[(long)unaffected_rbp] == '@') break;\nLAB_001035a0:\n        if (argc <= index_var3 + 1) goto LAB_00103612;\nLAB_001035aa:\n        index = index_var3 + 1;\n        local_var1 = index_var3;\n      }\n      local_var2 = local_var2 + -1;\n      if (local_var2 == 0) goto LAB_001039c5;\n      error_message = (char *)file_paths_ptr[(long)unaffected_rbp] + 1;\n      index = stat(error_message,&stat_struct);\n      if (index < 0) goto LAB_001035a0;\n      if ((stat_struct.st_mode & 0xf000) == 0x4000) {\n        long_var2 = *file_paths_ptr;\n        error_message = \"%s: error: @-file refers to a directory\\n\";\n        do {\n          fprintf(_stderr,error_message,long_var2);\n          xexit(1);\nLAB_001039c5:\n          long_var2 = *file_paths_ptr;\n          error_message = \"%s: error: too many @-files encountered\\n\";\n        } while( true );\n      }\n      file_stream = fopen(error_message,\"r\");\n      if (file_stream == (FILE *)0x0) goto LAB_001035a0;\n      index = fseek(file_stream,0,2);\n      if (((index == -1) ||\n          (error_message = (char *)ftell(file_stream), error_message == (char *)0xffffffffffffffff)) ||\n         (index = fseek(file_stream,0,0), index == -1)) {\nLAB_00103600:\n        fclose(file_stream);\n        if (index_var3 + 1 < argc) goto LAB_001035aa;\n        break;\n      }\n      byte_ptr2 = (byte *)xmalloc(error_message + 1);\n      char_ptr2 = (char *)fread(byte_ptr2,1,(size_t)error_message,file_stream);\n      if ((error_message != char_ptr2) && (index = ferror(file_stream), index != 0)) {\n        free(byte_ptr2);\n        goto LAB_00103600;\n      }\n      byte_ptr2[(long)char_ptr2] = 0;\n      byte_var2 = *byte_ptr2;\n      byte_ptr4 = byte_ptr2;\n      if (byte_var2 != 0) {\nLAB_00103300:\n        if (((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) goto LAB_001032f0;\n        size = strlen((char *)byte_ptr2);\n        byte_ptr3 = (byte *)xmalloc(size + 1);\n        index = 0;\n        bool_var3 = false;\n        bool_var2 = false;\n        long_var2 = 0;\n        long_ptr1 = (long *)0x0;\n        bool_var1 = false;\n        byte_ptr4 = byte_ptr2;\n        do {\n          while (((&_sch_istable)[(ulong)*byte_ptr4 * 2] & 0x40) != 0) {\n            byte_ptr4 = byte_ptr4 + 1;\n          }\n          if ((index == 0) || (long_ptr2 = long_ptr1 + long_var2, index + -1 <= (int)long_var2)) {\n            if (long_ptr1 == (long *)0x0) {\n              index = 8;\n              long_ptr1 = (long *)xmalloc(0x40);\n              long_ptr2 = long_ptr1 + long_var2;\n              *long_ptr2 = 0;\n            }\n            else {\n              index = index * 2;\n              long_ptr1 = (long *)xrealloc(long_ptr1,(long)index << 3);\n              long_ptr2 = long_ptr1 + long_var2;\n              *long_ptr2 = 0;\n            }\n          }\n          byte_var2 = *byte_ptr4;\n          byte_ptr5 = byte_ptr3;\n          while (byte_var2 != 0) {\n            while( true ) {\n              if ((((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) &&\n                 (!(bool)(bool_var2 | bool_var1 | bool_var3))) {\n                bool_var1 = false;\n                bool_var3 = false;\n                bool_var2 = false;\n                goto LAB_00103410;\n              }\n              if (!bool_var1) break;\n              byte_ptr4 = byte_ptr4 + 1;\n              *byte_ptr5 = byte_var2;\n              byte_ptr5 = byte_ptr5 + 1;\n              bool_var1 = false;\n              byte_var2 = *byte_ptr4;\n              if (byte_var2 == 0) goto LAB_00103410;\n            }\n            if (byte_var2 == 0x5c) {\n              bool_var1 = true;\n            }\n            else if (bool_var2) {\n              if (byte_var2 == 0x27) {\n                bool_var2 = false;\n              }\n              else {\nLAB_00103585:\n                *byte_ptr5 = byte_var2;\n                byte_ptr5 = byte_ptr5 + 1;\n              }\n            }\n            else if (bool_var3) {\n              if (byte_var2 != 0x22) goto LAB_00103585;\n              bool_var3 = false;\n            }\n            else if (byte_var2 == 0x27) {\n              bool_var2 = true;\n            }\n            else {\n              if (byte_var2 != 0x22) goto LAB_00103585;\n              bool_var3 = true;\n            }\n            byte_ptr1 = byte_ptr4 + 1;\n            byte_ptr4 = byte_ptr4 + 1;\n            byte_var2 = *byte_ptr1;\n          }\nLAB_00103410:\n          *byte_ptr5 = 0;\n          long_var1 = xstrdup(byte_ptr3);\n          *long_ptr2 = long_var1;\n          long_ptr1[long_var2 + 1] = 0;\n          byte_var2 = *byte_ptr4;\n          byte_var2 = (&_sch_istable)[(ulong)byte_var2 * 2];\n          while ((byte_var2 & 0x40) != 0) {\n            byte_var2 = byte_ptr4[1];\n            byte_ptr4 = byte_ptr4 + 1;\n            byte_var2 = (&_sch_istable)[(ulong)byte_var2 * 2];\n          }\n          long_var2 = long_var2 + 1;\n        } while (byte_var2 != 0);\n        free(byte_ptr3);\n        long_ptr2 = file_paths_ptr;\n        if (argv == file_paths_ptr) goto LAB_0010372c;\n        goto LAB_001034ad;\n      }\nLAB_0010370f:\n      long_ptr1 = (long *)xmalloc();\n      *long_ptr1 = 0;\n      if (argv == file_paths_ptr) {\nLAB_0010372c:\n        if (*file_paths_ptr == 0) {\n          index = 0;\n        }\n        else {\n          long_var2 = 1;\n          do {\n            index = (int)long_var2;\n            long_ptr2 = file_paths_ptr + long_var2;\n            long_var2 = long_var2 + 1;\n          } while (*long_ptr2 != 0);\n        }\n        long_var1 = 0;\n        long_ptr2 = (long *)xmalloc((long)(index + 1) << 3);\n        long_var2 = *file_paths_ptr;\n        while (long_var2 != 0) {\n          formatted_string = xstrdup();\n          *(undefined8 *)((long)long_ptr2 + long_var1) = formatted_string;\n          long_var1 = long_var1 + 8;\n          long_var2 = *(long *)((long)file_paths_ptr + long_var1);\n        }\n        *(undefined8 *)((long)long_ptr2 + long_var1) = 0;\nLAB_001034ad:\n        file_paths_ptr = long_ptr2;\n        if (*long_ptr1 == 0) goto LAB_001038cc;\n        error_message = (char *)0x0;\n        do {\n          error_message = error_message + 1;\n        } while (long_ptr1[(long)error_message] != 0);\n        local_var3 = (long)error_message * 8;\n      }\n      else {\nLAB_001038cc:\n        error_message = (char *)0x0;\n        local_var3 = 0;\n      }\n      free((void *)file_paths_ptr[(long)unaffected_rbp]);\n      file_paths_ptr = (long *)xrealloc(file_paths_ptr,(long)(error_message + (long)argc + 1) * 8);\n      index_var2 = argc + -1 + (int)error_message;\n      memmove(file_paths_ptr + (long)(undefined **)((long)unaffected_rbp + (long)error_message),\n              file_paths_ptr + (long)((long)unaffected_rbp + 1),(long)(argc - index_var3) << 3);\n      memcpy(file_paths_ptr + (long)unaffected_rbp,long_ptr1,local_var3);\n      free(long_ptr1);\n      free(byte_ptr2);\n      fclose(file_stream);\n      unaffected_rbp = (undefined **)((long)unaffected_rbp + (long)error_message);\n      index = local_var1 + 1;\n      argc = index_var2;\n    } while (local_var1 + 1 < index_var2);\n  }\nLAB_00103612:\n  index = bfd_init();\n  if (index != 0x118) goto LAB_001039f8;\n  char_ptr2 = \"x86_64-pc-linux-gnu\";\n  unaffected_rbp = &PTR_s_common_001071c0;\n  error_message = \"ABGHhVvdfotx\";\n  char_var = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n  if (char_var == '\\0') {\n    return_value = bfd_get_error();\n    error_message = (char *)bfd_errmsg(return_value);\n    formatted_string = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    ulong_var = print_formatted_number_00102db0(formatted_string,\"x86_64-pc-linux-gnu\",error_message);\n    goto LAB_00103b74;\n  }\n  do {\n    while (index = getopt_long(argc,file_paths_ptr,error_message,unaffected_rbp,0), index != -1) {\n      char_ptr1 = char_ptr2;\n      if (index < 0x79) {\n        if (index < 0x3f) {\nswitchD_001037fd_caseD_40:\n          index = getopt_long(argc,file_paths_ptr,error_message,unaffected_rbp,0);\n          if (index == -1) break;\n          if (0x78 < index) goto LAB_00103937;\n          if (0x3e < index) {\n            switch(index) {\n            case 0x3f:\n            case 0x48:\n            case 0x68:\n              goto switchD_001037fd_caseD_3f;\n            case 0x41:\n              goto switchD_001037fd_caseD_41;\n            case 0x42:\n              goto switchD_001037fd_caseD_42;\n            case 0x47:\n              goto switchD_001037fd_caseD_47;\n            case 0x56:\n            case 0x76:\n              goto switchD_001037fd_caseD_56;\n            case 100:\n              goto switchD_001037fd_caseD_64;\n            case 0x6f:\n              goto switchD_001037fd_caseD_6f;\n            case 0x74:\n              goto switchD_001037fd_caseD_74;\n            case 0x78:\n              goto switchD_001037fd_caseD_78;\n            }\n          }\n          do {\n            do {\n              while( true ) {\n                index = getopt_long(argc,file_paths_ptr,error_message,unaffected_rbp,0);\n                if (index == -1) goto LAB_00103664;\n                if (0x78 < index) break;\n                if (0x3e < index) {\n                  switch(index) {\n                  case 0x3f:\n                  case 0x48:\n                  case 0x68:\n                    goto switchD_001037fd_caseD_3f;\n                  case 0x41:\n                    goto switchD_001037fd_caseD_41;\n                  case 0x42:\n                    goto switchD_001037fd_caseD_42;\n                  case 0x47:\n                    goto switchD_001037fd_caseD_47;\n                  case 0x56:\n                  case 0x76:\n                    goto switchD_001037fd_caseD_56;\n                  case 100:\n                    goto switchD_001037fd_caseD_64;\n                  case 0x6f:\n                    goto switchD_001037fd_caseD_6f;\n                  case 0x74:\n                    goto switchD_001037fd_caseD_74;\n                  case 0x78:\n                    goto switchD_001037fd_caseD_78;\n                  }\n                }\n              }\nLAB_00103937:\n              if (index == 0xca) goto LAB_001039d1;\n            } while (0xca < index);\n            if (index == 200) goto LAB_00103869;\n          } while (index != 0xc9);\n          goto LAB_00103a15;\n        }\n        switch(index) {\n        case 0x3f:\n        case 0x48:\n        case 0x68:\n          goto switchD_001037fd_caseD_3f;\n        default:\n          goto switchD_001037fd_caseD_40;\n        case 0x41:\n          goto switchD_001037fd_caseD_41;\n        case 0x42:\nswitchD_001037fd_caseD_42:\n          DAT_00107348 = 0;\n          break;\n        case 0x47:\nswitchD_001037fd_caseD_47:\n          DAT_00107348 = 2;\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_001037fd_caseD_56:\n          _DAT_00107338 = 1;\n          break;\n        case 100:\n          goto switchD_001037fd_caseD_64;\n        case 0x6f:\n          goto switchD_001037fd_caseD_6f;\n        case 0x74:\nswitchD_001037fd_caseD_74:\n          _DAT_00107334 = 1;\n          break;\n        case 0x78:\n          goto switchD_001037fd_caseD_78;\n        }\n      }\n      else if (index == 0xca) {\nLAB_001039d1:\n        DAT_00107340 = _optarg;\n      }\n      else {\n        if (0xca < index) goto switchD_001037fd_caseD_40;\n        if (index != 200) {\n          if (index != 0xc9) goto switchD_001037fd_caseD_40;\n          goto LAB_00103a15;\n        }\nLAB_00103869:\n        char_ptr2 = _optarg;\n        if (0x31 < (byte)(*_optarg + 0xbeU)) goto LAB_00103bc8;\n        ulong_var = 1L << (*_optarg + 0xbeU & 0x3f);\n        if ((ulong_var & 0x2000000020) != 0) goto switchD_001037fd_caseD_47;\n        if ((ulong_var & 0x2000000020000) == 0) {\nLAB_00103b74:\n          if ((ulong_var & 0x100000001) == 0) goto LAB_00103bc8;\n          goto switchD_001037fd_caseD_42;\n        }\nswitchD_001037fd_caseD_41:\n        DAT_00107348 = 1;\n      }\n    }\nLAB_00103664:\n    if (_DAT_00107338 != 0) {\n      printf(\"GNU %s %s\\n\",&DAT_00104067,\"(GNU Binutils for Debian) 2.40\");\n      error_message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(error_message);\n      error_message = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(error_message);\n                    \n      exit(0);\n    }\n    if (_DAT_00107330 == 0) {\n      index = _optind - argc;\n      if (_optind == argc) {\n        check_file_00102980(\"a.out\");\n      }\n      else {\n        while (long_var2 = (long)_optind, SBORROW4(_optind,argc) != index < 0) {\n          _optind = _optind + 1;\n          check_file_00102980(file_paths_ptr[long_var2]);\n          index = _optind - argc;\n        }\n      }\n      if ((_DAT_00107334 != 0) && ((DAT_00107348 & 0xfffffffd) == 0)) {\n        long_var2 = DAT_00107320 + DAT_00107328 + DAT_00107318;\n        index = (-(uint)(DAT_00107348 == 0) & 0xfffffffd) + 10;\n        bool_var3 = DAT_00107348 == 0;\n        print_formatted_value_00102e90(index);\n        index_var3 = (int)(char)((-bool_var3 & 0xe9U) + 0x20);\n        putc(index_var3,_stdout);\n        print_formatted_value_00102e90(index,DAT_00107320);\n        putc(index_var3,_stdout);\n        print_formatted_value_00102e90(index,DAT_00107318);\n        putc(index_var3,_stdout);\n        if (DAT_00107348 == 0) {\n          error_message = \"%7lu\\t%7lx\";\n          if (DAT_0010733c == 1) {\n            error_message = \"%7lo\\t%7lx\";\n          }\n          printf(error_message,long_var2,long_var2);\n        }\n        else {\n          print_formatted_value_00102e90(index,long_var2);\n        }\n        putc(index_var3,_stdout);\n        fwrite(\"(TOTALS)\\n\",1,9,_stdout);\n      }\n      return DAT_00107314;\n    }\n    print_section_sizes_0010281b(_stdout,0);\nLAB_001039f8:\n    formatted_string = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    print_formatted_number_00102db0(formatted_string);\nLAB_00103a15:\n    long_var2 = strtol(_optarg,(char **)0x0,10);\n    char_ptr2 = _optarg;\n    index = (int)long_var2;\n    char_ptr1 = &optarg;\n    if (index == 10) {\nswitchD_001037fd_caseD_64:\n      char_ptr2 = char_ptr1;\n      DAT_0010733c = 0;\n    }\n    else if (index == 0x10) {\nswitchD_001037fd_caseD_78:\n      char_ptr2 = char_ptr1;\n      DAT_0010733c = 2;\n    }\n    else {\n      if (index != 8) {\n        formatted_string = dcgettext(0,\"Invalid radix: %s\\n\",5);\n        error_message = &optarg;\n        do {\n          print_error_message_00102f40(formatted_string,char_ptr2);\n          char_ptr2 = error_message;\nswitchD_001037fd_caseD_3f:\n          print_section_sizes_0010281b(_stderr,1);\nLAB_00103bc8:\n          formatted_string = dcgettext(0,\"invalid argument to --format: %s\",5);\n          error_message = char_ptr2;\n        } while( true );\n      }\nswitchD_001037fd_caseD_6f:\n      char_ptr2 = char_ptr1;\n      DAT_0010733c = 1;\n    }\n  } while( true );\nLAB_001032f0:\n  byte_var2 = byte_ptr4[1];\n  byte_ptr4 = byte_ptr4 + 1;\n  if (byte_var2 == 0) goto LAB_0010370f;\n  goto LAB_00103300;\n}\n\n",
            "current_name": "parse_command_line_arguments_00103130",
            "entrypoint": "0x00103130",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103130": "parse_command_line_arguments_00103130",
                "__ptr": "byte_ptr3",
                "__s": "byte_ptr2",
                "__src": "long_ptr1",
                "__stream": "file_stream",
                "bVar2": "byte_var2",
                "bVar23": "bool_var3",
                "bVar3": "bool_var1",
                "bVar4": "bool_var2",
                "bVar6": "byte_var2",
                "cVar7": "char_var",
                "iVar21": "index_var2",
                "iVar22": "index_var3",
                "iVar8": "index",
                "lVar12": "long_var1",
                "lVar19": "long_var2",
                "local_108": "local_var3",
                "local_10c": "local_var2",
                "local_110": "local_var1",
                "local_c8": "stat_struct",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_ptr1",
                "pbVar18": "byte_ptr4",
                "pbVar20": "byte_ptr5",
                "pcVar10": "char_ptr2",
                "pcVar17": "error_message",
                "pcVar5": "char_ptr1",
                "plVar13": "file_paths_ptr",
                "plVar14": "long_ptr2",
                "sVar11": "size",
                "uVar15": "ulong_var",
                "uVar16": "formatted_string",
                "uVar9": "return_value",
                "unaff_RBP": "unaffected_rbp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103c50": {
            "additional_data": {
                "DAT_001072d0": {
                    "1": "max_str_length"
                },
                "DAT_001072d8": {
                    "1": "max_argument_value"
                },
                "DAT_001072e0": {
                    "1": "total_string_size"
                },
                "FUN_00103c50": {
                    "1": "analyze_parameters",
                    "16": "update_data",
                    "2": "process_parameters"
                },
                "in_RAX": {
                    "1": "in_rax",
                    "3": "result",
                    "6": "return_value"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "arg1",
                    "3": "input_value",
                    "4": "param1",
                    "5": "data",
                    "8": "input"
                },
                "param_2": {
                    "1": "input_array",
                    "13": "arguments",
                    "2": "arg2",
                    "3": "args",
                    "4": "param2"
                },
                "param_3": {
                    "1": "data",
                    "2": "temp_var1",
                    "3": "unused_param",
                    "4": "arg3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "old_param4",
                    "2": "param_4",
                    "3": "arg4",
                    "4": "param4",
                    "5": "result",
                    "7": "return_value"
                },
                "pcVar1": {
                    "1": "pointer_to_param8",
                    "2": "element",
                    "5": "pointer"
                },
                "sVar2": {
                    "1": "input_length",
                    "2": "str_len",
                    "3": "length",
                    "6": "str_length",
                    "8": "string_length"
                }
            },
            "called": [
                "FUN_001026ea",
                "strlen"
            ],
            "calling": [
                "FUN_00102a90"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nundefined8 update_data_00103c50(undefined8 input,char **arguments,undefined8 param3,undefined8 return_value)\n\n{\n  char *pointer;\n  undefined8 return_value;\n  size_t string_length;\n  \n  if (*(uint *)((long)arguments + 0x24) != 0) {\n    if (((arguments != (char **)0x108370) && ((*(uint *)((long)arguments + 0x24) & 0x1000) == 0)) &&\n       (arguments != (char **)0x108258)) {\n      pointer = arguments[8];\n      string_length = strlen(*arguments);\n      if (DAT_001072d0 < (int)string_length) {\n        DAT_001072d0 = (int)string_length;\n      }\n      DAT_001072e0 = DAT_001072e0 + (long)pointer;\n      if (DAT_001072d8 < arguments[6]) {\n        DAT_001072d8 = arguments[6];\n      }\n    }\n    return return_value;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_data_00103c50",
            "entrypoint": "0x00103c50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103c50": "update_data_00103c50",
                "in_RAX": "return_value",
                "param_1": "input",
                "param_2": "arguments",
                "param_3": "param3",
                "param_4": "return_value",
                "pcVar1": "pointer",
                "sVar2": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103cc0": {
            "additional_data": {
                "(*(uint *)((long)data + 0x24)": {
                    "1": "data_pointer"
                },
                "(*(uint *)((long)data + 0x24) & 0x1000)": {
                    "1": "flag_check"
                },
                "(*(uint *)((long)param_2 + 0x24) & 0x1000) == 0": {
                    "1": "not_flagged_value"
                },
                "(*param_2 + 0x24)": {
                    "1": "some_value"
                },
                "(long)param_2 + 0x24": {
                    "1": "param2_offset"
                },
                "(param2 != (undefined8 *)0x108258)": {
                    "1": "is_not_other_param"
                },
                "(param2 != (undefined8 *)0x108370)": {
                    "1": "is_valid_param"
                },
                "(param2Offset != 0)": {
                    "1": "has_offset"
                },
                "(param2Offset & 0x1000) == 0": {
                    "1": "is_not_modified"
                },
                "(undefined8 *)0x108258": {
                    "1": "non_null_ptr2"
                },
                "(undefined8 *)0x108370": {
                    "1": "non_null_ptr1"
                },
                "*(param_2 + 6)": {
                    "1": "second_value"
                },
                "*(param_2 + 8)": {
                    "1": "third_value"
                },
                "*(uint *)((long)param_2 + 0x24)": {
                    "1": "condition_check",
                    "2": "flag",
                    "3": "value"
                },
                "*param_1": {
                    "1": "param1"
                },
                "*param_2": {
                    "1": "data",
                    "3": "data_ptr"
                },
                "0x1000": {
                    "1": "check_flag"
                },
                "0x108258": {
                    "1": "exclude_flag_2"
                },
                "0x108370": {
                    "1": "exclude_flag_1"
                },
                "0x24": {
                    "1": "flag"
                },
                "DAT_001072e0": {
                    "1": "accumulator",
                    "2": "global_sum"
                },
                "FUN_00103cc0": {
                    "1": "update_and_print_values",
                    "25": "process_data",
                    "3": "print_formatted_values"
                },
                "param2[6]": {
                    "1": "value2"
                },
                "param2[8]": {
                    "1": "value1"
                },
                "param_1": {
                    "1": "info",
                    "2": "undefined_param",
                    "3": "unused_param",
                    "4": "param",
                    "5": "arg1"
                },
                "param_2": {
                    "1": "value_array",
                    "12": "data_array",
                    "2": "data_ptr",
                    "3": "arg2",
                    "5": "data"
                },
                "param_2 != (undefined8 *)0x108258": {
                    "1": "not_other_invalid_address"
                },
                "param_2 != (undefined8 *)0x108370": {
                    "1": "param2_not_equal"
                },
                "param_2 + 0x24": {
                    "1": "param2_offset"
                },
                "param_2[6]": {
                    "1": "param2_index6",
                    "7": "value2"
                },
                "param_2[8]": {
                    "1": "param2_index8",
                    "7": "value1"
                },
                "print_formatted_values_00102fe0": {
                    "1": "print_formatted_data",
                    "11": "print_formatted_values"
                }
            },
            "called": [
                "FUN_0010274a",
                "FUN_00102fe0"
            ],
            "calling": [
                "FUN_00102a90"
            ],
            "code": "\nvoid process_data_00103cc0(undefined8 arg1,undefined8 *data_array)\n\n{\n  if ((((*(uint *)((long)data_array + 0x24) != 0) && (data_array != (undefined8 *)0x108370)) &&\n      ((*(uint *)((long)data_array + 0x24) & 0x1000) == 0)) && (data_array != (undefined8 *)0x108258)) {\n    DAT_001072e0 = DAT_001072e0 + value1;\n    print_formatted_values(*data_array,value1,value2);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00103cc0",
            "entrypoint": "0x00103cc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103cc0": "process_data_00103cc0",
                "param_1": "arg1",
                "param_2": "data_array",
                "param_2[6]": "value2",
                "param_2[8]": "value1",
                "print_formatted_values_00102fe0": "print_formatted_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103d20": {
            "additional_data": {
                "FUN_00103d20": {
                    "24": "print_error_message",
                    "7": "print_error"
                },
                "_stderr": {
                    "1": "stderr",
                    "2": "standard_error"
                },
                "_stdout": {
                    "1": "stdout",
                    "2": "standard_output"
                },
                "iVar1": {
                    "1": "error_type",
                    "16": "error",
                    "2": "error_value",
                    "4": "error_status",
                    "7": "error_code"
                },
                "in_R10": {
                    "1": "unknown_error",
                    "2": "unused_variable",
                    "7": "additional_info"
                },
                "param_1": {
                    "1": "error_msg",
                    "15": "error_message",
                    "4": "error_type",
                    "5": "error_description"
                },
                "uVar2": {
                    "1": "error_msg",
                    "15": "error_message",
                    "3": "error_message_text",
                    "7": "error_string"
                }
            },
            "called": [
                "bfd_errmsg",
                "FUN_0010274b",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_001024d2",
                "FUN_001023b6",
                "FUN_00102a90"
            ],
            "code": "\n\n\nvoid print_error_message_00103d20(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_message != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_00107350,error_message,error_message,additional_info);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_00107350,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_00103d20",
            "entrypoint": "0x00103d20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103d20": "print_error_message_00103d20",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "iVar1": "error",
                "in_R10": "additional_info",
                "param_1": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00103d80",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "FUN_00103070",
                "__cxa_finalize"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001072c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_001071a8);\n  FUNC_00103070();\n  DAT_001072c0 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x001030e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_001030a0"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_001030a0();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00103120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00102350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00102360"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00102980",
                "FUN_00102a40"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "called": [
                "bfd_check_format_matches"
            ],
            "calling": [
                "FUN_00102a40",
                "FUN_001024d2"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "bfd_check_format_matches",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_001023b6"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_core_file_failing_command": {
            "called": [
                "bfd_core_file_failing_command"
            ],
            "calling": [
                "FUN_001024d2"
            ],
            "code": "\nvoid bfd_core_file_failing_command(void)\n\n{\n  bfd_core_file_failing_command();\n  return;\n}\n\n",
            "current_name": "bfd_core_file_failing_command",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00103130",
                "FUN_00103d20"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00103130",
                "FUN_00103d20",
                "FUN_001024d2",
                "FUN_001023b6"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_map_over_sections": {
            "called": [
                "bfd_map_over_sections"
            ],
            "calling": [
                "FUN_00102a90"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "bfd_map_over_sections",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_00102980"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "calling": [
                "FUN_001023b6"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "bfd_openr_next_archived_file",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error": {
            "called": [
                "bfd_set_error"
            ],
            "calling": [
                "FUN_001023b6"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "bfd_set_error",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_0010281b"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_0010281b",
                "FUN_00102980",
                "FUN_00103130",
                "FUN_0010274b",
                "FUN_0010278c",
                "FUN_00102360"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_00103130",
                "__libc_start_main"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(parse_command_line_arguments_00103130,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00103040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_0010281b",
                "FUN_00103130"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_0010274b",
                "FUN_0010278c",
                "FUN_00102ee0"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_0010281b",
                "FUN_00103130",
                "FUN_0010274b",
                "FUN_0010278c",
                "FUN_00102ee0"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_0010281b",
                "FUN_0010278c"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_00102a90"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010281b",
                "FUN_00103130",
                "FUN_00102a90",
                "FUN_0010278c"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00103130",
                "FUN_001024d2"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00103130",
                "FUN_00102710",
                "FUN_001024d2",
                "FUN_00102a90",
                "FUN_0010259c",
                "FUN_00102e90",
                "FUN_00102fe0"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_00103130",
                "FUN_00102a90",
                "FUN_00102ee0"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putchar": {
            "called": [
                "putchar"
            ],
            "calling": [
                "FUN_00102a40",
                "FUN_00102fe0"
            ],
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "current_name": "putchar",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "puts": {
            "called": [
                "puts"
            ],
            "calling": [
                "FUN_001024d2",
                "FUN_00102a90"
            ],
            "code": "\n\n\nint puts(char *__s)\n\n{\n  int iVar1;\n  \n  iVar1 = puts(__s);\n  return iVar1;\n}\n\n",
            "current_name": "puts",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sprintf": {
            "called": [
                "sprintf"
            ],
            "calling": [
                "FUN_00102e50",
                "FUN_00102710",
                "FUN_00102e90"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "sprintf",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_00102980",
                "FUN_00103130"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00102360"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00102e50",
                "FUN_00103130",
                "FUN_00103c50"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtol": {
            "called": [
                "strtol"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "strtol",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_00102ee0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00102db0",
                "FUN_00103130",
                "FUN_00102a90"
            ],
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00103130",
                "FUN_00102a90"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_00103130"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_0010259c",
            "FUN_001026ea",
            "FUN_001026f6",
            "FUN_00102710",
            "FUN_0010274b",
            "FUN_0010278c",
            "FUN_0010281b",
            "FUN_00102d70",
            "FUN_00102e50",
            "FUN_00102e90",
            "FUN_00102ee0",
            "FUN_00103c50",
            "FUN_00103d20"
        ],
        [
            "FUN_00102db0",
            "FUN_00102f40",
            "FUN_00102fe0"
        ],
        [
            "FUN_00102360",
            "FUN_00103cc0"
        ],
        [
            "FUN_00102a90"
        ],
        [
            "FUN_001024d2",
            "FUN_00102a40"
        ],
        [
            "FUN_001023b6"
        ],
        [
            "FUN_00102980"
        ],
        [
            "FUN_00103130"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 108112
}