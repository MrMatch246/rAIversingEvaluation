{
    "functions": {
        "_DT_INIT": {
            "entrypoint": "0x00102000",
            "current_name": "_DT_INIT",
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "__gmon_start__"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102020": {
            "entrypoint": "0x00102020",
            "current_name": "execute_indirect_jump_00102020",
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "undefined": "function_pointer",
                "code": "function_pointer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102020": {
                    "17": "execute_indirect_jump",
                    "1": "execute_function",
                    "5": "execute_indirect_call",
                    "2": "call_indirect_function"
                },
                "undefined": {
                    "1": "indirect_jump_target",
                    "2": "function_pointer"
                },
                "code": {
                    "4": "function_pointer",
                    "1": "function_to_execute"
                },
                "<original_function_name>": {
                    "1": "call_indirect_function"
                },
                "<original_variable_name_1>": {
                    "1": "indirect_function_address"
                },
                "PTR_FUN_00102020": {
                    "1": "function_pointer"
                },
                "result_1": {
                    "1": "new_name_1"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<no_change>": {
                    "1": "<no_change>"
                },
                "PTR_undefined": {
                    "1": "function_pointer"
                },
                "PTR_00102020": {
                    "1": "jump_code_pointer"
                },
                "PTR_00100000": {
                    "1": "function_pointer"
                },
                "DAT_00100008": {
                    "1": "undefined_address"
                },
                "PTR_0x0": {
                    "1": "function_pointer"
                },
                "(undefined *)0x0": {
                    "1": "memory_address"
                }
            }
        },
        "cplus_demangle_name_to_style": {
            "entrypoint": "0x00102030",
            "current_name": "cplus_demangle_name_to_style",
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "free": {
            "entrypoint": "0x00102040",
            "current_name": "free",
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104d5b",
                "FUN_00104670",
                "FUN_00103238",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_00105110",
                "FUN_00103b5d",
                "FUN_001047d0",
                "FUN_0010268b",
                "FUN_00103729"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "putchar": {
            "entrypoint": "0x00102050",
            "current_name": "putchar",
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001035a2",
                "FUN_001064b0"
            ],
            "called": [
                "putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "reconcat": {
            "entrypoint": "0x00102060",
            "current_name": "reconcat",
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001047d0"
            ],
            "called": [
                "reconcat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "abort": {
            "entrypoint": "0x00102070",
            "current_name": "abort",
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102fd2"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "__errno_location": {
            "entrypoint": "0x00102080",
            "current_name": "__errno_location",
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001043d0",
                "FUN_00103729"
            ],
            "called": [
                "__errno_location"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_plugin_set_plugin": {
            "entrypoint": "0x00102090",
            "current_name": "bfd_plugin_set_plugin",
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "ferror": {
            "entrypoint": "0x001020a0",
            "current_name": "ferror",
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "ferror"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "qsort": {
            "entrypoint": "0x001020b0",
            "current_name": "qsort",
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104d5b"
            ],
            "called": [
                "qsort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "isatty": {
            "entrypoint": "0x001020c0",
            "current_name": "isatty",
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010268b"
            ],
            "called": [
                "isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "entrypoint": "0x001020d0",
            "current_name": "bfd_set_default_target",
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "bfd_set_default_target"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fread": {
            "entrypoint": "0x001020e0",
            "current_name": "fread",
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "fread"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_is_undefined_symclass": {
            "entrypoint": "0x001020f0",
            "current_name": "bfd_is_undefined_symclass",
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001064b0",
                "FUN_001053c0",
                "FUN_00103729"
            ],
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "cplus_demangle_set_style": {
            "entrypoint": "0x00102100",
            "current_name": "cplus_demangle_set_style",
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "cplus_demangle_set_style"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "textdomain": {
            "entrypoint": "0x00102110",
            "current_name": "textdomain",
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "textdomain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_openr": {
            "entrypoint": "0x00102120",
            "current_name": "bfd_openr",
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "bfd_openr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fclose": {
            "entrypoint": "0x00102130",
            "current_name": "fclose",
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "fclose"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bindtextdomain": {
            "entrypoint": "0x00102140",
            "current_name": "bindtextdomain",
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "bindtextdomain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "dcgettext": {
            "entrypoint": "0x00102150",
            "current_name": "dcgettext",
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_001043d0",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_0010370a",
                "FUN_00103b5d",
                "FUN_001053c0",
                "FUN_00102f19",
                "FUN_00104370",
                "FUN_00103abf",
                "FUN_00103a78",
                "FUN_00102450",
                "FUN_0010249f",
                "FUN_00103729"
            ],
            "called": [
                "dcgettext"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strlen": {
            "entrypoint": "0x00102160",
            "current_name": "strlen",
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_00102fd2",
                "FUN_0010268b"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "getopt_long": {
            "entrypoint": "0x00102170",
            "current_name": "getopt_long",
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "getopt_long"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strchr": {
            "entrypoint": "0x00102180",
            "current_name": "strchr",
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102739"
            ],
            "called": [
                "strchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "printf": {
            "entrypoint": "0x00102190",
            "current_name": "printf",
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001035a2",
                "FUN_001036e0",
                "FUN_00103463",
                "FUN_001054d0",
                "FUN_001043d0",
                "FUN_001055f0",
                "FUN_001036a7",
                "FUN_00105110",
                "FUN_00102f7b",
                "FUN_001047d0",
                "FUN_001053c0",
                "FUN_00102739",
                "FUN_00102f19",
                "FUN_001064b0",
                "FUN_0010351b",
                "FUN_00103b2b",
                "FUN_001062d0",
                "FUN_00102670",
                "FUN_00103abf",
                "FUN_00103573",
                "FUN_00103729"
            ],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xrealloc": {
            "entrypoint": "0x001021a0",
            "current_name": "xrealloc",
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104d5b",
                "FUN_001055f0"
            ],
            "called": [
                "xrealloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "concat": {
            "entrypoint": "0x001021b0",
            "current_name": "concat",
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104670",
                "FUN_001025f5"
            ],
            "called": [
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_target_list": {
            "entrypoint": "0x001021c0",
            "current_name": "bfd_target_list",
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103ca0"
            ],
            "called": [
                "bfd_target_list"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_get_error": {
            "entrypoint": "0x001021d0",
            "current_name": "bfd_get_error",
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001048e0",
                "FUN_001043d0",
                "FUN_001055f0",
                "FUN_00106540"
            ],
            "called": [
                "bfd_get_error"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xmalloc": {
            "entrypoint": "0x001021e0",
            "current_name": "xmalloc",
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_001055f0",
                "FUN_00103c00",
                "FUN_00105110",
                "FUN_0010268b"
            ],
            "called": [
                "xmalloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "entrypoint": "0x001021f0",
            "current_name": "xmalloc_set_program_name",
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "xmalloc_set_program_name"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xstrdup": {
            "entrypoint": "0x00102200",
            "current_name": "xstrdup",
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "xstrdup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fputc": {
            "entrypoint": "0x00102210",
            "current_name": "fputc",
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103ca0",
                "FUN_00103b5d"
            ],
            "called": [
                "fputc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_get_arch_size": {
            "entrypoint": "0x00102220",
            "current_name": "bfd_get_arch_size",
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104670"
            ],
            "called": [
                "bfd_get_arch_size"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_init": {
            "entrypoint": "0x00102230",
            "current_name": "bfd_init",
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "bfd_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strcmp": {
            "entrypoint": "0x00102240",
            "current_name": "strcmp",
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104d5b",
                "FUN_00104670",
                "FUN_00103463",
                "FUN_001055f0"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "putc": {
            "entrypoint": "0x00102250",
            "current_name": "putc",
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103463",
                "FUN_001063a0"
            ],
            "called": [
                "putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fprintf": {
            "entrypoint": "0x00102260",
            "current_name": "fprintf",
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001063a0",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_00103b5d",
                "FUN_00102450",
                "FUN_00106540"
            ],
            "called": [
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "ftell": {
            "entrypoint": "0x00102270",
            "current_name": "ftell",
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "ftell"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "stat": {
            "entrypoint": "0x00102280",
            "current_name": "stat",
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001043d0",
                "FUN_001055f0"
            ],
            "called": [
                "stat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "memcpy": {
            "entrypoint": "0x00102290",
            "current_name": "memcpy",
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_plugin_set_program_name": {
            "entrypoint": "0x001022a0",
            "current_name": "bfd_plugin_set_program_name",
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fflush": {
            "entrypoint": "0x001022b0",
            "current_name": "fflush",
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001063a0",
                "FUN_00103b5d",
                "FUN_00106540"
            ],
            "called": [
                "fflush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strcoll": {
            "entrypoint": "0x001022c0",
            "current_name": "strcoll",
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104fa0"
            ],
            "called": [
                "strcoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fseek": {
            "entrypoint": "0x001022d0",
            "current_name": "fseek",
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "fseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "asprintf": {
            "entrypoint": "0x001022e0",
            "current_name": "asprintf",
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103729"
            ],
            "called": [
                "asprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "setlocale": {
            "entrypoint": "0x001022f0",
            "current_name": "setlocale",
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "setlocale"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "entrypoint": "0x00102300",
            "current_name": "bfd_set_error_program_name",
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "bfd_set_error_program_name"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "memmove": {
            "entrypoint": "0x00102310",
            "current_name": "memmove",
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_demangle": {
            "entrypoint": "0x00102320",
            "current_name": "bfd_demangle",
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102739"
            ],
            "called": [
                "bfd_demangle"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xstrerror": {
            "entrypoint": "0x00102330",
            "current_name": "xstrerror",
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103729"
            ],
            "called": [
                "xstrerror"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fopen": {
            "entrypoint": "0x00102340",
            "current_name": "fopen",
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "fopen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xexit": {
            "entrypoint": "0x00102350",
            "current_name": "xexit",
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00106300",
                "FUN_00106530",
                "FUN_001055f0"
            ],
            "called": [
                "xexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_close": {
            "entrypoint": "0x00102360",
            "current_name": "bfd_close",
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "bfd_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "vfprintf": {
            "entrypoint": "0x00102370",
            "current_name": "vfprintf",
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001063a0"
            ],
            "called": [
                "vfprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "entrypoint": "0x00102380",
            "current_name": "bfd_check_format_matches",
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "bfd_check_format_matches"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_errmsg": {
            "entrypoint": "0x00102390",
            "current_name": "bfd_errmsg",
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0",
                "FUN_00106540"
            ],
            "called": [
                "bfd_errmsg"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_canonicalize_reloc": {
            "entrypoint": "0x001023a0",
            "current_name": "bfd_canonicalize_reloc",
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103c00"
            ],
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "sprintf": {
            "entrypoint": "0x001023b0",
            "current_name": "sprintf",
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010268b"
            ],
            "called": [
                "sprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "exit": {
            "entrypoint": "0x001023c0",
            "current_name": "exit",
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001055f0",
                "FUN_00103ca0"
            ],
            "called": [
                "exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_check_format": {
            "entrypoint": "0x001023d0",
            "current_name": "bfd_check_format",
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "bfd_check_format"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "entrypoint": "0x001023e0",
            "current_name": "bfd_openr_next_archived_file",
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_get_reloc_upper_bound": {
            "entrypoint": "0x001023f0",
            "current_name": "bfd_get_reloc_upper_bound",
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103c00"
            ],
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_map_over_sections": {
            "entrypoint": "0x00102400",
            "current_name": "bfd_map_over_sections",
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103238"
            ],
            "called": [
                "bfd_map_over_sections"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strerror": {
            "entrypoint": "0x00102410",
            "current_name": "strerror",
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "strerror"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strstr": {
            "entrypoint": "0x00102420",
            "current_name": "strstr",
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104670",
                "FUN_00102fd2"
            ],
            "called": [
                "strstr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_get_next_mapent": {
            "entrypoint": "0x00102430",
            "current_name": "bfd_get_next_mapent",
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "bfd_get_next_mapent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "__cxa_finalize": {
            "entrypoint": "0x00102440",
            "current_name": "__cxa_finalize",
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "_FINI_0"
            ],
            "called": [
                "__cxa_finalize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102450": {
            "entrypoint": "0x00102450",
            "current_name": "print_supported_targets_00102450",
            "code": "\nvoid print_supported_targets_00102450(void)\n\n{\n  long current_target_value;\n  char *message;\n  long *target_list;\n  FILE *output_file;\n  long *current_target;\n  int exit_code;\n  \n  message = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(output_file,message);\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target_value = *current_target;\n    current_target = current_target + 1;\n    if (current_target_value == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free_memory(target_list);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "__ptr": "target_list",
                "unaff_RBX": "output_file",
                "in_stack_00000008": "exit_code",
                "pcVar2": "message",
                "lVar1": "current_target_value",
                "plVar3": "current_target",
                "dcgettext": "get_translation",
                "fprintf": "write_output",
                "fputc": "write_new_line",
                "free": "free_memory",
                "exit": "exit_program",
                "bfd_target_list": "get_target_list"
            },
            "calling": [
                "FUN_00103ca0"
            ],
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102450": {
                    "26": "print_supported_targets",
                    "4": "print_target_list",
                    "1": "print_targets_and_exit"
                },
                "__ptr": {
                    "31": "target_list"
                },
                "unaff_RBX": {
                    "28": "output_file",
                    "1": "output_stream"
                },
                "in_stack_00000008": {
                    "1": "status_code",
                    "2": "error_flag",
                    "23": "exit_code"
                },
                "pcVar2": {
                    "1": "supported_targets_message",
                    "11": "message",
                    "3": "target_message",
                    "5": "translation"
                },
                "lVar1": {
                    "7": "target",
                    "1": "target_value",
                    "2": "current_value",
                    "9": "current_target_value"
                },
                "plVar3": {
                    "1": "target",
                    "29": "current_target"
                },
                "dcgettext": {
                    "2": "get_translation",
                    "1": "get_translated_text"
                },
                "fprintf": {
                    "1": "write_output"
                },
                "fputc": {
                    "1": "write_new_line"
                },
                "free": {
                    "1": "free_memory"
                },
                "exit": {
                    "1": "exit_program"
                },
                "bfd_target_list": {
                    "1": "get_target_list"
                }
            }
        },
        "caseD_4a": {
            "entrypoint": "0x00102475",
            "current_name": "caseD_4a",
            "code": "\nvoid switchD_00104393::caseD_4a(undefined8 param_1,undefined8 param_2)\n\n{\n  initialize_data_00104397(param_1,param_2,3);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104370"
            ],
            "called": [
                "FUN_00104397"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0010249f": {
            "entrypoint": "0x0010249f",
            "current_name": "print_warning_message_0010249f",
            "code": "\nundefined8 print_warning_message_0010249f(void)\n\n{\n  undefined8 warning_message;\n  \n  warning_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  print_error_message(warning_message);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0010249f": "print_warning_message_0010249f",
                "uVar1": "warning_message",
                "dcgettext": "get_translated_message",
                "print_error_message_00106400": "print_error_message"
            },
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "dcgettext",
                "FUN_00106400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010249f": {
                    "1": "print_warning_for_non_ordinary_file",
                    "2": "print_file_not_ordinary_warning",
                    "20": "print_warning_message"
                },
                "uVar1": {
                    "6": "error_message",
                    "1": "warning_string",
                    "24": "warning_message"
                },
                "dcgettext": {
                    "1": "get_message",
                    "3": "get_warning_message",
                    "6": "get_translated_message"
                },
                "print_error_message_00106400": {
                    "11": "print_error_message",
                    "1": "print_message"
                },
                "F1": {
                    "1": "print_warning_message"
                }
            }
        },
        "FUN_001025f5": {
            "entrypoint": "0x001025f5",
            "current_name": "concatenate_strings_001025f5",
            "code": "\nvoid concatenate_strings_001025f5(undefined8 first_string,undefined8 additional_string)\n\n{\n  DAT_0010b7a0 = concatenate(&DAT_001071d7,additional_string,&DAT_001071ca,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001025f5": "concatenate_strings_001025f5",
                "param_1": "first_string",
                "param_2": "additional_string",
                "concat": "concatenate"
            },
            "calling": [
                "FUN_00104670"
            ],
            "called": [
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001025f5": {
                    "1": "concatenate_and_assign",
                    "3": "concatenate_and_store",
                    "25": "concatenate_strings"
                },
                "param_1": {
                    "3": "unused_param",
                    "2": "input1",
                    "1": "source",
                    "4": "input_string1"
                },
                "param_2": {
                    "2": "str2",
                    "4": "additional_string",
                    "3": "string_to_concatenate",
                    "1": "string"
                },
                "concat": {
                    "1": "new_concatenated_string",
                    "3": "concatenate"
                },
                "DAT_0010b7a0": {
                    "1": "resultant_string"
                },
                "DAT_001071d7": {
                    "1": "string1"
                },
                "DAT_001071ca": {
                    "1": "string2"
                },
                "concat_string": {
                    "1": "string_to_concatenate"
                }
            }
        },
        "FUN_00102670": {
            "entrypoint": "0x00102670",
            "current_name": "print_if_flag_set_00102670",
            "code": "\n\n\nvoid print_if_flag_set_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102670": "print_if_flag_set_00102670",
                "param_1": "message",
                "printf": "print_formatted_message"
            },
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102670": {
                    "2": "print_message_if_flag_set",
                    "1": "display_message",
                    "3": "print_message_if_initialized",
                    "4": "print_if_initialized",
                    "8": "print_if_flag_set"
                },
                "param_1": {
                    "31": "message"
                },
                "_DAT_0010b7c4": {
                    "1": "data_initialized",
                    "4": "flag",
                    "2": "is_initialized"
                },
                "printf": {
                    "1": "printf",
                    "2": "print_formatted_message"
                }
            }
        },
        "FUN_0010268b": {
            "entrypoint": "0x0010268b",
            "current_name": "print_encoded_string_0010268b",
            "code": "\n\n\nvoid print_encoded_string_0010268b(void)\n\n{\n  undefined8 *ptr;\n  byte byte1;\n  byte byte2;\n  int is_terminal;\n  size_t string_length;\n  undefined8 *ptr2;\n  char *str;\n  ulong loop_counter;\n  undefined8 ulong_var2;\n  undefined *ptr3;\n  undefined8 *ptr4;\n  long base_pointer;\n  undefined8 *pointer5;\n  undefined *unaff_r12;\n  undefined8 *input_string;\n  long long_var;\n  uint uint_var;\n  char *format_string;\n  long unaff_r15;\n  byte loop_flag;\n  char *temp_string;\n  undefined8 stack_var;\n  \n  loop_flag = 0;\n  pointer5 = input_string;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      byte1 = *(byte *)pointer5;\n      if (byte1 == 0) goto LAB_0010485e;\n    } while ((((&char_table)[(ulong)byte1 * 2] & 2) == 0) &&\n            (pointer5 = (undefined8 *)((long)pointer5 + 1), byte1 < 0xc0));\n    string_length = strlen((char *)input_string);\n    pointer5 = DAT_0010b790;\n    ptr4 = input_string;\n    if (_DAT_0010b798 < string_length * 9) {\n      free(DAT_0010b790);\n      string_length = strlen((char *)input_string);\n      _DAT_0010b798 = string_length * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      pointer5 = DAT_0010b790;\n    }\n    while( true ) {\n      input_string = DAT_0010b790;\n      byte1 = *(byte *)ptr4;\n      ptr = (undefined8 *)((long)ptr4 + 1);\n      if (byte1 == 0) break;\n      if (((&char_table)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)pointer5 = byte1;\n          pointer5 = (undefined8 *)((long)pointer5 + 1);\n          ptr4 = ptr;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = pointer5;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uint_var = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long_var = 2;\n                goto LAB_00102917;\n              case 4:\n                is_terminal = isatty(1);\n                if (is_terminal == 0) {\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                }\n                else {\n                  *(undefined *)(pointer5 + 1) = 0;\n                  *pointer5 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                  ptr2 = pointer5 + 1;\n                }\n              case 2:\n                uint_var = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr4 >> 2 & 7),\n                        (ulong)((*(byte *)ptr4 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint_var = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 3;\nLAB_00102a62:\n                  for (loop_counter = (ulong)uint_var; loop_counter != 0; loop_counter = loop_counter - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + (ulong)loop_flag * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)loop_flag * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long_var = 3;\nLAB_00102917:\n                  ulong_var2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3c;\n                  }\n                  sprintf((char *)pointer5,\"%c\",ulong_var2);\n                  *(undefined *)((long)pointer5 + 3) = 0;\n                  ptr2 = (undefined8 *)(long_var + (long)ptr4);\n                  *(undefined2 *)((long)pointer5 + 1) = 0x7830;\n                  str = (char *)((long)pointer5 + 3);\n                  do {\n                    temp_string = str;\n                    byte1 = *(byte *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + 1);\n                    sprintf(temp_string,\"%02x\",(ulong)byte1);\n                    str = temp_string + 2;\n                  } while (ptr4 != ptr2);\n                  ulong_var2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3e;\n                  }\n                  uint_var = (uint)long_var;\n                  sprintf(temp_string + 2,\"%c\",ulong_var2);\n                  ptr2 = (undefined8 *)(temp_string + 3);\n                  break;\n                case 4:\n                  is_terminal = isatty(1);\n                  if (is_terminal == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                  }\n                  else {\n                    *(undefined *)(pointer5 + 1) = 0;\n                    *pointer5 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                    ptr2 = pointer5 + 1;\n                  }\n                case 2:\n                  uint_var = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (is_terminal = isatty(1), is_terminal != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uint_var = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)ptr4 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long_var = 4;\n                  goto LAB_00102917;\n                case 4:\n                  is_terminal = isatty(1);\n                  if (is_terminal != 0) {\n                    *(undefined *)(pointer5 + 1) = 0;\n                    *pointer5 = 0x6d37343b31335b1b;\n                    ptr2 = pointer5 + 1;\n                  }\n                case 2:\n                  uint_var = 4;\n                  is_terminal = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)is_terminal);\n                  goto LAB_00102a27;\n                default:\n                  uint_var = 4;\n                }\n              }\n            }\n            loop_counter = (ulong)(uint)((int)ptr2 - (int)pointer5);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)pointer5 = byte1;\n            uint_var = 1;\n            loop_counter = 1;\n          }\n          pointer5 = (undefined8 *)((long)pointer5 + loop_counter);\n          ptr4 = (undefined8 *)((long)ptr + (ulong)(uint_var - 1));\n        }\n      }\n      else {\n        *(undefined *)pointer5 = 0x5e;\n        *(byte *)((long)pointer5 + 1) = byte1 + 0x40;\n        pointer5 = (undefined8 *)((long)pointer5 + 2);\n        ptr4 = ptr;\n      }\n    }\n    *(undefined *)pointer5 = 0;\n  }\nLAB_0010485e:\n  pointer5 = (undefined8 *)0x0;\n  if ((((base_pointer != 0) && (*(long *)(base_pointer + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((str = (char *)(**(code **)(*(long *)(unaff_r15 + 8) + 0x220))\n                                  (unaff_r15,*(long *)(base_pointer + 0x10),0,\n                                   (long)&stack0x00000038 + 7), str != (char *)0x0 &&\n      (*str != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((stack_var._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(base_pointer + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    pointer5 = (undefined8 *)reconcat(0,input_string,ptr3,str,0);\n    input_string = pointer5;\n  }\n  printf(format_string,input_string);\n  if (unaff_r12 != (undefined *)0x0) {\n    *unaff_r12 = 0x40;\n  }\n  free(pointer5);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010268b": "print_encoded_string_0010268b",
                "puVar1": "ptr",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "is_terminal",
                "sVar5": "string_length",
                "puVar6": "ptr2",
                "pcVar7": "str",
                "uVar8": "loop_counter",
                "uVar9": "ulong_var2",
                "puVar10": "ptr3",
                "puVar11": "ptr4",
                "unaff_RBP": "base_pointer",
                "puVar12": "pointer5",
                "unaff_R12": "unaff_r12",
                "unaff_R13": "input_string",
                "lVar13": "long_var",
                "uVar14": "uint_var",
                "unaff_R14": "format_string",
                "unaff_R15": "unaff_r15",
                "bVar15": "loop_flag",
                "__s": "temp_string",
                "in_stack_00000038": "stack_var",
                "_sch_istable": "char_table"
            },
            "calling": [
                "FUN_00102739"
            ],
            "called": [
                "isatty",
                "sprintf",
                "strlen",
                "xmalloc",
                "FUN_001047d0",
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010268b": {
                    "1": "print_converted_string",
                    "14": "print_encoded_string",
                    "3": "print_escaped_string",
                    "5": "print_decoded_string"
                },
                "puVar1": {
                    "10": "ptr",
                    "1": "current_char",
                    "6": "ptr1",
                    "2": "current_byte",
                    "5": "pointer1"
                },
                "bVar2": {
                    "19": "byte1",
                    "1": "byte_value",
                    "2": "byte_var1",
                    "4": "current_byte"
                },
                "bVar3": {
                    "2": "byte_var2",
                    "1": "next_character",
                    "4": "next_byte",
                    "19": "byte2"
                },
                "iVar4": {
                    "1": "bool_val",
                    "4": "is_tty",
                    "7": "int_var",
                    "2": "int1",
                    "14": "is_terminal"
                },
                "sVar5": {
                    "1": "unaff_r13_length",
                    "6": "str_len",
                    "3": "input_length",
                    "9": "string_length",
                    "2": "str_length"
                },
                "puVar6": {
                    "1": "pointer_var2",
                    "3": "output_pointer",
                    "2": "dest_ptr",
                    "5": "pointer2",
                    "8": "ptr2"
                },
                "pcVar7": {
                    "1": "string1",
                    "2": "formatted_string",
                    "3": "str_ptr",
                    "4": "str"
                },
                "uVar8": {
                    "5": "ulong_var",
                    "1": "temp_val",
                    "2": "ulong_var1",
                    "7": "loop_counter"
                },
                "uVar9": {
                    "1": "char_val",
                    "5": "ulong_var2",
                    "2": "start_char"
                },
                "puVar10": {
                    "1": "concatenation_symbol",
                    "4": "ptr3"
                },
                "puVar11": {
                    "1": "current_char",
                    "4": "ptr4",
                    "2": "ptr3"
                },
                "unaff_RBP": {
                    "1": "unaff_resigned_rbp",
                    "2": "register1",
                    "3": "rbp",
                    "5": "base_pointer"
                },
                "puVar12": {
                    "2": "encoded_string",
                    "1": "ptr5",
                    "3": "result_ptr"
                },
                "unaff_R12": {
                    "1": "register_r12",
                    "2": "output_flag",
                    "8": "unaff_r12"
                },
                "unaff_R13": {
                    "1": "register_r13",
                    "2": "original_string",
                    "4": "encoded_string",
                    "12": "input_string"
                },
                "lVar13": {
                    "1": "loop_var_1",
                    "3": "loop_counter",
                    "7": "long_var",
                    "2": "length"
                },
                "uVar14": {
                    "1": "uint_var1",
                    "5": "uint_var",
                    "2": "bytes_to_copy"
                },
                "unaff_R14": {
                    "1": "unaff_var4",
                    "2": "unaff_r14",
                    "19": "format_string"
                },
                "unaff_R15": {
                    "2": "r15",
                    "1": "register_r15",
                    "4": "function_pointer",
                    "5": "unaff_r15"
                },
                "bVar15": {
                    "3": "byte_var",
                    "7": "loop_flag",
                    "1": "byte_value",
                    "2": "byte_var3",
                    "6": "byte3"
                },
                "__s": {
                    "1": "str2",
                    "2": "current_char",
                    "4": "temp_string"
                },
                "in_stack_00000038": {
                    "1": "in_stack_value",
                    "2": "in_stack_var",
                    "3": "stack_variable",
                    "6": "stack_var"
                },
                "uVar15": {
                    "1": "long_var2"
                },
                "puVar8": {
                    "1": "formatted_ptr"
                },
                "_sch_istable": {
                    "1": "char_table"
                },
                "puVar7": {
                    "1": "ptr3"
                }
            }
        },
        "FUN_00102739": {
            "entrypoint": "0x00102739",
            "current_name": "print_modified_string_00102739",
            "code": "\n\n\nvoindexd print_modified_string_00102739(voindexd)\n\n{\n  undefindexned8 *ptr1;\n  byte byte1;\n  byte byte2;\n  indexnt int_var;\n  sindexze_t size;\n  char *at_symbol_ptr;\n  undefindexned8 *ptr2;\n  char *ptr4;\n  undefindexned8 *result_ptr;\n  ulong ulong_var1;\n  undefindexned8 ulong_var2;\n  undefindexned *ptr5;\n  long base_pointer;\n  undefindexned8 *ptr6;\n  undefindexned8 *string_ptr;\n  long long_var;\n  uindexnt uint_var;\n  char *format_string;\n  long context;\n  byte byte3;\n  char *str;\n  undefindexned8 stack_var;\n  \n  byte3 = 0;\n  ptr6 = string_ptr;\n  indexf (*(indexnt *)(*(long *)(context + 8) + 8) != 5) {\n    indexf (DAT_0010b814 != 0) {\n      at_symbol_ptr = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    at_symbol_ptr = (char *)0x0;\n    indexf (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      result_ptr = (undefindexned8 *)0x0;\n    }\n    else {\n      result_ptr = (undefindexned8 *)0x0;\n      indexf (string_ptr != (undefindexned8 *)0x0) goto LAB_0010269d;\n      result_ptr = (undefindexned8 *)0x0;\n      string_ptr = (undefindexned8 *)0x1073a6;\n    }\n    goto joindexned_r0x00104799;\n  }\n  at_symbol_ptr = strchr((char *)string_ptr,0x40);\n  indexf (at_symbol_ptr == (char *)0x0) {\n    indexf (DAT_0010b814 != 0) goto LAB_0010482b;\n    indexf (DAT_0010b7e0 == 0) {\n      indexf (base_pointer == 0) {\n        result_ptr = (undefindexned8 *)0x0;\n        prindexntf(format_string);\n      }\n      else {\n        indexf (*(long *)(base_pointer + 0x10) != 0) {\n          prindexnt_and_free_001047d0();\n          return;\n        }\n        result_ptr = (undefindexned8 *)0x0;\n        prindexntf(format_string);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    ptr6 = string_ptr;\n    result_ptr = (undefindexned8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)ptr6;\n      indexf (byte1 == 0) goto joindexned_r0x00104799;\n    } whindexle ((((&table_ptr)[(ulong)byte1 * 2] & 2) == 0) &&\n            (ptr6 = (undefindexned8 *)((long)ptr6 + 1), byte1 < 0xc0));\n    size = strlen((char *)string_ptr);\n    ptr6 = DAT_0010b790;\n    indexf (_DAT_0010b798 < size * 9) {\n      free(DAT_0010b790);\n      size = strlen((char *)string_ptr);\n      _DAT_0010b798 = size * 9;\n      DAT_0010b790 = (undefindexned8 *)xmalloc(_DAT_0010b798 + 1);\n      ptr6 = DAT_0010b790;\n    }\n    whindexle( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)string_ptr;\n      ptr1 = (undefindexned8 *)((long)string_ptr + 1);\n      indexf (byte1 == 0) break;\n      indexf (((&table_ptr)[(ulong)byte1 * 2] & 2) == 0) {\n        indexf ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)ptr6 = byte1;\n          ptr6 = (undefindexned8 *)((long)ptr6 + 1);\n          string_ptr = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)string_ptr + 1);\n          indexf ((byte2 & 0xc0) == 0x80) {\n            ptr2 = ptr6;\n            indexf ((byte1 & 0x20) == 0) {\n              swindextch(DAT_0010b7e0) {\n              case 1:\n                uint_var = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long_var = 2;\n                goto LAB_00102917;\n              case 4:\n                int_var = indexsatty(1);\n                indexf (int_var == 0) {\n                  byte2 = *(byte *)((long)string_ptr + 1);\n                }\n                else {\n                  *(undefindexned *)(ptr6 + 1) = 0;\n                  *ptr6 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)string_ptr + 1);\n                  ptr2 = ptr6 + 1;\n                }\n              case 2:\n                uint_var = 2;\n                sprindexntf((char *)ptr2,\"\\u%02x%02x\",(ulong)((indexnt)(uindexnt)*(byte *)string_ptr >> 2 & 7)\n                        ,(ulong)((*(byte *)string_ptr & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefindexned8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint_var = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)string_ptr + 2);\n              indexf ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              indexf ((byte1 & 0x10) == 0) {\n                swindextch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 3;\nLAB_00102a62:\n                  for (ulong_var1 = (ulong)uint_var; ulong_var1 != 0; ulong_var1 = ulong_var1 - 1) {\n                    *(undefindexned *)ptr2 = *(undefindexned *)string_ptr;\n                    string_ptr = (undefindexned8 *)((long)string_ptr + (ulong)byte3 * -2 + 1);\n                    ptr2 = (undefindexned8 *)((long)ptr2 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long_var = 3;\nLAB_00102917:\n                  ulong_var2 = 0x7b;\n                  indexf (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3c;\n                  }\n                  sprindexntf((char *)ptr6,\"%c\",ulong_var2);\n                  *(undefindexned *)((long)ptr6 + 3) = 0;\n                  ptr2 = (undefindexned8 *)(long_var + (long)string_ptr);\n                  *(undefindexned2 *)((long)ptr6 + 1) = 0x7830;\n                  ptr4 = (char *)((long)ptr6 + 3);\n                  do {\n                    str = ptr4;\n                    byte1 = *(byte *)string_ptr;\n                    string_ptr = (undefindexned8 *)((long)string_ptr + 1);\n                    sprindexntf(str,\"%02x\",(ulong)byte1);\n                    ptr4 = str + 2;\n                  } whindexle (string_ptr != ptr2);\n                  ulong_var2 = 0x7d;\n                  indexf (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3e;\n                  }\n                  uint_var = (uindexnt)long_var;\n                  sprindexntf(str + 2,\"%c\",ulong_var2);\n                  ptr2 = (undefindexned8 *)(str + 3);\n                  break;\n                case 4:\n                  int_var = indexsatty(1);\n                  indexf (int_var == 0) {\n                    byte2 = *(byte *)((long)string_ptr + 2);\n                  }\n                  else {\n                    *(undefindexned *)(ptr6 + 1) = 0;\n                    *ptr6 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)string_ptr + 2);\n                    ptr2 = ptr6 + 1;\n                  }\n                case 2:\n                  uint_var = 3;\n                  sprindexntf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uindexnt)(((ulong)*(byte *)string_ptr & 0xf) << 4) |\n                                 (indexnt)(uindexnt)*(byte *)((long)string_ptr + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)string_ptr + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefindexned8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  indexf ((DAT_0010b7e0 == 4) && (int_var = indexsatty(1), int_var != 0)) {\n                    *(undefindexned4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefindexned8 *)((long)ptr2 + 4);\n                    *(undefindexned *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uint_var = 3;\n                }\n              }\n              else {\n                indexf ((*(byte *)((long)string_ptr + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                swindextch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long_var = 4;\n                  goto LAB_00102917;\n                case 4:\n                  int_var = indexsatty(1);\n                  indexf (int_var != 0) {\n                    *(undefindexned *)(ptr6 + 1) = 0;\n                    *ptr6 = 0x6d37343b31335b1b;\n                    ptr2 = ptr6 + 1;\n                  }\n                case 2:\n                  uint_var = 4;\n                  int_var = sprindexntf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)string_ptr & 7) << 6 |\n                                         (indexnt)(uindexnt)*(byte *)((long)string_ptr + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)string_ptr + 1) & 3) << 6 |\n                                         (indexnt)(uindexnt)*(byte *)((long)string_ptr + 2) >> 2 & 0xfU));\n                  ptr2 = (undefindexned8 *)((long)ptr2 + (long)int_var);\n                  goto LAB_00102a27;\n                default:\n                  uint_var = 4;\n                }\n              }\n            }\n            ulong_var1 = (ulong)(uindexnt)((indexnt)ptr2 - (indexnt)ptr6);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)ptr6 = byte1;\n            uint_var = 1;\n            ulong_var1 = 1;\n          }\n          ptr6 = (undefindexned8 *)((long)ptr6 + ulong_var1);\n          string_ptr = (undefindexned8 *)((long)ptr1 + (ulong)(uint_var - 1));\n        }\n      }\n      else {\n        *(undefindexned *)ptr6 = 0x5e;\n        *(byte *)((long)ptr6 + 1) = byte1 + 0x40;\n        ptr6 = (undefindexned8 *)((long)ptr6 + 2);\n        string_ptr = ptr1;\n      }\n    }\n    *(undefindexned *)ptr6 = 0;\n    string_ptr = ptr2;\n  }\n  else {\n    *at_symbol_ptr = '\\0';\n    indexf (DAT_0010b814 == 0) {\n      indexf (DAT_0010b7e0 == 0) goto LAB_00104794;\n      result_ptr = (undefindexned8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    indexf ((*(char *)string_ptr == '\\0') ||\n       (ptr6 = (undefindexned8 *)bfd_demangle(), ptr6 == (undefindexned8 *)0x0)) {\n      indexf (DAT_0010b7e0 != 0) goto LAB_00102698;\n      result_ptr = (undefindexned8 *)0x0;\n    }\n    else {\n      string_ptr = ptr6;\n      result_ptr = ptr6;\n      indexf (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoindexned_r0x00104799:\n  indexf ((((base_pointer != 0) && (*(long *)(base_pointer + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((ptr4 = (char *)(**(code **)(*(long *)(context + 8) + 0x220))\n                                  (context,*(long *)(base_pointer + 0x10),0,\n                                   (long)&stack0x00000038 + 7), ptr4 != (char *)0x0 &&\n      (*ptr4 != '\\0')))) {\n    ptr5 = &DAT_001071e0;\n    indexf ((stack_var._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(base_pointer + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr5 = &DAT_001071df;\n    }\n    result_ptr = (undefindexned8 *)reconcat(result_ptr,string_ptr,ptr5,ptr4,0);\n    string_ptr = result_ptr;\n  }\n  prindexntf(format_string,string_ptr);\n  indexf (at_symbol_ptr != (char *)0x0) {\n    *at_symbol_ptr = '@';\n  }\nLAB_001047ba:\n  free(result_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102739": "print_modified_string_00102739",
                "unaff_R13": "string_ptr",
                "unaff_R14": "format_string",
                "unaff_R15": "context",
                "unaff_RBP": "base_pointer",
                "__ptr": "result_ptr",
                "pcVar6": "at_symbol_ptr",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "sVar5": "size",
                "puVar7": "ptr2",
                "bVar3": "byte2",
                "iVar4": "int_var",
                "lVar13": "long_var",
                "uVar9": "ulong_var1",
                "uVar10": "ulong_var2",
                "puVar11": "ptr5",
                "puVar12": "ptr6",
                "uVar14": "uint_var",
                "in_stack_00000038": "stack_var",
                "pcVar8": "ptr4",
                "bVar15": "byte3",
                "__s": "str",
                "i": "index",
                "_sch_istable": "table_ptr"
            },
            "calling": [
                "FUN_00104740"
            ],
            "called": [
                "strchr",
                "bfd_demangle",
                "printf",
                "FUN_001047d0",
                "FUN_0010268b"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102739": {
                    "4": "print_modified_string",
                    "2": "print_reverse_string",
                    "1": "print_reversed_string",
                    "3": "reverse_and_print_string"
                },
                "unaff_R13": {
                    "1": "string",
                    "2": "register_r13",
                    "7": "string_ptr",
                    "5": "input_string",
                    "4": "string_pointer"
                },
                "unaff_R14": {
                    "3": "register_r14",
                    "1": "register_14",
                    "2": "format_str",
                    "14": "format_string"
                },
                "unaff_R15": {
                    "1": "stack_ptr",
                    "3": "function_pointer",
                    "2": "register_r15",
                    "6": "context"
                },
                "unaff_RBP": {
                    "1": "func_info",
                    "2": "long_var1",
                    "3": "register_bp",
                    "4": "base_pointer"
                },
                "__ptr": {
                    "1": "modified_input_string",
                    "2": "output",
                    "6": "result",
                    "3": "concatenated_string",
                    "7": "result_ptr"
                },
                "pcVar6": {
                    "1": "pointer_to_char1",
                    "7": "at_symbol_ptr",
                    "2": "char_ptr1",
                    "3": "ptr2",
                    "6": "at_symbol_position"
                },
                "puVar1": {
                    "1": "next_byte_ptr",
                    "8": "ptr1",
                    "3": "pointer1"
                },
                "bVar2": {
                    "15": "byte1",
                    "1": "byte_var",
                    "4": "current_char",
                    "2": "byte_value"
                },
                "sVar5": {
                    "1": "size_t_variable",
                    "2": "str_length",
                    "11": "size",
                    "7": "string_length"
                },
                "puVar7": {
                    "1": "output_string_ptr2",
                    "2": "pointer2",
                    "3": "output_ptr",
                    "6": "ptr2"
                },
                "bVar3": {
                    "4": "next_char",
                    "1": "byte_value2",
                    "5": "next_byte",
                    "15": "byte2"
                },
                "iVar4": {
                    "1": "terminal_output",
                    "2": "is_tty",
                    "10": "int_var",
                    "8": "is_terminal"
                },
                "lVar13": {
                    "1": "buffer_offset",
                    "8": "long_var",
                    "4": "length",
                    "3": "loop_var"
                },
                "uVar9": {
                    "3": "ulong_var",
                    "1": "loop_sum",
                    "2": "string_length",
                    "5": "ulong_var1"
                },
                "uVar10": {
                    "1": "temp_char",
                    "8": "ulong_var2",
                    "2": "temp_var"
                },
                "puVar11": {
                    "1": "ptr2",
                    "3": "ptr3"
                },
                "puVar12": {
                    "2": "ptr3",
                    "1": "output_string_ptr",
                    "3": "ptr4"
                },
                "uVar14": {
                    "1": "uint_var1",
                    "7": "uint_var",
                    "2": "loop_count"
                },
                "in_stack_00000038": {
                    "2": "additional_arg",
                    "1": "stack_param",
                    "3": "stack_var"
                },
                "pcVar8": {
                    "1": "return_string",
                    "2": "function_name",
                    "3": "char_ptr2"
                },
                "uVar15": {
                    "1": "is_special_char"
                },
                "bVar15": {
                    "1": "temp_var",
                    "4": "flag",
                    "8": "byte3",
                    "3": "byte_var"
                },
                "__s": {
                    "1": "char_pointer3",
                    "2": "char_ptr3",
                    "3": "str"
                },
                "unaff_R12": {
                    "1": "table_index"
                },
                "unaff_RDI": {
                    "1": "input_string"
                },
                "puVar13": {
                    "1": "pointer6"
                },
                "lVar15": {
                    "1": "ulong3"
                },
                "unaff_144": {
                    "1": "length"
                },
                "pautch": {
                    "1": "shift_index"
                },
                "sdigit": {
                    "1": "shift_digit"
                },
                "sgap": {
                    "1": "shift_size_gap"
                },
                "i": {
                    "1": "index"
                },
                "_sch_istable": {
                    "1": "table_ptr"
                },
                "unaff_SomeRegister": {
                    "1": "another_register"
                },
                "unaff_AnotherRegister": {
                    "1": "yet_another_register"
                },
                "unaff_SomeOtherRegister": {
                    "1": "some_other_register"
                },
                "unaff_YetAnotherRegister": {
                    "1": "yet_another_register"
                },
                "unaff_SomeMoreRegister": {
                    "1": "some_more_register"
                },
                "unaff_SomeFormalParams": {
                    "1": "some_formal_params"
                }
            }
        },
        "FUN_00102c19": {
            "entrypoint": "0x00102c19",
            "current_name": "process_lto_object_00102c19",
            "code": "\n\n\nvoid process_lto_object_00102c19(void)\n\n{\n  char *ptr1;\n  code *function_pointer;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined8 ulong_var;\n  long long_var;\n  undefined8 *pointer_variable1;\n  long long_variable2;\n  undefined8 *pointer_var2;\n  undefined8 *pointer_rbx;\n  undefined8 *ptr_var3;\n  undefined8 *pointer_rbp;\n  undefined8 *ptr_var4;\n  undefined8 *pointer_var12;\n  undefined8 *ptr_var8;\n  undefined8 *pointer_variable5;\n  undefined8 *ptr_var10;\n  undefined8 *undefined8_ptr_var_10;\n  undefined8 *register_r12;\n  undefined8 *pointer_var15;\n  undefined8 *register_r13;\n  undefined8 *register_r14;\n  undefined8 *register_r15;\n  bool bool_var;\n  byte byte_var;\n  ulong ulong_variable;\n  ulong ulong_var2;\n  undefined8 stack_variable1;\n  undefined8 *stack_var2;\n  undefined8 *stack_var3;\n  undefined8 stack_var4;\n  void *stack_var5;\n  undefined8 *stack_var6;\n  \n  byte_var = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (pointer_rbx != register_r13) {\n      if (register_r14 == (undefined8 *)0x8) {\n        *pointer_rbx = *register_r13;\n        process_data_001049c0();\n        return;\n      }\n      for (; register_r14 != (undefined8 *)0x0; register_r14 = (undefined8 *)((long)register_r14 + -1)) {\n        *(undefined *)pointer_rbx = *(undefined *)register_r13;\n        register_r13 = (undefined8 *)((long)register_r13 + (ulong)byte_var * -2 + 1);\n        pointer_rbx = (undefined8 *)((long)pointer_rbx + (ulong)byte_var * -2 + 1);\n      }\n      process_data_001049c0();\n      return;\n    }\n    pointer_rbx = (undefined8 *)((long)pointer_rbx + (long)register_r14);\nLAB_001049c3:\n    do {\n      do {\n        register_r13 = (undefined8 *)((long)register_r13 + (long)register_r14);\n        pointer_var15 = register_r12;\n        pointer_var12 = pointer_rbp;\n        if (register_r12 <= register_r13) goto LAB_00104b15;\nLAB_001049cf:\n        pointer_variable1 = (undefined8 *)\n                 (**(code **)(pointer_rbp[1] + 0x270))\n                           (pointer_rbp,ulong_variable & 0xffffffff,register_r13,register_r15);\n        ptr_var4 = pointer_rbp;\n        pointer_var12 = register_r13;\n        pointer_var15 = register_r15;\n        if (pointer_variable1 == (undefined8 *)0x0) goto LAB_00102eb0;\n        ptr1 = (char *)pointer_variable1[1];\n        if (((ptr1 == (char *)0x0) || (*ptr1 != '_')) || (ptr1[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uint_var = (uint)(pointer_variable1[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uint_var != 0) goto LAB_00104a2d;\n          register_r13 = (undefined8 *)((long)register_r13 + (long)register_r14);\n          pointer_var15 = register_r12;\n          pointer_var12 = pointer_rbp;\n          if (register_r12 <= register_r13) {\nLAB_00104b15:\n            pointer_rbx = (undefined8 *)((long)pointer_rbx - (long)stack_var3);\n            if (register_r14 == (undefined8 *)0x8) {\n              long_variable2 = pointer_var12[1];\n              ptr_var4 = (undefined8 *)((long)pointer_rbx + 7);\n              if (-1 < (long)pointer_rbx) {\n                ptr_var4 = pointer_rbx;\n              }\n              ptr_var8 = (undefined8 *)(ulong)DAT_0010b800;\n              function_pointer = *(code **)(long_variable2 + 0x208);\n              ptr_var4 = (undefined8 *)((long)ptr_var4 >> 3);\n            }\n            else {\n              ptr_var4 = (undefined8 *)((long)pointer_rbx / (long)register_r14);\n              long_variable2 = pointer_var12[1];\n              function_pointer = *(code **)(long_variable2 + 0x208);\n            }\n            pointer_rbp = pointer_var12;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = pointer_var12;\n              DAT_0010b770 = (undefined8 *)(*function_pointer)(pointer_var12);\n              DAT_0010b768 = (undefined8 *)(**(code **)(pointer_var12[1] + 0x208))(pointer_var12);\n              pointer_rbx = stack_var6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                print_error_message_00106530(*pointer_var12);\n                ptr_var3 = register_r15;\n                goto LAB_00102d8e;\n              }\n              register_r12 = (undefined8 *)(ulong)stack_var4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulong_var2 = (ulong)(DAT_0010b80c != 0);\n                qsort(stack_var6,(size_t)ptr_var4,(size_t)register_r12,check_binary_compatibility_00102fd2);\n                pointer_var15 = (undefined8 *)xmalloc((long)ptr_var4 << 4);\n                pointer_variable5 = DAT_0010b770;\n                pointer_rbp = DAT_0010b768;\n                register_r14 = (undefined8 *)((long)ptr_var4 * (long)register_r12 + (long)pointer_rbx);\n                pointer_variable1 = DAT_0010b770;\n                ptr_var10 = DAT_0010b768;\n                if (register_r14 <= pointer_rbx) goto LAB_00102ec2;\n                ptr_var4 = (undefined8 *)\n                          (**(code **)(pointer_var12[1] + 0x270))(pointer_var12,ulong_var2 & 0xffffffff,pointer_rbx);\n                ptr_var3 = pointer_rbx;\n                ptr_var8 = register_r12;\n                stack_var2 = pointer_var15;\n                if (ptr_var4 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stack_var6,(size_t)ptr_var4,(size_t)register_r12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              long_variable2 = pointer_var12[1];\n            }\n            ptr_var3 = (undefined8 *)0x0;\n            do {\n              pointer_var12 = stack_var6;\n              pointer_variable1 = (undefined8 *)(ulong)DAT_0010b7f8;\n              register_r14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointer_var15 = (undefined8 *)(**(code **)(long_variable2 + 0x208))(pointer_rbp);\n                if (pointer_var15 == (undefined8 *)0x0) goto LAB_00102ed2;\n                pointer_rbx = ptr_var3 + (long)ptr_var4 * 2;\n                ptr_var4 = ptr_var3;\n                do {\n                  if (pointer_rbx <= ptr_var4) {\nLAB_00104c75:\n                    if (stack_var5 == (void *)0x0) {\n                      free(stack_var6);\n                      free(ptr_var3);\n                      return;\n                    }\n                    free(stack_var5);\n                    free(stack_var6);\n                    free(ptr_var3);\n                    return;\n                  }\n                  pointer_variable1 = pointer_var15;\n                  long_variable2 = (**(code **)(pointer_rbp[1] + 0x270))(pointer_rbp,register_r14,*ptr_var4);\n                  if (long_variable2 == 0) {\n                    print_error_message_00106530(*pointer_rbp,0);\nLAB_00102ed2:\n                    pointer_var12 = (undefined8 *)*pointer_rbp;\n                    print_error_message_00106530();\n                    pointer_variable5 = ptr_var8;\n                    undefined8_ptr_var_10 = ptr_var10;\n                    goto LAB_00102edb;\n                  }\n                  pointer_var12 = ptr_var4 + 1;\n                  ptr_var4 = ptr_var4 + 2;\n                  print_matching_records_00105110(pointer_rbp,long_variable2,*pointer_var12,stack_variable1);\n                } while( true );\n              }\n              register_r12 = (undefined8 *)(ulong)stack_var4._4_4_;\n              register_r15 = (undefined8 *)(**(code **)(long_variable2 + 0x208))(pointer_rbp);\n              if (register_r15 == (undefined8 *)0x0) {\n                print_error_message_00106530(*pointer_rbp);\n                pointer_var12 = register_r12;\n                if (DAT_0010b80c == 0) {\n                  long_variable2 = (**(code **)(pointer_rbp[1] + 0x350))(pointer_rbp);\n                  ptr_var4 = stack_var6;\n                  pointer_var15 = register_r12;\n                  if (long_variable2 < 1) {\n                    pointer_variable1 = (undefined8 *)0x0;\n                    pointer_rbx = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    pointer_rbx = (undefined8 *)xmalloc();\n                    pointer_variable1 = (undefined8 *)(**(code **)(pointer_rbp[1] + 0x358))(pointer_rbp,pointer_rbx);\n                    pointer_var12 = pointer_var15;\n                    if ((long)pointer_variable1 < 0) {\n                      pointer_var12 = (undefined8 *)*pointer_rbp;\n                      ptr_var4 = (undefined8 *)print_error_message_00106530(pointer_var12,pointer_var15);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointer_variable1 = register_r12;\n                  pointer_rbx = stack_var6;\n                  ptr_var4 = (undefined8 *)0x0;\n                  pointer_var15 = (undefined8 *)0x0;\n                }\n                ptr_var10 = &stack0x00000040;\n                ptr_var8 = pointer_rbx;\n                long_variable2 = (**(code **)(pointer_rbp[1] + 0x360))(pointer_rbp,pointer_var15,ptr_var4,pointer_variable1);\n                register_r12 = pointer_var12;\n                if (0 < long_variable2) {\n                  register_r12 = (undefined8 *)((long)pointer_var12 + long_variable2);\n                  stack_var6 = (undefined8 *)xrealloc(stack_var6);\n                  long_var = 0;\n                  do {\n                    stack_var6[(long)((long)pointer_var12 + long_var)] =\n                         (void *)(long_var * 0x30 + (long)stack_var5);\n                    long_var = long_var + 1;\n                  } while (long_variable2 != long_var);\n                  stack_var6[(long)((long)pointer_var12 + long_variable2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (pointer_rbx != (undefined8 *)0x0)) {\n                  free(pointer_rbx);\n                }\n                if ((*(byte *)((long)pointer_rbp + 0x4a) & 0x10) != 0) {\n                  pointer_rbx = (undefined8 *)*pointer_rbp;\n                  DAT_0010b230 = '\\0';\n                  ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_error_message_00106400(ulong_var);\n                }\n                register_r14 = (undefined8 *)(ulong)stack_var4._4_4_;\n                bool_var = DAT_0010b80c != 0;\n                ptr_var4 = (undefined8 *)(ulong)bool_var;\n                pointer_variable1 = stack_var6;\n                stack_var3 = stack_var6;\n                register_r15 = (undefined8 *)(**(code **)(pointer_rbp[1] + 0x208))(pointer_rbp);\n                if (register_r15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                ptr_var4 = (undefined8 *)((long)ptr_var4 * (long)register_r12 + (long)pointer_var12);\n                pointer_rbx = pointer_var12;\n                while( true ) {\n                  if (ptr_var4 <= pointer_rbx) goto LAB_00104c75;\n                  pointer_variable1 = register_r15;\n                  long_variable2 = (**(code **)(pointer_rbp[1] + 0x270))(pointer_rbp,register_r14,pointer_rbx);\n                  if (long_variable2 == 0) break;\n                  pointer_rbx = (undefined8 *)((long)pointer_rbx + (long)register_r12);\n                  print_matching_records_00105110(pointer_rbp,long_variable2,0,stack_variable1);\n                }\n                print_error_message_00106530(*pointer_rbp,0);\n              }\n              print_error_message_00106530(*pointer_rbp);\n              pointer_var12 = pointer_rbp;\n              pointer_var15 = register_r15;\nLAB_00102eb0:\n              print_error_message_00106530(*ptr_var4);\nLAB_00102eb9:\n              print_error_message_00106530(*pointer_var12);\nLAB_00102ec2:\n              ptr_var4 = (undefined8 *)0x0;\n              ptr_var3 = pointer_rbx;\n              ptr_var8 = register_r12;\n              pointer_variable5 = pointer_variable1;\n              pointer_rbp = ptr_var10;\n              stack_var2 = pointer_var15;\nLAB_00104e35:\n              while (ptr_var10 = pointer_variable5, ptr_var3 < register_r14) {\n                pointer_rbx = (undefined8 *)((long)ptr_var3 + (long)ptr_var8);\n                if (pointer_rbx < register_r14) {\n                  pointer_variable1 = pointer_rbp;\n                  pointer_variable5 = ptr_var8;\n                  undefined8_ptr_var_10 = ptr_var10;\n                  pointer_var2 = (undefined8 *)(**(code **)(pointer_var12[1] + 0x270))();\n                  if (pointer_var2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    ptr_var10 = undefined8_ptr_var_10;\n                    ptr_var8 = pointer_variable5;\n                    pointer_var12 = (undefined8 *)*pointer_var12;\n                    pointer_var2 = (undefined8 *)print_error_message_00106530();\n                  }\n                  else {\n                    pointer_variable1 = (undefined8 *)ptr_var4[4];\n                    if ((*(uint *)(ptr_var4 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  long_variable2 = ptr_var4[2];\nLAB_00102ee7:\n                  if (pointer_variable1 == (undefined8 *)pointer_var2[4]) {\n                    long_variable2 = pointer_var2[2] - long_variable2;\n                    pointer_variable5 = pointer_rbp;\n                    undefined8_ptr_var_10 = ptr_var3;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  long_variable2 = pointer_variable1[8] - long_variable2;\n                  pointer_variable5 = pointer_rbp;\n                  undefined8_ptr_var_10 = ptr_var3;\n                }\n                else {\n                  pointer_variable1 = (undefined8 *)ptr_var4[4];\n                  if ((*(uint *)(ptr_var4 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    long_variable2 = ptr_var4[2];\n                    pointer_var2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointer_var2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointer_variable5 = pointer_rbp;\n                  undefined8_ptr_var_10 = ptr_var3;\n                  if (*(int *)(pointer_var12[1] + 8) == 5) {\n                    long_variable2 = ptr_var4[7];\n                  }\n                  else {\n                    long_variable2 = ptr_var4[2];\n                    if ((*(byte *)((long)pointer_variable1 + 0x25) & 0x10) == 0) {\n                      if (pointer_rbx < register_r14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                ptr_var4 = pointer_var2;\n                ptr_var3 = pointer_rbx;\n                pointer_rbp = ptr_var10;\n                if (long_variable2 != 0) {\n                  *pointer_var15 = undefined8_ptr_var_10;\n                  pointer_var15[1] = long_variable2;\n                  pointer_var15 = pointer_var15 + 2;\n                }\n              }\n              ptr_var4 = (undefined8 *)((long)pointer_var15 - (long)stack_var2 >> 4);\n              qsort(stack_var2,(size_t)ptr_var4,0x10,compare_and_execute_00103533);\n              long_variable2 = pointer_var12[1];\n              pointer_rbx = ptr_var3;\n              pointer_rbp = pointer_var12;\n              ptr_var3 = stack_var2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        int_var = strcmp(ptr1 + (ptr1[2] == '_'),\"__gnu_lto_slim\");\n        stack_var2 = pointer_variable1;\n        if (int_var == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stack_var2 = (undefined8 *)*pointer_rbp;\n            DAT_0010b230 = '\\0';\n            ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            print_error_message_00106400(ulong_var,stack_var2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uint_var = (*(uint *)(pointer_variable1 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointer_variable1 + 3) & 0x800082) == 0) && (pointer_variable1[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointer_variable1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_object_00104d5b:\n          if ((pointer_variable1[4] != 0x10c2a8) && (pointer_variable1[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointer_variable1 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto process_lto_object_00104d5b;\nLAB_00104a53:\n      ptr_var10 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        char_var = (**(code **)(pointer_rbp[1] + 0x230))(pointer_rbp);\n        if (char_var != '\\0') {\n          process_lto_object_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointer_variable1[4] == 0x10c2a8);\nLAB_00104cba:\n    char_var = (**(code **)(pointer_rbp[1] + 0x230))(pointer_rbp);\n    if (char_var != '\\0') {\n      process_lto_object_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointer_var15 = (undefined8 *)((long)register_r12 * (long)register_r14);\n  register_r12 = (undefined8 *)((long)stack_var3 + (long)pointer_var15);\n  pointer_rbx = stack_var3;\n  pointer_var12 = pointer_rbp;\n  if (stack_var3 < register_r12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  ulong_variable = (ulong)bool_var;\n  register_r13 = stack_var3;\n  goto LAB_001049cf;\n}\n\n",
            "renaming": {
                "FUN_00102c19": "process_lto_object_00102c19",
                "pcVar1": "ptr1",
                "pcVar2": "function_pointer",
                "cVar3": "char_var",
                "iVar4": "int_var",
                "uVar5": "uint_var",
                "uVar6": "ulong_var",
                "lVar7": "long_var",
                "puVar8": "pointer_variable1",
                "lVar9": "long_variable2",
                "unaff_RBX": "pointer_rbx",
                "unaff_RBP": "pointer_rbp",
                "puVar11": "ptr_var4",
                "puVar12": "pointer_var12",
                "puVar15": "pointer_var15",
                "unaff_R12": "register_r12",
                "puVar13": "pointer_variable5",
                "unaff_R13": "register_r13",
                "unaff_R14": "register_r14",
                "unaff_R15": "register_r15",
                "bVar16": "bool_var",
                "bVar17": "byte_var",
                "unaff_retaddr": "ulong_variable",
                "in_stack_00000008": "stack_variable1",
                "in_stack_00000010": "stack_var2",
                "in_stack_00000018": "stack_var3",
                "in_stack_00000038": "stack_var4",
                "in_stack_00000040": "stack_var5",
                "in_stack_00000048": "stack_var6",
                "puVar10": "pointer_var2",
                "__ptr": "ptr_var3",
                "uVar18": "ulong_var2",
                "in_R8": "ptr_var8",
                "puVar14": "undefined8_ptr_var_10",
                "in_R9": "ptr_var10"
            },
            "calling": [
                "FUN_00104d5b"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102c19": {
                    "2": "decompiled_function",
                    "1": "process_slim_lto_object",
                    "4": "process_lto_object"
                },
                "pcVar1": {
                    "1": "char_pointer_1",
                    "2": "character_pointer",
                    "3": "char_pointer",
                    "4": "ptr1"
                },
                "pcVar2": {
                    "1": "pointer_var2",
                    "2": "pointer_code_var2",
                    "6": "function_pointer",
                    "3": "code_pointer",
                    "4": "ptr2"
                },
                "cVar3": {
                    "8": "char_var",
                    "6": "char_variable",
                    "1": "char_variable_1",
                    "3": "character",
                    "2": "ch"
                },
                "iVar4": {
                    "2": "integer",
                    "1": "var4",
                    "11": "int_var",
                    "5": "int_variable",
                    "3": "integer_variable"
                },
                "uVar5": {
                    "2": "unsigned_integer",
                    "1": "unsigned_var5",
                    "5": "uint_variable",
                    "3": "unsigned_variable",
                    "10": "uint_var"
                },
                "uVar6": {
                    "1": "undefined8_variable_1",
                    "8": "ulong_var",
                    "2": "unsigned_var2",
                    "3": "unsigned_variable2"
                },
                "lVar7": {
                    "1": "long_variable_1",
                    "9": "long_variable",
                    "2": "long_var7",
                    "12": "long_var"
                },
                "puVar8": {
                    "1": "pointer_to_unsigned_long",
                    "2": "pointer_variable",
                    "3": "pointer_variable1"
                },
                "lVar9": {
                    "2": "long_variable_2",
                    "6": "long_var2",
                    "1": "long_variable1",
                    "5": "long_var1",
                    "7": "long_variable2"
                },
                "unaff_RBX": {
                    "1": "pointer_variable1",
                    "2": "pointer_rbx"
                },
                "unaff_RBP": {
                    "1": "var10",
                    "2": "undefined8_ptr_var_5"
                },
                "puVar11": {
                    "2": "pointer_var11",
                    "1": "undefined8_ptr6"
                },
                "puVar12": {
                    "1": "pointer_variable_5",
                    "2": "ptr9",
                    "3": "pointer_var12"
                },
                "puVar15": {
                    "1": "pointer_undefined8_var15",
                    "2": "pointer_var15"
                },
                "unaff_R12": {
                    "1": "pointer_r12",
                    "2": "unaffected_r12",
                    "3": "register_r12"
                },
                "puVar13": {
                    "1": "ptr9",
                    "2": "undefined8_ptr_var_8",
                    "3": "pointer_variable5"
                },
                "unaff_R13": {
                    "1": "undefined8_pointer12",
                    "2": "ptr15",
                    "3": "register_r13"
                },
                "unaff_R14": {
                    "2": "pointer_r14",
                    "1": "pointer13",
                    "3": "register_r14"
                },
                "unaff_R15": {
                    "1": "pointer_variable_13",
                    "2": "pointer_r15",
                    "3": "register_r15"
                },
                "bVar16": {
                    "13": "bool_var",
                    "1": "is_plugin_needed",
                    "5": "bool_variable",
                    "3": "boolean_variable",
                    "2": "bool_var16"
                },
                "bVar17": {
                    "2": "byte_var17",
                    "1": "byte",
                    "8": "byte_variable",
                    "13": "byte_var"
                },
                "unaff_retaddr": {
                    "2": "ulong1",
                    "1": "unsigned_long",
                    "4": "ulong_variable",
                    "3": "ulong_var1"
                },
                "in_stack_00000008": {
                    "1": "stack_var",
                    "2": "undefined8_var_2",
                    "3": "var1"
                },
                "in_stack_00000010": {
                    "1": "stack_argument2",
                    "2": "stack_variable2",
                    "4": "stack_var2",
                    "3": "var2"
                },
                "in_stack_00000018": {
                    "1": "in_stack_variable3",
                    "4": "stack_var3",
                    "3": "var3",
                    "2": "stack_variable3"
                },
                "in_stack_00000038": {
                    "1": "func_param_3",
                    "3": "var4",
                    "4": "stack_var4",
                    "2": "undefined8_var_3"
                },
                "in_stack_00000040": {
                    "1": "stack_argument5",
                    "4": "stack_var5",
                    "2": "var5"
                },
                "in_stack_00000048": {
                    "1": "param6",
                    "2": "var6",
                    "4": "stack_var6"
                },
                "puVar10": {
                    "1": "pointer_to_unsigned_long2",
                    "2": "ptr4",
                    "3": "pointer_variable2",
                    "4": "pointer_var2"
                },
                "__ptr": {
                    "1": "pointer_var3",
                    "2": "pointer"
                },
                "uVar18": {
                    "2": "ulong_var_2",
                    "1": "ulong_variable_2",
                    "3": "ulong_variable2",
                    "4": "ulong_var2"
                },
                "in_R8": {
                    "1": "undefined8_pointer6"
                },
                "puVar14": {
                    "1": "undefined8_pointer6",
                    "2": "pointer_variable6"
                },
                "in_R9": {
                    "1": "ptr_var10"
                },
                "void": {
                    "1": ""
                },
                "lVar11": {
                    "1": "long3"
                }
            }
        },
        "FUN_00102f19": {
            "entrypoint": "0x00102f19",
            "current_name": "print_symbols_00102f19",
            "code": "\nvoid print_symbols_00102f19(undefined8 filename)\n\n{\n  char *format_string;\n  \n  format_string = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    format_string = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  format_string = (char *)dcgettext(0,format_string,5);\n  printf(format_string,filename);\n  format_string = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    format_string = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  format_string = (char *)dcgettext(0,format_string,5);\n  printf(format_string);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102f19": "print_symbols_00102f19",
                "param_1": "filename",
                "pcVar1": "format_string",
                "dcgettext": "get_translated_string",
                "printf": "print_formatted"
            },
            "calling": [],
            "called": [
                "printf",
                "dcgettext"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102f19": {
                    "5": "print_symbol_information",
                    "3": "print_symbol_table",
                    "4": "print_undefined_symbols",
                    "9": "print_symbols",
                    "1": "print_symbols_info",
                    "8": "print_symbol_info"
                },
                "param_1": {
                    "2": "symbol_file_name",
                    "3": "file_path",
                    "1": "symbol_name",
                    "9": "filename",
                    "8": "file_name"
                },
                "pcVar1": {
                    "1": "header_message",
                    "3": "message",
                    "16": "format_string",
                    "2": "output_format"
                },
                "dcgettext": {
                    "1": "get_translated_message",
                    "2": "get_localized_text",
                    "6": "get_translated_string"
                },
                "printf": {
                    "1": "print_formatted_message",
                    "2": "print_message"
                },
                "pcVar1_1": {
                    "1": "header2"
                },
                "pcVar2": {
                    "1": "symbol_message"
                },
                "pcVar3": {
                    "1": "header_message"
                },
                "DAT_0010b7e8": {
                    "1": "is_undefined"
                },
                "DAT_0010b7a8": {
                    "1": "is_value32"
                }
            }
        },
        "FUN_00102f7b": {
            "entrypoint": "0x00102f7b",
            "current_name": "print_if_condition_met_00102f7b",
            "code": "\n\n\nvoid print_if_condition_met_00102f7b(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102f7b": "print_if_condition_met_00102f7b",
                "param_1": "message",
                "printf": "print"
            },
            "calling": [],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102f7b": {
                    "8": "print_if_condition_met",
                    "1": "print_if_allowed",
                    "2": "print_if_flag_set"
                },
                "param_1": {
                    "30": "message",
                    "1": "output_text"
                },
                "_DAT_0010b7c4": {
                    "1": "is_printing_enabled",
                    "4": "condition_1",
                    "2": "condition1"
                },
                "DAT_0010b818": {
                    "1": "print_already_done_flag",
                    "4": "condition_2",
                    "2": "condition2"
                },
                "param_2": {
                    "1": "unused_param"
                },
                "param_3": {
                    "1": "verbose_mode"
                },
                "param_4": {
                    "1": "error_handling"
                },
                "param_5": {
                    "1": "option_2"
                },
                "param_6": {
                    "1": "option_3"
                },
                "param_7": {
                    "1": "option_4"
                },
                "printf": {
                    "1": "print"
                },
                "DAT_0010b7c4": {
                    "1": "is_flag_set"
                }
            }
        },
        "FUN_00102f9f": {
            "entrypoint": "0x00102f9f",
            "current_name": "print_error_and_return_00102f9f",
            "code": "\nundefined  [16] print_error_and_return_00102f9f(void)\n\n{\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  print_error_message_00106530(*DAT_0010b780);\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = 0xffffffff;\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00102f9f": "print_error_and_return_00102f9f",
                "unaff_retaddr": "return_address",
                "auVar1": "return_value"
            },
            "calling": [
                "FUN_00104fa0"
            ],
            "called": [
                "FUN_00106530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102f9f": {
                    "1": "print_error_and_return_invalid",
                    "17": "print_error_and_return",
                    "4": "print_error_message_and_return",
                    "3": "print_and_return_error_message"
                },
                "unaff_retaddr": {
                    "29": "return_address"
                },
                "auVar1": {
                    "2": "result",
                    "1": "updated_return_value",
                    "5": "return_value"
                }
            }
        },
        "FUN_00102fc3": {
            "entrypoint": "0x00102fc3",
            "current_name": "check_compilation_00102fc3",
            "code": "\nulong check_compilation_00102fc3(undefined8 error_message,undefined8 param2)\n\n{\n  char last_char;\n  ulong length1;\n  char *string_1;\n  char *string_2;\n  uint flag;\n  long result1;\n  long result2;\n  size_t length_1;\n  size_t length_2;\n  char *str1;\n  char *str2;\n  ulong comparison_result;\n  ulong var5;\n  ulong offset_1;\n  undefined8 pointer;\n  long pointer2;\n  bool is_equal;\n  \n  pointer = *DAT_0010b780;\n  print_error_message();\n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,pointer,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,param2,DAT_0010b768);\n  if ((result1 == 0) || (pointer2 = result2, result2 == 0)) {\n    result2 = print_error_message(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  comparison_result = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  length1 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  offset_1 = *(long *)(result1 + 0x10) + comparison_result;\n  var5 = *(long *)(pointer2 + 0x10) + length1;\n  is_equal = offset_1 < var5;\n  if ((offset_1 != var5) || (is_equal = comparison_result < length1, comparison_result != length1)) {\n    return (ulong)(-(uint)is_equal | 1);\n  }\n  string_1 = *(char **)(result1 + 8);\n  string_2 = *(char **)(pointer2 + 8);\n  length_1 = strlen(string_1);\n  length_2 = strlen(string_2);\n  str1 = strstr(string_1,\"gnu_compiled\");\n  if (str1 == (char *)0x0) {\n    str2 = strstr(string_1,\"gcc2_compiled\");\n    str1 = strstr(string_2,\"gnu_compiled\");\n    if ((str1 == (char *)0x0) && (str1 = strstr(string_2,\"gcc2_compiled\"), str1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (str2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    str1 = strstr(string_2,\"gnu_compiled\");\n    if (str1 == (char *)0x0) {\n      str2 = strstr(string_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (str2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(pointer2 + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((length_1 < 3) || (string_1[length_1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((length_2 < 3) || (string_2[length_2 - 2] != '.')) goto LAB_00103202;\n      is_equal = false;\n      goto LAB_001031e7;\n    }\n    last_char = string_1[length_1 - 1];\n    is_equal = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((length_2 < 3) || (string_2[length_2 - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (length_2 < 3) {\n      return 0xffffffff;\n    }\n    if (string_2[length_2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_equal = true;\nLAB_001031e7:\n    if ((string_2[length_2 - 1] != 'o') && (string_2[length_2 - 1] != 'a')) {\n      if (is_equal) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_equal) {\n    return 1;\n  }\nLAB_00103202:\n  comparison_result = compare_strings(pointer,param2);\n  return comparison_result;\n}\n\n",
            "renaming": {
                "FUN_00102fc3": "check_compilation_00102fc3",
                "param_1": "error_message",
                "param_2": "param2",
                "__s": "string_1",
                "__s_00": "string_2",
                "uVar2": "length1",
                "uVar3": "flag",
                "lVar4": "result1",
                "lVar5": "result2",
                "sVar6": "length_1",
                "sVar7": "length_2",
                "pcVar8": "str1",
                "pcVar9": "str2",
                "uVar10": "comparison_result",
                "uVar11": "var5",
                "uVar12": "offset_1",
                "uVar13": "pointer",
                "unaff_R13": "pointer2",
                "bVar14": "is_equal",
                "cVar1": "last_char",
                "print_error_message_00106530": "print_error_message",
                "strlen": "get_string_length",
                "strstr": "find_substring",
                "abort": "terminate",
                "compare_strings_00104fa0": "compare_strings"
            },
            "calling": [
                "FUN_00105050"
            ],
            "called": [
                "FUN_00106530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102fc3": {
                    "1": "improved_check_compilation",
                    "4": "check_compiled_status",
                    "3": "check_binary_compatibility",
                    "2": "check_compiled_versions",
                    "5": "check_compilation"
                },
                "param_1": {
                    "2": "file1",
                    "1": "file_ptr_1",
                    "5": "error_message",
                    "3": "param1"
                },
                "param_2": {
                    "1": "version_param",
                    "2": "file2",
                    "3": "param2"
                },
                "__s": {
                    "1": "filename_string",
                    "6": "string_1",
                    "2": "file_name1",
                    "4": "str1",
                    "5": "string1"
                },
                "__s_00": {
                    "1": "file2",
                    "5": "string2",
                    "6": "string_2",
                    "2": "file_name2",
                    "4": "str2"
                },
                "uVar2": {
                    "1": "offset_1",
                    "2": "length1"
                },
                "uVar3": {
                    "1": "length_2",
                    "15": "flag",
                    "6": "flags"
                },
                "lVar4": {
                    "6": "result1",
                    "1": "file1_data",
                    "2": "file1_info"
                },
                "lVar5": {
                    "1": "comp_result_b",
                    "6": "result2",
                    "2": "file_info2"
                },
                "sVar6": {
                    "1": "len_str1",
                    "3": "length1",
                    "2": "str1_length"
                },
                "sVar7": {
                    "1": "file_permission_length",
                    "2": "file_name2_length",
                    "3": "length_2"
                },
                "pcVar8": {
                    "1": "compilation_type_1",
                    "3": "search_result1",
                    "2": "substring_1"
                },
                "pcVar9": {
                    "1": "target_gcc_string",
                    "3": "str2",
                    "2": "substring_2"
                },
                "uVar10": {
                    "2": "address1",
                    "1": "offset1",
                    "4": "result",
                    "9": "comparison_result",
                    "3": "compare_result"
                },
                "uVar11": {
                    "1": "comparison_offset_1"
                },
                "uVar12": {
                    "1": "address2",
                    "2": "offset_1"
                },
                "uVar13": {
                    "1": "binary_library",
                    "3": "data"
                },
                "unaff_R13": {
                    "1": "offset_r13",
                    "2": "l_var5"
                },
                "bVar14": {
                    "1": "is_flag_set",
                    "3": "is_match",
                    "2": "comparison_flag",
                    "4": "is_less",
                    "5": "is_equal"
                },
                "cVar1": {
                    "6": "last_char",
                    "1": "last_character"
                },
                "print_error_message_00106530": {
                    "1": "print_error_message"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "strstr": {
                    "1": "find_substring"
                },
                "abort": {
                    "1": "terminate"
                },
                "compare_strings_00104fa0": {
                    "1": "compare_strings"
                }
            }
        },
        "FUN_00102fd2": {
            "entrypoint": "0x00102fd2",
            "current_name": "check_binary_compatibility_00102fd2",
            "code": "\nulong check_binary_compatibility_00102fd2(undefined8 binary_path_1,undefined8 binary_path_2)\n\n{\n  char last_char;\n  ulong first_result;\n  char *string1;\n  char *string2;\n  uint flag;\n  long result1;\n  long result2;\n  size_t file1_length;\n  size_t file2_length;\n  char *match_1;\n  char *match_2;\n  ulong comparison_result;\n  ulong offset1;\n  ulong offset2;\n  long error_message;\n  bool is_equal;\n  \n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,binary_path_1,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,binary_path_2,DAT_0010b768);\n  if ((result1 == 0) || (error_message = result2, result2 == 0)) {\n    result2 = print_error_message_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  comparison_result = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  first_result = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  offset2 = *(long *)(result1 + 0x10) + comparison_result;\n  offset1 = *(long *)(error_message + 0x10) + first_result;\n  is_equal = offset2 < offset1;\n  if ((offset2 != offset1) || (is_equal = comparison_result < first_result, comparison_result != first_result)) {\n    return (ulong)(-(uint)is_equal | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(error_message + 8);\n  file1_length = strlen(string1);\n  file2_length = strlen(string2);\n  match_1 = strstr(string1,\"gnu_compiled\");\n  if (match_1 == (char *)0x0) {\n    match_2 = strstr(string1,\"gcc2_compiled\");\n    match_1 = strstr(string2,\"gnu_compiled\");\n    if ((match_1 == (char *)0x0) && (match_1 = strstr(string2,\"gcc2_compiled\"), match_1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (match_2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    match_1 = strstr(string2,\"gnu_compiled\");\n    if (match_1 == (char *)0x0) {\n      match_2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (match_2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(error_message + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((file1_length < 3) || (string1[file1_length - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((file2_length < 3) || (string2[file2_length - 2] != '.')) goto LAB_00103202;\n      is_equal = false;\n      goto LAB_001031e7;\n    }\n    last_char = string1[file1_length - 1];\n    is_equal = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((file2_length < 3) || (string2[file2_length - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (file2_length < 3) {\n      return 0xffffffff;\n    }\n    if (string2[file2_length - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_equal = true;\nLAB_001031e7:\n    if ((string2[file2_length - 1] != 'o') && (string2[file2_length - 1] != 'a')) {\n      if (is_equal) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_equal) {\n    return 1;\n  }\nLAB_00103202:\n  comparison_result = compare_strings_00104fa0(binary_path_1,binary_path_2);\n  return comparison_result;\n}\n\n",
            "renaming": {
                "param_1": "binary_path_1",
                "param_2": "binary_path_2",
                "uVar2": "first_result",
                "sVar6": "file1_length",
                "sVar7": "file2_length",
                "pcVar8": "match_1",
                "pcVar9": "match_2",
                "uVar10": "comparison_result",
                "uVar11": "offset1",
                "uVar12": "offset2",
                "unaff_R13": "error_message",
                "bVar13": "is_equal",
                "__s": "string1",
                "__s_00": "string2",
                "cVar1": "last_char",
                "FUN_00102fd2": "check_binary_compatibility_00102fd2",
                "lVar4": "result1",
                "lVar5": "result2",
                "uVar3": "flag"
            },
            "calling": [
                "FUN_00104d5b"
            ],
            "called": [
                "strstr",
                "FUN_00104fa0",
                "FUN_00106530",
                "abort",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "binary_path1",
                    "5": "file_path_1",
                    "1": "input_file_path_1",
                    "6": "binary_path_1"
                },
                "param_2": {
                    "2": "binary_2",
                    "1": "object_path2",
                    "5": "file2",
                    "6": "binary_path_2"
                },
                "uVar2": {
                    "1": "length_2"
                },
                "sVar6": {
                    "1": "length_file1",
                    "2": "length1",
                    "4": "file1_length"
                },
                "sVar7": {
                    "1": "binary2_size",
                    "4": "file2_length",
                    "2": "length2"
                },
                "pcVar8": {
                    "1": "str_match_1",
                    "2": "gnu_compiled"
                },
                "pcVar9": {
                    "1": "ptr_str2",
                    "2": "substring2"
                },
                "uVar10": {
                    "4": "compare_result",
                    "1": "address_1",
                    "8": "result",
                    "10": "comparison_result"
                },
                "uVar11": {
                    "1": "file2_end",
                    "2": "file2_offset"
                },
                "uVar12": {
                    "1": "first_result_offset",
                    "2": "file1_offset"
                },
                "unaff_R13": {
                    "1": "temp1",
                    "3": "error_message",
                    "2": "error_code"
                },
                "bVar13": {
                    "1": "is_extension_valid",
                    "2": "comparison_flag",
                    "3": "is_equal"
                },
                "__s": {
                    "1": "file_string1",
                    "4": "file1_content",
                    "2": "str1",
                    "3": "file1_contents",
                    "7": "string1"
                },
                "__s_00": {
                    "3": "file_content_2",
                    "1": "binary_str_2",
                    "7": "string2",
                    "4": "file2_content",
                    "2": "str2"
                },
                "cVar1": {
                    "1": "last_char_binary1",
                    "8": "last_char",
                    "2": "last_character"
                },
                "FUN_00102fd2": {
                    "1": "check_binary_compilations",
                    "7": "check_binary_compatibility",
                    "2": "check_binary_versions",
                    "3": "check_compiled_files"
                },
                "lVar4": {
                    "1": "length1",
                    "4": "file_info_1",
                    "2": "binary_info_1",
                    "5": "result1"
                },
                "lVar5": {
                    "1": "length2",
                    "3": "file_info_2",
                    "2": "binary_info_2",
                    "5": "result2"
                },
                "uVar3": {
                    "1": "is_file2_compiled_with_flag",
                    "16": "flag",
                    "4": "flags"
                }
            }
        },
        "FUN_00103238": {
            "entrypoint": "0x00103238",
            "current_name": "process_data_00103238",
            "code": "\n\n\nvoid process_data_00103238(void)\n\n{\n  long *ptr1;\n  void *ptr;\n  char *str;\n  long value;\n  char result;\n  int comparison_result;\n  long rbx;\n  void *ptr_var5;\n  uint index;\n  long r13;\n  long count;\n  ulong param10;\n  void *param12;\n  \n  ptr_var5 = DAT_0010b750;\n  if (_DAT_0010b7b0 == r13) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    index = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; index < DAT_0010b748; index = index + 1) {\n        ptr = *(void **)((long)ptr_var5 + (ulong)index * 8);\n        if (ptr != (void *)0x0) {\n          free(ptr);\n        }\n      }\n      free(DAT_0010b740);\n      free(ptr_var5);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(r13 + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  param12 = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = r13;\nLAB_00103296:\n  str = *(char **)(rbx + 8);\n  index = 0;\n  do {\n    if (DAT_0010b748 <= index) {\n      putc(10,standard_output);\n      return;\n    }\n    ptr_var5 = DAT_0010b738;\n    for (count = 0; ptr1 = (long *)((long)ptr_var5 + (ulong)index * 8),\n        *ptr1 != count && count <= *ptr1; count = count + 1) {\n      ptr1 = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)index * 8) + count * 8);\n      if ((((ptr1 != (long *)0x0) &&\n           (value = *ptr1, *(long *)(value + 0x20) == *(long *)(rbx + 0x20))) &&\n          (*(long *)(value + 0x10) == *(long *)(rbx + 0x10))) &&\n         (((comparison_result = strcmp(str,*(char **)(value + 8)), comparison_result == 0 &&\n           (result = (**(code **)(*(long *)(r13 + 8) + 0x240))(), ptr_var5 = DAT_0010b738,\n           result != '\\0')) && (param12 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",param12,param10 >> 0x20);\n        index = DAT_0010b748;\n        break;\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00103238": "process_data_00103238",
                "__ptr": "ptr",
                "__s1": "str",
                "plVar1": "ptr1",
                "lVar2": "value",
                "cVar3": "result",
                "iVar4": "comparison_result",
                "unaff_RBX": "rbx",
                "pvVar5": "ptr_var5",
                "uVar6": "index",
                "unaff_R13": "r13",
                "lVar7": "count",
                "param_10": "param10",
                "param_12": "param12",
                "_stdout": "standard_output"
            },
            "calling": [
                "FUN_00105110"
            ],
            "called": [
                "FUN_00103c00",
                "xmalloc",
                "bfd_map_over_sections",
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103238": {
                    "1": "find_and_print_matches",
                    "5": "process_sections",
                    "2": "reverse_sections_and_print",
                    "3": "find_matching_strings",
                    "7": "process_data"
                },
                "__ptr": {
                    "21": "ptr",
                    "1": "current_section",
                    "5": "section_pointer",
                    "2": "section_ptr"
                },
                "__s1": {
                    "1": "search_string",
                    "2": "string_to_compare",
                    "4": "string1",
                    "5": "section_name",
                    "11": "str"
                },
                "plVar1": {
                    "1": "pointer_variable1",
                    "2": "current_section"
                },
                "lVar2": {
                    "1": "symbol_address",
                    "4": "section_address",
                    "6": "value",
                    "3": "entry_value"
                },
                "cVar3": {
                    "1": "section_match_flag",
                    "2": "compare_result",
                    "10": "result",
                    "3": "comparison_result"
                },
                "iVar4": {
                    "3": "strcmp_result",
                    "2": "var4",
                    "1": "int_variable4",
                    "10": "comparison_result"
                },
                "unaff_RBX": {
                    "1": "section_header",
                    "8": "rbx",
                    "5": "param1",
                    "2": "rbx_value"
                },
                "pvVar5": {
                    "1": "section_header_data",
                    "2": "data1",
                    "4": "ptr_var5"
                },
                "uVar6": {
                    "1": "loop_index",
                    "2": "var6",
                    "4": "section_index",
                    "12": "index",
                    "3": "counter"
                },
                "unaff_R13": {
                    "1": "register_r13",
                    "2": "param3",
                    "8": "r13",
                    "3": "param2"
                },
                "lVar7": {
                    "1": "index",
                    "2": "counter",
                    "4": "count",
                    "3": "var7"
                },
                "param_10": {
                    "1": "section_index",
                    "2": "param_10",
                    "6": "param10",
                    "3": "param3",
                    "4": "param1"
                },
                "param_12": {
                    "1": "data",
                    "4": "param2",
                    "2": "parameter12",
                    "3": "section_name",
                    "6": "param12"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "_DAT_0010b7b0": {
                    "1": "previous_header_address"
                },
                "DAT_0010b740": {
                    "1": "section_data_allocated"
                },
                "DAT_0010b750": {
                    "1": "section_pointer_allocated"
                },
                "DAT_0010b738": {
                    "1": "section_name_allocated"
                },
                "DAT_0010b748": {
                    "1": "num_sections"
                }
            }
        },
        "FUN_00103463": {
            "entrypoint": "0x00103463",
            "current_name": "print_matching_records_00103463",
            "code": "\n\n\nvoid print_matching_records_00103463(void)\n\n{\n  long *current_ptr;\n  long current_value;\n  char comparison_result;\n  int comparison_result;\n  long base_address;\n  char *error_message;\n  undefined8 *function_pointer;\n  long loop_counter;\n  long base_address;\n  undefined8 counter;\n  ulong value;\n  long line_number;\n  \n  print_error_message(*function_pointer);\n  do {\n    counter._4_4_ = counter._4_4_ + 1;\n    if (DAT_0010b748 <= counter._4_4_) {\n      putc(10,stdout_buffer);\n      return;\n    }\n    base_address = DAT_0010b738;\n    for (loop_counter = 0; current_ptr = (long *)(base_address + (ulong)counter._4_4_ * 8),\n        *current_ptr != loop_counter && loop_counter <= *current_ptr; loop_counter = loop_counter + 1) {\n      current_ptr = **(long ***)(*(long *)(DAT_0010b750 + (ulong)counter._4_4_ * 8) + loop_counter * 8);\n      if ((((current_ptr != (long *)0x0) &&\n           (current_value = *current_ptr, *(long *)(current_value + 0x20) == *(long *)(base_address + 0x20))) &&\n          (*(long *)(current_value + 0x10) == *(long *)(base_address + 0x10))) &&\n         (((comparison_result = strcmp(error_message,*(char **)(current_value + 8)), comparison_result == 0 &&\n           (comparison_result = (**(code **)(function_pointer[1] + 0x240))(), base_address = DAT_0010b738, comparison_result != '\\0')) &&\n          (line_number != 0)))) {\n        printf(\"\\t%s:%u\",line_number,value >> 0x20);\n        counter._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00103463": "print_matching_records_00103463",
                "unaff_R12": "error_message",
                "unaff_R13": "function_pointer",
                "unaff_R15": "base_address",
                "param_8": "counter",
                "param_10": "value",
                "in_stack_00000050": "line_number",
                "plVar1": "current_ptr",
                "lVar2": "current_value",
                "cVar3": "comparison_result",
                "iVar4": "comparison_result",
                "lVar5": "base_address",
                "lVar6": "loop_counter",
                "print_error_message_00106530": "print_error_message",
                "_stdout": "stdout_buffer"
            },
            "calling": [
                "FUN_00105110"
            ],
            "called": [
                "strcmp",
                "FUN_00106530",
                "printf",
                "putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103463": {
                    "1": "process_data",
                    "3": "print_matching_records",
                    "2": "print_error_and_compare"
                },
                "unaff_R12": {
                    "1": "string_variable",
                    "7": "error_message",
                    "2": "file_name",
                    "6": "input_string"
                },
                "unaff_R13": {
                    "1": "function_pointer_array",
                    "2": "print_function",
                    "4": "function_pointers",
                    "5": "function_pointer",
                    "3": "function_ptr"
                },
                "unaff_R15": {
                    "1": "user_input",
                    "2": "input_data",
                    "6": "base_address"
                },
                "param_8": {
                    "2": "index",
                    "1": "item_counter",
                    "3": "count",
                    "4": "record_index",
                    "15": "counter"
                },
                "param_10": {
                    "1": "input_value",
                    "2": "data_size",
                    "8": "value"
                },
                "in_stack_00000050": {
                    "1": "other_value",
                    "11": "line_number",
                    "10": "filename",
                    "5": "file_name"
                },
                "plVar1": {
                    "1": "subrecord_pointer",
                    "2": "current_ptr"
                },
                "lVar2": {
                    "1": "entry_value",
                    "2": "temp_value"
                },
                "cVar3": {
                    "1": "is_equal",
                    "4": "result",
                    "7": "comparison_result"
                },
                "iVar4": {
                    "1": "str_compare_result",
                    "5": "string_comparison_result",
                    "9": "comparison_result"
                },
                "lVar5": {
                    "1": "entry_array_base",
                    "3": "base_address",
                    "2": "start_address"
                },
                "lVar6": {
                    "1": "current_entry_index",
                    "2": "iteration_counter",
                    "4": "loop_counter",
                    "3": "current_index"
                },
                "print_error_message_00106530": {
                    "1": "print_error_message"
                },
                "DAT_0010b748": {
                    "1": "num_entries"
                },
                "_stdout": {
                    "1": "stdout_buffer"
                },
                "DAT_0010b738": {
                    "1": "data_array_start"
                },
                "DAT_0010b750": {
                    "1": "pointer_array"
                }
            }
        },
        "FUN_0010351b": {
            "entrypoint": "0x0010351b",
            "current_name": "print_function_name_0010351b",
            "code": "\nvoid print_function_name_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010351b": "print_function_name_0010351b",
                "printf": "print"
            },
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010351b": {
                    "1": "print_function_name_if_data_is_zero",
                    "14": "print_function_name"
                },
                "DAT_0010b818": {
                    "1": "check_flag",
                    "3": "flag"
                },
                "printf": {
                    "5": "print_formatted_string",
                    "2": "print_statement",
                    "1": "print_string",
                    "7": "print"
                },
                "PTR_0010b818": {
                    "1": "data_variable"
                },
                "": {
                    "4": "",
                    "1": "line_separator"
                },
                "<unnamed_variable_1>": {
                    "1": "flag"
                },
                "msg": {
                    "2": "message"
                },
                "...": {
                    "1": "..."
                }
            }
        },
        "FUN_00103533": {
            "entrypoint": "0x00103533",
            "current_name": "compare_and_execute_00103533",
            "code": "\nulong compare_and_execute_00103533(undefined8 *input1,undefined8 *input2)\n\n{\n  ulong result;\n  \n  if ((ulong)input1[1] < (ulong)input2[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)input2[1] < (ulong)input1[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (*(code *)(&PTR_FUN_0010acc0)[DAT_0010b7f4])(*input1,*input2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00103533": "compare_and_execute_00103533",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00104d5b"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103533": {
                    "2": "compare_values",
                    "1": "compare_param_values",
                    "22": "compare_and_execute",
                    "3": "compare_and_call_function"
                },
                "param_1": {
                    "3": "value_1",
                    "5": "first_value",
                    "1": "array_1",
                    "10": "input1"
                },
                "param_2": {
                    "3": "value2",
                    "1": "pointer2",
                    "5": "second_value",
                    "10": "input2"
                },
                "uVar1": {
                    "22": "result",
                    "4": "return_value"
                },
                "<original_function_name>": {
                    "1": "calculate_result"
                }
            }
        },
        "FUN_00103573": {
            "entrypoint": "0x00103573",
            "current_name": "print_strings_00103573",
            "code": "\nvoid print_strings_00103573(undefined8 *string1,undefined8 *string2,undefined8 unused_param,undefined8 param_4)\n\n{\n  if (string1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string1);\n  }\n  printf(\"%s:\",*string2,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103573": "print_strings_00103573",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "unused_param",
                "printf": "print_output"
            },
            "calling": [
                "FUN_001053b0"
            ],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103573": {
                    "1": "print_strings_with_label",
                    "19": "print_strings",
                    "2": "print_string"
                },
                "param_1": {
                    "2": "label_1",
                    "1": "string_param_1",
                    "9": "string_1",
                    "3": "label",
                    "10": "string1"
                },
                "param_2": {
                    "1": "message_2",
                    "10": "string2",
                    "9": "string_2",
                    "2": "label2"
                },
                "param_3": {
                    "1": "string3",
                    "3": "unused",
                    "5": "param_3",
                    "15": "unused_param"
                },
                "param_4": {
                    "1": "label4",
                    "2": "unused",
                    "4": "string3",
                    "5": "param_4"
                },
                "*param_1": {
                    "1": "string_value_1"
                },
                "*param_2": {
                    "1": "text_value"
                },
                "printf": {
                    "1": "print_output"
                },
                "*param_3": {
                    "1": "unused_param_value"
                },
                "*param_4": {
                    "1": "extra_label_value"
                },
                "<original_function_name>": {
                    "1": "print_strings"
                },
                "<param_1>": {
                    "1": "first_string"
                },
                "<param_2>": {
                    "1": "second_string"
                },
                "<param_3>": {
                    "1": "unused_param"
                },
                "<param_4>": {
                    "1": "third_string"
                }
            }
        },
        "FUN_001035a2": {
            "entrypoint": "0x001035a2",
            "current_name": "print_symbol_info_001035a2",
            "code": "\nvoid print_symbol_info_001035a2(void)\n\n{\n  long *rbx;\n  long symbol_address;\n  \n  if (rbx[2] == 0) {\n    symbol_address = rbx[1];\n  }\n  else {\n    symbol_address = *(long *)(rbx[2] + 0x38);\n  }\n  if (symbol_address != 0) {\n    putchar(0x20);\n    if (rbx[2] == 0) {\n      symbol_address = rbx[1];\n    }\n    else {\n      symbol_address = *(long *)(rbx[2] + 0x38);\n    }\n    print_symbol_info_001035a2(symbol_address);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*rbx + 8));\n  if (*(char *)(*rbx + 8) != '-') {\n    print_modified_string(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*rbx + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*rbx + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*rbx + 0x20));\n  print_modified_string(&DAT_0010712c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001035a2": "print_symbol_info_001035a2",
                "unaff_RBX": "rbx",
                "lVar1": "symbol_address",
                "putchar": "print_character",
                "print_symbol_info_001054d0": "print_symbol_info",
                "printf": "print_formatted",
                "print_modified_string_00104740": "print_modified_string"
            },
            "calling": [
                "FUN_001053c0"
            ],
            "called": [
                "FUN_001054d0",
                "FUN_00104740",
                "printf",
                "putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001035a2": {
                    "3": "print_symbol_information",
                    "1": "print_symbol_details",
                    "2": "print_symbol_and_string_info",
                    "20": "print_symbol_info"
                },
                "unaff_RBX": {
                    "2": "data_ptr",
                    "7": "rbx",
                    "1": "ptr_values",
                    "4": "symbol_info",
                    "3": "array_ptr"
                },
                "lVar1": {
                    "1": "symbol",
                    "5": "symbol_info",
                    "17": "symbol_address"
                },
                "putchar": {
                    "6": "print_character",
                    "3": "print_char"
                },
                "print_symbol_info_001054d0": {
                    "1": "print_symbol_info_details",
                    "8": "print_symbol_info"
                },
                "printf": {
                    "1": "print_formatted_output",
                    "6": "print_formatted"
                },
                "*unaff_RBX": {
                    "1": "array_value"
                },
                "print_modified_string_00104740": {
                    "9": "print_modified_string"
                },
                "DAT_0010712c": {
                    "1": "modified_string_buffer"
                },
                "DAT_0010b238": {
                    "1": "format_string1"
                },
                "DAT_0010b23d": {
                    "1": "format_string_0010b23d"
                },
                "print_char": {
                    "1": "print_char"
                },
                "print_modified_string": {
                    "1": "print_modified_string"
                }
            }
        },
        "FUN_001036a7": {
            "entrypoint": "0x001036a7",
            "current_name": "print_strings_001036a7",
            "code": "\nvoid print_strings_001036a7(undefined8 *string1,undefined8 *string2,undefined8 unused_param,undefined8 param_4)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (string1 != (undefined8 *)0x0) {\n      printf(\"%s:\",*string1);\n    }\n    printf(\"%s:\",*string2,param_4);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_001036a7": "print_strings_001036a7",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "unused_param",
                "printf": "print_formatted"
            },
            "calling": [],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001036a7": {
                    "2": "print_info",
                    "1": "print_arguments",
                    "4": "print_data",
                    "6": "print_strings"
                },
                "param_1": {
                    "1": "file_name",
                    "3": "string_1",
                    "5": "string1",
                    "4": "message1"
                },
                "param_2": {
                    "1": "string2_ptr",
                    "5": "message_2",
                    "2": "string_param_2",
                    "3": "string_2",
                    "4": "message2"
                },
                "param_3": {
                    "1": "param_value_1",
                    "2": "unused",
                    "4": "param_3",
                    "3": "param3",
                    "15": "unused_param"
                },
                "param_4": {
                    "1": "additional_message",
                    "4": "param_4",
                    "2": "unused_param2",
                    "3": "string3"
                },
                "printf": {
                    "1": "print_statement"
                },
                "*param_1": {
                    "1": "text_1"
                },
                "*param_2": {
                    "1": "text_2"
                },
                "DAT_0010b818": {
                    "1": "data_flag",
                    "3": "flag"
                },
                "<unchanged>": {
                    "1": "<unchanged>"
                }
            }
        },
        "FUN_001036e0": {
            "entrypoint": "0x001036e0",
            "current_name": "print_message_001036e0",
            "code": "\nvoid print_message_001036e0(undefined8 *title,undefined8 *message)\n\n{\n  if (title != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*title);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "title",
                "param_2": "message"
            },
            "calling": [
                "FUN_001064a0"
            ],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001036e0": {
                    "1": "print_log_message",
                    "6": "print_formatted_message",
                    "22": "print_message"
                },
                "param_1": {
                    "2": "title",
                    "1": "message_header"
                },
                "param_2": {
                    "1": "message_ptr",
                    "3": "default_message",
                    "19": "message"
                },
                "*param_1": {
                    "1": "message_type_string",
                    "2": "module_name"
                },
                "*param_2": {
                    "3": "message",
                    "1": "message_string"
                }
            }
        },
        "FUN_0010370a": {
            "entrypoint": "0x0010370a",
            "current_name": "print_symbol_info_0010370a",
            "code": "\nvoid print_symbol_info_0010370a(void)\n\n{\n  char is_undefined;\n  ushort symbol_class;\n  int asprintf_result;\n  long *print_width;\n  int *errno_location;\n  undefined8 error_string;\n  long symbol_info;\n  ulong rbx;\n  byte symbol_class;\n  ulong masked_rbx;\n  char *symbol_type;\n  \n  print_width = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  masked_rbx = rbx & 0xffffffff;\n  print_error_and_exit(print_width,masked_rbx);\n  print_modified_string(\"%-20s|\",print_width,0,masked_rbx);\n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*print_width + 8));\n  if (is_undefined == '\\0') {\n    print_symbol_info_0010370a(*(undefined8 *)*print_width);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    print_formatted(\"        \");\n  }\n  else {\n    print_formatted(\"                \");\n  }\n  print_formatted(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*print_width + 8));\n  if (*(char *)(*print_width + 8) == '-') {\n    print_formatted(\"%18s|  \",*(undefined8 *)(*print_width + 0x20));\n    print_formatted(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*print_width + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (print_width[2] == 0) {\n    if (print_width[3] != 0) {\n      symbol_info = *(long *)(print_width[3] + 0x30);\n      is_undefined = *(char *)(symbol_info + 0x28);\n      if (is_undefined == 'g') goto LAB_00103983;\n      if (is_undefined == 'h') {\n        symbol_type = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        symbol_type = \"Block\";\n      }\n      else if (*(ushort *)(symbol_info + 0x26) == 0) {\n        symbol_type = \"None\";\n      }\n      else {\n        symbol_class = *(ushort *)(symbol_info + 0x26) >> 4 & 3;\n        if (symbol_class == 2) {\n          symbol_type = \"Function\";\n        }\n        else if (symbol_class == 3) {\n          symbol_type = \"Array\";\n        }\n        else {\n          if (symbol_class != 1) {\n            free_memory(DAT_0010b730);\n            symbol_class = *(ushort *)(symbol_info + 0x26);\n            symbol_class = *(byte *)(symbol_info + 0x28);\n            symbol_type = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintf_result = allocate_and_format_string(&DAT_0010b730,symbol_type,(ulong)symbol_class,(ulong)symbol_class);\n            symbol_type = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbol_type = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    print_formatted(\"                  |\");\n  }\n  else {\n    symbol_class = *(byte *)(print_width[2] + 0x48) & 0xf;\n    switch(symbol_class) {\n    case 0:\n      symbol_type = \"NOTYPE\";\n      break;\n    case 1:\n      symbol_type = \"OBJECT\";\n      break;\n    case 2:\n      symbol_type = \"FUNC\";\n      break;\n    case 3:\n      symbol_type = \"SECTION\";\n      break;\n    case 4:\n      symbol_type = \"FILE\";\n      break;\n    case 5:\n      symbol_type = \"COMMON\";\n      break;\n    case 6:\n      symbol_type = \"TLS\";\n      break;\n    default:\n      free_memory(DAT_0010b728);\n      symbol_type = \"<processor specific>: %d\";\n      if ((2 < symbol_class - 0xd) && (symbol_type = \"<OS specific>: %d\", 2 < symbol_class - 10)) {\n        symbol_type = \"<unknown>: %d\";\n      }\n      symbol_type = (char *)dcgettext(0,symbol_type,5);\n      asprintf_result = allocate_and_format_string(&DAT_0010b728,symbol_type,(ulong)symbol_class);\n      symbol_type = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintf_result < 0) {\n        errno_location = __errno_location();\n        error_string = xstrerror(*errno_location);\n        print_error_and_exit(&DAT_0010712d,error_string);\nLAB_00103983:\n        symbol_type = \"File\";\n      }\n    }\nLAB_001039c0:\n    print_formatted(\"%18s|\",symbol_type);\n  }\n  if (print_width[2] == 0) {\n    if (print_width[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      print_formatted(\"        \");\n    }\n    else {\n      print_formatted(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(print_width[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_0010370a();\n  }\n  symbol_info = print_width[2];\n  if ((symbol_info != 0) || (symbol_info = print_width[3], symbol_info != 0)) {\n    print_formatted(\"|     |%s\",**(undefined8 **)(symbol_info + 0x20));\n    return;\n  }\nLAB_00103a54:\n  print_formatted(\"|     |\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "plVar4": "print_width",
                "uVar9": "masked_rbx",
                "cVar1": "is_undefined",
                "pcVar10": "symbol_type",
                "lVar7": "symbol_info",
                "uVar2": "symbol_class",
                "bVar8": "symbol_class",
                "iVar3": "asprintf_result",
                "piVar5": "errno_location",
                "dcgettext": "get_print_width_error_message",
                "print_error_and_exit_00106300": "print_error_and_exit",
                "print_modified_string_00104740": "print_modified_string",
                "bfd_is_undefined_symclass": "is_undefined_symclass",
                "print_symbol_info_001054d0": "print_symbol_info",
                "printf": "print_formatted",
                "free": "free_memory",
                "asprintf": "allocate_and_format_string",
                "__errno_location": "get_errno_location",
                "xstrerror": "get_error_string",
                "unaff_RBX": "rbx",
                "uVar6": "error_string"
            },
            "calling": [
                "FUN_001054d0"
            ],
            "called": [
                "FUN_00106300",
                "dcgettext"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010370a": {
                    "8": "print_symbol_information",
                    "1": "print_symbol",
                    "22": "print_symbol_info"
                },
                "plVar4": {
                    "4": "error_message",
                    "1": "error_string",
                    "24": "print_width"
                },
                "uVar9": {
                    "4": "unaff_rbx",
                    "13": "masked_rbx",
                    "1": "masked_unaff_symbol_info",
                    "2": "modified_rbx"
                },
                "cVar1": {
                    "9": "is_undefined_symclass",
                    "16": "is_undefined",
                    "1": "is_undefined_sym_class",
                    "2": "is_undefined_symbol"
                },
                "pcVar10": {
                    "2": "symbol_class",
                    "1": "symbol_type_name",
                    "3": "type_string",
                    "15": "symbol_type"
                },
                "lVar7": {
                    "2": "symbol_data",
                    "1": "temp_var",
                    "21": "symbol_info"
                },
                "uVar2": {
                    "1": "symbol_type_bits",
                    "2": "type_bits",
                    "5": "symbol_type",
                    "7": "symbol_class"
                },
                "bVar8": {
                    "1": "type_category",
                    "4": "type_code",
                    "2": "type_byte",
                    "5": "symbol_type",
                    "9": "symbol_class",
                    "3": "byte_value"
                },
                "iVar3": {
                    "2": "asprintf_ret_val",
                    "17": "asprintf_result",
                    "1": "int_value"
                },
                "piVar5": {
                    "6": "error_number",
                    "1": "error_location",
                    "16": "errno_location"
                },
                "*plVar4": {
                    "2": "print_width"
                },
                "dcgettext": {
                    "1": "get_print_width_error_message"
                },
                "print_error_and_exit_00106300": {
                    "2": "print_error_and_exit"
                },
                "print_modified_string_00104740": {
                    "2": "print_modified_string"
                },
                "bfd_is_undefined_symclass": {
                    "2": "is_undefined_symclass"
                },
                "print_symbol_info_001054d0": {
                    "2": "print_symbol_info"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "free": {
                    "2": "free_memory"
                },
                "asprintf": {
                    "1": "allocate_and_format_string"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "xstrerror": {
                    "1": "get_error_string"
                },
                "unaff_RBX": {
                    "3": "rbx",
                    "1": "input_rbx"
                },
                "uVar6": {
                    "5": "error_string",
                    "1": "str_error_ret_val",
                    "4": "error_message",
                    "3": "xstrerror_result"
                },
                "lVar11": {
                    "1": "line_or_block"
                },
                "uVar12": {
                    "1": "unknown_info"
                },
                "iVar13": {
                    "1": "sprintf_return_value"
                },
                "DAT_0010b7a8": {
                    "1": "constant_0x20"
                },
                "DAT_0010b23d": {
                    "1": "format_string1"
                },
                "DAT_0010b730": {
                    "1": "format_string2"
                },
                "DAT_0010b728": {
                    "1": "format_string3"
                }
            }
        },
        "FUN_00103729": {
            "entrypoint": "0x00103729",
            "current_name": "print_symbol_info_00103729",
            "code": "\nvoid print_symbol_info_00103729(long *symbol,undefined8 param)\n\n{\n  char is_undefined;\n  ushort symbol_type;\n  int asprintf_result;\n  int *errno_location;\n  undefined8 error_string;\n  long symbol_info;\n  byte symbol_type;\n  char *type_string;\n  \n  print_modified_string(\"%-20s|\",symbol,0,param);\n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol + 8));\n  if (is_undefined == '\\0') {\n    print_symbol_info_00103729(*(undefined8 *)*symbol);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    print_formatted_string(\"        \");\n  }\n  else {\n    print_formatted_string(\"                \");\n  }\n  print_formatted_string(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol + 8));\n  if (*(char *)(*symbol + 8) == '-') {\n    print_formatted_string(\"%18s|  \",*(undefined8 *)(*symbol + 0x20));\n    print_formatted_string(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol_info_ptr == 0) {\n    if (symbol_info2_ptr != 0) {\n      symbol_info = *(long *)(symbol_info2_ptr + 0x30);\n      is_undefined = *(char *)(symbol_info + 0x28);\n      if (is_undefined == 'g') goto LAB_00103983;\n      if (is_undefined == 'h') {\n        type_string = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        type_string = \"Block\";\n      }\n      else if (*(ushort *)(symbol_info + 0x26) == 0) {\n        type_string = \"None\";\n      }\n      else {\n        symbol_type = *(ushort *)(symbol_info + 0x26) >> 4 & 3;\n        if (symbol_type == 2) {\n          type_string = \"Function\";\n        }\n        else if (symbol_type == 3) {\n          type_string = \"Array\";\n        }\n        else {\n          if (symbol_type != 1) {\n            free_memory(DAT_0010b730);\n            symbol_type = *(ushort *)(symbol_info + 0x26);\n            symbol_type = *(byte *)(symbol_info + 0x28);\n            type_string = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintf_result = allocate_and_format_string(&DAT_0010b730,type_string,(ulong)symbol_type,(ulong)symbol_type);\n            type_string = DAT_0010b730;\n            goto joined_label;\n          }\n          type_string = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    print_formatted_string(\"                  |\");\n  }\n  else {\n    symbol_type = *(byte *)(symbol_info_ptr + 0x48) & 0xf;\n    switch(symbol_type) {\n    case 0:\n      type_string = \"NOTYPE\";\n      break;\n    case 1:\n      type_string = \"OBJECT\";\n      break;\n    case 2:\n      type_string = \"FUNC\";\n      break;\n    case 3:\n      type_string = \"SECTION\";\n      break;\n    case 4:\n      type_string = \"FILE\";\n      break;\n    case 5:\n      type_string = \"COMMON\";\n      break;\n    case 6:\n      type_string = \"TLS\";\n      break;\n    default:\n      free_memory(DAT_0010b728);\n      type_string = \"<processor specific>: %d\";\n      if ((2 < symbol_type - 0xd) && (type_string = \"<OS specific>: %d\", 2 < symbol_type - 10)) {\n        type_string = \"<unknown>: %d\";\n      }\n      type_string = (char *)dcgettext(0,type_string,5);\n      asprintf_result = allocate_and_format_string(&DAT_0010b728,type_string,(ulong)symbol_type);\n      type_string = DAT_0010b728;\njoined_label:\n      if (asprintf_result < 0) {\n        errno_location = __errno_location();\n        error_string = xstrerror(*errno_location);\n        print_error_and_exit(&DAT_0010712d,error_string);\nLAB_00103983:\n        type_string = \"File\";\n      }\n    }\nLAB_001039c0:\n    print_formatted_string(\"%18s|\",type_string);\n  }\n  if (symbol_info_ptr == 0) {\n    if (symbol_info1_ptr != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      print_formatted_string(\"        \");\n    }\n    else {\n      print_formatted_string(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol_info_ptr + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_00103729();\n  }\n  symbol_info = symbol_info_ptr;\n  if ((symbol_info != 0) || (symbol_info = symbol_info2_ptr, symbol_info != 0)) {\n    print_formatted_string(\"|     |%s\",**(undefined8 **)(symbol_info + 0x20));\n    return;\n  }\nLAB_00103a54:\n  print_formatted_string(\"|     |\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "param_1": "symbol",
                "param_2": "param",
                "cVar1": "is_undefined",
                "uVar2": "symbol_type",
                "iVar3": "asprintf_result",
                "piVar4": "errno_location",
                "uVar5": "error_string",
                "lVar6": "symbol_info",
                "bVar7": "symbol_type",
                "pcVar8": "type_string",
                "print_modified_string_00104740": "print_modified_string",
                "bfd_is_undefined_symclass": "is_undefined_symbol_class",
                "print_symbol_info_001054d0": "print_symbol_info",
                "printf": "print_formatted_string",
                "param_1[2]": "symbol_info_ptr",
                "param_1[3]": "symbol_info2_ptr",
                "dcgettext": "get_text",
                "free": "free_memory",
                "print_error_and_exit_00106300": "print_error_and_exit",
                "__errno_location": "get_errno_location",
                "xstrerror": "get_error_string",
                "param_1[1]": "symbol_info1_ptr",
                "joined_r0x00103964": "joined_label",
                "asprintf": "allocate_and_format_string"
            },
            "calling": [],
            "called": [
                "asprintf",
                "bfd_is_undefined_symclass",
                "xstrerror",
                "FUN_00106300",
                "FUN_001054d0",
                "FUN_00104740",
                "__errno_location",
                "printf",
                "free",
                "dcgettext"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103729": {
                    "1": "print_modified_string",
                    "8": "print_symbol_information",
                    "2": "print_symbol_details",
                    "20": "print_symbol_info"
                },
                "param_1": {
                    "4": "symbols",
                    "1": "symbol_pointer",
                    "3": "symbol_info",
                    "16": "symbol"
                },
                "param_2": {
                    "1": "format_modifier",
                    "9": "info",
                    "2": "param_value",
                    "13": "param"
                },
                "cVar1": {
                    "5": "is_undefined_symclass",
                    "18": "is_undefined",
                    "1": "is_undefined_symbol",
                    "3": "symbol_class"
                },
                "uVar2": {
                    "2": "symclass",
                    "1": "upper_byte",
                    "7": "symbol_type",
                    "3": "symbol_class"
                },
                "iVar3": {
                    "2": "status",
                    "1": "format_result",
                    "4": "result",
                    "16": "asprintf_result"
                },
                "piVar4": {
                    "3": "error_location",
                    "2": "errno_loc",
                    "17": "errno_location",
                    "1": "var4"
                },
                "uVar5": {
                    "9": "error_string",
                    "1": "xstr_error",
                    "8": "error_message",
                    "2": "str_error",
                    "3": "xstrerror_result"
                },
                "lVar6": {
                    "1": "info_pointer",
                    "3": "info_address",
                    "13": "symbol_info",
                    "2": "symbol_info_2"
                },
                "bVar7": {
                    "1": "byte_var",
                    "4": "type",
                    "2": "type_flag",
                    "6": "symbol_class"
                },
                "pcVar8": {
                    "1": "symbol_type_name",
                    "4": "type_name",
                    "7": "type_string",
                    "2": "symbol_type",
                    "3": "symbol_category"
                },
                "print_modified_string_00104740": {
                    "3": "print_modified_string"
                },
                "bfd_is_undefined_symclass": {
                    "1": "is_undefined_symclass",
                    "2": "is_undefined_symbol_class"
                },
                "print_symbol_info_001054d0": {
                    "3": "print_symbol_info"
                },
                "DAT_0010b7a8": {
                    "1": "flag"
                },
                "printf": {
                    "1": "print"
                },
                "DAT_0010b23d": {
                    "1": "constant2"
                },
                "param_1[2]": {
                    "1": "flag"
                },
                "param_1[3]": {
                    "1": "data"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "free": {
                    "2": "free_memory"
                },
                "print_error_and_exit_00106300": {
                    "3": "print_error_and_exit"
                },
                "__errno_location": {
                    "1": "get_error_number_location",
                    "2": "get_errno_location"
                },
                "xstrerror": {
                    "2": "get_error_string",
                    "1": "get_x_str_error"
                },
                "&DAT_0010712d": {
                    "1": "error_prompt"
                },
                "param_1[1]": {
                    "1": "symbol_info1_ptr"
                },
                "printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*param_1 + 0x1a))": {
                    "1": "print_timestamp"
                },
                "goto LAB_00103a54": {
                    "1": "skip_printing"
                },
                "*(short *)(*param_1 + 0x1a)": {
                    "1": "timestamp_value"
                },
                "*(long *)(param_1[3] + 0x30)": {
                    "1": "info_ptr"
                },
                "*(char *)(lVar6 + 0x28)": {
                    "1": "info_flag"
                },
                "*(ushort *)(lVar6 + 0x26)": {
                    "1": "info_type"
                },
                "*(byte *)(lVar6 + 0x28)": {
                    "1": "info_byte"
                },
                "joined_r0x00103964": {
                    "1": "joined_label"
                },
                "printf(: %18s|: ,*(undefined8 *)(*param_1 + 0x20))": {
                    "1": "print_type"
                },
                "printf(\"        \")": {
                    "1": "print_whitespace"
                },
                "printf(\"                \")": {
                    "1": "print_whitespace"
                },
                "*(byte *)(param_1[2] + 0x48)": {
                    "1": "type_specifier"
                },
                "asprintf": {
                    "1": "allocate_and_format_string"
                },
                "DAT_0010712d": {
                    "1": "constant3"
                },
                "**(undefined8 **)(lVar6 + 0x20)": {
                    "1": "data_value"
                },
                "**(undefined8 **)(param_1[3] + 0x20)": {
                    "1": "data_value2"
                }
            }
        },
        "FUN_00103a66": {
            "entrypoint": "0x00103a66",
            "current_name": "check_and_print_symbol_info_00103a66",
            "code": "\nvoid check_and_print_symbol_info_00103a66(void)\n\n{\n  long base_address;\n  \n  if (*(long *)(base_address + 8) != 0) {\n    print_symbol_info();\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103a66": "check_and_print_symbol_info_00103a66",
                "unaff_RBX": "base_address",
                "print_symbol_info_0010651a": "print_symbol_info"
            },
            "calling": [
                "FUN_001064b0"
            ],
            "called": [
                "FUN_0010651a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103a66": {
                    "1": "check_if_symbol_info_available",
                    "4": "check_symbol_info",
                    "8": "check_and_print_symbol_info",
                    "6": "print_symbol_info_if_not_null",
                    "2": "print_symbol_or_return"
                },
                "unaff_RBX": {
                    "1": "symbol_pointer",
                    "2": "symbol_info_address",
                    "15": "base_address",
                    "4": "symbol_address"
                },
                "print_symbol_info_0010651a": {
                    "3": "print_symbol_info"
                }
            }
        },
        "FUN_00103a78": {
            "entrypoint": "0x00103a78",
            "current_name": "print_error_message_00103a78",
            "code": "\n\n\nvoid print_error_message_00103a78(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,error_message,return_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "unaff_RBX": "error_code",
                "uVar1": "error_message",
                "unaff_retaddr": "return_address"
            },
            "calling": [
                "FUN_00106540"
            ],
            "called": [
                "dcgettext"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103a78": {
                    "4": "print_error",
                    "1": "print_error_info",
                    "2": "handle_error",
                    "23": "print_error_message"
                },
                "unaff_RBX": {
                    "19": "error_code",
                    "12": "error_flag"
                },
                "uVar1": {
                    "24": "error_message",
                    "2": "error_text",
                    "1": "error_details"
                },
                "unaff_retaddr": {
                    "31": "return_address"
                }
            }
        },
        "FUN_00103ab9": {
            "entrypoint": "0x00103ab9",
            "current_name": "FUNC_00103ab9",
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00103aba": {
            "entrypoint": "0x00103aba",
            "current_name": "FUNC_00103aba",
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00103abb": {
            "entrypoint": "0x00103abb",
            "current_name": "FUNC_00103abb",
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00103abc": {
            "entrypoint": "0x00103abc",
            "current_name": "FUNC_00103abc",
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00103abd": {
            "entrypoint": "0x00103abd",
            "current_name": "FUNC_00103abd",
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00103abe": {
            "entrypoint": "0x00103abe",
            "current_name": "FUNC_00103abe",
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00103abf": {
            "entrypoint": "0x00103abf",
            "current_name": "print_symbol_info_00103abf",
            "code": "\nvoid print_symbol_info_00103abf(undefined8 binary_name,undefined8 symbol_name)\n\n{\n  char *format_string;\n  \n  format_string = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    format_string = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  format_string = (char *)dcgettext(0,format_string,5);\n  printf(format_string,binary_name,symbol_name);\n  format_string = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    format_string = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  format_string = (char *)dcgettext(0,format_string,5);\n  printf(format_string);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103abf": "print_symbol_info_00103abf",
                "param_1": "binary_name",
                "param_2": "symbol_name",
                "pcVar1": "format_string",
                "dcgettext": "get_translated_string",
                "printf": "print_formatted_string"
            },
            "calling": [],
            "called": [
                "printf",
                "dcgettext"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103abf": {
                    "3": "print_undefined_symbols",
                    "5": "print_symbol_table",
                    "1": "print_symbols_info",
                    "7": "print_symbols",
                    "11": "print_symbol_info"
                },
                "param_1": {
                    "4": "file_name",
                    "5": "filename",
                    "1": "module",
                    "2": "source_file"
                },
                "param_2": {
                    "1": "symbol_library",
                    "5": "library_name",
                    "8": "symbol_name",
                    "4": "file_name",
                    "2": "function_name"
                },
                "pcVar1": {
                    "1": "header_message",
                    "16": "format_string",
                    "2": "header_format",
                    "4": "symbol_format"
                },
                "dcgettext": {
                    "2": "translate_text",
                    "1": "get_translated_message",
                    "6": "get_translated_string"
                },
                "printf": {
                    "2": "print_formatted",
                    "1": "print_formatted_text"
                },
                "DAT_0010b7e8": {
                    "1": "undefined_symbols"
                },
                "DAT_0010b7a8": {
                    "1": "default_size"
                },
                "char *pcVar1": {
                    "1": "symbol_format"
                }
            }
        },
        "FUN_00103b2b": {
            "entrypoint": "0x00103b2b",
            "current_name": "print_message_00103b2b",
            "code": "\nvoid print_message_00103b2b(undefined8 message,undefined8 tag)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",message,tag);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103b2b": "print_message_00103b2b",
                "param_1": "message",
                "param_2": "tag",
                "printf": "print_formatted_info"
            },
            "calling": [],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103b2b": {
                    "2": "print_if_debug_mode",
                    "1": "print_or_return",
                    "3": "print_if_debug_enabled",
                    "10": "print_message"
                },
                "param_1": {
                    "1": "source",
                    "3": "message_header",
                    "9": "message",
                    "2": "message1",
                    "7": "function_name"
                },
                "param_2": {
                    "1": "function_name",
                    "2": "message2",
                    "3": "message",
                    "4": "tag"
                },
                "printf": {
                    "1": "print_formatted_info"
                }
            }
        },
        "FUN_00103b49": {
            "entrypoint": "0x00103b49",
            "current_name": "print_modified_string_00103b49",
            "code": "\nvoid print_modified_string_00103b49(undefined8 input_string,undefined8 length)\n\n{\n  print_modified_string_00103b49(&DAT_0010712d,input_string,0,length);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103b49": "print_modified_string_00103b49",
                "param_1": "input_string",
                "param_2": "length",
                "print_modified_string_00104740": "print_modified_string"
            },
            "calling": [],
            "called": [
                "FUN_00104740"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103b49": {
                    "29": "print_modified_string",
                    "1": "print_modified_text"
                },
                "param_1": {
                    "1": "message_pointer",
                    "2": "string_pointer",
                    "3": "string_ptr",
                    "5": "string_param",
                    "7": "input_string"
                },
                "param_2": {
                    "3": "modifier",
                    "1": "str2",
                    "10": "length",
                    "4": "length_param",
                    "2": "string_length"
                },
                "DAT_0010712d": {
                    "2": "modified_string"
                },
                "print_modified_string_00104740": {
                    "3": "print_modified_string",
                    "1": "print_modified_string_internal"
                }
            }
        },
        "FUN_00103b5d": {
            "entrypoint": "0x00103b5d",
            "current_name": "print_matching_formats_00103b5d",
            "code": "\n\n\nvoid print_matching_formats_00103b5d(long *format_strings)\n\n{\n  undefined8 matching_formats;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  matching_formats = DAT_0010b820;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,matching_formats);\n  for (current_format = format_strings; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free(format_strings);\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "format_strings",
                "__format": "format_string",
                "plVar2": "current_format",
                "uVar1": "matching_formats",
                "_stdout": "standard_output",
                "_stderr": "standard_error"
            },
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "fflush",
                "dcgettext",
                "free",
                "fputc",
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103b5d": {
                    "31": "print_matching_formats"
                },
                "param_1": {
                    "3": "strings",
                    "15": "format_strings",
                    "5": "format_list",
                    "2": "formats_array",
                    "4": "formats",
                    "1": "matching_formats"
                },
                "__format": {
                    "1": "format_str",
                    "5": "format_message",
                    "2": "message_format",
                    "19": "format_string"
                },
                "plVar2": {
                    "5": "current_string",
                    "4": "current_format_string",
                    "1": "current_param",
                    "17": "current_format"
                },
                "uVar1": {
                    "1": "format_specifier",
                    "2": "data",
                    "4": "default_format",
                    "7": "matching_formats"
                },
                "_stdout": {
                    "5": "standard_output",
                    "1": "_stdout"
                },
                "_stderr": {
                    "5": "standard_error",
                    "1": "_stderr"
                }
            }
        },
        "FUN_00103bec": {
            "entrypoint": "0x00103bec",
            "current_name": "compare_and_return_result_00103bec",
            "code": "\nundefined  [16] compare_and_return_result_00103bec(void)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined return_value [16];\n  \n  comparison_result = compare_binary_files_00105050();\n  return_value._0_4_ = -comparison_result;\n  return_value._4_4_ = 0;\n  return_value._8_8_ = result;\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00103bec": "compare_and_return_result_00103bec",
                "in_RAX": "result",
                "iVar1": "comparison_result",
                "auVar2": "return_value"
            },
            "calling": [],
            "called": [
                "FUN_00105050"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103bec": {
                    "1": "compare_files_and_get_result",
                    "3": "compare_and_return_difference",
                    "2": "compare_binary_files",
                    "16": "compare_and_return_result"
                },
                "in_RAX": {
                    "2": "file_handle",
                    "1": "original_rax_value",
                    "7": "result",
                    "3": "file_size",
                    "4": "file_comparison_result"
                },
                "iVar1": {
                    "1": "binary_comparison_result",
                    "8": "file_comparison_result",
                    "20": "comparison_result"
                },
                "auVar2": {
                    "9": "return_value",
                    "1": "result_data",
                    "5": "result",
                    "3": "result_array",
                    "2": "return_data"
                }
            }
        },
        "FUN_00103bf6": {
            "entrypoint": "0x00103bf6",
            "current_name": "compare_and_return_result_00103bf6",
            "code": "\nundefined  [16] compare_and_return_result_00103bf6(void)\n\n{\n  int comparison_result;\n  undefined8 input_value;\n  undefined result [16];\n  \n  comparison_result = compare_strings();\n  result._0_4_ = -comparison_result;\n  result._4_4_ = 0;\n  result._8_8_ = input_value;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00103bf6": "compare_and_return_result_00103bf6",
                "in_RAX": "input_value",
                "iVar1": "comparison_result",
                "auVar2": "result",
                "compare_strings_00104fa0": "compare_strings"
            },
            "calling": [],
            "called": [
                "FUN_00104fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103bf6": {
                    "1": "compare_strings_and_return_negative",
                    "24": "compare_and_return_result",
                    "2": "compare_and_return_negative"
                },
                "in_RAX": {
                    "1": "input_string",
                    "18": "input_value",
                    "2": "input_data"
                },
                "iVar1": {
                    "24": "comparison_result",
                    "5": "string_comparison_result",
                    "1": "result"
                },
                "auVar2": {
                    "5": "return_value",
                    "2": "reversed_result",
                    "6": "result",
                    "4": "result_array",
                    "1": "output_buffer"
                },
                "compare_strings_00104fa0": {
                    "1": "compare_strings"
                }
            }
        },
        "FUN_00103c00": {
            "entrypoint": "0x00103c00",
            "current_name": "process_relocation_00103c00",
            "code": "\nundefined8\nprocess_relocation_00103c00(undefined8 *input_data,long relocation_address,undefined (*relocation_data) [16],undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined8 *reloc_ptr;\n  undefined auxiliary_var [16];\n  long reloc_upper_bound;\n  undefined8 allocated_memory;\n  undefined8 canonicalized_reloc;\n  \n  **(long **)*relocation_data = relocation_address;\n  if ((*(byte *)(relocation_address + 0x24) & 4) == 0) {\n    **(undefined8 **)(*relocation_data + 8) = 0;\n    **(undefined8 **)relocation_data[1] = 0;\n  }\n  else {\n    reloc_upper_bound = bfd_get_reloc_upper_bound();\n    if (-1 < reloc_upper_bound) {\n      reloc_ptr = *(undefined8 **)(*relocation_data + 8);\n      allocated_memory = xmalloc(reloc_upper_bound);\n      canonicalized_reloc = *(undefined8 *)(relocation_data[1] + 8);\n      *reloc_ptr = allocated_memory;\n      reloc_ptr = *(undefined8 **)relocation_data[1];\n      canonicalized_reloc = bfd_canonicalize_reloc(input_data,relocation_address,**(undefined8 **)(*relocation_data + 8),canonicalized_reloc);\n      *reloc_ptr = canonicalized_reloc;\n      if (-1 < **(long **)relocation_data[1]) goto LAB_00103c7c;\n    }\n    print_error_message(*input_data);\n  }\nLAB_00103c7c:\n  reloc_upper_bound = *(long *)(*relocation_data + 8) + 8;\n  *(long *)relocation_data[1] = *(long *)relocation_data[1] + 8;\n  auxiliary_var._8_4_ = (int)reloc_upper_bound;\n  auxiliary_var._0_8_ = *(long *)*relocation_data + 8;\n  auxiliary_var._12_4_ = (int)((ulong)reloc_upper_bound >> 0x20);\n  *relocation_data = auxiliary_var;\n  return param_5;\n}\n\n",
            "renaming": {
                "FUN_00103c00": "process_relocation_00103c00",
                "param_1": "input_data",
                "param_2": "relocation_address",
                "param_3": "relocation_data",
                "puVar1": "reloc_ptr",
                "auVar2": "auxiliary_var",
                "lVar3": "reloc_upper_bound",
                "uVar4": "allocated_memory",
                "uVar5": "canonicalized_reloc",
                "print_error_message_00106530": "print_error_message"
            },
            "calling": [
                "FUN_00103238"
            ],
            "called": [
                "bfd_get_reloc_upper_bound",
                "FUN_00106530",
                "bfd_canonicalize_reloc",
                "xmalloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103c00": {
                    "1": "relocate_and_canonicalize",
                    "16": "process_relocation",
                    "2": "update_relocation"
                },
                "param_1": {
                    "1": "data",
                    "2": "bfd_handle",
                    "4": "input",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "input_length",
                    "3": "relocation_address",
                    "2": "relocation_value"
                },
                "param_3": {
                    "1": "output_ptr",
                    "5": "relocation_info",
                    "2": "data",
                    "6": "relocation_data"
                },
                "param_4": {
                    "1": "data_param1",
                    "4": "param4",
                    "12": "param_4",
                    "3": "unused_param_4"
                },
                "param_5": {
                    "1": "arg5",
                    "2": "unused_param_5",
                    "4": "param5",
                    "11": "param_5"
                },
                "puVar1": {
                    "1": "alloc_ptr",
                    "3": "ptr1",
                    "2": "pointer_var1"
                },
                "auVar2": {
                    "1": "modified_data",
                    "2": "reloc_info",
                    "4": "auxiliary_var"
                },
                "lVar3": {
                    "9": "upper_bound",
                    "1": "reloc_upper_bound_size",
                    "11": "reloc_upper_bound",
                    "2": "size",
                    "3": "reloc_size"
                },
                "uVar4": {
                    "1": "reloc_buf_ptr",
                    "15": "allocated_memory"
                },
                "uVar5": {
                    "1": "canonicalized_result",
                    "3": "canonical_reloc",
                    "2": "relocated_data",
                    "16": "canonicalized_reloc"
                },
                "print_error_message_00106530": {
                    "3": "print_error_message"
                },
                "*param_3": {
                    "1": "reloc_entry"
                },
                "**(long **)*param_3": {
                    "1": "reloc_entry_addr"
                },
                "**(undefined8 **)(*param_3 + 8)": {
                    "1": "reloc_section_ptr"
                },
                "**(undefined8 **)param_3[1]": {
                    "1": "file_ptr"
                }
            }
        },
        "FUN_00103ca0": {
            "entrypoint": "0x00103ca0",
            "current_name": "print_symbols_usage_00103ca0",
            "code": "\nvoid print_symbols_usage_00103ca0(FILE *output_file,int exit_code)\n\n{\n  long target_name;\n  int total_length;\n  int symbol_length;\n  char *message;\n  long index;\n  size_t string_length;\n  long *target_list;\n  long *current_target;\n  char **demangler;\n  char *separator;\n  uint local_variable;\n  \n  target_name = DAT_0010b820;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(output_file,message,target_name);\n  message = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*message == ' ') {\n    target_name = 1;\n    do {\n      index = target_name;\n      target_name = index + 1;\n    } while (message[index] == ' ');\n    local_variable = (uint)index;\n  }\n  else {\n    local_variable = 0;\n  }\n  total_length = fprintf(output_file,\"%s\",message);\n  separator = \"\";\n  for (demangler = (char **)&libiberty_demanglers; *demangler != (char *)0x0; demangler = demangler + 3) {\n    string_length = strlen(*demangler);\n    if (0x4a < (long)total_length + string_length) {\n      fprintf(output_file,\"%.1s\\n\",separator);\n      separator = \"\";\n      total_length = fprintf(output_file,\"%.*s\",(ulong)local_variable,message);\n    }\n    symbol_length = fprintf(output_file,\"%s\\\"%s\\\"\",separator,*demangler);\n    total_length = total_length + symbol_length;\n    separator = \", \";\n  }\n  fputc(10,output_file);\n  message = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(output_file,message);\n  target_name = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target_name);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    target_name = *current_target;\n    current_target = current_target + 1;\n    if (target_name == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "renaming": {
                "FUN_00103ca0": "print_symbols_usage_00103ca0",
                "param_1": "output_file",
                "param_2": "exit_code",
                "lVar1": "target_name",
                "iVar2": "total_length",
                "iVar3": "symbol_length",
                "pcVar4": "message",
                "pcVar9": "separator",
                "lVar5": "index",
                "sVar6": "string_length",
                "__ptr": "target_list",
                "plVar7": "current_target",
                "ppcVar8": "demangler",
                "local_3c": "local_variable",
                "fprintf": "write_to_file",
                "dcgettext": "get_localized_string",
                "fputc": "write_character",
                "strlen": "get_string_length",
                "free": "release_memory",
                "exit": "exit_program",
                "bfd_target_list": "list_supported_targets"
            },
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "exit",
                "strlen",
                "fseek",
                "FUN_00102450",
                "dcgettext",
                "free",
                "fputc",
                "fprintf",
                "bfd_target_list"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103ca0": {
                    "1": "print_symbol_usage",
                    "7": "print_symbols_usage",
                    "2": "display_usage",
                    "6": "print_usage",
                    "5": "print_symbol_list"
                },
                "param_1": {
                    "19": "output_file",
                    "7": "file",
                    "2": "file_stream",
                    "3": "file_pointer"
                },
                "param_2": {
                    "30": "exit_code",
                    "1": "exit_status"
                },
                "lVar1": {
                    "2": "supported_targets",
                    "1": "target_arg",
                    "16": "target_name"
                },
                "iVar2": {
                    "11": "total_length",
                    "1": "characters_printed",
                    "6": "total_chars",
                    "2": "fprintf_result",
                    "3": "total_chars_printed"
                },
                "iVar3": {
                    "2": "length",
                    "3": "current_length",
                    "1": "characters_printed",
                    "4": "chars_written",
                    "7": "symbol_length",
                    "5": "chars_printed"
                },
                "pcVar4": {
                    "2": "msg",
                    "1": "symbol_format",
                    "18": "message",
                    "3": "localized_string",
                    "4": "text"
                },
                "pcVar9": {
                    "1": "demangler_separator",
                    "3": "symbol_separator",
                    "18": "separator",
                    "8": "delimiter"
                },
                "lVar5": {
                    "1": "spacing",
                    "2": "space_count",
                    "3": "current_index",
                    "15": "index"
                },
                "sVar6": {
                    "1": "symbol_len",
                    "4": "symbol_length",
                    "2": "length",
                    "16": "string_length"
                },
                "__ptr": {
                    "1": "bfd_target_list",
                    "28": "target_list"
                },
                "plVar7": {
                    "4": "target_ptr",
                    "3": "ptr_target",
                    "1": "target_list_iterator",
                    "5": "ptr",
                    "6": "current_target",
                    "2": "target_pointer"
                },
                "ppcVar8": {
                    "3": "demangler_list",
                    "1": "libiberty_demanglers",
                    "2": "demangler_ptr",
                    "11": "demangler"
                },
                "local_3c": {
                    "2": "local_var",
                    "1": "local_size",
                    "4": "local_variable",
                    "3": "space_count"
                },
                "DAT_0010b820": {
                    "1": "target_name"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "fputc": {
                    "1": "write_character"
                },
                "strlen": {
                    "1": "get_length",
                    "2": "get_string_length"
                },
                "free": {
                    "1": "deallocate"
                },
                "exit": {
                    "1": "terminate_program",
                    "2": "exit_program"
                },
                "bfd_target_list": {
                    "1": "list_supported_targets"
                }
            }
        },
        "FUN_00104370": {
            "entrypoint": "0x00104370",
            "current_name": "initialize_output_format_00104370",
            "code": "\nundefined ** initialize_output_format_00104370(undefined *output_format,undefined8 data)\n\n{\n  undefined8 error_message;\n  undefined **initialized_data;\n  \n  switch(*output_format) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_FUN_0010b260 = (undefined *)&PTR_FUN_0010ace0;\n    return &PTR_FUN_0010ace0;\n  default:\n    error_message = dcgettext(0,\"%s: invalid output format\",5);\n    print_error_and_exit(error_message,output_format);\n    error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    print_warning_message(error_message);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    initialized_data = (undefined **)initialize_data_00104397(output_format,data,3);\n    return initialized_data;\n  case 0x50:\n  case 0x70:\n    initialized_data = (undefined **)initialize_data_00104397(output_format,data,2);\n    return initialized_data;\n  case 0x53:\n  case 0x73:\n    initialized_data = (undefined **)initialize_data_00104397(output_format,data,1);\n    return initialized_data;\n  }\n}\n\n",
            "renaming": {
                "FUN_00104370": "initialize_output_format_00104370",
                "param_1": "output_format",
                "param_2": "data",
                "uVar1": "error_message",
                "ppuVar2": "initialized_data",
                "print_error_and_exit_00106300": "print_error_and_exit",
                "print_error_message_00106400": "print_warning_message"
            },
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "caseD_4a",
                "FUN_00104397",
                "FUN_00106300",
                "dcgettext"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104370": {
                    "1": "convert_format",
                    "23": "initialize_output_format",
                    "6": "initialize_output"
                },
                "param_1": {
                    "2": "input_format",
                    "7": "format",
                    "9": "output_format",
                    "3": "format_code",
                    "4": "format_identifier",
                    "1": "format_specifier"
                },
                "param_2": {
                    "2": "file_name",
                    "1": "format_length",
                    "4": "file_path",
                    "6": "data"
                },
                "uVar1": {
                    "27": "error_message",
                    "1": "error_string",
                    "3": "error_msg"
                },
                "ppuVar2": {
                    "2": "data_ptr",
                    "1": "data",
                    "26": "initialized_data"
                },
                "print_error_and_exit_00106300": {
                    "1": "print_error_and_exit"
                },
                "print_error_message_00106400": {
                    "1": "print_warning_message"
                }
            }
        },
        "FUN_00104397": {
            "entrypoint": "0x00104397",
            "current_name": "initialize_data_00104397",
            "code": "\nvoid initialize_data_00104397(undefined8 param1,undefined8 param2,int count)\n\n{\n  DAT_0010b7c0 = count;\n  PTR_PTR_FUN_0010b260 = (undefined *)(&PTR_FUN_0010ace0 + (long)count * 5);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00104397": "initialize_data_00104397",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "count"
            },
            "calling": [
                "caseD_4a",
                "FUN_00104370"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104397": {
                    "1": "set_parameters",
                    "4": "initialize_param",
                    "2": "initialize_data_structure",
                    "3": "set_param_value",
                    "13": "initialize_data"
                },
                "param_1": {
                    "1": "new_value1",
                    "5": "arg1",
                    "2": "parameter1",
                    "9": "param1",
                    "4": "data1"
                },
                "param_2": {
                    "1": "data_pointer2",
                    "5": "value2",
                    "9": "param2",
                    "2": "input2",
                    "4": "data2"
                },
                "param_3": {
                    "2": "index",
                    "1": "parameter_index",
                    "3": "param3",
                    "4": "size",
                    "6": "count"
                },
                "PTR_FUN_0010ace0": {
                    "1": "function_pointer_array",
                    "3": "function_pointer"
                },
                "PTR_PTR_FUN_0010b260": {
                    "1": "current_position",
                    "2": "pointer_to_function"
                },
                "DAT_0010b7c0": {
                    "1": "data_value",
                    "2": "data"
                }
            }
        },
        "FUN_001043d0": {
            "entrypoint": "0x001043d0",
            "current_name": "analyze_binary_file_001043d0",
            "code": "\n\n\nundefined4 analyze_binary_file_001043d0(char *file_path)\n\n{\n  char format_check;\n  int result;\n  undefined4 return_value;\n  int *errno_ptr;\n  undefined8 error_message;\n  undefined8 *bfd_handle;\n  long map_entry;\n  char *error_string;\n  undefined8 *archived_file;\n  undefined8 *previous_archived_file_handle;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    result = stat(file_path,&file_stat);\n    if (result < 0) {\nLAB_00102522:\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00106400(error_message,file_path);\n      }\n      else {\n        error_string = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00106400(error_message,file_path,error_string);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00106400(error_message,file_path);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (file_stat.st_size < 0) {\n        error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        print_error_message_00106400(error_message,file_path);\n      }\n      else if (file_stat.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          bfd_handle = (undefined8 *)bfd_openr(file_path,\"plugin\");\n        }\n        else {\n          bfd_handle = (undefined8 *)bfd_openr(file_path);\n        }\n        if (bfd_handle != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x8000;\n          }\n          format_check = bfd_check_format(bfd_handle,2);\n          if (format_check == '\\0') {\n            return_value = bfd_check_format_matches(bfd_handle,1,&file_stat);\n            if ((char)return_value == '\\0') goto LAB_001025ac;\n            get_architecture_00104670(bfd_handle);\n            (**(code **)PTR_PTR_FUN_0010b260)(file_path);\n            analyze_binary_code_001048e0(bfd_handle,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_FUN_0010b260 + 8))(*bfd_handle);\n            if ((_DAT_0010b7f0 != 0) &&\n               (map_entry = bfd_get_next_mapent(bfd_handle,0xffffffffffffffff,&file_stat), map_entry != -1)) {\n              error_string = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(error_string);\n              do {\n                archived_file = (undefined8 *)(**(code **)(bfd_handle[1] + 0x1e0))(bfd_handle,map_entry);\n                if (archived_file == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_stat.st_dev != 0) {\n                  print_modified_string_00104740(&DAT_0010712d,0,*(long *)file_stat.st_dev,bfd_handle);\n                  printf(\" in %s\\n\",*archived_file);\n                }\n                map_entry = bfd_get_next_mapent(bfd_handle,map_entry,&file_stat);\n              } while (map_entry != -1);\n            }\n            archived_file = (undefined8 *)0x0;\n            do {\n              do {\n                previous_archived_file_handle = archived_file;\n                archived_file = (undefined8 *)bfd_openr_next_archived_file(bfd_handle,previous_archived_file_handle);\n                if (archived_file == (undefined8 *)0x0) {\n                  result = bfd_get_error();\n                  if (result != 9) {\n                    print_error_message_00106530(*bfd_handle);\nLAB_00102516:\n                    print_error_message_00106530(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (previous_archived_file_handle != (undefined8 *)0x0) {\n                    bfd_close(previous_archived_file_handle);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                format_check = bfd_check_format_matches(archived_file,1,&file_stat);\n                if (format_check == '\\0') {\n                  print_error_message_00106540(*archived_file);\n                  result = bfd_get_error();\n                  if (result == 0xd) {\n                    print_matching_formats_00103b5d(file_stat.st_dev);\n                  }\n                }\n                else {\n                  get_architecture_00104670(archived_file);\n                  (**(code **)(PTR_PTR_FUN_0010b260 + 0x10))(*bfd_handle,*archived_file);\n                  analyze_binary_code_001048e0(archived_file,bfd_handle);\n                }\n              } while (previous_archived_file_handle == (undefined8 *)0x0);\n              bfd_close(previous_archived_file_handle);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (previous_archived_file_handle != archived_file);\n          }\nLAB_001044b4:\n          return_value = 1;\n          while (format_check = bfd_close(bfd_handle), format_check == '\\0') {\n            print_error_message_00106530(file_path);\nLAB_001025ac:\n            print_error_message_00106540(file_path);\n            result = bfd_get_error();\n            if (result == 0xd) {\n              print_matching_formats_00103b5d(file_stat.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return return_value;\n        }\n        print_error_message_00106540(file_path);\n      }\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00106400(error_message,file_path);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_001043d0": "analyze_binary_file_001043d0",
                "param_1": "file_path",
                "cVar1": "format_check",
                "iVar2": "result",
                "uVar3": "return_value",
                "piVar4": "errno_ptr",
                "uVar5": "error_message",
                "puVar6": "bfd_handle",
                "puVar9": "archived_file",
                "puVar10": "previous_archived_file_handle",
                "local_c8": "file_stat",
                "lVar7": "map_entry",
                "pcVar8": "error_string"
            },
            "calling": [
                "FUN_001055f0"
            ],
            "called": [
                "bfd_get_next_mapent",
                "FUN_001048e0",
                "strerror",
                "bfd_openr",
                "FUN_00103b5d",
                "printf",
                "stat",
                "FUN_00104670",
                "FUN_0010351b",
                "FUN_001062d0",
                "bfd_get_error",
                "bfd_openr_next_archived_file",
                "FUN_00106530",
                "FUN_00102670",
                "FUN_00104740",
                "__errno_location",
                "bfd_close",
                "dcgettext",
                "FUN_00106540",
                "bfd_check_format_matches",
                "FUN_00106400",
                "bfd_check_format",
                "FUN_0010249f"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001043d0": {
                    "2": "analyze_file",
                    "4": "check_and_analyze_binary",
                    "1": "validate_file",
                    "3": "check_binary_file",
                    "6": "analyze_binary_file",
                    "5": "check_file"
                },
                "param_1": {
                    "12": "filename",
                    "2": "file_name",
                    "1": "file",
                    "16": "file_path"
                },
                "cVar1": {
                    "9": "format_check_result",
                    "1": "check_format_result",
                    "6": "check_result",
                    "2": "format_result"
                },
                "iVar2": {
                    "1": "result_code",
                    "11": "result",
                    "8": "status",
                    "5": "stat_result",
                    "3": "error_code"
                },
                "uVar3": {
                    "15": "return_value",
                    "5": "return_val",
                    "1": "success_status",
                    "3": "success"
                },
                "piVar4": {
                    "1": "err_num_ptr",
                    "5": "errno_location",
                    "3": "error_ptr",
                    "11": "errno_ptr",
                    "2": "errno"
                },
                "uVar5": {
                    "2": "error_msg",
                    "20": "error_message",
                    "3": "warning_message",
                    "1": "err_msg"
                },
                "puVar6": {
                    "1": "bfd_object",
                    "4": "file_handle",
                    "8": "bfd_handle",
                    "6": "binary_file"
                },
                "puVar9": {
                    "15": "archived_file",
                    "10": "archived_file_handle",
                    "2": "archived_file_ptr",
                    "1": "archived_file_descriptor",
                    "3": "archive_file"
                },
                "puVar10": {
                    "5": "prev_archived_file",
                    "1": "prev_archived_file_descriptor",
                    "2": "next_archived_file",
                    "8": "previous_archived_file_handle"
                },
                "local_c8": {
                    "4": "file_info",
                    "9": "file_stats",
                    "1": "file_stat_info",
                    "13": "file_stat"
                },
                "lVar7": {
                    "2": "map_index",
                    "1": "archive_entry_index",
                    "10": "map_entry",
                    "5": "archive_index",
                    "3": "next_map_entry"
                },
                "pcVar8": {
                    "11": "error_string",
                    "2": "error_str",
                    "5": "error_message",
                    "1": "err_msg_str",
                    "7": "error_reason"
                },
                "DAT_0010b7d0": {
                    "1": "open_plugin"
                },
                "DAT_0010b804": {
                    "1": "check_format_flag"
                },
                "PTR_PTR_FUN_0010b260": {
                    "1": "function_pointers"
                },
                "_DAT_0010b7f0": {
                    "1": "next_mapent_flag"
                },
                "_DAT_0010b7b0": {
                    "1": "analyze_flag"
                },
                "_DAT_0010b7b8": {
                    "1": "another_flag"
                }
            }
        },
        "FUN_00104670": {
            "entrypoint": "0x00104670",
            "current_name": "get_architecture_00104670",
            "code": "\nvoid get_architecture_00104670(long input)\n\n{\n  int arch_size;\n  char *arch_string;\n  undefined *architecture_suffix;\n  char *architecture_string;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    architecture_string = **(char ***)(input + 8);\n    arch_string = strstr(architecture_string,\"64\");\n    arch_size = 0x40;\n    if (arch_string == (char *)0x0) {\n      arch_size = strcmp(architecture_string,\"mmo\");\n      arch_size = (-(uint)(arch_size == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = arch_size;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    architecture_string = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    architecture_string = \"08\";\n  }\n  else {\n    architecture_string = \"016\";\n  }\n  architecture_suffix = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        architecture_suffix = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concat(&DAT_001071d7,architecture_string,0,0);\n          return;\n        }\n        architecture_suffix = &DAT_001071cd;\n      }\n    }\n    else {\n      architecture_suffix = (undefined *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concat(&DAT_001071d7,architecture_string,architecture_suffix,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00104670": "get_architecture_00104670",
                "param_1": "input",
                "iVar1": "arch_size",
                "pcVar2": "arch_string",
                "puVar3": "architecture_suffix",
                "pcVar4": "architecture_string"
            },
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "strcmp",
                "strstr",
                "bfd_get_arch_size",
                "concat",
                "free",
                "FUN_001025f5"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104670": {
                    "1": "configure_arch_size",
                    "2": "determine_architecture",
                    "4": "get_architecture_size",
                    "6": "get_architecture"
                },
                "param_1": {
                    "1": "input_val",
                    "10": "input",
                    "2": "input_data",
                    "6": "input_param"
                },
                "iVar1": {
                    "14": "arch_size",
                    "1": "result_code",
                    "13": "architecture_size"
                },
                "pcVar2": {
                    "1": "architecture",
                    "5": "architecture_string",
                    "2": "architecture_name",
                    "3": "architecture_substring",
                    "6": "arch_string"
                },
                "puVar3": {
                    "1": "concatenation_string",
                    "3": "architecture_suffix",
                    "2": "format_specifier"
                },
                "pcVar4": {
                    "1": "substring_result",
                    "2": "arch_code",
                    "3": "architecture_string"
                },
                "DAT_0010b7a8": {
                    "2": "arch_size_result",
                    "1": "arch_size_value",
                    "5": "architecture_size"
                },
                "DAT_0010b7a0": {
                    "1": "dynamic_memory1",
                    "4": "concatenated_string"
                },
                "DAT_0010b7c0": {
                    "4": "constant_value",
                    "1": "arch_info_length",
                    "2": "length"
                },
                "DAT_0010b244": {
                    "1": "data_type_value",
                    "2": "constant_value"
                },
                "DAT_0010b7b0": {
                    "1": "compare_size"
                },
                "DAT_001071d0": {
                    "1": "first_string"
                },
                "DAT_001071ca": {
                    "1": "second_string"
                },
                "DAT_001071cd": {
                    "1": "third_string"
                },
                "DAT_001071d7": {
                    "1": "base_string"
                }
            }
        },
        "FUN_00104740": {
            "entrypoint": "0x00104740",
            "current_name": "print_modified_string_00104740",
            "code": "\n\n\nvoid print_modified_string_00104740(char *format_string,long *param_array,undefined8 *modified_string,long param_4)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int int_var;\n  size_t size;\n  char *char_ptr;\n  undefined8 *ptr2;\n  char *char_ptr2;\n  undefined8 *result_string;\n  ulong ulong_var1;\n  undefined8 ulong_var2;\n  undefined *ptr3;\n  undefined8 *ptr4;\n  char *temp_string;\n  undefined8 *temp_string2;\n  long long_var;\n  uint uint_var;\n  byte byte_var3;\n  char stack_array [9];\n  \n  byte_var3 = 0;\n  if (modified_string == (undefined8 *)0x0) {\n    modified_string = *(undefined8 **)(*param_array + 0x10);\n    if (DAT_0010b234 == 0) {\n      print_modified_string_00104740_00102739();\n      return;\n    }\nLAB_00104775:\n    ptr4 = modified_string;\n    if (DAT_0010b814 == 0) {\n      char_ptr = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        ptr4 = modified_string;\n        result_string = (undefined8 *)0x0;\n      }\n      else {\n        result_string = (undefined8 *)0x0;\n        if (modified_string != (undefined8 *)0x0) goto LAB_0010269d;\n        ptr4 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      char_ptr = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)ptr4 == '\\0') ||\n         (modified_string = (undefined8 *)bfd_demangle(param_4,ptr4,DAT_0010b248),\n         modified_string == (undefined8 *)0x0)) {\n        modified_string = ptr4;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        result_string = (undefined8 *)0x0;\n      }\n      else {\n        ptr4 = modified_string;\n        result_string = modified_string;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    ptr4 = modified_string;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(param_4 + 8) + 8) != 5) goto LAB_00104775;\n      char_ptr = strchr((char *)modified_string,0x40);\n      if (char_ptr == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (param_array == (long *)0x0) {\n              result_string = (undefined8 *)0x0;\n              printf(format_string,modified_string);\n            }\n            else {\n              if (param_array[2] != 0) {\n                print_and_free_001047d0();\n                return;\n              }\n              result_string = (undefined8 *)0x0;\n              printf(format_string,modified_string);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *char_ptr = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          result_string = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    char_ptr = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    ptr4 = modified_string;\n    result_string = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)modified_string;\n      modified_string = (undefined8 *)((long)modified_string + 1);\n      if (byte1 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) && (byte1 < 0xc0));\n    size = strlen((char *)ptr4);\n    temp_string2 = DAT_0010b790;\n    if (_DAT_0010b798 < size * 9) {\n      free(DAT_0010b790);\n      size = strlen((char *)ptr4);\n      _DAT_0010b798 = size * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      temp_string2 = DAT_0010b790;\n    }\n    while( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)ptr4;\n      ptr1 = (undefined8 *)((long)ptr4 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)temp_string2 = byte1;\n          temp_string2 = (undefined8 *)((long)temp_string2 + 1);\n          ptr4 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = temp_string2;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uint_var = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long_var = 2;\n                goto LAB_00102917;\n              case 4:\n                int_var = isatty(1);\n                if (int_var == 0) {\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                }\n                else {\n                  *(undefined *)(temp_string2 + 1) = 0;\n                  *temp_string2 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                  ptr2 = temp_string2 + 1;\n                }\n              case 2:\n                uint_var = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr4 >> 2 & 7),\n                        (ulong)((*(byte *)ptr4 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint_var = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 3;\nLAB_00102a62:\n                  for (ulong_var1 = (ulong)uint_var; ulong_var1 != 0; ulong_var1 = ulong_var1 - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + (ulong)byte_var3 * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte_var3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long_var = 3;\nLAB_00102917:\n                  ulong_var2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3c;\n                  }\n                  sprintf((char *)temp_string2,\"%c\",ulong_var2);\n                  *(undefined *)((long)temp_string2 + 3) = 0;\n                  ptr2 = (undefined8 *)(long_var + (long)ptr4);\n                  *(undefined2 *)((long)temp_string2 + 1) = 0x7830;\n                  char_ptr2 = (char *)((long)temp_string2 + 3);\n                  do {\n                    temp_string = char_ptr2;\n                    byte1 = *(byte *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + 1);\n                    sprintf(temp_string,\"%02x\",(ulong)byte1);\n                    char_ptr2 = temp_string + 2;\n                  } while (ptr4 != ptr2);\n                  ulong_var2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3e;\n                  }\n                  uint_var = (uint)long_var;\n                  sprintf(temp_string + 2,\"%c\",ulong_var2);\n                  ptr2 = (undefined8 *)(temp_string + 3);\n                  break;\n                case 4:\n                  int_var = isatty(1);\n                  if (int_var == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                  }\n                  else {\n                    *(undefined *)(temp_string2 + 1) = 0;\n                    *temp_string2 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                    ptr2 = temp_string2 + 1;\n                  }\n                case 2:\n                  uint_var = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (int_var = isatty(1), int_var != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uint_var = 3;\n                }\n              }\n              else {\n                byte2 = *(byte *)((long)ptr4 + 3);\n                if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long_var = 4;\n                  goto LAB_00102917;\n                case 4:\n                  int_var = isatty(1);\n                  if (int_var == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                  }\n                  else {\n                    *(undefined *)(temp_string2 + 1) = 0;\n                    *temp_string2 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                    ptr2 = temp_string2 + 1;\n                  }\n                case 2:\n                  uint_var = 4;\n                  int_var = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 2) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)int_var);\n                  goto LAB_00102a27;\n                default:\n                  uint_var = 4;\n                }\n              }\n            }\n            ulong_var1 = (ulong)(uint)((int)ptr2 - (int)temp_string2);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)temp_string2 = byte1;\n            uint_var = 1;\n            ulong_var1 = 1;\n          }\n          temp_string2 = (undefined8 *)((long)temp_string2 + ulong_var1);\n          ptr4 = (undefined8 *)((long)ptr1 + (ulong)(uint_var - 1));\n        }\n      }\n      else {\n        *(undefined *)temp_string2 = 0x5e;\n        *(byte *)((long)temp_string2 + 1) = byte1 + 0x40;\n        temp_string2 = (undefined8 *)((long)temp_string2 + 2);\n        ptr4 = ptr1;\n      }\n    }\n    *(undefined *)temp_string2 = 0;\n    ptr4 = ptr2;\n  }\njoined_r0x00104864:\n  if ((((param_array != (long *)0x0) && (param_array[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((char_ptr2 = (char *)(**(code **)(*(long *)(param_4 + 8) + 0x220))\n                                  (param_4,param_array[2],0,stack_array), char_ptr2 != (char *)0x0 &&\n      (*char_ptr2 != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((stack_array[0] == '\\0') && (*(long *)(param_array[2] + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    result_string = (undefined8 *)reconcat(result_string,ptr4,ptr3,char_ptr2,0);\n    ptr4 = result_string;\n  }\n  printf(format_string,ptr4);\n  if (char_ptr != (char *)0x0) {\n    *char_ptr = '@';\n  }\nLAB_001047ba:\n  free(result_string);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00104740": "print_modified_string_00104740",
                "param_1": "format_string",
                "param_2": "param_array",
                "param_3": "modified_string",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "int_var",
                "sVar5": "size",
                "pcVar6": "char_ptr",
                "puVar7": "ptr2",
                "pcVar8": "char_ptr2",
                "__ptr": "result_string",
                "uVar9": "ulong_var1",
                "uVar10": "ulong_var2",
                "puVar11": "ptr3",
                "puVar12": "ptr4",
                "lVar13": "long_var",
                "uVar14": "uint_var",
                "bVar15": "byte_var3",
                "acStack_39": "stack_array",
                "__s": "temp_string",
                "__s_00": "temp_string2"
            },
            "calling": [
                "FUN_001035a2",
                "FUN_001064b0",
                "FUN_001043d0",
                "FUN_00103b49",
                "FUN_00103729"
            ],
            "called": [
                "FUN_00102739"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104740": {
                    "29": "print_modified_string",
                    "2": "print_formatted_string"
                },
                "param_1": {
                    "31": "format_string"
                },
                "param_2": {
                    "1": "buffer",
                    "2": "file_ptr",
                    "8": "param_array",
                    "5": "pointer_array"
                },
                "param_3": {
                    "1": "symbol_name",
                    "4": "input_string",
                    "2": "demangled_name"
                },
                "param_4": {
                    "2": "param_value",
                    "3": "param",
                    "9": "param_4",
                    "1": "lng_var"
                },
                "puVar1": {
                    "4": "temp_pointer1",
                    "1": "ptr_one",
                    "3": "ptr_var1",
                    "11": "ptr1",
                    "5": "pointer_var1"
                },
                "bVar2": {
                    "13": "byte1",
                    "4": "byte_var2",
                    "1": "byte_one",
                    "2": "temp_byte1",
                    "10": "byte_var1"
                },
                "bVar3": {
                    "10": "byte_var2",
                    "1": "temp_var3",
                    "4": "byte_var3",
                    "13": "byte2",
                    "2": "temp_byte2"
                },
                "iVar4": {
                    "4": "int_var4",
                    "1": "int1",
                    "12": "int_var",
                    "3": "temp_int",
                    "5": "int_var1",
                    "2": "int_value"
                },
                "sVar5": {
                    "1": "length",
                    "4": "size_var",
                    "9": "string_length",
                    "2": "str_length"
                },
                "pcVar6": {
                    "1": "temp_var6",
                    "6": "char_ptr1",
                    "10": "char_ptr",
                    "2": "char_pointer"
                },
                "puVar7": {
                    "1": "undefined8_ptr",
                    "3": "temp_pointer2",
                    "2": "ptr_var2",
                    "10": "ptr2",
                    "4": "pointer_var2"
                },
                "pcVar8": {
                    "1": "char_ptr_two",
                    "3": "char_pointer2",
                    "10": "char_ptr2"
                },
                "__ptr": {
                    "1": "final_string",
                    "2": "reconstructed_string",
                    "3": "result_ptr",
                    "6": "result_string",
                    "5": "new_string"
                },
                "uVar9": {
                    "1": "temp_value",
                    "9": "ulong_var1",
                    "3": "ulong_var9"
                },
                "uVar10": {
                    "1": "temp_var10",
                    "14": "ulong_var2",
                    "2": "u_var10"
                },
                "puVar11": {
                    "3": "temp_pointer3",
                    "2": "pointer_var3",
                    "1": "temp_var11",
                    "9": "ptr3"
                },
                "puVar12": {
                    "1": "demangled_string_ptr",
                    "2": "pointer_var4",
                    "9": "ptr4",
                    "3": "pointer_var3"
                },
                "lVar13": {
                    "3": "long_var13",
                    "2": "long_value",
                    "1": "temp_long_var",
                    "13": "long_var",
                    "6": "long_var1"
                },
                "uVar14": {
                    "1": "temp_uint3",
                    "3": "uint_var14",
                    "2": "uint_value",
                    "13": "uint_var",
                    "6": "uint_var1"
                },
                "bVar15": {
                    "2": "byte_value",
                    "10": "byte_var3",
                    "1": "temp_var15",
                    "3": "byte3",
                    "5": "byte_var",
                    "4": "byte_var15"
                },
                "acStack_39": {
                    "2": "char_array1",
                    "1": "ac_stack",
                    "7": "char_array",
                    "14": "stack_array",
                    "4": "temp_array"
                },
                "__s": {
                    "1": "new_string",
                    "2": "str"
                },
                "__s_00": {
                    "1": "str2",
                    "2": "temp_string2"
                }
            }
        },
        "FUN_001047d0": {
            "entrypoint": "0x001047d0",
            "current_name": "print_and_free_001047d0",
            "code": "\nvoid print_and_free_001047d0(void)\n\n{\n  char *result_string;\n  void *concatenated_string;\n  undefined *flag;\n  void *formatted_string;\n  char *format_string;\n  long function_ptr;\n  \n  if (((DAT_0010b234 != 0) &&\n      (result_string = (char *)(**(code **)(*(long *)(function_ptr + 8) + 0x220))(), result_string != (char *)0x0))\n     && (*result_string != '\\0')) {\n    concatenated_string = (void *)reconcat();\n    formatted_string = concatenated_string;\n  }\n  printf(format_string,formatted_string);\n  if (flag != (undefined *)0x0) {\n    *flag = 0x40;\n  }\n  free(concatenated_string);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001047d0": "print_and_free_001047d0",
                "unaff_RBX": "concatenated_string",
                "unaff_R12": "flag",
                "unaff_R13": "formatted_string",
                "unaff_R14": "format_string",
                "unaff_R15": "function_ptr",
                "pcVar1": "result_string"
            },
            "calling": [
                "FUN_00102739",
                "FUN_0010268b"
            ],
            "called": [
                "reconcat",
                "printf",
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001047d0": {
                    "7": "print_formatted_string",
                    "8": "print_and_free",
                    "1": "print_formatted_output",
                    "4": "print_message",
                    "3": "print_result"
                },
                "unaff_RBX": {
                    "1": "allocated_memory",
                    "3": "reconstructed_string",
                    "2": "result_buffer",
                    "8": "concatenated_string",
                    "4": "buffer"
                },
                "unaff_R12": {
                    "1": "output_flag_ptr",
                    "8": "flag",
                    "3": "output_flag"
                },
                "unaff_R13": {
                    "1": "concatenated_message_pointer",
                    "2": "output_string",
                    "5": "concatenated_string",
                    "3": "result"
                },
                "unaff_R14": {
                    "1": "format_str",
                    "28": "format_string"
                },
                "unaff_R15": {
                    "1": "structure_address",
                    "2": "base_address"
                },
                "pcVar1": {
                    "2": "result_string",
                    "1": "function_result"
                }
            }
        },
        "FUN_001048e0": {
            "entrypoint": "0x001048e0",
            "current_name": "analyze_binary_code_001048e0",
            "code": "\n\n\nvoid analyze_binary_code_001048e0(ulong **input_data,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 ulong **output_data,ulong **output_data2)\n\n{\n  byte byte_var;\n  code *function_ptr;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined8 ulong_var;\n  long long_var;\n  ulong **temp_pointer1;\n  ulong **temp_pointer2;\n  long long_var2;\n  ulong *pointer_var;\n  ulong **unaff_rbx;\n  ulong **double_pointer_var3;\n  ulong **double_pointer_var4;\n  ulong **unaff_rbp;\n  ulong **double_pointer_var5;\n  ulong **double_pointer_var6;\n  ulong **double_pointer_var7;\n  ulong **double_pointer_var8;\n  ulong **double_pointer_var9;\n  ulong **unaff_r14;\n  ulong **unaff_r15;\n  bool bool_var;\n  byte byte_var2;\n  ulong **stack_var;\n  uint local_var1;\n  ulong *local_var2;\n  ulong **local_array [2];\n  \n  byte_var2 = 0;\n  local_var2 = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)input_data + 0x44) & 0x10) != 0)) {\n    temp_pointer2 = (ulong **)&local_var1;\n    temp_pointer1 = (ulong **)(*(code *)input_data[1][0x4d])(input_data,DAT_0010b80c != 0,local_array);\n    if ((long)temp_pointer1 < 0) {\n      if ((DAT_0010b80c != 0) && (int_var = bfd_get_error(), int_var == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        pointer_var = *input_data;\n        ulong_var = dcgettext(0,\"%s: no symbols\",5);\n        print_error_message_00106400(ulong_var,pointer_var);\n        return;\n      }\n      print_error_message_00106530(*input_data);\n      goto LAB_00102e9e;\n    }\n    if (temp_pointer1 != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (local_var1 == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byte_var = *(byte *)((long)input_data + 0x4a);\n      double_pointer_var4 = input_data;\n      do {\n        if ((byte_var & 0x10) != 0) {\n          unaff_rbx = (ulong **)*double_pointer_var4;\n          DAT_0010b230 = '\\0';\n          ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          print_error_message_00106400(ulong_var);\n        }\n        double_pointer_var5 = local_array[0];\n        unaff_r14 = (ulong **)(ulong)local_var1;\n        bool_var = DAT_0010b80c != 0;\n        temp_pointer2 = local_array[0];\n        unaff_r15 = (ulong **)(*(code *)double_pointer_var4[1][0x41])(double_pointer_var4);\n        double_pointer_var3 = unaff_rbx;\n        unaff_rbp = (ulong **)(ulong)bool_var;\n        input_data = double_pointer_var4;\n        if (unaff_r15 == (ulong **)0x0) goto LAB_00102ea7;\n        double_pointer_var8 = (ulong **)((long)temp_pointer1 * (long)unaff_r14);\n        temp_pointer1 = (ulong **)((long)double_pointer_var5 + (long)double_pointer_var8);\n        input_data = double_pointer_var5;\n        double_pointer_var3 = double_pointer_var5;\njoined_r0x001049a4:\n        if (input_data < temp_pointer1) {\n          do {\n            temp_pointer2 = (ulong **)(*(code *)double_pointer_var4[1][0x4e])(double_pointer_var4,bool_var,input_data,unaff_r15);\n            double_pointer_var8 = unaff_r15;\n            if (temp_pointer2 == (ulong **)0x0) goto LAB_00102eb0;\n            pointer_var = temp_pointer2[1];\n            double_pointer_var8 = temp_pointer1;\n            if (((pointer_var == (ulong *)0x0) || (*(char *)pointer_var != '_')) ||\n               (*(char *)((long)pointer_var + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uint_var = (uint)(temp_pointer2[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uint_var == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(temp_pointer2 + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto process_lto_object_00104d5b;\nLAB_00104a53:\n                  output_data2 = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    char_var = (*(code *)double_pointer_var4[1][0x46])(double_pointer_var4,temp_pointer2);\n                    if (char_var != '\\0') {\n                      process_lto_object_00102c19();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (temp_pointer2[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_object_00104d5b:\n                if ((temp_pointer2[4] == (ulong *)0x10c2a8) || (temp_pointer2[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                char_var = (*(code *)double_pointer_var4[1][0x46])(double_pointer_var4,temp_pointer2);\n                if (char_var != '\\0') {\n                  process_lto_object_00102c19();\n                  return;\n                }\nLAB_00104a7b:\n                if (double_pointer_var3 != input_data) {\n                  if (unaff_r14 == (ulong **)0x8) {\n                    *double_pointer_var3 = *input_data;\n                    process_data_001049c0();\n                    return;\n                  }\n                  for (; unaff_r14 != (ulong **)0x0; unaff_r14 = (ulong **)((long)unaff_r14 + -1)) {\n                    *(undefined *)double_pointer_var3 = *(undefined *)input_data;\n                    input_data = (ulong **)((long)input_data + (ulong)byte_var2 * -2 + 1);\n                    double_pointer_var3 = (ulong **)((long)double_pointer_var3 + (ulong)byte_var2 * -2 + 1);\n                  }\n                  process_data_001049c0();\n                  return;\n                }\n                double_pointer_var3 = (ulong **)((long)double_pointer_var3 + (long)unaff_r14);\n              }\n            }\n            else {\n              int_var = strcmp((char *)((long)pointer_var + (ulong)(*(char *)((long)pointer_var + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              stack_var = temp_pointer2;\n              if (int_var == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  stack_var = (ulong **)*double_pointer_var4;\n                  DAT_0010b230 = '\\0';\n                  ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_error_message_00106400(ulong_var,stack_var);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uint_var = (*(uint *)(temp_pointer2 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(temp_pointer2 + 3) & 0x800082) != 0) || (temp_pointer2[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)temp_pointer2[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            input_data = (ulong **)((long)input_data + (long)unaff_r14);\n            if (temp_pointer1 <= input_data) break;\n          } while( true );\n        }\n        double_pointer_var3 = (ulong **)((long)double_pointer_var3 - (long)double_pointer_var5);\n        if (unaff_r14 == (ulong **)0x8) {\n          pointer_var = double_pointer_var4[1];\n          double_pointer_var5 = (ulong **)((long)double_pointer_var3 + 7);\n          if (-1 < (long)double_pointer_var3) {\n            double_pointer_var5 = double_pointer_var3;\n          }\n          output_data = (ulong **)(ulong)DAT_0010b800;\n          function_ptr = (code *)pointer_var[0x41];\n          double_pointer_var5 = (ulong **)((long)double_pointer_var5 >> 3);\n        }\n        else {\n          double_pointer_var5 = (ulong **)((long)double_pointer_var3 / (long)unaff_r14);\n          pointer_var = double_pointer_var4[1];\n          function_ptr = (code *)pointer_var[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = double_pointer_var4;\n        DAT_0010b770 = (ulong **)(*function_ptr)(double_pointer_var4);\n        DAT_0010b768 = (ulong **)(*(code *)double_pointer_var4[1][0x41])(double_pointer_var4);\n        double_pointer_var3 = local_array[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          temp_pointer1 = (ulong **)(ulong)local_var1;\n          if (DAT_0010b7f8 != 0) {\n            bool_var = DAT_0010b80c != 0;\n            qsort(local_array[0],(size_t)double_pointer_var5,(size_t)temp_pointer1,check_binary_compatibility_00102fd2);\n            double_pointer_var8 = (ulong **)xmalloc((long)double_pointer_var5 << 4);\n            double_pointer_var9 = DAT_0010b770;\n            input_data = DAT_0010b768;\n            unaff_r14 = (ulong **)((long)double_pointer_var5 * (long)temp_pointer1 + (long)double_pointer_var3);\n            temp_pointer2 = DAT_0010b770;\n            if (unaff_r14 <= double_pointer_var3) goto LAB_00102ec2;\n            output_data2 = DAT_0010b768;\n            double_pointer_var5 = (ulong **)(*(code *)double_pointer_var4[1][0x4e])(double_pointer_var4,bool_var,double_pointer_var3);\n            output_data = temp_pointer1;\n            stack_var = double_pointer_var8;\n            if (double_pointer_var5 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(local_array[0],(size_t)double_pointer_var5,(size_t)temp_pointer1,\n                (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          pointer_var = double_pointer_var4[1];\nLAB_00104be2:\n          input_data = double_pointer_var4;\n          double_pointer_var9 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        print_error_message_00106530(*double_pointer_var4);\n        input_data = double_pointer_var4;\n        double_pointer_var3 = unaff_r15;\n        while( true ) {\n          unaff_rbx = (ulong **)xmalloc();\n          temp_pointer1 = (ulong **)(*(code *)input_data[1][0x6b])(input_data,unaff_rbx);\n          temp_pointer2 = double_pointer_var8;\n          if (-1 < (long)temp_pointer1) break;\n          double_pointer_var4 = (ulong **)*input_data;\n          double_pointer_var5 = (ulong **)print_error_message_00106530(double_pointer_var4,double_pointer_var8);\nLAB_00102dbe:\n          pointer_var = double_pointer_var5[2];\n          temp_pointer2 = (ulong **)0x0;\nLAB_00102dc4:\n          pointer_var = (ulong *)((long)temp_pointer1[8] - (long)pointer_var);\n          double_pointer_var9 = input_data;\n          double_pointer_var6 = double_pointer_var3;\nLAB_00104ea7:\n          double_pointer_var5 = temp_pointer2;\n          double_pointer_var3 = unaff_rbx;\n          input_data = output_data2;\n          if (pointer_var != (ulong *)0x0) {\n            *double_pointer_var8 = (ulong *)double_pointer_var6;\n            double_pointer_var8[1] = pointer_var;\n            double_pointer_var8 = double_pointer_var8 + 2;\n          }\nLAB_00104e35:\n          output_data2 = double_pointer_var9;\n          if (double_pointer_var3 < unaff_r14) goto code_r0x00104e3e;\n          double_pointer_var5 = (ulong **)((long)double_pointer_var8 - (long)stack_var >> 4);\n          qsort(stack_var,(size_t)double_pointer_var5,0x10,compare_and_execute_00103533);\n          pointer_var = double_pointer_var4[1];\n          input_data = double_pointer_var4;\n          double_pointer_var9 = stack_var;\nLAB_00104be5:\n          unaff_rbx = local_array[0];\n          temp_pointer1 = (ulong **)(ulong)DAT_0010b7f8;\n          unaff_r14 = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            double_pointer_var8 = (ulong **)(*(code *)pointer_var[0x41])(input_data);\n            if (double_pointer_var8 == (ulong **)0x0) goto LAB_00102ed2;\n            double_pointer_var3 = double_pointer_var9 + (long)double_pointer_var5 * 2;\n            double_pointer_var5 = double_pointer_var9;\n            goto LAB_00104ee9;\n          }\n          temp_pointer1 = (ulong **)(ulong)local_var1;\n          unaff_r15 = (ulong **)(*(code *)pointer_var[0x41])(input_data);\n          if (unaff_r15 != (ulong **)0x0) {\n            unaff_rbp = (ulong **)((long)double_pointer_var5 * (long)temp_pointer1 + (long)unaff_rbx);\n            if (unaff_rbx < unaff_rbp) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          print_error_message_00106530(*input_data);\n          unaff_r15 = double_pointer_var9;\nLAB_00102d06:\n          temp_pointer2 = temp_pointer1;\n          if (DAT_0010b80c != 0) {\n            unaff_rbx = local_array[0];\n            double_pointer_var5 = (ulong **)0x0;\n            double_pointer_var8 = (ulong **)0x0;\n            break;\n          }\n          long_var2 = (*(code *)input_data[1][0x6a])(input_data);\n          double_pointer_var5 = local_array[0];\n          double_pointer_var8 = temp_pointer1;\n          double_pointer_var3 = unaff_r15;\n          if (long_var2 < 1) {\n            temp_pointer1 = (ulong **)0x0;\n            unaff_rbx = (ulong **)0x0;\n            break;\n          }\n        }\n        output_data2 = &local_var2;\n        output_data = unaff_rbx;\n        long_var2 = (*(code *)input_data[1][0x6c])(input_data,double_pointer_var8,double_pointer_var5,temp_pointer1);\n        temp_pointer1 = temp_pointer2;\n        if (0 < long_var2) {\n          temp_pointer1 = (ulong **)((long)temp_pointer2 + long_var2);\n          local_array[0] = (ulong **)xrealloc(local_array[0]);\n          long_var = 0;\n          do {\n            local_array[0][(long)temp_pointer2 + long_var] = local_var2 + long_var * 6;\n            long_var = long_var + 1;\n          } while (long_var2 != long_var);\n          local_array[0][(long)temp_pointer2 + long_var2] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (unaff_rbx != (ulong **)0x0)) {\n          free(unaff_rbx);\n        }\nLAB_00102cc2:\n        byte_var = *(byte *)((long)input_data + 0x4a);\n        double_pointer_var4 = input_data;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    pointer_var = *input_data;\n    ulong_var = dcgettext(0,\"%s: no symbols\",5);\n    print_error_message_00106400(ulong_var,pointer_var);\n  }\n  return;\ncode_r0x00104b01:\n  input_data = (ulong **)((long)input_data + (long)unaff_r14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaff_rbx = (ulong **)((long)double_pointer_var3 + (long)output_data);\n  if (unaff_r14 <= unaff_rbx) {\n    temp_pointer1 = (ulong **)double_pointer_var5[4];\n    if ((*(uint *)(double_pointer_var5 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    temp_pointer2 = (ulong **)0x0;\nLAB_00104e95:\n    double_pointer_var9 = input_data;\n    double_pointer_var6 = double_pointer_var3;\n    if (*(int *)(double_pointer_var4[1] + 1) == 5) {\n      pointer_var = double_pointer_var5[7];\n      goto LAB_00104ea7;\n    }\n    pointer_var = double_pointer_var5[2];\n    if ((*(byte *)((long)temp_pointer1 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaff_r14 <= unaff_rbx) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  temp_pointer1 = input_data;\n  double_pointer_var6 = output_data;\n  double_pointer_var7 = output_data2;\n  temp_pointer2 = (ulong **)(*(code *)double_pointer_var4[1][0x4e])();\n  double_pointer_var9 = double_pointer_var3;\n  if (temp_pointer2 == (ulong **)0x0) goto LAB_00102edb;\n  temp_pointer1 = (ulong **)double_pointer_var5[4];\n  if ((*(uint *)(double_pointer_var5 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (double_pointer_var3 <= double_pointer_var5) {\nLAB_00104c75:\n    if (local_var2 == (ulong *)0x0) {\n      free(local_array[0]);\n      free(double_pointer_var9);\n      return;\n    }\n    free(local_var2);\n    free(local_array[0]);\n    free(double_pointer_var9);\n    return;\n  }\n  temp_pointer1 = double_pointer_var8;\n  long_var2 = (*(code *)input_data[1][0x4e])(input_data,unaff_r14,*double_pointer_var5);\n  if (long_var2 == 0) goto LAB_00102ec9;\n  temp_pointer1 = double_pointer_var5 + 1;\n  double_pointer_var5 = double_pointer_var5 + 2;\n  print_matching_records_00105110(input_data,long_var2,*temp_pointer1,param_2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  print_error_message_00106530(*input_data,0);\nLAB_00102ed2:\n  double_pointer_var4 = (ulong **)*input_data;\n  print_error_message_00106530();\n  unaff_rbx = double_pointer_var3;\n  double_pointer_var6 = output_data;\n  double_pointer_var7 = output_data2;\nLAB_00102edb:\n  output_data2 = double_pointer_var7;\n  output_data = double_pointer_var6;\n  double_pointer_var4 = (ulong **)*double_pointer_var4;\n  temp_pointer2 = (ulong **)print_error_message_00106530();\n  double_pointer_var3 = double_pointer_var9;\nLAB_00102ee3:\n  pointer_var = double_pointer_var5[2];\nLAB_00102ee7:\n  if (temp_pointer1 != (ulong **)temp_pointer2[4]) goto LAB_00102dc4;\n  pointer_var = (ulong *)((long)temp_pointer2[2] - (long)pointer_var);\n  double_pointer_var9 = input_data;\n  double_pointer_var6 = double_pointer_var3;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (temp_pointer2 = unaff_r15, long_var2 = (*(code *)input_data[1][0x4e])(input_data,unaff_r14,unaff_rbx),\n        long_var2 != 0) {\n    unaff_rbx = (ulong **)((long)unaff_rbx + (long)temp_pointer1);\n    print_matching_records_00105110(input_data,long_var2,0,param_2);\n    if (unaff_rbp <= unaff_rbx) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  print_error_message_00106530(*input_data);\n  double_pointer_var3 = unaff_rbx;\nLAB_00102ea7:\n  double_pointer_var4 = unaff_rbp;\n  print_error_message_00106530(*input_data);\n  double_pointer_var8 = unaff_r15;\nLAB_00102eb0:\n  print_error_message_00106530(*double_pointer_var4);\n  double_pointer_var4 = input_data;\nLAB_00102eb9:\n  print_error_message_00106530(*double_pointer_var4);\n  input_data = output_data2;\nLAB_00102ec2:\n  double_pointer_var5 = (ulong **)0x0;\n  output_data = temp_pointer1;\n  double_pointer_var9 = temp_pointer2;\n  stack_var = double_pointer_var8;\n  goto LAB_00104e35;\n}\n\n",
            "renaming": {
                "param_1": "input_data",
                "param_5": "output_data",
                "param_6": "output_data2",
                "bVar1": "byte_var",
                "pcVar2": "function_ptr",
                "cVar3": "char_var",
                "iVar4": "int_var",
                "uVar5": "uint_var",
                "uVar6": "ulong_var",
                "lVar7": "long_var",
                "ppuVar8": "temp_pointer1",
                "ppuVar9": "temp_pointer2",
                "lVar10": "long_var2",
                "puVar11": "pointer_var",
                "unaff_RBX": "unaff_rbx",
                "unaff_RBP": "unaff_rbp",
                "unaff_R14": "unaff_r14",
                "unaff_R15": "unaff_r15",
                "bVar19": "bool_var",
                "bVar20": "byte_var2",
                "ppuStack_78": "stack_var",
                "local_4c": "local_var1",
                "local_48": "local_var2",
                "local_40": "local_array",
                "FUN_001048e0": "analyze_binary_code_001048e0",
                "ppuVar12": "double_pointer_var3",
                "ppuVar13": "double_pointer_var4",
                "ppuVar14": "double_pointer_var5",
                "ppuVar15": "double_pointer_var6",
                "ppuVar16": "double_pointer_var7",
                "ppuVar17": "double_pointer_var8",
                "ppuVar18": "double_pointer_var9"
            },
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "bfd_get_error",
                "FUN_00106530",
                "dcgettext",
                "FUN_00106400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "binary_code",
                    "4": "input_param",
                    "9": "input_data",
                    "3": "input_params"
                },
                "param_2": {
                    "7": "param2",
                    "1": "param_value_1",
                    "18": "param_2"
                },
                "param_3": {
                    "1": "param_value_2",
                    "18": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "7": "param4",
                    "18": "param_4",
                    "1": "argument4"
                },
                "param_5": {
                    "3": "output_data1",
                    "1": "param_output_1",
                    "4": "output_data",
                    "2": "output_params1"
                },
                "param_6": {
                    "1": "output_data_2",
                    "2": "output_params2",
                    "3": "output_data2"
                },
                "bVar1": {
                    "1": "condition_var",
                    "4": "flag",
                    "5": "byte_var1",
                    "2": "byte_value",
                    "14": "byte_var"
                },
                "pcVar2": {
                    "5": "func_ptr",
                    "1": "code_pointer",
                    "6": "function_pointer",
                    "9": "function_ptr"
                },
                "cVar3": {
                    "22": "char_var",
                    "1": "char_val",
                    "2": "character"
                },
                "iVar4": {
                    "1": "counter",
                    "2": "int_value",
                    "22": "int_var"
                },
                "uVar5": {
                    "1": "temp_variable",
                    "2": "uint_value",
                    "23": "uint_var"
                },
                "uVar6": {
                    "1": "uint_var_2",
                    "12": "ulong_var",
                    "2": "undefined_var"
                },
                "lVar7": {
                    "1": "long_val",
                    "24": "long_var",
                    "2": "long_value"
                },
                "ppuVar8": {
                    "1": "result_ptr",
                    "2": "temp1"
                },
                "ppuVar9": {
                    "2": "double_pointer_var2",
                    "1": "temp_array_ptr_2"
                },
                "lVar10": {
                    "5": "long_var_2",
                    "1": "long_value_10",
                    "12": "long_var2",
                    "2": "long_var_10"
                },
                "puVar11": {
                    "2": "temp_pointer3",
                    "1": "temp_ptr3",
                    "3": "ulong_ptr",
                    "9": "pointer_var",
                    "4": "ptr_var"
                },
                "unaff_RBX": {
                    "1": "temp_array3",
                    "2": "register_bx",
                    "3": "unaff_rbx"
                },
                "unaff_RBP": {
                    "1": "pointer_array_9",
                    "3": "unaff_rbp"
                },
                "unaff_R14": {
                    "1": "unaff_ptr_var_r14",
                    "3": "unaff_r14"
                },
                "unaff_R15": {
                    "1": "register_r15",
                    "3": "unaff_r15"
                },
                "bVar19": {
                    "20": "bool_var",
                    "1": "bool_var1",
                    "2": "bool_value"
                },
                "bVar20": {
                    "12": "byte_var2",
                    "4": "byte_var",
                    "1": "byte_val2",
                    "2": "bool_var2"
                },
                "ppuStack_78": {
                    "1": "temp_var_14",
                    "2": "stack_var"
                },
                "local_4c": {
                    "5": "local_var_1",
                    "10": "local_var1",
                    "1": "local_var"
                },
                "local_48": {
                    "10": "local_var2",
                    "1": "temp_local_pointer",
                    "4": "local_var_2",
                    "2": "local_variable_2",
                    "5": "local_var_48"
                },
                "local_40": {
                    "1": "temp_local_array",
                    "2": "temp_array",
                    "14": "local_array"
                },
                "FUN_001048e0": {
                    "1": "process_lto_objects"
                },
                "ppuVar12": {
                    "2": "double_pointer_var3",
                    "1": "source_data_ptr2"
                },
                "ppuVar13": {
                    "1": "ppu_value_13",
                    "2": "double_pointer_var4"
                },
                "ppuVar14": {
                    "1": "temp_data_ptr",
                    "2": "double_pointer_var5"
                },
                "ppuVar15": {
                    "2": "double_pointer_var6",
                    "1": "temp_ptr7"
                },
                "ppuVar16": {
                    "1": "offset_ptr2",
                    "2": "double_pointer_var7"
                },
                "ppuVar17": {
                    "1": "ppu_value_17",
                    "2": "ppu_var8"
                },
                "ppuVar18": {
                    "1": "temp_array11",
                    "2": "temp9"
                },
                "DAT_0010b80c": {
                    "1": "constant_value1"
                },
                "DAT_0010b788": {
                    "1": "constant_value2"
                },
                "DAT_0010b230": {
                    "1": "dat_var_16"
                },
                "_DAT_0010b810": {
                    "1": "constant_value4"
                },
                "DAT_0010b810": {
                    "1": "dat_var_4"
                },
                "DAT_0010b81c": {
                    "1": "dat_var_6"
                },
                "DAT_0010b7e8": {
                    "1": "constant_value7"
                },
                "DAT_0010b7f8": {
                    "1": "dat_var_5"
                },
                "DAT_0010b7e4": {
                    "1": "constant_value9"
                },
                "DAT_0010b7f4": {
                    "1": "dat_var_7"
                },
                "DAT_0010b7fc": {
                    "1": "constant_value11"
                },
                "DAT_0010b800": {
                    "1": "constant_value12"
                },
                "DAT_0010b778": {
                    "1": "constant_value13"
                },
                "DAT_0010b780": {
                    "1": "constant_value14"
                },
                "DAT_0010b770": {
                    "1": "constant_value15"
                },
                "DAT_0010b768": {
                    "1": "constant_value16"
                },
                "DAT_0010b7d8": {
                    "1": "constant_value17"
                },
                "DAT_0010b808": {
                    "1": "constant_value18"
                },
                "DAT_0010b7f6": {
                    "1": "constant_value21"
                }
            }
        },
        "FUN_001049c0": {
            "entrypoint": "0x001049c0",
            "current_name": "process_data_001049c0",
            "code": "\nvoid process_data_001049c0(void)\n\n{\n  char *str_ptr;\n  code *function_pointer;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined8 ulong_var;\n  long long_var;\n  undefined8 *pointer_var1;\n  long long_var2;\n  undefined8 *pointer_var2;\n  undefined8 *register_bx;\n  undefined8 *pointer;\n  undefined8 *register_bp;\n  undefined8 *pointer_variable3;\n  undefined8 *pointer_variable4;\n  undefined8 *pointer_r8;\n  undefined8 *pointer_variable5;\n  undefined8 *pointer_var_9;\n  undefined8 *pointer_variable6;\n  undefined8 *pointer_variable7;\n  undefined8 *register_r12;\n  undefined8 *register_r13;\n  undefined8 *register_r14;\n  undefined8 *register_r15;\n  bool bool_var;\n  byte byte_var;\n  ulong return_address;\n  ulong ulong_var2;\n  undefined8 stack_var1;\n  undefined8 *stack_var2;\n  undefined8 *stack_var3;\n  undefined8 stack_var4;\n  void *stack_var5;\n  undefined8 *stack_var6;\n  \n  byte_var = 0;\n  do {\n    register_bx = (undefined8 *)((long)register_bx + (long)register_r14);\nLAB_001049c3:\n    do {\n      do {\n        register_r13 = (undefined8 *)((long)register_r13 + (long)register_r14);\n        pointer_variable7 = register_r12;\n        pointer_variable4 = register_bp;\n        if (register_r12 <= register_r13) goto LAB_00104b15;\nLAB_001049cf:\n        pointer_var1 = (undefined8 *)\n                 (**(code **)(register_bp[1] + 0x270))\n                           (register_bp,return_address & 0xffffffff,register_r13,register_r15);\n        pointer_variable3 = register_bp;\n        pointer_variable4 = register_r13;\n        pointer_variable7 = register_r15;\n        if (pointer_var1 == (undefined8 *)0x0) goto LAB_00102eb0;\n        str_ptr = (char *)pointer_var1[1];\n        if (((str_ptr == (char *)0x0) || (*str_ptr != '_')) || (str_ptr[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uint_var = (uint)(pointer_var1[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uint_var != 0) goto LAB_00104a2d;\n          register_r13 = (undefined8 *)((long)register_r13 + (long)register_r14);\n          pointer_variable7 = register_r12;\n          pointer_variable4 = register_bp;\n          if (register_r12 <= register_r13) {\nLAB_00104b15:\n            register_bx = (undefined8 *)((long)register_bx - (long)stack_var3);\n            if (register_r14 == (undefined8 *)0x8) {\n              long_var2 = pointer_variable4[1];\n              pointer_variable3 = (undefined8 *)((long)register_bx + 7);\n              if (-1 < (long)register_bx) {\n                pointer_variable3 = register_bx;\n              }\n              pointer_r8 = (undefined8 *)(ulong)DAT_0010b800;\n              function_pointer = *(code **)(long_var2 + 0x208);\n              pointer_variable3 = (undefined8 *)((long)pointer_variable3 >> 3);\n            }\n            else {\n              pointer_variable3 = (undefined8 *)((long)register_bx / (long)register_r14);\n              long_var2 = pointer_variable4[1];\n              function_pointer = *(code **)(long_var2 + 0x208);\n            }\n            register_bp = pointer_variable4;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = pointer_variable4;\n              DAT_0010b770 = (undefined8 *)(*function_pointer)(pointer_variable4);\n              DAT_0010b768 = (undefined8 *)(**(code **)(pointer_variable4[1] + 0x208))(pointer_variable4);\n              register_bx = stack_var6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                print_error_message_00106530(*pointer_variable4);\n                pointer = register_r15;\n                goto LAB_00102d8e;\n              }\n              register_r12 = (undefined8 *)(ulong)stack_var4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulong_var2 = (ulong)(DAT_0010b80c != 0);\n                qsort(stack_var6,(size_t)pointer_variable3,(size_t)register_r12,check_binary_compatibility_00102fd2);\n                pointer_variable7 = (undefined8 *)xmalloc((long)pointer_variable3 << 4);\n                pointer_variable5 = DAT_0010b770;\n                register_bp = DAT_0010b768;\n                register_r14 = (undefined8 *)((long)pointer_variable3 * (long)register_r12 + (long)register_bx);\n                pointer_var1 = DAT_0010b770;\n                pointer_var_9 = DAT_0010b768;\n                if (register_r14 <= register_bx) goto LAB_00102ec2;\n                pointer_variable3 = (undefined8 *)\n                          (**(code **)(pointer_variable4[1] + 0x270))(pointer_variable4,ulong_var2 & 0xffffffff,register_bx);\n                pointer = register_bx;\n                pointer_r8 = register_r12;\n                stack_var2 = pointer_variable7;\n                if (pointer_variable3 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stack_var6,(size_t)pointer_variable3,(size_t)register_r12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              long_var2 = pointer_variable4[1];\n            }\n            pointer = (undefined8 *)0x0;\n            do {\n              pointer_variable4 = stack_var6;\n              pointer_var1 = (undefined8 *)(ulong)DAT_0010b7f8;\n              register_r14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointer_variable7 = (undefined8 *)(**(code **)(long_var2 + 0x208))(register_bp);\n                if (pointer_variable7 == (undefined8 *)0x0) goto LAB_00102ed2;\n                register_bx = pointer + (long)pointer_variable3 * 2;\n                pointer_variable3 = pointer;\n                do {\n                  if (register_bx <= pointer_variable3) {\nLAB_00104c75:\n                    if (stack_var5 == (void *)0x0) {\n                      free(stack_var6);\n                      free(pointer);\n                      return;\n                    }\n                    free(stack_var5);\n                    free(stack_var6);\n                    free(pointer);\n                    return;\n                  }\n                  pointer_var1 = pointer_variable7;\n                  long_var2 = (**(code **)(register_bp[1] + 0x270))(register_bp,register_r14,*pointer_variable3);\n                  if (long_var2 == 0) {\n                    print_error_message_00106530(*register_bp,0);\nLAB_00102ed2:\n                    pointer_variable4 = (undefined8 *)*register_bp;\n                    print_error_message_00106530();\n                    pointer_variable5 = pointer_r8;\n                    pointer_variable6 = pointer_var_9;\n                    goto LAB_00102edb;\n                  }\n                  pointer_variable4 = pointer_variable3 + 1;\n                  pointer_variable3 = pointer_variable3 + 2;\n                  print_matching_records_00105110(register_bp,long_var2,*pointer_variable4,stack_var1);\n                } while( true );\n              }\n              register_r12 = (undefined8 *)(ulong)stack_var4._4_4_;\n              register_r15 = (undefined8 *)(**(code **)(long_var2 + 0x208))(register_bp);\n              if (register_r15 == (undefined8 *)0x0) {\n                print_error_message_00106530(*register_bp);\n                pointer_variable4 = register_r12;\n                if (DAT_0010b80c == 0) {\n                  long_var2 = (**(code **)(register_bp[1] + 0x350))(register_bp);\n                  pointer_variable3 = stack_var6;\n                  pointer_variable7 = register_r12;\n                  if (long_var2 < 1) {\n                    pointer_var1 = (undefined8 *)0x0;\n                    register_bx = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    register_bx = (undefined8 *)xmalloc();\n                    pointer_var1 = (undefined8 *)(**(code **)(register_bp[1] + 0x358))(register_bp,register_bx);\n                    pointer_variable4 = pointer_variable7;\n                    if ((long)pointer_var1 < 0) {\n                      pointer_variable4 = (undefined8 *)*register_bp;\n                      pointer_variable3 = (undefined8 *)print_error_message_00106530(pointer_variable4,pointer_variable7);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointer_var1 = register_r12;\n                  register_bx = stack_var6;\n                  pointer_variable3 = (undefined8 *)0x0;\n                  pointer_variable7 = (undefined8 *)0x0;\n                }\n                pointer_var_9 = &stack0x00000040;\n                pointer_r8 = register_bx;\n                long_var2 = (**(code **)(register_bp[1] + 0x360))(register_bp,pointer_variable7,pointer_variable3,pointer_var1);\n                register_r12 = pointer_variable4;\n                if (0 < long_var2) {\n                  register_r12 = (undefined8 *)((long)pointer_variable4 + long_var2);\n                  stack_var6 = (undefined8 *)xrealloc(stack_var6);\n                  long_var = 0;\n                  do {\n                    stack_var6[(long)((long)pointer_variable4 + long_var)] =\n                         (void *)(long_var * 0x30 + (long)stack_var5);\n                    long_var = long_var + 1;\n                  } while (long_var2 != long_var);\n                  stack_var6[(long)((long)pointer_variable4 + long_var2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (register_bx != (undefined8 *)0x0)) {\n                  free(register_bx);\n                }\n                if ((*(byte *)((long)register_bp + 0x4a) & 0x10) != 0) {\n                  register_bx = (undefined8 *)*register_bp;\n                  DAT_0010b230 = '\\0';\n                  ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_error_message_00106400(ulong_var);\n                }\n                register_r14 = (undefined8 *)(ulong)stack_var4._4_4_;\n                bool_var = DAT_0010b80c != 0;\n                pointer_variable3 = (undefined8 *)(ulong)bool_var;\n                pointer_var1 = stack_var6;\n                stack_var3 = stack_var6;\n                register_r15 = (undefined8 *)(**(code **)(register_bp[1] + 0x208))(register_bp);\n                if (register_r15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointer_variable3 = (undefined8 *)((long)pointer_variable3 * (long)register_r12 + (long)pointer_variable4);\n                register_bx = pointer_variable4;\n                while( true ) {\n                  if (pointer_variable3 <= register_bx) goto LAB_00104c75;\n                  pointer_var1 = register_r15;\n                  long_var2 = (**(code **)(register_bp[1] + 0x270))(register_bp,register_r14,register_bx);\n                  if (long_var2 == 0) break;\n                  register_bx = (undefined8 *)((long)register_bx + (long)register_r12);\n                  print_matching_records_00105110(register_bp,long_var2,0,stack_var1);\n                }\n                print_error_message_00106530(*register_bp,0);\n              }\n              print_error_message_00106530(*register_bp);\n              pointer_variable4 = register_bp;\n              pointer_variable7 = register_r15;\nLAB_00102eb0:\n              print_error_message_00106530(*pointer_variable3);\nLAB_00102eb9:\n              print_error_message_00106530(*pointer_variable4);\nLAB_00102ec2:\n              pointer_variable3 = (undefined8 *)0x0;\n              pointer = register_bx;\n              pointer_r8 = register_r12;\n              pointer_variable5 = pointer_var1;\n              register_bp = pointer_var_9;\n              stack_var2 = pointer_variable7;\nLAB_00104e35:\n              while (pointer_var_9 = pointer_variable5, pointer < register_r14) {\n                register_bx = (undefined8 *)((long)pointer + (long)pointer_r8);\n                if (register_bx < register_r14) {\n                  pointer_var1 = register_bp;\n                  pointer_variable5 = pointer_r8;\n                  pointer_variable6 = pointer_var_9;\n                  pointer_var2 = (undefined8 *)(**(code **)(pointer_variable4[1] + 0x270))();\n                  if (pointer_var2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    pointer_var_9 = pointer_variable6;\n                    pointer_r8 = pointer_variable5;\n                    pointer_variable4 = (undefined8 *)*pointer_variable4;\n                    pointer_var2 = (undefined8 *)print_error_message_00106530();\n                  }\n                  else {\n                    pointer_var1 = (undefined8 *)pointer_variable3[4];\n                    if ((*(uint *)(pointer_variable3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  long_var2 = pointer_variable3[2];\nLAB_00102ee7:\n                  if (pointer_var1 == (undefined8 *)pointer_var2[4]) {\n                    long_var2 = pointer_var2[2] - long_var2;\n                    pointer_variable5 = register_bp;\n                    pointer_variable6 = pointer;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  long_var2 = pointer_var1[8] - long_var2;\n                  pointer_variable5 = register_bp;\n                  pointer_variable6 = pointer;\n                }\n                else {\n                  pointer_var1 = (undefined8 *)pointer_variable3[4];\n                  if ((*(uint *)(pointer_variable3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    long_var2 = pointer_variable3[2];\n                    pointer_var2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointer_var2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointer_variable5 = register_bp;\n                  pointer_variable6 = pointer;\n                  if (*(int *)(pointer_variable4[1] + 8) == 5) {\n                    long_var2 = pointer_variable3[7];\n                  }\n                  else {\n                    long_var2 = pointer_variable3[2];\n                    if ((*(byte *)((long)pointer_var1 + 0x25) & 0x10) == 0) {\n                      if (register_bx < register_r14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointer_variable3 = pointer_var2;\n                pointer = register_bx;\n                register_bp = pointer_var_9;\n                if (long_var2 != 0) {\n                  *pointer_variable7 = pointer_variable6;\n                  pointer_variable7[1] = long_var2;\n                  pointer_variable7 = pointer_variable7 + 2;\n                }\n              }\n              pointer_variable3 = (undefined8 *)((long)pointer_variable7 - (long)stack_var2 >> 4);\n              qsort(stack_var2,(size_t)pointer_variable3,0x10,FUN_00103533);\n              long_var2 = pointer_variable4[1];\n              register_bx = pointer;\n              register_bp = pointer_variable4;\n              pointer = stack_var2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        int_var = strcmp(str_ptr + (str_ptr[2] == '_'),\"__gnu_lto_slim\");\n        stack_var2 = pointer_var1;\n        if (int_var == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stack_var2 = (undefined8 *)*register_bp;\n            DAT_0010b230 = '\\0';\n            ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            print_error_message_00106400(ulong_var,stack_var2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uint_var = (*(uint *)(pointer_var1 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointer_var1 + 3) & 0x800082) == 0) && (pointer_var1[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointer_var1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_object_00104d5b:\n          if ((pointer_var1[4] != 0x10c2a8) && (pointer_var1[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointer_var1 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto process_lto_object_00104d5b;\nLAB_00104a53:\n      pointer_var_9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        char_var = (**(code **)(register_bp[1] + 0x230))(register_bp);\n        if (char_var != '\\0') {\n          FUN_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointer_var1[4] == 0x10c2a8);\nLAB_00104cba:\n    char_var = (**(code **)(register_bp[1] + 0x230))(register_bp);\n    if (char_var != '\\0') {\n      FUN_00102c19();\n      return;\n    }\nLAB_00104a7b:\n    if (register_bx != register_r13) {\n      if (register_r14 == (undefined8 *)0x8) {\n        *register_bx = *register_r13;\n        process_data_001049c0();\n        return;\n      }\n      for (; register_r14 != (undefined8 *)0x0; register_r14 = (undefined8 *)((long)register_r14 + -1)) {\n        *(undefined *)register_bx = *(undefined *)register_r13;\n        register_r13 = (undefined8 *)((long)register_r13 + (ulong)byte_var * -2 + 1);\n        register_bx = (undefined8 *)((long)register_bx + (ulong)byte_var * -2 + 1);\n      }\n      process_data_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointer_variable7 = (undefined8 *)((long)register_r12 * (long)register_r14);\n  register_r12 = (undefined8 *)((long)stack_var3 + (long)pointer_variable7);\n  register_bx = stack_var3;\n  pointer_variable4 = register_bp;\n  if (stack_var3 < register_r12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  return_address = (ulong)bool_var;\n  register_r13 = stack_var3;\n  goto LAB_001049cf;\n}\n\n",
            "renaming": {
                "pcVar1": "str_ptr",
                "pcVar2": "function_pointer",
                "cVar3": "char_var",
                "iVar4": "int_var",
                "uVar5": "uint_var",
                "uVar6": "ulong_var",
                "lVar7": "long_var",
                "puVar8": "pointer_var1",
                "lVar9": "long_var2",
                "puVar10": "pointer_var2",
                "unaff_RBX": "register_bx",
                "unaff_RBP": "register_bp",
                "puVar11": "pointer_variable3",
                "puVar12": "pointer_variable4",
                "puVar13": "pointer_variable5",
                "in_R8": "pointer_r8",
                "in_R9": "pointer_var_9",
                "puVar14": "pointer_variable6",
                "puVar15": "pointer_variable7",
                "unaff_R12": "register_r12",
                "unaff_R13": "register_r13",
                "unaff_R14": "register_r14",
                "unaff_R15": "register_r15",
                "bVar16": "bool_var",
                "bVar17": "byte_var",
                "unaff_retaddr": "return_address",
                "uVar18": "ulong_var2",
                "in_stack_00000008": "stack_var1",
                "in_stack_00000010": "stack_var2",
                "in_stack_00000018": "stack_var3",
                "in_stack_00000038": "stack_var4",
                "in_stack_00000040": "stack_var5",
                "in_stack_00000048": "stack_var6",
                "__ptr": "pointer",
                "FUN_001049c0": "process_data_001049c0"
            },
            "calling": [
                "FUN_00104d5b"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "pcVar1": {
                    "2": "function_name",
                    "3": "string_pointer",
                    "1": "char_pointer_1",
                    "4": "str_ptr"
                },
                "pcVar2": {
                    "1": "ptr2",
                    "2": "code_ptr",
                    "9": "function_pointer",
                    "5": "function_ptr",
                    "3": "code_pointer"
                },
                "cVar3": {
                    "12": "char_var",
                    "3": "character",
                    "5": "char_value",
                    "1": "char_val",
                    "2": "character_variable"
                },
                "iVar4": {
                    "2": "integer_variable",
                    "14": "int_var",
                    "3": "int_variable",
                    "1": "integer",
                    "4": "int_value"
                },
                "uVar5": {
                    "2": "uint_variable",
                    "1": "uint_var2",
                    "4": "uint_value",
                    "3": "unsigned_variable",
                    "14": "uint_var"
                },
                "uVar6": {
                    "1": "unsigned_long",
                    "12": "ulong_var",
                    "3": "undefined8_var",
                    "2": "unsigned_variable2"
                },
                "lVar7": {
                    "5": "long_variable",
                    "1": "long_value3",
                    "16": "long_var",
                    "2": "long_value"
                },
                "puVar8": {
                    "1": "pointer_var8",
                    "2": "pointer_variable1",
                    "3": "ptr_var1",
                    "7": "pointer_var1"
                },
                "lVar9": {
                    "2": "long_var1",
                    "12": "long_var2",
                    "1": "long_value3",
                    "3": "long_variable2"
                },
                "puVar10": {
                    "1": "tmp_pointer2",
                    "2": "pointer_var_2",
                    "3": "pointer_variable2",
                    "8": "pointer_var2"
                },
                "unaff_RBX": {
                    "1": "pointer_value8",
                    "2": "var1",
                    "5": "register_bx",
                    "3": "pointer_rbx"
                },
                "unaff_RBP": {
                    "1": "ptr2",
                    "5": "register_bp",
                    "3": "pointer_rbp",
                    "2": "base_pointer"
                },
                "puVar11": {
                    "3": "pointer_var3",
                    "1": "pointer_var2"
                },
                "puVar12": {
                    "1": "pointer_var_6",
                    "2": "pointer_var3",
                    "3": "pointer_var4"
                },
                "puVar13": {
                    "3": "pointer_variable5",
                    "1": "ptr4"
                },
                "in_R8": {
                    "1": "ptr5",
                    "2": "pointer_r8"
                },
                "in_R9": {
                    "1": "pointer_var10"
                },
                "puVar14": {
                    "1": "pointer_var11",
                    "2": "pointer_variable6"
                },
                "puVar15": {
                    "1": "pointer_value7",
                    "2": "ptr_var7"
                },
                "unaff_R12": {
                    "1": "register_variable1",
                    "2": "pointer_var10",
                    "3": "pointer_r12",
                    "5": "register_r12"
                },
                "unaff_R13": {
                    "1": "counter2",
                    "3": "pointer_r13",
                    "5": "register_r13",
                    "2": "pointer_var11"
                },
                "unaff_R14": {
                    "1": "ptr15",
                    "2": "increment",
                    "5": "register_r14",
                    "3": "pointer_r14"
                },
                "unaff_R15": {
                    "1": "ptr16",
                    "2": "pointer_var13",
                    "3": "pointer_r15",
                    "5": "register_r15"
                },
                "bVar16": {
                    "13": "bool_var",
                    "1": "bool_var1",
                    "2": "boolean_variable",
                    "4": "bool_value"
                },
                "bVar17": {
                    "4": "byte_variable",
                    "1": "incrementor",
                    "6": "byte_value",
                    "15": "byte_var"
                },
                "unaff_retaddr": {
                    "1": "ulong_retaddr",
                    "3": "ulong_var2",
                    "4": "ulong_var",
                    "2": "return_value",
                    "6": "return_address"
                },
                "uVar18": {
                    "1": "ulong_var_2",
                    "4": "ulong_var2",
                    "2": "unsigned_variable3"
                },
                "in_stack_00000008": {
                    "1": "stack_value_1",
                    "3": "stack_variable1",
                    "2": "in_stack_var1",
                    "5": "stack_var1"
                },
                "in_stack_00000010": {
                    "1": "temp_array",
                    "3": "var2",
                    "2": "in_stack_var2",
                    "4": "stack_var2"
                },
                "in_stack_00000018": {
                    "1": "stack_var2",
                    "4": "stack_var3",
                    "3": "stack_variable3",
                    "2": "in_stack_var3"
                },
                "in_stack_00000038": {
                    "1": "input_stack_variable4",
                    "3": "var4",
                    "2": "in_stack_var4",
                    "4": "stack_var4"
                },
                "in_stack_00000040": {
                    "3": "stack_variable5",
                    "1": "stack_value5",
                    "4": "stack_var5",
                    "2": "in_stack_var5"
                },
                "in_stack_00000048": {
                    "2": "in_stack_var6",
                    "3": "stack_variable6",
                    "1": "stack_variable_6",
                    "4": "stack_var6"
                },
                "__ptr": {
                    "1": "ptr9",
                    "2": "pointer"
                },
                "FUN_001049c0": {
                    "1": "process_lto_objects",
                    "2": "process_lto_object",
                    "6": "process_data"
                },
                "lVar11": {
                    "1": "long_var2"
                },
                "lVar13": {
                    "1": "long_var3"
                },
                "puVar9": {
                    "1": "pointer_var9"
                },
                "puVar16": {
                    "1": "pointer_var10"
                },
                "puVar17": {
                    "1": "pointer_var11"
                },
                "puVar18": {
                    "1": "pointer_var12"
                },
                "puVar6": {
                    "1": "code_pointer"
                }
            }
        },
        "FUN_00104d5b": {
            "entrypoint": "0x00104d5b",
            "current_name": "process_lto_object_00104d5b",
            "code": "\nvoid process_lto_object_00104d5b(void)\n\n{\n  char *str;\n  code *function_pointer;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined8 ulong_var;\n  undefined8 *ptr_var;\n  long long_var;\n  long long_variable_2;\n  undefined8 *ptr_var_2;\n  undefined8 *input_rcx;\n  undefined8 *output_array;\n  undefined8 *temp_ptr;\n  undefined8 *pointer_variable_3;\n  undefined8 *unaff_rbp;\n  undefined8 *pointer_variable_4;\n  undefined8 *undefined8_pointer_5;\n  undefined8 *pointer_variable_5;\n  undefined8 *undefined8_pointer_7;\n  undefined8 *pointer_variable_6;\n  undefined8 *temp_ptr;\n  undefined8 *unaff_r12;\n  undefined8 *unaff_r13;\n  undefined8 *element_size;\n  undefined8 *unaff_r15;\n  bool bool_var;\n  byte byte_var;\n  ulong return_address;\n  ulong u_var18;\n  undefined8 param_7;\n  undefined8 *parameter_8;\n  undefined8 *parameter_9;\n  undefined8 stack_var;\n  void *parameter_13;\n  undefined8 *parameter_14;\n  \n  byte_var = 0;\n  do {\n    if ((input_rcx[4] != 0x10c2a8) && (input_rcx[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      unaff_r13 = (undefined8 *)((long)unaff_r13 + (long)element_size);\n      temp_ptr = unaff_r12;\n      pointer_variable_4 = unaff_rbp;\n      if (unaff_r12 <= unaff_r13) goto LAB_00104b15;\nLAB_001049cf:\n      input_rcx = (undefined8 *)\n               (**(code **)(unaff_rbp[1] + 0x270))\n                         (unaff_rbp,return_address & 0xffffffff,unaff_r13,unaff_r15);\n      pointer_variable_3 = unaff_rbp;\n      pointer_variable_4 = unaff_r13;\n      temp_ptr = unaff_r15;\n      if (input_rcx == (undefined8 *)0x0) goto LAB_00102eb0;\n      str = (char *)input_rcx[1];\n      if (((str == (char *)0x0) || (*str != '_')) || (str[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        uint_var = (uint)(input_rcx[4] == 0x10c2a8);\nLAB_00104af9:\n        if (uint_var != 0) goto LAB_00104a2d;\n        unaff_r13 = (undefined8 *)((long)unaff_r13 + (long)element_size);\n        temp_ptr = unaff_r12;\n        pointer_variable_4 = unaff_rbp;\n        if (unaff_r12 <= unaff_r13) {\nLAB_00104b15:\n          output_array = (undefined8 *)((long)output_array - (long)parameter_9);\n          if (element_size == (undefined8 *)0x8) {\n            long_variable_2 = pointer_variable_4[1];\n            pointer_variable_3 = (undefined8 *)((long)output_array + 7);\n            if (-1 < (long)output_array) {\n              pointer_variable_3 = output_array;\n            }\n            undefined8_pointer_5 = (undefined8 *)(ulong)DAT_0010b800;\n            function_pointer = *(code **)(long_variable_2 + 0x208);\n            pointer_variable_3 = (undefined8 *)((long)pointer_variable_3 >> 3);\n          }\n          else {\n            pointer_variable_3 = (undefined8 *)((long)output_array / (long)element_size);\n            long_variable_2 = pointer_variable_4[1];\n            function_pointer = *(code **)(long_variable_2 + 0x208);\n          }\n          unaff_rbp = pointer_variable_4;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = pointer_variable_4;\n            DAT_0010b770 = (undefined8 *)(*function_pointer)(pointer_variable_4);\n            DAT_0010b768 = (undefined8 *)(**(code **)(pointer_variable_4[1] + 0x208))(pointer_variable_4);\n            output_array = parameter_14;\n            if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n              print_error_message_00106530(*pointer_variable_4);\n              temp_ptr = unaff_r15;\n              goto LAB_00102d8e;\n            }\n            unaff_r12 = (undefined8 *)(ulong)stack_var._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              u_var18 = (ulong)(DAT_0010b80c != 0);\n              qsort(parameter_14,(size_t)pointer_variable_3,(size_t)unaff_r12,check_binary_compatibility_00102fd2);\n              temp_ptr = (undefined8 *)xmalloc((long)pointer_variable_3 << 4);\n              pointer_variable_5 = DAT_0010b770;\n              unaff_rbp = DAT_0010b768;\n              element_size = (undefined8 *)((long)pointer_variable_3 * (long)unaff_r12 + (long)output_array);\n              input_rcx = DAT_0010b770;\n              undefined8_pointer_7 = DAT_0010b768;\n              if (element_size <= output_array) goto LAB_00102ec2;\n              pointer_variable_3 = (undefined8 *)\n                        (**(code **)(pointer_variable_4[1] + 0x270))(pointer_variable_4,u_var18 & 0xffffffff,output_array);\n              temp_ptr = output_array;\n              undefined8_pointer_5 = unaff_r12;\n              parameter_8 = temp_ptr;\n              if (pointer_variable_3 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(parameter_14,(size_t)pointer_variable_3,(size_t)unaff_r12,\n                  (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n            long_variable_2 = pointer_variable_4[1];\n          }\n          temp_ptr = (undefined8 *)0x0;\n          do {\n            pointer_variable_4 = parameter_14;\n            ptr_var = (undefined8 *)(ulong)DAT_0010b7f8;\n            element_size = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              temp_ptr = (undefined8 *)(**(code **)(long_variable_2 + 0x208))(unaff_rbp);\n              if (temp_ptr == (undefined8 *)0x0) goto LAB_00102ed2;\n              output_array = temp_ptr + (long)pointer_variable_3 * 2;\n              pointer_variable_3 = temp_ptr;\n              do {\n                if (output_array <= pointer_variable_3) {\nLAB_00104c75:\n                  if (parameter_13 != (void *)0x0) {\n                    free(parameter_13);\n                    free(parameter_14);\n                    free(temp_ptr);\n                    return;\n                  }\n                  free(parameter_14);\n                  free(temp_ptr);\n                  return;\n                }\n                ptr_var = temp_ptr;\n                long_variable_2 = (**(code **)(unaff_rbp[1] + 0x270))(unaff_rbp,element_size,*pointer_variable_3);\n                if (long_variable_2 == 0) {\n                  print_error_message_00106530(*unaff_rbp,0);\nLAB_00102ed2:\n                  pointer_variable_4 = (undefined8 *)*unaff_rbp;\n                  print_error_message_00106530();\n                  pointer_variable_5 = undefined8_pointer_5;\n                  pointer_variable_6 = undefined8_pointer_7;\n                  goto LAB_00102edb;\n                }\n                pointer_variable_4 = pointer_variable_3 + 1;\n                pointer_variable_3 = pointer_variable_3 + 2;\n                print_matching_records_00105110(unaff_rbp,long_variable_2,*pointer_variable_4,param_7);\n              } while( true );\n            }\n            unaff_r12 = (undefined8 *)(ulong)stack_var._4_4_;\n            unaff_r15 = (undefined8 *)(**(code **)(long_variable_2 + 0x208))(unaff_rbp);\n            if (unaff_r15 == (undefined8 *)0x0) {\n              print_error_message_00106530(*unaff_rbp);\n              pointer_variable_4 = unaff_r12;\n              if (DAT_0010b80c == 0) {\n                long_variable_2 = (**(code **)(unaff_rbp[1] + 0x350))(unaff_rbp);\n                pointer_variable_3 = parameter_14;\n                temp_ptr = unaff_r12;\n                if (long_variable_2 < 1) {\n                  ptr_var = (undefined8 *)0x0;\n                  output_array = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  output_array = (undefined8 *)xmalloc();\n                  ptr_var = (undefined8 *)(**(code **)(unaff_rbp[1] + 0x358))(unaff_rbp,output_array);\n                  pointer_variable_4 = temp_ptr;\n                  if ((long)ptr_var < 0) {\n                    pointer_variable_4 = (undefined8 *)*unaff_rbp;\n                    pointer_variable_3 = (undefined8 *)print_error_message_00106530(pointer_variable_4,temp_ptr);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                ptr_var = unaff_r12;\n                output_array = parameter_14;\n                pointer_variable_3 = (undefined8 *)0x0;\n                temp_ptr = (undefined8 *)0x0;\n              }\n              undefined8_pointer_7 = &stack0x00000040;\n              undefined8_pointer_5 = output_array;\n              long_variable_2 = (**(code **)(unaff_rbp[1] + 0x360))(unaff_rbp,temp_ptr,pointer_variable_3,ptr_var);\n              unaff_r12 = pointer_variable_4;\n              if (0 < long_variable_2) {\n                unaff_r12 = (undefined8 *)((long)pointer_variable_4 + long_variable_2);\n                parameter_14 = (undefined8 *)xrealloc(parameter_14);\n                long_var = 0;\n                do {\n                  parameter_14[(long)pointer_variable_4 + long_var] = (void *)(long_var * 0x30 + (long)parameter_13);\n                  long_var = long_var + 1;\n                } while (long_variable_2 != long_var);\n                parameter_14[(long)pointer_variable_4 + long_variable_2] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (output_array != (undefined8 *)0x0)) {\n                free(output_array);\n              }\n              if ((*(byte *)((long)unaff_rbp + 0x4a) & 0x10) != 0) {\n                output_array = (undefined8 *)*unaff_rbp;\n                DAT_0010b230 = '\\0';\n                ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                print_error_message_00106400(ulong_var);\n              }\n              element_size = (undefined8 *)(ulong)stack_var._4_4_;\n              bool_var = DAT_0010b80c != 0;\n              pointer_variable_3 = (undefined8 *)(ulong)bool_var;\n              input_rcx = parameter_14;\n              parameter_9 = parameter_14;\n              unaff_r15 = (undefined8 *)(**(code **)(unaff_rbp[1] + 0x208))(unaff_rbp);\n              if (unaff_r15 != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              pointer_variable_3 = (undefined8 *)((long)pointer_variable_3 * (long)unaff_r12 + (long)pointer_variable_4);\n              output_array = pointer_variable_4;\n              while( true ) {\n                if (pointer_variable_3 <= output_array) goto LAB_00104c75;\n                input_rcx = unaff_r15;\n                long_variable_2 = (**(code **)(unaff_rbp[1] + 0x270))(unaff_rbp,element_size,output_array);\n                if (long_variable_2 == 0) break;\n                output_array = (undefined8 *)((long)output_array + (long)unaff_r12);\n                print_matching_records_00105110(unaff_rbp,long_variable_2,0,param_7);\n              }\n              print_error_message_00106530(*unaff_rbp,0);\n            }\n            print_error_message_00106530(*unaff_rbp);\n            pointer_variable_4 = unaff_rbp;\n            temp_ptr = unaff_r15;\nLAB_00102eb0:\n            print_error_message_00106530(*pointer_variable_3);\nLAB_00102eb9:\n            print_error_message_00106530(*pointer_variable_4);\nLAB_00102ec2:\n            pointer_variable_3 = (undefined8 *)0x0;\n            temp_ptr = output_array;\n            undefined8_pointer_5 = unaff_r12;\n            pointer_variable_5 = input_rcx;\n            unaff_rbp = undefined8_pointer_7;\n            parameter_8 = temp_ptr;\nLAB_00104e35:\n            while (undefined8_pointer_7 = pointer_variable_5, temp_ptr < element_size) {\n              output_array = (undefined8 *)((long)temp_ptr + (long)undefined8_pointer_5);\n              if (output_array < element_size) {\n                ptr_var = unaff_rbp;\n                pointer_variable_5 = undefined8_pointer_5;\n                pointer_variable_6 = undefined8_pointer_7;\n                ptr_var_2 = (undefined8 *)(**(code **)(pointer_variable_4[1] + 0x270))();\n                if (ptr_var_2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                  undefined8_pointer_7 = pointer_variable_6;\n                  undefined8_pointer_5 = pointer_variable_5;\n                  pointer_variable_4 = (undefined8 *)*pointer_variable_4;\n                  ptr_var_2 = (undefined8 *)print_error_message_00106530();\n                }\n                else {\n                  ptr_var = (undefined8 *)pointer_variable_3[4];\n                  if ((*(uint *)(pointer_variable_3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                long_variable_2 = pointer_variable_3[2];\nLAB_00102ee7:\n                if (ptr_var == (undefined8 *)ptr_var_2[4]) {\n                  long_variable_2 = ptr_var_2[2] - long_variable_2;\n                  pointer_variable_5 = unaff_rbp;\n                  pointer_variable_6 = temp_ptr;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                long_variable_2 = ptr_var[8] - long_variable_2;\n                pointer_variable_5 = unaff_rbp;\n                pointer_variable_6 = temp_ptr;\n              }\n              else {\n                ptr_var = (undefined8 *)pointer_variable_3[4];\n                if ((*(uint *)(pointer_variable_3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  long_variable_2 = pointer_variable_3[2];\n                  ptr_var_2 = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                ptr_var_2 = (undefined8 *)0x0;\nLAB_00104e95:\n                pointer_variable_5 = unaff_rbp;\n                pointer_variable_6 = temp_ptr;\n                if (*(int *)(pointer_variable_4[1] + 8) == 5) {\n                  long_variable_2 = pointer_variable_3[7];\n                }\n                else {\n                  long_variable_2 = pointer_variable_3[2];\n                  if ((*(byte *)((long)ptr_var + 0x25) & 0x10) == 0) {\n                    if (output_array < element_size) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              pointer_variable_3 = ptr_var_2;\n              temp_ptr = output_array;\n              unaff_rbp = undefined8_pointer_7;\n              if (long_variable_2 != 0) {\n                *temp_ptr = pointer_variable_6;\n                temp_ptr[1] = long_variable_2;\n                temp_ptr = temp_ptr + 2;\n              }\n            }\n            pointer_variable_3 = (undefined8 *)((long)temp_ptr - (long)parameter_8 >> 4);\n            qsort(parameter_8,(size_t)pointer_variable_3,0x10,compare_and_execute_00103533);\n            long_variable_2 = pointer_variable_4[1];\n            output_array = temp_ptr;\n            unaff_rbp = pointer_variable_4;\n            temp_ptr = parameter_8;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      int_var = strcmp(str + (str[2] == '_'),\"__gnu_lto_slim\");\n      parameter_8 = input_rcx;\n      if (int_var == 0) {\n        if (DAT_0010b230 != '\\0') {\n          parameter_8 = (undefined8 *)*unaff_rbp;\n          DAT_0010b230 = '\\0';\n          ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          print_error_message_00106400(ulong_var,parameter_8);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        uint_var = (*(uint *)(input_rcx + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(input_rcx + 3) & 0x800082) == 0) && (input_rcx[4] != 0x10c2a8)) &&\n         ((*(byte *)(input_rcx[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byte *)(input_rcx + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  undefined8_pointer_7 = (undefined8 *)(ulong)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    char_var = (**(code **)(unaff_rbp[1] + 0x230))(unaff_rbp);\n    if (char_var != '\\0') {\n      process_process_lto_object_00104d5b();\n      return;\n    }\n  }\n  else {\n    if (input_rcx[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    char_var = (**(code **)(unaff_rbp[1] + 0x230))(unaff_rbp);\n    if (char_var != '\\0') {\n      process_process_lto_object_00104d5b();\n      return;\n    }\n  }\n  if (output_array != unaff_r13) {\n    if (element_size != (undefined8 *)0x8) {\n      for (; element_size != (undefined8 *)0x0; element_size = (undefined8 *)((long)element_size + -1)) {\n        *(undefined *)output_array = *(undefined *)unaff_r13;\n        unaff_r13 = (undefined8 *)((long)unaff_r13 + (ulong)byte_var * -2 + 1);\n        output_array = (undefined8 *)((long)output_array + (ulong)byte_var * -2 + 1);\n      }\n      process_data_001049c0();\n      return;\n    }\n    *output_array = *unaff_r13;\n    process_data_001049c0();\n    return;\n  }\n  output_array = (undefined8 *)((long)output_array + (long)element_size);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  temp_ptr = (undefined8 *)((long)unaff_r12 * (long)element_size);\n  unaff_r12 = (undefined8 *)((long)parameter_9 + (long)temp_ptr);\n  output_array = parameter_9;\n  pointer_variable_4 = unaff_rbp;\n  if (parameter_9 < unaff_r12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  return_address = (ulong)bool_var;\n  unaff_r13 = parameter_9;\n  goto LAB_001049cf;\n}\n\n",
            "renaming": {
                "FUN_00104d5b": "process_lto_object_00104d5b",
                "pcVar1": "str",
                "pcVar2": "function_pointer",
                "cVar3": "char_var",
                "iVar4": "int_var",
                "uVar5": "uint_var",
                "uVar6": "ulong_var",
                "puVar7": "ptr_var",
                "lVar8": "long_var",
                "lVar9": "long_variable_2",
                "__ptr": "temp_ptr",
                "puVar10": "ptr_var_2",
                "puVar11": "pointer_variable_3",
                "puVar12": "pointer_variable_4",
                "in_R8": "undefined8_pointer_5",
                "puVar13": "pointer_variable_5",
                "in_R9": "undefined8_pointer_7",
                "puVar14": "pointer_variable_6",
                "puVar15": "temp_ptr",
                "unaff_R12": "unaff_r12",
                "unaff_R13": "unaff_r13",
                "unaff_R14": "element_size",
                "unaff_R15": "unaff_r15",
                "bVar16": "bool_var",
                "bVar17": "byte_var",
                "unaff_retaddr": "return_address",
                "uVar18": "u_var18",
                "param_8": "parameter_8",
                "param_9": "parameter_9",
                "param_13": "parameter_13",
                "param_14": "parameter_14",
                "in_RCX": "input_rcx",
                "unaff_RBX": "output_array",
                "unaff_RBP": "unaff_rbp",
                "in_stack_00000038": "stack_var",
                "lto_object_00102c19": "process_lto_object"
            },
            "calling": [
                "FUN_00104d5b"
            ],
            "called": [
                "strcmp",
                "FUN_001049c0",
                "FUN_00102c19",
                "FUN_00104d5b",
                "xrealloc",
                "qsort",
                "FUN_00105110",
                "FUN_00102fd2",
                "free",
                "FUN_00103533",
                "FUN_00106530",
                "xmalloc",
                "dcgettext",
                "FUN_00106400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104d5b": {
                    "2": "process_lto_object_00104d5b",
                    "1": "process_lto_binary",
                    "22": "process_lto_object",
                    "4": "process_lto_objects"
                },
                "pcVar1": {
                    "1": "char_pointer_1",
                    "3": "str",
                    "2": "string_pointer"
                },
                "pcVar2": {
                    "3": "func",
                    "7": "function_pointer",
                    "1": "pointer_var2",
                    "5": "function_ptr",
                    "2": "code_pointer"
                },
                "cVar3": {
                    "9": "char_var",
                    "1": "temp_char",
                    "2": "ch",
                    "3": "character"
                },
                "iVar4": {
                    "1": "int_value",
                    "2": "integer_var",
                    "9": "int_var",
                    "4": "comparison_result",
                    "3": "integer_variable"
                },
                "uVar5": {
                    "1": "temp_var",
                    "2": "unsigned_variable",
                    "10": "uint_var"
                },
                "uVar6": {
                    "1": "unsigned_variable_3",
                    "6": "ulong_var",
                    "3": "undefined8_var"
                },
                "puVar7": {
                    "1": "undefined8_ptr",
                    "2": "pointer_var",
                    "4": "pointer_variable",
                    "5": "ptr_var"
                },
                "lVar8": {
                    "1": "index",
                    "5": "long_variable",
                    "8": "long_var",
                    "2": "size"
                },
                "lVar9": {
                    "1": "loop_counter_2",
                    "2": "value",
                    "4": "long_variable_2"
                },
                "__ptr": {
                    "2": "temp_ptr",
                    "1": "additional_memory_2"
                },
                "puVar10": {
                    "1": "matching_record",
                    "2": "ptr_var_2"
                },
                "puVar11": {
                    "1": "ptr_var_3",
                    "2": "pointer_variable_3"
                },
                "puVar12": {
                    "1": "pointer_to_base",
                    "2": "pointer_variable_4"
                },
                "in_R8": {
                    "1": "r8"
                },
                "puVar13": {
                    "2": "pointer_variable_5",
                    "1": "undefined8_pointer6"
                },
                "in_R9": {
                    "1": "param"
                },
                "puVar14": {
                    "1": "pointer_value_6",
                    "2": "pointer_variable_6"
                },
                "puVar15": {
                    "2": "pointer_variable_7",
                    "1": "pointer_value_7"
                },
                "unaff_R12": {
                    "1": "undefined8_pointer11",
                    "2": "unaff_r12"
                },
                "unaff_R13": {
                    "1": "loop_ptr",
                    "2": "unaff_r13"
                },
                "unaff_R14": {
                    "1": "temp_pointer_15",
                    "2": "element_size"
                },
                "unaff_R15": {
                    "1": "temp_ptr7",
                    "2": "unaff_r15"
                },
                "bVar16": {
                    "10": "bool_var",
                    "1": "is_lto_object",
                    "2": "flag",
                    "5": "boolean_variable"
                },
                "bVar17": {
                    "2": "byte",
                    "1": "var_5",
                    "5": "byte_variable",
                    "9": "byte_var"
                },
                "unaff_retaddr": {
                    "1": "ulong_var_2",
                    "2": "retaddr",
                    "3": "ulong_var",
                    "10": "return_address"
                },
                "uVar18": {
                    "1": "ulong_var_3",
                    "3": "is_plugin_needed",
                    "2": "ulong_var3"
                },
                "param_7": {
                    "1": "param",
                    "2": "param7",
                    "6": "param_7",
                    "5": "parameter_7"
                },
                "param_8": {
                    "1": "input_data",
                    "4": "parameter_8",
                    "2": "param_8"
                },
                "param_9": {
                    "1": "output_array2",
                    "2": "parameter9",
                    "4": "parameter_9"
                },
                "param_13": {
                    "1": "ptr_param_1",
                    "2": "additional_data",
                    "5": "parameter_13",
                    "3": "param_13"
                },
                "param_14": {
                    "2": "param14",
                    "1": "param_var14",
                    "4": "parameter_14"
                },
                "in_RCX": {
                    "1": "rcx",
                    "2": "input_array",
                    "3": "input_rcx"
                },
                "unaff_RBX": {
                    "1": "ptr_var_3",
                    "2": "output_array"
                },
                "unaff_RBP": {
                    "1": "obj",
                    "2": "unaff_rbp"
                },
                "in_stack_00000038": {
                    "1": "stack_param",
                    "2": "stack_variable",
                    "4": "stack_var"
                },
                "lVar10": {
                    "1": "loop_var2"
                },
                "lVar19": {
                    "1": "long_var2"
                },
                "in_RBP": {
                    "1": "context"
                },
                "lVar8/9": {
                    "1": "combined_long_variable"
                },
                "lVar9/8": {
                    "1": "combined_long_variable_2"
                },
                "lto_object_00102c19": {
                    "1": "process_lto_object"
                },
                "pushedR9": {
                    "1": "var_24"
                },
                "pushedR8": {
                    "1": "var_25"
                },
                "pushedRBP": {
                    "1": "var_26"
                },
                "pushedRBX": {
                    "1": "var_27"
                },
                "pushedRDI": {
                    "1": "var_28"
                },
                "mutexVar": {
                    "1": "var_29"
                },
                "hInstanceVar": {
                    "1": "var_30"
                },
                "in_stach_00000038": {
                    "1": "chunk_size"
                },
                "lVar15": {
                    "1": "long_variable3"
                },
                "lVar20": {
                    "1": "long_variable4"
                },
                "puVar23": {
                    "1": "pointer_variable3"
                },
                "void *param_13": {
                    "1": "void_ptr"
                },
                "bool bVar16": {
                    "1": "bool_var_2"
                },
                "byte bVar17": {
                    "1": "byte_var_2"
                },
                "ulong unaff_retaddr": {
                    "1": "retaddr_2"
                },
                "ulong uVar18": {
                    "1": "u_var18_2"
                }
            }
        },
        "FUN_00104fa0": {
            "entrypoint": "0x00104fa0",
            "current_name": "compare_strings_00104fa0",
            "code": "\nuint compare_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *str2;\n  char *str1;\n  uint comparison_result;\n  long string1_length;\n  long string2_length;\n  \n  string1_length = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string1,DAT_0010b770);\n  string2_length = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string2,DAT_0010b768);\n  if ((string1_length == 0) || (string2_length == 0)) {\n    print_error_message_00106530(*DAT_0010b780);\n  }\n  else {\n    str2 = *(char **)(string2_length + 8);\n    str1 = *(char **)(string1_length + 8);\n    if (str2 == (char *)0x0) {\n      return (uint)(str1 != (char *)0x0);\n    }\n    if (str1 != (char *)0x0) {\n      if (*str2 == '\\0') {\n        return (uint)(*str1 != '\\0');\n      }\n      if (*str1 == '\\0') {\n        return 0xffffffff;\n      }\n      comparison_result = strcoll(str1,str2);\n      return comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "str2",
                "__s1": "str1",
                "uVar1": "comparison_result",
                "lVar2": "string1_length",
                "lVar3": "string2_length"
            },
            "calling": [
                "FUN_00105050",
                "FUN_00103bf6",
                "FUN_00102fd2"
            ],
            "called": [
                "strcoll",
                "FUN_00102f9f"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104fa0": {
                    "1": "compare_and_collate_strings",
                    "30": "compare_strings"
                },
                "param_1": {
                    "24": "string1",
                    "7": "string_1"
                },
                "param_2": {
                    "7": "string_2",
                    "24": "string2"
                },
                "__s2": {
                    "2": "str_2",
                    "1": "str2_ptr",
                    "4": "ptr_string2",
                    "3": "string_2_ptr",
                    "8": "string2_ptr",
                    "12": "str2"
                },
                "__s1": {
                    "2": "str_1",
                    "1": "first_string",
                    "4": "ptr_string1",
                    "12": "str1",
                    "8": "string1_ptr",
                    "3": "string_1_ptr"
                },
                "uVar1": {
                    "22": "comparison_result",
                    "5": "result",
                    "4": "string_comparison_result"
                },
                "lVar2": {
                    "2": "str1_length",
                    "6": "string1_length",
                    "5": "result1",
                    "1": "length_string1",
                    "3": "string_1_length"
                },
                "lVar3": {
                    "1": "length2",
                    "2": "result_string2",
                    "6": "string2_length",
                    "3": "string_2_length",
                    "5": "result2"
                }
            }
        },
        "FUN_00105050": {
            "entrypoint": "0x00105050",
            "current_name": "compare_binary_files_00105050",
            "code": "\nulong compare_binary_files_00105050(undefined8 string1,undefined8 string2)\n\n{\n  char last_char;\n  ulong file1_size;\n  char *string1;\n  char *string2;\n  long file1_length;\n  uint flag;\n  size_t string1_length;\n  size_t string2_length;\n  char *gnu_compiled;\n  char *gcc2_compiled;\n  long result_1;\n  long result_2;\n  ulong result;\n  ulong file2_end;\n  ulong string1_offset;\n  ulong string1_end;\n  undefined8 error_message;\n  long message;\n  bool is_equal;\n  \n  result_1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string1,DAT_0010b770);\n  result = (ulong)DAT_0010b778;\n  result_2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,result,string2,DAT_0010b768);\n  if ((result_1 != 0) && (result_2 != 0)) {\n    file1_length = *(long *)(result_2 + 0x20);\n    if (*(long *)(result_1 + 0x20) == 0x10c2a8) {\n      result = 0xffffffff;\n      if (file1_length == 0x10c2a8) {\nLAB_001050fa:\n        result = compare_strings_00104fa0(string1,string2);\n        return result;\n      }\n    }\n    else if (file1_length == 0x10c2a8) {\n      result = 1;\n    }\n    else {\n      string1_offset = *(long *)(result_1 + 0x10) + *(long *)(*(long *)(result_1 + 0x20) + 0x30);\n      result = *(long *)(result_2 + 0x10) + *(long *)(file1_length + 0x30);\n      if (string1_offset == result) goto LAB_001050fa;\n      result = (ulong)(-(uint)(string1_offset < result) | 1);\n    }\n    return result;\n  }\n  error_message = *DAT_0010b780;\n  print_error_message_00106530();\n  result_1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,error_message,DAT_0010b770);\n  result_2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,result,DAT_0010b768);\n  if ((result_1 == 0) || (message = result_2, result_2 == 0)) {\n    result_2 = print_error_message_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result_1 + 0x20) == 0x10c2a8) || (*(long *)(result_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  string1_offset = *(ulong *)(*(long *)(result_1 + 0x20) + 0x30);\n  file1_size = *(ulong *)(*(long *)(result_2 + 0x20) + 0x30);\n  string1_end = *(long *)(result_1 + 0x10) + string1_offset;\n  file2_end = *(long *)(message + 0x10) + file1_size;\n  is_equal = string1_end < file2_end;\n  if ((string1_end != file2_end) || (is_equal = string1_offset < file1_size, string1_offset != file1_size)) {\n    return (ulong)(-(uint)is_equal | 1);\n  }\n  string1 = *(char **)(result_1 + 8);\n  string2 = *(char **)(message + 8);\n  string1_length = strlen(string1);\n  string2_length = strlen(string2);\n  gnu_compiled = strstr(string1,\"gnu_compiled\");\n  if (gnu_compiled == (char *)0x0) {\n    gcc2_compiled = strstr(string1,\"gcc2_compiled\");\n    gnu_compiled = strstr(string2,\"gnu_compiled\");\n    if ((gnu_compiled == (char *)0x0) && (gnu_compiled = strstr(string2,\"gcc2_compiled\"), gnu_compiled == (char *)0x0))\n    goto joined_r0x00103157;\n    if (gcc2_compiled == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    gnu_compiled = strstr(string2,\"gnu_compiled\");\n    if (gnu_compiled == (char *)0x0) {\n      gcc2_compiled = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (gcc2_compiled != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(message + 0x18) & 0x4000;\n  if ((*(byte *)(result_1 + 0x19) & 0x40) == 0) {\n    if ((string1_length < 3) || (string1[string1_length - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((string2_length < 3) || (string2[string2_length - 2] != '.')) goto LAB_00103202;\n      is_equal = false;\n      goto LAB_001031e7;\n    }\n    last_char = string1[string1_length - 1];\n    is_equal = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((string2_length < 3) || (string2[string2_length - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (string2_length < 3) {\n      return 0xffffffff;\n    }\n    if (string2[string2_length - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_equal = true;\nLAB_001031e7:\n    if ((string2[string2_length - 1] != 'o') && (string2[string2_length - 1] != 'a')) {\n      if (is_equal) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_equal) {\n    return 1;\n  }\nLAB_00103202:\n  result = compare_strings_00104fa0(error_message,result);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00105050": "compare_binary_files_00105050",
                "param_1": "string1",
                "param_2": "string2",
                "__s": "string1",
                "__s_00": "string2",
                "uVar11": "result",
                "uVar2": "file1_size",
                "uVar13": "string1_offset",
                "uVar14": "string1_end",
                "uVar12": "file2_end",
                "bVar16": "is_equal",
                "pcVar7": "gnu_compiled",
                "pcVar8": "gcc2_compiled",
                "sVar5": "string1_length",
                "sVar6": "string2_length",
                "uVar4": "flag",
                "cVar1": "last_char",
                "lVar3": "file1_length",
                "lVar9": "result_1",
                "lVar10": "result_2",
                "uVar15": "error_message",
                "unaff_R13": "message"
            },
            "calling": [
                "FUN_00103bec"
            ],
            "called": [
                "FUN_00102fc3",
                "FUN_00104fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105050": {
                    "1": "check_strings_and_lengths",
                    "12": "compare_binary_files",
                    "3": "compare_and_validate_strings"
                },
                "param_1": {
                    "1": "file1_path",
                    "7": "file1",
                    "2": "binary_file1",
                    "8": "string1"
                },
                "param_2": {
                    "1": "executable_2",
                    "8": "string2",
                    "2": "input2",
                    "7": "file2"
                },
                "__s": {
                    "2": "string1_ptr",
                    "1": "file_contents_1",
                    "5": "file1_content",
                    "7": "string1"
                },
                "__s_00": {
                    "2": "string2_ptr",
                    "7": "string2",
                    "1": "binary_string2",
                    "5": "str2"
                },
                "uVar11": {
                    "1": "return_value",
                    "21": "result",
                    "3": "comparison_result"
                },
                "uVar2": {
                    "1": "file2_header",
                    "2": "string2_length",
                    "3": "file1_size"
                },
                "uVar13": {
                    "4": "string1_offset",
                    "1": "ptr1_offset",
                    "2": "file1_size",
                    "3": "file1_offset"
                },
                "uVar14": {
                    "1": "expected_value1",
                    "2": "end1",
                    "3": "file1_end"
                },
                "uVar12": {
                    "1": "file2_size_adjusted",
                    "2": "file2_end_offset",
                    "3": "file2_end"
                },
                "bVar16": {
                    "1": "is_string2_longer",
                    "2": "is_less",
                    "4": "is_different",
                    "6": "is_equal"
                },
                "pcVar7": {
                    "1": "first_substring_check",
                    "2": "gnu_compiled"
                },
                "pcVar8": {
                    "1": "ptr2",
                    "2": "gcc2_compiled"
                },
                "sVar5": {
                    "1": "length_string1",
                    "5": "string1_length",
                    "2": "file1_len"
                },
                "sVar6": {
                    "1": "length_2",
                    "5": "string2_length",
                    "2": "file2_len"
                },
                "uVar4": {
                    "1": "is_executable",
                    "8": "flag",
                    "2": "file2_flags",
                    "5": "flags"
                },
                "cVar1": {
                    "7": "last_char",
                    "1": "last_char_of_string1"
                },
                "lVar3": {
                    "1": "ptr1_length",
                    "2": "file1_magic",
                    "3": "len1",
                    "4": "file1_length"
                },
                "lVar9": {
                    "1": "file1_details",
                    "3": "result1"
                },
                "lVar10": {
                    "1": "artifact2_info",
                    "3": "result2",
                    "2": "file2_magic"
                },
                "uVar15": {
                    "1": "data",
                    "7": "error_message",
                    "3": "error"
                },
                "unaff_R13": {
                    "1": "unaff_param"
                },
                "lVar11": {
                    "1": "result"
                }
            }
        },
        "FUN_00105110": {
            "entrypoint": "0x00105110",
            "current_name": "print_matching_records_00105110",
            "code": "\n\n\nvoid print_matching_records_00105110(undefined8 *strings,long *sections,undefined8 param_3,undefined8 *file_name)\n\n{\n  void *ptr;\n  char *str1;\n  long **ptr_ptr1;\n  long *ptr_var2;\n  long var3;\n  undefined8 *ptr_var4;\n  char char_var;\n  int int_var;\n  void *ptr_var7;\n  long var8;\n  uint uint_var;\n  long var10;\n  uint local_var_b4;\n  undefined local_var_b0 [8];\n  undefined *local_ptr;\n  undefined8 local_var_a0;\n  long *local_var_98;\n  long *local_var_90;\n  void *local_ptr;\n  void *stack_ptr1;\n  void *stack_ptr2;\n  void *stack_ptr3;\n  undefined local_var_68 [8];\n  char local_char;\n  \n  if (*(code **)(PTR_PTR_FUN_0010b260 + 0x18) == print_strings) {\n    if (DAT_0010b818 != 0) {\n      if (file_name != (undefined8 *)0x0) {\n        printf(\"%s:\",*file_name);\n      }\n      printf(\"%s:\",*strings);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x18))(file_name,strings);\n  }\n  local_ptr = local_var_68;\n  (**(code **)(strings[1] + 0x218))(strings,sections,local_ptr);\n  uint_var = *(uint *)(sections + 3);\n  char_var = local_char;\n  if (((((local_char == 'i') && ((uint_var & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (char_var = *DAT_0010b7c8, (uint_var & 2) == 0)))) &&\n     (char_var = local_char, DAT_0010b7c8[1] != '\\0')) {\n    char_var = DAT_0010b7c8[1];\n  }\n  local_char = char_var;\n  local_var_a0 = param_3;\n  if ((uint_var & 0x200100) != 0) goto LAB_00103330;\n  var8 = *sections;\n  int_var = *(int *)(*(long *)(var8 + 8) + 8);\n  if (((uint_var & 0x200000) == 0) && (int_var == 5)) {\n    local_var_98 = sections;\n    if (*(long *)(var8 + 0x110) == 0) {\n      local_var_98 = (long *)0x0;\n    }\n  }\n  else {\n    local_var_98 = (long *)0x0;\n    if (((int_var - 2U & 0xfffffffd) == 0) && (local_var_90 = sections, *(long *)(var8 + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  local_var_90 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&local_ptr,strings);\n  do {\n    if (DAT_0010b804 == 0) {\nlabel2:\n      putc_fun(10,stdout_var);\n      return;\n    }\n    if (_DAT_0010b7b8 == strings) {\n      ptr_var4 = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto label1;\nLAB_00105288:\n      _DAT_0010b7b8 = ptr_var4;\n      ptr_var7 = DAT_0010b750;\n      if (sections[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == strings) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          uint_var = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; uint_var < DAT_0010b748; uint_var = uint_var + 1) {\n              ptr = *(void **)((long)ptr_var7 + (ulong)uint_var * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(ptr_var7);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(strings + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          stack_ptr3 = DAT_0010b758;\n          local_ptr = DAT_0010b740;\n          stack_ptr1 = DAT_0010b750;\n          stack_ptr2 = DAT_0010b738;\n          bfd_map_over_sections_fun(strings,process_relocation_fun,&local_ptr);\n          _DAT_0010b7b0 = strings;\n        }\n        str1 = (char *)sections[1];\n        for (uint_var = 0; uint_var < DAT_0010b748; uint_var = uint_var + 1) {\n          var8 = (ulong)uint_var * 8;\n          ptr_var7 = DAT_0010b738;\n          for (var10 = 0;\n              *(long *)((long)ptr_var7 + var8) != var10 && var10 <= *(long *)((long)ptr_var7 + var8)\n              ; var10 = var10 + 1) {\n            ptr_ptr1 = *(long ***)(*(long *)((long)DAT_0010b750 + var8) + var10 * 8);\n            ptr_var2 = *ptr_ptr1;\n            if ((((ptr_var2 != (long *)0x0) &&\n                 (var3 = *ptr_var2, *(long *)(var3 + 0x20) == sections[4])) &&\n                (*(long *)(var3 + 0x10) == sections[2])) &&\n               (((int_var = strcmp(str1,*(char **)(var3 + 8)), int_var == 0 &&\n                 (char_var = (**(code **)(strings[1] + 0x240))\n                                    (strings,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + var8),ptr_ptr1[1],\n                                     &local_ptr,local_var_b0,&local_var_b4,0), ptr_var7 = DAT_0010b738,\n                 char_var != '\\0')) && (local_ptr != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",local_ptr,(ulong)local_var_b4);\n              uint_var = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(sections[4] + 0xe0) == strings) {\n        char_var = (**(code **)(strings[1] + 0x250))(strings,DAT_0010b758,sections,&local_ptr,&local_var_b4);\n        if (((char_var != '\\0') ||\n            (char_var = (**(code **)(strings[1] + 0x240))\n                               (strings,DAT_0010b758,sections[4],sections[2],&local_ptr,local_var_b0,\n                                &local_var_b4,0), char_var != '\\0')) &&\n           ((local_ptr != (void *)0x0 && (local_var_b4 != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto label2;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nlabel1:\n    var8 = (**(code **)(strings[1] + 0x1f8))(strings);\n    if (var8 < 0) {\n      print_matching_records_00105110_fun(var8);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    var8 = (**(code **)(strings[1] + 0x200))(strings,DAT_0010b758);\n    ptr_var4 = strings;\n    if (-1 < var8) goto LAB_00105288;\n    print_error_message_fun(*strings);\nLAB_00103330:\n    local_var_98 = (long *)0x0;\n    local_var_90 = (long *)0x0;\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&local_ptr,strings);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00105110": "print_matching_records_00105110",
                "param_1": "strings",
                "param_2": "sections",
                "param_4": "file_name",
                "__ptr": "ptr",
                "__s1": "str1",
                "pplVar1": "ptr_ptr1",
                "plVar2": "ptr_var2",
                "lVar3": "var3",
                "puVar4": "ptr_var4",
                "cVar5": "char_var",
                "iVar6": "int_var",
                "pvVar7": "ptr_var7",
                "lVar8": "var8",
                "uVar9": "uint_var",
                "lVar10": "var10",
                "local_b4": "local_var_b4",
                "local_b0": "local_var_b0",
                "local_a8": "local_ptr",
                "local_a0": "local_var_a0",
                "local_98": "local_var_98",
                "local_90": "local_var_90",
                "local_88": "local_ptr",
                "pvStack_80": "stack_ptr1",
                "pvStack_78": "stack_ptr2",
                "pvStack_70": "stack_ptr3",
                "local_68": "local_var_68",
                "local_60": "local_char",
                "_stdout": "stdout_var",
                "print_strings_001053b0": "print_strings",
                "LAB_00105359": "label1",
                "LAB_001051e6": "label2",
                "strcmp": "string_compare2",
                "printf": "print_formatted",
                "xmalloc": "allocate_memory",
                "free": "deallocate_memory",
                "process_relocation_00103c00": "process_relocation_fun",
                "bfd_map_over_sections": "bfd_map_over_sections_fun",
                "putc": "putc_fun",
                "print_matching_records_00103463": "print_matching_records_fun",
                "print_error_message_00106530": "print_error_message_fun"
            },
            "calling": [
                "FUN_00104d5b"
            ],
            "called": [
                "FUN_001053b0",
                "FUN_00103463",
                "FUN_00103238",
                "FUN_00106530",
                "printf",
                "xmalloc",
                "FUN_001053c0",
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105110": {
                    "2": "process_data",
                    "1": "print_records",
                    "15": "print_matching_records"
                },
                "param_1": {
                    "7": "strings",
                    "3": "strings_array",
                    "1": "string_arr",
                    "2": "string_array"
                },
                "param_2": {
                    "1": "param_2_array",
                    "3": "sections",
                    "2": "long_array"
                },
                "param_3": {
                    "1": "param3_value",
                    "3": "param",
                    "11": "param_3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "record_name",
                    "2": "additional_info",
                    "4": "file_name"
                },
                "__ptr": {
                    "27": "ptr",
                    "1": "section_data",
                    "2": "section_ptr"
                },
                "__s1": {
                    "1": "string",
                    "2": "string_1",
                    "6": "string1",
                    "4": "section_name",
                    "3": "str"
                },
                "pplVar1": {
                    "1": "matching_section",
                    "2": "section_pointer",
                    "3": "ptr_ptr_var1",
                    "4": "ptr_ptr1"
                },
                "plVar2": {
                    "1": "section_ptr2",
                    "3": "ptr1",
                    "4": "ptr_var2",
                    "2": "ptr2"
                },
                "lVar3": {
                    "1": "var2",
                    "6": "var3",
                    "5": "long_var"
                },
                "puVar4": {
                    "1": "param_value_ptr",
                    "6": "ptr_var4",
                    "4": "ptr_var",
                    "2": "ptr2"
                },
                "cVar5": {
                    "12": "char_var",
                    "2": "char1",
                    "1": "temp_char",
                    "5": "char_var5"
                },
                "iVar6": {
                    "1": "section_type",
                    "4": "int_var6",
                    "12": "int_var",
                    "2": "int_value"
                },
                "pvVar7": {
                    "1": "void_pointer",
                    "2": "ptr4",
                    "7": "ptr_var7"
                },
                "lVar8": {
                    "1": "loop_var",
                    "7": "var8",
                    "2": "long_var2",
                    "4": "long_var"
                },
                "uVar9": {
                    "1": "var4",
                    "3": "flags",
                    "9": "uint_var",
                    "2": "uint_var9"
                },
                "lVar10": {
                    "1": "long_var_3",
                    "7": "var10",
                    "2": "loop_var"
                },
                "local_b4": {
                    "4": "local_uint",
                    "1": "local_value1",
                    "2": "local_var",
                    "6": "local_var_b4"
                },
                "local_b0": {
                    "1": "var_b0",
                    "2": "local_variable_b0",
                    "6": "local_var_b0",
                    "4": "local_array"
                },
                "local_a8": {
                    "1": "undefined_pointer",
                    "2": "local_ptr_a8",
                    "3": "local_var_a8"
                },
                "local_a0": {
                    "1": "local_var",
                    "2": "local_var_2",
                    "5": "local_var_a0"
                },
                "local_98": {
                    "1": "found_section",
                    "3": "local_var_98",
                    "2": "local_variable_98"
                },
                "local_90": {
                    "1": "disabled_record_data",
                    "3": "local_var_90",
                    "2": "local_variable_90"
                },
                "local_88": {
                    "1": "local_ptr88",
                    "3": "local_var_88",
                    "2": "relocation_buffer",
                    "4": "local_ptr"
                },
                "pvStack_80": {
                    "1": "stack_var80",
                    "2": "stack_ptr80",
                    "3": "stack_ptr1"
                },
                "pvStack_78": {
                    "2": "ptr_stack2",
                    "1": "stack_ptr_2",
                    "3": "ptr_stack_78"
                },
                "pvStack_70": {
                    "1": "stack_var70",
                    "2": "stack_ptr_70",
                    "3": "stack_ptr3"
                },
                "local_68": {
                    "1": "local_arr3",
                    "4": "local_var_68",
                    "2": "local_array3"
                },
                "local_60": {
                    "1": "temp_char",
                    "2": "char2",
                    "3": "char_var2",
                    "8": "local_char"
                },
                "*param_1": {
                    "1": "string_pointer"
                },
                "*param_2": {
                    "1": "long_pointer"
                },
                "*param_4": {
                    "1": "string_parameter"
                },
                "_stdout": {
                    "1": "output_stream",
                    "2": "stdout_var"
                },
                "_DAT_0010b7b8": {
                    "1": "dat_10"
                },
                "DAT_0010b758": {
                    "1": "dat3"
                },
                "DAT_0010b7b0": {
                    "1": "data_ptr3"
                },
                "DAT_0010b750": {
                    "1": "data_ptr4"
                },
                "DAT_0010b740": {
                    "1": "global_var7"
                },
                "DAT_0010b738": {
                    "1": "data_ptr6"
                },
                "blank": {
                    "1": "new_value"
                },
                "PTR_PTR_FUN_0010b260": {
                    "1": "ptr_ptr_fun"
                },
                "print_strings_001053b0": {
                    "1": "print_strings_function"
                },
                "DAT_0010b818": {
                    "1": "dat_1"
                },
                "LAB_00105359": {
                    "1": "label1"
                },
                "bv_pad0x2": {
                    "1": "bv_pad0x2"
                },
                "bv_pad0x400000": {
                    "1": "bv_pad0x400000"
                },
                "DAT_0010b7c8": {
                    "1": "dat_2"
                },
                "strncmp": {
                    "1": "string_compare"
                },
                "puts": {
                    "1": "print_string"
                },
                "bv_pad0x200100": {
                    "1": "bv_pad0x200100"
                },
                "putchar": {
                    "1": "print_char"
                },
                "LAB_001051e6": {
                    "1": "label2"
                },
                "getc": {
                    "1": "get_char"
                },
                "_DAT_0010b7b0": {
                    "1": "dat5"
                },
                "strcmp": {
                    "1": "string_compare2"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "memset": {
                    "1": "set_memory"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "bv_pad0x110": {
                    "1": "bv_pad0x110"
                },
                "printf_3": {
                    "1": "print_formatted3"
                },
                "lVar18": {
                    "1": "var18"
                },
                "peopleinselinux_2_2_0_3.parser_pages": {
                    "1": "parser_pages"
                },
                "DAT_0010b7b8": {
                    "1": "dat_4"
                },
                "DAT_0010b804": {
                    "1": "global_var4"
                },
                "DAT_0010b748": {
                    "1": "global_var9"
                },
                "process_relocation_00103c00": {
                    "1": "process_relocation_fun"
                },
                "bfd_map_over_sections": {
                    "1": "bfd_map_over_sections_fun"
                },
                "putc": {
                    "1": "putc_fun"
                },
                "print_matching_records_00103463": {
                    "1": "print_matching_records_fun"
                },
                "print_error_message_00106530": {
                    "1": "print_error_message_fun"
                }
            }
        },
        "FUN_001053b0": {
            "entrypoint": "0x001053b0",
            "current_name": "print_strings_001053b0",
            "code": "\nvoid print_strings_001053b0(undefined8 *label,undefined8 *string2,undefined8 unused_param,undefined8 param_4)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (label != (undefined8 *)0x0) {\n    printf(\"%s:\",*label);\n  }\n  printf(\"%s:\",*string2,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001053b0": "print_strings_001053b0",
                "param_1": "label",
                "param_2": "string2",
                "param_3": "unused_param",
                "printf": "print_formatted_string"
            },
            "calling": [
                "FUN_00105110"
            ],
            "called": [
                "FUN_00103573"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001053b0": {
                    "4": "print_data",
                    "2": "print_string_with_prefix",
                    "1": "print_arguments",
                    "13": "print_strings",
                    "3": "print_parameters"
                },
                "param_1": {
                    "2": "message1",
                    "1": "file_name",
                    "3": "string_1",
                    "7": "label",
                    "6": "string1"
                },
                "param_2": {
                    "1": "string",
                    "6": "string2",
                    "4": "message",
                    "3": "string_2",
                    "2": "label2"
                },
                "param_3": {
                    "1": "unknown_param",
                    "3": "param3",
                    "5": "param_3",
                    "18": "unused_param"
                },
                "param_4": {
                    "1": "extra_message",
                    "5": "param_4",
                    "3": "param4",
                    "2": "suffix"
                },
                "*param_1": {
                    "1": "label1_str"
                },
                "*param_2": {
                    "1": "ptr_string2"
                },
                "printf": {
                    "1": "print_formatted_string"
                },
                "*param_3": {
                    "1": "unused"
                },
                "*param_4": {
                    "1": "unused"
                },
                "DAT_0010b818": {
                    "1": "condition"
                }
            }
        },
        "FUN_001053c0": {
            "entrypoint": "0x001053c0",
            "current_name": "print_symbol_info_001053c0",
            "code": "\nvoid print_symbol_info_001053c0(long *symbol_info,undefined8 print_width)\n\n{\n  int print_width;\n  char is_undefined;\n  undefined8 symbol_value;\n  long symbol_address;\n  \n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol_info + 8));\n  print_width = DAT_0010b7a8;\n  if (is_undefined == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        symbol_value = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        print_error_and_exit(symbol_value,print_width);\n        goto LAB_00103623;\n      }\n      symbol_value = *(undefined8 *)*symbol_info;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (symbol_info[2] == 0) {\n          symbol_address = symbol_info[1];\n        }\n        else {\n          symbol_address = *(long *)(symbol_info[2] + 0x38);\n        }\n        print_symbol_info_001053c0_details(symbol_address);\n        if (DAT_0010b7ec != 0) {\n          print_symbol_info_001053c0();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      symbol_value = *(undefined8 *)*symbol_info;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(DAT_0010b7a0,symbol_value);\n    if (DAT_0010b7ec != 0) {\n      print_symbol_info_001053c0();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) != '-') {\n    print_modified_string(&DAT_0010712c,symbol_info,0,print_width);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbol_info + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbol_info + 0x20));\n  print_modified_string(&DAT_0010712c,symbol_info,0,print_width);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "param_1": "symbol_info",
                "param_2": "print_width",
                "iVar1": "print_width",
                "cVar2": "is_undefined",
                "uVar3": "symbol_value",
                "lVar4": "symbol_address",
                "print_error_and_exit_00106300": "print_error_and_exit",
                "dcgettext": "get_error_message",
                "print_symbol_info_001054d0": "print_symbol_info_details",
                "print_symbol_info_001035a2": "print_symbol_info",
                "printf": "print_formatted",
                "print_modified_string_00104740": "print_modified_string",
                "putchar": "print_character"
            },
            "calling": [
                "FUN_00105110"
            ],
            "called": [
                "FUN_001035a2",
                "bfd_is_undefined_symclass",
                "FUN_00106300",
                "FUN_001054d0",
                "printf",
                "dcgettext"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001053c0": {
                    "5": "print_symbol_information",
                    "2": "print_symbol_details",
                    "3": "print_symbol_data",
                    "19": "print_symbol_info"
                },
                "param_1": {
                    "1": "symbol_ptr",
                    "6": "symbol_data",
                    "12": "symbol_info",
                    "10": "symbol"
                },
                "param_2": {
                    "1": "value_to_print",
                    "2": "value",
                    "4": "width",
                    "3": "param_2",
                    "5": "param",
                    "6": "print_width"
                },
                "iVar1": {
                    "2": "error_value",
                    "1": "initial_value",
                    "6": "error_code",
                    "8": "print_width"
                },
                "cVar2": {
                    "9": "is_undefined_symclass",
                    "12": "is_undefined",
                    "1": "is_undefined_symbol_class",
                    "6": "is_undefined_symbol",
                    "2": "is_undefined_sym_class"
                },
                "uVar3": {
                    "1": "print_value",
                    "13": "symbol_value",
                    "2": "symbol_info",
                    "3": "symbol",
                    "4": "print_width"
                },
                "lVar4": {
                    "3": "symbol_offset",
                    "1": "symbol_addr",
                    "2": "symbol_info_address",
                    "12": "symbol_address"
                },
                "print_error_and_exit_00106300": {
                    "4": "print_error_and_exit"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "get_error_message"
                },
                "print_symbol_info_001054d0": {
                    "2": "print_symbol_info"
                },
                "print_symbol_info_001035a2": {
                    "1": "print_symbol_info_and_exit",
                    "2": "print_symbol_info"
                },
                "printf": {
                    "4": "print_formatted"
                },
                "print_modified_string_00104740": {
                    "4": "print_modified_string"
                },
                "putchar": {
                    "3": "print_character",
                    "1": "print_char"
                },
                "getErrorMessage": {
                    "1": "gettext"
                },
                "printErrorAndExit": {
                    "1": "print_error_and_exit"
                },
                "DAT_0010b7a8": {
                    "1": "print_width_flag"
                },
                "DAT_0010b7f8": {
                    "1": "initialized"
                },
                "DAT_0010b7ec": {
                    "1": "print_info_flag"
                },
                "DAT_0010b7a0": {
                    "1": "format_string"
                },
                "DAT_0010b238": {
                    "1": "format_string1"
                },
                "DAT_0010b23d": {
                    "1": "format_string2"
                }
            }
        },
        "FUN_001054d0": {
            "entrypoint": "0x001054d0",
            "current_name": "print_symbol_info_001054d0",
            "code": "\nvoid print_symbol_info_001054d0(undefined8 symbol)\n\n{\n  char is_undefined;\n  ushort symbol_type;\n  int asprintf_result;\n  long *symbol_info;\n  int *errno_location;\n  undefined8 error_string;\n  long info_ptr;\n  ulong print_width;\n  byte symbol_type;\n  ulong original_print_width;\n  char *type_name;\n  undefined8 arg1;\n  undefined8 arg2;\n  \n  print_width = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,symbol);\n    return;\n  }\n  symbol_info = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  original_print_width = print_width;\n  print_error_and_exit_00106300(symbol_info,print_width);\n  print_modified_string_00104740(\"%-20s|\",symbol_info,0,original_print_width,arg1,arg2,print_width);\n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol_info + 8));\n  if (is_undefined == '\\0') {\n    print_symbol_info_001054d0(*(undefined8 *)*symbol_info);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol_info + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol_info[2] == 0) {\n    if (symbol_info[3] != 0) {\n      info_ptr = *(long *)(symbol_info[3] + 0x30);\n      is_undefined = *(char *)(info_ptr + 0x28);\n      if (is_undefined == 'g') goto LAB_00103983;\n      if (is_undefined == 'h') {\n        type_name = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        type_name = \"Block\";\n      }\n      else if (*(ushort *)(info_ptr + 0x26) == 0) {\n        type_name = \"None\";\n      }\n      else {\n        symbol_type = *(ushort *)(info_ptr + 0x26) >> 4 & 3;\n        if (symbol_type == 2) {\n          type_name = \"Function\";\n        }\n        else if (symbol_type == 3) {\n          type_name = \"Array\";\n        }\n        else {\n          if (symbol_type != 1) {\n            free(DAT_0010b730);\n            symbol_type = *(ushort *)(info_ptr + 0x26);\n            symbol_type = *(byte *)(info_ptr + 0x28);\n            type_name = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintf_result = asprintf(&DAT_0010b730,type_name,(ulong)symbol_type,(ulong)symbol_type);\n            type_name = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          type_name = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbol_type = *(byte *)(symbol_info[2] + 0x48) & 0xf;\n    switch(symbol_type) {\n    case 0:\n      type_name = \"NOTYPE\";\n      break;\n    case 1:\n      type_name = \"OBJECT\";\n      break;\n    case 2:\n      type_name = \"FUNC\";\n      break;\n    case 3:\n      type_name = \"SECTION\";\n      break;\n    case 4:\n      type_name = \"FILE\";\n      break;\n    case 5:\n      type_name = \"COMMON\";\n      break;\n    case 6:\n      type_name = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      type_name = \"<processor specific>: %d\";\n      if ((2 < symbol_type - 0xd) && (type_name = \"<OS specific>: %d\", 2 < symbol_type - 10)) {\n        type_name = \"<unknown>: %d\";\n      }\n      type_name = (char *)dcgettext(0,type_name,5);\n      asprintf_result = asprintf(&DAT_0010b728,type_name,(ulong)symbol_type);\n      type_name = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintf_result < 0) {\n        errno_location = __errno_location();\n        error_string = xstrerror(*errno_location);\n        print_error_and_exit_00106300(&DAT_0010712d,error_string);\nLAB_00103983:\n        type_name = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",type_name);\n  }\n  if (symbol_info[2] == 0) {\n    if (symbol_info[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol_info[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_001054d0();\n  }\n  info_ptr = symbol_info[2];\n  if ((info_ptr != 0) || (info_ptr = symbol_info[3], info_ptr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(info_ptr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "is_undefined",
                "uVar2": "symbol_type",
                "iVar3": "asprintf_result",
                "plVar4": "symbol_info",
                "piVar5": "errno_location",
                "uVar6": "error_string",
                "lVar7": "info_ptr",
                "uVar8": "print_width",
                "bVar9": "symbol_type",
                "uVar10": "original_print_width",
                "pcVar11": "type_name",
                "in_R8": "arg1",
                "in_R9": "arg2"
            },
            "calling": [
                "FUN_001035a2",
                "FUN_001064b0",
                "FUN_0010651a",
                "FUN_001053c0",
                "FUN_00103729"
            ],
            "called": [
                "FUN_0010370a",
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001054d0": {
                    "5": "print_formatted_string",
                    "4": "print_symbol_information",
                    "1": "print_formatted_output",
                    "16": "print_symbol_info"
                },
                "param_1": {
                    "1": "argument",
                    "4": "symbol_info",
                    "15": "symbol",
                    "2": "data",
                    "3": "input_string"
                },
                "cVar1": {
                    "1": "is_undefined_symbol_class",
                    "6": "is_undefined_symclass",
                    "18": "is_undefined",
                    "2": "symbol_class"
                },
                "uVar2": {
                    "5": "sym_class",
                    "1": "symclass",
                    "2": "type_code",
                    "7": "symbol_type",
                    "4": "symbol_class"
                },
                "iVar3": {
                    "1": "formatting_error",
                    "20": "asprintf_result",
                    "2": "status"
                },
                "plVar4": {
                    "1": "string_pointer",
                    "2": "info_pointer",
                    "10": "symbol_info",
                    "3": "print_width"
                },
                "piVar5": {
                    "1": "errno",
                    "5": "error_number",
                    "2": "error_location",
                    "13": "errno_location",
                    "3": "errno_ptr"
                },
                "uVar6": {
                    "16": "error_string",
                    "1": "strerror",
                    "2": "error_msg",
                    "4": "str_error"
                },
                "lVar7": {
                    "1": "data_type_address",
                    "2": "type_info",
                    "4": "info_ptr",
                    "3": "info_value"
                },
                "uVar8": {
                    "1": "unknown_var",
                    "4": "width",
                    "21": "print_width",
                    "3": "data"
                },
                "bVar9": {
                    "1": "section_type",
                    "2": "class_type",
                    "7": "symbol_type",
                    "5": "symbol_class",
                    "3": "byte_value"
                },
                "uVar10": {
                    "1": "u_var10",
                    "2": "initial_data",
                    "12": "original_print_width"
                },
                "pcVar11": {
                    "1": "data_type_str",
                    "2": "attribute_string",
                    "8": "type_name",
                    "3": "type_string",
                    "4": "data_type_string"
                },
                "in_R8": {
                    "1": "arg_8",
                    "2": "arg8",
                    "3": "arg1"
                },
                "in_R9": {
                    "1": "var_r9",
                    "3": "arg2",
                    "2": "arg9"
                }
            }
        },
        "entry": {
            "entrypoint": "0x00105500",
            "current_name": "entry",
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(analyze_binary_file_001055f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_001055f0",
                "__libc_start_main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00105530": {
            "entrypoint": "0x00105530",
            "current_name": "FUNC_00105530",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "calling": [
                "_FINI_0"
            ],
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00105560": {
            "entrypoint": "0x00105560",
            "current_name": "FUNC_00105560",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "calling": [
                "_INIT_0"
            ],
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "_FINI_0": {
            "entrypoint": "0x001055a0",
            "current_name": "_FINI_0",
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  FUNC_00105530();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "__cxa_finalize",
                "FUN_00105530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "_INIT_0": {
            "entrypoint": "0x001055e0",
            "current_name": "_INIT_0",
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105560();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00105560"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001055f0": {
            "entrypoint": "0x001055f0",
            "current_name": "analyze_binary_file_001055f0",
            "code": "\n\n\nundefined ** analyze_binary_file_001055f0(int argc,long *argv)\n\n{\n  byte *ptr1;\n  byte byte_var2;\n  bool bool_var3;\n  bool bool_var4;\n  bool bool_var5;\n  char char_var6;\n  byte byte_var7;\n  char char_var8;\n  char char_var9;\n  int int_var10;\n  uint uint_var11;\n  int int_var12;\n  undefined4 uint_var2;\n  undefined4 uint_var3;\n  FILE *file_stream;\n  byte *byte_ptr2;\n  int *int_ptr1;\n  size_t size_var16;\n  byte *byte_ptr;\n  long *long_ptr1;\n  long long_var17;\n  long *long_ptr2;\n  long *long_ptr3;\n  undefined8 undefined8_var1;\n  undefined8 undefined8_var2;\n  char *string_var1;\n  byte *byte_ptr4;\n  undefined **result;\n  long long_var2;\n  byte *byte_ptr5;\n  char *str_ptr2;\n  int *int_ptr2;\n  int *int_ptr3;\n  int local_var1;\n  int local_var2;\n  size_t local_var3;\n  local_var6 local_stat;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  string_var1 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  long_ptr2 = argv;\n  if (1 < argc) {\n    local_var2 = 2000;\n    int_ptr2 = (int *)0x1;\n    local_var1 = 0;\n    do {\n      int_var12 = (int)int_ptr2;\n      result = (undefined **)(long)int_var12;\n      int_ptr3 = (int *)((long)result * 8);\n      if (*(char *)long_ptr2[(long)result] != '@') goto LAB_00105a70;\n      local_var2 = local_var2 + -1;\n      if (local_var2 == 0) {\n        long_var2 = *long_ptr2;\n        str_ptr2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      string_var1 = (char *)long_ptr2[(long)result] + 1;\n      int_var10 = local_var6(string_var1,&local_stat);\n      if (int_var10 < 0) {\nLAB_00105a70:\n        if (argc <= int_var12 + 1) break;\nLAB_00105a7a:\n        uint_var11 = int_var12 + 1;\n        local_var1 = int_var12;\n      }\n      else {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        file_stream = fopen(string_var1,\"r\");\n        if (file_stream == (FILE *)0x0) goto LAB_00105a70;\n        int_var10 = fseek(file_stream,0,2);\n        if (((int_var10 == -1) ||\n            (string_var1 = (char *)ftell(file_stream), (int *)string_var1 == (int *)0xffffffffffffffff)) ||\n           (int_var10 = fseek(file_stream,0,0), int_var10 == -1)) {\nLAB_00105ad0:\n          fclose(file_stream);\n          if (int_var12 + 1 < argc) goto LAB_00105a7a;\n          break;\n        }\n        byte_ptr2 = (byte *)xmalloc((char *)((long)string_var1 + 1));\n        int_ptr1 = (int *)fread(byte_ptr2,1,(size_t)string_var1,file_stream);\n        if (((int *)string_var1 != int_ptr1) && (int_var10 = ferror(file_stream), int_var10 != 0)) {\n          free_memory(byte_ptr2);\n          goto LAB_00105ad0;\n        }\n        byte_ptr2[(long)int_ptr1] = 0;\n        byte_var7 = *byte_ptr2;\n        byte_ptr4 = byte_ptr2;\n        if (byte_var7 != 0) {\nLAB_001057d0:\n          if (((&character_table_array)[(ulong)byte_var7 * 2] & 0x40) != 0) goto LAB_001057c0;\n          size_var16 = strlen((char *)byte_ptr2);\n          byte_ptr = (byte *)xmalloc(size_var16 + 1);\n          int_var10 = 0;\n          bool_var5 = false;\n          bool_var3 = false;\n          long_var2 = 0;\n          long_ptr1 = (long *)0x0;\n          bool_var4 = false;\n          byte_ptr4 = byte_ptr2;\n          do {\n            while (((&character_table_array)[(ulong)*byte_ptr4 * 2] & 0x40) != 0) {\n              byte_ptr4 = byte_ptr4 + 1;\n            }\n            if ((int_var10 == 0) || (long_ptr3 = long_ptr1 + long_var2, int_var10 + -1 <= (int)long_var2)) {\n              if (long_ptr1 == (long *)0x0) {\n                int_var10 = 8;\n                long_ptr1 = (long *)xmalloc(0x40);\n                long_ptr3 = long_ptr1 + long_var2;\n                *long_ptr3 = 0;\n              }\n              else {\n                int_var10 = int_var10 * 2;\n                long_ptr1 = (long *)xrealloc(long_ptr1,(long)int_var10 << 3);\n                long_ptr3 = long_ptr1 + long_var2;\n                *long_ptr3 = 0;\n              }\n            }\n            byte_var7 = *byte_ptr4;\n            byte_ptr5 = byte_ptr;\n            while (byte_var7 != 0) {\n              while( true ) {\n                if ((((&character_table_array)[(ulong)byte_var7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bool_var5 | bool_var4 | bool_var3))) {\n                  bool_var4 = false;\n                  bool_var5 = false;\n                  bool_var3 = false;\n                  goto LAB_001058e0;\n                }\n                if (!bool_var4) break;\n                byte_ptr4 = byte_ptr4 + 1;\n                *byte_ptr5 = byte_var7;\n                byte_ptr5 = byte_ptr5 + 1;\n                bool_var4 = false;\n                byte_var7 = *byte_ptr4;\n                if (byte_var7 == 0) goto LAB_001058e0;\n              }\n              if (byte_var7 == 0x5c) {\n                bool_var4 = true;\n              }\n              else if (bool_var3) {\n                if (byte_var7 == 0x27) {\n                  bool_var3 = false;\n                }\n                else {\nLAB_00105a55:\n                  *byte_ptr5 = byte_var7;\n                  byte_ptr5 = byte_ptr5 + 1;\n                }\n              }\n              else if (bool_var5) {\n                if (byte_var7 != 0x22) goto LAB_00105a55;\n                bool_var5 = false;\n              }\n              else if (byte_var7 == 0x27) {\n                bool_var3 = true;\n              }\n              else {\n                if (byte_var7 != 0x22) goto LAB_00105a55;\n                bool_var5 = true;\n              }\n              ptr1 = byte_ptr4 + 1;\n              byte_ptr4 = byte_ptr4 + 1;\n              byte_var7 = *ptr1;\n            }\nLAB_001058e0:\n            *byte_ptr5 = 0;\n            long_var17 = xstrdup(byte_ptr);\n            *long_ptr3 = long_var17;\n            long_ptr1[long_var2 + 1] = 0;\n            byte_var7 = *byte_ptr4;\n            byte_var2 = (&character_table_array)[(ulong)byte_var7 * 2];\n            while ((byte_var2 & 0x40) != 0) {\n              byte_var7 = byte_ptr4[1];\n              byte_ptr4 = byte_ptr4 + 1;\n              byte_var2 = (&character_table_array)[(ulong)byte_var7 * 2];\n            }\n            long_var2 = long_var2 + 1;\n          } while (byte_var7 != 0);\n          free_memory(byte_ptr);\n          long_ptr3 = long_ptr2;\n          if (argv == long_ptr2) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        long_ptr1 = (long *)xmalloc(8);\n        *long_ptr1 = 0;\n        if (argv == long_ptr2) {\nLAB_00105c79:\n          if (*long_ptr2 == 0) {\n            int_var10 = 0;\n          }\n          else {\n            long_var2 = 1;\n            do {\n              int_var10 = (int)long_var2;\n              long_ptr3 = long_ptr2 + long_var2;\n              long_var2 = long_var2 + 1;\n            } while (*long_ptr3 != 0);\n          }\n          long_var17 = 0;\n          long_ptr3 = (long *)xmalloc((long)(int_var10 + 1) << 3);\n          long_var2 = *long_ptr2;\n          while (long_var2 != 0) {\n            undefined8_var1 = xstrdup();\n            *(undefined8 *)((long)long_ptr3 + long_var17) = undefined8_var1;\n            long_var17 = long_var17 + 8;\n            long_var2 = *(long *)((long)long_ptr2 + long_var17);\n          }\n          *(undefined8 *)((long)long_ptr3 + long_var17) = 0;\nLAB_0010597d:\n          long_ptr2 = long_ptr3;\n          if (*long_ptr1 == 0) goto LAB_00105d50;\n          string_var1 = (char *)0x0;\n          do {\n            string_var1 = (char *)((long)string_var1 + 1);\n          } while (long_ptr1[(long)string_var1] != 0);\n          local_var3 = (long)string_var1 * 8;\n        }\n        else {\nLAB_00105d50:\n          string_var1 = (char *)0x0;\n          local_var3 = 0;\n        }\n        free_memory((void *)long_ptr2[(long)result]);\n        long_ptr2 = (long *)xrealloc(long_ptr2,(long)((long)string_var1 + (long)argc + 1) * 8);\n        int_var10 = argc + -1 + (int)string_var1;\n        memmove(long_ptr2 + (long)(undefined **)((long)result + (long)string_var1),\n                long_ptr2 + 1 + (long)result,(long)(argc - int_var12) << 3);\n        memcpy(long_ptr2 + (long)result,long_ptr1,local_var3);\n        free_memory(long_ptr1);\n        free_memory(byte_ptr2);\n        fclose(file_stream);\n        uint_var11 = local_var1 + 1;\n        result = (undefined **)((long)result + (long)string_var1);\n        int_ptr2 = int_ptr3;\n        argc = int_var10;\n        if (int_var10 <= (int)uint_var11) break;\n      }\n      int_ptr2 = (int *)(ulong)uint_var11;\n    } while( true );\n  }\n  int_var12 = bfd_init();\n  str_ptr2 = \"fatal error: libbfd ABI mismatch\";\n  if (int_var12 != 0x118) goto LAB_00106085;\n  result = &PTR_s_debug_syms_0010b280;\n  char_var8 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  string_var1 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  int_ptr2 = (int *)\"x86_64-pc-linux-gnu\";\n  char_var9 = DAT_0010b23b;\n  char_var6 = DAT_0010b240;\n  uint_var3 = DAT_0010b244;\n  if (char_var8 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = uint_var3;\n    DAT_0010b240 = char_var6;\n    DAT_0010b23b = char_var9;\n    uint_var2 = getopt_long(argc,long_ptr2,string_var1);\n    int_ptr3 = _optarg;\n    int_ptr1 = (int *)string_var1;\n    char_var9 = DAT_0010b23b;\n    char_var6 = DAT_0010b240;\n    uint_var3 = DAT_0010b244;\n    switch(uint_var2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      print_symbols_usage(standard_error_stream,1);\n      int_ptr3 = int_ptr2;\nLAB_001061d5:\n      int_var12 = strcmp((char *)int_ptr3,\"l\");\n      if (int_var12 == 0) goto LAB_001061a3;\n      int_var12 = strcmp((char *)int_ptr3,\"escape\");\n      int_ptr2 = int_ptr3;\n      if ((int_var12 == 0) || (int_var12 = strcmp((char *)int_ptr3,\"e\"), int_var12 == 0)) {\n        DAT_0010b7e0 = 2;\n        char_var9 = DAT_0010b23b;\n        char_var6 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var12 = strcmp((char *)int_ptr3,\"invalid\");\n      if ((int_var12 == 0) || (int_var12 = strcmp((char *)int_ptr3,\"i\"), int_var12 == 0)) {\n        DAT_0010b7e0 = 5;\n        char_var9 = DAT_0010b23b;\n        char_var6 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var12 = strcmp((char *)int_ptr3,\"hex\");\n      if ((int_var12 == 0) || (int_var12 = strcmp((char *)int_ptr3,\"x\"), int_var12 == 0)) {\n        DAT_0010b7e0 = 3;\n        char_var9 = DAT_0010b23b;\n        char_var6 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var12 = strcmp((char *)int_ptr3,\"highlight\");\n      if ((int_var12 == 0) || (int_var12 = strcmp((char *)int_ptr3,\"h\"), int_var12 == 0)) {\n        DAT_0010b7e0 = 4;\n        char_var9 = DAT_0010b23b;\n        char_var6 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      str_ptr2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      initialize_output_format(&DAT_00107033);\n      char_var9 = DAT_0010b23b;\n      char_var6 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      print_symbols_usage(standard_output_stream,0);\nswitchD_00105c5a_caseD_43:\n      int_ptr2 = (int *)&optarg;\n      DAT_0010b814 = 1;\n      char_var9 = DAT_0010b23b;\n      char_var6 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      if (_optarg != (int *)0x0) {\n        int_var12 = cplus_demangle_name_to_style();\n        int_ptr1 = _optarg;\n        if (int_var12 == 0) {\n          undefined8_var1 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          print_error_and_exit(undefined8_var1,int_ptr1);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          string_var1 = (char *)int_ptr1;\n          char_var9 = DAT_0010b23b;\n          char_var6 = DAT_0010b240;\n          uint_var3 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          char_var9 = DAT_0010b23b;\n          char_var6 = DAT_0010b240;\n          uint_var3 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      initialize_output_format(\"posix\");\n      char_var9 = DAT_0010b23b;\n      char_var6 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      int_var12 = strcmp((char *)_optarg,\"32_64\");\n      char_var9 = DAT_0010b23b;\n      char_var6 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      if (int_var12 != 0) {\n        str_ptr2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        undefined8_var1 = dcgettext(0,str_ptr2,5);\n        print_error_and_exit(undefined8_var1);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        char_var9 = DAT_0010b23b;\n        char_var6 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      initialize_output_format(_optarg);\n      char_var9 = DAT_0010b23b;\n      char_var6 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      initialize_output_format(\"just-symbols\");\n      char_var9 = DAT_0010b23b;\n      char_var6 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      char_var9 = *(char *)_optarg;\n      int_ptr2 = int_ptr3;\n      char_var6 = char_var9;\n      uint_var3 = 10;\n      if (char_var9 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < char_var9) {\n        if (char_var9 == 'o') {\n          uint_var3 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (char_var9 == 'x') {\n          uint_var3 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      str_ptr2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      char_var9 = DAT_0010b23b;\n      char_var6 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      int_var12 = strcmp((char *)_optarg,\"default\");\n      if ((int_var12 == 0) || (int_var12 = strcmp((char *)int_ptr3,\"d\"), int_var12 == 0)) {\n        DAT_0010b7e0 = 0;\n        int_ptr2 = int_ptr3;\n        char_var9 = DAT_0010b23b;\n        char_var6 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n      }\n      else {\n        int_var12 = strcmp((char *)int_ptr3,\"locale\");\n        if (int_var12 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        int_ptr2 = int_ptr3;\n        char_var9 = DAT_0010b23b;\n        char_var6 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    undefined8_var1 = dcgettext(0,str_ptr2,5);\n    print_error_and_exit(undefined8_var1,int_ptr3);\nLAB_00105f13:\n    long_var2 = *long_ptr2;\n    str_ptr2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(standard_error_stream,str_ptr2,long_var2);\n    xterminate_program(1);\n    goto LAB_00105f38;\n  }\n  uint_var3 = bfd_get_error();\n  undefined8_var1 = bfd_errmsg(uint_var3);\n  undefined8_var2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  print_error_and_exit(undefined8_var2,\"x86_64-pc-linux-gnu\",undefined8_var1);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byte_var7 = byte_ptr4[1];\n  byte_ptr4 = byte_ptr4 + 1;\n  if (byte_var7 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  result = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    string_var1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    print_formatted(string_var1);\n    string_var1 = (char *)dcgettext(0,\n                                \"This program is free_memory software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    print_formatted(string_var1);\n                    \n    terminate_program(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    undefined8_var1 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    print_error_message(undefined8_var1);\n    undefined8_var1 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    print_error_message(undefined8_var1);\n    return result;\n  }\n  string_var1 = &optind;\n  if (option_index != argc) {\n    if (1 < argc - option_index) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      int_var12 = *(int *)string_var1;\n      if (argc <= int_var12) break;\n      long_var2 = long_ptr2[int_var12];\n      *(int *)string_var1 = int_var12 + 1;\n      char_var9 = analyze_binary_file_001055f0_001043d0(long_var2);\n      if (char_var9 != '\\0') {\n        int_var12 = *(int *)string_var1;\n        if (argc <= int_var12) break;\n        long_var2 = long_ptr2[int_var12];\n        *(int *)string_var1 = int_var12 + 1;\n        char_var9 = analyze_binary_file_001055f0_001043d0(long_var2);\n        if (char_var9 != '\\0') {\n          int_var12 = *(int *)string_var1;\n          while( true ) {\n            if (argc <= int_var12) goto LAB_00105bdd;\n            long_var2 = long_ptr2[int_var12];\n            *(int *)string_var1 = int_var12 + 1;\n            char_var9 = analyze_binary_file_001055f0_001043d0(long_var2);\n            if (char_var9 == '\\0') break;\n            int_var12 = *(int *)string_var1;\n          }\n        }\n      }\n      result = (undefined **)(ulong)((int)result + 1);\n    }\nLAB_00105bdd:\n                    \n    terminate_program((int)result);\n  }\nLAB_0010613c:\n  uint_var11 = analyze_binary_file_001055f0_001043d0(\"a.out\");\n  return (undefined **)(ulong)((uint_var11 ^ 1) & 0xff);\n}\n\n",
            "renaming": {
                "FUN_001055f0": "analyze_binary_file_001055f0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptr1",
                "bVar2": "byte_var2",
                "bVar3": "bool_var3",
                "bVar4": "bool_var4",
                "bVar5": "bool_var5",
                "cVar6": "char_var6",
                "bVar7": "byte_var7",
                "cVar8": "char_var8",
                "cVar9": "char_var9",
                "iVar10": "int_var10",
                "uVar11": "uint_var11",
                "iVar12": "int_var12",
                "iVar15": "int_var2",
                "sVar16": "size_var16",
                "piVar15": "int_ptr1",
                "piVar27": "int_ptr3",
                "local_110": "local_var1",
                "local_10c": "local_var2",
                "local_108": "local_var3",
                "local_c8": "local_stat",
                "__stream": "file_stream",
                "__s": "byte_ptr2",
                "__ptr": "byte_ptr",
                "__src": "long_ptr1",
                "lVar17": "long_var17",
                "plVar18": "long_ptr2",
                "plVar19": "long_ptr3",
                "uVar20": "undefined8_var1",
                "uVar21": "undefined8_var2",
                "pcVar22": "string_var1",
                "pbVar23": "byte_ptr4",
                "unaff_RBP": "result",
                "lVar24": "long_var2",
                "pbVar25": "byte_ptr5",
                "pcVar26": "str_ptr2",
                "unaff_R12": "int_ptr2",
                "stat": "local_var6",
                "uVar13": "uint_var2",
                "uVar14": "uint_var3",
                "iVar27": "int_ptr1",
                "setlocale": "set_locale",
                "bindtextdomain": "bind_text_domain",
                "textdomain": "set_text_domain",
                "xmalloc_set_program_name": "set_program_name",
                "bfd_set_error_program_name": "set_error_program_name",
                "bfd_plugin_set_program_name": "set_plugin_program_name",
                "fclose": "close_file",
                "fopen": "open_file",
                "fseek": "set_file_position",
                "ftell": "get_file_position",
                "fread": "read_file",
                "ferror": "get_file_error",
                "free": "free_memory",
                "strlen": "get_string_length",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory",
                "memmove": "move_memory",
                "memcpy": "copy_memory",
                "xstrdup": "duplicate_string",
                "lVar19": "long_var2",
                "strcmp": "compare_strings",
                "fprintf": "print_formatted",
                "printf": "print_formatted",
                "exit": "terminate_program",
                "_stderr": "standard_error_stream",
                "_stdout": "standard_output_stream",
                "initialize_output_format_00104370": "initialize_output_format",
                "print_symbols_usage_00103ca0": "print_symbols_usage",
                "dcgettext": "get_i18n_string",
                "print_error_and_exit_00106300": "print_error_and_exit",
                "_optind": "option_index",
                "print_error_message_00106400": "print_error_message",
                "_sch_istable": "character_table_array"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "strcmp",
                "bfd_plugin_set_plugin",
                "cplus_demangle_set_style",
                "xrealloc",
                "FUN_001043d0",
                "bfd_plugin_set_program_name",
                "FUN_00103ca0",
                "bfd_errmsg",
                "printf",
                "setlocale",
                "fseek",
                "xmalloc_set_program_name",
                "ftell",
                "bfd_set_error_program_name",
                "fopen",
                "fread",
                "xstrdup",
                "xmalloc",
                "bfd_set_default_target",
                "FUN_00106400",
                "cplus_demangle_name_to_style",
                "exit",
                "FUN_00106300",
                "memcpy",
                "memmove",
                "textdomain",
                "bfd_init",
                "strlen",
                "free",
                "fclose",
                "ferror",
                "stat",
                "bfd_get_error",
                "FUN_00104370",
                "xexit",
                "bindtextdomain",
                "getopt_long",
                "dcgettext",
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001055f0": {
                    "1": "analyse_binary_file",
                    "17": "analyze_binary_file",
                    "8": "analyze_binary_files"
                },
                "param_1": {
                    "6": "num_files",
                    "1": "file_count",
                    "23": "argc"
                },
                "param_2": {
                    "1": "arg_values",
                    "4": "file_paths",
                    "23": "argv",
                    "2": "file_names"
                },
                "pbVar1": {
                    "4": "current_byte",
                    "2": "byte_pointer1",
                    "1": "pointer_var1",
                    "8": "ptr1"
                },
                "bVar2": {
                    "14": "byte_var2",
                    "1": "bool_var_2",
                    "2": "byte_var1",
                    "3": "var2",
                    "4": "byte_var"
                },
                "bVar3": {
                    "1": "is_escape",
                    "11": "bool_var3",
                    "2": "flag2",
                    "8": "bool_var1"
                },
                "bVar4": {
                    "1": "in_escape",
                    "11": "bool_var4",
                    "8": "bool_var2",
                    "2": "flag3"
                },
                "bVar5": {
                    "1": "is_var5",
                    "8": "bool_var3",
                    "11": "bool_var5",
                    "2": "flag4"
                },
                "cVar6": {
                    "1": "c_var6",
                    "13": "char_var6",
                    "8": "char_var1",
                    "4": "char1"
                },
                "bVar7": {
                    "5": "byte_var2",
                    "3": "byte_var3",
                    "1": "next_character",
                    "13": "byte_var7"
                },
                "cVar8": {
                    "1": "set_locale_result",
                    "4": "char2",
                    "9": "char_var2",
                    "13": "char_var8"
                },
                "cVar9": {
                    "4": "char3",
                    "1": "char_variable_3",
                    "13": "char_var9",
                    "9": "char_var3"
                },
                "iVar10": {
                    "1": "index",
                    "12": "int_var10",
                    "9": "int_var1",
                    "2": "int1"
                },
                "uVar11": {
                    "12": "uint_var11",
                    "1": "index",
                    "2": "uint1",
                    "4": "uint_var",
                    "6": "uint_var1"
                },
                "iVar12": {
                    "1": "index",
                    "2": "int2",
                    "3": "int_var3",
                    "9": "int_var12",
                    "6": "int_var2"
                },
                "iVar15": {
                    "1": "int_var15"
                },
                "sVar16": {
                    "6": "size_var16",
                    "5": "size",
                    "1": "stream_length",
                    "4": "size_var",
                    "2": "size_t_var16"
                },
                "piVar15": {
                    "1": "file_read_result",
                    "7": "int_ptr1",
                    "3": "int_pointer1",
                    "4": "int_ptr15",
                    "2": "ptr2"
                },
                "piVar27": {
                    "1": "ptr_int_var27",
                    "6": "int_ptr3",
                    "3": "int_ptr27",
                    "2": "int_pointer3"
                },
                "local_110": {
                    "4": "local_int1",
                    "10": "local_var1",
                    "1": "last_file_index",
                    "5": "local_var110"
                },
                "local_10c": {
                    "1": "local_var4",
                    "10": "local_var2",
                    "5": "local_var10c",
                    "4": "local_int2"
                },
                "local_108": {
                    "1": "size1",
                    "2": "local_size1",
                    "5": "local_var108",
                    "9": "local_var3"
                },
                "local_c8": {
                    "1": "local_stat_varc8",
                    "2": "stat_var1",
                    "5": "local_stat",
                    "3": "local_var4"
                },
                "__stream": {
                    "1": "file_pointer",
                    "2": "file_ptr",
                    "24": "file_stream"
                },
                "__s": {
                    "4": "byte_ptr",
                    "3": "byte_array",
                    "1": "byte_var_pointer",
                    "2": "buffer"
                },
                "__ptr": {
                    "4": "byte_ptr",
                    "1": "file_string",
                    "2": "byte_pointer3",
                    "3": "byte_ptr2"
                },
                "__src": {
                    "1": "src3",
                    "5": "long_ptr",
                    "7": "long_ptr1",
                    "2": "long_pointer1"
                },
                "lVar17": {
                    "1": "long_variable_1",
                    "2": "long_var",
                    "8": "long_var1",
                    "3": "long1",
                    "10": "long_var17"
                },
                "plVar18": {
                    "1": "file_names",
                    "2": "param_ptr",
                    "4": "long_ptr2"
                },
                "plVar19": {
                    "1": "new_files_array",
                    "4": "long_ptr2"
                },
                "uVar20": {
                    "1": "ulong_var1",
                    "4": "undefined8_var1",
                    "3": "uint_var20",
                    "2": "u_var20"
                },
                "uVar21": {
                    "1": "undefined_var2",
                    "2": "u_var21",
                    "4": "undefined8_var2",
                    "3": "uint_var21"
                },
                "pcVar22": {
                    "3": "char_ptr1",
                    "1": "char_pointer",
                    "2": "str",
                    "4": "string_var1"
                },
                "pbVar23": {
                    "2": "ptr6",
                    "1": "ptr5",
                    "3": "byte_ptr3",
                    "4": "byte_ptr4"
                },
                "unaff_RBP": {
                    "2": "return_ptr",
                    "1": "undefined_double_ptr1",
                    "4": "result",
                    "3": "undefined_ptr1"
                },
                "lVar24": {
                    "7": "long_var2",
                    "1": "long4",
                    "3": "file_size",
                    "2": "l_var24"
                },
                "pbVar25": {
                    "2": "byte_ptr25",
                    "1": "byte_ptr_25",
                    "4": "byte_ptr5",
                    "3": "byte_ptr4"
                },
                "pcVar26": {
                    "1": "error_message_format",
                    "2": "error_message",
                    "3": "string_var2",
                    "4": "char_ptr2"
                },
                "unaff_R12": {
                    "1": "iter_ptr",
                    "3": "unaff_r12",
                    "2": "int_pointer2",
                    "7": "int_ptr2"
                },
                "stat": {
                    "1": "get_file_information"
                },
                "uVar13": {
                    "1": "temp_variable_13",
                    "2": "u_var13",
                    "4": "uint_var2",
                    "3": "uint_var13"
                },
                "uVar14": {
                    "3": "uint_var14",
                    "1": "val2",
                    "4": "uint_var3",
                    "2": "u_var14"
                },
                "iVar27": {
                    "1": "int_var3"
                },
                "iVar13": {
                    "2": "int_var13",
                    "1": "int_var_13"
                },
                "iVar14": {
                    "1": "int_var_14",
                    "2": "int_var14"
                },
                "lVar20": {
                    "1": "long_var_20"
                },
                "lVar21": {
                    "1": "long_var_21"
                },
                "setlocale": {
                    "2": "set_locale"
                },
                "bindtextdomain": {
                    "2": "bind_text_domain"
                },
                "textdomain": {
                    "2": "set_text_domain"
                },
                "xmalloc_set_program_name": {
                    "1": "set_program_name"
                },
                "bfd_set_error_program_name": {
                    "1": "set_bfd_error_program_name"
                },
                "bfd_plugin_set_program_name": {
                    "1": "set_plugin_program_name"
                },
                "if": {
                    "1": "if"
                },
                "do": {
                    "1": "do"
                },
                "fclose": {
                    "2": "close_file"
                },
                "fopen": {
                    "2": "open_file"
                },
                "fseek": {
                    "2": "set_file_position"
                },
                "ftell": {
                    "2": "get_file_position"
                },
                "fread": {
                    "1": "read_file_contents"
                },
                "ferror": {
                    "1": "check_file_error"
                },
                "free": {
                    "1": "free_memory"
                },
                "strlen": {
                    "2": "get_string_length"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                },
                "xrealloc": {
                    "2": "reallocate_memory"
                },
                "memmove": {
                    "2": "move_memory"
                },
                "memcpy": {
                    "2": "copy_memory"
                },
                "memset": {
                    "1": "set_memory"
                },
                "xstrdup": {
                    "2": "duplicate_string"
                },
                "lVar19": {
                    "1": "long_var2"
                },
                "lVar27": {
                    "1": "long_var4"
                },
                "plVar27": {
                    "1": "int_ptr3"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "exit": {
                    "1": "terminate_program"
                },
                "_stderr": {
                    "1": "standard_error_stream"
                },
                "_stdout": {
                    "1": "standard_output_stream"
                },
                "*_optarg": {
                    "1": "option_argument"
                },
                "initialize_output_format_00104370": {
                    "1": "initialize_output_format"
                },
                "print_symbols_usage_00103ca0": {
                    "1": "print_symbols_usage"
                },
                "dcgettext": {
                    "1": "get_i18n_string"
                },
                "print_error_and_exit_00106300": {
                    "1": "print_error_and_exit"
                },
                "_optind": {
                    "1": "option_index"
                },
                "print_error_message_00106400": {
                    "1": "print_error_message"
                },
                "_DAT_0010b7c4": {
                    "1": "is_multiple_files"
                },
                "plVar24": {
                    "1": "file_path_pointer"
                },
                "_sch_istable": {
                    "1": "character_table_array"
                }
            }
        },
        "FUN_001062d0": {
            "entrypoint": "0x001062d0",
            "current_name": "print_if_condition_met_001062d0",
            "code": "\n\n\nvoid print_if_condition_met_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_001062d0": "print_if_condition_met_001062d0",
                "param_1": "message"
            },
            "calling": [
                "FUN_001043d0"
            ],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001062d0": {
                    "1": "print_message_if_valid_flag",
                    "5": "print_if_condition_met",
                    "2": "print_if_enabled",
                    "4": "print_message_if_enabled",
                    "3": "print_if_flag_set"
                },
                "param_1": {
                    "31": "message"
                },
                "_DAT_0010b7c4": {
                    "2": "flag1",
                    "3": "condition_1",
                    "1": "is_printing_enabled"
                },
                "DAT_0010b818": {
                    "3": "condition_2",
                    "1": "another_flag",
                    "2": "is_message_printed"
                },
                "DAT_0010b7c4": {
                    "1": "is_printing_enabled"
                },
                "param_2": {
                    "1": "debug_flag"
                },
                "param_3": {
                    "1": "unused_param"
                },
                "param_4": {
                    "1": "unused_param"
                },
                "param_5": {
                    "1": "unused_param"
                }
            }
        },
        "FUN_00106300": {
            "entrypoint": "0x00106300",
            "current_name": "print_error_and_exit_00106300",
            "code": "\n\n\nvoid print_error_and_exit_00106300(undefined4 error_code,undefined4 param2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 param_9,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char flag;\n  undefined4 *arg_ptr;\n  char *format_string;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined *buffer_ptr;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 local_param_10;\n  undefined8 local_param_11;\n  undefined8 local_param_12;\n  undefined8 local_param_13;\n  undefined8 local_param_14;\n  undefined4 local_param_1;\n  undefined4 local_param_2;\n  undefined4 local_param_3;\n  undefined4 local_param_4;\n  undefined4 local_param_5;\n  undefined4 local_param_6;\n  undefined4 local_param_7;\n  undefined4 local_param_8;\n  \n  arg_ptr = &arg1;\n  if (flag != '\\0') {\n    local_param_1 = error_code;\n    local_param_2 = param2;\n    local_param_3 = param_3;\n    local_param_4 = param_4;\n    local_param_5 = param_5;\n    local_param_6 = param_6;\n    local_param_7 = param_7;\n    local_param_8 = param_8;\n  }\n  buffer_ptr = &stack0x00000008;\n  arg1 = 8;\n  local_buffer = local_buffer;\n  arg2 = 0x30;\n  local_param_10 = error_code0;\n  local_param_11 = error_code1;\n  local_param_12 = error_code2;\n  local_param_13 = error_code3;\n  local_param_14 = error_code4;\n  print_error_message_001063a0();\n  format_string = (char *)0x1;\n  xexit();\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010b820);\n  vfprintf(_stderr,format_string,arg_ptr);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00106300": "print_error_and_exit_00106300",
                "param_1": "error_code",
                "param_2": "param2",
                "in_AL": "flag",
                "__arg": "arg_ptr",
                "__format": "format_string",
                "local_d8": "arg1",
                "local_d4": "arg2",
                "local_d0": "buffer_ptr",
                "local_c8": "local_buffer",
                "local_b8": "local_buffer",
                "local_b0": "local_param_10",
                "local_a8": "local_param_11",
                "local_a0": "local_param_12",
                "local_98": "local_param_13",
                "local_90": "local_param_14",
                "local_88": "local_param_1",
                "local_78": "local_param_2",
                "local_68": "local_param_3",
                "local_58": "local_param_4",
                "local_48": "local_param_5",
                "local_38": "local_param_6",
                "local_28": "local_param_7",
                "local_18": "local_param_8"
            },
            "calling": [
                "FUN_00104370",
                "FUN_001055f0",
                "FUN_0010370a",
                "FUN_001053c0",
                "FUN_00103729"
            ],
            "called": [
                "FUN_001063a0",
                "xexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00106300": {
                    "1": "print_and_exit",
                    "17": "print_error_and_exit",
                    "11": "print_error_message"
                },
                "param_1": {
                    "1": "error_message_1",
                    "27": "error_code"
                },
                "param_2": {
                    "3": "arg2",
                    "1": "file_descriptor",
                    "8": "param_2"
                },
                "param_3": {
                    "1": "error_param_3",
                    "3": "arg3",
                    "9": "param_3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "param3",
                    "8": "param4",
                    "10": "param_4",
                    "3": "arg4"
                },
                "param_5": {
                    "8": "param5",
                    "1": "error_arg4",
                    "11": "param_5",
                    "3": "arg5"
                },
                "param_6": {
                    "8": "param6",
                    "11": "param_6",
                    "3": "arg6",
                    "1": "parameter6"
                },
                "param_7": {
                    "1": "parameter6",
                    "3": "arg7",
                    "11": "param_7",
                    "8": "param7"
                },
                "param_8": {
                    "1": "param7",
                    "3": "arg8",
                    "8": "param8",
                    "11": "param_8"
                },
                "param_9": {
                    "10": "param_9",
                    "1": "unused_param",
                    "5": "param9"
                },
                "param_10": {
                    "1": "error_msg_param1",
                    "7": "param10",
                    "10": "param_10"
                },
                "param_11": {
                    "1": "unused_param_3",
                    "7": "param11",
                    "10": "param_11"
                },
                "param_12": {
                    "1": "output_param_3",
                    "10": "param_12",
                    "7": "param12"
                },
                "param_13": {
                    "10": "param_13",
                    "1": "unused_param5",
                    "7": "param13"
                },
                "param_14": {
                    "1": "message_5",
                    "10": "param_14",
                    "7": "param14"
                },
                "in_AL": {
                    "1": "is_non_zero",
                    "16": "flag",
                    "3": "condition",
                    "2": "is_error"
                },
                "__arg": {
                    "1": "local_parameters",
                    "5": "arg_ptr",
                    "2": "arg_array",
                    "4": "arg_pointer"
                },
                "__format": {
                    "7": "format",
                    "14": "format_string",
                    "4": "format_str",
                    "2": "format_ptr",
                    "1": "error_msg_format"
                },
                "local_d8": {
                    "2": "local_arg_1",
                    "1": "local_var0",
                    "4": "arg1",
                    "3": "local_variable_1"
                },
                "local_d4": {
                    "4": "arg2",
                    "1": "local_parameter_2",
                    "2": "local_variable2",
                    "3": "local_variable_2"
                },
                "local_d0": {
                    "1": "buffer",
                    "4": "buffer_ptr",
                    "3": "local_variable_3",
                    "2": "local_pointer"
                },
                "local_c8": {
                    "2": "local_pointer2",
                    "3": "local_variable_4",
                    "5": "local_buffer",
                    "1": "buffer_ptr",
                    "4": "buffer"
                },
                "local_b8": {
                    "1": "local_var4",
                    "12": "local_buffer",
                    "5": "local_array",
                    "2": "buffer"
                },
                "local_b0": {
                    "1": "unused_variable_1",
                    "3": "param10",
                    "6": "local_param_10"
                },
                "local_a8": {
                    "1": "local_param11",
                    "6": "local_param_11",
                    "3": "param11"
                },
                "local_a0": {
                    "1": "param_12_local",
                    "3": "param12",
                    "6": "local_param_12"
                },
                "local_98": {
                    "1": "unused_local_4",
                    "3": "param13",
                    "6": "local_param_13"
                },
                "local_90": {
                    "1": "local_variable_9",
                    "6": "local_param_14",
                    "3": "param14"
                },
                "local_88": {
                    "1": "local1",
                    "2": "error_code_copy",
                    "3": "error_code",
                    "5": "local_param_1"
                },
                "local_78": {
                    "2": "param2",
                    "1": "param_2_copy",
                    "5": "local_param_2"
                },
                "local_68": {
                    "1": "param3_copy",
                    "5": "local_param_3",
                    "2": "param3"
                },
                "local_58": {
                    "1": "local_var13",
                    "2": "local_param4",
                    "5": "local_param_4"
                },
                "local_48": {
                    "1": "error_param_5",
                    "2": "local_param5",
                    "5": "local_param_5"
                },
                "local_38": {
                    "1": "param_6_copy",
                    "2": "param6",
                    "5": "local_param_6"
                },
                "local_28": {
                    "1": "parameter6",
                    "5": "local_param_7",
                    "2": "local_param7"
                },
                "local_18": {
                    "1": "local_var13",
                    "2": "param_8_local",
                    "5": "local_param_8"
                },
                "DAT_0010b820": {
                    "1": "error_message"
                }
            }
        },
        "FUN_001063a0": {
            "entrypoint": "0x001063a0",
            "current_name": "print_error_message_001063a0",
            "code": "\n\n\nvoid print_error_message_001063a0(char *error_message,arguments arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_0010b820);\n  vfprintf(standard_error,error_message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "error_message",
                "param_2": "arguments",
                "_stderr": "standard_error",
                "vfprintf": "print_formatted_output",
                "putc": "put_character",
                "_stdout": "standard_output",
                "__gnuc_va_list": "arguments",
                "fprintf": "print",
                "fflush": "flush_standard_output"
            },
            "calling": [
                "FUN_00106300",
                "FUN_00106400"
            ],
            "called": [
                "vfprintf",
                "fflush",
                "putc",
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001063a0": {
                    "1": "print_and_flush_error_message",
                    "4": "print_formatted_message",
                    "24": "print_error_message"
                },
                "param_1": {
                    "13": "error_message",
                    "8": "message",
                    "2": "message_format",
                    "6": "format_string"
                },
                "param_2": {
                    "1": "var_args",
                    "2": "args_list",
                    "17": "arguments",
                    "7": "args"
                },
                "FFLUSH": {
                    "1": "flush_output"
                },
                "FPRINTF": {
                    "1": "print_to_standard_error"
                },
                "_stderr": {
                    "1": "standard_error_stream",
                    "2": "stderr",
                    "15": "standard_error"
                },
                "DAT_0010b820": {
                    "1": "program_name"
                },
                "vfprintf": {
                    "1": "print_formatted_output"
                },
                "putc": {
                    "1": "print_new_line",
                    "2": "put_character"
                },
                "_stdout": {
                    "1": "standard_output_stream",
                    "16": "standard_output",
                    "2": "stdout"
                },
                "__gnuc_va_list": {
                    "1": "arguments"
                },
                "fprintf": {
                    "1": "print"
                },
                "fflush": {
                    "1": "flush_standard_output"
                },
                "10": {
                    "1": "new_line"
                },
                "__gnuc_va_list param_2": {
                    "1": "variable_arguments"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                }
            }
        },
        "FUN_00106400": {
            "entrypoint": "0x00106400",
            "current_name": "print_error_message_00106400",
            "code": "\nvoid print_error_message_00106400(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 buffer_size;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined error_buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = error_buffer;\n  buffer_size = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_error_message_00106400_001063a0(error_message,&buffer_size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00106400": "print_error_message_00106400",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "buffer_size",
                "local_d4": "buffer_size",
                "local_d0": "buffer",
                "local_c8": "local_buffer",
                "local_b8": "error_buffer",
                "local_b0": "param10_copy",
                "local_a8": "param11_copy",
                "local_a0": "param12_copy",
                "local_98": "param13_copy",
                "local_90": "param14_copy",
                "local_88": "error_code_copy",
                "local_78": "param2_copy",
                "local_68": "param3_copy",
                "local_58": "param4_copy",
                "local_48": "param5_copy",
                "local_38": "param6_copy",
                "local_28": "param7_copy",
                "local_18": "param8_copy"
            },
            "calling": [
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_001043d0",
                "FUN_001055f0",
                "FUN_0010249f"
            ],
            "called": [
                "FUN_001063a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00106400": {
                    "5": "print_error",
                    "26": "print_error_message"
                },
                "param_1": {
                    "2": "error_code1",
                    "26": "error_code"
                },
                "param_2": {
                    "1": "msg_param_1",
                    "16": "param2",
                    "2": "error_code2",
                    "3": "error_type"
                },
                "param_3": {
                    "2": "param_3",
                    "1": "msg_param_2",
                    "17": "param3"
                },
                "param_4": {
                    "1": "arg4",
                    "18": "param4",
                    "2": "error_param4",
                    "3": "param_4"
                },
                "param_5": {
                    "18": "param5",
                    "1": "arg5",
                    "2": "error_param5",
                    "3": "param_5"
                },
                "param_6": {
                    "18": "param6",
                    "3": "param_6",
                    "1": "error_location",
                    "2": "error_param6"
                },
                "param_7": {
                    "2": "error_code7",
                    "1": "flag_f",
                    "3": "param_7",
                    "18": "param7"
                },
                "param_8": {
                    "1": "error_flag2",
                    "2": "error_param8",
                    "18": "param8",
                    "3": "param_8"
                },
                "param_9": {
                    "1": "error_message_param9",
                    "17": "error_message",
                    "3": "message",
                    "4": "param9"
                },
                "param_10": {
                    "1": "message_length",
                    "20": "param10"
                },
                "param_11": {
                    "1": "error_message_param11",
                    "20": "param11"
                },
                "param_12": {
                    "1": "error_message_param12",
                    "2": "param_12",
                    "20": "param12"
                },
                "param_13": {
                    "2": "param_13",
                    "1": "error_param13",
                    "20": "param13"
                },
                "param_14": {
                    "1": "error_message_param14",
                    "2": "param_14",
                    "20": "param14"
                },
                "in_AL": {
                    "18": "flag",
                    "4": "condition",
                    "1": "is_error_flag",
                    "2": "input_flag"
                },
                "local_d8": {
                    "13": "buffer_size",
                    "1": "local_size",
                    "6": "size",
                    "3": "length",
                    "2": "buffer_length"
                },
                "local_d4": {
                    "1": "buffer_length",
                    "5": "buffer_size",
                    "4": "length"
                },
                "local_d0": {
                    "1": "local_ptr",
                    "5": "buffer_pointer",
                    "2": "stack_ptr",
                    "7": "buffer",
                    "4": "stack_pointer"
                },
                "local_c8": {
                    "1": "buffer_ptr",
                    "16": "local_buffer",
                    "4": "local_array",
                    "6": "buffer"
                },
                "local_b8": {
                    "2": "temp_buffer",
                    "3": "error_buffer",
                    "1": "buffer"
                },
                "local_b0": {
                    "13": "param10_copy",
                    "1": "param1",
                    "5": "param10",
                    "3": "param_10",
                    "2": "local_param10"
                },
                "local_a8": {
                    "1": "param_buf11",
                    "5": "param11",
                    "3": "param_11",
                    "2": "local_param11",
                    "13": "param11_copy"
                },
                "local_a0": {
                    "1": "param_buf12",
                    "3": "param_12",
                    "13": "param12_copy",
                    "2": "local_param12",
                    "5": "param12"
                },
                "local_98": {
                    "3": "param_13",
                    "1": "temp_param13",
                    "2": "local_param13",
                    "5": "param13",
                    "13": "param13_copy"
                },
                "local_90": {
                    "1": "additional_value5",
                    "13": "param14_copy",
                    "3": "param_14",
                    "5": "param14",
                    "2": "local_param14"
                },
                "local_88": {
                    "2": "error_code1_copy",
                    "1": "local_error_code",
                    "11": "error_code_copy",
                    "3": "error_code"
                },
                "local_78": {
                    "1": "temp_param2",
                    "3": "param2",
                    "2": "error_code2_copy",
                    "9": "param2_copy"
                },
                "local_68": {
                    "1": "error_source_copy",
                    "9": "param3_copy",
                    "2": "local_var3",
                    "3": "param3"
                },
                "local_58": {
                    "1": "error_severity_copy",
                    "9": "param4_copy",
                    "3": "param4",
                    "2": "local_var4"
                },
                "local_48": {
                    "2": "error_param5",
                    "3": "param5",
                    "1": "arg5",
                    "9": "param5_copy"
                },
                "local_38": {
                    "1": "error_data1_copy",
                    "3": "param6",
                    "2": "local_var6",
                    "9": "param6_copy"
                },
                "local_28": {
                    "1": "error_data2_copy",
                    "2": "local_param7",
                    "9": "param7_copy",
                    "3": "param7"
                },
                "local_18": {
                    "9": "param8_copy",
                    "2": "error_param8",
                    "1": "param_8_copy",
                    "3": "param8"
                },
                "in_Al": {
                    "1": "condition_flag"
                }
            }
        },
        "FUN_001064a0": {
            "entrypoint": "0x001064a0",
            "current_name": "print_message_001064a0",
            "code": "\nvoid print_message_001064a0(undefined8 *message1,undefined8 *message)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (message1 != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*message1);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001064a0": "print_message_001064a0",
                "param_1": "message1",
                "param_2": "message",
                "printf": "print_formatted"
            },
            "calling": [],
            "called": [
                "FUN_001036e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001064a0": {
                    "1": "print_prefix",
                    "3": "print_log_message",
                    "23": "print_message"
                },
                "param_1": {
                    "2": "title",
                    "1": "message_header",
                    "5": "message1"
                },
                "param_2": {
                    "1": "default_message_ptr",
                    "14": "message",
                    "3": "log_message",
                    "5": "message2"
                },
                "*param_1": {
                    "1": "prefix[0]"
                },
                "*param_2": {
                    "1": "log_message_string"
                },
                "printf": {
                    "2": "print_formatted"
                }
            }
        },
        "FUN_001064b0": {
            "entrypoint": "0x001064b0",
            "current_name": "print_symbol_info_001064b0",
            "code": "\nvoid print_symbol_info_001064b0(long *symbol_data,undefined8 param)\n\n{\n  char is_undefined;\n  \n  printf_modified_string(&DAT_00107363,symbol_data,0,param);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbol_data + 8));\n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol_data + 8));\n  if (is_undefined != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  print_symbol_info_001064b0(*(undefined8 *)*symbol_data);\n  putchar(0x20);\n  if (symbol_info_ptr == 0) {\n    if (var1 != 0) {\n      print_symbol_info_001064b0();\n      return;\n    }\n  }\n  else if (*(long *)(symbol_info_ptr + 0x38) != 0) {\n    print_symbol_info_001064b0();\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_001064b0": "print_symbol_info_001064b0",
                "param_1": "symbol_data",
                "param_2": "param",
                "cVar1": "is_undefined",
                "param_1[2]": "symbol_info_ptr",
                "print_modified_string_00104740": "print_modified_string",
                "printf": "print",
                "putchar": "print_character",
                "param_1[1]": "var1",
                "bfd_is_undefined_symclass": "is_undefined_symbol_class",
                "print_symbol_info_0010651a": "print_symbol_info",
                "print_symbol_info_001054d0": "print_symbol_info"
            },
            "calling": [],
            "called": [
                "bfd_is_undefined_symclass",
                "FUN_0010651a",
                "FUN_001054d0",
                "FUN_00103a66",
                "FUN_00104740",
                "printf",
                "putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001064b0": {
                    "9": "print_symbol_information",
                    "1": "print_symbol_info_and_var",
                    "5": "print_symbol_details",
                    "14": "print_symbol_info"
                },
                "param_1": {
                    "1": "symbol_info_ptr",
                    "7": "symbol_data",
                    "2": "symbols",
                    "6": "symbol_info",
                    "3": "symbol_pointer"
                },
                "param_2": {
                    "1": "symbol_address",
                    "2": "value",
                    "4": "additional_info",
                    "5": "param",
                    "3": "symbol_info"
                },
                "cVar1": {
                    "1": "undefined_symclass_flag",
                    "7": "is_undefined_symclass",
                    "10": "is_undefined",
                    "5": "is_undefined_symbol",
                    "2": "is_undefined_symbol_class"
                },
                "*param_1": {
                    "1": "symbol_info",
                    "2": "symbol_address",
                    "5": "symbol_ptr",
                    "6": "symbol"
                },
                "&DAT_00107363": {
                    "2": "modified_string"
                },
                "param_1[2]": {
                    "1": "extra_data",
                    "2": "symbol_info_ptr"
                },
                "*(long *)(param_1[2] + 0x38)": {
                    "1": "symbol_info_value"
                },
                "*param_1 + 8": {
                    "2": "symbol_char",
                    "1": "symbol_index"
                },
                "*param_1+8": {
                    "1": "symbol_class"
                },
                "print_modified_string_00104740": {
                    "9": "print_modified_string"
                },
                "DAT_00107363": {
                    "2": "modified_string_data",
                    "3": "modified_string",
                    "1": "string_data"
                },
                "printf": {
                    "1": "print_formatted_output",
                    "3": "print"
                },
                "putchar": {
                    "6": "print_character",
                    "1": "print_space"
                },
                "param_1[1]": {
                    "1": "symbol_info_ptr"
                },
                "*(char *)(*param_1 + 8)": {
                    "2": "symbol_value",
                    "1": "symbol_char"
                },
                "param_1[2] + 0x38": {
                    "1": "data_offset"
                },
                "bfd_is_undefined_symclass": {
                    "1": "is_undefined_sym_class_bfd",
                    "2": "is_undefined_symbol_class"
                },
                "print_symbol_info_0010651a": {
                    "1": "print_symbol_info3"
                },
                "print_symbol_info_001054d0": {
                    "1": "print_symbol_info2",
                    "5": "print_symbol_info"
                },
                "symbol_pointer": {
                    "1": "symbol_ptr"
                }
            }
        },
        "FUN_0010651a": {
            "entrypoint": "0x0010651a",
            "current_name": "print_symbol_info_0010651a",
            "code": "\nvoid print_symbol_info_0010651a(void)\n\n{\n  print_symbol_info_0010651a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010651a": "print_symbol_info_0010651a",
                "print_symbol_info_001054d0": "print_symbol_info"
            },
            "calling": [
                "FUN_001064b0",
                "FUN_00103a66"
            ],
            "called": [
                "FUN_001054d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010651a": {
                    "11": "print_symbol_information",
                    "20": "print_symbol_info"
                },
                "print_symbol_info_001054d0": {
                    "1": "print_symbol_information_internal",
                    "26": "print_symbol_info"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "ptr_function_001054d0": {
                    "1": "symbol_info_printer"
                },
                "PTR_001054d0": {
                    "1": "symbol_info_ptr"
                },
                "original_variable_name_1": {
                    "1": "info"
                }
            }
        },
        "FUN_00106530": {
            "entrypoint": "0x00106530",
            "current_name": "print_error_message_00106530",
            "code": "\n\n\nvoid print_error_message_00106530(void)\n\n{\n  int bfd_error;\n  undefined8 error_message;\n  long error_code;\n  undefined8 additional_info;\n  \n  print_error_message_00106530_helper();\n  error_code = 1;\n  xexit();\n  bfd_error = bfd_get_error();\n  if (bfd_error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(bfd_error);\n  }\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,error_code,error_message,additional_info);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,error_message,additional_info);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00106530": "print_error_message_00106530",
                "in_R10": "additional_info",
                "print_error_message_00106540": "print_error_message_helper",
                "lVar3": "error_code",
                "xexit": "exit_program",
                "iVar1": "bfd_error",
                "uVar2": "error_message"
            },
            "calling": [
                "FUN_00104d5b",
                "FUN_00102fc3",
                "FUN_001048e0",
                "FUN_00103463",
                "FUN_001043d0",
                "FUN_00103c00",
                "FUN_00105110",
                "FUN_00102fd2",
                "FUN_00102f9f"
            ],
            "called": [
                "xexit",
                "FUN_00106540"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00106530": {
                    "1": "print_error_with_message",
                    "9": "print_error_and_exit",
                    "18": "print_error_message",
                    "3": "handle_error"
                },
                "in_R10": {
                    "17": "additional_info",
                    "2": "additional_information",
                    "1": "input_string"
                },
                "print_error_message_00106540": {
                    "1": "print_error_message_header"
                },
                "lVar3": {
                    "1": "is_error_known",
                    "4": "flag",
                    "2": "has_error",
                    "14": "error_code",
                    "3": "is_error"
                },
                "xexit": {
                    "1": "exit_program"
                },
                "iVar1": {
                    "1": "error_type",
                    "9": "bfd_error",
                    "8": "error_code",
                    "7": "error",
                    "4": "bfd_error_code"
                },
                "uVar2": {
                    "27": "error_message",
                    "2": "error_msg"
                }
            }
        },
        "FUN_00106540": {
            "entrypoint": "0x00106540",
            "current_name": "print_error_message_00106540",
            "code": "\n\n\nvoid print_error_message_00106540(long error_description)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 unused_variable;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_description != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_0010b820,error_description,error_message,unused_variable);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_0010b820,error_message,unused_variable);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "error_description",
                "iVar1": "error",
                "uVar2": "error_message",
                "in_R10": "unused_variable",
                "stdout": "standard_output",
                "stderr": "standard_error",
                "_stdout": "standard_output",
                "_stderr": "standard_error"
            },
            "calling": [
                "FUN_00106530",
                "FUN_001043d0"
            ],
            "called": [
                "bfd_get_error",
                "FUN_00103a78",
                "fflush",
                "bfd_errmsg",
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00106540": {
                    "3": "print_error",
                    "1": "display_error_message",
                    "25": "print_error_message",
                    "2": "print_bfd_error_message"
                },
                "param_1": {
                    "1": "filename",
                    "5": "error_message",
                    "8": "error_description",
                    "2": "error",
                    "6": "error_type",
                    "4": "file_name"
                },
                "iVar1": {
                    "5": "error_code",
                    "1": "error_check",
                    "2": "bfd_error",
                    "17": "error"
                },
                "uVar2": {
                    "2": "error_string",
                    "1": "error_message_text",
                    "23": "error_message",
                    "3": "error_msg"
                },
                "in_R10": {
                    "1": "unknown",
                    "2": "additional_info"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "stderr": {
                    "1": "standard_error"
                },
                "_stdout": {
                    "1": "stdout"
                },
                "_stderr": {
                    "1": "stderr"
                }
            }
        },
        "_DT_FINI": {
            "entrypoint": "0x001065a0",
            "current_name": "_DT_FINI",
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 337923,
    "layers": [
        [
            "FUN_00102020",
            "FUN_00102450",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_0010268b",
            "FUN_00102c19",
            "FUN_00102f19",
            "FUN_00102f7b",
            "FUN_00103238",
            "FUN_0010351b",
            "FUN_00103533",
            "FUN_00103573",
            "FUN_001036a7",
            "FUN_001036e0",
            "FUN_00103a78",
            "FUN_00103abf",
            "FUN_00103b2b",
            "FUN_00103b5d",
            "FUN_00103ca0",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_001047d0",
            "FUN_001049c0",
            "FUN_001053b0",
            "FUN_001062d0",
            "FUN_001063a0",
            "FUN_001064a0",
            "FUN_00106540"
        ],
        [
            "FUN_00102739",
            "FUN_00106300",
            "FUN_00106400",
            "FUN_00106530"
        ],
        [
            "FUN_0010249f",
            "FUN_00102f9f",
            "FUN_00103463",
            "FUN_00103c00",
            "FUN_00104370",
            "FUN_00104740",
            "FUN_00104fa0"
        ],
        [
            "FUN_00102fc3",
            "FUN_00102fd2",
            "FUN_00103b49",
            "FUN_00103bf6",
            "FUN_00105050",
            "FUN_00105110"
        ],
        [
            "FUN_00103bec",
            "FUN_00104d5b"
        ],
        [
            "FUN_001048e0"
        ],
        [
            "FUN_001043d0"
        ],
        [
            "FUN_001055f0"
        ],
        [
            "FUN_001054d0"
        ],
        [
            "FUN_001035a2",
            "FUN_0010370a",
            "FUN_00103729",
            "FUN_0010651a"
        ],
        [
            "FUN_00103a66",
            "FUN_001053c0",
            "FUN_001064b0"
        ]
    ],
    "locked_functions": []
}