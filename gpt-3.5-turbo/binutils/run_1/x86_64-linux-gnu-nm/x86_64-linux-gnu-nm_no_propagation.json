{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_001063a0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  FUNC_00105530();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105530",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "update_data_00103c00",
                "param_1": "data",
                "param_2": "value",
                "param_3": "array",
                "param_4": "input1",
                "param_5": "input2",
                "puVar1": "pointer1",
                "auVar2": "tempArray",
                "lVar3": "length",
                "uVar4": "allocatedMemory",
                "uVar5": "relocatedMemory"
            },
            "code": "\nundefined8\nupdateData_00103c00(undefined8 *data,long value,undefined (*array) [16],undefined8 input1,\n            undefined8 input2)\n\n{\n  undefined8 *pointer1;\n  undefined tempArray [16];\n  long length;\n  undefined8 allocatedMemory;\n  undefined8 relocatedMemory;\n  \n  **(long **)*array = value;\n  if ((*(byte *)(value + 0x24) & 4) == 0) {\n    **(undefined8 **)(*array + 8) = 0;\n    **(undefined8 **)array[1] = 0;\n  }\n  else {\n    length = bfd_get_reloc_upper_bound();\n    if (-1 < length) {\n      pointer1 = *(undefined8 **)(*array + 8);\n      allocatedMemory = xmalloc(length);\n      relocatedMemory = *(undefined8 *)(array[1] + 8);\n      *pointer1 = allocatedMemory;\n      pointer1 = *(undefined8 **)array[1];\n      relocatedMemory = bfd_canonicalize_reloc(data,value,**(undefined8 **)(*array + 8),relocatedMemory);\n      *pointer1 = relocatedMemory;\n      if (-1 < **(long **)array[1]) goto LAB_00103c7c;\n    }\n    FUN_00106530(*data);\n  }\nLAB_00103c7c:\n  length = *(long *)(*array + 8) + 8;\n  *(long *)array[1] = *(long *)array[1] + 8;\n  tempArray._8_4_ = (int)length;\n  tempArray._0_8_ = *(long *)*array + 8;\n  tempArray._12_4_ = (int)((ulong)length >> 0x20);\n  *array = tempArray;\n  return input2;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "update_data_00103c00"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_information_0010370a",
                "uVar2": "type",
                "plVar4": "errorMessage",
                "uVar9": "rbxValue",
                "bVar8": "symbolType",
                "pcVar10": "symbolClass",
                "cVar1": "isUndefined",
                "iVar3": "asprintfResult",
                "lVar7": "symbolInfo"
            },
            "code": "\nvoid printSymbolInformation_0010370a(void)\n\n{\n  char isUndefined;\n  ushort type;\n  int asprintfResult;\n  long *errorMessage;\n  int *piVar5;\n  undefined8 uVar6;\n  long symbolInfo;\n  ulong unaff_RBX;\n  byte symbolType;\n  ulong rbxValue;\n  char *symbolClass;\n  \n  errorMessage = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  rbxValue = unaff_RBX & 0xffffffff;\n  FUN_00106300(errorMessage,rbxValue);\n  FUN_00104740(\"%-20s|\",errorMessage,0,rbxValue);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*errorMessage + 8));\n  if (isUndefined == '\\0') {\n    FUN_001054d0(*(undefined8 *)*errorMessage);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*errorMessage + 8));\n  if (*(char *)(*errorMessage + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*errorMessage + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*errorMessage + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (errorMessage[2] == 0) {\n    if (errorMessage[3] != 0) {\n      symbolInfo = *(long *)(errorMessage[3] + 0x30);\n      isUndefined = *(char *)(symbolInfo + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symbolClass = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symbolClass = \"Block\";\n      }\n      else if (*(ushort *)(symbolInfo + 0x26) == 0) {\n        symbolClass = \"None\";\n      }\n      else {\n        type = *(ushort *)(symbolInfo + 0x26) >> 4 & 3;\n        if (type == 2) {\n          symbolClass = \"Function\";\n        }\n        else if (type == 3) {\n          symbolClass = \"Array\";\n        }\n        else {\n          if (type != 1) {\n            free(DAT_0010b730);\n            type = *(ushort *)(symbolInfo + 0x26);\n            symbolType = *(byte *)(symbolInfo + 0x28);\n            symbolClass = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&DAT_0010b730,symbolClass,(ulong)symbolType,(ulong)type);\n            symbolClass = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbolClass = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbolType = *(byte *)(errorMessage[2] + 0x48) & 0xf;\n    switch(symbolType) {\n    case 0:\n      symbolClass = \"NOTYPE\";\n      break;\n    case 1:\n      symbolClass = \"OBJECT\";\n      break;\n    case 2:\n      symbolClass = \"FUNC\";\n      break;\n    case 3:\n      symbolClass = \"SECTION\";\n      break;\n    case 4:\n      symbolClass = \"FILE\";\n      break;\n    case 5:\n      symbolClass = \"COMMON\";\n      break;\n    case 6:\n      symbolClass = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      symbolClass = \"<processor specific>: %d\";\n      if ((2 < symbolType - 0xd) && (symbolClass = \"<OS specific>: %d\", 2 < symbolType - 10)) {\n        symbolClass = \"<unknown>: %d\";\n      }\n      symbolClass = (char *)dcgettext(0,symbolClass,5);\n      asprintfResult = asprintf(&DAT_0010b728,symbolClass,(ulong)symbolType);\n      symbolClass = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        piVar5 = __errno_location();\n        uVar6 = xstrerror(*piVar5);\n        FUN_00106300(&DAT_0010712d,uVar6);\nLAB_00103983:\n        symbolClass = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbolClass);\n  }\n  if (errorMessage[2] == 0) {\n    if (errorMessage[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(errorMessage[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUN_001054d0();\n  }\n  symbolInfo = errorMessage[2];\n  if ((symbolInfo != 0) || (symbolInfo = errorMessage[3], symbolInfo != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbolInfo + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "FUN_001054d0"
            ],
            "imported": false,
            "current_name": "print_symbol_information_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "process_output_format_00104370",
                "param_1": "inputFormat",
                "param_2": "outputMode",
                "uVar1": "errorMessage",
                "ppuVar2": "resultPointer"
            },
            "code": "\nundefined ** processOutputFormat_00104370(undefined *inputFormat,undefined8 outputMode)\n\n{\n  undefined8 errorMessage;\n  undefined **resultPointer;\n  \n  switch(*inputFormat) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_FUN_0010b260 = (undefined *)&PTR_FUN_0010ace0;\n    return &PTR_FUN_0010ace0;\n  default:\n    errorMessage = dcgettext(0,\"%s: invalid output format\",5);\n    FUN_00106300(errorMessage,inputFormat);\n    errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    FUN_00106400(errorMessage);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    resultPointer = (undefined **)FUN_00104397(inputFormat,outputMode,3);\n    return resultPointer;\n  case 0x50:\n  case 0x70:\n    resultPointer = (undefined **)FUN_00104397(inputFormat,outputMode,2);\n    return resultPointer;\n  case 0x53:\n  case 0x73:\n    resultPointer = (undefined **)FUN_00104397(inputFormat,outputMode,1);\n    return resultPointer;\n  }\n}\n\n",
            "called": [
                "FUN_00104397",
                "dcgettext",
                "caseD_4a",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "process_output_format_00104370"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_001055f0",
                "FUN_0010268b",
                "FUN_00103c00",
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_001063a0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001035a2",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00106540",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_001048e0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "formatStrings",
                "uVar1": "savedFormat",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "_stdout": "_standardOutput",
                "_stderr": "_standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *formatStrings)\n\n{\n  undefined8 savedFormat;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_standardOutput);\n  savedFormat = DAT_0010b820;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_standardError,formatString,savedFormat);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_standardError,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "free",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_data_001036a7",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "extraParam",
                "param_4": "anotherParam",
                "printf": "print",
                "%s": "formatString"
            },
            "code": "\nvoid printData_001036a7(undefined8 *data1,undefined8 *data2,undefined8 extraParam,undefined8 anotherParam)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (data1 != (undefined8 *)0x0) {\n      printf(\"formatString:\",*data1);\n    }\n    printf(\"formatString:\",*data2,anotherParam);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_data_001036a7"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbol_info_00102f19",
                "param_1": "filePath",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbolInfo_00102f19(undefined8 filePath)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,filePath);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00102f19"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "check_binary_compatibility_00102fc3",
                "param_1": "firstBinary",
                "param_2": "secondBinary",
                "cVar1": "lastChar",
                "__s": "firstString",
                "__s_00": "secondString",
                "uVar2": "firstStringLength",
                "uVar3": "secondStringLength",
                "lVar4": "firstBinaryLength",
                "lVar5": "secondBinaryLength",
                "sVar6": "firstStringLength",
                "sVar7": "secondStringLength",
                "pcVar8": "firstStringSubstring",
                "pcVar9": "secondStringSubstring",
                "uVar10": "firstStringComparison",
                "uVar11": "secondStringComparison",
                "uVar12": "firstStringLengthPlus",
                "uVar13": "globalData",
                "unaff_R13": "secondBinaryLength",
                "bVar14": "comparisonResult"
            },
            "code": "\nulong checkBinaryCompatibility_00102fc3(undefined8 firstBinary,undefined8 secondBinary)\n\n{\n  char lastChar;\n  ulong firstStringLength;\n  char *firstString;\n  char *secondString;\n  uint secondStringLength;\n  long firstBinaryLength;\n  long secondBinaryLength;\n  size_t firstStringLength;\n  size_t secondStringLength;\n  char *firstStringSubstring;\n  char *secondStringSubstring;\n  ulong firstStringComparison;\n  ulong secondStringComparison;\n  ulong firstStringLengthPlus;\n  undefined8 globalData;\n  long secondBinaryLength;\n  bool comparisonResult;\n  \n  globalData = *DAT_0010b780;\n  FUN_00106530();\n  firstBinaryLength = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,globalData,DAT_0010b770);\n  secondBinaryLength = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,secondBinary,DAT_0010b768);\n  if ((firstBinaryLength == 0) || (secondBinaryLength = secondBinaryLength, secondBinaryLength == 0)) {\n    secondBinaryLength = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(firstBinaryLength + 0x20) == 0x10c2a8) || (*(long *)(secondBinaryLength + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  firstStringComparison = *(ulong *)(*(long *)(firstBinaryLength + 0x20) + 0x30);\n  firstStringLength = *(ulong *)(*(long *)(secondBinaryLength + 0x20) + 0x30);\n  firstStringLengthPlus = *(long *)(firstBinaryLength + 0x10) + firstStringComparison;\n  secondStringComparison = *(long *)(secondBinaryLength + 0x10) + firstStringLength;\n  comparisonResult = firstStringLengthPlus < secondStringComparison;\n  if ((firstStringLengthPlus != secondStringComparison) || (comparisonResult = firstStringComparison < firstStringLength, firstStringComparison != firstStringLength)) {\n    return (ulong)(-(uint)comparisonResult | 1);\n  }\n  firstString = *(char **)(firstBinaryLength + 8);\n  secondString = *(char **)(secondBinaryLength + 8);\n  firstStringLength = strlen(firstString);\n  secondStringLength = strlen(secondString);\n  firstStringSubstring = strstr(firstString,\"gnu_compiled\");\n  if (firstStringSubstring == (char *)0x0) {\n    secondStringSubstring = strstr(firstString,\"gcc2_compiled\");\n    firstStringSubstring = strstr(secondString,\"gnu_compiled\");\n    if ((firstStringSubstring == (char *)0x0) && (firstStringSubstring = strstr(secondString,\"gcc2_compiled\"), firstStringSubstring == (char *)0x0))\n    goto joined_r0x00103157;\n    if (secondStringSubstring == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    firstStringSubstring = strstr(secondString,\"gnu_compiled\");\n    if (firstStringSubstring == (char *)0x0) {\n      secondStringSubstring = strstr(secondString,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (secondStringSubstring != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  secondStringLength = *(uint *)(secondBinaryLength + 0x18) & 0x4000;\n  if ((*(byte *)(firstBinaryLength + 0x19) & 0x40) == 0) {\n    if ((firstStringLength < 3) || (firstString[firstStringLength - 2] != '.')) {\n      if (secondStringLength != 0) {\n        return 1;\n      }\n      if ((secondStringLength < 3) || (secondString[secondStringLength - 2] != '.')) goto LAB_00103202;\n      comparisonResult = false;\n      goto LAB_001031e7;\n    }\n    lastChar = firstString[firstStringLength - 1];\n    comparisonResult = lastChar == 'o' || lastChar == 'a';\n    if (secondStringLength == 0) {\n      if ((secondStringLength < 3) || (secondString[secondStringLength - 2] != '.')) {\n        if (lastChar == 'o' || lastChar == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (secondStringLength != 0) goto LAB_00103202;\n    if (secondStringLength < 3) {\n      return 0xffffffff;\n    }\n    if (secondString[secondStringLength - 2] != '.') {\n      return 0xffffffff;\n    }\n    comparisonResult = true;\nLAB_001031e7:\n    if ((secondString[secondStringLength - 1] != 'o') && (secondString[secondStringLength - 1] != 'a')) {\n      if (comparisonResult) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!comparisonResult) {\n    return 1;\n  }\nLAB_00103202:\n  firstStringComparison = FUN_00104fa0(globalData,secondBinary);\n  return firstStringComparison;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "FUN_00105050"
            ],
            "imported": false,
            "current_name": "check_binary_compatibility_00102fc3"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001025f5",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "param_1": "symbolInfo",
                "param_2": "additionalInfo",
                "cVar1": "isUndefined",
                "uVar2": "classValue",
                "iVar3": "status",
                "piVar4": "errNum",
                "uVar5": "errorString",
                "lVar6": "infoAddress",
                "bVar7": "byteValue",
                "pcVar8": "infoString"
            },
            "code": "\nvoid printSymbolInfo_00103729(long *symbolInfo,undefined8 additionalInfo)\n\n{\n  char isUndefined;\n  ushort classValue;\n  int status;\n  int *errNum;\n  undefined8 errorString;\n  long infoAddress;\n  byte byteValue;\n  char *infoString;\n  \n  FUN_00104740(\"%-20s|\",symbolInfo,0,additionalInfo);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  if (isUndefined == '\\0') {\n    FUN_001054d0(*(undefined8 *)*symbolInfo);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolInfo + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[3] != 0) {\n      infoAddress = *(long *)(symbolInfo[3] + 0x30);\n      isUndefined = *(char *)(infoAddress + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        infoString = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        infoString = \"Block\";\n      }\n      else if (*(ushort *)(infoAddress + 0x26) == 0) {\n        infoString = \"None\";\n      }\n      else {\n        classValue = *(ushort *)(infoAddress + 0x26) >> 4 & 3;\n        if (classValue == 2) {\n          infoString = \"Function\";\n        }\n        else if (classValue == 3) {\n          infoString = \"Array\";\n        }\n        else {\n          if (classValue != 1) {\n            free(DAT_0010b730);\n            classValue = *(ushort *)(infoAddress + 0x26);\n            byteValue = *(byte *)(infoAddress + 0x28);\n            infoString = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            status = asprintf(&DAT_0010b730,infoString,(ulong)byteValue,(ulong)classValue);\n            infoString = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          infoString = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    byteValue = *(byte *)(symbolInfo[2] + 0x48) & 0xf;\n    switch(byteValue) {\n    case 0:\n      infoString = \"NOTYPE\";\n      break;\n    case 1:\n      infoString = \"OBJECT\";\n      break;\n    case 2:\n      infoString = \"FUNC\";\n      break;\n    case 3:\n      infoString = \"SECTION\";\n      break;\n    case 4:\n      infoString = \"FILE\";\n      break;\n    case 5:\n      infoString = \"COMMON\";\n      break;\n    case 6:\n      infoString = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      infoString = \"<processor specific>: %d\";\n      if ((2 < byteValue - 0xd) && (infoString = \"<OS specific>: %d\", 2 < byteValue - 10)) {\n        infoString = \"<unknown>: %d\";\n      }\n      infoString = (char *)dcgettext(0,infoString,5);\n      status = asprintf(&DAT_0010b728,infoString,(ulong)byteValue);\n      infoString = DAT_0010b728;\njoined_r0x00103964:\n      if (status < 0) {\n        errNum = __errno_location();\n        errorString = xstrerror(*errNum);\n        FUN_00106300(&DAT_0010712d,errorString);\nLAB_00103983:\n        infoString = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",infoString);\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUN_001054d0();\n  }\n  infoAddress = symbolInfo[2];\n  if ((infoAddress != 0) || (infoAddress = symbolInfo[3], infoAddress != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(infoAddress + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "asprintf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "dcgettext",
                "free",
                "FUN_00106300",
                "__errno_location",
                "FUN_00104740",
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103729"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_001055f0",
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "xstrerror": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "xstrerror"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_parameters_00103573",
                "param_1": "message1",
                "param_2": "message2",
                "param_3": "unused_param",
                "param_4": "param4",
                "printf": "print"
            },
            "code": "\nvoid print_parameters_00103573(undefined8 *message1,undefined8 *message2,undefined8 unused_param,undefined8 param4)\n\n{\n  if (message1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*message1);\n  }\n  printf(\"%s:\",*message2,param4);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "FUN_001053b0"
            ],
            "imported": false,
            "current_name": "print_parameters_00103573"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_section_information_00105110",
                "param_1": "argv",
                "param_2": "elfHeader",
                "param_3": "format",
                "param_4": "filename",
                "__ptr": "ptr",
                "__s1": "sectionName",
                "pplVar1": "section",
                "plVar2": "symbol",
                "lVar3": "symbolInfo",
                "puVar4": "ptrToFunction",
                "cVar5": "character",
                "iVar6": "sectionType",
                "pvVar7": "pointer",
                "lVar8": "offset",
                "uVar9": "flag",
                "lVar10": "index",
                "local_b4": "lineNumber",
                "local_b0": "buffer",
                "local_a8": "sectionBuffer",
                "local_a0": "formatArgument",
                "local_98": "sectionNamePtr",
                "local_90": "symbolPtr",
                "local_88": "symbolTable",
                "pvStack_80": "fileSections",
                "pvStack_78": "symbolNames",
                "pvStack_70": "fileName",
                "local_68": "buffer",
                "local_60": "sectionFormat"
            },
            "code": "\n\n\nvoid printSectionInformation_00105110(undefined8 *argv,long *elfHeader,undefined8 format,undefined8 *filename)\n\n{\n  void *ptr;\n  char *sectionName;\n  long **section;\n  long *symbol;\n  long symbolInfo;\n  undefined8 *ptrToFunction;\n  char character;\n  int sectionType;\n  void *pointer;\n  long offset;\n  uint flag;\n  long index;\n  uint lineNumber;\n  undefined buffer [8];\n  undefined *sectionBuffer;\n  undefined8 formatArgument;\n  long *sectionNamePtr;\n  long *symbolPtr;\n  void *symbolTable;\n  void *fileSections;\n  void *symbolNames;\n  void *fileName;\n  undefined buffer [8];\n  char sectionFormat;\n  \n  if (*(code **)(PTR_PTR_FUN_0010b260 + 0x18) == FUN_001053b0) {\n    if (DAT_0010b818 != 0) {\n      if (filename != (undefined8 *)0x0) {\n        printf(\"%s:\",*filename);\n      }\n      printf(\"%s:\",*argv);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x18))(filename,argv);\n  }\n  sectionBuffer = buffer;\n  (**(code **)(argv[1] + 0x218))(argv,elfHeader,sectionBuffer);\n  flag = *(uint *)(elfHeader + 3);\n  character = sectionFormat;\n  if (((((sectionFormat == 'i') && ((flag & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (character = *DAT_0010b7c8, (flag & 2) == 0)))) &&\n     (character = sectionFormat, DAT_0010b7c8[1] != '\\0')) {\n    character = DAT_0010b7c8[1];\n  }\n  sectionFormat = character;\n  formatArgument = format;\n  if ((flag & 0x200100) != 0) goto LAB_00103330;\n  offset = *elfHeader;\n  sectionType = *(int *)(*(long *)(offset + 8) + 8);\n  if (((flag & 0x200000) == 0) && (sectionType == 5)) {\n    sectionNamePtr = elfHeader;\n    if (*(long *)(offset + 0x110) == 0) {\n      sectionNamePtr = (long *)0x0;\n    }\n  }\n  else {\n    sectionNamePtr = (long *)0x0;\n    if (((sectionType - 2U & 0xfffffffd) == 0) && (symbolPtr = elfHeader, *(long *)(offset + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  symbolPtr = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&sectionBuffer,argv);\n  do {\n    if (DAT_0010b804 == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (_DAT_0010b7b8 == argv) {\n      ptrToFunction = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      _DAT_0010b7b8 = ptrToFunction;\n      pointer = DAT_0010b750;\n      if (elfHeader[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == argv) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          flag = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; flag < DAT_0010b748; flag = flag + 1) {\n              ptr = *(void **)((long)pointer + (ulong)flag * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(pointer);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(argv + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          fileName = DAT_0010b758;\n          symbolTable = DAT_0010b740;\n          fileSections = DAT_0010b750;\n          symbolNames = DAT_0010b738;\n          bfd_map_over_sections(argv,FUN_00103c00,&symbolTable);\n          _DAT_0010b7b0 = argv;\n        }\n        sectionName = (char *)elfHeader[1];\n        for (flag = 0; flag < DAT_0010b748; flag = flag + 1) {\n          offset = (ulong)flag * 8;\n          pointer = DAT_0010b738;\n          for (index = 0;\n              *(long *)((long)pointer + offset) != index && index <= *(long *)((long)pointer + offset)\n              ; index = index + 1) {\n            section = *(long ***)(*(long *)((long)DAT_0010b750 + offset) + index * 8);\n            symbol = *section;\n            if ((((symbol != (long *)0x0) &&\n                 (symbolInfo = *symbol, *(long *)(symbolInfo + 0x20) == elfHeader[4])) &&\n                (*(long *)(symbolInfo + 0x10) == elfHeader[2])) &&\n               (((sectionType = strcmp(sectionName,*(char **)(symbolInfo + 8)), sectionType == 0 &&\n                 (character = (**(code **)(argv[1] + 0x240))\n                                    (argv,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + offset),section[1],\n                                     &symbolTable,buffer,&lineNumber,0), pointer = DAT_0010b738,\n                 character != '\\0')) && (symbolTable != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",symbolTable,(ulong)lineNumber);\n              flag = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(elfHeader[4] + 0xe0) == argv) {\n        character = (**(code **)(argv[1] + 0x250))(argv,DAT_0010b758,elfHeader,&symbolTable,&lineNumber);\n        if (((character != '\\0') ||\n            (character = (**(code **)(argv[1] + 0x240))\n                               (argv,DAT_0010b758,elfHeader[4],elfHeader[2],&symbolTable,buffer,\n                                &lineNumber,0), character != '\\0')) &&\n           ((symbolTable != (void *)0x0 && (lineNumber != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nLAB_00105359:\n    offset = (**(code **)(argv[1] + 0x1f8))(argv);\n    if (offset < 0) {\n      FUN_00103463(offset);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    offset = (**(code **)(argv[1] + 0x200))(argv,DAT_0010b758);\n    ptrToFunction = argv;\n    if (-1 < offset) goto LAB_00105288;\n    FUN_00106530(*argv);\nLAB_00103330:\n    sectionNamePtr = (long *)0x0;\n    symbolPtr = (long *)0x0;\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&sectionBuffer,argv);\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "FUN_001053b0",
                "FUN_00103463",
                "FUN_001053c0",
                "xmalloc",
                "FUN_00103238",
                "free",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_section_information_00105110"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "check_binary_compatibility_00102fd2",
                "param_1": "binaryPath1",
                "param_2": "binaryPath2",
                "__s": "string1",
                "__s_00": "string2",
                "uVar3": "flags",
                "lVar4": "binaryInfo1",
                "lVar5": "binaryInfo2",
                "sVar6": "stringLen1",
                "sVar7": "stringLen2",
                "pcVar8": "ptr1",
                "pcVar9": "ptr2",
                "uVar10": "result",
                "uVar11": "offset2",
                "uVar12": "offset1",
                "unaff_R13": "unaff_Reg",
                "bVar13": "isBinaryCompatible"
            },
            "code": "\nulong checkBinaryCompatibility_00102fd2(undefined8 binaryPath1,undefined8 binaryPath2)\n\n{\n  char cVar1;\n  ulong uVar2;\n  char *string1;\n  char *string2;\n  uint flags;\n  long binaryInfo1;\n  long binaryInfo2;\n  size_t stringLen1;\n  size_t stringLen2;\n  char *ptr1;\n  char *ptr2;\n  ulong result;\n  ulong offset2;\n  ulong offset1;\n  long unaff_Reg;\n  bool isBinaryCompatible;\n  \n  binaryInfo1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,binaryPath1,DAT_0010b770);\n  binaryInfo2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,binaryPath2,DAT_0010b768);\n  if ((binaryInfo1 == 0) || (unaff_Reg = binaryInfo2, binaryInfo2 == 0)) {\n    binaryInfo2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(binaryInfo1 + 0x20) == 0x10c2a8) || (*(long *)(binaryInfo2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(binaryInfo1 + 0x20) + 0x30);\n  uVar2 = *(ulong *)(*(long *)(binaryInfo2 + 0x20) + 0x30);\n  offset1 = *(long *)(binaryInfo1 + 0x10) + result;\n  offset2 = *(long *)(unaff_Reg + 0x10) + uVar2;\n  isBinaryCompatible = offset1 < offset2;\n  if ((offset1 != offset2) || (isBinaryCompatible = result < uVar2, result != uVar2)) {\n    return (ulong)(-(uint)isBinaryCompatible | 1);\n  }\n  string1 = *(char **)(binaryInfo1 + 8);\n  string2 = *(char **)(unaff_Reg + 8);\n  stringLen1 = strlen(string1);\n  stringLen2 = strlen(string2);\n  ptr1 = strstr(string1,\"gnu_compiled\");\n  if (ptr1 == (char *)0x0) {\n    ptr2 = strstr(string1,\"gcc2_compiled\");\n    ptr1 = strstr(string2,\"gnu_compiled\");\n    if ((ptr1 == (char *)0x0) && (ptr1 = strstr(string2,\"gcc2_compiled\"), ptr1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (ptr2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    ptr1 = strstr(string2,\"gnu_compiled\");\n    if (ptr1 == (char *)0x0) {\n      ptr2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (ptr2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flags = *(uint *)(unaff_Reg + 0x18) & 0x4000;\n  if ((*(byte *)(binaryInfo1 + 0x19) & 0x40) == 0) {\n    if ((stringLen1 < 3) || (string1[stringLen1 - 2] != '.')) {\n      if (flags != 0) {\n        return 1;\n      }\n      if ((stringLen2 < 3) || (string2[stringLen2 - 2] != '.')) goto LAB_00103202;\n      isBinaryCompatible = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = string1[stringLen1 - 1];\n    isBinaryCompatible = cVar1 == 'o' || cVar1 == 'a';\n    if (flags == 0) {\n      if ((stringLen2 < 3) || (string2[stringLen2 - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flags != 0) goto LAB_00103202;\n    if (stringLen2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[stringLen2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    isBinaryCompatible = true;\nLAB_001031e7:\n    if ((string2[stringLen2 - 1] != 'o') && (string2[stringLen2 - 1] != 'a')) {\n      if (isBinaryCompatible) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isBinaryCompatible) {\n    return 1;\n  }\nLAB_00103202:\n  result = FUN_00104fa0(binaryPath1,binaryPath2);\n  return result;\n}\n\n",
            "called": [
                "abort",
                "FUN_00104fa0",
                "strstr",
                "strlen",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "check_binary_compatibility_00102fd2"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "initialize_return_value_00102f9f",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] initializeReturnValue_00102f9f(void)\n\n{\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  FUN_00106530(*DAT_0010b780);\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = 0xffffffff;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "initialize_return_value_00102f9f"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_00103ca0",
                "FUN_00102f19",
                "FUN_00103b5d",
                "FUN_001053c0",
                "FUN_0010249f",
                "FUN_00104370",
                "FUN_0010370a",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_00103a78",
                "FUN_00103abf",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103ca0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_if_pointer_not_null_00103a66",
                "unaff_RBX": "targetPointer"
            },
            "code": "\nvoid checkIfPointerNotNull_00103a66(void)\n\n{\n  long targetPointer;\n  \n  if (*(long *)(targetPointer + 8) != 0) {\n    FUN_0010651a();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "check_if_pointer_not_null_00103a66"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "strcoll": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "strcoll"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_character_info_001035a2",
                "unaff_RBX": "ptrData",
                "lVar1": "value",
                "putchar": "printChar",
                "printf": "printFormatted",
                "char": "character",
                "short": "shortValue"
            },
            "code": "\nvoid printCharacterInfo_001035a2(void)\n\n{\n  long *ptrData;\n  long value;\n  \n  if (ptrData[2] == 0) {\n    value = ptrData[1];\n  }\n  else {\n    value = *(long *)(ptrData[2] + 0x38);\n  }\n  if (value != 0) {\n    putchar(0x20);\n    if (ptrData[2] == 0) {\n      value = ptrData[1];\n    }\n    else {\n      value = *(long *)(ptrData[2] + 0x38);\n    }\n    FUN_001054d0(value);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(character *)(*ptrData + 8));\n  if (*(character *)(*ptrData + 8) != '-') {\n    FUN_00104740(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(character *)(*ptrData + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(shortValue *)(*ptrData + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*ptrData + 0x20));\n  FUN_00104740(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001054d0",
                "putchar",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "FUN_001053c0"
            ],
            "imported": false,
            "current_name": "print_character_info_001035a2"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "find_matching_value_00103463",
                "param_8": "index",
                "param_10": "value",
                "unaff_R12": "searchString",
                "unaff_R13": "functionPointer",
                "unaff_R15": "searchObject",
                "in_stack_00000050": "lineNumber",
                "plVar1": "currentPointer",
                "lVar2": "currentValue",
                "cVar3": "checkResult",
                "iVar4": "comparisonResult",
                "lVar5": "baseAddress",
                "lVar6": "loopIndex"
            },
            "code": "\n\n\nvoid findMatchingValue_00103463(void)\n\n{\n  long *currentPointer;\n  long currentValue;\n  char checkResult;\n  int comparisonResult;\n  long baseAddress;\n  char *searchString;\n  undefined8 *functionPointer;\n  long loopIndex;\n  long searchObject;\n  undefined8 index;\n  ulong value;\n  long lineNumber;\n  \n  FUN_00106530(*functionPointer);\n  do {\n    index._4_4_ = index._4_4_ + 1;\n    if (DAT_0010b748 <= index._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    baseAddress = DAT_0010b738;\n    for (loopIndex = 0; currentPointer = (long *)(baseAddress + (ulong)index._4_4_ * 8),\n        *currentPointer != loopIndex && loopIndex <= *currentPointer; loopIndex = loopIndex + 1) {\n      currentPointer = **(long ***)(*(long *)(DAT_0010b750 + (ulong)index._4_4_ * 8) + loopIndex * 8);\n      if ((((currentPointer != (long *)0x0) &&\n           (currentValue = *currentPointer, *(long *)(currentValue + 0x20) == *(long *)(searchObject + 0x20))) &&\n          (*(long *)(currentValue + 0x10) == *(long *)(searchObject + 0x10))) &&\n         (((comparisonResult = strcmp(searchString,*(char **)(currentValue + 8)), comparisonResult == 0 &&\n           (checkResult = (**(code **)(functionPointer[1] + 0x240))(), baseAddress = DAT_0010b738, checkResult != '\\0')) &&\n          (lineNumber != 0)))) {\n        printf(\"\\t%s:%u\",lineNumber,value >> 0x20);\n        index._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "strcmp",
                "putc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "find_matching_value_00103463"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "initialize_parameter_00104397",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "code": "\nvoid initializeParameter_00104397(undefined8 param1,undefined8 param2,int param3)\n\n{\n  DAT_0010b7c0 = param3;\n  PTR_PTR_FUN_0010b260 = (undefined *)(&PTR_FUN_0010ace0 + (long)param3 * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "caseD_4a",
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "initialize_parameter_00104397"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_001047d0",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_0010268b",
                "FUN_00103b5d",
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_00104670",
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_001055f0",
                "FUN_00106300",
                "FUN_00106530"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "get_architecture_size_00104670",
                "param_1": "input",
                "iVar1": "archSize",
                "pcVar2": "archPtr",
                "puVar3": "concatPtr",
                "pcVar4": "strPtr"
            },
            "code": "\nvoid getArchitectureSize_00104670(long input)\n\n{\n  int archSize;\n  char *archPtr;\n  undefined *concatPtr;\n  char *strPtr;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    strPtr = **(char ***)(input + 8);\n    archPtr = strstr(strPtr,\"64\");\n    archSize = 0x40;\n    if (archPtr == (char *)0x0) {\n      archSize = strcmp(strPtr,\"mmo\");\n      archSize = (-(uint)(archSize == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = archSize;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    strPtr = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    strPtr = \"08\";\n  }\n  else {\n    strPtr = \"016\";\n  }\n  concatPtr = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        concatPtr = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concat(&DAT_001071d7,strPtr,0,0);\n          return;\n        }\n        concatPtr = &DAT_001071cd;\n      }\n    }\n    else {\n      concatPtr = (undefined *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concat(&DAT_001071d7,strPtr,concatPtr,0);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "concat",
                "bfd_get_arch_size",
                "free",
                "FUN_001025f5",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "get_architecture_size_00104670"
        },
        "reconcat": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "reconcat"
        },
        "asprintf": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "asprintf"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "uVar1": "errorText",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_00103a78(void)\n\n{\n  undefined8 errorText;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorText = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorText,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "print_error_message_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "FUNC_001048e0"
            },
            "code": "\n\n\nvoid FUNC_001048e0(ulong **param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 ulong **param_5,ulong **param_6)\n\n{\n  byte bVar1;\n  code *pcVar2;\n  char cVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  long lVar7;\n  ulong **ppuVar8;\n  ulong **ppuVar9;\n  long lVar10;\n  ulong *puVar11;\n  ulong **unaff_RBX;\n  ulong **ppuVar12;\n  ulong **ppuVar13;\n  ulong **unaff_RBP;\n  ulong **ppuVar14;\n  ulong **ppuVar15;\n  ulong **ppuVar16;\n  ulong **ppuVar17;\n  ulong **ppuVar18;\n  ulong **unaff_R14;\n  ulong **unaff_R15;\n  bool bVar19;\n  byte bVar20;\n  ulong **ppuStack_78;\n  uint local_4c;\n  ulong *local_48;\n  ulong **local_40 [2];\n  \n  bVar20 = 0;\n  local_48 = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)param_1 + 0x44) & 0x10) != 0)) {\n    ppuVar9 = (ulong **)&local_4c;\n    ppuVar8 = (ulong **)(*(code *)param_1[1][0x4d])(param_1,DAT_0010b80c != 0,local_40);\n    if ((long)ppuVar8 < 0) {\n      if ((DAT_0010b80c != 0) && (iVar4 = bfd_get_error(), iVar4 == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        puVar11 = *param_1;\n        uVar6 = dcgettext(0,\"%s: no symbols\",5);\n        FUN_00106400(uVar6,puVar11);\n        return;\n      }\n      FUN_00106530(*param_1);\n      goto LAB_00102e9e;\n    }\n    if (ppuVar8 != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (local_4c == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      bVar1 = *(byte *)((long)param_1 + 0x4a);\n      ppuVar13 = param_1;\n      do {\n        if ((bVar1 & 0x10) != 0) {\n          unaff_RBX = (ulong **)*ppuVar13;\n          DAT_0010b230 = '\\0';\n          uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          FUN_00106400(uVar6);\n        }\n        ppuVar14 = local_40[0];\n        unaff_R14 = (ulong **)(ulong)local_4c;\n        bVar19 = DAT_0010b80c != 0;\n        ppuVar9 = local_40[0];\n        unaff_R15 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = unaff_RBX;\n        unaff_RBP = (ulong **)(ulong)bVar19;\n        param_1 = ppuVar13;\n        if (unaff_R15 == (ulong **)0x0) goto LAB_00102ea7;\n        ppuVar17 = (ulong **)((long)ppuVar8 * (long)unaff_R14);\n        ppuVar8 = (ulong **)((long)ppuVar14 + (long)ppuVar17);\n        param_1 = ppuVar14;\n        ppuVar12 = ppuVar14;\njoined_r0x001049a4:\n        if (param_1 < ppuVar8) {\n          do {\n            ppuVar9 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,bVar19,param_1,unaff_R15);\n            ppuVar17 = unaff_R15;\n            if (ppuVar9 == (ulong **)0x0) goto LAB_00102eb0;\n            puVar11 = ppuVar9[1];\n            ppuVar17 = ppuVar8;\n            if (((puVar11 == (ulong *)0x0) || (*(char *)puVar11 != '_')) ||\n               (*(char *)((long)puVar11 + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uVar5 = (uint)(ppuVar9[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uVar5 == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(ppuVar9 + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n                  param_6 = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    cVar3 = (*(code *)ppuVar13[1][0x46])(ppuVar13,ppuVar9);\n                    if (cVar3 != '\\0') {\n                      FUN_00102c19();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (ppuVar9[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n                if ((ppuVar9[4] == (ulong *)0x10c2a8) || (ppuVar9[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                cVar3 = (*(code *)ppuVar13[1][0x46])(ppuVar13,ppuVar9);\n                if (cVar3 != '\\0') {\n                  FUN_00102c19();\n                  return;\n                }\nLAB_00104a7b:\n                if (ppuVar12 != param_1) {\n                  if (unaff_R14 == (ulong **)0x8) {\n                    *ppuVar12 = *param_1;\n                    FUN_001049c0();\n                    return;\n                  }\n                  for (; unaff_R14 != (ulong **)0x0; unaff_R14 = (ulong **)((long)unaff_R14 + -1)) {\n                    *(undefined *)ppuVar12 = *(undefined *)param_1;\n                    param_1 = (ulong **)((long)param_1 + (ulong)bVar20 * -2 + 1);\n                    ppuVar12 = (ulong **)((long)ppuVar12 + (ulong)bVar20 * -2 + 1);\n                  }\n                  FUN_001049c0();\n                  return;\n                }\n                ppuVar12 = (ulong **)((long)ppuVar12 + (long)unaff_R14);\n              }\n            }\n            else {\n              iVar4 = strcmp((char *)((long)puVar11 + (ulong)(*(char *)((long)puVar11 + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              ppuStack_78 = ppuVar9;\n              if (iVar4 == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  ppuStack_78 = (ulong **)*ppuVar13;\n                  DAT_0010b230 = '\\0';\n                  uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(uVar6,ppuStack_78);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uVar5 = (*(uint *)(ppuVar9 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(ppuVar9 + 3) & 0x800082) != 0) || (ppuVar9[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)ppuVar9[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            param_1 = (ulong **)((long)param_1 + (long)unaff_R14);\n            if (ppuVar8 <= param_1) break;\n          } while( true );\n        }\n        ppuVar12 = (ulong **)((long)ppuVar12 - (long)ppuVar14);\n        if (unaff_R14 == (ulong **)0x8) {\n          puVar11 = ppuVar13[1];\n          ppuVar14 = (ulong **)((long)ppuVar12 + 7);\n          if (-1 < (long)ppuVar12) {\n            ppuVar14 = ppuVar12;\n          }\n          param_5 = (ulong **)(ulong)DAT_0010b800;\n          pcVar2 = (code *)puVar11[0x41];\n          ppuVar14 = (ulong **)((long)ppuVar14 >> 3);\n        }\n        else {\n          ppuVar14 = (ulong **)((long)ppuVar12 / (long)unaff_R14);\n          puVar11 = ppuVar13[1];\n          pcVar2 = (code *)puVar11[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = ppuVar13;\n        DAT_0010b770 = (ulong **)(*pcVar2)(ppuVar13);\n        DAT_0010b768 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = local_40[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          ppuVar8 = (ulong **)(ulong)local_4c;\n          if (DAT_0010b7f8 != 0) {\n            bVar19 = DAT_0010b80c != 0;\n            qsort(local_40[0],(size_t)ppuVar14,(size_t)ppuVar8,FUN_00102fd2);\n            ppuVar17 = (ulong **)xmalloc((long)ppuVar14 << 4);\n            ppuVar18 = DAT_0010b770;\n            param_1 = DAT_0010b768;\n            unaff_R14 = (ulong **)((long)ppuVar14 * (long)ppuVar8 + (long)ppuVar12);\n            ppuVar9 = DAT_0010b770;\n            if (unaff_R14 <= ppuVar12) goto LAB_00102ec2;\n            param_6 = DAT_0010b768;\n            ppuVar14 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,bVar19,ppuVar12);\n            param_5 = ppuVar8;\n            ppuStack_78 = ppuVar17;\n            if (ppuVar14 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(local_40[0],(size_t)ppuVar14,(size_t)ppuVar8,\n                (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          puVar11 = ppuVar13[1];\nLAB_00104be2:\n          param_1 = ppuVar13;\n          ppuVar18 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        FUN_00106530(*ppuVar13);\n        param_1 = ppuVar13;\n        ppuVar12 = unaff_R15;\n        while( true ) {\n          unaff_RBX = (ulong **)xmalloc();\n          ppuVar8 = (ulong **)(*(code *)param_1[1][0x6b])(param_1,unaff_RBX);\n          ppuVar9 = ppuVar17;\n          if (-1 < (long)ppuVar8) break;\n          ppuVar13 = (ulong **)*param_1;\n          ppuVar14 = (ulong **)FUN_00106530(ppuVar13,ppuVar17);\nLAB_00102dbe:\n          puVar11 = ppuVar14[2];\n          ppuVar9 = (ulong **)0x0;\nLAB_00102dc4:\n          puVar11 = (ulong *)((long)ppuVar8[8] - (long)puVar11);\n          ppuVar18 = param_1;\n          ppuVar15 = ppuVar12;\nLAB_00104ea7:\n          ppuVar14 = ppuVar9;\n          ppuVar12 = unaff_RBX;\n          param_1 = param_6;\n          if (puVar11 != (ulong *)0x0) {\n            *ppuVar17 = (ulong *)ppuVar15;\n            ppuVar17[1] = puVar11;\n            ppuVar17 = ppuVar17 + 2;\n          }\nLAB_00104e35:\n          param_6 = ppuVar18;\n          if (ppuVar12 < unaff_R14) goto code_r0x00104e3e;\n          ppuVar14 = (ulong **)((long)ppuVar17 - (long)ppuStack_78 >> 4);\n          qsort(ppuStack_78,(size_t)ppuVar14,0x10,FUN_00103533);\n          puVar11 = ppuVar13[1];\n          param_1 = ppuVar13;\n          ppuVar18 = ppuStack_78;\nLAB_00104be5:\n          unaff_RBX = local_40[0];\n          ppuVar8 = (ulong **)(ulong)DAT_0010b7f8;\n          unaff_R14 = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            ppuVar17 = (ulong **)(*(code *)puVar11[0x41])(param_1);\n            if (ppuVar17 == (ulong **)0x0) goto LAB_00102ed2;\n            ppuVar12 = ppuVar18 + (long)ppuVar14 * 2;\n            ppuVar14 = ppuVar18;\n            goto LAB_00104ee9;\n          }\n          ppuVar8 = (ulong **)(ulong)local_4c;\n          unaff_R15 = (ulong **)(*(code *)puVar11[0x41])(param_1);\n          if (unaff_R15 != (ulong **)0x0) {\n            unaff_RBP = (ulong **)((long)ppuVar14 * (long)ppuVar8 + (long)unaff_RBX);\n            if (unaff_RBX < unaff_RBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          FUN_00106530(*param_1);\n          unaff_R15 = ppuVar18;\nLAB_00102d06:\n          ppuVar9 = ppuVar8;\n          if (DAT_0010b80c != 0) {\n            unaff_RBX = local_40[0];\n            ppuVar14 = (ulong **)0x0;\n            ppuVar17 = (ulong **)0x0;\n            break;\n          }\n          lVar10 = (*(code *)param_1[1][0x6a])(param_1);\n          ppuVar14 = local_40[0];\n          ppuVar17 = ppuVar8;\n          ppuVar12 = unaff_R15;\n          if (lVar10 < 1) {\n            ppuVar8 = (ulong **)0x0;\n            unaff_RBX = (ulong **)0x0;\n            break;\n          }\n        }\n        param_6 = &local_48;\n        param_5 = unaff_RBX;\n        lVar10 = (*(code *)param_1[1][0x6c])(param_1,ppuVar17,ppuVar14,ppuVar8);\n        ppuVar8 = ppuVar9;\n        if (0 < lVar10) {\n          ppuVar8 = (ulong **)((long)ppuVar9 + lVar10);\n          local_40[0] = (ulong **)xrealloc(local_40[0]);\n          lVar7 = 0;\n          do {\n            local_40[0][(long)ppuVar9 + lVar7] = local_48 + lVar7 * 6;\n            lVar7 = lVar7 + 1;\n          } while (lVar10 != lVar7);\n          local_40[0][(long)ppuVar9 + lVar10] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (unaff_RBX != (ulong **)0x0)) {\n          free(unaff_RBX);\n        }\nLAB_00102cc2:\n        bVar1 = *(byte *)((long)param_1 + 0x4a);\n        ppuVar13 = param_1;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    puVar11 = *param_1;\n    uVar6 = dcgettext(0,\"%s: no symbols\",5);\n    FUN_00106400(uVar6,puVar11);\n  }\n  return;\ncode_r0x00104b01:\n  param_1 = (ulong **)((long)param_1 + (long)unaff_R14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaff_RBX = (ulong **)((long)ppuVar12 + (long)param_5);\n  if (unaff_R14 <= unaff_RBX) {\n    ppuVar8 = (ulong **)ppuVar14[4];\n    if ((*(uint *)(ppuVar14 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    ppuVar9 = (ulong **)0x0;\nLAB_00104e95:\n    ppuVar18 = param_1;\n    ppuVar15 = ppuVar12;\n    if (*(int *)(ppuVar13[1] + 1) == 5) {\n      puVar11 = ppuVar14[7];\n      goto LAB_00104ea7;\n    }\n    puVar11 = ppuVar14[2];\n    if ((*(byte *)((long)ppuVar8 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaff_R14 <= unaff_RBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  ppuVar8 = param_1;\n  ppuVar15 = param_5;\n  ppuVar16 = param_6;\n  ppuVar9 = (ulong **)(*(code *)ppuVar13[1][0x4e])();\n  ppuVar18 = ppuVar12;\n  if (ppuVar9 == (ulong **)0x0) goto LAB_00102edb;\n  ppuVar8 = (ulong **)ppuVar14[4];\n  if ((*(uint *)(ppuVar14 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (ppuVar12 <= ppuVar14) {\nLAB_00104c75:\n    if (local_48 == (ulong *)0x0) {\n      free(local_40[0]);\n      free(ppuVar18);\n      return;\n    }\n    free(local_48);\n    free(local_40[0]);\n    free(ppuVar18);\n    return;\n  }\n  ppuVar8 = ppuVar17;\n  lVar10 = (*(code *)param_1[1][0x4e])(param_1,unaff_R14,*ppuVar14);\n  if (lVar10 == 0) goto LAB_00102ec9;\n  ppuVar8 = ppuVar14 + 1;\n  ppuVar14 = ppuVar14 + 2;\n  FUN_00105110(param_1,lVar10,*ppuVar8,param_2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  FUN_00106530(*param_1,0);\nLAB_00102ed2:\n  ppuVar13 = (ulong **)*param_1;\n  FUN_00106530();\n  unaff_RBX = ppuVar12;\n  ppuVar15 = param_5;\n  ppuVar16 = param_6;\nLAB_00102edb:\n  param_6 = ppuVar16;\n  param_5 = ppuVar15;\n  ppuVar13 = (ulong **)*ppuVar13;\n  ppuVar9 = (ulong **)FUN_00106530();\n  ppuVar12 = ppuVar18;\nLAB_00102ee3:\n  puVar11 = ppuVar14[2];\nLAB_00102ee7:\n  if (ppuVar8 != (ulong **)ppuVar9[4]) goto LAB_00102dc4;\n  puVar11 = (ulong *)((long)ppuVar9[2] - (long)puVar11);\n  ppuVar18 = param_1;\n  ppuVar15 = ppuVar12;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (ppuVar9 = unaff_R15, lVar10 = (*(code *)param_1[1][0x4e])(param_1,unaff_R14,unaff_RBX),\n        lVar10 != 0) {\n    unaff_RBX = (ulong **)((long)unaff_RBX + (long)ppuVar8);\n    FUN_00105110(param_1,lVar10,0,param_2);\n    if (unaff_RBP <= unaff_RBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  FUN_00106530(*param_1);\n  ppuVar12 = unaff_RBX;\nLAB_00102ea7:\n  ppuVar13 = unaff_RBP;\n  FUN_00106530(*param_1);\n  ppuVar17 = unaff_R15;\nLAB_00102eb0:\n  FUN_00106530(*ppuVar13);\n  ppuVar13 = param_1;\nLAB_00102eb9:\n  FUN_00106530(*ppuVar13);\n  param_1 = param_6;\nLAB_00102ec2:\n  ppuVar14 = (ulong **)0x0;\n  param_5 = ppuVar8;\n  ppuVar18 = ppuVar9;\n  ppuStack_78 = ppuVar17;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "FUN_00106400",
                "FUN_00106530"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "FUNC_001048e0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00106540",
                "FUN_001063a0",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_00103b5d",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_call_00102020",
                "undefined": "codePtr"
            },
            "code": "\nvoid executeIndirectCall_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(codePtr *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_call_00102020"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00106540",
                "FUN_001063a0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_if_flag_enabled_001062d0",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfFlagEnabled_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_flag_enabled_001062d0"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "caseD_4a": {
            "renaming": {},
            "code": "\nvoid switchD_00104393::caseD_4a(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00104397(param_1,param_2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "caseD_4a"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "process_data_00103238",
                "__ptr": "ptr",
                "__s1": "sourceString",
                "plVar1": "ptrVar1",
                "lVar2": "longVar2",
                "cVar3": "charVar3",
                "iVar4": "intVar4",
                "unaff_RBX": "RBX",
                "pvVar5": "ptrVar5",
                "uVar6": "loopVar",
                "unaff_R13": "R13",
                "lVar7": "longVar7",
                "param_10": "parameter10",
                "param_12": "parameter12"
            },
            "code": "\n\n\nvoid processData_00103238(void)\n\n{\n  long *ptrVar1;\n  void *ptr;\n  char *sourceString;\n  long longVar2;\n  char charVar3;\n  int intVar4;\n  long RBX;\n  void *ptrVar5;\n  uint loopVar;\n  long R13;\n  long longVar7;\n  ulong parameter10;\n  void *parameter12;\n  \n  ptrVar5 = DAT_0010b750;\n  if (_DAT_0010b7b0 == R13) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    loopVar = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; loopVar < DAT_0010b748; loopVar = loopVar + 1) {\n        ptr = *(void **)((long)ptrVar5 + (ulong)loopVar * 8);\n        if (ptr != (void *)0x0) {\n          free(ptr);\n        }\n      }\n      free(DAT_0010b740);\n      free(ptrVar5);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(R13 + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  parameter12 = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = R13;\nLAB_00103296:\n  sourceString = *(char **)(RBX + 8);\n  loopVar = 0;\n  do {\n    if (DAT_0010b748 <= loopVar) {\n      putc(10,_stdout);\n      return;\n    }\n    ptrVar5 = DAT_0010b738;\n    for (longVar7 = 0; ptrVar1 = (long *)((long)ptrVar5 + (ulong)loopVar * 8),\n        *ptrVar1 != longVar7 && longVar7 <= *ptrVar1; longVar7 = longVar7 + 1) {\n      ptrVar1 = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)loopVar * 8) + longVar7 * 8);\n      if ((((ptrVar1 != (long *)0x0) &&\n           (longVar2 = *ptrVar1, *(long *)(longVar2 + 0x20) == *(long *)(RBX + 0x20))) &&\n          (*(long *)(longVar2 + 0x10) == *(long *)(RBX + 0x10))) &&\n         (((intVar4 = strcmp(sourceString,*(char **)(longVar2 + 8)), intVar4 == 0 &&\n           (charVar3 = (**(code **)(*(long *)(R13 + 8) + 0x240))(), ptrVar5 = DAT_0010b738,\n           charVar3 != '\\0')) && (parameter12 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",parameter12,parameter10 >> 0x20);\n        loopVar = DAT_0010b748;\n        break;\n      }\n    }\n    loopVar = loopVar + 1;\n  } while( true );\n}\n\n",
            "called": [
                "bfd_map_over_sections",
                "FUN_00103c00",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "process_data_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "label",
                "param_2": "message"
            },
            "code": "\nvoid printMessage_001036e0(undefined8 *label,undefined8 *message)\n\n{\n  if (label != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*label);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "FUN_001064a0"
            ],
            "imported": false,
            "current_name": "print_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_data_001047d0",
                "unaff_RBX": "result",
                "unaff_R12": "flag",
                "unaff_R13": "concatenated",
                "unaff_R14": "formatString",
                "unaff_R15": "unknownValue",
                "pcVar1": "returnValue"
            },
            "code": "\nvoid printData_001047d0(void)\n\n{\n  char *returnValue;\n  void *result;\n  undefined *flag;\n  void *concatenated;\n  char *formatString;\n  long unknownValue;\n  \n  if (((DAT_0010b234 != 0) &&\n      (returnValue = (char *)(**(code **)(*(long *)(unknownValue + 8) + 0x220))(), returnValue != (char *)0x0))\n     && (*returnValue != '\\0')) {\n    result = (void *)reconcat();\n    concatenated = result;\n  }\n  printf(formatString,concatenated);\n  if (flag != (undefined *)0x0) {\n    *flag = 0x40;\n  }\n  free(result);\n  return;\n}\n\n",
            "called": [
                "printf",
                "reconcat",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010268b",
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_data_001047d0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "print_file_warning_0010249f",
                "uVar1": "warningMessage"
            },
            "code": "\nundefined8 printFileWarning_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  FUN_00106400(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_file_warning_0010249f"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "param_1": "filename",
                "cVar1": "format_check",
                "iVar2": "stat_result",
                "uVar3": "return_value",
                "piVar4": "err_num",
                "uVar5": "error_message",
                "puVar6": "file_descriptor",
                "puVar9": "archived_file_descriptor",
                "puVar10": "previous_archived_file_descriptor",
                "lVar7": "map_ent",
                "pcVar8": "error_reason",
                "local_c8": "file_stat"
            },
            "code": "\n\n\nundefined4 check_file_001043d0(char *filename)\n\n{\n  char format_check;\n  int stat_result;\n  undefined4 return_value;\n  int *err_num;\n  undefined8 error_message;\n  undefined8 *file_descriptor;\n  long map_ent;\n  char *error_reason;\n  undefined8 *archived_file_descriptor;\n  undefined8 *previous_archived_file_descriptor;\n  stat file_stat;\n  \n  if (filename != (char *)0x0) {\n    stat_result = stat(filename,&file_stat);\n    if (stat_result < 0) {\nLAB_00102522:\n      err_num = __errno_location();\n      if (*err_num == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00106400(error_message,filename);\n      }\n      else {\n        error_reason = strerror(*err_num);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00106400(error_message,filename,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00106400(error_message,filename);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (file_stat.st_size < 0) {\n        error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        FUN_00106400(error_message,filename);\n      }\n      else if (file_stat.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          file_descriptor = (undefined8 *)bfd_openr(filename,\"plugin\");\n        }\n        else {\n          file_descriptor = (undefined8 *)bfd_openr(filename);\n        }\n        if (file_descriptor != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)file_descriptor + 0x44) = *(uint *)((long)file_descriptor + 0x44) | 0x8000;\n          }\n          format_check = bfd_check_format(file_descriptor,2);\n          if (format_check == '\\0') {\n            return_value = bfd_check_format_matches(file_descriptor,1,&file_stat);\n            if ((char)return_value == '\\0') goto LAB_001025ac;\n            FUN_00104670(file_descriptor);\n            (**(code **)PTR_PTR_FUN_0010b260)(filename);\n            FUNC_001048e0(file_descriptor,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_FUN_0010b260 + 8))(*file_descriptor);\n            if ((_DAT_0010b7f0 != 0) &&\n               (map_ent = bfd_get_next_mapent(file_descriptor,0xffffffffffffffff,&file_stat), map_ent != -1)) {\n              error_reason = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(error_reason);\n              do {\n                archived_file_descriptor = (undefined8 *)(**(code **)(file_descriptor[1] + 0x1e0))(file_descriptor,map_ent);\n                if (archived_file_descriptor == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_stat.st_dev != 0) {\n                  FUN_00104740(&DAT_0010712d,0,*(long *)file_stat.st_dev,file_descriptor);\n                  printf(\" in %s\\n\",*archived_file_descriptor);\n                }\n                map_ent = bfd_get_next_mapent(file_descriptor,map_ent,&file_stat);\n              } while (map_ent != -1);\n            }\n            archived_file_descriptor = (undefined8 *)0x0;\n            do {\n              do {\n                previous_archived_file_descriptor = archived_file_descriptor;\n                archived_file_descriptor = (undefined8 *)bfd_openr_next_archived_file(file_descriptor,previous_archived_file_descriptor);\n                if (archived_file_descriptor == (undefined8 *)0x0) {\n                  stat_result = bfd_get_error();\n                  if (stat_result != 9) {\n                    FUN_00106530(*file_descriptor);\nLAB_00102516:\n                    FUN_00106530(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (previous_archived_file_descriptor != (undefined8 *)0x0) {\n                    bfd_close(previous_archived_file_descriptor);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                format_check = bfd_check_format_matches(archived_file_descriptor,1,&file_stat);\n                if (format_check == '\\0') {\n                  FUN_00106540(*archived_file_descriptor);\n                  stat_result = bfd_get_error();\n                  if (stat_result == 0xd) {\n                    FUN_00103b5d(file_stat.st_dev);\n                  }\n                }\n                else {\n                  FUN_00104670(archived_file_descriptor);\n                  (**(code **)(PTR_PTR_FUN_0010b260 + 0x10))(*file_descriptor,*archived_file_descriptor);\n                  FUNC_001048e0(archived_file_descriptor,file_descriptor);\n                }\n              } while (previous_archived_file_descriptor == (undefined8 *)0x0);\n              bfd_close(previous_archived_file_descriptor);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (previous_archived_file_descriptor != archived_file_descriptor);\n          }\nLAB_001044b4:\n          return_value = 1;\n          while (format_check = bfd_close(file_descriptor), format_check == '\\0') {\n            FUN_00106530(filename);\nLAB_001025ac:\n            FUN_00106540(filename);\n            stat_result = bfd_get_error();\n            if (stat_result == 0xd) {\n              FUN_00103b5d(file_stat.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return return_value;\n        }\n        FUN_00106540(filename);\n      }\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00106400(error_message,filename);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106540",
                "FUN_0010351b",
                "bfd_get_next_mapent",
                "FUN_00103b5d",
                "bfd_openr",
                "FUN_0010249f",
                "FUN_00106400",
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00104740",
                "bfd_check_format_matches",
                "bfd_get_error",
                "FUN_001062d0",
                "dcgettext",
                "bfd_close",
                "strerror",
                "FUN_00104670",
                "FUN_001048e0",
                "stat",
                "__errno_location",
                "FUN_00102670",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "check_file_001043d0"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "bfd_demangle": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "bfd_demangle"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105560();\n  return;\n}\n\n",
            "called": [
                "FUN_00105560"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_0010268b",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "concatenate_params_001025f5",
                "param_1": "parameter1",
                "param_2": "parameter2"
            },
            "code": "\nvoid concatenateParams_001025f5(undefined8 parameter1,undefined8 parameter2)\n\n{\n  DAT_0010b7a0 = concat(&DAT_001071d7,parameter2,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concatenate_params_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_if_global_variable_not_zero_00102670",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfGlobalVariableNotZero_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_global_variable_not_zero_00102670"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103729",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_001055f0",
                "FUN_00103463",
                "FUN_00104d5b",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "str2",
                "__s1": "str1",
                "uVar1": "result",
                "lVar2": "length_str1",
                "lVar3": "length_str2"
            },
            "code": "\nuint compare_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *str2;\n  char *str1;\n  uint result;\n  long length_str1;\n  long length_str2;\n  \n  length_str1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string1,DAT_0010b770);\n  length_str2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string2,DAT_0010b768);\n  if ((length_str1 == 0) || (length_str2 == 0)) {\n    FUN_00106530(*DAT_0010b780);\n  }\n  else {\n    str2 = *(char **)(length_str2 + 8);\n    str1 = *(char **)(length_str1 + 8);\n    if (str2 == (char *)0x0) {\n      return (uint)(str1 != (char *)0x0);\n    }\n    if (str1 != (char *)0x0) {\n      if (*str2 == '\\0') {\n        return (uint)(*str1 != '\\0');\n      }\n      if (*str1 == '\\0') {\n        return 0xffffffff;\n      }\n      result = strcoll(str1,str2);\n      return result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "strcoll",
                "FUN_00102f9f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "FUN_00103bf6",
                "FUN_00105050",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "compare_strings_00104fa0"
        },
        "bfd_is_undefined_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00103729",
                "FUN_001053c0",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "bfd_is_undefined_symclass"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_message_001064a0",
                "param_1": "messageArray",
                "param_2": "messageString"
            },
            "code": "\nvoid printMessage_001064a0(undefined8 *messageArray,undefined8 *messageString)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (messageArray != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*messageArray);\n    return;\n  }\n  printf(\"%s: \",*messageString);\n  return;\n}\n\n",
            "called": [
                "FUN_001036e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_message_001064a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "isUndefined",
                "uVar2": "typeFlag",
                "iVar3": "asprintfResult",
                "plVar4": "ptrSymbolInfo",
                "piVar5": "ptrErrno",
                "uVar6": "strError",
                "lVar7": "symbolInfo",
                "bVar9": "typeCode",
                "pcVar11": "typeSpecifier",
                "in_R8": "inParam1",
                "in_R9": "inParam2"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbol)\n\n{\n  char isUndefined;\n  ushort typeFlag;\n  int asprintfResult;\n  long *ptrSymbolInfo;\n  int *ptrErrno;\n  undefined8 strError;\n  long symbolInfo;\n  ulong uVar8;\n  byte typeCode;\n  ulong uVar10;\n  char *typeSpecifier;\n  undefined8 inParam1;\n  undefined8 inParam2;\n  \n  uVar8 = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,symbol);\n    return;\n  }\n  ptrSymbolInfo = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  uVar10 = uVar8;\n  FUN_00106300(ptrSymbolInfo,uVar8);\n  FUN_00104740(\"%-20s|\",ptrSymbolInfo,0,uVar10,inParam1,inParam2,uVar8);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*ptrSymbolInfo + 8));\n  if (isUndefined == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*ptrSymbolInfo);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*ptrSymbolInfo + 8));\n  if (*(char *)(*ptrSymbolInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*ptrSymbolInfo + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*ptrSymbolInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (ptrSymbolInfo[2] == 0) {\n    if (ptrSymbolInfo[3] != 0) {\n      symbolInfo = *(long *)(ptrSymbolInfo[3] + 0x30);\n      isUndefined = *(char *)(symbolInfo + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        typeSpecifier = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        typeSpecifier = \"Block\";\n      }\n      else if (*(ushort *)(symbolInfo + 0x26) == 0) {\n        typeSpecifier = \"None\";\n      }\n      else {\n        typeFlag = *(ushort *)(symbolInfo + 0x26) >> 4 & 3;\n        if (typeFlag == 2) {\n          typeSpecifier = \"Function\";\n        }\n        else if (typeFlag == 3) {\n          typeSpecifier = \"Array\";\n        }\n        else {\n          if (typeFlag != 1) {\n            free(DAT_0010b730);\n            typeFlag = *(ushort *)(symbolInfo + 0x26);\n            typeCode = *(byte *)(symbolInfo + 0x28);\n            typeSpecifier = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&DAT_0010b730,typeSpecifier,(ulong)typeCode,(ulong)typeFlag);\n            typeSpecifier = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          typeSpecifier = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    typeCode = *(byte *)(ptrSymbolInfo[2] + 0x48) & 0xf;\n    switch(typeCode) {\n    case 0:\n      typeSpecifier = \"NOTYPE\";\n      break;\n    case 1:\n      typeSpecifier = \"OBJECT\";\n      break;\n    case 2:\n      typeSpecifier = \"FUNC\";\n      break;\n    case 3:\n      typeSpecifier = \"SECTION\";\n      break;\n    case 4:\n      typeSpecifier = \"FILE\";\n      break;\n    case 5:\n      typeSpecifier = \"COMMON\";\n      break;\n    case 6:\n      typeSpecifier = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      typeSpecifier = \"<processor specific>: %d\";\n      if ((2 < typeCode - 0xd) && (typeSpecifier = \"<OS specific>: %d\", 2 < typeCode - 10)) {\n        typeSpecifier = \"<unknown>: %d\";\n      }\n      typeSpecifier = (char *)dcgettext(0,typeSpecifier,5);\n      asprintfResult = asprintf(&DAT_0010b728,typeSpecifier,(ulong)typeCode);\n      typeSpecifier = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        ptrErrno = __errno_location();\n        strError = xstrerror(*ptrErrno);\n        FUN_00106300(&DAT_0010712d,strError);\nLAB_00103983:\n        typeSpecifier = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",typeSpecifier);\n  }\n  if (ptrSymbolInfo[2] == 0) {\n    if (ptrSymbolInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(ptrSymbolInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  symbolInfo = ptrSymbolInfo[2];\n  if ((symbolInfo != 0) || (symbolInfo = ptrSymbolInfo[3], symbolInfo != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbolInfo + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "FUN_0010370a",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_0010651a"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_message_001053b0",
                "param_1": "message1",
                "param_2": "message2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid printMessage_001053b0(undefined8 *message1,undefined8 *message2,undefined8 param3,undefined8 param4)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (message1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*message1);\n  }\n  printf(\"%s:\",*message2,param4);\n  return;\n}\n\n",
            "called": [
                "FUN_00103573"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_message_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "extract_and_process_files_001055f0",
                "param_1": "numFiles",
                "param_2": "filePaths",
                "pbVar1": "bytePtr1",
                "bVar2": "byteVar2",
                "bVar3": "boolVar1",
                "bVar4": "boolVar2",
                "bVar5": "boolVar3",
                "cVar6": "charVar1",
                "bVar7": "byteVar3",
                "cVar8": "charVar2",
                "cVar9": "charVar3",
                "iVar10": "intVar1",
                "uVar11": "uintVar1",
                "iVar12": "intVar3",
                "uVar13": "undefined4Var1",
                "uVar14": "undefined4Var2",
                "__stream": "filePtr",
                "__s": "bytePtr2",
                "piVar15": "intPtr1",
                "sVar16": "sizeVar1",
                "__ptr": "bytePtr3",
                "__src": "longPtr1",
                "lVar17": "longVar1",
                "plVar18": "filePathsPtr",
                "plVar19": "longPtr2",
                "uVar20": "undefined8Var1",
                "uVar21": "undefined8Var2",
                "pcVar22": "textDomain",
                "pbVar23": "bytePtr4",
                "unaff_RBP": "resultPtr",
                "lVar24": "longVar2",
                "pbVar25": "bytePtr5",
                "pcVar26": "errMsg",
                "unaff_R12": "currentIndex",
                "piVar27": "optarg",
                "local_110": "innerIndex",
                "local_10c": "maxIterations",
                "local_108": "strLength",
                "local_c8": "statStruct"
            },
            "code": "\n\n\nundefined ** extractAndProcessFiles_001055f0(int numFiles,long *filePaths)\n\n{\n  byte *bytePtr1;\n  byte byteVar2;\n  bool boolVar1;\n  bool boolVar2;\n  bool boolVar3;\n  char charVar1;\n  byte byteVar3;\n  char charVar2;\n  char charVar3;\n  int intVar1;\n  uint uintVar1;\n  int intVar3;\n  undefined4 undefined4Var1;\n  undefined4 undefined4Var2;\n  FILE *filePtr;\n  byte *bytePtr2;\n  int *intPtr1;\n  size_t sizeVar1;\n  byte *bytePtr3;\n  long *longPtr1;\n  long longVar1;\n  long *filePathsPtr;\n  long *longPtr2;\n  undefined8 undefined8Var1;\n  undefined8 undefined8Var2;\n  char *textDomain;\n  byte *bytePtr4;\n  undefined **resultPtr;\n  long longVar2;\n  byte *bytePtr5;\n  char *errMsg;\n  int *currentIndex;\n  int *optarg;\n  int innerIndex;\n  int maxIterations;\n  size_t strLength;\n  stat statStruct;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  textDomain = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *filePaths;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  filePathsPtr = filePaths;\n  if (1 < numFiles) {\n    maxIterations = 2000;\n    currentIndex = (int *)0x1;\n    innerIndex = 0;\n    do {\n      intVar3 = (int)currentIndex;\n      resultPtr = (undefined **)(long)intVar3;\n      optarg = (int *)((long)resultPtr * 8);\n      if (*(char *)filePathsPtr[(long)resultPtr] != '@') goto LAB_00105a70;\n      maxIterations = maxIterations + -1;\n      if (maxIterations == 0) {\n        longVar2 = *filePathsPtr;\n        errMsg = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      textDomain = (char *)filePathsPtr[(long)resultPtr] + 1;\n      intVar1 = stat(textDomain,&statStruct);\n      if (intVar1 < 0) {\nLAB_00105a70:\n        if (numFiles <= intVar3 + 1) break;\nLAB_00105a7a:\n        uintVar1 = intVar3 + 1;\n        innerIndex = intVar3;\n      }\n      else {\n        if ((statStruct.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        filePtr = fopen(textDomain,\"r\");\n        if (filePtr == (FILE *)0x0) goto LAB_00105a70;\n        intVar1 = fseek(filePtr,0,2);\n        if (((intVar1 == -1) ||\n            (textDomain = (char *)ftell(filePtr), (int *)textDomain == (int *)0xffffffffffffffff)) ||\n           (intVar1 = fseek(filePtr,0,0), intVar1 == -1)) {\nLAB_00105ad0:\n          fclose(filePtr);\n          if (intVar3 + 1 < numFiles) goto LAB_00105a7a;\n          break;\n        }\n        bytePtr2 = (byte *)xmalloc((char *)((long)textDomain + 1));\n        intPtr1 = (int *)fread(bytePtr2,1,(size_t)textDomain,filePtr);\n        if (((int *)textDomain != intPtr1) && (intVar1 = ferror(filePtr), intVar1 != 0)) {\n          free(bytePtr2);\n          goto LAB_00105ad0;\n        }\n        bytePtr2[(long)intPtr1] = 0;\n        byteVar3 = *bytePtr2;\n        bytePtr4 = bytePtr2;\n        if (byteVar3 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byteVar3 * 2] & 0x40) != 0) goto LAB_001057c0;\n          sizeVar1 = strlen((char *)bytePtr2);\n          bytePtr3 = (byte *)xmalloc(sizeVar1 + 1);\n          intVar1 = 0;\n          boolVar3 = false;\n          boolVar1 = false;\n          longVar2 = 0;\n          longPtr1 = (long *)0x0;\n          boolVar2 = false;\n          bytePtr4 = bytePtr2;\n          do {\n            while (((&_sch_istable)[(ulong)*bytePtr4 * 2] & 0x40) != 0) {\n              bytePtr4 = bytePtr4 + 1;\n            }\n            if ((intVar1 == 0) || (longPtr2 = longPtr1 + longVar2, intVar1 + -1 <= (int)longVar2)) {\n              if (longPtr1 == (long *)0x0) {\n                intVar1 = 8;\n                longPtr1 = (long *)xmalloc(0x40);\n                longPtr2 = longPtr1 + longVar2;\n                *longPtr2 = 0;\n              }\n              else {\n                intVar1 = intVar1 * 2;\n                longPtr1 = (long *)xrealloc(longPtr1,(long)intVar1 << 3);\n                longPtr2 = longPtr1 + longVar2;\n                *longPtr2 = 0;\n              }\n            }\n            byteVar3 = *bytePtr4;\n            bytePtr5 = bytePtr3;\n            while (byteVar3 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar3 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar3 | boolVar2 | boolVar1))) {\n                  boolVar2 = false;\n                  boolVar3 = false;\n                  boolVar1 = false;\n                  goto LAB_001058e0;\n                }\n                if (!boolVar2) break;\n                bytePtr4 = bytePtr4 + 1;\n                *bytePtr5 = byteVar3;\n                bytePtr5 = bytePtr5 + 1;\n                boolVar2 = false;\n                byteVar3 = *bytePtr4;\n                if (byteVar3 == 0) goto LAB_001058e0;\n              }\n              if (byteVar3 == 0x5c) {\n                boolVar2 = true;\n              }\n              else if (boolVar1) {\n                if (byteVar3 == 0x27) {\n                  boolVar1 = false;\n                }\n                else {\nLAB_00105a55:\n                  *bytePtr5 = byteVar3;\n                  bytePtr5 = bytePtr5 + 1;\n                }\n              }\n              else if (boolVar3) {\n                if (byteVar3 != 0x22) goto LAB_00105a55;\n                boolVar3 = false;\n              }\n              else if (byteVar3 == 0x27) {\n                boolVar1 = true;\n              }\n              else {\n                if (byteVar3 != 0x22) goto LAB_00105a55;\n                boolVar3 = true;\n              }\n              bytePtr1 = bytePtr4 + 1;\n              bytePtr4 = bytePtr4 + 1;\n              byteVar3 = *bytePtr1;\n            }\nLAB_001058e0:\n            *bytePtr5 = 0;\n            longVar1 = xstrdup(bytePtr3);\n            *longPtr2 = longVar1;\n            longPtr1[longVar2 + 1] = 0;\n            byteVar3 = *bytePtr4;\n            byteVar2 = (&_sch_istable)[(ulong)byteVar3 * 2];\n            while ((byteVar2 & 0x40) != 0) {\n              byteVar3 = bytePtr4[1];\n              bytePtr4 = bytePtr4 + 1;\n              byteVar2 = (&_sch_istable)[(ulong)byteVar3 * 2];\n            }\n            longVar2 = longVar2 + 1;\n          } while (byteVar3 != 0);\n          free(bytePtr3);\n          longPtr2 = filePathsPtr;\n          if (filePaths == filePathsPtr) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        longPtr1 = (long *)xmalloc(8);\n        *longPtr1 = 0;\n        if (filePaths == filePathsPtr) {\nLAB_00105c79:\n          if (*filePathsPtr == 0) {\n            intVar1 = 0;\n          }\n          else {\n            longVar2 = 1;\n            do {\n              intVar1 = (int)longVar2;\n              longPtr2 = filePathsPtr + longVar2;\n              longVar2 = longVar2 + 1;\n            } while (*longPtr2 != 0);\n          }\n          longVar1 = 0;\n          longPtr2 = (long *)xmalloc((long)(intVar1 + 1) << 3);\n          longVar2 = *filePathsPtr;\n          while (longVar2 != 0) {\n            undefined8Var1 = xstrdup();\n            *(undefined8 *)((long)longPtr2 + longVar1) = undefined8Var1;\n            longVar1 = longVar1 + 8;\n            longVar2 = *(long *)((long)filePathsPtr + longVar1);\n          }\n          *(undefined8 *)((long)longPtr2 + longVar1) = 0;\nLAB_0010597d:\n          filePathsPtr = longPtr2;\n          if (*longPtr1 == 0) goto LAB_00105d50;\n          textDomain = (char *)0x0;\n          do {\n            textDomain = (char *)((long)textDomain + 1);\n          } while (longPtr1[(long)textDomain] != 0);\n          strLength = (long)textDomain * 8;\n        }\n        else {\nLAB_00105d50:\n          textDomain = (char *)0x0;\n          strLength = 0;\n        }\n        free((void *)filePathsPtr[(long)resultPtr]);\n        filePathsPtr = (long *)xrealloc(filePathsPtr,(long)((long)textDomain + (long)numFiles + 1) * 8);\n        intVar1 = numFiles + -1 + (int)textDomain;\n        memmove(filePathsPtr + (long)(undefined **)((long)resultPtr + (long)textDomain),\n                filePathsPtr + 1 + (long)resultPtr,(long)(numFiles - intVar3) << 3);\n        memcpy(filePathsPtr + (long)resultPtr,longPtr1,strLength);\n        free(longPtr1);\n        free(bytePtr2);\n        fclose(filePtr);\n        uintVar1 = innerIndex + 1;\n        resultPtr = (undefined **)((long)resultPtr + (long)textDomain);\n        currentIndex = optarg;\n        numFiles = intVar1;\n        if (intVar1 <= (int)uintVar1) break;\n      }\n      currentIndex = (int *)(ulong)uintVar1;\n    } while( true );\n  }\n  intVar3 = bfd_init();\n  errMsg = \"fatal error: libbfd ABI mismatch\";\n  if (intVar3 != 0x118) goto LAB_00106085;\n  resultPtr = &PTR_s_debug_syms_0010b280;\n  charVar2 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  textDomain = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  currentIndex = (int *)\"x86_64-pc-linux-gnu\";\n  charVar3 = DAT_0010b23b;\n  charVar1 = DAT_0010b240;\n  undefined4Var2 = DAT_0010b244;\n  if (charVar2 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = undefined4Var2;\n    DAT_0010b240 = charVar1;\n    DAT_0010b23b = charVar3;\n    undefined4Var1 = getopt_long(numFiles,filePathsPtr,textDomain);\n    optarg = _optarg;\n    intPtr1 = (int *)textDomain;\n    charVar3 = DAT_0010b23b;\n    charVar1 = DAT_0010b240;\n    undefined4Var2 = DAT_0010b244;\n    switch(undefined4Var1) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      FUN_00103ca0(_stderr,1);\n      optarg = currentIndex;\nLAB_001061d5:\n      intVar3 = strcmp((char *)optarg,\"l\");\n      if (intVar3 == 0) goto LAB_001061a3;\n      intVar3 = strcmp((char *)optarg,\"escape\");\n      currentIndex = optarg;\n      if ((intVar3 == 0) || (intVar3 = strcmp((char *)optarg,\"e\"), intVar3 == 0)) {\n        DAT_0010b7e0 = 2;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        undefined4Var2 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar3 = strcmp((char *)optarg,\"invalid\");\n      if ((intVar3 == 0) || (intVar3 = strcmp((char *)optarg,\"i\"), intVar3 == 0)) {\n        DAT_0010b7e0 = 5;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        undefined4Var2 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar3 = strcmp((char *)optarg,\"hex\");\n      if ((intVar3 == 0) || (intVar3 = strcmp((char *)optarg,\"x\"), intVar3 == 0)) {\n        DAT_0010b7e0 = 3;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        undefined4Var2 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar3 = strcmp((char *)optarg,\"highlight\");\n      if ((intVar3 == 0) || (intVar3 = strcmp((char *)optarg,\"h\"), intVar3 == 0)) {\n        DAT_0010b7e0 = 4;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        undefined4Var2 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      errMsg = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      FUN_00104370(&DAT_00107033);\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      undefined4Var2 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      FUN_00103ca0(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      currentIndex = (int *)&optarg;\n      DAT_0010b814 = 1;\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      undefined4Var2 = DAT_0010b244;\n      if (_optarg != (int *)0x0) {\n        intVar3 = cplus_demangle_name_to_style();\n        intPtr1 = _optarg;\n        if (intVar3 == 0) {\n          undefined8Var1 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          FUN_00106300(undefined8Var1,intPtr1);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          textDomain = (char *)intPtr1;\n          charVar3 = DAT_0010b23b;\n          charVar1 = DAT_0010b240;\n          undefined4Var2 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          charVar3 = DAT_0010b23b;\n          charVar1 = DAT_0010b240;\n          undefined4Var2 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      FUN_00104370(\"posix\");\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      undefined4Var2 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      intVar3 = strcmp((char *)_optarg,\"32_64\");\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      undefined4Var2 = DAT_0010b244;\n      if (intVar3 != 0) {\n        errMsg = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        undefined8Var1 = dcgettext(0,errMsg,5);\n        FUN_00106300(undefined8Var1);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        undefined4Var2 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      FUN_00104370(_optarg);\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      undefined4Var2 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      FUN_00104370(\"just-symbols\");\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      undefined4Var2 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      charVar3 = *(char *)_optarg;\n      currentIndex = optarg;\n      charVar1 = charVar3;\n      undefined4Var2 = 10;\n      if (charVar3 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < charVar3) {\n        if (charVar3 == 'o') {\n          undefined4Var2 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (charVar3 == 'x') {\n          undefined4Var2 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      errMsg = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      undefined4Var2 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      intVar3 = strcmp((char *)_optarg,\"default\");\n      if ((intVar3 == 0) || (intVar3 = strcmp((char *)optarg,\"d\"), intVar3 == 0)) {\n        DAT_0010b7e0 = 0;\n        currentIndex = optarg;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        undefined4Var2 = DAT_0010b244;\n      }\n      else {\n        intVar3 = strcmp((char *)optarg,\"locale\");\n        if (intVar3 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        currentIndex = optarg;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        undefined4Var2 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    undefined8Var1 = dcgettext(0,errMsg,5);\n    FUN_00106300(undefined8Var1,optarg);\nLAB_00105f13:\n    longVar2 = *filePathsPtr;\n    errMsg = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,errMsg,longVar2);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  undefined4Var2 = bfd_get_error();\n  undefined8Var1 = bfd_errmsg(undefined4Var2);\n  undefined8Var2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  FUN_00106300(undefined8Var2,\"x86_64-pc-linux-gnu\",undefined8Var1);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byteVar3 = bytePtr4[1];\n  bytePtr4 = bytePtr4 + 1;\n  if (byteVar3 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  resultPtr = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    textDomain = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(textDomain);\n    textDomain = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(textDomain);\n                    \n    exit(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    undefined8Var1 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    FUN_00106400(undefined8Var1);\n    undefined8Var1 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    FUN_00106400(undefined8Var1);\n    return resultPtr;\n  }\n  textDomain = &optind;\n  if (_optind != numFiles) {\n    if (1 < numFiles - _optind) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      intVar3 = *(int *)textDomain;\n      if (numFiles <= intVar3) break;\n      longVar2 = filePathsPtr[intVar3];\n      *(int *)textDomain = intVar3 + 1;\n      charVar3 = FUN_001043d0(longVar2);\n      if (charVar3 != '\\0') {\n        intVar3 = *(int *)textDomain;\n        if (numFiles <= intVar3) break;\n        longVar2 = filePathsPtr[intVar3];\n        *(int *)textDomain = intVar3 + 1;\n        charVar3 = FUN_001043d0(longVar2);\n        if (charVar3 != '\\0') {\n          intVar3 = *(int *)textDomain;\n          while( true ) {\n            if (numFiles <= intVar3) goto LAB_00105bdd;\n            longVar2 = filePathsPtr[intVar3];\n            *(int *)textDomain = intVar3 + 1;\n            charVar3 = FUN_001043d0(longVar2);\n            if (charVar3 == '\\0') break;\n            intVar3 = *(int *)textDomain;\n          }\n        }\n      }\n      resultPtr = (undefined **)(ulong)((int)resultPtr + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)resultPtr);\n  }\nLAB_0010613c:\n  uintVar1 = FUN_001043d0(\"a.out\");\n  return (undefined **)(ulong)((uintVar1 ^ 1) & 0xff);\n}\n\n",
            "called": [
                "memmove",
                "FUN_00103ca0",
                "memcpy",
                "ferror",
                "ftell",
                "bindtextdomain",
                "fseek",
                "textdomain",
                "xmalloc_set_program_name",
                "exit",
                "FUN_001043d0",
                "strcmp",
                "bfd_set_default_target",
                "xexit",
                "dcgettext",
                "stat",
                "strlen",
                "printf",
                "getopt_long",
                "fread",
                "cplus_demangle_set_style",
                "bfd_plugin_set_plugin",
                "xmalloc",
                "xstrdup",
                "free",
                "FUN_00104370",
                "FUN_00106300",
                "FUN_00106400",
                "xrealloc",
                "setlocale",
                "bfd_init",
                "bfd_get_error",
                "cplus_demangle_name_to_style",
                "fclose",
                "fopen",
                "bfd_plugin_set_program_name",
                "bfd_set_error_program_name",
                "bfd_errmsg",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "extract_and_process_files_001055f0"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_001055f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_001055f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00104670",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_function_name_0010351b"
            },
            "code": "\nvoid printFunctionName_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_function_name_0010351b"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_if_debug_00103b2b",
                "param_1": "message",
                "param_2": "source"
            },
            "code": "\nvoid print_if_debug_00103b2b(undefined8 message,undefined8 source)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",message,source);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_debug_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_formatted_message_00104740",
                "param_1": "formatString",
                "param_2": "messageData",
                "param_3": "classInfo",
                "param_4": "binaryAddress",
                "puVar1": "tempPtr1",
                "bVar2": "byteVar1",
                "bVar3": "byteVar2",
                "iVar4": "intVar1",
                "sVar5": "stringLength",
                "pcVar6": "tempPtr2",
                "puVar7": "tempPtr3",
                "pcVar8": "tempPtr4",
                "__ptr": "formattedMessage",
                "uVar9": "ulongVar1",
                "uVar10": "undefinedVar1",
                "puVar11": "tempPtr5",
                "puVar12": "tempPtr6",
                "__s": "tempPtr7",
                "__s_00": "tempPtr8",
                "lVar13": "longVar1",
                "uVar14": "uintVar1",
                "bVar15": "byteVar3",
                "acStack_39": "stackArray"
            },
            "code": "\n\n\nvoid printFormattedMessage_00104740(char *formatString,long *messageData,undefined8 *classInfo,long binaryAddress)\n\n{\n  undefined8 *tempPtr1;\n  byte byteVar1;\n  byte byteVar2;\n  int intVar1;\n  size_t stringLength;\n  char *tempPtr2;\n  undefined8 *tempPtr3;\n  char *tempPtr4;\n  undefined8 *formattedMessage;\n  ulong ulongVar1;\n  undefined8 undefinedVar1;\n  undefined *tempPtr5;\n  undefined8 *tempPtr6;\n  char *tempPtr7;\n  undefined8 *tempPtr8;\n  long longVar1;\n  uint uintVar1;\n  byte byteVar3;\n  char stackArray [9];\n  \n  byteVar3 = 0;\n  if (classInfo == (undefined8 *)0x0) {\n    classInfo = *(undefined8 **)(*messageData + 0x10);\n    if (DAT_0010b234 == 0) {\n      FUN_00102739();\n      return;\n    }\nLAB_00104775:\n    tempPtr6 = classInfo;\n    if (DAT_0010b814 == 0) {\n      tempPtr2 = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        tempPtr6 = classInfo;\n        formattedMessage = (undefined8 *)0x0;\n      }\n      else {\n        formattedMessage = (undefined8 *)0x0;\n        if (classInfo != (undefined8 *)0x0) goto LAB_0010269d;\n        tempPtr6 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      tempPtr2 = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)tempPtr6 == '\\0') ||\n         (classInfo = (undefined8 *)bfd_demangle(binaryAddress,tempPtr6,DAT_0010b248),\n         classInfo == (undefined8 *)0x0)) {\n        classInfo = tempPtr6;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        formattedMessage = (undefined8 *)0x0;\n      }\n      else {\n        tempPtr6 = classInfo;\n        formattedMessage = classInfo;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    tempPtr6 = classInfo;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(binaryAddress + 8) + 8) != 5) goto LAB_00104775;\n      tempPtr2 = strchr((char *)classInfo,0x40);\n      if (tempPtr2 == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (messageData == (long *)0x0) {\n              formattedMessage = (undefined8 *)0x0;\n              printf(formatString,classInfo);\n            }\n            else {\n              if (messageData[2] != 0) {\n                FUN_001047d0();\n                return;\n              }\n              formattedMessage = (undefined8 *)0x0;\n              printf(formatString,classInfo);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *tempPtr2 = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          formattedMessage = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    tempPtr2 = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    tempPtr6 = classInfo;\n    formattedMessage = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byteVar1 = *(byte *)classInfo;\n      classInfo = (undefined8 *)((long)classInfo + 1);\n      if (byteVar1 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byteVar1 * 2] & 2) == 0) && (byteVar1 < 0xc0));\n    stringLength = strlen((char *)tempPtr6);\n    tempPtr8 = DAT_0010b790;\n    if (_DAT_0010b798 < stringLength * 9) {\n      free(DAT_0010b790);\n      stringLength = strlen((char *)tempPtr6);\n      _DAT_0010b798 = stringLength * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      tempPtr8 = DAT_0010b790;\n    }\n    while( true ) {\n      tempPtr3 = DAT_0010b790;\n      byteVar1 = *(byte *)tempPtr6;\n      tempPtr1 = (undefined8 *)((long)tempPtr6 + 1);\n      if (byteVar1 == 0) break;\n      if (((&_sch_istable)[(ulong)byteVar1 * 2] & 2) == 0) {\n        if ((byteVar1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)tempPtr8 = byteVar1;\n          tempPtr8 = (undefined8 *)((long)tempPtr8 + 1);\n          tempPtr6 = tempPtr1;\n        }\n        else {\n          byteVar2 = *(byte *)((long)tempPtr6 + 1);\n          if ((byteVar2 & 0xc0) == 0x80) {\n            tempPtr3 = tempPtr8;\n            if ((byteVar1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uintVar1 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar1 = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar1 = isatty(1);\n                if (intVar1 == 0) {\n                  byteVar2 = *(byte *)((long)tempPtr6 + 1);\n                }\n                else {\n                  *(undefined *)(tempPtr8 + 1) = 0;\n                  *tempPtr8 = 0x6d37343b31335b1b;\n                  byteVar2 = *(byte *)((long)tempPtr6 + 1);\n                  tempPtr3 = tempPtr8 + 1;\n                }\n              case 2:\n                uintVar1 = 2;\n                sprintf((char *)tempPtr3,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)tempPtr6 >> 2 & 7),\n                        (ulong)((*(byte *)tempPtr6 & 3) << 6 | byteVar2 & 0x3f));\n                tempPtr3 = (undefined8 *)((long)tempPtr3 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar1 = 2;\n              }\n            }\n            else {\n              byteVar2 = *(byte *)((long)tempPtr6 + 2);\n              if ((byteVar2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byteVar1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar1 = 3;\nLAB_00102a62:\n                  for (ulongVar1 = (ulong)uintVar1; ulongVar1 != 0; ulongVar1 = ulongVar1 - 1) {\n                    *(undefined *)tempPtr3 = *(undefined *)tempPtr6;\n                    tempPtr6 = (undefined8 *)((long)tempPtr6 + (ulong)byteVar3 * -2 + 1);\n                    tempPtr3 = (undefined8 *)((long)tempPtr3 + (ulong)byteVar3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar1 = 3;\nLAB_00102917:\n                  undefinedVar1 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    undefinedVar1 = 0x3c;\n                  }\n                  sprintf((char *)tempPtr8,\"%c\",undefinedVar1);\n                  *(undefined *)((long)tempPtr8 + 3) = 0;\n                  tempPtr3 = (undefined8 *)(longVar1 + (long)tempPtr6);\n                  *(undefined2 *)((long)tempPtr8 + 1) = 0x7830;\n                  tempPtr4 = (char *)((long)tempPtr8 + 3);\n                  do {\n                    tempPtr7 = tempPtr4;\n                    byteVar1 = *(byte *)tempPtr6;\n                    tempPtr6 = (undefined8 *)((long)tempPtr6 + 1);\n                    sprintf(tempPtr7,\"%02x\",(ulong)byteVar1);\n                    tempPtr4 = tempPtr7 + 2;\n                  } while (tempPtr6 != tempPtr3);\n                  undefinedVar1 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    undefinedVar1 = 0x3e;\n                  }\n                  uintVar1 = (uint)longVar1;\n                  sprintf(tempPtr7 + 2,\"%c\",undefinedVar1);\n                  tempPtr3 = (undefined8 *)(tempPtr7 + 3);\n                  break;\n                case 4:\n                  intVar1 = isatty(1);\n                  if (intVar1 == 0) {\n                    byteVar2 = *(byte *)((long)tempPtr6 + 2);\n                  }\n                  else {\n                    *(undefined *)(tempPtr8 + 1) = 0;\n                    *tempPtr8 = 0x6d37343b31335b1b;\n                    byteVar2 = *(byte *)((long)tempPtr6 + 2);\n                    tempPtr3 = tempPtr8 + 1;\n                  }\n                case 2:\n                  uintVar1 = 3;\n                  sprintf((char *)tempPtr3,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)tempPtr6 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)tempPtr6 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)tempPtr6 + 1) & 3) << 6 | byteVar2 & 0x3f));\n                  tempPtr3 = (undefined8 *)((long)tempPtr3 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (intVar1 = isatty(1), intVar1 != 0)) {\n                    *(undefined4 *)tempPtr3 = 0x6d305b1b;\n                    tempPtr3 = (undefined8 *)((long)tempPtr3 + 4);\n                    *(undefined *)tempPtr3 = 0;\n                  }\n                  break;\n                default:\n                  uintVar1 = 3;\n                }\n              }\n              else {\n                byteVar2 = *(byte *)((long)tempPtr6 + 3);\n                if ((byteVar2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar1 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar1 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar1 = isatty(1);\n                  if (intVar1 == 0) {\n                    byteVar2 = *(byte *)((long)tempPtr6 + 3);\n                  }\n                  else {\n                    *(undefined *)(tempPtr8 + 1) = 0;\n                    *tempPtr8 = 0x6d37343b31335b1b;\n                    byteVar2 = *(byte *)((long)tempPtr6 + 3);\n                    tempPtr3 = tempPtr8 + 1;\n                  }\n                case 2:\n                  uintVar1 = 4;\n                  intVar1 = sprintf((char *)tempPtr3,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)tempPtr6 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)tempPtr6 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)tempPtr6 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)tempPtr6 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)tempPtr6 + 2) & 3) << 6 | byteVar2 & 0x3f));\n                  tempPtr3 = (undefined8 *)((long)tempPtr3 + (long)intVar1);\n                  goto LAB_00102a27;\n                default:\n                  uintVar1 = 4;\n                }\n              }\n            }\n            ulongVar1 = (ulong)(uint)((int)tempPtr3 - (int)tempPtr8);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)tempPtr8 = byteVar1;\n            uintVar1 = 1;\n            ulongVar1 = 1;\n          }\n          tempPtr8 = (undefined8 *)((long)tempPtr8 + ulongVar1);\n          tempPtr6 = (undefined8 *)((long)tempPtr1 + (ulong)(uintVar1 - 1));\n        }\n      }\n      else {\n        *(undefined *)tempPtr8 = 0x5e;\n        *(byte *)((long)tempPtr8 + 1) = byteVar1 + 0x40;\n        tempPtr8 = (undefined8 *)((long)tempPtr8 + 2);\n        tempPtr6 = tempPtr1;\n      }\n    }\n    *(undefined *)tempPtr8 = 0;\n    tempPtr6 = tempPtr3;\n  }\njoined_r0x00104864:\n  if ((((messageData != (long *)0x0) && (messageData[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((tempPtr4 = (char *)(**(code **)(*(long *)(binaryAddress + 8) + 0x220))\n                                  (binaryAddress,messageData[2],0,stackArray), tempPtr4 != (char *)0x0 &&\n      (*tempPtr4 != '\\0')))) {\n    tempPtr5 = &DAT_001071e0;\n    if ((stackArray[0] == '\\0') && (*(long *)(messageData[2] + 0x20) != 0x10c2a8)) {\n      tempPtr5 = &DAT_001071df;\n    }\n    formattedMessage = (undefined8 *)reconcat(formattedMessage,tempPtr6,tempPtr5,tempPtr4,0);\n    tempPtr6 = formattedMessage;\n  }\n  printf(formatString,tempPtr6);\n  if (tempPtr2 != (char *)0x0) {\n    *tempPtr2 = '@';\n  }\nLAB_001047ba:\n  free(formattedMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001043d0",
                "FUN_001064b0",
                "FUN_00103b49"
            ],
            "imported": false,
            "current_name": "print_formatted_message_00104740"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "process_data_00106400",
                "param_1": "configParam1",
                "param_2": "configParam2",
                "param_3": "configParam3",
                "param_4": "configParam4",
                "param_5": "configParam5",
                "param_6": "configParam6",
                "param_7": "configParam7",
                "param_8": "configParam8",
                "param_9": "inputData",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "bufferSize",
                "local_d4": "fixedSize",
                "local_d0": "bufferPtr",
                "local_c8": "localBuffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "configParam1Copy",
                "local_78": "configParam2Copy",
                "local_68": "configParam3Copy",
                "local_58": "configParam4Copy",
                "local_48": "configParam5Copy",
                "local_38": "configParam6Copy",
                "local_28": "configParam7Copy",
                "local_18": "configParam8Copy"
            },
            "code": "\nvoid processData_00106400(undefined4 configParam1,undefined4 configParam2,undefined4 configParam3,undefined4 configParam4,\n                 undefined4 configParam5,undefined4 configParam6,undefined4 configParam7,undefined4 configParam8,\n                 undefined8 inputData,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 bufferSize;\n  undefined4 fixedSize;\n  undefined *bufferPtr;\n  undefined *localBuffer;\n  undefined temporaryBuffer [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 configParam1Copy;\n  undefined4 configParam2Copy;\n  undefined4 configParam3Copy;\n  undefined4 configParam4Copy;\n  undefined4 configParam5Copy;\n  undefined4 configParam6Copy;\n  undefined4 configParam7Copy;\n  undefined4 configParam8Copy;\n  \n  if (flag != '\\0') {\n    configParam1Copy = configParam1;\n    configParam2Copy = configParam2;\n    configParam3Copy = configParam3;\n    configParam4Copy = configParam4;\n    configParam5Copy = configParam5;\n    configParam6Copy = configParam6;\n    configParam7Copy = configParam7;\n    configParam8Copy = configParam8;\n  }\n  bufferPtr = &stack0x00000008;\n  bufferSize = 8;\n  localBuffer = temporaryBuffer;\n  fixedSize = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  FUN_001063a0(inputData,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_00104d5b",
                "FUN_0010249f",
                "FUN_001048e0"
            ],
            "imported": false,
            "current_name": "process_data_00106400"
        },
        "bfd_get_arch_size": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "bfd_get_arch_size"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_execute_00103533",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "returnValue"
            },
            "code": "\nulong compareAndExecute_00103533(undefined8 *input1,undefined8 *input2)\n\n{\n  ulong returnValue;\n  \n  if ((ulong)input1[1] < (ulong)input2[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)input2[1] < (ulong)input1[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  returnValue = (*(code *)(&PTR_FUN_0010acc0)[DAT_0010b7f4])(*input1,*input2);\n  return returnValue;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_execute_00103533"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "initialize_system_0010651a"
            },
            "code": "\nvoid initialize_system_0010651a(void)\n\n{\n  FUN_001054d0();\n  return;\n}\n\n",
            "called": [
                "FUN_001054d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "FUN_00103a66",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "initialize_system_0010651a"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_details_001053c0",
                "param_1": "symbolEntry",
                "param_2": "symbolWidth",
                "iVar1": "printWidth",
                "cVar2": "isUndefinedSymbol",
                "uVar3": "printValue",
                "lVar4": "symbolValue"
            },
            "code": "\nvoid printSymbolDetails_001053c0(long *symbolEntry,undefined8 symbolWidth)\n\n{\n  int printWidth;\n  char isUndefinedSymbol;\n  undefined8 printValue;\n  long symbolValue;\n  \n  isUndefinedSymbol = bfd_is_undefined_symclass((int)*(char *)(*symbolEntry + 8));\n  printWidth = DAT_0010b7a8;\n  if (isUndefinedSymbol == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        printValue = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        FUN_00106300(printValue,printWidth);\n        goto LAB_00103623;\n      }\n      printValue = *(undefined8 *)*symbolEntry;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (symbolEntry[2] == 0) {\n          symbolValue = symbolEntry[1];\n        }\n        else {\n          symbolValue = *(long *)(symbolEntry[2] + 0x38);\n        }\n        FUN_001054d0(symbolValue);\n        if (DAT_0010b7ec != 0) {\n          FUN_001035a2();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      printValue = *(undefined8 *)*symbolEntry;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(DAT_0010b7a0,printValue);\n    if (DAT_0010b7ec != 0) {\n      FUN_001035a2();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolEntry + 8));\n  if (*(char *)(*symbolEntry + 8) != '-') {\n    FUN_00104740(&DAT_0010712c,symbolEntry,0,symbolWidth);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbolEntry + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolEntry + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolEntry + 0x20));\n  FUN_00104740(&DAT_0010712c,symbolEntry,0,symbolWidth);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001035a2",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "dcgettext",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_symbol_details_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_information_001064b0",
                "param_1": "symbolAddress",
                "param_2": "fileDescriptor",
                "cVar1": "isUndefinedSymbol",
                "bfd_is_undefined_symclass": "isUndefinedSymbolClass"
            },
            "code": "\nvoid printSymbolInformation_001064b0(long *symbolAddress,undefined8 fileDescriptor)\n\n{\n  char isUndefinedSymbol;\n  \n  FUN_00104740(&DAT_00107363,symbolAddress,0,fileDescriptor);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbolAddress + 8));\n  isUndefinedSymbol = bfd_is_undefined_symclass((int)*(char *)(*symbolAddress + 8));\n  if (isUndefinedSymbol != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  FUN_001054d0(*(undefined8 *)*symbolAddress);\n  putchar(0x20);\n  if (symbolAddress[2] == 0) {\n    if (symbolAddress[1] != 0) {\n      FUN_0010651a();\n      return;\n    }\n  }\n  else if (*(long *)(symbolAddress[2] + 0x38) != 0) {\n    FUN_001054d0();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "putchar",
                "FUN_00103a66",
                "FUN_0010651a",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_001064b0"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_001047d0",
                "FUN_0010351b",
                "FUN_00103463",
                "FUN_00102f19",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00105110",
                "FUN_00102f7b",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_001054d0",
                "FUN_00102739",
                "FUN_001036a7",
                "FUN_00103b2b",
                "FUN_001062d0",
                "FUN_00103abf",
                "FUN_00103573",
                "FUN_00102670",
                "FUN_001036e0"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "process_data_00103b49",
                "param_1": "inputData",
                "param_2": "outputData"
            },
            "code": "\nvoid processData_00103b49(undefined8 inputData,undefined8 outputData)\n\n{\n  FUN_00104740(&DAT_0010712d,inputData,0,outputData);\n  return;\n}\n\n",
            "called": [
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_symbols_info_00103abf",
                "param_1": "libraryName",
                "param_2": "symbolName",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbolsInfo_00103abf(undefined8 libraryName,undefined8 symbolName)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,libraryName,symbolName);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_info_00103abf"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "calculate_result_00103bf6",
                "in_RAX": "input_value",
                "iVar1": "result",
                "auVar2": "output_array"
            },
            "code": "\nundefined  [16] calculate_result_00103bf6(void)\n\n{\n  int result;\n  undefined8 input_value;\n  undefined output_array [16];\n  \n  result = FUN_00104fa0();\n  output_array._0_4_ = -result;\n  output_array._4_4_ = 0;\n  output_array._8_8_ = input_value;\n  return output_array;\n}\n\n",
            "called": [
                "FUN_00104fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "pcVar2": "target_message",
                "__ptr": "target_list",
                "unaff_RBX": "output_file",
                "plVar3": "ptr",
                "in_stack_00000008": "exit_code",
                "lVar1": "target"
            },
            "code": "\nvoid print_supported_targets_00102450(void)\n\n{\n  long target;\n  char *target_message;\n  long *target_list;\n  FILE *output_file;\n  long *ptr;\n  int exit_code;\n  \n  target_message = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(output_file,target_message);\n  target_list = (long *)bfd_target_list();\n  ptr = target_list;\n  while( true ) {\n    target = *ptr;\n    ptr = ptr + 1;\n    if (target == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  if (exit_code == 0) {\n    target_message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(output_file,target_message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exit_code);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00102450"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "decompiled_function_00102c19",
                "pcVar1": "pointer",
                "pcVar2": "codePointer",
                "cVar3": "character",
                "iVar4": "intValue",
                "uVar5": "uintValue",
                "uVar6": "returnValue",
                "lVar7": "longValue",
                "puVar8": "pointerVar",
                "lVar9": "longVar",
                "puVar10": "pointerVar2",
                "unaff_RBX": "registerBX",
                "__ptr": "pointer2",
                "unaff_RBP": "registerBP",
                "puVar11": "pointerVar3",
                "puVar12": "pointerVar4",
                "puVar13": "pointerVar5",
                "in_R8": "registerR8",
                "puVar14": "pointerVar6",
                "in_R9": "registerR9",
                "puVar15": "pointerVar7",
                "unaff_R12": "registerR12",
                "unaff_R13": "registerR13",
                "unaff_R14": "registerR14",
                "unaff_R15": "registerR15",
                "bVar16": "booleanVar",
                "bVar17": "byteVar",
                "unaff_retaddr": "registerRetAddr",
                "uVar18": "uintVar",
                "in_stack_00000008": "stackVariable1",
                "in_stack_00000010": "stackVariable2",
                "in_stack_00000018": "stackVariable3",
                "in_stack_00000038": "stackVariable4",
                "in_stack_00000040": "stackVariable5",
                "in_stack_00000048": "stackVariable6"
            },
            "code": "\n\n\nvoid decompiledFunction_00102c19(void)\n\n{\n  char *pointer;\n  code *codePointer;\n  char character;\n  int intValue;\n  uint uintValue;\n  undefined8 returnValue;\n  long longValue;\n  undefined8 *pointerVar;\n  long longVar;\n  undefined8 *pointerVar2;\n  undefined8 *registerBX;\n  undefined8 *pointer2;\n  undefined8 *registerBP;\n  undefined8 *pointerVar3;\n  undefined8 *pointerVar4;\n  undefined8 *registerR8;\n  undefined8 *pointerVar5;\n  undefined8 *registerR9;\n  undefined8 *pointerVar6;\n  undefined8 *registerR12;\n  undefined8 *pointerVar7;\n  undefined8 *registerR13;\n  undefined8 *registerR14;\n  undefined8 *registerR15;\n  bool booleanVar;\n  byte byteVar;\n  ulong registerRetAddr;\n  ulong uintVar;\n  undefined8 stackVariable1;\n  undefined8 *stackVariable2;\n  undefined8 *stackVariable3;\n  undefined8 stackVariable4;\n  void *stackVariable5;\n  undefined8 *stackVariable6;\n  \n  byteVar = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (registerBX != registerR13) {\n      if (registerR14 == (undefined8 *)0x8) {\n        *registerBX = *registerR13;\n        FUN_001049c0();\n        return;\n      }\n      for (; registerR14 != (undefined8 *)0x0; registerR14 = (undefined8 *)((long)registerR14 + -1)) {\n        *(undefined *)registerBX = *(undefined *)registerR13;\n        registerR13 = (undefined8 *)((long)registerR13 + (ulong)byteVar * -2 + 1);\n        registerBX = (undefined8 *)((long)registerBX + (ulong)byteVar * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    registerBX = (undefined8 *)((long)registerBX + (long)registerR14);\nLAB_001049c3:\n    do {\n      do {\n        registerR13 = (undefined8 *)((long)registerR13 + (long)registerR14);\n        pointerVar7 = registerR12;\n        pointerVar4 = registerBP;\n        if (registerR12 <= registerR13) goto LAB_00104b15;\nLAB_001049cf:\n        pointerVar = (undefined8 *)\n                 (**(code **)(registerBP[1] + 0x270))\n                           (registerBP,registerRetAddr & 0xffffffff,registerR13,registerR15);\n        pointerVar3 = registerBP;\n        pointerVar4 = registerR13;\n        pointerVar7 = registerR15;\n        if (pointerVar == (undefined8 *)0x0) goto LAB_00102eb0;\n        pointer = (char *)pointerVar[1];\n        if (((pointer == (char *)0x0) || (*pointer != '_')) || (pointer[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintValue = (uint)(pointerVar[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintValue != 0) goto LAB_00104a2d;\n          registerR13 = (undefined8 *)((long)registerR13 + (long)registerR14);\n          pointerVar7 = registerR12;\n          pointerVar4 = registerBP;\n          if (registerR12 <= registerR13) {\nLAB_00104b15:\n            registerBX = (undefined8 *)((long)registerBX - (long)stackVariable3);\n            if (registerR14 == (undefined8 *)0x8) {\n              longVar = pointerVar4[1];\n              pointerVar3 = (undefined8 *)((long)registerBX + 7);\n              if (-1 < (long)registerBX) {\n                pointerVar3 = registerBX;\n              }\n              registerR8 = (undefined8 *)(ulong)DAT_0010b800;\n              codePointer = *(code **)(longVar + 0x208);\n              pointerVar3 = (undefined8 *)((long)pointerVar3 >> 3);\n            }\n            else {\n              pointerVar3 = (undefined8 *)((long)registerBX / (long)registerR14);\n              longVar = pointerVar4[1];\n              codePointer = *(code **)(longVar + 0x208);\n            }\n            registerBP = pointerVar4;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = pointerVar4;\n              DAT_0010b770 = (undefined8 *)(*codePointer)(pointerVar4);\n              DAT_0010b768 = (undefined8 *)(**(code **)(pointerVar4[1] + 0x208))(pointerVar4);\n              registerBX = stackVariable6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                FUN_00106530(*pointerVar4);\n                pointer2 = registerR15;\n                goto LAB_00102d8e;\n              }\n              registerR12 = (undefined8 *)(ulong)stackVariable4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                uintVar = (ulong)(DAT_0010b80c != 0);\n                qsort(stackVariable6,(size_t)pointerVar3,(size_t)registerR12,FUN_00102fd2);\n                pointerVar7 = (undefined8 *)xmalloc((long)pointerVar3 << 4);\n                pointerVar5 = DAT_0010b770;\n                registerBP = DAT_0010b768;\n                registerR14 = (undefined8 *)((long)pointerVar3 * (long)registerR12 + (long)registerBX);\n                pointerVar = DAT_0010b770;\n                registerR9 = DAT_0010b768;\n                if (registerR14 <= registerBX) goto LAB_00102ec2;\n                pointerVar3 = (undefined8 *)\n                          (**(code **)(pointerVar4[1] + 0x270))(pointerVar4,uintVar & 0xffffffff,registerBX);\n                pointer2 = registerBX;\n                registerR8 = registerR12;\n                stackVariable2 = pointerVar7;\n                if (pointerVar3 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stackVariable6,(size_t)pointerVar3,(size_t)registerR12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVar = pointerVar4[1];\n            }\n            pointer2 = (undefined8 *)0x0;\n            do {\n              pointerVar4 = stackVariable6;\n              pointerVar = (undefined8 *)(ulong)DAT_0010b7f8;\n              registerR14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointerVar7 = (undefined8 *)(**(code **)(longVar + 0x208))(registerBP);\n                if (pointerVar7 == (undefined8 *)0x0) goto LAB_00102ed2;\n                registerBX = pointer2 + (long)pointerVar3 * 2;\n                pointerVar3 = pointer2;\n                do {\n                  if (registerBX <= pointerVar3) {\nLAB_00104c75:\n                    if (stackVariable5 == (void *)0x0) {\n                      free(stackVariable6);\n                      free(pointer2);\n                      return;\n                    }\n                    free(stackVariable5);\n                    free(stackVariable6);\n                    free(pointer2);\n                    return;\n                  }\n                  pointerVar = pointerVar7;\n                  longVar = (**(code **)(registerBP[1] + 0x270))(registerBP,registerR14,*pointerVar3);\n                  if (longVar == 0) {\n                    FUN_00106530(*registerBP,0);\nLAB_00102ed2:\n                    pointerVar4 = (undefined8 *)*registerBP;\n                    FUN_00106530();\n                    pointerVar5 = registerR8;\n                    pointerVar6 = registerR9;\n                    goto LAB_00102edb;\n                  }\n                  pointerVar4 = pointerVar3 + 1;\n                  pointerVar3 = pointerVar3 + 2;\n                  FUN_00105110(registerBP,longVar,*pointerVar4,stackVariable1);\n                } while( true );\n              }\n              registerR12 = (undefined8 *)(ulong)stackVariable4._4_4_;\n              registerR15 = (undefined8 *)(**(code **)(longVar + 0x208))(registerBP);\n              if (registerR15 == (undefined8 *)0x0) {\n                FUN_00106530(*registerBP);\n                pointerVar4 = registerR12;\n                if (DAT_0010b80c == 0) {\n                  longVar = (**(code **)(registerBP[1] + 0x350))(registerBP);\n                  pointerVar3 = stackVariable6;\n                  pointerVar7 = registerR12;\n                  if (longVar < 1) {\n                    pointerVar = (undefined8 *)0x0;\n                    registerBX = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    registerBX = (undefined8 *)xmalloc();\n                    pointerVar = (undefined8 *)(**(code **)(registerBP[1] + 0x358))(registerBP,registerBX);\n                    pointerVar4 = pointerVar7;\n                    if ((long)pointerVar < 0) {\n                      pointerVar4 = (undefined8 *)*registerBP;\n                      pointerVar3 = (undefined8 *)FUN_00106530(pointerVar4,pointerVar7);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointerVar = registerR12;\n                  registerBX = stackVariable6;\n                  pointerVar3 = (undefined8 *)0x0;\n                  pointerVar7 = (undefined8 *)0x0;\n                }\n                registerR9 = &stack0x00000040;\n                registerR8 = registerBX;\n                longVar = (**(code **)(registerBP[1] + 0x360))(registerBP,pointerVar7,pointerVar3,pointerVar);\n                registerR12 = pointerVar4;\n                if (0 < longVar) {\n                  registerR12 = (undefined8 *)((long)pointerVar4 + longVar);\n                  stackVariable6 = (undefined8 *)xrealloc(stackVariable6);\n                  longValue = 0;\n                  do {\n                    stackVariable6[(long)((long)pointerVar4 + longValue)] =\n                         (void *)(longValue * 0x30 + (long)stackVariable5);\n                    longValue = longValue + 1;\n                  } while (longVar != longValue);\n                  stackVariable6[(long)((long)pointerVar4 + longVar)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (registerBX != (undefined8 *)0x0)) {\n                  free(registerBX);\n                }\n                if ((*(byte *)((long)registerBP + 0x4a) & 0x10) != 0) {\n                  registerBX = (undefined8 *)*registerBP;\n                  DAT_0010b230 = '\\0';\n                  returnValue = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(returnValue);\n                }\n                registerR14 = (undefined8 *)(ulong)stackVariable4._4_4_;\n                booleanVar = DAT_0010b80c != 0;\n                pointerVar3 = (undefined8 *)(ulong)booleanVar;\n                pointerVar = stackVariable6;\n                stackVariable3 = stackVariable6;\n                registerR15 = (undefined8 *)(**(code **)(registerBP[1] + 0x208))(registerBP);\n                if (registerR15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointerVar3 = (undefined8 *)((long)pointerVar3 * (long)registerR12 + (long)pointerVar4);\n                registerBX = pointerVar4;\n                while( true ) {\n                  if (pointerVar3 <= registerBX) goto LAB_00104c75;\n                  pointerVar = registerR15;\n                  longVar = (**(code **)(registerBP[1] + 0x270))(registerBP,registerR14,registerBX);\n                  if (longVar == 0) break;\n                  registerBX = (undefined8 *)((long)registerBX + (long)registerR12);\n                  FUN_00105110(registerBP,longVar,0,stackVariable1);\n                }\n                FUN_00106530(*registerBP,0);\n              }\n              FUN_00106530(*registerBP);\n              pointerVar4 = registerBP;\n              pointerVar7 = registerR15;\nLAB_00102eb0:\n              FUN_00106530(*pointerVar3);\nLAB_00102eb9:\n              FUN_00106530(*pointerVar4);\nLAB_00102ec2:\n              pointerVar3 = (undefined8 *)0x0;\n              pointer2 = registerBX;\n              registerR8 = registerR12;\n              pointerVar5 = pointerVar;\n              registerBP = registerR9;\n              stackVariable2 = pointerVar7;\nLAB_00104e35:\n              while (registerR9 = pointerVar5, pointer2 < registerR14) {\n                registerBX = (undefined8 *)((long)pointer2 + (long)registerR8);\n                if (registerBX < registerR14) {\n                  pointerVar = registerBP;\n                  pointerVar5 = registerR8;\n                  pointerVar6 = registerR9;\n                  pointerVar2 = (undefined8 *)(**(code **)(pointerVar4[1] + 0x270))();\n                  if (pointerVar2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    registerR9 = pointerVar6;\n                    registerR8 = pointerVar5;\n                    pointerVar4 = (undefined8 *)*pointerVar4;\n                    pointerVar2 = (undefined8 *)FUN_00106530();\n                  }\n                  else {\n                    pointerVar = (undefined8 *)pointerVar3[4];\n                    if ((*(uint *)(pointerVar3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar = pointerVar3[2];\nLAB_00102ee7:\n                  if (pointerVar == (undefined8 *)pointerVar2[4]) {\n                    longVar = pointerVar2[2] - longVar;\n                    pointerVar5 = registerBP;\n                    pointerVar6 = pointer2;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar = pointerVar[8] - longVar;\n                  pointerVar5 = registerBP;\n                  pointerVar6 = pointer2;\n                }\n                else {\n                  pointerVar = (undefined8 *)pointerVar3[4];\n                  if ((*(uint *)(pointerVar3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar = pointerVar3[2];\n                    pointerVar2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointerVar2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointerVar5 = registerBP;\n                  pointerVar6 = pointer2;\n                  if (*(int *)(pointerVar4[1] + 8) == 5) {\n                    longVar = pointerVar3[7];\n                  }\n                  else {\n                    longVar = pointerVar3[2];\n                    if ((*(byte *)((long)pointerVar + 0x25) & 0x10) == 0) {\n                      if (registerBX < registerR14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointerVar3 = pointerVar2;\n                pointer2 = registerBX;\n                registerBP = registerR9;\n                if (longVar != 0) {\n                  *pointerVar7 = pointerVar6;\n                  pointerVar7[1] = longVar;\n                  pointerVar7 = pointerVar7 + 2;\n                }\n              }\n              pointerVar3 = (undefined8 *)((long)pointerVar7 - (long)stackVariable2 >> 4);\n              qsort(stackVariable2,(size_t)pointerVar3,0x10,FUN_00103533);\n              longVar = pointerVar4[1];\n              registerBX = pointer2;\n              registerBP = pointerVar4;\n              pointer2 = stackVariable2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intValue = strcmp(pointer + (pointer[2] == '_'),\"__gnu_lto_slim\");\n        stackVariable2 = pointerVar;\n        if (intValue == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stackVariable2 = (undefined8 *)*registerBP;\n            DAT_0010b230 = '\\0';\n            returnValue = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            FUN_00106400(returnValue,stackVariable2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uintValue = (*(uint *)(pointerVar + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointerVar + 3) & 0x800082) == 0) && (pointerVar[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointerVar[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n          if ((pointerVar[4] != 0x10c2a8) && (pointerVar[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointerVar + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n      registerR9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        character = (**(code **)(registerBP[1] + 0x230))(registerBP);\n        if (character != '\\0') {\n          decompiledFunction_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointerVar[4] == 0x10c2a8);\nLAB_00104cba:\n    character = (**(code **)(registerBP[1] + 0x230))(registerBP);\n    if (character != '\\0') {\n      decompiledFunction_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointerVar7 = (undefined8 *)((long)registerR12 * (long)registerR14);\n  registerR12 = (undefined8 *)((long)stackVariable3 + (long)pointerVar7);\n  registerBX = stackVariable3;\n  pointerVar4 = registerBP;\n  if (stackVariable3 < registerR12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  registerRetAddr = (ulong)booleanVar;\n  registerR13 = stackVariable3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "decompiled_function_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_00106530",
                "in_R10": "extraInfo",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "lVar3": "hasError"
            },
            "code": "\n\n\nvoid printError_00106530(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  long hasError;\n  undefined8 extraInfo;\n  \n  FUN_00106540();\n  hasError = 1;\n  xexit();\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (hasError != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,hasError,errorMessage,extraInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,extraInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_00106540",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103463",
                "FUN_001043d0",
                "FUN_00103c00",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_00105110",
                "FUN_00102fc3",
                "FUN_00102f9f",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "print_error_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00106540",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "print_escaped_string_0010268b",
                "puVar1": "ptr",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "isTerminal",
                "sVar5": "stringLength",
                "puVar6": "outputPtr",
                "pcVar7": "outputCharPtr",
                "uVar8": "loopCounter",
                "uVar9": "braceChar",
                "puVar10": "resPtr",
                "puVar11": "inputPtr",
                "unaff_RBP": "unusedPointer",
                "puVar12": "resultPtr",
                "unaff_R12": "unusedPointer",
                "unaff_R13": "inputString",
                "lVar13": "bytesToPrint",
                "uVar14": "additionalBytes",
                "unaff_R14": "formatString",
                "unaff_R15": "unusedPointer",
                "bVar15": "loopFlag",
                "__s": "hexString",
                "in_stack_00000038": "unusedStackVar"
            },
            "code": "\n\n\nvoid printEscapedString_0010268b(void)\n\n{\n  undefined8 *ptr;\n  byte byte1;\n  byte byte2;\n  int isTerminal;\n  size_t stringLength;\n  undefined8 *outputPtr;\n  char *outputCharPtr;\n  ulong loopCounter;\n  undefined8 braceChar;\n  undefined *resPtr;\n  undefined8 *inputPtr;\n  long unusedPointer;\n  undefined8 *resultPtr;\n  undefined *unusedPointer;\n  undefined8 *inputString;\n  long bytesToPrint;\n  uint additionalBytes;\n  char *formatString;\n  long unusedPointer;\n  byte loopFlag;\n  char *hexString;\n  undefined8 unusedStackVar;\n  \n  loopFlag = 0;\n  resultPtr = inputString;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      byte1 = *(byte *)resultPtr;\n      if (byte1 == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (resultPtr = (undefined8 *)((long)resultPtr + 1), byte1 < 0xc0));\n    stringLength = strlen((char *)inputString);\n    resultPtr = DAT_0010b790;\n    inputPtr = inputString;\n    if (_DAT_0010b798 < stringLength * 9) {\n      free(DAT_0010b790);\n      stringLength = strlen((char *)inputString);\n      _DAT_0010b798 = stringLength * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      resultPtr = DAT_0010b790;\n    }\n    while( true ) {\n      inputString = DAT_0010b790;\n      byte1 = *(byte *)inputPtr;\n      ptr = (undefined8 *)((long)inputPtr + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)resultPtr = byte1;\n          resultPtr = (undefined8 *)((long)resultPtr + 1);\n          inputPtr = ptr;\n        }\n        else {\n          byte2 = *(byte *)((long)inputPtr + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            outputPtr = resultPtr;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                additionalBytes = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                bytesToPrint = 2;\n                goto LAB_00102917;\n              case 4:\n                isTerminal = isatty(1);\n                if (isTerminal == 0) {\n                  byte2 = *(byte *)((long)inputPtr + 1);\n                }\n                else {\n                  *(undefined *)(resultPtr + 1) = 0;\n                  *resultPtr = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)inputPtr + 1);\n                  outputPtr = resultPtr + 1;\n                }\n              case 2:\n                additionalBytes = 2;\n                sprintf((char *)outputPtr,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)inputPtr >> 2 & 7),\n                        (ulong)((*(byte *)inputPtr & 3) << 6 | byte2 & 0x3f));\n                outputPtr = (undefined8 *)((long)outputPtr + 6);\n                goto LAB_00102a27;\n              default:\n                additionalBytes = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)inputPtr + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  additionalBytes = 3;\nLAB_00102a62:\n                  for (loopCounter = (ulong)additionalBytes; loopCounter != 0; loopCounter = loopCounter - 1) {\n                    *(undefined *)outputPtr = *(undefined *)inputPtr;\n                    inputPtr = (undefined8 *)((long)inputPtr + (ulong)loopFlag * -2 + 1);\n                    outputPtr = (undefined8 *)((long)outputPtr + (ulong)loopFlag * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  bytesToPrint = 3;\nLAB_00102917:\n                  braceChar = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    braceChar = 0x3c;\n                  }\n                  sprintf((char *)resultPtr,\"%c\",braceChar);\n                  *(undefined *)((long)resultPtr + 3) = 0;\n                  outputPtr = (undefined8 *)(bytesToPrint + (long)inputPtr);\n                  *(undefined2 *)((long)resultPtr + 1) = 0x7830;\n                  outputCharPtr = (char *)((long)resultPtr + 3);\n                  do {\n                    hexString = outputCharPtr;\n                    byte1 = *(byte *)inputPtr;\n                    inputPtr = (undefined8 *)((long)inputPtr + 1);\n                    sprintf(hexString,\"%02x\",(ulong)byte1);\n                    outputCharPtr = hexString + 2;\n                  } while (inputPtr != outputPtr);\n                  braceChar = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    braceChar = 0x3e;\n                  }\n                  additionalBytes = (uint)bytesToPrint;\n                  sprintf(hexString + 2,\"%c\",braceChar);\n                  outputPtr = (undefined8 *)(hexString + 3);\n                  break;\n                case 4:\n                  isTerminal = isatty(1);\n                  if (isTerminal == 0) {\n                    byte2 = *(byte *)((long)inputPtr + 2);\n                  }\n                  else {\n                    *(undefined *)(resultPtr + 1) = 0;\n                    *resultPtr = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)inputPtr + 2);\n                    outputPtr = resultPtr + 1;\n                  }\n                case 2:\n                  additionalBytes = 3;\n                  sprintf((char *)outputPtr,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)inputPtr & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)inputPtr + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)inputPtr + 1) & 3) << 6 | byte2 & 0x3f));\n                  outputPtr = (undefined8 *)((long)outputPtr + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (isTerminal = isatty(1), isTerminal != 0)) {\n                    *(undefined4 *)outputPtr = 0x6d305b1b;\n                    outputPtr = (undefined8 *)((long)outputPtr + 4);\n                    *(undefined *)outputPtr = 0;\n                  }\n                  break;\n                default:\n                  additionalBytes = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)inputPtr + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  additionalBytes = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  bytesToPrint = 4;\n                  goto LAB_00102917;\n                case 4:\n                  isTerminal = isatty(1);\n                  if (isTerminal != 0) {\n                    *(undefined *)(resultPtr + 1) = 0;\n                    *resultPtr = 0x6d37343b31335b1b;\n                    outputPtr = resultPtr + 1;\n                  }\n                case 2:\n                  additionalBytes = 4;\n                  isTerminal = sprintf((char *)outputPtr,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)inputPtr & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)inputPtr + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)inputPtr + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)inputPtr + 2) >> 2 & 0xfU));\n                  outputPtr = (undefined8 *)((long)outputPtr + (long)isTerminal);\n                  goto LAB_00102a27;\n                default:\n                  additionalBytes = 4;\n                }\n              }\n            }\n            loopCounter = (ulong)(uint)((int)outputPtr - (int)resultPtr);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)resultPtr = byte1;\n            additionalBytes = 1;\n            loopCounter = 1;\n          }\n          resultPtr = (undefined8 *)((long)resultPtr + loopCounter);\n          inputPtr = (undefined8 *)((long)ptr + (ulong)(additionalBytes - 1));\n        }\n      }\n      else {\n        *(undefined *)resultPtr = 0x5e;\n        *(byte *)((long)resultPtr + 1) = byte1 + 0x40;\n        resultPtr = (undefined8 *)((long)resultPtr + 2);\n        inputPtr = ptr;\n      }\n    }\n    *(undefined *)resultPtr = 0;\n  }\nLAB_0010485e:\n  resultPtr = (undefined8 *)0x0;\n  if ((((unusedPointer != 0) && (*(long *)(unusedPointer + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((outputCharPtr = (char *)(**(code **)(*(long *)(unusedPointer + 8) + 0x220))\n                                  (unusedPointer,*(long *)(unusedPointer + 0x10),0,\n                                   (long)&stack0x00000038 + 7), outputCharPtr != (char *)0x0 &&\n      (*outputCharPtr != '\\0')))) {\n    resPtr = &DAT_001071e0;\n    if ((unusedStackVar._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(unusedPointer + 0x10) + 0x20) != 0x10c2a8)) {\n      resPtr = &DAT_001071df;\n    }\n    resultPtr = (undefined8 *)reconcat(0,inputString,resPtr,outputCharPtr,0);\n    inputString = resultPtr;\n  }\n  printf(formatString,inputString);\n  if (unusedPointer != (undefined *)0x0) {\n    *unusedPointer = 0x40;\n  }\n  free(resultPtr);\n  return;\n}\n\n",
            "called": [
                "FUN_001047d0",
                "isatty",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_escaped_string_0010268b"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "calculate_negative_result_00103bec",
                "in_RAX": "inputValue",
                "iVar1": "functionResult",
                "auVar2": "returnValue"
            },
            "code": "\nundefined  [16] calculateNegativeResult_00103bec(void)\n\n{\n  int functionResult;\n  undefined8 inputValue;\n  undefined returnValue [16];\n  \n  functionResult = FUN_00105050();\n  returnValue._0_4_ = -functionResult;\n  returnValue._4_4_ = 0;\n  returnValue._8_8_ = inputValue;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00105050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_negative_result_00103bec"
        },
        "bfd_get_next_mapent": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_next_mapent"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "errorMessage",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "putc": "printNewline"
            },
            "code": "\n\n\nvoid printErrorMessage_001063a0(char *errorMessage,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010b820);\n  vfprintf(standardError,errorMessage,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "fprintf",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "FUN_00106400",
                "FUN_00106300"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "print_formatted_string_00102739",
                "puVar1": "pointer1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intVar",
                "sVar5": "sizeVar",
                "pcVar6": "stringPointer1",
                "puVar7": "pointer2",
                "pcVar8": "stringPointer2",
                "__ptr": "resultPointer",
                "uVar9": "ulongVar",
                "uVar10": "ulongVar2",
                "puVar11": "pointer3",
                "unaff_RBP": "unaffectedRegisterBP",
                "puVar12": "pointer4",
                "unaff_R13": "unaffectedRegister13",
                "lVar13": "longVar",
                "uVar14": "uintVar",
                "unaff_R14": "unaffectedRegister14",
                "unaff_R15": "unaffectedRegister15",
                "bVar15": "byteVar",
                "__s": "stringPointer3",
                "in_stack_00000038": "stackVariable"
            },
            "code": "\n\n\nvoid printFormattedString_00102739(void)\n\n{\n  undefined8 *pointer1;\n  byte byte1;\n  byte byte2;\n  int intVar;\n  size_t sizeVar;\n  char *stringPointer1;\n  undefined8 *pointer2;\n  char *stringPointer2;\n  undefined8 *resultPointer;\n  ulong ulongVar;\n  undefined8 ulongVar2;\n  undefined *pointer3;\n  long unaffectedRegisterBP;\n  undefined8 *pointer4;\n  undefined8 *unaffectedRegister13;\n  long longVar;\n  uint uintVar;\n  char *unaffectedRegister14;\n  long unaffectedRegister15;\n  byte byteVar;\n  char *stringPointer3;\n  undefined8 stackVariable;\n  \n  byteVar = 0;\n  pointer4 = unaffectedRegister13;\n  if (*(int *)(*(long *)(unaffectedRegister15 + 8) + 8) != 5) {\n    if (DAT_0010b814 != 0) {\n      stringPointer1 = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    stringPointer1 = (char *)0x0;\n    if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      resultPointer = (undefined8 *)0x0;\n    }\n    else {\n      resultPointer = (undefined8 *)0x0;\n      if (unaffectedRegister13 != (undefined8 *)0x0) goto LAB_0010269d;\n      resultPointer = (undefined8 *)0x0;\n      unaffectedRegister13 = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  stringPointer1 = strchr((char *)unaffectedRegister13,0x40);\n  if (stringPointer1 == (char *)0x0) {\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) {\n      if (unaffectedRegisterBP == 0) {\n        resultPointer = (undefined8 *)0x0;\n        printf(unaffectedRegister14);\n      }\n      else {\n        if (*(long *)(unaffectedRegisterBP + 0x10) != 0) {\n          FUN_001047d0();\n          return;\n        }\n        resultPointer = (undefined8 *)0x0;\n        printf(unaffectedRegister14);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    pointer4 = unaffectedRegister13;\n    resultPointer = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)pointer4;\n      if (byte1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (pointer4 = (undefined8 *)((long)pointer4 + 1), byte1 < 0xc0));\n    sizeVar = strlen((char *)unaffectedRegister13);\n    pointer4 = DAT_0010b790;\n    if (_DAT_0010b798 < sizeVar * 9) {\n      free(DAT_0010b790);\n      sizeVar = strlen((char *)unaffectedRegister13);\n      _DAT_0010b798 = sizeVar * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      pointer4 = DAT_0010b790;\n    }\n    while( true ) {\n      pointer2 = DAT_0010b790;\n      byte1 = *(byte *)unaffectedRegister13;\n      pointer1 = (undefined8 *)((long)unaffectedRegister13 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)pointer4 = byte1;\n          pointer4 = (undefined8 *)((long)pointer4 + 1);\n          unaffectedRegister13 = pointer1;\n        }\n        else {\n          byte2 = *(byte *)((long)unaffectedRegister13 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            pointer2 = pointer4;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar = isatty(1);\n                if (intVar == 0) {\n                  byte2 = *(byte *)((long)unaffectedRegister13 + 1);\n                }\n                else {\n                  *(undefined *)(pointer4 + 1) = 0;\n                  *pointer4 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)unaffectedRegister13 + 1);\n                  pointer2 = pointer4 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                sprintf((char *)pointer2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)unaffectedRegister13 >> 2 & 7)\n                        ,(ulong)((*(byte *)unaffectedRegister13 & 3) << 6 | byte2 & 0x3f));\n                pointer2 = (undefined8 *)((long)pointer2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)unaffectedRegister13 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar = (ulong)uintVar; ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *(undefined *)pointer2 = *(undefined *)unaffectedRegister13;\n                    unaffectedRegister13 = (undefined8 *)((long)unaffectedRegister13 + (ulong)byteVar * -2 + 1);\n                    pointer2 = (undefined8 *)((long)pointer2 + (ulong)byteVar * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar = 3;\nLAB_00102917:\n                  ulongVar2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar2 = 0x3c;\n                  }\n                  sprintf((char *)pointer4,\"%c\",ulongVar2);\n                  *(undefined *)((long)pointer4 + 3) = 0;\n                  pointer2 = (undefined8 *)(longVar + (long)unaffectedRegister13);\n                  *(undefined2 *)((long)pointer4 + 1) = 0x7830;\n                  stringPointer2 = (char *)((long)pointer4 + 3);\n                  do {\n                    stringPointer3 = stringPointer2;\n                    byte1 = *(byte *)unaffectedRegister13;\n                    unaffectedRegister13 = (undefined8 *)((long)unaffectedRegister13 + 1);\n                    sprintf(stringPointer3,\"%02x\",(ulong)byte1);\n                    stringPointer2 = stringPointer3 + 2;\n                  } while (unaffectedRegister13 != pointer2);\n                  ulongVar2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar2 = 0x3e;\n                  }\n                  uintVar = (uint)longVar;\n                  sprintf(stringPointer3 + 2,\"%c\",ulongVar2);\n                  pointer2 = (undefined8 *)(stringPointer3 + 3);\n                  break;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)unaffectedRegister13 + 2);\n                  }\n                  else {\n                    *(undefined *)(pointer4 + 1) = 0;\n                    *pointer4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)unaffectedRegister13 + 2);\n                    pointer2 = pointer4 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  sprintf((char *)pointer2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)unaffectedRegister13 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)unaffectedRegister13 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)unaffectedRegister13 + 1) & 3) << 6 | byte2 & 0x3f));\n                  pointer2 = (undefined8 *)((long)pointer2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (intVar = isatty(1), intVar != 0)) {\n                    *(undefined4 *)pointer2 = 0x6d305b1b;\n                    pointer2 = (undefined8 *)((long)pointer2 + 4);\n                    *(undefined *)pointer2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)unaffectedRegister13 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar != 0) {\n                    *(undefined *)(pointer4 + 1) = 0;\n                    *pointer4 = 0x6d37343b31335b1b;\n                    pointer2 = pointer4 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  intVar = sprintf((char *)pointer2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)unaffectedRegister13 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)unaffectedRegister13 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)unaffectedRegister13 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)unaffectedRegister13 + 2) >> 2 & 0xfU));\n                  pointer2 = (undefined8 *)((long)pointer2 + (long)intVar);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar = (ulong)(uint)((int)pointer2 - (int)pointer4);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)pointer4 = byte1;\n            uintVar = 1;\n            ulongVar = 1;\n          }\n          pointer4 = (undefined8 *)((long)pointer4 + ulongVar);\n          unaffectedRegister13 = (undefined8 *)((long)pointer1 + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)pointer4 = 0x5e;\n        *(byte *)((long)pointer4 + 1) = byte1 + 0x40;\n        pointer4 = (undefined8 *)((long)pointer4 + 2);\n        unaffectedRegister13 = pointer1;\n      }\n    }\n    *(undefined *)pointer4 = 0;\n    unaffectedRegister13 = pointer2;\n  }\n  else {\n    *stringPointer1 = '\\0';\n    if (DAT_0010b814 == 0) {\n      if (DAT_0010b7e0 == 0) goto LAB_00104794;\n      resultPointer = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)unaffectedRegister13 == '\\0') ||\n       (pointer4 = (undefined8 *)bfd_demangle(), pointer4 == (undefined8 *)0x0)) {\n      if (DAT_0010b7e0 != 0) goto LAB_00102698;\n      resultPointer = (undefined8 *)0x0;\n    }\n    else {\n      unaffectedRegister13 = pointer4;\n      resultPointer = pointer4;\n      if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((unaffectedRegisterBP != 0) && (*(long *)(unaffectedRegisterBP + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((stringPointer2 = (char *)(**(code **)(*(long *)(unaffectedRegister15 + 8) + 0x220))\n                                  (unaffectedRegister15,*(long *)(unaffectedRegisterBP + 0x10),0,\n                                   (long)&stack0x00000038 + 7), stringPointer2 != (char *)0x0 &&\n      (*stringPointer2 != '\\0')))) {\n    pointer3 = &DAT_001071e0;\n    if ((stackVariable._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(unaffectedRegisterBP + 0x10) + 0x20) != 0x10c2a8)) {\n      pointer3 = &DAT_001071df;\n    }\n    resultPointer = (undefined8 *)reconcat(resultPointer,unaffectedRegister13,pointer3,stringPointer2,0);\n    unaffectedRegister13 = resultPointer;\n  }\n  printf(unaffectedRegister14,unaffectedRegister13);\n  if (stringPointer1 != (char *)0x0) {\n    *stringPointer1 = '@';\n  }\nLAB_001047ba:\n  free(resultPointer);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001047d0",
                "FUN_0010268b",
                "bfd_demangle",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "FUN_00104740"
            ],
            "imported": false,
            "current_name": "print_formatted_string_00102739"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "compare_binary_files_00105050",
                "param_1": "file1",
                "param_2": "file2",
                "__s": "str1",
                "__s_00": "str2",
                "lVar3": "str1_len",
                "uVar2": "str2_len",
                "sVar5": "str1_len",
                "sVar6": "str2_len",
                "pcVar7": "str1_match",
                "pcVar8": "str2_match",
                "lVar9": "file1_metadata",
                "lVar10": "file2_metadata",
                "uVar11": "result",
                "uVar12": "file2_metadata_size",
                "uVar13": "file1_metadata_size",
                "uVar14": "file1_length",
                "uVar15": "compilation_mode",
                "unaff_R13": "file2_metadata",
                "bVar16": "is_equal"
            },
            "code": "\nulong compareBinaryFiles_00105050(undefined8 file1,undefined8 file2)\n\n{\n  char cVar1;\n  ulong str2_len;\n  char *str1;\n  char *str2;\n  long str1_len;\n  uint uVar4;\n  size_t str1_len;\n  size_t str2_len;\n  char *str1_match;\n  char *str2_match;\n  long file1_metadata;\n  long file2_metadata;\n  ulong result;\n  ulong file2_metadata_size;\n  ulong file1_metadata_size;\n  ulong file1_length;\n  undefined8 compilation_mode;\n  long file2_metadata;\n  bool is_equal;\n  \n  file1_metadata = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file1,DAT_0010b770);\n  result = (ulong)DAT_0010b778;\n  file2_metadata = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,result,file2,DAT_0010b768);\n  if ((file1_metadata != 0) && (file2_metadata != 0)) {\n    str1_len = *(long *)(file2_metadata + 0x20);\n    if (*(long *)(file1_metadata + 0x20) == 0x10c2a8) {\n      result = 0xffffffff;\n      if (str1_len == 0x10c2a8) {\nLAB_001050fa:\n        result = FUN_00104fa0(file1,file2);\n        return result;\n      }\n    }\n    else if (str1_len == 0x10c2a8) {\n      result = 1;\n    }\n    else {\n      file1_metadata_size = *(long *)(file1_metadata + 0x10) + *(long *)(*(long *)(file1_metadata + 0x20) + 0x30);\n      result = *(long *)(file2_metadata + 0x10) + *(long *)(str1_len + 0x30);\n      if (file1_metadata_size == result) goto LAB_001050fa;\n      result = (ulong)(-(uint)(file1_metadata_size < result) | 1);\n    }\n    return result;\n  }\n  compilation_mode = *DAT_0010b780;\n  FUN_00106530();\n  file1_metadata = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,compilation_mode,DAT_0010b770);\n  file2_metadata = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,result,DAT_0010b768);\n  if ((file1_metadata == 0) || (file2_metadata = file2_metadata, file2_metadata == 0)) {\n    file2_metadata = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(file1_metadata + 0x20) == 0x10c2a8) || (*(long *)(file2_metadata + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  file1_metadata_size = *(ulong *)(*(long *)(file1_metadata + 0x20) + 0x30);\n  str2_len = *(ulong *)(*(long *)(file2_metadata + 0x20) + 0x30);\n  file1_length = *(long *)(file1_metadata + 0x10) + file1_metadata_size;\n  file2_metadata_size = *(long *)(file2_metadata + 0x10) + str2_len;\n  is_equal = file1_length < file2_metadata_size;\n  if ((file1_length != file2_metadata_size) || (is_equal = file1_metadata_size < str2_len, file1_metadata_size != str2_len)) {\n    return (ulong)(-(uint)is_equal | 1);\n  }\n  str1 = *(char **)(file1_metadata + 8);\n  str2 = *(char **)(file2_metadata + 8);\n  str1_len = strlen(str1);\n  str2_len = strlen(str2);\n  str1_match = strstr(str1,\"gnu_compiled\");\n  if (str1_match == (char *)0x0) {\n    str2_match = strstr(str1,\"gcc2_compiled\");\n    str1_match = strstr(str2,\"gnu_compiled\");\n    if ((str1_match == (char *)0x0) && (str1_match = strstr(str2,\"gcc2_compiled\"), str1_match == (char *)0x0))\n    goto joined_r0x00103157;\n    if (str2_match == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    str1_match = strstr(str2,\"gnu_compiled\");\n    if (str1_match == (char *)0x0) {\n      str2_match = strstr(str2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (str2_match != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uVar4 = *(uint *)(file2_metadata + 0x18) & 0x4000;\n  if ((*(byte *)(file1_metadata + 0x19) & 0x40) == 0) {\n    if ((str1_len < 3) || (str1[str1_len - 2] != '.')) {\n      if (uVar4 != 0) {\n        return 1;\n      }\n      if ((str2_len < 3) || (str2[str2_len - 2] != '.')) goto LAB_00103202;\n      is_equal = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = str1[str1_len - 1];\n    is_equal = cVar1 == 'o' || cVar1 == 'a';\n    if (uVar4 == 0) {\n      if ((str2_len < 3) || (str2[str2_len - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (uVar4 != 0) goto LAB_00103202;\n    if (str2_len < 3) {\n      return 0xffffffff;\n    }\n    if (str2[str2_len - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_equal = true;\nLAB_001031e7:\n    if ((str2[str2_len - 1] != 'o') && (str2[str2_len - 1] != 'a')) {\n      if (is_equal) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_equal) {\n    return 1;\n  }\nLAB_00103202:\n  result = FUN_00104fa0(compilation_mode,result);\n  return result;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "FUN_00102fc3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "FUN_00103bec"
            ],
            "imported": false,
            "current_name": "compare_binary_files_00105050"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "process_lto_object_001049c0",
                "pcVar1": "pluginName",
                "pcVar2": "compareFunction",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "boolVar",
                "uVar6": "ulongVar",
                "lVar7": "longVar",
                "puVar8": "ptrVar1",
                "lVar9": "longVar2",
                "puVar10": "ptrVar2",
                "unaff_RBX": "registerBX",
                "unaff_RBP": "registerBP",
                "puVar11": "ptrVar3",
                "puVar12": "ptrVar4",
                "puVar13": "ptrVar5",
                "in_R8": "registerR8",
                "puVar14": "ptrVar6",
                "puVar15": "ptrVar7",
                "unaff_R12": "registerR12",
                "unaff_R13": "registerR13",
                "unaff_R14": "registerR14",
                "unaff_R15": "registerR15",
                "bVar16": "boolVar2",
                "bVar17": "byteVar",
                "unaff_retaddr": "returnAddress",
                "uVar18": "ulongVar2",
                "in_stack_00000008": "stackVar1",
                "in_stack_00000010": "stackVar2",
                "in_stack_00000018": "stackVar3",
                "in_stack_00000038": "stackVar4",
                "in_stack_00000040": "stackVar5",
                "in_stack_00000048": "stackVar6"
            },
            "code": "\nvoid processLTOObject_001049c0(void)\n\n{\n  char *pluginName;\n  code *compareFunction;\n  char charVar;\n  int intVar;\n  uint boolVar;\n  undefined8 ulongVar;\n  long longVar;\n  undefined8 *ptrVar1;\n  long longVar2;\n  undefined8 *ptrVar2;\n  undefined8 *registerBX;\n  undefined8 *__ptr;\n  undefined8 *registerBP;\n  undefined8 *ptrVar3;\n  undefined8 *ptrVar4;\n  undefined8 *registerR8;\n  undefined8 *ptrVar5;\n  undefined8 *in_R9;\n  undefined8 *ptrVar6;\n  undefined8 *ptrVar7;\n  undefined8 *registerR12;\n  undefined8 *registerR13;\n  undefined8 *registerR14;\n  undefined8 *registerR15;\n  bool boolVar2;\n  byte byteVar;\n  ulong returnAddress;\n  ulong ulongVar2;\n  undefined8 stackVar1;\n  undefined8 *stackVar2;\n  undefined8 *stackVar3;\n  undefined8 stackVar4;\n  void *stackVar5;\n  undefined8 *stackVar6;\n  \n  byteVar = 0;\n  do {\n    registerBX = (undefined8 *)((long)registerBX + (long)registerR14);\nLAB_001049c3:\n    do {\n      do {\n        registerR13 = (undefined8 *)((long)registerR13 + (long)registerR14);\n        ptrVar7 = registerR12;\n        ptrVar4 = registerBP;\n        if (registerR12 <= registerR13) goto LAB_00104b15;\nLAB_001049cf:\n        ptrVar1 = (undefined8 *)\n                 (**(code **)(registerBP[1] + 0x270))\n                           (registerBP,returnAddress & 0xffffffff,registerR13,registerR15);\n        ptrVar3 = registerBP;\n        ptrVar4 = registerR13;\n        ptrVar7 = registerR15;\n        if (ptrVar1 == (undefined8 *)0x0) goto LAB_00102eb0;\n        pluginName = (char *)ptrVar1[1];\n        if (((pluginName == (char *)0x0) || (*pluginName != '_')) || (pluginName[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          boolVar = (uint)(ptrVar1[4] == 0x10c2a8);\nLAB_00104af9:\n          if (boolVar != 0) goto LAB_00104a2d;\n          registerR13 = (undefined8 *)((long)registerR13 + (long)registerR14);\n          ptrVar7 = registerR12;\n          ptrVar4 = registerBP;\n          if (registerR12 <= registerR13) {\nLAB_00104b15:\n            registerBX = (undefined8 *)((long)registerBX - (long)stackVar3);\n            if (registerR14 == (undefined8 *)0x8) {\n              longVar2 = ptrVar4[1];\n              ptrVar3 = (undefined8 *)((long)registerBX + 7);\n              if (-1 < (long)registerBX) {\n                ptrVar3 = registerBX;\n              }\n              registerR8 = (undefined8 *)(ulong)DAT_0010b800;\n              compareFunction = *(code **)(longVar2 + 0x208);\n              ptrVar3 = (undefined8 *)((long)ptrVar3 >> 3);\n            }\n            else {\n              ptrVar3 = (undefined8 *)((long)registerBX / (long)registerR14);\n              longVar2 = ptrVar4[1];\n              compareFunction = *(code **)(longVar2 + 0x208);\n            }\n            registerBP = ptrVar4;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = ptrVar4;\n              DAT_0010b770 = (undefined8 *)(*compareFunction)(ptrVar4);\n              DAT_0010b768 = (undefined8 *)(**(code **)(ptrVar4[1] + 0x208))(ptrVar4);\n              registerBX = stackVar6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                FUN_00106530(*ptrVar4);\n                __ptr = registerR15;\n                goto LAB_00102d8e;\n              }\n              registerR12 = (undefined8 *)(ulong)stackVar4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulongVar2 = (ulong)(DAT_0010b80c != 0);\n                qsort(stackVar6,(size_t)ptrVar3,(size_t)registerR12,FUN_00102fd2);\n                ptrVar7 = (undefined8 *)xmalloc((long)ptrVar3 << 4);\n                ptrVar5 = DAT_0010b770;\n                registerBP = DAT_0010b768;\n                registerR14 = (undefined8 *)((long)ptrVar3 * (long)registerR12 + (long)registerBX);\n                ptrVar1 = DAT_0010b770;\n                in_R9 = DAT_0010b768;\n                if (registerR14 <= registerBX) goto LAB_00102ec2;\n                ptrVar3 = (undefined8 *)\n                          (**(code **)(ptrVar4[1] + 0x270))(ptrVar4,ulongVar2 & 0xffffffff,registerBX);\n                __ptr = registerBX;\n                registerR8 = registerR12;\n                stackVar2 = ptrVar7;\n                if (ptrVar3 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stackVar6,(size_t)ptrVar3,(size_t)registerR12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVar2 = ptrVar4[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              ptrVar4 = stackVar6;\n              ptrVar1 = (undefined8 *)(ulong)DAT_0010b7f8;\n              registerR14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                ptrVar7 = (undefined8 *)(**(code **)(longVar2 + 0x208))(registerBP);\n                if (ptrVar7 == (undefined8 *)0x0) goto LAB_00102ed2;\n                registerBX = __ptr + (long)ptrVar3 * 2;\n                ptrVar3 = __ptr;\n                do {\n                  if (registerBX <= ptrVar3) {\nLAB_00104c75:\n                    if (stackVar5 == (void *)0x0) {\n                      free(stackVar6);\n                      free(__ptr);\n                      return;\n                    }\n                    free(stackVar5);\n                    free(stackVar6);\n                    free(__ptr);\n                    return;\n                  }\n                  ptrVar1 = ptrVar7;\n                  longVar2 = (**(code **)(registerBP[1] + 0x270))(registerBP,registerR14,*ptrVar3);\n                  if (longVar2 == 0) {\n                    FUN_00106530(*registerBP,0);\nLAB_00102ed2:\n                    ptrVar4 = (undefined8 *)*registerBP;\n                    FUN_00106530();\n                    ptrVar5 = registerR8;\n                    ptrVar6 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  ptrVar4 = ptrVar3 + 1;\n                  ptrVar3 = ptrVar3 + 2;\n                  FUN_00105110(registerBP,longVar2,*ptrVar4,stackVar1);\n                } while( true );\n              }\n              registerR12 = (undefined8 *)(ulong)stackVar4._4_4_;\n              registerR15 = (undefined8 *)(**(code **)(longVar2 + 0x208))(registerBP);\n              if (registerR15 == (undefined8 *)0x0) {\n                FUN_00106530(*registerBP);\n                ptrVar4 = registerR12;\n                if (DAT_0010b80c == 0) {\n                  longVar2 = (**(code **)(registerBP[1] + 0x350))(registerBP);\n                  ptrVar3 = stackVar6;\n                  ptrVar7 = registerR12;\n                  if (longVar2 < 1) {\n                    ptrVar1 = (undefined8 *)0x0;\n                    registerBX = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    registerBX = (undefined8 *)xmalloc();\n                    ptrVar1 = (undefined8 *)(**(code **)(registerBP[1] + 0x358))(registerBP,registerBX);\n                    ptrVar4 = ptrVar7;\n                    if ((long)ptrVar1 < 0) {\n                      ptrVar4 = (undefined8 *)*registerBP;\n                      ptrVar3 = (undefined8 *)FUN_00106530(ptrVar4,ptrVar7);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  ptrVar1 = registerR12;\n                  registerBX = stackVar6;\n                  ptrVar3 = (undefined8 *)0x0;\n                  ptrVar7 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                registerR8 = registerBX;\n                longVar2 = (**(code **)(registerBP[1] + 0x360))(registerBP,ptrVar7,ptrVar3,ptrVar1);\n                registerR12 = ptrVar4;\n                if (0 < longVar2) {\n                  registerR12 = (undefined8 *)((long)ptrVar4 + longVar2);\n                  stackVar6 = (undefined8 *)xrealloc(stackVar6);\n                  longVar = 0;\n                  do {\n                    stackVar6[(long)((long)ptrVar4 + longVar)] =\n                         (void *)(longVar * 0x30 + (long)stackVar5);\n                    longVar = longVar + 1;\n                  } while (longVar2 != longVar);\n                  stackVar6[(long)((long)ptrVar4 + longVar2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (registerBX != (undefined8 *)0x0)) {\n                  free(registerBX);\n                }\n                if ((*(byte *)((long)registerBP + 0x4a) & 0x10) != 0) {\n                  registerBX = (undefined8 *)*registerBP;\n                  DAT_0010b230 = '\\0';\n                  ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(ulongVar);\n                }\n                registerR14 = (undefined8 *)(ulong)stackVar4._4_4_;\n                boolVar2 = DAT_0010b80c != 0;\n                ptrVar3 = (undefined8 *)(ulong)boolVar2;\n                ptrVar1 = stackVar6;\n                stackVar3 = stackVar6;\n                registerR15 = (undefined8 *)(**(code **)(registerBP[1] + 0x208))(registerBP);\n                if (registerR15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                ptrVar3 = (undefined8 *)((long)ptrVar3 * (long)registerR12 + (long)ptrVar4);\n                registerBX = ptrVar4;\n                while( true ) {\n                  if (ptrVar3 <= registerBX) goto LAB_00104c75;\n                  ptrVar1 = registerR15;\n                  longVar2 = (**(code **)(registerBP[1] + 0x270))(registerBP,registerR14,registerBX);\n                  if (longVar2 == 0) break;\n                  registerBX = (undefined8 *)((long)registerBX + (long)registerR12);\n                  FUN_00105110(registerBP,longVar2,0,stackVar1);\n                }\n                FUN_00106530(*registerBP,0);\n              }\n              FUN_00106530(*registerBP);\n              ptrVar4 = registerBP;\n              ptrVar7 = registerR15;\nLAB_00102eb0:\n              FUN_00106530(*ptrVar3);\nLAB_00102eb9:\n              FUN_00106530(*ptrVar4);\nLAB_00102ec2:\n              ptrVar3 = (undefined8 *)0x0;\n              __ptr = registerBX;\n              registerR8 = registerR12;\n              ptrVar5 = ptrVar1;\n              registerBP = in_R9;\n              stackVar2 = ptrVar7;\nLAB_00104e35:\n              while (in_R9 = ptrVar5, __ptr < registerR14) {\n                registerBX = (undefined8 *)((long)__ptr + (long)registerR8);\n                if (registerBX < registerR14) {\n                  ptrVar1 = registerBP;\n                  ptrVar5 = registerR8;\n                  ptrVar6 = in_R9;\n                  ptrVar2 = (undefined8 *)(**(code **)(ptrVar4[1] + 0x270))();\n                  if (ptrVar2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = ptrVar6;\n                    registerR8 = ptrVar5;\n                    ptrVar4 = (undefined8 *)*ptrVar4;\n                    ptrVar2 = (undefined8 *)FUN_00106530();\n                  }\n                  else {\n                    ptrVar1 = (undefined8 *)ptrVar3[4];\n                    if ((*(uint *)(ptrVar3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar2 = ptrVar3[2];\nLAB_00102ee7:\n                  if (ptrVar1 == (undefined8 *)ptrVar2[4]) {\n                    longVar2 = ptrVar2[2] - longVar2;\n                    ptrVar5 = registerBP;\n                    ptrVar6 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar2 = ptrVar1[8] - longVar2;\n                  ptrVar5 = registerBP;\n                  ptrVar6 = __ptr;\n                }\n                else {\n                  ptrVar1 = (undefined8 *)ptrVar3[4];\n                  if ((*(uint *)(ptrVar3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar2 = ptrVar3[2];\n                    ptrVar2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  ptrVar2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  ptrVar5 = registerBP;\n                  ptrVar6 = __ptr;\n                  if (*(int *)(ptrVar4[1] + 8) == 5) {\n                    longVar2 = ptrVar3[7];\n                  }\n                  else {\n                    longVar2 = ptrVar3[2];\n                    if ((*(byte *)((long)ptrVar1 + 0x25) & 0x10) == 0) {\n                      if (registerBX < registerR14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                ptrVar3 = ptrVar2;\n                __ptr = registerBX;\n                registerBP = in_R9;\n                if (longVar2 != 0) {\n                  *ptrVar7 = ptrVar6;\n                  ptrVar7[1] = longVar2;\n                  ptrVar7 = ptrVar7 + 2;\n                }\n              }\n              ptrVar3 = (undefined8 *)((long)ptrVar7 - (long)stackVar2 >> 4);\n              qsort(stackVar2,(size_t)ptrVar3,0x10,FUN_00103533);\n              longVar2 = ptrVar4[1];\n              registerBX = __ptr;\n              registerBP = ptrVar4;\n              __ptr = stackVar2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVar = strcmp(pluginName + (pluginName[2] == '_'),\"__gnu_lto_slim\");\n        stackVar2 = ptrVar1;\n        if (intVar == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stackVar2 = (undefined8 *)*registerBP;\n            DAT_0010b230 = '\\0';\n            ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            FUN_00106400(ulongVar,stackVar2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          boolVar = (*(uint *)(ptrVar1 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(ptrVar1 + 3) & 0x800082) == 0) && (ptrVar1[4] != 0x10c2a8)) &&\n           ((*(byte *)(ptrVar1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n          if ((ptrVar1[4] != 0x10c2a8) && (ptrVar1[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(ptrVar1 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        charVar = (**(code **)(registerBP[1] + 0x230))(registerBP);\n        if (charVar != '\\0') {\n          FUN_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (ptrVar1[4] == 0x10c2a8);\nLAB_00104cba:\n    charVar = (**(code **)(registerBP[1] + 0x230))(registerBP);\n    if (charVar != '\\0') {\n      FUN_00102c19();\n      return;\n    }\nLAB_00104a7b:\n    if (registerBX != registerR13) {\n      if (registerR14 == (undefined8 *)0x8) {\n        *registerBX = *registerR13;\n        processLTOObject_001049c0();\n        return;\n      }\n      for (; registerR14 != (undefined8 *)0x0; registerR14 = (undefined8 *)((long)registerR14 + -1)) {\n        *(undefined *)registerBX = *(undefined *)registerR13;\n        registerR13 = (undefined8 *)((long)registerR13 + (ulong)byteVar * -2 + 1);\n        registerBX = (undefined8 *)((long)registerBX + (ulong)byteVar * -2 + 1);\n      }\n      processLTOObject_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  ptrVar7 = (undefined8 *)((long)registerR12 * (long)registerR14);\n  registerR12 = (undefined8 *)((long)stackVar3 + (long)ptrVar7);\n  registerBX = stackVar3;\n  ptrVar4 = registerBP;\n  if (stackVar3 < registerR12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  returnAddress = (ulong)boolVar2;\n  registerR13 = stackVar3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_object_001049c0"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "print_symbol_information_00103ca0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "targetName",
                "iVar2": "totalCharsPrinted",
                "iVar3": "charsPrinted",
                "pcVar4": "text",
                "lVar5": "currentIndex",
                "sVar6": "textSize",
                "__ptr": "targetList",
                "plVar7": "currentTarget",
                "ppcVar8": "demangler",
                "pcVar9": "delimiter",
                "local_3c": "spacesCount"
            },
            "code": "\nvoid printSymbolInformation_00103ca0(FILE *outputFile,int exitCode)\n\n{\n  long targetName;\n  int totalCharsPrinted;\n  int charsPrinted;\n  char *text;\n  long currentIndex;\n  size_t textSize;\n  long *targetList;\n  long *currentTarget;\n  char **demangler;\n  char *delimiter;\n  uint spacesCount;\n  \n  targetName = DAT_0010b820;\n  text = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,text,targetName);\n  text = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*text == ' ') {\n    targetName = 1;\n    do {\n      currentIndex = targetName;\n      targetName = currentIndex + 1;\n    } while (text[currentIndex] == ' ');\n    spacesCount = (uint)currentIndex;\n  }\n  else {\n    spacesCount = 0;\n  }\n  totalCharsPrinted = fprintf(outputFile,\"%s\",text);\n  delimiter = \"\";\n  for (demangler = (char **)&libiberty_demanglers; *demangler != (char *)0x0; demangler = demangler + 3) {\n    textSize = strlen(*demangler);\n    if (0x4a < (long)totalCharsPrinted + textSize) {\n      fprintf(outputFile,\"%.1s\\n\",delimiter);\n      delimiter = \"\";\n      totalCharsPrinted = fprintf(outputFile,\"%.*s\",(ulong)spacesCount,text);\n    }\n    charsPrinted = fprintf(outputFile,\"%s\\\"%s\\\"\",delimiter,*demangler);\n    totalCharsPrinted = totalCharsPrinted + charsPrinted;\n    delimiter = \", \";\n  }\n  fputc(10,outputFile);\n  text = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(outputFile,text);\n  targetName = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    text = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,text);\n  }\n  else {\n    text = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,text,targetName);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    targetName = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (targetName == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "bfd_target_list",
                "exit",
                "fseek",
                "dcgettext",
                "free",
                "fputc",
                "fprintf",
                "strlen",
                "FUN_00102450"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "print_symbol_information_00103ca0"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "optimized_function_00104d5b",
                "pcVar1": "pointer1",
                "pcVar2": "pointer2",
                "cVar3": "character",
                "iVar4": "integer1",
                "uVar5": "unsignedVariable1",
                "uVar6": "unsignedVariable2",
                "puVar7": "pointer3",
                "lVar8": "longVariable1",
                "lVar9": "longVariable2",
                "puVar10": "pointer4",
                "in_RCX": "inputPointer",
                "unaff_RBX": "unaffectedPointer1",
                "__ptr": "tempPointer",
                "puVar11": "pointer5",
                "unaff_RBP": "unaffectedPointer2",
                "puVar12": "pointer6",
                "unaff_R13": "unaffectedPointer3",
                "puVar13": "pointer7",
                "in_R8": "inputPointer2",
                "in_R9": "inputPointer3",
                "puVar14": "pointer8",
                "puVar15": "pointer9",
                "unaff_R12": "unaffectedPointer4",
                "unaff_R15": "unaffectedPointer5",
                "bVar16": "boolean1",
                "bVar17": "boolean2",
                "unaff_retaddr": "unaffectedPointer6",
                "uVar18": "unsignedVariable3",
                "param_7": "parameter1",
                "param_8": "parameter2",
                "param_9": "parameter3",
                "in_stack_00000038": "inputValue",
                "param_13": "parameter4",
                "param_14": "parameter5"
            },
            "code": "\nvoid optimizedFunction_00104d5b(void)\n\n{\n  char *pointer1;\n  code *pointer2;\n  char character;\n  int integer1;\n  uint unsignedVariable1;\n  undefined8 unsignedVariable2;\n  undefined8 *pointer3;\n  long longVariable1;\n  long longVariable2;\n  undefined8 *pointer4;\n  undefined8 *inputPointer;\n  undefined8 *unaffectedPointer1;\n  undefined8 *tempPointer;\n  undefined8 *pointer5;\n  undefined8 *unaffectedPointer2;\n  undefined8 *pointer6;\n  undefined8 *inputPointer2;\n  undefined8 *pointer7;\n  undefined8 *inputPointer3;\n  undefined8 *pointer8;\n  undefined8 *pointer9;\n  undefined8 *unaffectedPointer4;\n  undefined8 *unaffectedPointer3;\n  undefined8 *unaff_R14;\n  undefined8 *unaffectedPointer5;\n  bool boolean1;\n  byte boolean2;\n  ulong unaffectedPointer6;\n  ulong unsignedVariable3;\n  undefined8 parameter1;\n  undefined8 *parameter2;\n  undefined8 *parameter3;\n  undefined8 inputValue;\n  void *parameter4;\n  undefined8 *parameter5;\n  \n  boolean2 = 0;\n  do {\n    if ((inputPointer[4] != 0x10c2a8) && (inputPointer[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      unaffectedPointer3 = (undefined8 *)((long)unaffectedPointer3 + (long)unaff_R14);\n      pointer9 = unaffectedPointer4;\n      pointer6 = unaffectedPointer2;\n      if (unaffectedPointer4 <= unaffectedPointer3) goto LAB_00104b15;\nLAB_001049cf:\n      inputPointer = (undefined8 *)\n               (**(code **)(unaffectedPointer2[1] + 0x270))\n                         (unaffectedPointer2,unaffectedPointer6 & 0xffffffff,unaffectedPointer3,unaffectedPointer5);\n      pointer5 = unaffectedPointer2;\n      pointer6 = unaffectedPointer3;\n      pointer9 = unaffectedPointer5;\n      if (inputPointer == (undefined8 *)0x0) goto LAB_00102eb0;\n      pointer1 = (char *)inputPointer[1];\n      if (((pointer1 == (char *)0x0) || (*pointer1 != '_')) || (pointer1[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        unsignedVariable1 = (uint)(inputPointer[4] == 0x10c2a8);\nLAB_00104af9:\n        if (unsignedVariable1 != 0) goto LAB_00104a2d;\n        unaffectedPointer3 = (undefined8 *)((long)unaffectedPointer3 + (long)unaff_R14);\n        pointer9 = unaffectedPointer4;\n        pointer6 = unaffectedPointer2;\n        if (unaffectedPointer4 <= unaffectedPointer3) {\nLAB_00104b15:\n          unaffectedPointer1 = (undefined8 *)((long)unaffectedPointer1 - (long)parameter3);\n          if (unaff_R14 == (undefined8 *)0x8) {\n            longVariable2 = pointer6[1];\n            pointer5 = (undefined8 *)((long)unaffectedPointer1 + 7);\n            if (-1 < (long)unaffectedPointer1) {\n              pointer5 = unaffectedPointer1;\n            }\n            inputPointer2 = (undefined8 *)(ulong)DAT_0010b800;\n            pointer2 = *(code **)(longVariable2 + 0x208);\n            pointer5 = (undefined8 *)((long)pointer5 >> 3);\n          }\n          else {\n            pointer5 = (undefined8 *)((long)unaffectedPointer1 / (long)unaff_R14);\n            longVariable2 = pointer6[1];\n            pointer2 = *(code **)(longVariable2 + 0x208);\n          }\n          unaffectedPointer2 = pointer6;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = pointer6;\n            DAT_0010b770 = (undefined8 *)(*pointer2)(pointer6);\n            DAT_0010b768 = (undefined8 *)(**(code **)(pointer6[1] + 0x208))(pointer6);\n            unaffectedPointer1 = parameter5;\n            if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n              FUN_00106530(*pointer6);\n              tempPointer = unaffectedPointer5;\n              goto LAB_00102d8e;\n            }\n            unaffectedPointer4 = (undefined8 *)(ulong)inputValue._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              unsignedVariable3 = (ulong)(DAT_0010b80c != 0);\n              qsort(parameter5,(size_t)pointer5,(size_t)unaffectedPointer4,FUN_00102fd2);\n              pointer9 = (undefined8 *)xmalloc((long)pointer5 << 4);\n              pointer7 = DAT_0010b770;\n              unaffectedPointer2 = DAT_0010b768;\n              unaff_R14 = (undefined8 *)((long)pointer5 * (long)unaffectedPointer4 + (long)unaffectedPointer1);\n              inputPointer = DAT_0010b770;\n              inputPointer3 = DAT_0010b768;\n              if (unaff_R14 <= unaffectedPointer1) goto LAB_00102ec2;\n              pointer5 = (undefined8 *)\n                        (**(code **)(pointer6[1] + 0x270))(pointer6,unsignedVariable3 & 0xffffffff,unaffectedPointer1);\n              tempPointer = unaffectedPointer1;\n              inputPointer2 = unaffectedPointer4;\n              parameter2 = pointer9;\n              if (pointer5 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(parameter5,(size_t)pointer5,(size_t)unaffectedPointer4,\n                  (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n            longVariable2 = pointer6[1];\n          }\n          tempPointer = (undefined8 *)0x0;\n          do {\n            pointer6 = parameter5;\n            pointer3 = (undefined8 *)(ulong)DAT_0010b7f8;\n            unaff_R14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              pointer9 = (undefined8 *)(**(code **)(longVariable2 + 0x208))(unaffectedPointer2);\n              if (pointer9 == (undefined8 *)0x0) goto LAB_00102ed2;\n              unaffectedPointer1 = tempPointer + (long)pointer5 * 2;\n              pointer5 = tempPointer;\n              do {\n                if (unaffectedPointer1 <= pointer5) {\nLAB_00104c75:\n                  if (parameter4 != (void *)0x0) {\n                    free(parameter4);\n                    free(parameter5);\n                    free(tempPointer);\n                    return;\n                  }\n                  free(parameter5);\n                  free(tempPointer);\n                  return;\n                }\n                pointer3 = pointer9;\n                longVariable2 = (**(code **)(unaffectedPointer2[1] + 0x270))(unaffectedPointer2,unaff_R14,*pointer5);\n                if (longVariable2 == 0) {\n                  FUN_00106530(*unaffectedPointer2,0);\nLAB_00102ed2:\n                  pointer6 = (undefined8 *)*unaffectedPointer2;\n                  FUN_00106530();\n                  pointer7 = inputPointer2;\n                  pointer8 = inputPointer3;\n                  goto LAB_00102edb;\n                }\n                pointer6 = pointer5 + 1;\n                pointer5 = pointer5 + 2;\n                FUN_00105110(unaffectedPointer2,longVariable2,*pointer6,parameter1);\n              } while( true );\n            }\n            unaffectedPointer4 = (undefined8 *)(ulong)inputValue._4_4_;\n            unaffectedPointer5 = (undefined8 *)(**(code **)(longVariable2 + 0x208))(unaffectedPointer2);\n            if (unaffectedPointer5 == (undefined8 *)0x0) {\n              FUN_00106530(*unaffectedPointer2);\n              pointer6 = unaffectedPointer4;\n              if (DAT_0010b80c == 0) {\n                longVariable2 = (**(code **)(unaffectedPointer2[1] + 0x350))(unaffectedPointer2);\n                pointer5 = parameter5;\n                pointer9 = unaffectedPointer4;\n                if (longVariable2 < 1) {\n                  pointer3 = (undefined8 *)0x0;\n                  unaffectedPointer1 = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  unaffectedPointer1 = (undefined8 *)xmalloc();\n                  pointer3 = (undefined8 *)(**(code **)(unaffectedPointer2[1] + 0x358))(unaffectedPointer2,unaffectedPointer1);\n                  pointer6 = pointer9;\n                  if ((long)pointer3 < 0) {\n                    pointer6 = (undefined8 *)*unaffectedPointer2;\n                    pointer5 = (undefined8 *)FUN_00106530(pointer6,pointer9);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                pointer3 = unaffectedPointer4;\n                unaffectedPointer1 = parameter5;\n                pointer5 = (undefined8 *)0x0;\n                pointer9 = (undefined8 *)0x0;\n              }\n              inputPointer3 = &stack0x00000040;\n              inputPointer2 = unaffectedPointer1;\n              longVariable2 = (**(code **)(unaffectedPointer2[1] + 0x360))(unaffectedPointer2,pointer9,pointer5,pointer3);\n              unaffectedPointer4 = pointer6;\n              if (0 < longVariable2) {\n                unaffectedPointer4 = (undefined8 *)((long)pointer6 + longVariable2);\n                parameter5 = (undefined8 *)xrealloc(parameter5);\n                longVariable1 = 0;\n                do {\n                  parameter5[(long)pointer6 + longVariable1] = (void *)(longVariable1 * 0x30 + (long)parameter4);\n                  longVariable1 = longVariable1 + 1;\n                } while (longVariable2 != longVariable1);\n                parameter5[(long)pointer6 + longVariable2] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (unaffectedPointer1 != (undefined8 *)0x0)) {\n                free(unaffectedPointer1);\n              }\n              if ((*(byte *)((long)unaffectedPointer2 + 0x4a) & 0x10) != 0) {\n                unaffectedPointer1 = (undefined8 *)*unaffectedPointer2;\n                DAT_0010b230 = '\\0';\n                unsignedVariable2 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                FUN_00106400(unsignedVariable2);\n              }\n              unaff_R14 = (undefined8 *)(ulong)inputValue._4_4_;\n              boolean1 = DAT_0010b80c != 0;\n              pointer5 = (undefined8 *)(ulong)boolean1;\n              inputPointer = parameter5;\n              parameter3 = parameter5;\n              unaffectedPointer5 = (undefined8 *)(**(code **)(unaffectedPointer2[1] + 0x208))(unaffectedPointer2);\n              if (unaffectedPointer5 != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              pointer5 = (undefined8 *)((long)pointer5 * (long)unaffectedPointer4 + (long)pointer6);\n              unaffectedPointer1 = pointer6;\n              while( true ) {\n                if (pointer5 <= unaffectedPointer1) goto LAB_00104c75;\n                inputPointer = unaffectedPointer5;\n                longVariable2 = (**(code **)(unaffectedPointer2[1] + 0x270))(unaffectedPointer2,unaff_R14,unaffectedPointer1);\n                if (longVariable2 == 0) break;\n                unaffectedPointer1 = (undefined8 *)((long)unaffectedPointer1 + (long)unaffectedPointer4);\n                FUN_00105110(unaffectedPointer2,longVariable2,0,parameter1);\n              }\n              FUN_00106530(*unaffectedPointer2,0);\n            }\n            FUN_00106530(*unaffectedPointer2);\n            pointer6 = unaffectedPointer2;\n            pointer9 = unaffectedPointer5;\nLAB_00102eb0:\n            FUN_00106530(*pointer5);\nLAB_00102eb9:\n            FUN_00106530(*pointer6);\nLAB_00102ec2:\n            pointer5 = (undefined8 *)0x0;\n            tempPointer = unaffectedPointer1;\n            inputPointer2 = unaffectedPointer4;\n            pointer7 = inputPointer;\n            unaffectedPointer2 = inputPointer3;\n            parameter2 = pointer9;\nLAB_00104e35:\n            while (inputPointer3 = pointer7, tempPointer < unaff_R14) {\n              unaffectedPointer1 = (undefined8 *)((long)tempPointer + (long)inputPointer2);\n              if (unaffectedPointer1 < unaff_R14) {\n                pointer3 = unaffectedPointer2;\n                pointer7 = inputPointer2;\n                pointer8 = inputPointer3;\n                pointer4 = (undefined8 *)(**(code **)(pointer6[1] + 0x270))();\n                if (pointer4 == (undefined8 *)0x0) {\nLAB_00102edb:\n                  inputPointer3 = pointer8;\n                  inputPointer2 = pointer7;\n                  pointer6 = (undefined8 *)*pointer6;\n                  pointer4 = (undefined8 *)FUN_00106530();\n                }\n                else {\n                  pointer3 = (undefined8 *)pointer5[4];\n                  if ((*(uint *)(pointer5 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                longVariable2 = pointer5[2];\nLAB_00102ee7:\n                if (pointer3 == (undefined8 *)pointer4[4]) {\n                  longVariable2 = pointer4[2] - longVariable2;\n                  pointer7 = unaffectedPointer2;\n                  pointer8 = tempPointer;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                longVariable2 = pointer3[8] - longVariable2;\n                pointer7 = unaffectedPointer2;\n                pointer8 = tempPointer;\n              }\n              else {\n                pointer3 = (undefined8 *)pointer5[4];\n                if ((*(uint *)(pointer5 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  longVariable2 = pointer5[2];\n                  pointer4 = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                pointer4 = (undefined8 *)0x0;\nLAB_00104e95:\n                pointer7 = unaffectedPointer2;\n                pointer8 = tempPointer;\n                if (*(int *)(pointer6[1] + 8) == 5) {\n                  longVariable2 = pointer5[7];\n                }\n                else {\n                  longVariable2 = pointer5[2];\n                  if ((*(byte *)((long)pointer3 + 0x25) & 0x10) == 0) {\n                    if (unaffectedPointer1 < unaff_R14) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              pointer5 = pointer4;\n              tempPointer = unaffectedPointer1;\n              unaffectedPointer2 = inputPointer3;\n              if (longVariable2 != 0) {\n                *pointer9 = pointer8;\n                pointer9[1] = longVariable2;\n                pointer9 = pointer9 + 2;\n              }\n            }\n            pointer5 = (undefined8 *)((long)pointer9 - (long)parameter2 >> 4);\n            qsort(parameter2,(size_t)pointer5,0x10,FUN_00103533);\n            longVariable2 = pointer6[1];\n            unaffectedPointer1 = tempPointer;\n            unaffectedPointer2 = pointer6;\n            tempPointer = parameter2;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      integer1 = strcmp(pointer1 + (pointer1[2] == '_'),\"__gnu_lto_slim\");\n      parameter2 = inputPointer;\n      if (integer1 == 0) {\n        if (DAT_0010b230 != '\\0') {\n          parameter2 = (undefined8 *)*unaffectedPointer2;\n          DAT_0010b230 = '\\0';\n          unsignedVariable2 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          FUN_00106400(unsignedVariable2,parameter2);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        unsignedVariable1 = (*(uint *)(inputPointer + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(inputPointer + 3) & 0x800082) == 0) && (inputPointer[4] != 0x10c2a8)) &&\n         ((*(byte *)(inputPointer[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byte *)(inputPointer + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  inputPointer3 = (undefined8 *)(ulong)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    character = (**(code **)(unaffectedPointer2[1] + 0x230))(unaffectedPointer2);\n    if (character != '\\0') {\n      FUN_00102c19();\n      return;\n    }\n  }\n  else {\n    if (inputPointer[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    character = (**(code **)(unaffectedPointer2[1] + 0x230))(unaffectedPointer2);\n    if (character != '\\0') {\n      FUN_00102c19();\n      return;\n    }\n  }\n  if (unaffectedPointer1 != unaffectedPointer3) {\n    if (unaff_R14 != (undefined8 *)0x8) {\n      for (; unaff_R14 != (undefined8 *)0x0; unaff_R14 = (undefined8 *)((long)unaff_R14 + -1)) {\n        *(undefined *)unaffectedPointer1 = *(undefined *)unaffectedPointer3;\n        unaffectedPointer3 = (undefined8 *)((long)unaffectedPointer3 + (ulong)boolean2 * -2 + 1);\n        unaffectedPointer1 = (undefined8 *)((long)unaffectedPointer1 + (ulong)boolean2 * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    *unaffectedPointer1 = *unaffectedPointer3;\n    FUN_001049c0();\n    return;\n  }\n  unaffectedPointer1 = (undefined8 *)((long)unaffectedPointer1 + (long)unaff_R14);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  pointer9 = (undefined8 *)((long)unaffectedPointer4 * (long)unaff_R14);\n  unaffectedPointer4 = (undefined8 *)((long)parameter3 + (long)pointer9);\n  unaffectedPointer1 = parameter3;\n  pointer6 = unaffectedPointer2;\n  if (parameter3 < unaffectedPointer4) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unaffectedPointer6 = (ulong)boolean1;\n  unaffectedPointer3 = parameter3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "qsort",
                "xmalloc",
                "free",
                "FUN_00106400",
                "FUN_00105110",
                "xrealloc",
                "FUN_00102fd2",
                "FUN_00103533",
                "strcmp",
                "dcgettext",
                "FUN_00104d5b",
                "FUN_00102c19",
                "FUN_001049c0",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "optimized_function_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_error_message_00106300",
                "param_1": "errorCode",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "__arg": "argArray",
                "__format": "formatString",
                "local_d8": "localVar1",
                "local_d4": "localVar2",
                "local_d0": "localVar3",
                "local_c8": "localVar4",
                "local_b8": "localArray",
                "local_b0": "localVar5",
                "local_a8": "localVar6",
                "local_a0": "localVar7",
                "local_98": "localVar8",
                "local_90": "localVar9",
                "local_88": "localVar10",
                "local_78": "localVar11",
                "local_68": "localVar12",
                "local_58": "localVar13",
                "local_48": "localVar14",
                "local_38": "localVar15",
                "local_28": "localVar16",
                "local_18": "localVar17",
                "_stdout": "outputStream",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printErrorMessage_00106300(undefined4 errorCode,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n                 undefined4 arg5,undefined4 arg6,undefined4 arg7,undefined4 arg8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 *argArray;\n  char *formatString;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localVar3;\n  undefined *localVar4;\n  undefined localArray [8];\n  undefined8 localVar5;\n  undefined8 localVar6;\n  undefined8 localVar7;\n  undefined8 localVar8;\n  undefined8 localVar9;\n  undefined4 localVar10;\n  undefined4 localVar11;\n  undefined4 localVar12;\n  undefined4 localVar13;\n  undefined4 localVar14;\n  undefined4 localVar15;\n  undefined4 localVar16;\n  undefined4 localVar17;\n  \n  argArray = &localVar1;\n  if (flag != '\\0') {\n    localVar10 = errorCode;\n    localVar11 = arg2;\n    localVar12 = arg3;\n    localVar13 = arg4;\n    localVar14 = arg5;\n    localVar15 = arg6;\n    localVar16 = arg7;\n    localVar17 = arg8;\n  }\n  localVar3 = &stack0x00000008;\n  localVar1 = 8;\n  localVar4 = localArray;\n  localVar2 = 0x30;\n  localVar5 = param10;\n  localVar6 = param11;\n  localVar7 = param12;\n  localVar8 = param13;\n  localVar9 = param14;\n  FUN_001063a0();\n  formatString = (char *)0x1;\n  xexit();\n  fflush(outputStream);\n  fprintf(errorStream,\"%s: \",DAT_0010b820);\n  vfprintf(errorStream,formatString,argArray);\n  putc(10,errorStream);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "FUN_0010370a",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_001053c0",
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "print_error_message_00106300"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_if_flag_set_00102f7b",
                "param_1": "message"
            },
            "code": "\n\n\nvoid print_if_flag_set_00102f7b(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_flag_set_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_00106540",
                "param_1": "errorType",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printError_00106540(long errorType)\n\n{\n  int bfdError;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(bfdError);\n  }\n  fflush(_stdout);\n  if (errorType != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,errorType,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_00103a78",
                "fflush",
                "bfd_get_error",
                "fprintf",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "FUN_001043d0",
                "FUN_00106530"
            ],
            "imported": false,
            "current_name": "print_error_00106540"
        }
    },
    "used_tokens": 96942,
    "layers": [
        [
            "FUN_00103c00",
            "FUN_0010370a",
            "FUN_00104370",
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00102fc3",
            "FUN_00103729",
            "FUN_00103573",
            "FUN_00105110",
            "FUN_00102fd2",
            "FUN_00102f9f",
            "FUN_00103a66",
            "FUN_001035a2",
            "FUN_00103463",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_001048e0",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_0010249f",
            "FUN_001043d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_00104fa0",
            "FUN_001064a0",
            "FUN_001054d0",
            "FUN_001053b0",
            "FUN_001055f0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00104740",
            "FUN_00106400",
            "FUN_00103533",
            "FUN_0010651a",
            "FUN_001053c0",
            "FUN_001064b0",
            "FUN_00103b49",
            "FUN_00103abf",
            "FUN_00103bf6",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_00106530",
            "FUN_0010268b",
            "FUN_00103bec",
            "FUN_001063a0",
            "FUN_00102739",
            "FUN_00105050",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00104d5b",
            "FUN_00106300",
            "FUN_00102f7b",
            "FUN_00106540"
        ]
    ],
    "locked_functions": []
}