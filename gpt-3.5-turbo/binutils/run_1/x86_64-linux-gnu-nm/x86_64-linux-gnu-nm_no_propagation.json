{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "*(code *)(undefined *)0x0": {
                    "2": "indirect_jump_function"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "2": "<new_variable_name_n>"
                },
                "FUN_00102020": {
                    "1": "execute_function_from_address",
                    "16": "execute_indirect_jump",
                    "3": "execute_function"
                },
                "PTR_00102020": {
                    "1": "ptr_to_function"
                },
                "code": {
                    "5": "function_pointer"
                },
                "undefined": {
                    "1": "indirect_function_pointer",
                    "2": "target_address",
                    "4": "function_address"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "function_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102450": {
            "additional_data": {
                "FUN_00102450": {
                    "1": "print_target_and_exit",
                    "29": "print_supported_targets"
                },
                "__ptr": {
                    "31": "target_list"
                },
                "dcgettext": {
                    "1": "get_translated_text"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "fputc": {
                    "1": "write_character"
                },
                "free": {
                    "1": "release_memory"
                },
                "in_stack_00000008": {
                    "1": "error_status",
                    "21": "exit_code",
                    "4": "exit_status"
                },
                "lVar1": {
                    "1": "target_code",
                    "2": "target_value",
                    "4": "current_target",
                    "5": "current_target_value"
                },
                "pcVar2": {
                    "1": "message_ptr",
                    "13": "message",
                    "2": "translation_string",
                    "3": "target_message"
                },
                "plVar3": {
                    "1": "current_target_ptr",
                    "21": "current_target",
                    "4": "target_pointer"
                },
                "unaff_RBX": {
                    "1": "file_ptr",
                    "29": "output_file"
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00103ca0"
            ],
            "code": "\nvoid print_supported_targets_00102450(void)\n\n{\n  long current_target_value;\n  char *message;\n  long *target_list;\n  FILE *output_file;\n  long *current_target;\n  int exit_code;\n  \n  message = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(output_file,message);\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target_value = *current_target;\n    current_target = current_target + 1;\n    if (current_target_value == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exit_code);\n}\n\n",
            "current_name": "print_supported_targets_00102450",
            "entrypoint": "0x00102450",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "__ptr": "target_list",
                "dcgettext": "get_translation",
                "fprintf": "write_to_file",
                "fputc": "write_character",
                "free": "release_memory",
                "in_stack_00000008": "exit_code",
                "lVar1": "current_target_value",
                "pcVar2": "message",
                "plVar3": "current_target",
                "unaff_RBX": "output_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010249f": {
            "additional_data": {
                "FUN_0010249f": {
                    "1": "print_file_warning",
                    "10": "display_warning_message",
                    "2": "print_not_ordinary_file_warning",
                    "7": "print_warning_message"
                },
                "FUN_00106400": {
                    "1": "display_message",
                    "2": "print_message"
                },
                "dcgettext": {
                    "1": "get_localized_message",
                    "2": "get_translated_message",
                    "3": "get_translated_string",
                    "4": "get_translated_text"
                },
                "param_1": {
                    "1": "arg1"
                },
                "param_2": {
                    "1": "arg2"
                },
                "param_3": {
                    "1": "arg3"
                },
                "param_4": {
                    "1": "arg4"
                },
                "uVar1": {
                    "1": "warning_string",
                    "2": "warning_msg",
                    "28": "warning_message"
                }
            },
            "called": [
                "FUN_00106400",
                "dcgettext"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nundefined8 display_warning_message_0010249f(void)\n\n{\n  undefined8 warning_message;\n  \n  warning_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  FUN_00106400(warning_message);\n  return 0;\n}\n\n",
            "current_name": "display_warning_message_0010249f",
            "entrypoint": "0x0010249f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010249f": "display_warning_message_0010249f",
                "dcgettext": "get_translated_text",
                "uVar1": "warning_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001025f5": {
            "additional_data": {
                "DAT_0010b7a0": {
                    "1": "result_string"
                },
                "FUN_001025f5": {
                    "1": "update_data_string",
                    "23": "concatenate_strings",
                    "3": "create_concatenated_string"
                },
                "concat": {
                    "1": "join_strings"
                },
                "param_1": {
                    "1": "input1",
                    "2": "unused",
                    "5": "input_string1",
                    "9": "string1"
                },
                "param_2": {
                    "1": "str2",
                    "2": "additional_string",
                    "4": "input_string",
                    "5": "input_string2",
                    "9": "string2"
                }
            },
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_00104670"
            ],
            "code": "\nvoid concatenate_strings_001025f5(undefined8 string1,undefined8 string2)\n\n{\n  DAT_0010b7a0 = concatenate_strings_001025f5(&DAT_001071d7,string2,&DAT_001071ca,0);\n  return;\n}\n\n",
            "current_name": "concatenate_strings_001025f5",
            "entrypoint": "0x001025f5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001025f5": "concatenate_strings_001025f5",
                "concat": "concatenate_strings",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102670": {
            "additional_data": {
                "FUN_00102670": {
                    "1": "print_if_data_present",
                    "6": "print_if_flag_set",
                    "7": "print_if_initialized"
                },
                "_DAT_0010b7c4": {
                    "1": "is_debug_enabled",
                    "2": "flag"
                },
                "param_1": {
                    "1": "statement",
                    "30": "message"
                },
                "printf": {
                    "1": "print_formatted_output"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\n\n\nvoid print_if_initialized_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_if_initialized_00102670",
            "entrypoint": "0x00102670",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102670": "print_if_initialized_00102670",
                "param_1": "message",
                "printf": "print_formatted_output"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010268b": {
            "additional_data": {
                "DAT_001071df": {
                    "1": "constant4"
                },
                "DAT_001071e0": {
                    "1": "constant3"
                },
                "DAT_0010b234": {
                    "1": "constant2"
                },
                "DAT_0010b790": {
                    "1": "dynamic_memory1"
                },
                "DAT_0010b7e0": {
                    "1": "constant1"
                },
                "FUNC_001047d0": {
                    "1": "initialize_character_table"
                },
                "FUN_0010268b": {
                    "1": "print_decompiled_binary",
                    "18": "print_encoded_string",
                    "2": "reverse_and_print_string",
                    "4": "print_decoded_string"
                },
                "_DAT_0010b798": {
                    "1": "output_string_size"
                },
                "__s": {
                    "1": "str2",
                    "2": "string_pointer",
                    "4": "temp_str",
                    "8": "temp_string"
                },
                "_sch_istable": {
                    "1": "table",
                    "3": "character_table"
                },
                "bVar15": {
                    "1": "loop_index",
                    "2": "is_escaped",
                    "4": "byte_var",
                    "5": "byte3",
                    "6": "flag"
                },
                "bVar2": {
                    "1": "current_char",
                    "10": "current_byte",
                    "14": "byte1",
                    "2": "byte_value"
                },
                "bVar3": {
                    "1": "byte_value2",
                    "10": "next_byte",
                    "15": "byte2",
                    "2": "byte_val2"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar4": {
                    "1": "flag_value",
                    "12": "is_terminal",
                    "2": "integer1",
                    "3": "is_tty",
                    "8": "result"
                },
                "in_stack_00000038": {
                    "1": "in_stack_variable",
                    "2": "extra_data",
                    "6": "stack_var"
                },
                "isatty": {
                    "1": "check_tty"
                },
                "lVar13": {
                    "1": "length_var",
                    "2": "length",
                    "4": "long_var",
                    "5": "loop_var"
                },
                "pcVar7": {
                    "1": "encoded_text",
                    "2": "str",
                    "3": "temp_string",
                    "4": "str_ptr"
                },
                "puVar1": {
                    "1": "output_ptr",
                    "11": "ptr",
                    "2": "pointer1",
                    "3": "current_char",
                    "5": "ptr1"
                },
                "puVar10": {
                    "1": "format_specifier",
                    "2": "special_char_ptr",
                    "4": "ptr3"
                },
                "puVar11": {
                    "1": "ptr2",
                    "2": "pointer4",
                    "3": "input_string_ptr",
                    "4": "ptr4"
                },
                "puVar12": {
                    "1": "ptr_final_string",
                    "2": "result_ptr",
                    "3": "output_string",
                    "4": "encoded_string"
                },
                "puVar6": {
                    "1": "temp_ptr3",
                    "11": "ptr2",
                    "2": "encoded_string_ptr",
                    "3": "pointer2",
                    "5": "output_ptr"
                },
                "sVar5": {
                    "1": "input_str_len",
                    "2": "len",
                    "3": "str_len",
                    "7": "input_length",
                    "9": "string_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar14": {
                    "1": "num_iter",
                    "2": "loop_length",
                    "3": "byte_count",
                    "4": "uint_var"
                },
                "uVar15": {
                    "1": "end_of_string_indicator"
                },
                "uVar8": {
                    "1": "loop_index",
                    "2": "ulong1",
                    "3": "loop_counter"
                },
                "uVar9": {
                    "1": "temp_char",
                    "2": "ulong2",
                    "4": "special_char"
                },
                "unaff_R12": {
                    "1": "output_flag",
                    "2": "unaff_r12",
                    "3": "register_r12"
                },
                "unaff_R13": {
                    "1": "input_string_ptr",
                    "14": "input_string",
                    "2": "input_str",
                    "3": "register_r13"
                },
                "unaff_R14": {
                    "1": "input_format",
                    "19": "format_string",
                    "2": "register_r14",
                    "4": "format_str"
                },
                "unaff_R15": {
                    "1": "long3",
                    "2": "unaff_r15",
                    "3": "register_r15"
                },
                "unaff_RBP": {
                    "1": "unaff_rbp",
                    "2": "register_bp",
                    "4": "base_pointer",
                    "5": "frame_pointer"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047d0",
                "sprintf",
                "xmalloc",
                "isatty",
                "strlen",
                "free"
            ],
            "calling": [
                "FUN_00102739"
            ],
            "code": "\n\n\nvoid print_encoded_string_0010268b(void)\n\n{\n  undefined8 *ptr;\n  byte byte1;\n  byte byte2;\n  int is_terminal;\n  size_t string_length;\n  undefined8 *ptr2;\n  char *str_ptr;\n  ulong count;\n  undefined8 brace_char;\n  undefined *ptr3;\n  undefined8 *ptr4;\n  long frame_pointer;\n  undefined8 *encoded_string;\n  undefined *register_r12;\n  undefined8 *input_string;\n  long loop_var;\n  uint uint_var;\n  char *sprintf;\n  long function_pointer;\n  byte flag;\n  char *temp_string;\n  undefined8 stack_var;\n  \n  flag = 0;\n  encoded_string = input_string;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      byte1 = *(byte *)encoded_string;\n      if (byte1 == 0) goto LAB_0010485e;\n    } while ((((&character_table)[(ulong)byte1 * 2] & 2) == 0) &&\n            (encoded_string = (undefined8 *)((long)encoded_string + 1), byte1 < 0xc0));\n    string_length = strlen((char *)input_string);\n    encoded_string = DAT_0010b790;\n    ptr4 = input_string;\n    if (_DAT_0010b798 < string_length * 9) {\n      free_memory(DAT_0010b790);\n      string_length = strlen((char *)input_string);\n      _DAT_0010b798 = string_length * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      encoded_string = DAT_0010b790;\n    }\n    while( true ) {\n      input_string = DAT_0010b790;\n      byte1 = *(byte *)ptr4;\n      ptr = (undefined8 *)((long)ptr4 + 1);\n      if (byte1 == 0) break;\n      if (((&character_table)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)encoded_string = byte1;\n          encoded_string = (undefined8 *)((long)encoded_string + 1);\n          ptr4 = ptr;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = encoded_string;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uint_var = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                loop_var = 2;\n                goto LAB_00102917;\n              case 4:\n                is_terminal = isatty(1);\n                if (is_terminal == 0) {\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                }\n                else {\n                  *(undefined *)(encoded_string + 1) = 0;\n                  *encoded_string = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                  ptr2 = encoded_string + 1;\n                }\n              case 2:\n                uint_var = 2;\n                format_string((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr4 >> 2 & 7),\n                        (ulong)((*(byte *)ptr4 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint_var = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 3;\nLAB_00102a62:\n                  for (count = (ulong)uint_var; count != 0; count = count - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + (ulong)flag * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)flag * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  loop_var = 3;\nLAB_00102917:\n                  brace_char = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    brace_char = 0x3c;\n                  }\n                  format_string((char *)encoded_string,\"%c\",brace_char);\n                  *(undefined *)((long)encoded_string + 3) = 0;\n                  ptr2 = (undefined8 *)(loop_var + (long)ptr4);\n                  *(undefined2 *)((long)encoded_string + 1) = 0x7830;\n                  str_ptr = (char *)((long)encoded_string + 3);\n                  do {\n                    temp_string = str_ptr;\n                    byte1 = *(byte *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + 1);\n                    format_string(temp_string,\"%02x\",(ulong)byte1);\n                    str_ptr = temp_string + 2;\n                  } while (ptr4 != ptr2);\n                  brace_char = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    brace_char = 0x3e;\n                  }\n                  uint_var = (uint)loop_var;\n                  format_string(temp_string + 2,\"%c\",brace_char);\n                  ptr2 = (undefined8 *)(temp_string + 3);\n                  break;\n                case 4:\n                  is_terminal = isatty(1);\n                  if (is_terminal == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                  }\n                  else {\n                    *(undefined *)(encoded_string + 1) = 0;\n                    *encoded_string = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                    ptr2 = encoded_string + 1;\n                  }\n                case 2:\n                  uint_var = 3;\n                  format_string((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (is_terminal = isatty(1), is_terminal != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uint_var = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)ptr4 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  loop_var = 4;\n                  goto LAB_00102917;\n                case 4:\n                  is_terminal = isatty(1);\n                  if (is_terminal != 0) {\n                    *(undefined *)(encoded_string + 1) = 0;\n                    *encoded_string = 0x6d37343b31335b1b;\n                    ptr2 = encoded_string + 1;\n                  }\n                case 2:\n                  uint_var = 4;\n                  is_terminal = format_string((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)is_terminal);\n                  goto LAB_00102a27;\n                default:\n                  uint_var = 4;\n                }\n              }\n            }\n            count = (ulong)(uint)((int)ptr2 - (int)encoded_string);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)encoded_string = byte1;\n            uint_var = 1;\n            count = 1;\n          }\n          encoded_string = (undefined8 *)((long)encoded_string + count);\n          ptr4 = (undefined8 *)((long)ptr + (ulong)(uint_var - 1));\n        }\n      }\n      else {\n        *(undefined *)encoded_string = 0x5e;\n        *(byte *)((long)encoded_string + 1) = byte1 + 0x40;\n        encoded_string = (undefined8 *)((long)encoded_string + 2);\n        ptr4 = ptr;\n      }\n    }\n    *(undefined *)encoded_string = 0;\n  }\nLAB_0010485e:\n  encoded_string = (undefined8 *)0x0;\n  if ((((frame_pointer != 0) && (*(long *)(frame_pointer + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((str_ptr = (char *)(**(code **)(*(long *)(function_pointer + 8) + 0x220))\n                                  (function_pointer,*(long *)(frame_pointer + 0x10),0,\n                                   (long)&stack0x00000038 + 7), str_ptr != (char *)0x0 &&\n      (*str_ptr != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((stack_var._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(frame_pointer + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    encoded_string = (undefined8 *)reconcat(0,input_string,ptr3,str_ptr,0);\n    input_string = encoded_string;\n  }\n  printf(format_string,input_string);\n  if (register_r12 != (undefined *)0x0) {\n    *register_r12 = 0x40;\n  }\n  free_memory(encoded_string);\n  return;\n}\n\n",
            "current_name": "print_encoded_string_0010268b",
            "entrypoint": "0x0010268b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010268b": "print_encoded_string_0010268b",
                "__s": "temp_string",
                "_sch_istable": "character_table",
                "bVar15": "flag",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "free": "free_memory",
                "iVar4": "is_terminal",
                "in_stack_00000038": "stack_var",
                "isatty": "check_tty",
                "lVar13": "loop_var",
                "pcVar7": "str_ptr",
                "puVar1": "ptr",
                "puVar10": "ptr3",
                "puVar11": "ptr4",
                "puVar12": "encoded_string",
                "puVar6": "ptr2",
                "sVar5": "string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar14": "uint_var",
                "uVar8": "count",
                "uVar9": "brace_char",
                "unaff_R12": "register_r12",
                "unaff_R13": "input_string",
                "unaff_R14": "format_string",
                "unaff_R15": "function_pointer",
                "unaff_RBP": "frame_pointer",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102739": {
            "additional_data": {
                "DAT_0010b7e0": {
                    "1": "variable2"
                },
                "DAT_0010b814": {
                    "1": "flag1"
                },
                "FUN_00102739": {
                    "1": "print_reversed_string",
                    "2": "print_string",
                    "3": "decode_and_print_string",
                    "7": "reverse_and_print_string"
                },
                "PCVar6": {
                    "1": "pointer6"
                },
                "__ptr": {
                    "1": "new_pointer2",
                    "2": "result_ptr",
                    "3": "decoded_string",
                    "4": "result",
                    "5": "concatenated_string"
                },
                "__s": {
                    "1": "char_pointer3",
                    "2": "string_ptr",
                    "3": "temp_string"
                },
                "__sv": {
                    "1": "temporary_var"
                },
                "bVar15": {
                    "1": "byte_var15",
                    "2": "byte_var",
                    "6": "byte3",
                    "9": "flag"
                },
                "bVar2": {
                    "1": "byte_var1",
                    "14": "byte1",
                    "2": "current_byte",
                    "4": "current_char"
                },
                "bVar3": {
                    "1": "b2",
                    "14": "byte2",
                    "2": "byte_var3",
                    "3": "next_byte"
                },
                "iVar4": {
                    "1": "index",
                    "2": "int_value",
                    "3": "is_terminal",
                    "4": "result"
                },
                "in_stack_00000038": {
                    "1": "stack_arg",
                    "3": "stack_var"
                },
                "lVar13": {
                    "1": "decoded_str_length",
                    "2": "loop_counter",
                    "4": "long_var",
                    "6": "length"
                },
                "pcVar6": {
                    "1": "ptr2",
                    "2": "at_sign_position",
                    "3": "char_ptr"
                },
                "pcVar8": {
                    "1": "variable12",
                    "2": "char_pointer2",
                    "3": "char_ptr2",
                    "5": "demangled_string"
                },
                "puVar1": {
                    "1": "output_pointer",
                    "2": "byte_ptr",
                    "3": "pointer1",
                    "6": "ptr1"
                },
                "puVar11": {
                    "1": "format_specifier",
                    "2": "pointer_to_data",
                    "3": "pointer4"
                },
                "puVar12": {
                    "1": "result_ptr",
                    "2": "ptr12",
                    "3": "pointer5"
                },
                "puVar7": {
                    "1": "buffer",
                    "3": "pointer2",
                    "5": "ptr2"
                },
                "sVar5": {
                    "1": "size_var",
                    "3": "size1",
                    "4": "length",
                    "5": "str_length",
                    "9": "string_length"
                },
                "uVar10": {
                    "1": "format_specifier",
                    "2": "special_char",
                    "3": "ulong_var2",
                    "5": "ulong2"
                },
                "uVar11": {
                    "1": "counter"
                },
                "uVar14": {
                    "1": "length2",
                    "2": "num_digits",
                    "4": "uint_var",
                    "5": "uint1"
                },
                "uVar9": {
                    "1": "length2",
                    "4": "ulong_var",
                    "5": "count"
                },
                "unaff_R12": {
                    "1": "pointer_to_data2"
                },
                "unaff_R13": {
                    "1": "input_data",
                    "2": "input_string",
                    "3": "input_ptr"
                },
                "unaff_R14": {
                    "1": "ptr_format_string",
                    "12": "format_string",
                    "2": "output_format"
                },
                "unaff_R15": {
                    "1": "some_pointer",
                    "2": "long3",
                    "9": "context"
                },
                "unaff_R15_temp": {
                    "1": "size"
                },
                "unaff_R3": {
                    "1": "flag"
                },
                "unaff_RBP": {
                    "1": "some_pointer",
                    "2": "unaff_rbp",
                    "3": "base_pointer"
                },
                "unaff_RBX": {
                    "1": "buffer_pointer"
                },
                "unaff_XXXXXX": {
                    "1": "unused_variable"
                }
            },
            "called": [
                "FUN_001047d0",
                "strchr",
                "printf",
                "FUN_0010268b",
                "bfd_demangle"
            ],
            "calling": [
                "FUN_00104740"
            ],
            "code": "\n\n\nvoid reverse_and_print_string_00102739(void)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int result;\n  size_t string_length;\n  char *char_ptr;\n  undefined8 *ptr2;\n  char *demangled_string;\n  undefined8 *concatenated_string;\n  ulong ulong1;\n  undefined8 ulong2;\n  undefined *pointer4;\n  long base_pointer;\n  undefined8 *output_ptr;\n  undefined8 *input_ptr;\n  long length;\n  uint uint1;\n  char *format_string;\n  long context;\n  byte flag;\n  char *temp_string;\n  undefined8 format_argument;\n  \n  flag = 0;\n  output_ptr = input_ptr;\n  if (*(int *)(*(long *)(context + 8) + 8) != 5) {\n    if (DAT_0010b814 != 0) {\n      char_ptr = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    char_ptr = (char *)0x0;\n    if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      concatenated_string = (undefined8 *)0x0;\n    }\n    else {\n      concatenated_string = (undefined8 *)0x0;\n      if (input_ptr != (undefined8 *)0x0) goto LAB_0010269d;\n      concatenated_string = (undefined8 *)0x0;\n      input_ptr = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  char_ptr = strchr((char *)input_ptr,0x40);\n  if (char_ptr == (char *)0x0) {\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) {\n      if (base_pointer == 0) {\n        concatenated_string = (undefined8 *)0x0;\n        printf(format_string);\n      }\n      else {\n        if (*(long *)(base_pointer + 0x10) != 0) {\n          FUN_001047d0();\n          return;\n        }\n        concatenated_string = (undefined8 *)0x0;\n        printf(format_string);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    output_ptr = input_ptr;\n    concatenated_string = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)output_ptr;\n      if (byte1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (output_ptr = (undefined8 *)((long)output_ptr + 1), byte1 < 0xc0));\n    string_length = strlen((char *)input_ptr);\n    output_ptr = DAT_0010b790;\n    if (_DAT_0010b798 < string_length * 9) {\n      free(DAT_0010b790);\n      string_length = strlen((char *)input_ptr);\n      _DAT_0010b798 = string_length * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      output_ptr = DAT_0010b790;\n    }\n    while( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)input_ptr;\n      ptr1 = (undefined8 *)((long)input_ptr + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)output_ptr = byte1;\n          output_ptr = (undefined8 *)((long)output_ptr + 1);\n          input_ptr = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)input_ptr + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = output_ptr;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uint1 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                length = 2;\n                goto LAB_00102917;\n              case 4:\n                result = isatty(1);\n                if (result == 0) {\n                  byte2 = *(byte *)((long)input_ptr + 1);\n                }\n                else {\n                  *(undefined *)(output_ptr + 1) = 0;\n                  *output_ptr = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)input_ptr + 1);\n                  ptr2 = output_ptr + 1;\n                }\n              case 2:\n                uint1 = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)input_ptr >> 2 & 7)\n                        ,(ulong)((*(byte *)input_ptr & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint1 = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)input_ptr + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint1 = 3;\nLAB_00102a62:\n                  for (ulong1 = (ulong)uint1; ulong1 != 0; ulong1 = ulong1 - 1) {\n                    *(undefined *)ptr2 = *(undefined *)input_ptr;\n                    input_ptr = (undefined8 *)((long)input_ptr + (ulong)flag * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)flag * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  length = 3;\nLAB_00102917:\n                  ulong2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong2 = 0x3c;\n                  }\n                  sprintf((char *)output_ptr,\"%c\",ulong2);\n                  *(undefined *)((long)output_ptr + 3) = 0;\n                  ptr2 = (undefined8 *)(length + (long)input_ptr);\n                  *(undefined2 *)((long)output_ptr + 1) = 0x7830;\n                  demangled_string = (char *)((long)output_ptr + 3);\n                  do {\n                    temp_string = demangled_string;\n                    byte1 = *(byte *)input_ptr;\n                    input_ptr = (undefined8 *)((long)input_ptr + 1);\n                    sprintf(temp_string,\"%02x\",(ulong)byte1);\n                    demangled_string = temp_string + 2;\n                  } while (input_ptr != ptr2);\n                  ulong2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong2 = 0x3e;\n                  }\n                  uint1 = (uint)length;\n                  sprintf(temp_string + 2,\"%c\",ulong2);\n                  ptr2 = (undefined8 *)(temp_string + 3);\n                  break;\n                case 4:\n                  result = isatty(1);\n                  if (result == 0) {\n                    byte2 = *(byte *)((long)input_ptr + 2);\n                  }\n                  else {\n                    *(undefined *)(output_ptr + 1) = 0;\n                    *output_ptr = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)input_ptr + 2);\n                    ptr2 = output_ptr + 1;\n                  }\n                case 2:\n                  uint1 = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)input_ptr & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)input_ptr + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)input_ptr + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (result = isatty(1), result != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uint1 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)input_ptr + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint1 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  length = 4;\n                  goto LAB_00102917;\n                case 4:\n                  result = isatty(1);\n                  if (result != 0) {\n                    *(undefined *)(output_ptr + 1) = 0;\n                    *output_ptr = 0x6d37343b31335b1b;\n                    ptr2 = output_ptr + 1;\n                  }\n                case 2:\n                  uint1 = 4;\n                  result = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)input_ptr & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)input_ptr + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)input_ptr + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)input_ptr + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)result);\n                  goto LAB_00102a27;\n                default:\n                  uint1 = 4;\n                }\n              }\n            }\n            ulong1 = (ulong)(uint)((int)ptr2 - (int)output_ptr);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)output_ptr = byte1;\n            uint1 = 1;\n            ulong1 = 1;\n          }\n          output_ptr = (undefined8 *)((long)output_ptr + ulong1);\n          input_ptr = (undefined8 *)((long)ptr1 + (ulong)(uint1 - 1));\n        }\n      }\n      else {\n        *(undefined *)output_ptr = 0x5e;\n        *(byte *)((long)output_ptr + 1) = byte1 + 0x40;\n        output_ptr = (undefined8 *)((long)output_ptr + 2);\n        input_ptr = ptr1;\n      }\n    }\n    *(undefined *)output_ptr = 0;\n    input_ptr = ptr2;\n  }\n  else {\n    *char_ptr = '\\0';\n    if (DAT_0010b814 == 0) {\n      if (DAT_0010b7e0 == 0) goto LAB_00104794;\n      concatenated_string = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)input_ptr == '\\0') ||\n       (output_ptr = (undefined8 *)bfd_demangle(), output_ptr == (undefined8 *)0x0)) {\n      if (DAT_0010b7e0 != 0) goto LAB_00102698;\n      concatenated_string = (undefined8 *)0x0;\n    }\n    else {\n      input_ptr = output_ptr;\n      concatenated_string = output_ptr;\n      if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((base_pointer != 0) && (*(long *)(base_pointer + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((demangled_string = (char *)(**(code **)(*(long *)(context + 8) + 0x220))\n                                  (context,*(long *)(base_pointer + 0x10),0,\n                                   (long)&stack0x00000038 + 7), demangled_string != (char *)0x0 &&\n      (*demangled_string != '\\0')))) {\n    pointer4 = &DAT_001071e0;\n    if ((format_argument._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(base_pointer + 0x10) + 0x20) != 0x10c2a8)) {\n      pointer4 = &DAT_001071df;\n    }\n    concatenated_string = (undefined8 *)reconcat(concatenated_string,input_ptr,pointer4,demangled_string,0);\n    input_ptr = concatenated_string;\n  }\n  printf(format_string,input_ptr);\n  if (char_ptr != (char *)0x0) {\n    *char_ptr = '@';\n  }\nLAB_001047ba:\n  free(concatenated_string);\n  return;\n}\n\n",
            "current_name": "reverse_and_print_string_00102739",
            "entrypoint": "0x00102739",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102739": "reverse_and_print_string_00102739",
                "__ptr": "concatenated_string",
                "__s": "temp_string",
                "bVar15": "flag",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "result",
                "in_stack_00000038": "format_argument",
                "lVar13": "length",
                "pcVar6": "char_ptr",
                "pcVar8": "demangled_string",
                "puVar1": "ptr1",
                "puVar11": "pointer4",
                "puVar12": "output_ptr",
                "puVar7": "ptr2",
                "sVar5": "string_length",
                "uVar10": "ulong2",
                "uVar11": "counter",
                "uVar14": "uint1",
                "uVar9": "ulong1",
                "unaff_R13": "input_ptr",
                "unaff_R14": "format_string",
                "unaff_R15": "context",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102c19": {
            "additional_data": {
                "<__ptr>": {
                    "1": "pointer_ptr"
                },
                "<cVar3>": {
                    "1": "char_var"
                },
                "<iVar4>": {
                    "1": "int_var"
                },
                "<in_stack_00000008>": {
                    "1": "in_stack_var8"
                },
                "<in_stack_00000010>": {
                    "1": "in_stack_var10"
                },
                "<in_stack_00000018>": {
                    "1": "in_stack_var18"
                },
                "<in_stack_00000038>": {
                    "1": "in_stack_var38"
                },
                "<in_stack_00000040>": {
                    "1": "in_stack_var40"
                },
                "<in_stack_00000048>": {
                    "1": "in_stack_var48"
                },
                "<lVar7>": {
                    "1": "long_var"
                },
                "<lVar9>": {
                    "1": "some_long_var"
                },
                "<original_function_name>": {
                    "1": "process_lto_object"
                },
                "<pcVar1>": {
                    "1": "plugin_symbol"
                },
                "<pcVar2>": {
                    "1": "plugin_function"
                },
                "<puVar10>": {
                    "1": "pointer_var10"
                },
                "<puVar11>": {
                    "1": "pointer_var11"
                },
                "<puVar12>": {
                    "1": "pointer_var12"
                },
                "<puVar13>": {
                    "1": "pointer_var13"
                },
                "<puVar14>": {
                    "1": "pointer_var14"
                },
                "<puVar15>": {
                    "1": "pointer_var15"
                },
                "<puVar8>": {
                    "1": "pointer_var8"
                },
                "<uVar18>": {
                    "1": "unaff_unsigned_var18"
                },
                "<uVar5>": {
                    "1": "uint_var"
                },
                "<uVar6>": {
                    "1": "ulong_var"
                },
                "<unaff_R12>": {
                    "1": "pointer_r12_unaff"
                },
                "<unaff_R13>": {
                    "1": "pointer_r13_unaff"
                },
                "<unaff_R14>": {
                    "1": "pointer_r14_unaff"
                },
                "<unaff_R15>": {
                    "1": "pointer_r15_unaff"
                },
                "<unaff_RBP>": {
                    "1": "pointer_rbp_unaff"
                },
                "<unaff_RBX>": {
                    "1": "pointer_rbx_unaff"
                },
                "<unaff_retaddr>": {
                    "1": "unaff_ret_adddr"
                },
                "FUN_00102c19": {
                    "1": "lto_object_handler",
                    "3": "decompiled_function"
                },
                "__ptr": {
                    "1": "pointer_var12",
                    "2": "ptr_var"
                },
                "bVar16": {
                    "1": "is_zero",
                    "2": "flag2",
                    "4": "boolean_var",
                    "5": "boolean_variable",
                    "7": "bool_var"
                },
                "bVar17": {
                    "1": "boolean_variable_17",
                    "13": "byte_var",
                    "2": "byte",
                    "7": "byte_variable"
                },
                "cVar3": {
                    "1": "character_variable",
                    "2": "char_variable",
                    "5": "character_var",
                    "7": "character",
                    "8": "char_var"
                },
                "iVar4": {
                    "1": "result",
                    "10": "int_var",
                    "2": "integer_variable",
                    "3": "integer",
                    "4": "int_variable"
                },
                "in_R8": {
                    "1": "undefined8_ptr_9",
                    "2": "input_register_8"
                },
                "in_R9": {
                    "1": "pointer_var11",
                    "2": "input_register_9"
                },
                "in_stack_00000008": {
                    "1": "undefined8_var1",
                    "2": "parameter1",
                    "4": "stack_var1"
                },
                "in_stack_00000010": {
                    "1": "var2",
                    "2": "stack_variable_00000010",
                    "4": "stack_var2"
                },
                "in_stack_00000018": {
                    "1": "in_stack_variable3",
                    "2": "stack_variable_00000018",
                    "4": "stack_var3"
                },
                "in_stack_00000038": {
                    "1": "param56",
                    "2": "stack_variable_00000038",
                    "4": "stack_var4"
                },
                "in_stack_00000040": {
                    "1": "input_stack_variable5",
                    "2": "stack_variable_00000040",
                    "4": "stack_var5"
                },
                "in_stack_00000048": {
                    "1": "ptr_var19",
                    "2": "stack_variable_00000048",
                    "4": "stack_var6"
                },
                "lVar7": {
                    "1": "loop_index",
                    "14": "long_var",
                    "2": "long_value",
                    "6": "long_variable"
                },
                "lVar9": {
                    "1": "long_variable1",
                    "10": "long_var2",
                    "2": "long_var1",
                    "5": "long_variable2"
                },
                "pcVar1": {
                    "1": "str",
                    "3": "character_pointer",
                    "4": "pointer"
                },
                "pcVar2": {
                    "1": "pointer_var2",
                    "11": "function_pointer",
                    "2": "code_pointer",
                    "3": "pointer2"
                },
                "puVar10": {
                    "1": "ptr_var",
                    "2": "pointer4",
                    "4": "pointer_variable2",
                    "7": "pointer_var2"
                },
                "puVar11": {
                    "1": "ptr2",
                    "2": "pointer_variable3",
                    "6": "pointer_var3"
                },
                "puVar12": {
                    "1": "pointer_variable_12",
                    "2": "pointer_variable4",
                    "6": "pointer_var4"
                },
                "puVar13": {
                    "1": "pointer_variable_13",
                    "2": "pointer_variable5",
                    "6": "pointer_var5"
                },
                "puVar14": {
                    "1": "pointer_variable12",
                    "2": "pointer_variable6",
                    "4": "pointer_var6"
                },
                "puVar15": {
                    "1": "pointer_6",
                    "3": "pointer_var7"
                },
                "puVar16": {
                    "1": "pointer_n"
                },
                "puVar8": {
                    "1": "ptr_var",
                    "2": "pointer_var",
                    "4": "pointer_variable",
                    "5": "pointer_var1"
                },
                "uVar18": {
                    "1": "unsigned_long_variable_3",
                    "2": "unsigned_variable3"
                },
                "uVar5": {
                    "1": "is_plugin_needed",
                    "11": "uint_var",
                    "2": "unsigned_var",
                    "3": "unsigned_integer",
                    "4": "unsigned_variable"
                },
                "uVar6": {
                    "1": "unsigned_long_variable",
                    "2": "unsigned_var2",
                    "3": "unsigned_long",
                    "4": "undefined8_var",
                    "7": "ulong_var"
                },
                "unaff_R10": {
                    "1": "unaffected_register_10"
                },
                "unaff_R11": {
                    "1": "unaffected_register_11"
                },
                "unaff_R12": {
                    "1": "pointer_r12",
                    "2": "unaffected_register_12",
                    "4": "register_r12"
                },
                "unaff_R13": {
                    "1": "pointer13",
                    "2": "source",
                    "5": "register_r13"
                },
                "unaff_R14": {
                    "1": "undefined8_ptr_15",
                    "5": "register_r14"
                },
                "unaff_R15": {
                    "1": "ptr_var15",
                    "5": "register_r15"
                },
                "unaff_R4": {
                    "1": "unaffected_register_4"
                },
                "unaff_R5": {
                    "1": "unaffected_register_5"
                },
                "unaff_R6": {
                    "1": "unaffected_register_6"
                },
                "unaff_R7": {
                    "1": "unaffected_register_7"
                },
                "unaff_R8": {
                    "1": "unaffected_register_8"
                },
                "unaff_R9": {
                    "1": "unaffected_register_9"
                },
                "unaff_RBP": {
                    "1": "pointer11",
                    "2": "unaffected_register_bp",
                    "3": "base_pointer",
                    "5": "register_bp"
                },
                "unaff_RBX": {
                    "1": "buffer",
                    "6": "register_bx"
                },
                "unaff_retaddr": {
                    "1": "unsigned_long_variable",
                    "2": "return_value",
                    "3": "register_retaddr",
                    "4": "return_address",
                    "5": "ulong_var"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\n\n\nvoid process_lto_object_00102c19(void)\n\n{\n  char *pointer;\n  code *function_pointer;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined8 ulong_var;\n  long long_var;\n  undefined8 *pointer_var1;\n  long long_var2;\n  undefined8 *pointer_var2;\n  undefined8 *register_bx;\n  undefined8 *ptr_var;\n  undefined8 *register_bp;\n  undefined8 *pointer_var3;\n  undefined8 *pointer_var4;\n  undefined8 *input_register_8;\n  undefined8 *pointer_var5;\n  undefined8 *input_register_9;\n  undefined8 *pointer_var6;\n  undefined8 *register_r12;\n  undefined8 *pointer_var7;\n  undefined8 *register_r13;\n  undefined8 *register_r14;\n  undefined8 *register_r15;\n  bool bool_var;\n  byte byte_var;\n  ulong ulong_var;\n  ulong ulong_var2;\n  undefined8 stack_var1;\n  undefined8 *stack_var2;\n  undefined8 *stack_var3;\n  undefined8 stack_var4;\n  void *stack_var5;\n  undefined8 *stack_var6;\n  \n  byte_var = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (register_bx != register_r13) {\n      if (register_r14 == (undefined8 *)0x8) {\n        *register_bx = *register_r13;\n        FUN_001049c0();\n        return;\n      }\n      for (; register_r14 != (undefined8 *)0x0; register_r14 = (undefined8 *)((long)register_r14 + -1)) {\n        *(undefined *)register_bx = *(undefined *)register_r13;\n        register_r13 = (undefined8 *)((long)register_r13 + (ulong)byte_var * -2 + 1);\n        register_bx = (undefined8 *)((long)register_bx + (ulong)byte_var * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    register_bx = (undefined8 *)((long)register_bx + (long)register_r14);\nLAB_001049c3:\n    do {\n      do {\n        register_r13 = (undefined8 *)((long)register_r13 + (long)register_r14);\n        pointer_var7 = register_r12;\n        pointer_var4 = register_bp;\n        if (register_r12 <= register_r13) goto LAB_00104b15;\nLAB_001049cf:\n        pointer_var1 = (undefined8 *)\n                 (**(code **)(register_bp[1] + 0x270))\n                           (register_bp,ulong_var & 0xffffffff,register_r13,register_r15);\n        pointer_var3 = register_bp;\n        pointer_var4 = register_r13;\n        pointer_var7 = register_r15;\n        if (pointer_var1 == (undefined8 *)0x0) goto LAB_00102eb0;\n        pointer = (char *)pointer_var1[1];\n        if (((pointer == (char *)0x0) || (*pointer != '_')) || (pointer[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uint_var = (uint)(pointer_var1[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uint_var != 0) goto LAB_00104a2d;\n          register_r13 = (undefined8 *)((long)register_r13 + (long)register_r14);\n          pointer_var7 = register_r12;\n          pointer_var4 = register_bp;\n          if (register_r12 <= register_r13) {\nLAB_00104b15:\n            register_bx = (undefined8 *)((long)register_bx - (long)stack_var3);\n            if (register_r14 == (undefined8 *)0x8) {\n              long_var2 = pointer_var4[1];\n              pointer_var3 = (undefined8 *)((long)register_bx + 7);\n              if (-1 < (long)register_bx) {\n                pointer_var3 = register_bx;\n              }\n              input_register_8 = (undefined8 *)(ulong)DAT_0010b800;\n              function_pointer = *(code **)(long_var2 + 0x208);\n              pointer_var3 = (undefined8 *)((long)pointer_var3 >> 3);\n            }\n            else {\n              pointer_var3 = (undefined8 *)((long)register_bx / (long)register_r14);\n              long_var2 = pointer_var4[1];\n              function_pointer = *(code **)(long_var2 + 0x208);\n            }\n            register_bp = pointer_var4;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = pointer_var4;\n              DAT_0010b770 = (undefined8 *)(*function_pointer)(pointer_var4);\n              DAT_0010b768 = (undefined8 *)(**(code **)(pointer_var4[1] + 0x208))(pointer_var4);\n              register_bx = stack_var6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                FUN_00106530(*pointer_var4);\n                ptr_var = register_r15;\n                goto LAB_00102d8e;\n              }\n              register_r12 = (undefined8 *)(ulong)stack_var4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulong_var2 = (ulong)(DAT_0010b80c != 0);\n                qsort(stack_var6,(size_t)pointer_var3,(size_t)register_r12,FUN_00102fd2);\n                pointer_var7 = (undefined8 *)xmalloc((long)pointer_var3 << 4);\n                pointer_var5 = DAT_0010b770;\n                register_bp = DAT_0010b768;\n                register_r14 = (undefined8 *)((long)pointer_var3 * (long)register_r12 + (long)register_bx);\n                pointer_var1 = DAT_0010b770;\n                input_register_9 = DAT_0010b768;\n                if (register_r14 <= register_bx) goto LAB_00102ec2;\n                pointer_var3 = (undefined8 *)\n                          (**(code **)(pointer_var4[1] + 0x270))(pointer_var4,ulong_var2 & 0xffffffff,register_bx);\n                ptr_var = register_bx;\n                input_register_8 = register_r12;\n                stack_var2 = pointer_var7;\n                if (pointer_var3 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stack_var6,(size_t)pointer_var3,(size_t)register_r12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              long_var2 = pointer_var4[1];\n            }\n            ptr_var = (undefined8 *)0x0;\n            do {\n              pointer_var4 = stack_var6;\n              pointer_var1 = (undefined8 *)(ulong)DAT_0010b7f8;\n              register_r14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointer_var7 = (undefined8 *)(**(code **)(long_var2 + 0x208))(register_bp);\n                if (pointer_var7 == (undefined8 *)0x0) goto LAB_00102ed2;\n                register_bx = ptr_var + (long)pointer_var3 * 2;\n                pointer_var3 = ptr_var;\n                do {\n                  if (register_bx <= pointer_var3) {\nLAB_00104c75:\n                    if (stack_var5 == (void *)0x0) {\n                      free(stack_var6);\n                      free(ptr_var);\n                      return;\n                    }\n                    free(stack_var5);\n                    free(stack_var6);\n                    free(ptr_var);\n                    return;\n                  }\n                  pointer_var1 = pointer_var7;\n                  long_var2 = (**(code **)(register_bp[1] + 0x270))(register_bp,register_r14,*pointer_var3);\n                  if (long_var2 == 0) {\n                    FUN_00106530(*register_bp,0);\nLAB_00102ed2:\n                    pointer_var4 = (undefined8 *)*register_bp;\n                    FUN_00106530();\n                    pointer_var5 = input_register_8;\n                    pointer_var6 = input_register_9;\n                    goto LAB_00102edb;\n                  }\n                  pointer_var4 = pointer_var3 + 1;\n                  pointer_var3 = pointer_var3 + 2;\n                  FUN_00105110(register_bp,long_var2,*pointer_var4,stack_var1);\n                } while( true );\n              }\n              register_r12 = (undefined8 *)(ulong)stack_var4._4_4_;\n              register_r15 = (undefined8 *)(**(code **)(long_var2 + 0x208))(register_bp);\n              if (register_r15 == (undefined8 *)0x0) {\n                FUN_00106530(*register_bp);\n                pointer_var4 = register_r12;\n                if (DAT_0010b80c == 0) {\n                  long_var2 = (**(code **)(register_bp[1] + 0x350))(register_bp);\n                  pointer_var3 = stack_var6;\n                  pointer_var7 = register_r12;\n                  if (long_var2 < 1) {\n                    pointer_var1 = (undefined8 *)0x0;\n                    register_bx = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    register_bx = (undefined8 *)xmalloc();\n                    pointer_var1 = (undefined8 *)(**(code **)(register_bp[1] + 0x358))(register_bp,register_bx);\n                    pointer_var4 = pointer_var7;\n                    if ((long)pointer_var1 < 0) {\n                      pointer_var4 = (undefined8 *)*register_bp;\n                      pointer_var3 = (undefined8 *)FUN_00106530(pointer_var4,pointer_var7);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointer_var1 = register_r12;\n                  register_bx = stack_var6;\n                  pointer_var3 = (undefined8 *)0x0;\n                  pointer_var7 = (undefined8 *)0x0;\n                }\n                input_register_9 = &stack0x00000040;\n                input_register_8 = register_bx;\n                long_var2 = (**(code **)(register_bp[1] + 0x360))(register_bp,pointer_var7,pointer_var3,pointer_var1);\n                register_r12 = pointer_var4;\n                if (0 < long_var2) {\n                  register_r12 = (undefined8 *)((long)pointer_var4 + long_var2);\n                  stack_var6 = (undefined8 *)xrealloc(stack_var6);\n                  long_var = 0;\n                  do {\n                    stack_var6[(long)((long)pointer_var4 + long_var)] =\n                         (void *)(long_var * 0x30 + (long)stack_var5);\n                    long_var = long_var + 1;\n                  } while (long_var2 != long_var);\n                  stack_var6[(long)((long)pointer_var4 + long_var2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (register_bx != (undefined8 *)0x0)) {\n                  free(register_bx);\n                }\n                if ((*(byte *)((long)register_bp + 0x4a) & 0x10) != 0) {\n                  register_bx = (undefined8 *)*register_bp;\n                  DAT_0010b230 = '\\0';\n                  ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(ulong_var);\n                }\n                register_r14 = (undefined8 *)(ulong)stack_var4._4_4_;\n                bool_var = DAT_0010b80c != 0;\n                pointer_var3 = (undefined8 *)(ulong)bool_var;\n                pointer_var1 = stack_var6;\n                stack_var3 = stack_var6;\n                register_r15 = (undefined8 *)(**(code **)(register_bp[1] + 0x208))(register_bp);\n                if (register_r15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointer_var3 = (undefined8 *)((long)pointer_var3 * (long)register_r12 + (long)pointer_var4);\n                register_bx = pointer_var4;\n                while( true ) {\n                  if (pointer_var3 <= register_bx) goto LAB_00104c75;\n                  pointer_var1 = register_r15;\n                  long_var2 = (**(code **)(register_bp[1] + 0x270))(register_bp,register_r14,register_bx);\n                  if (long_var2 == 0) break;\n                  register_bx = (undefined8 *)((long)register_bx + (long)register_r12);\n                  FUN_00105110(register_bp,long_var2,0,stack_var1);\n                }\n                FUN_00106530(*register_bp,0);\n              }\n              FUN_00106530(*register_bp);\n              pointer_var4 = register_bp;\n              pointer_var7 = register_r15;\nLAB_00102eb0:\n              FUN_00106530(*pointer_var3);\nLAB_00102eb9:\n              FUN_00106530(*pointer_var4);\nLAB_00102ec2:\n              pointer_var3 = (undefined8 *)0x0;\n              ptr_var = register_bx;\n              input_register_8 = register_r12;\n              pointer_var5 = pointer_var1;\n              register_bp = input_register_9;\n              stack_var2 = pointer_var7;\nLAB_00104e35:\n              while (input_register_9 = pointer_var5, ptr_var < register_r14) {\n                register_bx = (undefined8 *)((long)ptr_var + (long)input_register_8);\n                if (register_bx < register_r14) {\n                  pointer_var1 = register_bp;\n                  pointer_var5 = input_register_8;\n                  pointer_var6 = input_register_9;\n                  pointer_var2 = (undefined8 *)(**(code **)(pointer_var4[1] + 0x270))();\n                  if (pointer_var2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    input_register_9 = pointer_var6;\n                    input_register_8 = pointer_var5;\n                    pointer_var4 = (undefined8 *)*pointer_var4;\n                    pointer_var2 = (undefined8 *)FUN_00106530();\n                  }\n                  else {\n                    pointer_var1 = (undefined8 *)pointer_var3[4];\n                    if ((*(uint *)(pointer_var3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  long_var2 = pointer_var3[2];\nLAB_00102ee7:\n                  if (pointer_var1 == (undefined8 *)pointer_var2[4]) {\n                    long_var2 = pointer_var2[2] - long_var2;\n                    pointer_var5 = register_bp;\n                    pointer_var6 = ptr_var;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  long_var2 = pointer_var1[8] - long_var2;\n                  pointer_var5 = register_bp;\n                  pointer_var6 = ptr_var;\n                }\n                else {\n                  pointer_var1 = (undefined8 *)pointer_var3[4];\n                  if ((*(uint *)(pointer_var3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    long_var2 = pointer_var3[2];\n                    pointer_var2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointer_var2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointer_var5 = register_bp;\n                  pointer_var6 = ptr_var;\n                  if (*(int *)(pointer_var4[1] + 8) == 5) {\n                    long_var2 = pointer_var3[7];\n                  }\n                  else {\n                    long_var2 = pointer_var3[2];\n                    if ((*(byte *)((long)pointer_var1 + 0x25) & 0x10) == 0) {\n                      if (register_bx < register_r14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointer_var3 = pointer_var2;\n                ptr_var = register_bx;\n                register_bp = input_register_9;\n                if (long_var2 != 0) {\n                  *pointer_var7 = pointer_var6;\n                  pointer_var7[1] = long_var2;\n                  pointer_var7 = pointer_var7 + 2;\n                }\n              }\n              pointer_var3 = (undefined8 *)((long)pointer_var7 - (long)stack_var2 >> 4);\n              qsort(stack_var2,(size_t)pointer_var3,0x10,FUN_00103533);\n              long_var2 = pointer_var4[1];\n              register_bx = ptr_var;\n              register_bp = pointer_var4;\n              ptr_var = stack_var2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        int_var = strcmp(pointer + (pointer[2] == '_'),\"__gnu_lto_slim\");\n        stack_var2 = pointer_var1;\n        if (int_var == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stack_var2 = (undefined8 *)*register_bp;\n            DAT_0010b230 = '\\0';\n            ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            FUN_00106400(ulong_var,stack_var2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uint_var = (*(uint *)(pointer_var1 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointer_var1 + 3) & 0x800082) == 0) && (pointer_var1[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointer_var1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n          if ((pointer_var1[4] != 0x10c2a8) && (pointer_var1[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointer_var1 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n      input_register_9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        char_var = (**(code **)(register_bp[1] + 0x230))(register_bp);\n        if (char_var != '\\0') {\n          process_lto_object_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointer_var1[4] == 0x10c2a8);\nLAB_00104cba:\n    char_var = (**(code **)(register_bp[1] + 0x230))(register_bp);\n    if (char_var != '\\0') {\n      process_lto_object_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointer_var7 = (undefined8 *)((long)register_r12 * (long)register_r14);\n  register_r12 = (undefined8 *)((long)stack_var3 + (long)pointer_var7);\n  register_bx = stack_var3;\n  pointer_var4 = register_bp;\n  if (stack_var3 < register_r12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  ulong_var = (ulong)bool_var;\n  register_r13 = stack_var3;\n  goto LAB_001049cf;\n}\n\n",
            "current_name": "process_lto_object_00102c19",
            "entrypoint": "0x00102c19",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102c19": "process_lto_object_00102c19",
                "__ptr": "ptr_var",
                "bVar16": "bool_var",
                "bVar17": "byte_var",
                "cVar3": "char_var",
                "iVar4": "int_var",
                "in_R8": "input_register_8",
                "in_R9": "input_register_9",
                "in_stack_00000008": "stack_var1",
                "in_stack_00000010": "stack_var2",
                "in_stack_00000018": "stack_var3",
                "in_stack_00000038": "stack_var4",
                "in_stack_00000040": "stack_var5",
                "in_stack_00000048": "stack_var6",
                "lVar7": "long_var",
                "lVar9": "long_var2",
                "pcVar1": "pointer",
                "pcVar2": "function_pointer",
                "puVar10": "pointer_var2",
                "puVar11": "pointer_var3",
                "puVar12": "pointer_var4",
                "puVar13": "pointer_var5",
                "puVar14": "pointer_var6",
                "puVar15": "pointer_var7",
                "puVar8": "pointer_var1",
                "uVar18": "ulong_var2",
                "uVar5": "uint_var",
                "uVar6": "ulong_var",
                "unaff_R12": "register_r12",
                "unaff_R13": "register_r13",
                "unaff_R14": "register_r14",
                "unaff_R15": "register_r15",
                "unaff_RBP": "register_bp",
                "unaff_RBX": "register_bx",
                "unaff_retaddr": "ulong_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f19": {
            "additional_data": {
                "FUN_00102f19": {
                    "1": "display_symbols",
                    "4": "print_symbol_information",
                    "6": "print_undefined_symbols",
                    "8": "print_symbol_info",
                    "9": "print_symbols"
                },
                "dcgettext": {
                    "1": "get_translated_message",
                    "3": "get_translated_string"
                },
                "param_1": {
                    "1": "symbol_file_name",
                    "12": "filename",
                    "2": "symbol_file",
                    "7": "file_name"
                },
                "pcVar1": {
                    "1": "symbol_prompt",
                    "10": "message",
                    "3": "symbol_text",
                    "4": "symbol_format",
                    "8": "format_string"
                },
                "printf": {
                    "1": "print",
                    "3": "print_formatted_string"
                }
            },
            "called": [
                "dcgettext",
                "printf"
            ],
            "calling": [],
            "code": "\nvoid print_symbols_00102f19(undefined8 filename)\n\n{\n  char *message;\n  \n  message = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    message = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  message = (char *)dcgettext(0,message,5);\n  printf(message,filename);\n  message = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    message = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  message = (char *)dcgettext(0,message,5);\n  printf(message);\n  return;\n}\n\n",
            "current_name": "print_symbols_00102f19",
            "entrypoint": "0x00102f19",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f19": "print_symbols_00102f19",
                "dcgettext": "get_translated_string",
                "param_1": "filename",
                "pcVar1": "message",
                "printf": "print_formatted_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f7b": {
            "additional_data": {
                "DAT_0010b7c4": {
                    "1": "debug_enabled"
                },
                "DAT_0010b818": {
                    "1": "printing_disabled",
                    "3": "condition_2"
                },
                "FUN_00102f7b": {
                    "1": "print_if_flag_is_set",
                    "2": "print_if_enabled",
                    "3": "print_message",
                    "4": "print_if_condition_met",
                    "6": "print_if_flag_set"
                },
                "_DAT_0010b7c4": {
                    "1": "flag_enabled",
                    "3": "condition_1"
                },
                "__format": {
                    "1": "format_string"
                },
                "param_1": {
                    "1": "log_message",
                    "30": "message"
                },
                "printf": {
                    "1": "print_formatted_line",
                    "2": "print_formatted_message"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [],
            "code": "\n\n\nvoid print_if_flag_set_00102f7b(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_if_flag_set_00102f7b",
            "entrypoint": "0x00102f7b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f7b": "print_if_flag_set_00102f7b",
                "param_1": "message",
                "printf": "print_formatted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f9f": {
            "additional_data": {
                "*DAT_0010b780": {
                    "1": "data_address"
                },
                "FUN_00102f9f": {
                    "1": "extracted_function",
                    "2": "reverse_and_return"
                },
                "FUN_00106530": {
                    "1": "perform_action"
                },
                "auVar1": {
                    "1": "return_data",
                    "17": "result",
                    "9": "return_value"
                },
                "unaff_retaddr": {
                    "1": "previous_address",
                    "26": "return_address"
                }
            },
            "called": [
                "FUN_00106530"
            ],
            "calling": [
                "FUN_00104fa0"
            ],
            "code": "\nundefined  [16] reverse_and_retaddr_00102f9f(void)\n\n{\n  undefined result [16];\n  undefined8 return_address;\n  \n  FUN_00106530(*DAT_0010b780);\n  result._8_8_ = return_address;\n  result._0_8_ = 0xffffffff;\n  return result;\n}\n\n",
            "current_name": "reverse_and_retaddr_00102f9f",
            "entrypoint": "0x00102f9f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f9f": "reverse_and_retaddr_00102f9f",
                "auVar1": "result",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fc3": {
            "additional_data": {
                "FUN_00102fc3": {
                    "1": "check_file_version",
                    "2": "check_file_extension",
                    "3": "check_compiler_version"
                },
                "__s": {
                    "1": "file_path1",
                    "16": "string1",
                    "2": "string_1",
                    "3": "str1"
                },
                "__s_00": {
                    "1": "source_str2",
                    "16": "string2",
                    "2": "string_2",
                    "3": "str2"
                },
                "bVar14": {
                    "1": "has_smaller_offset",
                    "3": "is_equal",
                    "4": "is_match"
                },
                "bVar15": {
                    "1": "bool_result"
                },
                "cVar1": {
                    "1": "last_character_source_string",
                    "14": "last_char",
                    "4": "last_character"
                },
                "cVar16": {
                    "1": "char_result"
                },
                "lVar4": {
                    "1": "source1",
                    "12": "result1",
                    "2": "file_info_1"
                },
                "lVar5": {
                    "1": "target_data_length",
                    "12": "result2",
                    "2": "file_info_2"
                },
                "param_1": {
                    "1": "data_segment_address",
                    "2": "data1",
                    "3": "param1",
                    "4": "file1",
                    "8": "arg1"
                },
                "param_2": {
                    "1": "data",
                    "2": "data2",
                    "3": "param2",
                    "4": "file2",
                    "8": "arg2"
                },
                "pcVar10": {
                    "1": "search1"
                },
                "pcVar11": {
                    "1": "search2"
                },
                "pcVar8": {
                    "1": "string1_match",
                    "2": "substr1",
                    "3": "ptr1",
                    "4": "substring1"
                },
                "pcVar9": {
                    "1": "str2",
                    "2": "substr2",
                    "3": "ptr2",
                    "4": "substring2"
                },
                "sVar6": {
                    "1": "length_string1",
                    "2": "string1_length",
                    "5": "len1",
                    "6": "length1"
                },
                "sVar7": {
                    "1": "length_2",
                    "2": "string2_length",
                    "5": "len2",
                    "6": "length2"
                },
                "uVar10": {
                    "1": "length2",
                    "12": "result",
                    "2": "var1",
                    "3": "return_value"
                },
                "uVar11": {
                    "1": "size1",
                    "2": "file_offset_2"
                },
                "uVar12": {
                    "1": "var2",
                    "2": "file_offset_1",
                    "4": "sum1"
                },
                "uVar13": {
                    "1": "pointer_data",
                    "2": "constant_value",
                    "3": "data_ptr",
                    "6": "data"
                },
                "uVar14": {
                    "1": "compare_result"
                },
                "uVar17": {
                    "1": "option1"
                },
                "uVar18": {
                    "1": "option2"
                },
                "uVar19": {
                    "1": "compare_result2"
                },
                "uVar2": {
                    "1": "size1",
                    "2": "length1"
                },
                "uVar20": {
                    "1": "final_result"
                },
                "uVar3": {
                    "1": "unaff_r13_flag",
                    "19": "flag",
                    "4": "flags"
                },
                "uVar6": {
                    "1": "result"
                },
                "uVar8": {
                    "1": "length1"
                },
                "uVar9": {
                    "1": "length2"
                },
                "unaff_R13": {
                    "1": "ptr2",
                    "2": "unaffected_register",
                    "3": "result"
                }
            },
            "called": [
                "FUN_00106530"
            ],
            "calling": [
                "FUN_00105050"
            ],
            "code": "\nulong check_compiler_version_00102fc3(undefined8 arg1,undefined8 arg2)\n\n{\n  char last_char;\n  ulong length1;\n  char *string1;\n  char *string2;\n  uint flag;\n  long result1;\n  long result2;\n  size_t length1;\n  size_t length2;\n  char *substring1;\n  char *substring2;\n  ulong result;\n  ulong file_offset_2;\n  ulong sum1;\n  undefined8 data;\n  long result;\n  bool is_match;\n  \n  data = *DAT_0010b780;\n  FUN_00106530();\n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,data,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,arg2,DAT_0010b768);\n  if ((result1 == 0) || (result = result2, result2 == 0)) {\n    result2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  length1 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  sum1 = *(long *)(result1 + 0x10) + result;\n  file_offset_2 = *(long *)(result + 0x10) + length1;\n  is_match = sum1 < file_offset_2;\n  if ((sum1 != file_offset_2) || (is_match = result < length1, result != length1)) {\n    return (ulong)(-(uint)is_match | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(result + 8);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  substring1 = strstr(string1,\"gnu_compiled\");\n  if (substring1 == (char *)0x0) {\n    substring2 = strstr(string1,\"gcc2_compiled\");\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if ((substring1 == (char *)0x0) && (substring1 = strstr(string2,\"gcc2_compiled\"), substring1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (substring2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if (substring1 == (char *)0x0) {\n      substring2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (substring2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(result + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((length1 < 3) || (string1[length1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) goto LAB_00103202;\n      is_match = false;\n      goto LAB_001031e7;\n    }\n    last_char = string1[length1 - 1];\n    is_match = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (length2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[length2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_match = true;\nLAB_001031e7:\n    if ((string2[length2 - 1] != 'o') && (string2[length2 - 1] != 'a')) {\n      if (is_match) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_match) {\n    return 1;\n  }\nLAB_00103202:\n  result = FUNC_00104fa0(data,arg2);\n  return result;\n}\n\n",
            "current_name": "check_compiler_version_00102fc3",
            "entrypoint": "0x00102fc3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fc3": "check_compiler_version_00102fc3",
                "__s": "string1",
                "__s_00": "string2",
                "bVar14": "is_match",
                "cVar1": "last_char",
                "lVar4": "result1",
                "lVar5": "result2",
                "param_1": "arg1",
                "param_2": "arg2",
                "pcVar8": "substring1",
                "pcVar9": "substring2",
                "sVar6": "length1",
                "sVar7": "length2",
                "uVar10": "result",
                "uVar11": "file_offset_2",
                "uVar12": "sum1",
                "uVar13": "data",
                "uVar2": "length1",
                "uVar3": "flag",
                "unaff_R13": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fd2": {
            "additional_data": {
                "FUN_00102fd2": {
                    "1": "check_compiler_compatibility",
                    "2": "check_compatibility",
                    "3": "check_compiled_files",
                    "4": "check_binary_compatibility"
                },
                "__haystack": {
                    "1": "haystack"
                },
                "__needle": {
                    "1": "needle"
                },
                "__s": {
                    "1": "file1_str",
                    "2": "file1_string",
                    "5": "str1",
                    "8": "string1"
                },
                "__s_00": {
                    "1": "code_str2",
                    "2": "file2_string",
                    "5": "str2",
                    "8": "string2"
                },
                "__s_01": {
                    "1": "gnu_compiled"
                },
                "__s_02": {
                    "1": "gcc2_compiled"
                },
                "bVar13": {
                    "1": "compare_result",
                    "2": "check",
                    "4": "is_match",
                    "5": "is_equal",
                    "6": "is_less"
                },
                "cVar1": {
                    "1": "last_char_binary_1",
                    "14": "last_char",
                    "4": "last_character"
                },
                "lVar4": {
                    "1": "binary_info_1",
                    "2": "file1_length",
                    "6": "result1"
                },
                "lVar5": {
                    "1": "ptr2",
                    "2": "file2_length",
                    "6": "result2"
                },
                "param_1": {
                    "1": "input_1",
                    "2": "binary_path1",
                    "3": "input1",
                    "5": "binary1",
                    "7": "file1"
                },
                "param_2": {
                    "1": "binary_2",
                    "2": "binary_path2",
                    "3": "input2",
                    "5": "binary2",
                    "7": "file2"
                },
                "pcVar8": {
                    "1": "result1",
                    "2": "match_1"
                },
                "pcVar9": {
                    "1": "has_gcc2_compiled1",
                    "2": "needle2"
                },
                "sVar6": {
                    "1": "binary1_comp_options_len",
                    "2": "string_length_1",
                    "3": "file1_length",
                    "4": "length1",
                    "6": "len1"
                },
                "sVar7": {
                    "1": "length_2",
                    "2": "string_length_2",
                    "3": "file2_length",
                    "4": "length2",
                    "6": "len2"
                },
                "uVar10": {
                    "1": "file1_hash",
                    "21": "result",
                    "3": "comparison_result"
                },
                "uVar11": {
                    "1": "length_2",
                    "2": "offset2"
                },
                "uVar12": {
                    "1": "sum1",
                    "2": "offset_1"
                },
                "uVar2": {
                    "1": "length2"
                },
                "uVar3": {
                    "1": "file2_flag",
                    "17": "flag"
                },
                "unaff_R13": {
                    "1": "param2_size",
                    "3": "temp"
                }
            },
            "called": [
                "abort",
                "FUN_00106530",
                "strstr",
                "strlen",
                "FUN_00104fa0"
            ],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\nulong check_binary_compatibility_00102fd2(undefined8 file1,undefined8 file2)\n\n{\n  char last_char;\n  ulong offset_2;\n  char *string1;\n  char *string2;\n  uint flag;\n  long result1;\n  long result2;\n  size_t len1;\n  size_t len2;\n  char *found_string1;\n  char *found_string2;\n  ulong result;\n  ulong offset2;\n  ulong offset1;\n  long temp;\n  bool is_less;\n  \n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file1,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file2,DAT_0010b768);\n  if ((result1 == 0) || (temp = result2, result2 == 0)) {\n    result2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  offset_2 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  offset1 = *(long *)(result1 + 0x10) + result;\n  offset2 = *(long *)(temp + 0x10) + offset_2;\n  is_less = offset1 < offset2;\n  if ((offset1 != offset2) || (is_less = result < offset_2, result != offset_2)) {\n    return (ulong)(-(uint)is_less | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(temp + 8);\n  len1 = strlen(string1);\n  len2 = strlen(string2);\n  found_string1 = strstr(string1,\"gnu_compiled\");\n  if (found_string1 == (char *)0x0) {\n    found_string2 = strstr(string1,\"gcc2_compiled\");\n    found_string1 = strstr(string2,\"gnu_compiled\");\n    if ((found_string1 == (char *)0x0) && (found_string1 = strstr(string2,\"gcc2_compiled\"), found_string1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (found_string2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    found_string1 = strstr(string2,\"gnu_compiled\");\n    if (found_string1 == (char *)0x0) {\n      found_string2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (found_string2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(temp + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((len1 < 3) || (string1[len1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((len2 < 3) || (string2[len2 - 2] != '.')) goto LAB_00103202;\n      is_less = false;\n      goto LAB_001031e7;\n    }\n    last_char = string1[len1 - 1];\n    is_less = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((len2 < 3) || (string2[len2 - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (len2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[len2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_less = true;\nLAB_001031e7:\n    if ((string2[len2 - 1] != 'o') && (string2[len2 - 1] != 'a')) {\n      if (is_less) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_less) {\n    return 1;\n  }\nLAB_00103202:\n  result = FUNC_00104fa0(file1,file2);\n  return result;\n}\n\n",
            "current_name": "check_binary_compatibility_00102fd2",
            "entrypoint": "0x00102fd2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fd2": "check_binary_compatibility_00102fd2",
                "__s": "string1",
                "__s_00": "string2",
                "bVar13": "is_less",
                "cVar1": "last_char",
                "lVar4": "result1",
                "lVar5": "result2",
                "param_1": "file1",
                "param_2": "file2",
                "pcVar8": "found_string1",
                "pcVar9": "found_string2",
                "sVar6": "len1",
                "sVar7": "len2",
                "uVar10": "result",
                "uVar11": "offset2",
                "uVar12": "offset1",
                "uVar2": "offset_2",
                "uVar3": "flag",
                "unaff_R13": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103238": {
            "additional_data": {
                "DAT_0010b7b0": {
                    "1": "last_section_data"
                },
                "FUN_00103238": {
                    "1": "find_and_print_matches",
                    "2": "find_matching_sections",
                    "3": "find_matching_strings",
                    "8": "process_data"
                },
                "__ptr": {
                    "1": "current_section",
                    "13": "ptr",
                    "3": "section_ptr",
                    "6": "section_pointer"
                },
                "__s1": {
                    "1": "current_section_name",
                    "2": "str",
                    "4": "section_name",
                    "5": "string"
                },
                "_stdout": {
                    "2": "output_stream"
                },
                "cVar3": {
                    "1": "variable3",
                    "11": "result",
                    "3": "char_value",
                    "4": "comparison_result",
                    "5": "char_var"
                },
                "iVar4": {
                    "1": "var4",
                    "2": "int_value",
                    "4": "int_var",
                    "7": "strcmp_result",
                    "8": "comparison_result"
                },
                "lVar2": {
                    "1": "section_size",
                    "2": "section_addr",
                    "3": "var2"
                },
                "lVar7": {
                    "1": "loop_index",
                    "2": "counter",
                    "3": "section_index"
                },
                "param_10": {
                    "1": "section_index",
                    "10": "param_value",
                    "2": "param3",
                    "3": "parameter_10",
                    "4": "param_10"
                },
                "param_12": {
                    "1": "param_address",
                    "2": "parameter12",
                    "3": "parameter_12",
                    "4": "section_name"
                },
                "plVar1": {
                    "1": "ptr_iterator",
                    "2": "section_entry"
                },
                "pvVar5": {
                    "1": "pointer1",
                    "2": "section_data",
                    "3": "ptr2"
                },
                "uVar6": {
                    "1": "string_index",
                    "11": "index",
                    "6": "section_index",
                    "9": "counter"
                },
                "unaff_R13": {
                    "1": "base_pointer",
                    "2": "register_r13",
                    "3": "r13_value"
                },
                "unaff_RBX": {
                    "1": "reg1",
                    "2": "value1",
                    "3": "rbx_value"
                }
            },
            "called": [
                "xmalloc",
                "bfd_map_over_sections",
                "free",
                "FUN_00103c00"
            ],
            "calling": [
                "FUN_00105110"
            ],
            "code": "\n\n\nvoid process_data_00103238(void)\n\n{\n  long *section_data;\n  void *ptr;\n  char *string;\n  long section_address;\n  char result;\n  int comparison_result;\n  long rbx_value;\n  void *section_data_array;\n  uint index;\n  long r13_value;\n  long section_index;\n  ulong param_value;\n  void *param2;\n  \n  section_data_array = DAT_0010b750;\n  if (_DAT_0010b7b0 == r13_value) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    index = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; index < DAT_0010b748; index = index + 1) {\n        ptr = *(void **)((long)section_data_array + (ulong)index * 8);\n        if (ptr != (void *)0x0) {\n          free(ptr);\n        }\n      }\n      free(DAT_0010b740);\n      free(section_data_array);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(r13_value + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  param2 = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = r13_value;\nLAB_00103296:\n  string = *(char **)(rbx_value + 8);\n  index = 0;\n  do {\n    if (DAT_0010b748 <= index) {\n      putc(10,output_stream);\n      return;\n    }\n    section_data_array = DAT_0010b738;\n    for (section_index = 0; section_data = (long *)((long)section_data_array + (ulong)index * 8),\n        *section_data != section_index && section_index <= *section_data; section_index = section_index + 1) {\n      section_data = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)index * 8) + section_index * 8);\n      if ((((section_data != (long *)0x0) &&\n           (section_address = *section_data, *(long *)(section_address + 0x20) == *(long *)(rbx_value + 0x20))) &&\n          (*(long *)(section_address + 0x10) == *(long *)(rbx_value + 0x10))) &&\n         (((comparison_result = strcmp(string,*(char **)(section_address + 8)), comparison_result == 0 &&\n           (result = (**(code **)(*(long *)(r13_value + 8) + 0x240))(), section_data_array = DAT_0010b738,\n           result != '\\0')) && (param2 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",param2,param_value >> 0x20);\n        index = DAT_0010b748;\n        break;\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_data_00103238",
            "entrypoint": "0x00103238",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103238": "process_data_00103238",
                "__ptr": "ptr",
                "__s1": "string",
                "_stdout": "output_stream",
                "cVar3": "result",
                "iVar4": "comparison_result",
                "lVar2": "section_address",
                "lVar7": "section_index",
                "param_10": "param_value",
                "param_12": "param2",
                "plVar1": "section_data",
                "pvVar5": "section_data_array",
                "uVar6": "index",
                "unaff_R13": "r13_value",
                "unaff_RBX": "rbx_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103463": {
            "additional_data": {
                "FUN_00103463": {
                    "1": "find_and_print_matching_items",
                    "2": "find_matching_record",
                    "3": "process_data",
                    "4": "find_and_print_matches"
                },
                "FUN_00106530": {
                    "1": "initialize",
                    "2": "execute_function"
                },
                "cVar3": {
                    "1": "is_equal",
                    "2": "char_result",
                    "7": "result",
                    "9": "comparison_result"
                },
                "iVar4": {
                    "1": "int_variable4",
                    "11": "comparison_result",
                    "2": "strcmp_result",
                    "3": "string_comparison",
                    "5": "string_comparison_result"
                },
                "in_stack_00000050": {
                    "1": "stack_variable50",
                    "17": "line_number",
                    "3": "file_name",
                    "7": "filename"
                },
                "lVar2": {
                    "1": "temp_value",
                    "2": "current_address",
                    "3": "current_value"
                },
                "lVar5": {
                    "1": "global_address_pointer",
                    "2": "array_base",
                    "4": "base_address"
                },
                "lVar6": {
                    "1": "long_variable6",
                    "2": "loop_index",
                    "3": "current_index",
                    "9": "index"
                },
                "param_10": {
                    "1": "id",
                    "2": "record_id",
                    "9": "value"
                },
                "param_8": {
                    "1": "index",
                    "16": "counter",
                    "4": "count",
                    "7": "record_index"
                },
                "plVar1": {
                    "1": "current_data_pointer",
                    "2": "current_data",
                    "3": "current_record",
                    "5": "current_pointer"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "putc": {
                    "1": "print_character"
                },
                "putchar": {
                    "1": "print_character"
                },
                "strcmp": {
                    "2": "compare_strings"
                },
                "unaff_R12": {
                    "1": "file_name",
                    "11": "input_string",
                    "2": "record_name",
                    "6": "search_string"
                },
                "unaff_R13": {
                    "1": "function_addresses",
                    "2": "record_array",
                    "5": "function_pointers",
                    "7": "function_pointer",
                    "8": "file_pointer"
                },
                "unaff_R15": {
                    "1": "search_item",
                    "2": "data",
                    "3": "base_address"
                }
            },
            "called": [
                "putc",
                "strcmp",
                "printf",
                "FUN_00106530"
            ],
            "calling": [
                "FUN_00105110"
            ],
            "code": "\n\n\nvoid find_and_print_matches_00103463(void)\n\n{\n  long *current_pointer;\n  long current_record_value;\n  char comparison_result;\n  int comparison_result;\n  long base_address;\n  char *input_string;\n  undefined8 *file_pointer;\n  long index;\n  long base_address;\n  undefined8 counter;\n  ulong value;\n  long line_number;\n  \n  FUN_00106530(*file_pointer);\n  do {\n    counter._4_4_ = counter._4_4_ + 1;\n    if (DAT_0010b748 <= counter._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    base_address = DAT_0010b738;\n    for (index = 0; current_pointer = (long *)(base_address + (ulong)counter._4_4_ * 8),\n        *current_pointer != index && index <= *current_pointer; index = index + 1) {\n      current_pointer = **(long ***)(*(long *)(DAT_0010b750 + (ulong)counter._4_4_ * 8) + index * 8);\n      if ((((current_pointer != (long *)0x0) &&\n           (current_record_value = *current_pointer, *(long *)(current_record_value + 0x20) == *(long *)(base_address + 0x20))) &&\n          (*(long *)(current_record_value + 0x10) == *(long *)(base_address + 0x10))) &&\n         (((comparison_result = strcmp(input_string,*(char **)(current_record_value + 8)), comparison_result == 0 &&\n           (comparison_result = (**(code **)(file_pointer[1] + 0x240))(), base_address = DAT_0010b738, comparison_result != '\\0')) &&\n          (line_number != 0)))) {\n        printf(\"\\t%s:%u\",line_number,value >> 0x20);\n        counter._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "find_and_print_matches_00103463",
            "entrypoint": "0x00103463",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103463": "find_and_print_matches_00103463",
                "cVar3": "comparison_result",
                "iVar4": "comparison_result",
                "in_stack_00000050": "line_number",
                "lVar2": "current_record_value",
                "lVar5": "base_address",
                "lVar6": "index",
                "param_10": "value",
                "param_8": "counter",
                "plVar1": "current_pointer",
                "printf": "print_formatted_string",
                "putc": "print_character",
                "strcmp": "compare_strings",
                "unaff_R12": "input_string",
                "unaff_R13": "file_pointer",
                "unaff_R15": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010351b": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "FUN_0010351b": {
                    "1": "display_message",
                    "10": "print_function_name",
                    "2": "print_message_if_condition_false"
                },
                "__format": {
                    "1": "message",
                    "24": "format_string",
                    "4": "message_format"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid print_function_name_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_function_name_0010351b",
            "entrypoint": "0x0010351b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010351b": "print_function_name_0010351b"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103533": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "compare_and_execute_function"
                },
                "<param_1>": {
                    "1": "input_a"
                },
                "<param_2>": {
                    "1": "input_b"
                },
                "FUN_00103533": {
                    "1": "compare_and_invoke_function",
                    "15": "compare_and_execute",
                    "2": "compare_params",
                    "4": "compare_and_execute_function"
                },
                "param_1": {
                    "1": "value_1",
                    "2": "array_1",
                    "4": "first_input",
                    "9": "input1"
                },
                "param_2": {
                    "1": "value_2",
                    "2": "array_2",
                    "4": "second_input",
                    "9": "input2"
                },
                "uVar1": {
                    "18": "result",
                    "5": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\nulong compare_and_execute_00103533(undefined8 *input1,undefined8 *input2)\n\n{\n  ulong result;\n  \n  if ((ulong)input1[1] < (ulong)input2[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)input2[1] < (ulong)input1[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (*(code *)(&PTR_FUN_0010acc0)[DAT_0010b7f4])(*input1,*input2);\n  return result;\n}\n\n",
            "current_name": "compare_and_execute_00103533",
            "entrypoint": "0x00103533",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103533": "compare_and_execute_00103533",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103573": {
            "additional_data": {
                "*param_1": {
                    "1": "string"
                },
                "*param_2": {
                    "1": "text_param_2_value"
                },
                "*param_3": {
                    "1": "unused_value"
                },
                "*param_4": {
                    "1": "value_of_label"
                },
                "FUN_00103573": {
                    "1": "print_string_and_param",
                    "16": "print_strings",
                    "2": "print_formatted_strings",
                    "3": "print_params",
                    "5": "print_parameters"
                },
                "__format": {
                    "1": "format_string"
                },
                "param_1": {
                    "1": "header",
                    "11": "string1",
                    "2": "message_1",
                    "3": "string_param",
                    "6": "string_1"
                },
                "param_2": {
                    "1": "param",
                    "11": "string2",
                    "2": "message_2",
                    "6": "string_2"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "12": "unused_param",
                    "2": "param_3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "unused_param_4",
                    "2": "unused_param2",
                    "3": "format_param",
                    "5": "param4"
                },
                "printf": {
                    "1": "formatted_print",
                    "3": "print_formatted"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001053b0"
            ],
            "code": "\nvoid print_strings_00103573(undefined8 *string1,undefined8 *string2,undefined8 unused_param,undefined8 param4)\n\n{\n  if (string1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string1);\n  }\n  printf(\"%s:\",*string2,param4);\n  return;\n}\n\n",
            "current_name": "print_strings_00103573",
            "entrypoint": "0x00103573",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103573": "print_strings_00103573",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "unused_param",
                "param_4": "param4",
                "printf": "print_formatted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001035a2": {
            "additional_data": {
                " putchar": {
                    "1": "print_character"
                },
                "&DAT_0010712c": {
                    "1": "separator"
                },
                "&DAT_0010b238": {
                    "1": "format1"
                },
                "&DAT_0010b23d": {
                    "1": "format2"
                },
                "*(undefined8 *)(*unaff_RBX + 0x20)": {
                    "1": "string_ptr"
                },
                "*unaff_RBX": {
                    "1": "data"
                },
                "DAT_0010712c": {
                    "1": "data1"
                },
                "DAT_0010b238": {
                    "1": "format2",
                    "2": "format1"
                },
                "DAT_0010b23d": {
                    "1": "format3",
                    "2": "format2"
                },
                "FUN_001035a2": {
                    "1": "parse_and_display_info",
                    "10": "print_data",
                    "2": "print_info",
                    "3": "process_data",
                    "4": "print_information"
                },
                "FUN_00104740": {
                    "1": "process_data_with_parameters",
                    "2": "process_data",
                    "3": "print_data"
                },
                "FUN_001054d0": {
                    "1": "print_item",
                    "11": "print_value",
                    "2": "process_value"
                },
                "PRINTF": {
                    "1": "format_and_print"
                },
                "PUTCHAR": {
                    "1": "print_space"
                },
                "__c": {
                    "1": "character"
                },
                "__format": {
                    "1": "format_string"
                },
                "lVar1": {
                    "1": "temp_value",
                    "20": "value",
                    "3": "data_value"
                },
                "param_1": {
                    "1": "string_param"
                },
                "param_2": {
                    "1": "info_ptr_param"
                },
                "param_3": {
                    "1": "undefined_ptr_param"
                },
                "param_4": {
                    "1": "long_param"
                },
                "printf": {
                    "1": "print_formatted_text",
                    "15": "print_formatted",
                    "3": "print_string"
                },
                "putchar": {
                    "1": "put_char",
                    "10": "print_character",
                    "8": "print_char"
                },
                "unaff_RBX": {
                    "1": "info_ptr",
                    "2": "array_ptr",
                    "3": "data_ptr",
                    "4": "data",
                    "9": "data_pointer"
                }
            },
            "called": [
                "putchar",
                "printf",
                "FUN_001054d0",
                "FUN_00104740"
            ],
            "calling": [
                "FUN_001053c0"
            ],
            "code": "\nvoid print_data_001035a2(void)\n\n{\n  long *data_pointer;\n  long value;\n  \n  if (data_pointer[2] == 0) {\n    value = data_pointer[1];\n  }\n  else {\n    value = *(long *)(data_pointer[2] + 0x38);\n  }\n  if (value != 0) {\n    putchar(0x20);\n    if (data_pointer[2] == 0) {\n      value = data_pointer[1];\n    }\n    else {\n      value = *(long *)(data_pointer[2] + 0x38);\n    }\n    FUNC_001054d0(value);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*data_pointer + 8));\n  if (*(char *)(*data_pointer + 8) != '-') {\n    FUN_00104740(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*data_pointer + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*data_pointer + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*data_pointer + 0x20));\n  FUN_00104740(&DAT_0010712c);\n  return;\n}\n\n",
            "current_name": "print_data_001035a2",
            "entrypoint": "0x001035a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001035a2": "print_data_001035a2",
                "lVar1": "value",
                "printf": "print_formatted",
                "putchar": "print_character",
                "unaff_RBX": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001036a7": {
            "additional_data": {
                "*param_1": {
                    "1": "message_string_1"
                },
                "*param_2": {
                    "1": "message2_pointer"
                },
                "FUN_001036a7": {
                    "1": "print_string",
                    "11": "print_parameters",
                    "2": "print_formatted_strings",
                    "3": "print_message",
                    "4": "print_data"
                },
                "param_1": {
                    "1": "first_param",
                    "10": "message1",
                    "2": "label",
                    "5": "string1"
                },
                "param_2": {
                    "1": "data",
                    "10": "message2",
                    "2": "parameter2",
                    "5": "message_2"
                },
                "param_3": {
                    "1": "data1",
                    "2": "parameter3",
                    "4": "unused_parameter",
                    "5": "param_3",
                    "7": "unused_param"
                },
                "param_4": {
                    "1": "unused_parameter_two",
                    "2": "message3",
                    "3": "parameter4",
                    "5": "param_4",
                    "7": "param4"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [],
            "code": "\nvoid print_parameters_001036a7(undefined8 *message1,undefined8 *message2,undefined8 param3,undefined8 param4)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (message1 != (undefined8 *)0x0) {\n      printf(\"%s:\",*message1);\n    }\n    printf(\"%s:\",*message2,param4);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_parameters_001036a7",
            "entrypoint": "0x001036a7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001036a7": "print_parameters_001036a7",
                "param_1": "message1",
                "param_2": "message2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001036e0": {
            "additional_data": {
                "*param_1": {
                    "1": "tag_name_value"
                },
                "*param_2": {
                    "1": "default_tag_value"
                },
                "FUN_001036e0": {
                    "1": "print_string",
                    "25": "print_message",
                    "3": "print_formatted_message"
                },
                "param_1": {
                    "1": "logger_name",
                    "2": "module_name",
                    "3": "label",
                    "4": "title",
                    "5": "header"
                },
                "param_2": {
                    "1": "default_logger",
                    "16": "message",
                    "2": "class_name",
                    "4": "message2"
                },
                "printf": {
                    "1": "print_formatted_string"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001064a0"
            ],
            "code": "\nvoid print_message_001036e0(undefined8 *header,undefined8 *message)\n\n{\n  if (header != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*header);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "current_name": "print_message_001036e0",
            "entrypoint": "0x001036e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "header",
                "param_2": "message",
                "printf": "print_formatted_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010370a": {
            "additional_data": {
                " FUN_00106300": {
                    "1": "print_message"
                },
                "DAT_00": {
                    "1": "unknown_msg"
                },
                "DAT_0010b23d": {
                    "1": "some_other_data"
                },
                "DAT_0010b728": {
                    "1": "dat_0010b728"
                },
                "DAT_0010b730": {
                    "1": "dat_0010b730"
                },
                "DAT_0010b7a8": {
                    "1": "some_data"
                },
                "FUN_0010370a": {
                    "1": "print_type_info",
                    "10": "print_symbol_information",
                    "14": "print_symbol_info",
                    "3": "print_symbol_details"
                },
                "FUN_001054d0": {
                    "1": "some_function"
                },
                "FUN_00106300": {
                    "1": "print_error_msg"
                },
                "PL_00": {
                    "1": "print_width_msg"
                },
                "PL_01": {
                    "1": "symbol_pointer"
                },
                "PTR_00": {
                    "1": "ptr_translation"
                },
                "PTR_01": {
                    "1": "ptr_error_msg"
                },
                "VAR_0": {
                    "1": "symbol_class"
                },
                "VAR_1": {
                    "1": "symbol_type"
                },
                "VAR_2": {
                    "1": "symbol_name"
                },
                "VAR_3": {
                    "1": "section_type"
                },
                "VAR_4": {
                    "1": "section_name"
                },
                "VAR_5": {
                    "1": "symbol_value"
                },
                "VAR_6": {
                    "1": "symbol_scope"
                },
                "VAR_7": {
                    "1": "unknown_value"
                },
                "__errno_location": {
                    "2": "get_errno_location"
                },
                "asprintf": {
                    "1": "allocate_and_print"
                },
                "bVar8": {
                    "1": "specific_value",
                    "2": "byte_value",
                    "3": "type_byte",
                    "4": "symbol_type",
                    "7": "symbol_class"
                },
                "bfd_is_undefined_symclass": {
                    "1": "is_undefined_symclass"
                },
                "cVar1": {
                    "1": "flag_char",
                    "11": "is_undefined_symclass",
                    "16": "is_undefined"
                },
                "dcgettext": {
                    "1": "dcgettext"
                },
                "free": {
                    "1": "free"
                },
                "iVar3": {
                    "1": "format_result",
                    "17": "asprintf_result",
                    "2": "asprintf_ret_val",
                    "4": "asprintf_return_value"
                },
                "lVar7": {
                    "1": "second_argument",
                    "3": "symbol_data",
                    "7": "symbol_info"
                },
                "lvar7": {
                    "1": "temp_long"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "pcVar10": {
                    "1": "section_type",
                    "2": "symbol_type_name",
                    "3": "data_type",
                    "4": "symbol_class",
                    "9": "symbol_type"
                },
                "piVar5": {
                    "1": "error_num",
                    "16": "errno_location",
                    "2": "error_location",
                    "6": "error_number"
                },
                "plVar4": {
                    "30": "print_width"
                },
                "printf": {
                    "1": "printf"
                },
                "switch": {
                    "1": "switch_statement"
                },
                "uVar2": {
                    "1": "shifted_symbol_type",
                    "2": "symbol_class",
                    "3": "type_bits",
                    "7": "symbol_type"
                },
                "uVar6": {
                    "1": "xstrerror_return_value",
                    "2": "str_error",
                    "4": "error_message",
                    "7": "xstrerror_result"
                },
                "uVar9": {
                    "1": "rbx_value_lower32",
                    "11": "masked_rbx",
                    "2": "symbol_class",
                    "3": "mask"
                },
                "unaff_RBX": {
                    "1": "unaff_index",
                    "2": "input_rbx",
                    "4": "rbx",
                    "6": "rbx_value"
                },
                "xstrerror": {
                    "1": "get_error_string"
                }
            },
            "called": [
                "FUN_00106300",
                "dcgettext"
            ],
            "calling": [
                "FUN_001054d0"
            ],
            "code": "\nvoid print_symbol_info_0010370a(void)\n\n{\n  char is_undefined;\n  ushort symbol_type;\n  int asprintf_result;\n  long *print_width;\n  int *errno_location;\n  undefined8 xstrerror_result;\n  long symbol_info;\n  ulong rbx_value;\n  byte symbol_class;\n  ulong masked_rbx;\n  char *symbol_type;\n  \n  print_width = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  masked_rbx = rbx_value & 0xffffffff;\n  FUN_00106300(print_width,masked_rbx);\n  FUN_00104740(\"%-20s|\",print_width,0,masked_rbx);\n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*print_width + 8));\n  if (is_undefined == '\\0') {\n    FUNC_001054d0(*(undefined8 *)*print_width);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    print_formatted_output(\"        \");\n  }\n  else {\n    print_formatted_output(\"                \");\n  }\n  print_formatted_output(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*print_width + 8));\n  if (*(char *)(*print_width + 8) == '-') {\n    print_formatted_output(\"%18s|  \",*(undefined8 *)(*print_width + 0x20));\n    print_formatted_output(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*print_width + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (print_width[2] == 0) {\n    if (print_width[3] != 0) {\n      symbol_info = *(long *)(print_width[3] + 0x30);\n      is_undefined = *(char *)(symbol_info + 0x28);\n      if (is_undefined == 'g') goto LAB_00103983;\n      if (is_undefined == 'h') {\n        symbol_type = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        symbol_type = \"Block\";\n      }\n      else if (*(ushort *)(symbol_info + 0x26) == 0) {\n        symbol_type = \"None\";\n      }\n      else {\n        symbol_type = *(ushort *)(symbol_info + 0x26) >> 4 & 3;\n        if (symbol_type == 2) {\n          symbol_type = \"Function\";\n        }\n        else if (symbol_type == 3) {\n          symbol_type = \"Array\";\n        }\n        else {\n          if (symbol_type != 1) {\n            free_memory(DAT_0010b730);\n            symbol_type = *(ushort *)(symbol_info + 0x26);\n            symbol_class = *(byte *)(symbol_info + 0x28);\n            symbol_type = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintf_result = allocate_and_print(&DAT_0010b730,symbol_type,(ulong)symbol_class,(ulong)symbol_type);\n            symbol_type = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbol_type = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    print_formatted_output(\"                  |\");\n  }\n  else {\n    symbol_class = *(byte *)(print_width[2] + 0x48) & 0xf;\n    switch_statement(symbol_class) {\n    case 0:\n      symbol_type = \"NOTYPE\";\n      break;\n    case 1:\n      symbol_type = \"OBJECT\";\n      break;\n    case 2:\n      symbol_type = \"FUNC\";\n      break;\n    case 3:\n      symbol_type = \"SECTION\";\n      break;\n    case 4:\n      symbol_type = \"FILE\";\n      break;\n    case 5:\n      symbol_type = \"COMMON\";\n      break;\n    case 6:\n      symbol_type = \"TLS\";\n      break;\n    default:\n      free_memory(DAT_0010b728);\n      symbol_type = \"<processor specific>: %d\";\n      if ((2 < symbol_class - 0xd) && (symbol_type = \"<OS specific>: %d\", 2 < symbol_class - 10)) {\n        symbol_type = \"<unknown>: %d\";\n      }\n      symbol_type = (char *)dcgettext(0,symbol_type,5);\n      asprintf_result = allocate_and_print(&DAT_0010b728,symbol_type,(ulong)symbol_class);\n      symbol_type = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintf_result < 0) {\n        errno_location = __errno_location();\n        xstrerror_result = get_error_string(*errno_location);\n        FUN_00106300(&DAT_0010712d,xstrerror_result);\nLAB_00103983:\n        symbol_type = \"File\";\n      }\n    }\nLAB_001039c0:\n    print_formatted_output(\"%18s|\",symbol_type);\n  }\n  if (print_width[2] == 0) {\n    if (print_width[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      print_formatted_output(\"        \");\n    }\n    else {\n      print_formatted_output(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(print_width[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUNC_001054d0();\n  }\n  symbol_info = print_width[2];\n  if ((symbol_info != 0) || (symbol_info = print_width[3], symbol_info != 0)) {\n    print_formatted_output(\"|     |%s\",**(undefined8 **)(symbol_info + 0x20));\n    return;\n  }\nLAB_00103a54:\n  print_formatted_output(\"|     |\");\n  return;\n}\n\n",
            "current_name": "print_symbol_info_0010370a",
            "entrypoint": "0x0010370a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "__errno_location": "get_errno_location",
                "asprintf": "allocate_and_print",
                "bVar8": "symbol_class",
                "bfd_is_undefined_symclass": "is_undefined_symclass",
                "cVar1": "is_undefined",
                "dcgettext": "get_translation",
                "free": "free_memory",
                "iVar3": "asprintf_result",
                "lVar7": "symbol_info",
                "pcVar10": "symbol_type",
                "piVar5": "errno_location",
                "plVar4": "print_width",
                "printf": "print_formatted_output",
                "switch": "switch_statement",
                "uVar2": "symbol_type",
                "uVar6": "xstrerror_result",
                "uVar9": "masked_rbx",
                "unaff_RBX": "rbx_value",
                "xstrerror": "get_error_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103729": {
            "additional_data": {
                "DAT_0010b23d": {
                    "2": "format_string"
                },
                "DAT_0010b728": {
                    "1": "processor_specific_string"
                },
                "DAT_0010b730": {
                    "1": "unknown_string"
                },
                "DAT_0010b7a8": {
                    "1": "constant_value"
                },
                "FUN_00103729": {
                    "12": "print_symbol_information",
                    "19": "print_symbol_info"
                },
                "FUN_00104740": {
                    "1": "print_formatted"
                },
                "FUN_001054d0": {
                    "1": "print_value"
                },
                "FUN_00106300": {
                    "1": "handle_error"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "bVar7": {
                    "1": "symbol_binding",
                    "2": "sym_type",
                    "3": "byte_value",
                    "5": "type"
                },
                "bfd_is_undefined_symclass": {
                    "1": "is_undefined_sym_class"
                },
                "cVar1": {
                    "1": "is_defined",
                    "18": "is_undefined",
                    "2": "is_undefined_sym_class",
                    "4": "is_undefined_symclass"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "free": {
                    "1": "release_memory"
                },
                "iVar3": {
                    "1": "var2",
                    "11": "result",
                    "2": "format_result",
                    "4": "status",
                    "6": "asprintf_result"
                },
                "lVar6": {
                    "1": "symbol_address",
                    "2": "symbol_info",
                    "3": "ptr"
                },
                "param_1": {
                    "1": "symbols",
                    "10": "symbol_info",
                    "15": "symbol"
                },
                "param_1[2]": {
                    "1": "symbol_type"
                },
                "param_1[3]": {
                    "1": "extra_info"
                },
                "param_2": {
                    "1": "header",
                    "2": "data",
                    "3": "param_2",
                    "4": "format",
                    "6": "address",
                    "9": "param"
                },
                "pcVar8": {
                    "1": "type_str",
                    "2": "symbol_type_name",
                    "5": "type_string",
                    "7": "type_name"
                },
                "piVar4": {
                    "1": "error_num",
                    "10": "errno_location",
                    "2": "error_code",
                    "3": "error",
                    "4": "errno_ptr"
                },
                "printf": {
                    "1": "print"
                },
                "uVar2": {
                    "1": "type_value",
                    "2": "class_type",
                    "3": "class",
                    "4": "symbol_type",
                    "5": "sym_class",
                    "6": "symbol_class"
                },
                "uVar5": {
                    "1": "var4",
                    "11": "error_message",
                    "2": "err_msg",
                    "3": "error_msg",
                    "6": "error_string"
                },
                "xstrerror": {
                    "1": "get_error_string"
                }
            },
            "called": [
                "asprintf",
                "FUN_00106300",
                "__errno_location",
                "dcgettext",
                "printf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "free",
                "FUN_00104740",
                "xstrerror"
            ],
            "calling": [],
            "code": "\nvoid print_symbol_info_00103729(long *symbol,undefined8 param)\n\n{\n  char is_undefined;\n  ushort symbol_class;\n  int result;\n  int *errno_location;\n  undefined8 error_message;\n  long ptr;\n  byte type;\n  char *type_name;\n  \n  FUN_00104740(\"%-20s|\",symbol,0,param);\n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol + 8));\n  if (is_undefined == '\\0') {\n    FUNC_001054d0(*(undefined8 *)*symbol);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol + 8));\n  if (*(char *)(*symbol + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol_type == 0) {\n    if (extra_info != 0) {\n      ptr = *(long *)(extra_info + 0x30);\n      is_undefined = *(char *)(ptr + 0x28);\n      if (is_undefined == 'g') goto LAB_00103983;\n      if (is_undefined == 'h') {\n        type_name = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        type_name = \"Block\";\n      }\n      else if (*(ushort *)(ptr + 0x26) == 0) {\n        type_name = \"None\";\n      }\n      else {\n        symbol_class = *(ushort *)(ptr + 0x26) >> 4 & 3;\n        if (symbol_class == 2) {\n          type_name = \"Function\";\n        }\n        else if (symbol_class == 3) {\n          type_name = \"Array\";\n        }\n        else {\n          if (symbol_class != 1) {\n            free(DAT_0010b730);\n            symbol_class = *(ushort *)(ptr + 0x26);\n            type = *(byte *)(ptr + 0x28);\n            type_name = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            result = asprintf(&DAT_0010b730,type_name,(ulong)type,(ulong)symbol_class);\n            type_name = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          type_name = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    type = *(byte *)(symbol_type + 0x48) & 0xf;\n    switch(type) {\n    case 0:\n      type_name = \"NOTYPE\";\n      break;\n    case 1:\n      type_name = \"OBJECT\";\n      break;\n    case 2:\n      type_name = \"FUNC\";\n      break;\n    case 3:\n      type_name = \"SECTION\";\n      break;\n    case 4:\n      type_name = \"FILE\";\n      break;\n    case 5:\n      type_name = \"COMMON\";\n      break;\n    case 6:\n      type_name = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      type_name = \"<processor specific>: %d\";\n      if ((2 < type - 0xd) && (type_name = \"<OS specific>: %d\", 2 < type - 10)) {\n        type_name = \"<unknown>: %d\";\n      }\n      type_name = (char *)dcgettext(0,type_name,5);\n      result = asprintf(&DAT_0010b728,type_name,(ulong)type);\n      type_name = DAT_0010b728;\njoined_r0x00103964:\n      if (result < 0) {\n        errno_location = __errno_location();\n        error_message = xstrerror(*errno_location);\n        FUN_00106300(&DAT_0010712d,error_message);\nLAB_00103983:\n        type_name = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",type_name);\n  }\n  if (symbol_type == 0) {\n    if (symbol[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol_type + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUNC_001054d0();\n  }\n  ptr = symbol_type;\n  if ((ptr != 0) || (ptr = extra_info, ptr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(ptr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "current_name": "print_symbol_info_00103729",
            "entrypoint": "0x00103729",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "__errno_location": "get_errno_location",
                "bVar7": "type",
                "bfd_is_undefined_symclass": "is_undefined_sym_class",
                "cVar1": "is_undefined",
                "dcgettext": "get_translation",
                "free": "release_memory",
                "iVar3": "result",
                "lVar6": "ptr",
                "param_1": "symbol",
                "param_1[2]": "symbol_type",
                "param_1[3]": "extra_info",
                "param_2": "param",
                "pcVar8": "type_name",
                "piVar4": "errno_location",
                "printf": "print",
                "uVar2": "symbol_class",
                "uVar5": "error_message",
                "xstrerror": "get_error_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a66": {
            "called": [
                "FUN_0010651a"
            ],
            "calling": [
                "FUN_001064b0"
            ],
            "code": "\nvoid FUNC_00103a66(void)\n\n{\n  long unaff_RBX;\n  \n  if (*(long *)(unaff_RBX + 8) != 0) {\n    FUN_0010651a();\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "FUNC_00103a66",
            "entrypoint": "0x00103a66",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103a66": "FUNC_00103a66"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103a78": {
            "additional_data": {
                "FUN_00103a78": {
                    "1": "print_error_with_message",
                    "2": "print_error",
                    "24": "print_error_message",
                    "4": "handle_error"
                },
                "dcgettext": {
                    "1": "get_translated_message"
                },
                "uVar1": {
                    "1": "translated_error_message",
                    "17": "error_message"
                },
                "unaff_RBX": {
                    "1": "is_error",
                    "10": "error_flag",
                    "18": "error_code"
                },
                "unaff_retaddr": {
                    "1": "return_value",
                    "30": "return_address"
                }
            },
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_00106540"
            ],
            "code": "\n\n\nvoid print_error_message_00103a78(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_00103a78",
            "entrypoint": "0x00103a78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "dcgettext": "get_translated_message",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ab9": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103ab9",
            "entrypoint": "0x00103ab9",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103aba": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103aba",
            "entrypoint": "0x00103aba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103abb": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103abb",
            "entrypoint": "0x00103abb",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103abc": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103abc",
            "entrypoint": "0x00103abc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103abd": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103abd",
            "entrypoint": "0x00103abd",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103abe": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103abe",
            "entrypoint": "0x00103abe",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103abf": {
            "additional_data": {
                "FUN_00103abf": {
                    "1": "print_symbol_list",
                    "10": "print_symbol_info",
                    "3": "print_symbol_table",
                    "4": "print_symbols",
                    "9": "print_undefined_symbols"
                },
                "__format": {
                    "1": "format_string"
                },
                "dcgettext": {
                    "1": "get_translated_message",
                    "2": "get_translated_text",
                    "3": "get_translated_string"
                },
                "param_1": {
                    "1": "source",
                    "2": "executable_name",
                    "3": "filename",
                    "4": "library_name",
                    "6": "binary_name",
                    "8": "file_name"
                },
                "param_2": {
                    "1": "symbols",
                    "4": "symbol",
                    "6": "file_name",
                    "9": "symbol_name"
                },
                "pcVar1": {
                    "1": "symbol_text",
                    "13": "format_string",
                    "2": "symbol_format",
                    "5": "message"
                },
                "printf": {
                    "1": "print_formatted_text",
                    "3": "print_formatted",
                    "5": "print_formatted_string"
                }
            },
            "called": [
                "dcgettext",
                "printf"
            ],
            "calling": [],
            "code": "\nvoid print_symbol_info_00103abf(undefined8 file_name,undefined8 symbol_name)\n\n{\n  char *format_string;\n  \n  format_string = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    format_string = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  format_string = (char *)dcgettext(0,format_string,5);\n  printf(format_string,file_name,symbol_name);\n  format_string = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    format_string = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  format_string = (char *)dcgettext(0,format_string,5);\n  printf(format_string);\n  return;\n}\n\n",
            "current_name": "print_symbol_info_00103abf",
            "entrypoint": "0x00103abf",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103abf": "print_symbol_info_00103abf",
                "dcgettext": "get_translated_string",
                "param_1": "file_name",
                "param_2": "symbol_name",
                "pcVar1": "format_string",
                "printf": "print_formatted_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b2b": {
            "additional_data": {
                "FUN_00103b2b": {
                    "1": "print_if_uninitialized",
                    "2": "print_if_not_zero",
                    "3": "print_debug_message",
                    "8": "print_message"
                },
                "param_1": {
                    "1": "source",
                    "11": "message",
                    "2": "label",
                    "5": "module_name",
                    "6": "function_name"
                },
                "param_2": {
                    "1": "function_description",
                    "2": "function_name",
                    "3": "details",
                    "5": "tag",
                    "6": "message"
                },
                "printf": {
                    "1": "print_string",
                    "2": "format_and_print"
                },
                "return": {
                    "1": "void"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [],
            "code": "\nvoid print_message_00103b2b(undefined8 message,undefined8 message)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",message,message);\n    void;\n  }\n  void;\n}\n\n",
            "current_name": "print_message_00103b2b",
            "entrypoint": "0x00103b2b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103b2b": "print_message_00103b2b",
                "param_1": "message",
                "param_2": "message",
                "printf": "print_formatted",
                "return": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b49": {
            "additional_data": {
                "FUN_00103b49": {
                    "1": "extract_function_data",
                    "18": "initialize_data",
                    "4": "process_data"
                },
                "FUN_00104740": {
                    "1": "process_sub_function",
                    "16": "process_data",
                    "5": "copy_data"
                },
                "param_1": {
                    "1": "data1",
                    "2": "data_pointer",
                    "5": "data"
                },
                "param_2": {
                    "1": "output_array",
                    "2": "length"
                },
                "param_3": {
                    "1": "pointer_data",
                    "2": "result_pointer"
                },
                "param_4": {
                    "1": "data4",
                    "2": "param_4",
                    "8": "length"
                }
            },
            "called": [
                "FUN_00104740"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_00103b49(undefined8 data,undefined8 length)\n\n{\n  FUN_00104740(&DAT_0010712d,data,0,length);\n  return;\n}\n\n",
            "current_name": "initialize_data_00103b49",
            "entrypoint": "0x00103b49",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103b49": "initialize_data_00103b49",
                "param_1": "data",
                "param_2": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b5d": {
            "additional_data": {
                "FUN_00103b5d": {
                    "31": "print_matching_formats"
                },
                "__c": {
                    "1": "character"
                },
                "__format": {
                    "1": "error_message_format",
                    "2": "format_message",
                    "22": "format_string"
                },
                "__stream": {
                    "1": "error_stream",
                    "3": "output_stream"
                },
                "_stderr": {
                    "1": "stderr",
                    "2": "standard_error"
                },
                "_stdout": {
                    "1": "output_stream",
                    "2": "standard_output"
                },
                "dcgettext": {
                    "1": "get_msg_translation",
                    "2": "get_localized_text",
                    "4": "get_translated_string"
                },
                "fflush": {
                    "1": "flush_standard_output",
                    "2": "flush_stream",
                    "3": "flush_output"
                },
                "fprintf": {
                    "1": "print_formatted_output"
                },
                "fputc": {
                    "1": "write_char"
                },
                "free": {
                    "2": "free_memory"
                },
                "param_1": {
                    "1": "matching_formats",
                    "11": "format_strings",
                    "12": "formats",
                    "5": "format_list"
                },
                "plVar2": {
                    "1": "format_pointer",
                    "20": "current_format",
                    "3": "current_format_string",
                    "4": "current_string"
                },
                "uVar1": {
                    "1": "data",
                    "2": "default_format",
                    "3": "matching_format",
                    "6": "matching_formats"
                }
            },
            "called": [
                "dcgettext",
                "fprintf",
                "fflush",
                "fputc",
                "free"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\n\n\nvoid print_matching_formats_00103b5d(long *formats)\n\n{\n  undefined8 matching_formats;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  matching_formats = DAT_0010b820;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error_stream,format_string,matching_formats);\n  for (current_format = formats; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error_stream,\" %s\");\n  }\n  free_memory(formats);\n  fputc(10,standard_error_stream);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_00103b5d",
            "entrypoint": "0x00103b5d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "__format": "format_string",
                "_stderr": "standard_error_stream",
                "_stdout": "standard_output",
                "dcgettext": "get_translated_string",
                "fflush": "flush_output",
                "fprintf": "print_to_stderr",
                "fputc": "write_char_to_stderr",
                "free": "free_memory",
                "param_1": "formats",
                "plVar2": "current_format",
                "uVar1": "matching_formats"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103bec": {
            "additional_data": {
                "FUNKY_FUNCTION": {
                    "1": "get_negative_of_sum"
                },
                "FUN_00103bec": {
                    "1": "calculate_inverse",
                    "18": "calculate_result",
                    "8": "calculate_return_value"
                },
                "auVar2": {
                    "1": "output_data",
                    "10": "result",
                    "7": "output"
                },
                "iVar1": {
                    "1": "sum_result",
                    "3": "return_value",
                    "5": "negative_value",
                    "8": "negative_result"
                },
                "in_RAX": {
                    "1": "input_parameter",
                    "2": "return_value",
                    "4": "input",
                    "5": "input_value",
                    "7": "result"
                },
                "param_1": {
                    "1": "input_param1",
                    "2": "input1"
                },
                "param_2": {
                    "1": "input_param2",
                    "2": "input2"
                }
            },
            "called": [
                "FUN_00105050"
            ],
            "calling": [],
            "code": "\nundefined  [16] calculate_result_00103bec(void)\n\n{\n  int result;\n  undefined8 result;\n  undefined result [16];\n  \n  result = FUN_00105050();\n  result._0_4_ = -result;\n  result._4_4_ = 0;\n  result._8_8_ = result;\n  return result;\n}\n\n",
            "current_name": "calculate_result_00103bec",
            "entrypoint": "0x00103bec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bec": "calculate_result_00103bec",
                "auVar2": "result",
                "iVar1": "result",
                "in_RAX": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103bf6": {
            "additional_data": {
                "FUN_00103bf6": {
                    "1": "calculate_something",
                    "21": "calculate_result",
                    "4": "calculate_return_value"
                },
                "FUN_00104fa0": {
                    "1": "get_integer",
                    "2": "get_negative_value"
                },
                "auVar2": {
                    "1": "result_data",
                    "10": "return_value",
                    "2": "output_array",
                    "4": "result"
                },
                "iVar1": {
                    "1": "int_value",
                    "18": "result",
                    "2": "negative_result"
                },
                "in_RAX": {
                    "1": "input_val",
                    "2": "return_value",
                    "4": "result",
                    "5": "input_value"
                },
                "param_1": {
                    "1": "input_param1",
                    "3": "input1"
                },
                "param_2": {
                    "1": "input_param2",
                    "3": "input2"
                }
            },
            "called": [
                "FUN_00104fa0"
            ],
            "calling": [],
            "code": "\nundefined  [16] calculate_result_00103bf6(void)\n\n{\n  int result;\n  undefined8 input_value;\n  undefined return_value [16];\n  \n  result = FUNC_00104fa0();\n  return_value._0_4_ = -result;\n  return_value._4_4_ = 0;\n  return_value._8_8_ = input_value;\n  return return_value;\n}\n\n",
            "current_name": "calculate_result_00103bf6",
            "entrypoint": "0x00103bf6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bf6": "calculate_result_00103bf6",
                "auVar2": "return_value",
                "iVar1": "result",
                "in_RAX": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103c00": {
            "additional_data": {
                "*(byte *)(param_2 + 0x24)": {
                    "1": "reloc_flag"
                },
                "*(long **)*param_3": {
                    "1": "relocated_pointer"
                },
                "*(undefined8 **)(*param_3 + 8)": {
                    "1": "relocated_pointer1"
                },
                "*(undefined8 **)param_3[1]": {
                    "1": "relocated_pointer2"
                },
                "FUN_00103c00": {
                    "1": "process_reloc",
                    "10": "process_relocation",
                    "2": "process_binary",
                    "3": "update_relocation_info"
                },
                "FUN_00106530": {
                    "1": "do_something"
                },
                "LAB_00103c7c": {
                    "1": "check_reloc_value"
                },
                "auVar2": {
                    "1": "reloc_values",
                    "2": "auxiliary_var",
                    "3": "temp",
                    "6": "temp_array"
                },
                "bfd_canonicalize_reloc": {
                    "1": "canonicalize_reloc_entry",
                    "3": "canonicalize_reloc"
                },
                "bfd_get_reloc_upper_bound": {
                    "1": "get_relocation_upper_bound",
                    "2": "get_upper_bound",
                    "4": "get_reloc_upper_bound"
                },
                "lVar3": {
                    "1": "reloc_bound",
                    "2": "relocation_upper_bound",
                    "3": "reloc_size",
                    "4": "length",
                    "7": "reloc_upper_bound",
                    "9": "upper_bound"
                },
                "param_1": {
                    "1": "binary_memory",
                    "2": "buffer",
                    "3": "binary_data",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "input_length",
                    "2": "data",
                    "3": "data_size"
                },
                "param_3": {
                    "1": "buffer",
                    "2": "output_param",
                    "3": "reloc_info",
                    "6": "reloc_data"
                },
                "param_3[1]": {
                    "1": "relocated_data_offset"
                },
                "param_4": {
                    "1": "unused_arg1",
                    "2": "var4",
                    "3": "unused_param",
                    "8": "param4",
                    "9": "param_4"
                },
                "param_5": {
                    "1": "unused_param",
                    "2": "result",
                    "7": "param5",
                    "9": "param_5"
                },
                "puVar1": {
                    "1": "alloc_ptr",
                    "3": "ptr1",
                    "5": "reloc_ptr"
                },
                "uVar4": {
                    "1": "xmalloc_result",
                    "2": "temp_value1",
                    "3": "malloc_result",
                    "9": "allocated_memory"
                },
                "uVar5": {
                    "1": "canonicalize_result",
                    "15": "canonicalized_reloc",
                    "2": "canonicalized_result"
                },
                "xmalloc": {
                    "6": "allocate_memory"
                }
            },
            "called": [
                "xmalloc",
                "FUN_00106530",
                "bfd_get_reloc_upper_bound",
                "bfd_canonicalize_reloc"
            ],
            "calling": [
                "FUN_00103238"
            ],
            "code": "\nundefined8\nprocess_relocation_00103c00(undefined8 *input_data,long relocation_address,undefined (*reloc_data) [16],undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined8 *reloc_ptr;\n  undefined temp_array [16];\n  long upper_bound;\n  undefined8 allocated_memory;\n  undefined8 canonicalized_reloc;\n  \n  **(long **)*reloc_data = relocation_address;\n  if ((*(byte *)(relocation_address + 0x24) & 4) == 0) {\n    **(undefined8 **)(*reloc_data + 8) = 0;\n    **(undefined8 **)relocated_data_offset = 0;\n  }\n  else {\n    upper_bound = bfd_get_reloc_upper_bound();\n    if (-1 < upper_bound) {\n      reloc_ptr = *(undefined8 **)(*reloc_data + 8);\n      allocated_memory = xmalloc(upper_bound);\n      canonicalized_reloc = *(undefined8 *)(relocated_data_offset + 8);\n      *reloc_ptr = allocated_memory;\n      reloc_ptr = *(undefined8 **)relocated_data_offset;\n      canonicalized_reloc = bfd_canonicalize_reloc(input_data,relocation_address,**(undefined8 **)(*reloc_data + 8),canonicalized_reloc);\n      *reloc_ptr = canonicalized_reloc;\n      if (-1 < **(long **)relocated_data_offset) goto check_reloc_value;\n    }\n    FUN_00106530(*input_data);\n  }\ncheck_reloc_value:\n  upper_bound = *(long *)(*reloc_data + 8) + 8;\n  *(long *)relocated_data_offset = *(long *)relocated_data_offset + 8;\n  temp_array._8_4_ = (int)upper_bound;\n  temp_array._0_8_ = *(long *)*reloc_data + 8;\n  temp_array._12_4_ = (int)((ulong)upper_bound >> 0x20);\n  *reloc_data = temp_array;\n  return param_5;\n}\n\n",
            "current_name": "process_relocation_00103c00",
            "entrypoint": "0x00103c00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103c00": "process_relocation_00103c00",
                "LAB_00103c7c": "check_reloc_value",
                "auVar2": "temp_array",
                "bfd_canonicalize_reloc": "canonicalize_relocation",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "lVar3": "upper_bound",
                "param_1": "input_data",
                "param_2": "relocation_address",
                "param_3": "reloc_data",
                "param_3[1]": "relocated_data_offset",
                "puVar1": "reloc_ptr",
                "uVar4": "allocated_memory",
                "uVar5": "canonicalized_reloc",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ca0": {
            "additional_data": {
                "FUN_00103ca0": {
                    "1": "print_help",
                    "2": "print_symbol_options",
                    "4": "print_symbol_list",
                    "6": "display_usage",
                    "9": "print_usage"
                },
                "___whence": {
                    "1": "whence"
                },
                "__c": {
                    "1": "character"
                },
                "__format": {
                    "1": "format"
                },
                "__off": {
                    "1": "offset"
                },
                "__ptr": {
                    "1": "ptr_var1",
                    "28": "target_list"
                },
                "__s": {
                    "1": "string"
                },
                "__status": {
                    "1": "status"
                },
                "__stream": {
                    "1": "stream"
                },
                "bfd_target_list": {
                    "1": "get_supported_targets"
                },
                "dcgettext": {
                    "1": "get_localized_text",
                    "2": "get_translated_text"
                },
                "exit": {
                    "1": "exit_program",
                    "4": "terminate_program"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "fputc": {
                    "1": "write_character_to_file",
                    "2": "put_character"
                },
                "free": {
                    "2": "free_memory",
                    "3": "release_memory"
                },
                "fseek": {
                    "1": "seek_in_file"
                },
                "iVar2": {
                    "1": "print_result",
                    "2": "fprintf_return_value",
                    "3": "total_chars",
                    "8": "total_length"
                },
                "iVar3": {
                    "1": "additional_length",
                    "2": "fprintf_return_value2",
                    "3": "chars_printed",
                    "6": "length"
                },
                "lVar1": {
                    "1": "supported_target",
                    "2": "language_version",
                    "5": "supported_targets",
                    "6": "target_name",
                    "7": "target"
                },
                "lVar5": {
                    "1": "current_char",
                    "10": "index",
                    "2": "counter"
                },
                "local_3c": {
                    "1": "count",
                    "2": "leading_spaces",
                    "3": "spaces",
                    "5": "space_count"
                },
                "param_1": {
                    "2": "file_pointer",
                    "20": "output_file",
                    "7": "file"
                },
                "param_2": {
                    "1": "status",
                    "13": "exit_status",
                    "17": "exit_code"
                },
                "pcVar4": {
                    "1": "translation",
                    "13": "message",
                    "2": "format_string",
                    "7": "text"
                },
                "pcVar9": {
                    "1": "demangler_separator",
                    "13": "delimiter",
                    "15": "separator"
                },
                "plVar7": {
                    "1": "ptr_iterator",
                    "3": "ptr_target",
                    "5": "target",
                    "6": "ptr",
                    "7": "target_ptr"
                },
                "ppcVar8": {
                    "1": "ptr_to_demangler",
                    "2": "demangler_list",
                    "5": "demangler_ptr",
                    "8": "demangler"
                },
                "sVar6": {
                    "1": "message_length",
                    "18": "string_length",
                    "4": "symbol_length"
                },
                "strlen": {
                    "1": "calculate_string_length",
                    "4": "get_string_length"
                }
            },
            "called": [
                "FUN_00102450",
                "dcgettext",
                "fprintf",
                "fseek",
                "fputc",
                "exit",
                "bfd_target_list",
                "strlen",
                "free"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid print_usage_00103ca0(FILE *output_file,int exit_code)\n\n{\n  long target;\n  int total_length;\n  int length;\n  char *message;\n  long index;\n  size_t string_length;\n  long *target_list;\n  long *target_ptr;\n  char **demangler;\n  char *separator;\n  uint local_variable;\n  \n  target = DAT_0010b820;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(output_file,message,target);\n  message = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*message == ' ') {\n    target = 1;\n    do {\n      index = target;\n      target = index + 1;\n    } while (message[index] == ' ');\n    local_variable = (uint)index;\n  }\n  else {\n    local_variable = 0;\n  }\n  total_length = fprintf(output_file,\"%s\",message);\n  separator = \"\";\n  for (demangler = (char **)&libiberty_demanglers; *demangler != (char *)0x0; demangler = demangler + 3) {\n    string_length = strlen(*demangler);\n    if (0x4a < (long)total_length + string_length) {\n      fprintf(output_file,\"%.1s\\n\",separator);\n      separator = \"\";\n      total_length = fprintf(output_file,\"%.*s\",(ulong)local_variable,message);\n    }\n    length = fprintf(output_file,\"%s\\\"%s\\\"\",separator,*demangler);\n    total_length = total_length + length;\n    separator = \", \";\n  }\n  fputc(10,output_file);\n  message = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(output_file,message);\n  target = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  target_ptr = target_list;\n  while( true ) {\n    target = *target_ptr;\n    target_ptr = target_ptr + 1;\n    if (target == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminate_program(exit_code);\n}\n\n",
            "current_name": "print_usage_00103ca0",
            "entrypoint": "0x00103ca0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ca0": "print_usage_00103ca0",
                "__ptr": "target_list",
                "bfd_target_list": "get_target_list",
                "dcgettext": "get_translated_text",
                "exit": "terminate_program",
                "fprintf": "print_to_output",
                "fputc": "put_character",
                "free": "release_memory",
                "iVar2": "total_length",
                "iVar3": "length",
                "lVar1": "target",
                "lVar5": "index",
                "local_3c": "local_variable",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar4": "message",
                "pcVar9": "separator",
                "plVar7": "target_ptr",
                "ppcVar8": "demangler",
                "sVar6": "string_length",
                "strlen": "get_string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104370": {
            "additional_data": {
                "DAT_0010b7c0": {
                    "1": "error_flag"
                },
                "FUN_00104370": {
                    "1": "identify_output_format",
                    "14": "process_output_format",
                    "2": "convert_output_format",
                    "3": "format_output",
                    "4": "get_output_format"
                },
                "FUN_00104397": {
                    "1": "process_param",
                    "2": "process_data",
                    "3": "process_format",
                    "6": "process_output"
                },
                "FUN_00106300": {
                    "1": "print_invalid_format",
                    "3": "print_invalid_format_error",
                    "4": "print_invalid_format_warning"
                },
                "FUN_00106400": {
                    "1": "print_ordinary_file_warning",
                    "4": "print_file_warning"
                },
                "F_00106300": {
                    "1": "print_invalid_output_format"
                },
                "PTR_FUN_0010ace0": {
                    "1": "default_output_format"
                },
                "caseD_4a": {
                    "1": "get_file_data4a",
                    "2": "process_case4a"
                },
                "dcgettext": {
                    "1": "translate_message",
                    "2": "get_translated_string",
                    "3": "get_error_message"
                },
                "param_1": {
                    "1": "output_type",
                    "2": "input_data",
                    "3": "input_format",
                    "4": "format_specifier",
                    "6": "input",
                    "7": "output_format"
                },
                "param_2": {
                    "1": "input_length",
                    "2": "data",
                    "4": "param2",
                    "8": "param"
                },
                "param_3": {
                    "1": "output_type",
                    "2": "format_type"
                },
                "ppuVar2": {
                    "1": "output_ptr",
                    "2": "result_ptr",
                    "22": "result"
                },
                "switch": {
                    "1": "format_switch"
                },
                "switchD_00104393::caseD_4a": {
                    "1": "switch_case_d_4a",
                    "2": "handle_case4a"
                },
                "uVar1": {
                    "1": "warning_msg",
                    "22": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "FUN_00106300",
                "dcgettext",
                "FUN_00104397",
                "caseD_4a"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nundefined ** process_output_format_00104370(undefined *output_format,undefined8 param)\n\n{\n  undefined8 error_message;\n  undefined **result;\n  \n  format_switch(*output_format) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_FUN_0010b260 = (undefined *)&PTR_FUN_0010ace0;\n    return &PTR_FUN_0010ace0;\n  default:\n    error_message = dcgettext(0,\"%s: invalid output format\",5);\n    FUN_00106300(error_message,output_format);\n    error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    FUN_00106400(error_message);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    result = (undefined **)FUN_00104397(output_format,param,3);\n    return result;\n  case 0x50:\n  case 0x70:\n    result = (undefined **)FUN_00104397(output_format,param,2);\n    return result;\n  case 0x53:\n  case 0x73:\n    result = (undefined **)FUN_00104397(output_format,param,1);\n    return result;\n  }\n}\n\n",
            "current_name": "process_output_format_00104370",
            "entrypoint": "0x00104370",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104370": "process_output_format_00104370",
                "dcgettext": "get_error_message",
                "param_1": "output_format",
                "param_2": "param",
                "ppuVar2": "result",
                "switch": "format_switch",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104397": {
            "additional_data": {
                "&PTR_FUN_0010ace0": {
                    "1": "pointer_to_function"
                },
                "DAT_0010b7c0": {
                    "1": "data"
                },
                "FUN_00104397": {
                    "1": "set_dat_and_ptr_fun",
                    "2": "initialize_pointer",
                    "3": "initialize_parameter",
                    "4": "initialize_param",
                    "9": "initialize_data"
                },
                "PTR_FUN_0010ace0": {
                    "1": "base_address",
                    "2": "function_pointer_array",
                    "4": "function_pointer"
                },
                "PTR_PTR_FUN_0010b260": {
                    "1": "initialized_pointer"
                },
                "param_1": {
                    "1": "new_value1",
                    "2": "data_pointer1",
                    "3": "arg1",
                    "8": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "data_pointer2",
                    "3": "value2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "initial_value",
                    "2": "param3",
                    "3": "value",
                    "4": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104370",
                "caseD_4a"
            ],
            "code": "\nvoid initialize_data_00104397(undefined8 param1,undefined8 param2,int index)\n\n{\n  DAT_0010b7c0 = index;\n  PTR_PTR_FUN_0010b260 = (undefined *)(&PTR_FUN_0010ace0 + (long)index * 5);\n  return;\n}\n\n",
            "current_name": "initialize_data_00104397",
            "entrypoint": "0x00104397",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104397": "initialize_data_00104397",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001043d0": {
            "additional_data": {
                "DAT_0010b260": {
                    "1": "bfd_functions"
                },
                "DAT_0010b7b0": {
                    "1": "bfd_error_state_2"
                },
                "DAT_0010b7b8": {
                    "1": "bfd_error_state_1"
                },
                "DAT_0010b7d0": {
                    "1": "bfd_plugin_flag",
                    "2": "is_plugin"
                },
                "DAT_0010b804": {
                    "1": "check_format_flag",
                    "2": "bfd_flag"
                },
                "FUN_00103b5d": {
                    "1": "print_archive_index"
                },
                "FUN_001043d0": {
                    "1": "check_file_and_load",
                    "19": "check_file",
                    "2": "check_file_stats",
                    "3": "check_and_process_file"
                },
                "FUN_00104670": {
                    "1": "close_bfd_file"
                },
                "FUN_001048e0": {
                    "1": "set_bfd_option"
                },
                "FUN_00106400": {
                    "1": "print_error_message"
                },
                "FUN_00106530": {
                    "1": "close_error_message"
                },
                "FUN_00106540": {
                    "1": "close_bfd_file_with_error"
                },
                "PTR_PTR_FUN_0010b260": {
                    "2": "function_pointers"
                },
                "_DAT_0010b7b0": {
                    "1": "flag5"
                },
                "_DAT_0010b7b8": {
                    "1": "resource_flag_2"
                },
                "_DAT_0010b7d0": {
                    "1": "flag1"
                },
                "_DAT_0010b7f0": {
                    "1": "bfd_flag2",
                    "2": "flag3"
                },
                "_DAT_0010b804": {
                    "1": "is_option_set"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "bfd_check_format": {
                    "1": "check_bfd_file_format"
                },
                "bfd_check_format_matches": {
                    "1": "check_bfd_file_format_matches"
                },
                "bfd_close": {
                    "1": "close_bfd_file_handle"
                },
                "bfd_get_next_mapent": {
                    "1": "get_bfd_next_map_entry"
                },
                "bfd_openr": {
                    "1": "open_bfd_file"
                },
                "cVar1": {
                    "1": "format_match",
                    "10": "format_check",
                    "3": "format_valid",
                    "5": "format_check_result",
                    "7": "check_result"
                },
                "dcgettext": {
                    "1": "get_localized_text"
                },
                "iVar2": {
                    "1": "error_flag",
                    "11": "status",
                    "13": "result",
                    "6": "stat_result"
                },
                "lVar7": {
                    "1": "map_ent",
                    "2": "next_map_entry",
                    "9": "map_entry"
                },
                "local_c8": {
                    "5": "file_status",
                    "7": "file_stats",
                    "8": "file_stat",
                    "9": "file_info"
                },
                "param_1": {
                    "12": "filename",
                    "16": "file_path",
                    "3": "file_name"
                },
                "pcVar8": {
                    "1": "str_error",
                    "13": "error_message",
                    "2": "error_msg",
                    "4": "error_string",
                    "5": "error_reason"
                },
                "piVar4": {
                    "1": "error_num",
                    "11": "errno_ptr",
                    "2": "err_num_ptr",
                    "3": "error",
                    "4": "errno_location"
                },
                "printf": {
                    "1": "print"
                },
                "puVar10": {
                    "1": "archived_file_ptr2",
                    "2": "current_file_handle",
                    "5": "prev_archived_file",
                    "6": "previous_archived_file_handle"
                },
                "puVar5": {
                    "1": "message"
                },
                "puVar6": {
                    "1": "file",
                    "12": "bfd_handle",
                    "2": "bfd_ptr",
                    "4": "file_descriptor",
                    "8": "file_handle"
                },
                "puVar9": {
                    "1": "archived_file_descriptor",
                    "12": "archived_file_handle",
                    "2": "archived_file_ptr"
                },
                "stat": {
                    "1": "get_file_stat"
                },
                "strerror": {
                    "1": "get_error_description"
                },
                "uVar3": {
                    "1": "return_val",
                    "10": "result",
                    "16": "return_value",
                    "2": "success"
                },
                "uVar5": {
                    "1": "warning_msg",
                    "10": "error_message",
                    "2": "error_msg",
                    "7": "message",
                    "8": "warning_message"
                }
            },
            "called": [
                "FUN_0010351b",
                "bfd_get_error",
                "__errno_location",
                "bfd_openr_next_archived_file",
                "dcgettext",
                "bfd_check_format",
                "FUN_00104670",
                "bfd_get_next_mapent",
                "FUN_00103b5d",
                "FUN_00106400",
                "FUN_00106540",
                "FUN_001048e0",
                "FUN_00106530",
                "printf",
                "bfd_close",
                "stat",
                "bfd_openr",
                "FUN_00104740",
                "FUN_00102670",
                "strerror",
                "bfd_check_format_matches",
                "FUN_001062d0",
                "FUN_0010249f"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nundefined4 check_file_001043d0(char *file_path)\n\n{\n  char format_check;\n  int result;\n  undefined4 return_value;\n  int *errno_ptr;\n  undefined8 error_message;\n  undefined8 *bfd_handle;\n  long map_entry;\n  char *error_message;\n  undefined8 *archived_file_handle;\n  undefined8 *previous_archived_file_handle;\n  get_file_stat file_info;\n  \n  if (file_path != (char *)0x0) {\n    result = get_file_stat(file_path,&file_info);\n    if (result < 0) {\nLAB_00102522:\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00106400(error_message,file_path);\n      }\n      else {\n        error_message = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00106400(error_message,file_path,error_message);\n      }\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00106400(error_message,file_path);\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x8000) {\n      if (file_info.st_size < 0) {\n        error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        FUN_00106400(error_message,file_path);\n      }\n      else if (file_info.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          bfd_handle = (undefined8 *)bfd_openr(file_path,\"plugin\");\n        }\n        else {\n          bfd_handle = (undefined8 *)bfd_openr(file_path);\n        }\n        if (bfd_handle != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x8000;\n          }\n          format_check = bfd_check_format(bfd_handle,2);\n          if (format_check == '\\0') {\n            return_value = bfd_check_format_matches(bfd_handle,1,&file_info);\n            if ((char)return_value == '\\0') goto LAB_001025ac;\n            FUN_00104670(bfd_handle);\n            (**(code **)PTR_PTR_FUN_0010b260)(file_path);\n            FUN_001048e0(bfd_handle,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_FUN_0010b260 + 8))(*bfd_handle);\n            if ((_DAT_0010b7f0 != 0) &&\n               (map_entry = bfd_get_next_mapent(bfd_handle,0xffffffffffffffff,&file_info), map_entry != -1)) {\n              error_message = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(error_message);\n              do {\n                archived_file_handle = (undefined8 *)(**(code **)(bfd_handle[1] + 0x1e0))(bfd_handle,map_entry);\n                if (archived_file_handle == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_info.st_dev != 0) {\n                  FUN_00104740(&DAT_0010712d,0,*(long *)file_info.st_dev,bfd_handle);\n                  printf(\" in %s\\n\",*archived_file_handle);\n                }\n                map_entry = bfd_get_next_mapent(bfd_handle,map_entry,&file_info);\n              } while (map_entry != -1);\n            }\n            archived_file_handle = (undefined8 *)0x0;\n            do {\n              do {\n                previous_archived_file_handle = archived_file_handle;\n                archived_file_handle = (undefined8 *)bfd_openr_next_archived_file(bfd_handle,previous_archived_file_handle);\n                if (archived_file_handle == (undefined8 *)0x0) {\n                  result = bfd_get_error();\n                  if (result != 9) {\n                    FUN_00106530(*bfd_handle);\nLAB_00102516:\n                    FUN_00106530(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (previous_archived_file_handle != (undefined8 *)0x0) {\n                    bfd_close(previous_archived_file_handle);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                format_check = bfd_check_format_matches(archived_file_handle,1,&file_info);\n                if (format_check == '\\0') {\n                  FUN_00106540(*archived_file_handle);\n                  result = bfd_get_error();\n                  if (result == 0xd) {\n                    FUN_00103b5d(file_info.st_dev);\n                  }\n                }\n                else {\n                  FUN_00104670(archived_file_handle);\n                  (**(code **)(PTR_PTR_FUN_0010b260 + 0x10))(*bfd_handle,*archived_file_handle);\n                  FUN_001048e0(archived_file_handle,bfd_handle);\n                }\n              } while (previous_archived_file_handle == (undefined8 *)0x0);\n              bfd_close(previous_archived_file_handle);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (previous_archived_file_handle != archived_file_handle);\n          }\nLAB_001044b4:\n          return_value = 1;\n          while (format_check = bfd_close(bfd_handle), format_check == '\\0') {\n            FUN_00106530(file_path);\nLAB_001025ac:\n            FUN_00106540(file_path);\n            result = bfd_get_error();\n            if (result == 0xd) {\n              FUN_00103b5d(file_info.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return return_value;\n        }\n        FUN_00106540(file_path);\n      }\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00106400(error_message,file_path);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_file_001043d0",
            "entrypoint": "0x001043d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "__errno_location": "get_errno_location",
                "bfd_check_format": "check_bfd_file_format",
                "bfd_check_format_matches": "check_bfd_file_format_matches",
                "bfd_close": "close_bfd_file_handle",
                "bfd_get_next_mapent": "get_bfd_next_map_entry",
                "bfd_openr": "open_bfd_file",
                "cVar1": "format_check",
                "dcgettext": "get_localized_text",
                "iVar2": "result",
                "lVar7": "map_entry",
                "local_c8": "file_info",
                "param_1": "file_path",
                "pcVar8": "error_message",
                "piVar4": "errno_ptr",
                "printf": "print",
                "puVar10": "previous_archived_file_handle",
                "puVar6": "bfd_handle",
                "puVar9": "archived_file_handle",
                "stat": "get_file_stat",
                "strerror": "get_error_description",
                "uVar3": "return_value",
                "uVar5": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104670": {
            "additional_data": {
                "\"016\"": {
                    "1": "arch_value2"
                },
                "\"08\"": {
                    "1": "arch_value1"
                },
                "&DAT_001071ca": {
                    "1": "str2"
                },
                "&DAT_001071cd": {
                    "1": "str3"
                },
                "&DAT_001071d0": {
                    "1": "concatenation_string1"
                },
                "&DAT_001071d7": {
                    "1": "concatenation_string2"
                },
                "&DAT_0010b7a8": {
                    "1": "arch_size_data_addr"
                },
                "(-(uint)(iVar1 == 0) & 0x20) + 0x20": {
                    "1": "default_arch_size"
                },
                "(uint)(iVar1 == 0)": {
                    "1": "is_compare_zero"
                },
                "*pcVar4": {
                    "1": "arch_sub_string_pointer"
                },
                "BFD_ARCH_SIZE": {
                    "1": "architecture_size"
                },
                "DAT_001025f5": {
                    "1": "concat_strings"
                },
                "DAT_001071ca": {
                    "1": "arch_8"
                },
                "DAT_001071cd": {
                    "1": "arch_10"
                },
                "DAT_001071d0": {
                    "1": "concatenated_string_part1"
                },
                "DAT_001071d7": {
                    "1": "ptr_concatenated_string"
                },
                "DAT_0010b244": {
                    "1": "arch_value_ten",
                    "2": "constant_value",
                    "3": "constant2"
                },
                "DAT_0010b244 != 0x10": {
                    "1": "check_dat"
                },
                "DAT_0010b244 != 10": {
                    "1": "is_not_arch_value_ten_two"
                },
                "DAT_0010b244 < 0x11": {
                    "1": "check_arch_size"
                },
                "DAT_0010b244 == 8": {
                    "1": "check_arch_size8"
                },
                "DAT_0010b7a0": {
                    "1": "concatenated_name",
                    "4": "concatenated_string"
                },
                "DAT_0010b7a0 = (void *)concat(&DAT_001071d7,pcVar4,0,0)": {
                    "1": "new_arch_size_var"
                },
                "DAT_0010b7a8": {
                    "1": "arch_info_size",
                    "2": "arch_size_global",
                    "3": "architecture_size",
                    "4": "arch_size_result"
                },
                "DAT_0010b7a8 == -1": {
                    "1": "architecture_invalid"
                },
                "DAT_0010b7a8 == 0x20": {
                    "1": "arch_size_compare"
                },
                "DAT_0010b7c0": {
                    "1": "architecture_length",
                    "2": "constant",
                    "3": "constant1",
                    "4": "constant_value"
                },
                "DAT_0010b7c0 - 2U": {
                    "1": "constant_check"
                },
                "DAT_0010b7c0 - 2U < 2": {
                    "1": "check_config_var1"
                },
                "DAT_0010b7c0 == 0x20": {
                    "1": "is_constant_equal_to_twenty"
                },
                "DAT_0010b7c0_2U": {
                    "1": "modified_constant_value"
                },
                "DID_NOT_CHANGE": {
                    "1": "did_not_change"
                },
                "FUN_001025f5": {
                    "1": "concat_strings"
                },
                "FUN_00104670": {
                    "1": "determine_architecture",
                    "2": "get_architecture",
                    "3": "get_arch_size"
                },
                "bfd_get_arch_size": {
                    "1": "get_bfd_arch_size",
                    "3": "get_arch_size"
                },
                "bff_get_arch_size": {
                    "1": "get_arch_size_value"
                },
                "char": {
                    "1": "char_type"
                },
                "concat": {
                    "1": "join_strings",
                    "2": "combine_strings",
                    "5": "concatenate_strings"
                },
                "concat(&DAT_001071d7, pcVar4, 0, 0)": {
                    "1": "new_arch_value"
                },
                "concat(&DAT_001071d7, pcVar4, puVar3, 0)": {
                    "1": "final_arch_value"
                },
                "free": {
                    "2": "free_memory",
                    "5": "release_memory"
                },
                "free(DAT_0010b7a0)": {
                    "1": "free(architecture_ptr)"
                },
                "iVar1": {
                    "1": "architecture",
                    "17": "arch_size",
                    "2": "result",
                    "6": "architecture_size"
                },
                "param_1": {
                    "1": "binary_data",
                    "10": "input",
                    "2": "arg",
                    "3": "input_data",
                    "4": "input_param",
                    "5": "param"
                },
                "param_1 + 8": {
                    "1": "ptr_to_string"
                },
                "param_1+8": {
                    "1": "architecture_param_ptr"
                },
                "pcVar2": {
                    "1": "arch_size_substring",
                    "2": "arch64",
                    "3": "arch_ptr",
                    "5": "arch_string"
                },
                "pcVar2 == (char *)0x0": {
                    "1": "is_arch_sub_string_null"
                },
                "pcVar4": {
                    "1": "substring_result",
                    "2": "architecture_string",
                    "4": "substring"
                },
                "pcVar5": {
                    "1": "default_size"
                },
                "pcVar6": {
                    "1": "alternative_size"
                },
                "puVar3": {
                    "1": "arch_type",
                    "2": "ptr_concat",
                    "4": "concat_string"
                },
                "puVar3 = &DAT_001071d0": {
                    "1": "default_concat_string"
                },
                "strcmp": {
                    "8": "compare_strings"
                },
                "strcmp(pcVar4, \"mmo\")": {
                    "1": "compare_string"
                },
                "strstr": {
                    "1": "find_sub_string",
                    "7": "find_substring"
                },
                "undefined": {
                    "1": "undefined_type"
                },
                "undefined8": {
                    "1": "undefined_parameter8"
                }
            },
            "called": [
                "FUN_001025f5",
                "strcmp",
                "bfd_get_arch_size",
                "strstr",
                "free",
                "concat"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid extract_arch_size_00104670(long input)\n\n{\n  int arch_size;\n  char_type *arch_string;\n  undefined_type *concat_string;\n  char_type *substring;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    substring = **(char_type ***)(input + 8);\n    arch_string = strstr(substring,\"64\");\n    arch_size = 0x40;\n    if (arch_string == (char_type *)0x0) {\n      arch_size = strcmp(substring,\"mmo\");\n      arch_size = (-(uint)(arch_size == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = arch_size;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    substring = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    substring = \"08\";\n  }\n  else {\n    substring = \"016\";\n  }\n  concat_string = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        concat_string = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concatenate_strings(&DAT_001071d7,substring,0,0);\n          return;\n        }\n        concat_string = &DAT_001071cd;\n      }\n    }\n    else {\n      concat_string = (undefined_type *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concatenate_strings(&DAT_001071d7,substring,concat_string,0);\n  return;\n}\n\n",
            "current_name": "extract_arch_size_00104670",
            "entrypoint": "0x00104670",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104670": "extract_arch_size_00104670",
                "bfd_get_arch_size": "get_arch_size",
                "char": "char_type",
                "concat": "concatenate_strings",
                "free": "release_memory",
                "iVar1": "arch_size",
                "param_1": "input",
                "pcVar2": "arch_string",
                "pcVar4": "substring",
                "puVar3": "concat_string",
                "strcmp": "compare_strings",
                "strstr": "find_substring",
                "undefined": "undefined_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104740": {
            "additional_data": {
                "FUN_00104740": {
                    "1": "print_translated_string",
                    "15": "print_formatted_string",
                    "2": "print_decompiled_code",
                    "3": "print_formatted_message"
                },
                "__ptr": {
                    "1": "temporary_pointer_var",
                    "2": "result_ptr",
                    "3": "output_string",
                    "4": "result_pointer",
                    "5": "result_string"
                },
                "__s": {
                    "1": "pointer_char2",
                    "3": "char_pointer3"
                },
                "__s_00": {
                    "1": "char_var4",
                    "3": "temp_string2"
                },
                "acStack_39": {
                    "1": "config_array",
                    "10": "stack_array",
                    "2": "temp_array",
                    "8": "char_array"
                },
                "bVar15": {
                    "1": "zero_byte",
                    "2": "byte_value3",
                    "3": "byte_var15",
                    "5": "byte_var",
                    "7": "byte_var3"
                },
                "bVar2": {
                    "1": "byte_a",
                    "10": "byte1",
                    "2": "byte_value1",
                    "6": "byte_var2",
                    "7": "byte_var1"
                },
                "bVar3": {
                    "1": "second_byte_value",
                    "10": "byte2",
                    "2": "byte_value2",
                    "6": "byte_var3",
                    "7": "byte_var2"
                },
                "iVar4": {
                    "1": "index",
                    "14": "int_var",
                    "2": "int_value",
                    "5": "int_var4"
                },
                "lVar13": {
                    "1": "long_value_2",
                    "17": "long_var",
                    "2": "long1"
                },
                "param_1": {
                    "31": "format_string"
                },
                "param_2": {
                    "1": "pointer_list",
                    "2": "input_params",
                    "3": "data_pointer",
                    "4": "param_array",
                    "6": "pointer_array"
                },
                "param_3": {
                    "1": "symbol_name",
                    "2": "name",
                    "3": "name_pointer",
                    "4": "demangled_name"
                },
                "param_4": {
                    "1": "buffer",
                    "2": "context",
                    "3": "length"
                },
                "pcVar6": {
                    "1": "char_ptr_var",
                    "2": "ptr2",
                    "5": "char_pointer1"
                },
                "pcVar8": {
                    "1": "character_ptr2",
                    "2": "char_ptr2",
                    "5": "char_pointer2"
                },
                "puVar1": {
                    "1": "format_pointer_temp",
                    "2": "temp_pointer",
                    "4": "pointer1",
                    "7": "pointer_var1"
                },
                "puVar11": {
                    "1": "undefined_pointer",
                    "2": "ptr4",
                    "3": "ptr3",
                    "4": "pointer_var3"
                },
                "puVar12": {
                    "1": "current_pointer_var",
                    "2": "pointer4",
                    "3": "ptr4",
                    "4": "pointer_var4"
                },
                "puVar7": {
                    "1": "new_pointer2",
                    "2": "ptr3",
                    "4": "ptr2",
                    "5": "pointer_var2"
                },
                "sVar13": {
                    "1": "long1"
                },
                "sVar5": {
                    "1": "size_t_value",
                    "2": "str_len",
                    "3": "string_size",
                    "4": "size_var5",
                    "5": "string_length",
                    "6": "size_var",
                    "8": "size"
                },
                "uVar10": {
                    "1": "ulong_var_2",
                    "11": "ulong_var2",
                    "2": "unsigned_var2",
                    "3": "ulong2"
                },
                "uVar14": {
                    "1": "loop_size",
                    "13": "uint_var",
                    "2": "uint_var1",
                    "3": "uint1"
                },
                "uVar9": {
                    "1": "counter",
                    "12": "ulong_var",
                    "3": "ulong1",
                    "5": "ulong_var1"
                }
            },
            "called": [
                "FUN_00102739"
            ],
            "calling": [
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_00103b49",
                "FUN_001043d0",
                "FUN_001035a2"
            ],
            "code": "\n\n\nvoid print_formatted_string_00104740(char *format_string,long *pointer_array,undefined8 *demangled_name,long demangle_flag)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int int_var;\n  size_t size;\n  char *char_pointer1;\n  undefined8 *pointer_var2;\n  char *char_pointer2;\n  undefined8 *result_string;\n  ulong ulong_var;\n  undefined8 ulong_var2;\n  undefined *pointer_var3;\n  undefined8 *pointer_var4;\n  char *char_pointer3;\n  undefined8 *temp_string2;\n  long long_var;\n  uint uint_var;\n  byte byte_var3;\n  char stack_array [9];\n  \n  byte_var3 = 0;\n  if (demangled_name == (undefined8 *)0x0) {\n    demangled_name = *(undefined8 **)(*pointer_array + 0x10);\n    if (DAT_0010b234 == 0) {\n      FUN_00102739();\n      return;\n    }\nLAB_00104775:\n    pointer_var4 = demangled_name;\n    if (DAT_0010b814 == 0) {\n      char_pointer1 = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        pointer_var4 = demangled_name;\n        result_string = (undefined8 *)0x0;\n      }\n      else {\n        result_string = (undefined8 *)0x0;\n        if (demangled_name != (undefined8 *)0x0) goto LAB_0010269d;\n        pointer_var4 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      char_pointer1 = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)pointer_var4 == '\\0') ||\n         (demangled_name = (undefined8 *)bfd_demangle(demangle_flag,pointer_var4,DAT_0010b248),\n         demangled_name == (undefined8 *)0x0)) {\n        demangled_name = pointer_var4;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        result_string = (undefined8 *)0x0;\n      }\n      else {\n        pointer_var4 = demangled_name;\n        result_string = demangled_name;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    pointer_var4 = demangled_name;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(demangle_flag + 8) + 8) != 5) goto LAB_00104775;\n      char_pointer1 = strchr((char *)demangled_name,0x40);\n      if (char_pointer1 == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (pointer_array == (long *)0x0) {\n              result_string = (undefined8 *)0x0;\n              printf(format_string,demangled_name);\n            }\n            else {\n              if (pointer_array[2] != 0) {\n                FUN_001047d0();\n                return;\n              }\n              result_string = (undefined8 *)0x0;\n              printf(format_string,demangled_name);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *char_pointer1 = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          result_string = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    char_pointer1 = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    pointer_var4 = demangled_name;\n    result_string = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)demangled_name;\n      demangled_name = (undefined8 *)((long)demangled_name + 1);\n      if (byte1 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) && (byte1 < 0xc0));\n    size = strlen((char *)pointer_var4);\n    temp_string2 = DAT_0010b790;\n    if (_DAT_0010b798 < size * 9) {\n      free(DAT_0010b790);\n      size = strlen((char *)pointer_var4);\n      _DAT_0010b798 = size * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      temp_string2 = DAT_0010b790;\n    }\n    while( true ) {\n      pointer_var2 = DAT_0010b790;\n      byte1 = *(byte *)pointer_var4;\n      ptr1 = (undefined8 *)((long)pointer_var4 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)temp_string2 = byte1;\n          temp_string2 = (undefined8 *)((long)temp_string2 + 1);\n          pointer_var4 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)pointer_var4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            pointer_var2 = temp_string2;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uint_var = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long_var = 2;\n                goto LAB_00102917;\n              case 4:\n                int_var = isatty(1);\n                if (int_var == 0) {\n                  byte2 = *(byte *)((long)pointer_var4 + 1);\n                }\n                else {\n                  *(undefined *)(temp_string2 + 1) = 0;\n                  *temp_string2 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)pointer_var4 + 1);\n                  pointer_var2 = temp_string2 + 1;\n                }\n              case 2:\n                uint_var = 2;\n                sprintf((char *)pointer_var2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)pointer_var4 >> 2 & 7),\n                        (ulong)((*(byte *)pointer_var4 & 3) << 6 | byte2 & 0x3f));\n                pointer_var2 = (undefined8 *)((long)pointer_var2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint_var = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)pointer_var4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 3;\nLAB_00102a62:\n                  for (ulong_var = (ulong)uint_var; ulong_var != 0; ulong_var = ulong_var - 1) {\n                    *(undefined *)pointer_var2 = *(undefined *)pointer_var4;\n                    pointer_var4 = (undefined8 *)((long)pointer_var4 + (ulong)byte_var3 * -2 + 1);\n                    pointer_var2 = (undefined8 *)((long)pointer_var2 + (ulong)byte_var3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long_var = 3;\nLAB_00102917:\n                  ulong_var2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3c;\n                  }\n                  sprintf((char *)temp_string2,\"%c\",ulong_var2);\n                  *(undefined *)((long)temp_string2 + 3) = 0;\n                  pointer_var2 = (undefined8 *)(long_var + (long)pointer_var4);\n                  *(undefined2 *)((long)temp_string2 + 1) = 0x7830;\n                  char_pointer2 = (char *)((long)temp_string2 + 3);\n                  do {\n                    char_pointer3 = char_pointer2;\n                    byte1 = *(byte *)pointer_var4;\n                    pointer_var4 = (undefined8 *)((long)pointer_var4 + 1);\n                    sprintf(char_pointer3,\"%02x\",(ulong)byte1);\n                    char_pointer2 = char_pointer3 + 2;\n                  } while (pointer_var4 != pointer_var2);\n                  ulong_var2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong_var2 = 0x3e;\n                  }\n                  uint_var = (uint)long_var;\n                  sprintf(char_pointer3 + 2,\"%c\",ulong_var2);\n                  pointer_var2 = (undefined8 *)(char_pointer3 + 3);\n                  break;\n                case 4:\n                  int_var = isatty(1);\n                  if (int_var == 0) {\n                    byte2 = *(byte *)((long)pointer_var4 + 2);\n                  }\n                  else {\n                    *(undefined *)(temp_string2 + 1) = 0;\n                    *temp_string2 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)pointer_var4 + 2);\n                    pointer_var2 = temp_string2 + 1;\n                  }\n                case 2:\n                  uint_var = 3;\n                  sprintf((char *)pointer_var2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)pointer_var4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)pointer_var4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)pointer_var4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  pointer_var2 = (undefined8 *)((long)pointer_var2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (int_var = isatty(1), int_var != 0)) {\n                    *(undefined4 *)pointer_var2 = 0x6d305b1b;\n                    pointer_var2 = (undefined8 *)((long)pointer_var2 + 4);\n                    *(undefined *)pointer_var2 = 0;\n                  }\n                  break;\n                default:\n                  uint_var = 3;\n                }\n              }\n              else {\n                byte2 = *(byte *)((long)pointer_var4 + 3);\n                if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint_var = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long_var = 4;\n                  goto LAB_00102917;\n                case 4:\n                  int_var = isatty(1);\n                  if (int_var == 0) {\n                    byte2 = *(byte *)((long)pointer_var4 + 3);\n                  }\n                  else {\n                    *(undefined *)(temp_string2 + 1) = 0;\n                    *temp_string2 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)pointer_var4 + 3);\n                    pointer_var2 = temp_string2 + 1;\n                  }\n                case 2:\n                  uint_var = 4;\n                  int_var = sprintf((char *)pointer_var2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)pointer_var4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)pointer_var4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointer_var4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)pointer_var4 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointer_var4 + 2) & 3) << 6 | byte2 & 0x3f));\n                  pointer_var2 = (undefined8 *)((long)pointer_var2 + (long)int_var);\n                  goto LAB_00102a27;\n                default:\n                  uint_var = 4;\n                }\n              }\n            }\n            ulong_var = (ulong)(uint)((int)pointer_var2 - (int)temp_string2);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)temp_string2 = byte1;\n            uint_var = 1;\n            ulong_var = 1;\n          }\n          temp_string2 = (undefined8 *)((long)temp_string2 + ulong_var);\n          pointer_var4 = (undefined8 *)((long)ptr1 + (ulong)(uint_var - 1));\n        }\n      }\n      else {\n        *(undefined *)temp_string2 = 0x5e;\n        *(byte *)((long)temp_string2 + 1) = byte1 + 0x40;\n        temp_string2 = (undefined8 *)((long)temp_string2 + 2);\n        pointer_var4 = ptr1;\n      }\n    }\n    *(undefined *)temp_string2 = 0;\n    pointer_var4 = pointer_var2;\n  }\njoined_r0x00104864:\n  if ((((pointer_array != (long *)0x0) && (pointer_array[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((char_pointer2 = (char *)(**(code **)(*(long *)(demangle_flag + 8) + 0x220))\n                                  (demangle_flag,pointer_array[2],0,stack_array), char_pointer2 != (char *)0x0 &&\n      (*char_pointer2 != '\\0')))) {\n    pointer_var3 = &DAT_001071e0;\n    if ((stack_array[0] == '\\0') && (*(long *)(pointer_array[2] + 0x20) != 0x10c2a8)) {\n      pointer_var3 = &DAT_001071df;\n    }\n    result_string = (undefined8 *)reconcat(result_string,pointer_var4,pointer_var3,char_pointer2,0);\n    pointer_var4 = result_string;\n  }\n  printf(format_string,pointer_var4);\n  if (char_pointer1 != (char *)0x0) {\n    *char_pointer1 = '@';\n  }\nLAB_001047ba:\n  free(result_string);\n  return;\n}\n\n",
            "current_name": "print_formatted_string_00104740",
            "entrypoint": "0x00104740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104740": "print_formatted_string_00104740",
                "__ptr": "result_string",
                "__s": "char_pointer3",
                "__s_00": "temp_string2",
                "acStack_39": "stack_array",
                "bVar15": "byte_var3",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "int_var",
                "lVar13": "long_var",
                "param_1": "format_string",
                "param_2": "pointer_array",
                "param_3": "demangled_name",
                "param_4": "demangle_flag",
                "pcVar6": "char_pointer1",
                "pcVar8": "char_pointer2",
                "puVar1": "ptr1",
                "puVar11": "pointer_var3",
                "puVar12": "pointer_var4",
                "puVar7": "pointer_var2",
                "sVar5": "size",
                "uVar10": "ulong_var2",
                "uVar14": "uint_var",
                "uVar9": "ulong_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001047d0": {
            "additional_data": {
                "DAT_0010b234": {
                    "1": "flag",
                    "2": "condition"
                },
                "FUN_001047d0": {
                    "1": "print_result",
                    "13": "print_and_free",
                    "2": "print_message",
                    "3": "print_formatted_output"
                },
                "free": {
                    "2": "deallocate"
                },
                "pcVar1": {
                    "1": "reconcat_output",
                    "3": "reconcat_result",
                    "6": "result"
                },
                "printf": {
                    "2": "print"
                },
                "reconcat": {
                    "2": "reconcatenate"
                },
                "unaff_R12": {
                    "1": "null_pointer",
                    "10": "flag_ptr",
                    "2": "status_flag",
                    "4": "output_flag"
                },
                "unaff_R13": {
                    "1": "concatenated_string_arg",
                    "2": "reconstructed_string_ptr",
                    "3": "reconcat_result",
                    "4": "concatenated_string"
                },
                "unaff_R14": {
                    "1": "print_format",
                    "2": "format_str",
                    "27": "format_string"
                },
                "unaff_R15": {
                    "1": "function_ptr_address",
                    "2": "input_data",
                    "3": "function_ptr",
                    "4": "function_context"
                },
                "unaff_RBX": {
                    "1": "buffer",
                    "3": "reconcatenated_string",
                    "4": "reconstructed_string",
                    "6": "reconcat_result",
                    "8": "concatenated_string"
                }
            },
            "called": [
                "printf",
                "reconcat",
                "free"
            ],
            "calling": [
                "FUN_0010268b",
                "FUN_00102739"
            ],
            "code": "\nvoid print_and_free_001047d0(void)\n\n{\n  char *result;\n  void *concatenated_string;\n  undefined *flag_ptr;\n  void *concatenated_string;\n  char *format_string;\n  long function_pointer;\n  \n  if (((DAT_0010b234 != 0) &&\n      (result = (char *)(**(code **)(*(long *)(function_pointer + 8) + 0x220))(), result != (char *)0x0))\n     && (*result != '\\0')) {\n    concatenated_string = (void *)reconcatenate();\n    concatenated_string = concatenated_string;\n  }\n  printf(format_string,concatenated_string);\n  if (flag_ptr != (undefined *)0x0) {\n    *flag_ptr = 0x40;\n  }\n  deallocate(concatenated_string);\n  return;\n}\n\n",
            "current_name": "print_and_free_001047d0",
            "entrypoint": "0x001047d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001047d0": "print_and_free_001047d0",
                "free": "deallocate",
                "pcVar1": "result",
                "printf": "print",
                "reconcat": "reconcatenate",
                "unaff_R12": "flag_ptr",
                "unaff_R13": "concatenated_string",
                "unaff_R14": "format_string",
                "unaff_R15": "function_pointer",
                "unaff_RBX": "concatenated_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001048e0": {
            "additional_data": {
                "DAT_0010acc0": {
                    "1": "constant_dat0010acc0"
                },
                "DAT_0010b230": {
                    "1": "constant_dat0010b230"
                },
                "DAT_0010b748": {
                    "1": "constant_var_20"
                },
                "DAT_0010b768": {
                    "1": "constant_var_14"
                },
                "DAT_0010b770": {
                    "1": "constant_var_13"
                },
                "DAT_0010b778": {
                    "1": "constant_dat0010b778"
                },
                "DAT_0010b780": {
                    "1": "constant_dat0010b780"
                },
                "DAT_0010b788": {
                    "1": "constant_dat0010b788"
                },
                "DAT_0010b78c": {
                    "1": "constant_var_19"
                },
                "DAT_0010b794": {
                    "1": "constant_var_21"
                },
                "DAT_0010b7d8": {
                    "1": "constant_var_15"
                },
                "DAT_0010b7e4": {
                    "1": "constant_var_18"
                },
                "DAT_0010b7e8": {
                    "1": "constant_var_6"
                },
                "DAT_0010b7f4": {
                    "1": "constant_var_8"
                },
                "DAT_0010b7f8": {
                    "1": "constant_var_7"
                },
                "DAT_0010b7fc": {
                    "1": "constant_dat0010b7fc"
                },
                "DAT_0010b800": {
                    "1": "constant_dat0010b800"
                },
                "DAT_0010b808": {
                    "1": "constant_var_16"
                },
                "DAT_0010b80c": {
                    "1": "constant_dat0010b80c"
                },
                "DAT_0010b810": {
                    "1": "constant_dat0010b810"
                },
                "DAT_0010b81c": {
                    "1": "constant_var_5"
                },
                "DC3_00103533": {
                    "1": "constant_var_23"
                },
                "DC3_0010acc0": {
                    "1": "constant_var_22"
                },
                "FUNC_00105110": {
                    "1": "function_pointer_1"
                },
                "FUN_001048e0": {
                    "1": "analyze_object_file",
                    "2": "decompiled_function"
                },
                "_DAT_0010b810": {
                    "1": "constant_var_4"
                },
                "bVar1": {
                    "1": "bit_flag",
                    "11": "byte_var",
                    "2": "byte_variable1",
                    "5": "flag",
                    "9": "byte_var1"
                },
                "bVar19": {
                    "1": "bool_value",
                    "16": "bool_var",
                    "2": "bool_variable",
                    "4": "bool_var19"
                },
                "bVar20": {
                    "1": "byte_value2",
                    "10": "byte_var2",
                    "3": "byte_var",
                    "4": "byte_var20",
                    "5": "byte_var_2"
                },
                "cVar3": {
                    "1": "char_flag",
                    "19": "char_var",
                    "4": "char_variable",
                    "5": "char_var3"
                },
                "dcgettext": {
                    "1": "message_localization"
                },
                "iVar4": {
                    "1": "int_value",
                    "2": "int_variable",
                    "20": "int_var",
                    "4": "int_var4"
                },
                "lVar10": {
                    "1": "long_var_10",
                    "12": "long_var2",
                    "4": "long_var10",
                    "6": "long_var_2"
                },
                "lVar7": {
                    "1": "l_var7",
                    "19": "long_var",
                    "4": "long_var7"
                },
                "local_40": {
                    "1": "local_var4",
                    "12": "local_array",
                    "2": "local_var_40"
                },
                "local_40 [2]": {
                    "1": "local_array40"
                },
                "local_48": {
                    "1": "local_48",
                    "2": "local_var_48",
                    "3": "local_pointer",
                    "5": "local_var_2",
                    "7": "local_var2"
                },
                "local_4c": {
                    "1": "uint_var_2",
                    "2": "local_variable4c",
                    "3": "local_var4c",
                    "5": "local_var_1",
                    "7": "local_var1"
                },
                "param_1": {
                    "1": "param_array_1",
                    "2": "parameters",
                    "3": "parameter1",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "input_param1",
                    "10": "param_2",
                    "12": "param2",
                    "3": "parameter2"
                },
                "param_3": {
                    "1": "third_param",
                    "10": "param_3",
                    "12": "param3",
                    "3": "parameter3"
                },
                "param_4": {
                    "1": "input_param3",
                    "10": "param_4",
                    "12": "param4",
                    "3": "parameter4"
                },
                "param_5": {
                    "1": "buffer",
                    "2": "output_array1",
                    "3": "param5"
                },
                "param_6": {
                    "1": "output_data_2",
                    "2": "output_array2",
                    "3": "parameter6",
                    "4": "param6"
                },
                "pcVar2": {
                    "1": "code_pointer",
                    "18": "function_pointer",
                    "2": "func_ptr",
                    "3": "function_ptr"
                },
                "ppuStack_78": {
                    "1": "temp_array3"
                },
                "ppuVar12": {
                    "1": "ulong_ptr_ptr_var12",
                    "2": "pointer_pointer3"
                },
                "ppuVar13": {
                    "1": "pointer_pointer_var4",
                    "2": "temp_pointer_4"
                },
                "ppuVar14": {
                    "1": "temp_array_ptr",
                    "2": "temp_pointer_5"
                },
                "ppuVar15": {
                    "1": "local_var6",
                    "2": "pointer_pointer6"
                },
                "ppuVar16": {
                    "1": "double_ptr_ptr7",
                    "2": "temp_pointer_7"
                },
                "ppuVar17": {
                    "1": "temp_pointer8",
                    "2": "pointer_to_pointer_variable8"
                },
                "ppuVar18": {
                    "1": "pointer_pointer_var_9",
                    "2": "pointer_pointer9"
                },
                "ppuVar8": {
                    "1": "double_ptr_ptr1",
                    "2": "local_var1",
                    "3": "pointer_to_pointer_variable1"
                },
                "ppuVar9": {
                    "1": "data_pointer2",
                    "2": "temp_pointer_2",
                    "3": "pointer_to_pointer_variable2"
                },
                "puVar11": {
                    "1": "pointer_1",
                    "3": "pointer_var11",
                    "5": "ptr_var",
                    "9": "pointer_var"
                },
                "qsort": {
                    "1": "sorting_function"
                },
                "strcmp": {
                    "1": "string_comparison"
                },
                "uVar5": {
                    "1": "uint_flag",
                    "20": "uint_var",
                    "3": "uint_variable",
                    "4": "uint_var5"
                },
                "uVar6": {
                    "1": "uint_var6",
                    "2": "undefined_var",
                    "3": "u_var6",
                    "5": "undefined8_var",
                    "8": "ulong_var"
                },
                "unaff_R14": {
                    "1": "ptr_ptr_u64_var_12",
                    "2": "unaffected_r14"
                },
                "unaff_R15": {
                    "1": "register_r15",
                    "2": "unaff_r15"
                },
                "unaff_RBP": {
                    "1": "ulong_ptr_ptr_unaff_rbp",
                    "2": "unaff_rbp",
                    "3": "unaffected_rbp"
                },
                "unaff_RBX": {
                    "1": "register_pointer_rbx",
                    "3": "unaff_rbx"
                },
                "xmalloc": {
                    "1": "dynamic_memory_allocation"
                }
            },
            "called": [
                "bfd_get_error",
                "FUN_00106400",
                "dcgettext",
                "FUN_00106530"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\n\n\nvoid decompiled_function_001048e0(ulong **input_data,undefined8 param2,undefined8 param3,undefined8 param4,\n                 ulong **parameter5,ulong **param6)\n\n{\n  byte byte_var;\n  code *function_pointer;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined8 ulong_var;\n  long long_var;\n  ulong **pointer_to_pointer_variable1;\n  ulong **pointer_to_pointer_variable2;\n  long long_var2;\n  ulong *pointer_var;\n  ulong **unaffected_rbx;\n  ulong **pointer_pointer3;\n  ulong **pointer_pointer4;\n  ulong **unaffected_rbp;\n  ulong **pointer_pointer5;\n  ulong **pointer_pointer6;\n  ulong **pointer_pointer7;\n  ulong **pointer_pointer8;\n  ulong **pointer_pointer9;\n  ulong **unaffected_r14;\n  ulong **unaffected_r15;\n  bool bool_var;\n  byte byte_var2;\n  ulong **stack_pointer1;\n  uint local_var1;\n  ulong *local_var2;\n  ulong **local_array [2];\n  \n  byte_var2 = 0;\n  local_var2 = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)input_data + 0x44) & 0x10) != 0)) {\n    pointer_to_pointer_variable2 = (ulong **)&local_var1;\n    pointer_to_pointer_variable1 = (ulong **)(*(code *)input_data[1][0x4d])(input_data,DAT_0010b80c != 0,local_array);\n    if ((long)pointer_to_pointer_variable1 < 0) {\n      if ((DAT_0010b80c != 0) && (int_var = bfd_get_error(), int_var == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        pointer_var = *input_data;\n        ulong_var = dcgettext(0,\"%s: no symbols\",5);\n        FUN_00106400(ulong_var,pointer_var);\n        return;\n      }\n      FUN_00106530(*input_data);\n      goto LAB_00102e9e;\n    }\n    if (pointer_to_pointer_variable1 != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (local_var1 == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byte_var = *(byte *)((long)input_data + 0x4a);\n      pointer_pointer4 = input_data;\n      do {\n        if ((byte_var & 0x10) != 0) {\n          unaffected_rbx = (ulong **)*pointer_pointer4;\n          DAT_0010b230 = '\\0';\n          ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          FUN_00106400(ulong_var);\n        }\n        pointer_pointer5 = local_array[0];\n        unaffected_r14 = (ulong **)(ulong)local_var1;\n        bool_var = DAT_0010b80c != 0;\n        pointer_to_pointer_variable2 = local_array[0];\n        unaffected_r15 = (ulong **)(*(code *)pointer_pointer4[1][0x41])(pointer_pointer4);\n        pointer_pointer3 = unaffected_rbx;\n        unaffected_rbp = (ulong **)(ulong)bool_var;\n        input_data = pointer_pointer4;\n        if (unaffected_r15 == (ulong **)0x0) goto LAB_00102ea7;\n        pointer_pointer8 = (ulong **)((long)pointer_to_pointer_variable1 * (long)unaffected_r14);\n        pointer_to_pointer_variable1 = (ulong **)((long)pointer_pointer5 + (long)pointer_pointer8);\n        input_data = pointer_pointer5;\n        pointer_pointer3 = pointer_pointer5;\njoined_r0x001049a4:\n        if (input_data < pointer_to_pointer_variable1) {\n          do {\n            pointer_to_pointer_variable2 = (ulong **)(*(code *)pointer_pointer4[1][0x4e])(pointer_pointer4,bool_var,input_data,unaffected_r15);\n            pointer_pointer8 = unaffected_r15;\n            if (pointer_to_pointer_variable2 == (ulong **)0x0) goto LAB_00102eb0;\n            pointer_var = pointer_to_pointer_variable2[1];\n            pointer_pointer8 = pointer_to_pointer_variable1;\n            if (((pointer_var == (ulong *)0x0) || (*(char *)pointer_var != '_')) ||\n               (*(char *)((long)pointer_var + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uint_var = (uint)(pointer_to_pointer_variable2[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uint_var == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(pointer_to_pointer_variable2 + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n                  param6 = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    char_var = (*(code *)pointer_pointer4[1][0x46])(pointer_pointer4,pointer_to_pointer_variable2);\n                    if (char_var != '\\0') {\n                      FUN_00102c19();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (pointer_to_pointer_variable2[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n                if ((pointer_to_pointer_variable2[4] == (ulong *)0x10c2a8) || (pointer_to_pointer_variable2[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                char_var = (*(code *)pointer_pointer4[1][0x46])(pointer_pointer4,pointer_to_pointer_variable2);\n                if (char_var != '\\0') {\n                  FUN_00102c19();\n                  return;\n                }\nLAB_00104a7b:\n                if (pointer_pointer3 != input_data) {\n                  if (unaffected_r14 == (ulong **)0x8) {\n                    *pointer_pointer3 = *input_data;\n                    FUN_001049c0();\n                    return;\n                  }\n                  for (; unaffected_r14 != (ulong **)0x0; unaffected_r14 = (ulong **)((long)unaffected_r14 + -1)) {\n                    *(undefined *)pointer_pointer3 = *(undefined *)input_data;\n                    input_data = (ulong **)((long)input_data + (ulong)byte_var2 * -2 + 1);\n                    pointer_pointer3 = (ulong **)((long)pointer_pointer3 + (ulong)byte_var2 * -2 + 1);\n                  }\n                  FUN_001049c0();\n                  return;\n                }\n                pointer_pointer3 = (ulong **)((long)pointer_pointer3 + (long)unaffected_r14);\n              }\n            }\n            else {\n              int_var = strcmp((char *)((long)pointer_var + (ulong)(*(char *)((long)pointer_var + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              stack_pointer1 = pointer_to_pointer_variable2;\n              if (int_var == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  stack_pointer1 = (ulong **)*pointer_pointer4;\n                  DAT_0010b230 = '\\0';\n                  ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(ulong_var,stack_pointer1);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uint_var = (*(uint *)(pointer_to_pointer_variable2 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(pointer_to_pointer_variable2 + 3) & 0x800082) != 0) || (pointer_to_pointer_variable2[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)pointer_to_pointer_variable2[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            input_data = (ulong **)((long)input_data + (long)unaffected_r14);\n            if (pointer_to_pointer_variable1 <= input_data) break;\n          } while( true );\n        }\n        pointer_pointer3 = (ulong **)((long)pointer_pointer3 - (long)pointer_pointer5);\n        if (unaffected_r14 == (ulong **)0x8) {\n          pointer_var = pointer_pointer4[1];\n          pointer_pointer5 = (ulong **)((long)pointer_pointer3 + 7);\n          if (-1 < (long)pointer_pointer3) {\n            pointer_pointer5 = pointer_pointer3;\n          }\n          parameter5 = (ulong **)(ulong)DAT_0010b800;\n          function_pointer = (code *)pointer_var[0x41];\n          pointer_pointer5 = (ulong **)((long)pointer_pointer5 >> 3);\n        }\n        else {\n          pointer_pointer5 = (ulong **)((long)pointer_pointer3 / (long)unaffected_r14);\n          pointer_var = pointer_pointer4[1];\n          function_pointer = (code *)pointer_var[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = pointer_pointer4;\n        DAT_0010b770 = (ulong **)(*function_pointer)(pointer_pointer4);\n        DAT_0010b768 = (ulong **)(*(code *)pointer_pointer4[1][0x41])(pointer_pointer4);\n        pointer_pointer3 = local_array[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          pointer_to_pointer_variable1 = (ulong **)(ulong)local_var1;\n          if (DAT_0010b7f8 != 0) {\n            bool_var = DAT_0010b80c != 0;\n            qsort(local_array[0],(size_t)pointer_pointer5,(size_t)pointer_to_pointer_variable1,FUN_00102fd2);\n            pointer_pointer8 = (ulong **)xmalloc((long)pointer_pointer5 << 4);\n            pointer_pointer9 = DAT_0010b770;\n            input_data = DAT_0010b768;\n            unaffected_r14 = (ulong **)((long)pointer_pointer5 * (long)pointer_to_pointer_variable1 + (long)pointer_pointer3);\n            pointer_to_pointer_variable2 = DAT_0010b770;\n            if (unaffected_r14 <= pointer_pointer3) goto LAB_00102ec2;\n            param6 = DAT_0010b768;\n            pointer_pointer5 = (ulong **)(*(code *)pointer_pointer4[1][0x4e])(pointer_pointer4,bool_var,pointer_pointer3);\n            parameter5 = pointer_to_pointer_variable1;\n            stack_pointer1 = pointer_pointer8;\n            if (pointer_pointer5 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(local_array[0],(size_t)pointer_pointer5,(size_t)pointer_to_pointer_variable1,\n                (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          pointer_var = pointer_pointer4[1];\nLAB_00104be2:\n          input_data = pointer_pointer4;\n          pointer_pointer9 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        FUN_00106530(*pointer_pointer4);\n        input_data = pointer_pointer4;\n        pointer_pointer3 = unaffected_r15;\n        while( true ) {\n          unaffected_rbx = (ulong **)xmalloc();\n          pointer_to_pointer_variable1 = (ulong **)(*(code *)input_data[1][0x6b])(input_data,unaffected_rbx);\n          pointer_to_pointer_variable2 = pointer_pointer8;\n          if (-1 < (long)pointer_to_pointer_variable1) break;\n          pointer_pointer4 = (ulong **)*input_data;\n          pointer_pointer5 = (ulong **)FUN_00106530(pointer_pointer4,pointer_pointer8);\nLAB_00102dbe:\n          pointer_var = pointer_pointer5[2];\n          pointer_to_pointer_variable2 = (ulong **)0x0;\nLAB_00102dc4:\n          pointer_var = (ulong *)((long)pointer_to_pointer_variable1[8] - (long)pointer_var);\n          pointer_pointer9 = input_data;\n          pointer_pointer6 = pointer_pointer3;\nLAB_00104ea7:\n          pointer_pointer5 = pointer_to_pointer_variable2;\n          pointer_pointer3 = unaffected_rbx;\n          input_data = param6;\n          if (pointer_var != (ulong *)0x0) {\n            *pointer_pointer8 = (ulong *)pointer_pointer6;\n            pointer_pointer8[1] = pointer_var;\n            pointer_pointer8 = pointer_pointer8 + 2;\n          }\nLAB_00104e35:\n          param6 = pointer_pointer9;\n          if (pointer_pointer3 < unaffected_r14) goto code_r0x00104e3e;\n          pointer_pointer5 = (ulong **)((long)pointer_pointer8 - (long)stack_pointer1 >> 4);\n          qsort(stack_pointer1,(size_t)pointer_pointer5,0x10,FUN_00103533);\n          pointer_var = pointer_pointer4[1];\n          input_data = pointer_pointer4;\n          pointer_pointer9 = stack_pointer1;\nLAB_00104be5:\n          unaffected_rbx = local_array[0];\n          pointer_to_pointer_variable1 = (ulong **)(ulong)DAT_0010b7f8;\n          unaffected_r14 = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            pointer_pointer8 = (ulong **)(*(code *)pointer_var[0x41])(input_data);\n            if (pointer_pointer8 == (ulong **)0x0) goto LAB_00102ed2;\n            pointer_pointer3 = pointer_pointer9 + (long)pointer_pointer5 * 2;\n            pointer_pointer5 = pointer_pointer9;\n            goto LAB_00104ee9;\n          }\n          pointer_to_pointer_variable1 = (ulong **)(ulong)local_var1;\n          unaffected_r15 = (ulong **)(*(code *)pointer_var[0x41])(input_data);\n          if (unaffected_r15 != (ulong **)0x0) {\n            unaffected_rbp = (ulong **)((long)pointer_pointer5 * (long)pointer_to_pointer_variable1 + (long)unaffected_rbx);\n            if (unaffected_rbx < unaffected_rbp) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          FUN_00106530(*input_data);\n          unaffected_r15 = pointer_pointer9;\nLAB_00102d06:\n          pointer_to_pointer_variable2 = pointer_to_pointer_variable1;\n          if (DAT_0010b80c != 0) {\n            unaffected_rbx = local_array[0];\n            pointer_pointer5 = (ulong **)0x0;\n            pointer_pointer8 = (ulong **)0x0;\n            break;\n          }\n          long_var2 = (*(code *)input_data[1][0x6a])(input_data);\n          pointer_pointer5 = local_array[0];\n          pointer_pointer8 = pointer_to_pointer_variable1;\n          pointer_pointer3 = unaffected_r15;\n          if (long_var2 < 1) {\n            pointer_to_pointer_variable1 = (ulong **)0x0;\n            unaffected_rbx = (ulong **)0x0;\n            break;\n          }\n        }\n        param6 = &local_var2;\n        parameter5 = unaffected_rbx;\n        long_var2 = (*(code *)input_data[1][0x6c])(input_data,pointer_pointer8,pointer_pointer5,pointer_to_pointer_variable1);\n        pointer_to_pointer_variable1 = pointer_to_pointer_variable2;\n        if (0 < long_var2) {\n          pointer_to_pointer_variable1 = (ulong **)((long)pointer_to_pointer_variable2 + long_var2);\n          local_array[0] = (ulong **)xrealloc(local_array[0]);\n          long_var = 0;\n          do {\n            local_array[0][(long)pointer_to_pointer_variable2 + long_var] = local_var2 + long_var * 6;\n            long_var = long_var + 1;\n          } while (long_var2 != long_var);\n          local_array[0][(long)pointer_to_pointer_variable2 + long_var2] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (unaffected_rbx != (ulong **)0x0)) {\n          free(unaffected_rbx);\n        }\nLAB_00102cc2:\n        byte_var = *(byte *)((long)input_data + 0x4a);\n        pointer_pointer4 = input_data;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    pointer_var = *input_data;\n    ulong_var = dcgettext(0,\"%s: no symbols\",5);\n    FUN_00106400(ulong_var,pointer_var);\n  }\n  return;\ncode_r0x00104b01:\n  input_data = (ulong **)((long)input_data + (long)unaffected_r14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaffected_rbx = (ulong **)((long)pointer_pointer3 + (long)parameter5);\n  if (unaffected_r14 <= unaffected_rbx) {\n    pointer_to_pointer_variable1 = (ulong **)pointer_pointer5[4];\n    if ((*(uint *)(pointer_pointer5 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    pointer_to_pointer_variable2 = (ulong **)0x0;\nLAB_00104e95:\n    pointer_pointer9 = input_data;\n    pointer_pointer6 = pointer_pointer3;\n    if (*(int *)(pointer_pointer4[1] + 1) == 5) {\n      pointer_var = pointer_pointer5[7];\n      goto LAB_00104ea7;\n    }\n    pointer_var = pointer_pointer5[2];\n    if ((*(byte *)((long)pointer_to_pointer_variable1 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaffected_r14 <= unaffected_rbx) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  pointer_to_pointer_variable1 = input_data;\n  pointer_pointer6 = parameter5;\n  pointer_pointer7 = param6;\n  pointer_to_pointer_variable2 = (ulong **)(*(code *)pointer_pointer4[1][0x4e])();\n  pointer_pointer9 = pointer_pointer3;\n  if (pointer_to_pointer_variable2 == (ulong **)0x0) goto LAB_00102edb;\n  pointer_to_pointer_variable1 = (ulong **)pointer_pointer5[4];\n  if ((*(uint *)(pointer_pointer5 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (pointer_pointer3 <= pointer_pointer5) {\nLAB_00104c75:\n    if (local_var2 == (ulong *)0x0) {\n      free(local_array[0]);\n      free(pointer_pointer9);\n      return;\n    }\n    free(local_var2);\n    free(local_array[0]);\n    free(pointer_pointer9);\n    return;\n  }\n  pointer_to_pointer_variable1 = pointer_pointer8;\n  long_var2 = (*(code *)input_data[1][0x4e])(input_data,unaffected_r14,*pointer_pointer5);\n  if (long_var2 == 0) goto LAB_00102ec9;\n  pointer_to_pointer_variable1 = pointer_pointer5 + 1;\n  pointer_pointer5 = pointer_pointer5 + 2;\n  FUN_00105110(input_data,long_var2,*pointer_to_pointer_variable1,param2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  FUN_00106530(*input_data,0);\nLAB_00102ed2:\n  pointer_pointer4 = (ulong **)*input_data;\n  FUN_00106530();\n  unaffected_rbx = pointer_pointer3;\n  pointer_pointer6 = parameter5;\n  pointer_pointer7 = param6;\nLAB_00102edb:\n  param6 = pointer_pointer7;\n  parameter5 = pointer_pointer6;\n  pointer_pointer4 = (ulong **)*pointer_pointer4;\n  pointer_to_pointer_variable2 = (ulong **)FUN_00106530();\n  pointer_pointer3 = pointer_pointer9;\nLAB_00102ee3:\n  pointer_var = pointer_pointer5[2];\nLAB_00102ee7:\n  if (pointer_to_pointer_variable1 != (ulong **)pointer_to_pointer_variable2[4]) goto LAB_00102dc4;\n  pointer_var = (ulong *)((long)pointer_to_pointer_variable2[2] - (long)pointer_var);\n  pointer_pointer9 = input_data;\n  pointer_pointer6 = pointer_pointer3;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (pointer_to_pointer_variable2 = unaffected_r15, long_var2 = (*(code *)input_data[1][0x4e])(input_data,unaffected_r14,unaffected_rbx),\n        long_var2 != 0) {\n    unaffected_rbx = (ulong **)((long)unaffected_rbx + (long)pointer_to_pointer_variable1);\n    FUN_00105110(input_data,long_var2,0,param2);\n    if (unaffected_rbp <= unaffected_rbx) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  FUN_00106530(*input_data);\n  pointer_pointer3 = unaffected_rbx;\nLAB_00102ea7:\n  pointer_pointer4 = unaffected_rbp;\n  FUN_00106530(*input_data);\n  pointer_pointer8 = unaffected_r15;\nLAB_00102eb0:\n  FUN_00106530(*pointer_pointer4);\n  pointer_pointer4 = input_data;\nLAB_00102eb9:\n  FUN_00106530(*pointer_pointer4);\n  input_data = param6;\nLAB_00102ec2:\n  pointer_pointer5 = (ulong **)0x0;\n  parameter5 = pointer_to_pointer_variable1;\n  pointer_pointer9 = pointer_to_pointer_variable2;\n  stack_pointer1 = pointer_pointer8;\n  goto LAB_00104e35;\n}\n\n",
            "current_name": "decompiled_function_001048e0",
            "entrypoint": "0x001048e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001048e0": "decompiled_function_001048e0",
                "bVar1": "byte_var",
                "bVar19": "bool_var",
                "bVar20": "byte_var2",
                "cVar3": "char_var",
                "dcgettext": "message_localization",
                "iVar4": "int_var",
                "lVar10": "long_var2",
                "lVar7": "long_var",
                "local_40": "local_array",
                "local_48": "local_var2",
                "local_4c": "local_var1",
                "param_1": "input_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "parameter5",
                "param_6": "param6",
                "pcVar2": "function_pointer",
                "ppuStack_78": "stack_pointer1",
                "ppuVar12": "pointer_pointer3",
                "ppuVar13": "pointer_pointer4",
                "ppuVar14": "pointer_pointer5",
                "ppuVar15": "pointer_pointer6",
                "ppuVar16": "pointer_pointer7",
                "ppuVar17": "pointer_pointer8",
                "ppuVar18": "pointer_pointer9",
                "ppuVar8": "pointer_to_pointer_variable1",
                "ppuVar9": "pointer_to_pointer_variable2",
                "puVar11": "pointer_var",
                "qsort": "sorting_function",
                "strcmp": "string_comparison",
                "uVar5": "uint_var",
                "uVar6": "ulong_var",
                "unaff_R14": "unaffected_r14",
                "unaff_R15": "unaffected_r15",
                "unaff_RBP": "unaffected_rbp",
                "unaff_RBX": "unaffected_rbx",
                "xmalloc": "dynamic_memory_allocation"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001049c0": {
            "additional_data": {
                "DAT_0010b7e8": {
                    "1": "flag2"
                },
                "FUN_001049c0": {
                    "1": "process_data",
                    "4": "process_lto_object"
                },
                "__ptr": {
                    "1": "pointer_var_7",
                    "2": "pointer"
                },
                "bVar16": {
                    "1": "is_flag_set",
                    "12": "bool_var",
                    "2": "bool_var16",
                    "3": "boolean_variable",
                    "5": "bool_variable"
                },
                "bVar17": {
                    "1": "b",
                    "14": "byte_var",
                    "3": "byte_var17",
                    "8": "byte_variable"
                },
                "bool": {
                    "1": ""
                },
                "byte": {
                    "1": ""
                },
                "byteCount": {
                    "1": "byte_count"
                },
                "cVar3": {
                    "1": "character_var",
                    "13": "char_var",
                    "2": "result",
                    "3": "character_variable",
                    "5": "char_variable"
                },
                "char": {
                    "1": ""
                },
                "charPointer1": {
                    "1": "char_pointer1"
                },
                "charVar": {
                    "1": "char_var"
                },
                "code": {
                    "1": ""
                },
                "codePointer": {
                    "1": "code_pointer"
                },
                "comparisonResult": {
                    "2": "comparison_result"
                },
                "currentFunction": {
                    "1": "current_function"
                },
                "currentObject": {
                    "1": "current_object"
                },
                "currentObjectIndex": {
                    "1": "current_index"
                },
                "errorString": {
                    "1": "error_message"
                },
                "flag": {
                    "1": "flag"
                },
                "functionArray": {
                    "1": "function_array"
                },
                "functionPointer": {
                    "1": "temp_function_pointer"
                },
                "iVar4": {
                    "1": "index",
                    "13": "int_var",
                    "3": "comparison_result",
                    "4": "int_variable",
                    "5": "integer_variable"
                },
                "in_R8": {
                    "1": "undefined8_ptr6",
                    "2": "size"
                },
                "in_R9": {
                    "1": "in_r9"
                },
                "in_stack_00000008": {
                    "1": "in_stack_variable",
                    "2": "in_stack_var1",
                    "3": "stack_variable1",
                    "4": "stack_var1"
                },
                "in_stack_00000010": {
                    "1": "parameter6",
                    "2": "in_stack_00000010",
                    "3": "stack_variable2",
                    "4": "stack_var2"
                },
                "in_stack_00000018": {
                    "1": "var_on_stack3",
                    "2": "in_stack_00000018",
                    "3": "stack_variable3",
                    "4": "stack_var3"
                },
                "in_stack_00000038": {
                    "1": "var4",
                    "2": "in_stack_var4",
                    "3": "stack_variable4",
                    "4": "stack_var4"
                },
                "in_stack_00000040": {
                    "1": "stack_param5",
                    "2": "in_stack_var5",
                    "3": "stack_variable5",
                    "4": "stack_var5"
                },
                "in_stack_00000048": {
                    "1": "stack_var_48",
                    "2": "stack_variable6",
                    "4": "stack_var6"
                },
                "index": {
                    "1": "current_index"
                },
                "int": {
                    "1": ""
                },
                "isObjectValid": {
                    "1": "current_object_is_valid"
                },
                "lVar7": {
                    "1": "long_variable1",
                    "15": "long_var",
                    "3": "index",
                    "7": "long_variable"
                },
                "lVar9": {
                    "1": "long_variable_2",
                    "2": "long_var1",
                    "3": "long_var9",
                    "6": "long_variable2",
                    "8": "long_var2"
                },
                "long": {
                    "1": ""
                },
                "longVar": {
                    "1": "long_var"
                },
                "objectArray": {
                    "1": "sorted_object_array"
                },
                "objectComparisonFunction": {
                    "1": "get_current_object_comparison_function"
                },
                "objectCount": {
                    "1": "object_count"
                },
                "objectIncrement": {
                    "1": "object_increment"
                },
                "objectName": {
                    "1": "current_object_name"
                },
                "objectSize": {
                    "1": "object_size"
                },
                "pcVar1": {
                    "1": "pointer1",
                    "2": "char_pointer1",
                    "3": "character_pointer",
                    "4": "char_pointer"
                },
                "pcVar2": {
                    "1": "char_ptr2",
                    "2": "func_ptr",
                    "4": "code_pointer",
                    "7": "function_pointer"
                },
                "pointer1": {
                    "1": "pointer1"
                },
                "pointer2": {
                    "1": "pointer2"
                },
                "pointer3": {
                    "1": "pointer3"
                },
                "pointer4": {
                    "1": "pointer4"
                },
                "pointer5": {
                    "1": "pointer5"
                },
                "pointer6": {
                    "1": "pointer6"
                },
                "pointer7": {
                    "1": "pointer7"
                },
                "pointer8": {
                    "1": "pointer8"
                },
                "pointer9": {
                    "1": "pointer9"
                },
                "puVar10": {
                    "1": "ptr_undefined8_2",
                    "2": "undefined8_pointer2",
                    "3": "pointer_var2",
                    "4": "pointer_variable2"
                },
                "puVar11": {
                    "1": "pointer_var_6",
                    "2": "pointer_variable3",
                    "3": "ptr_var3"
                },
                "puVar12": {
                    "1": "pointer_var_4",
                    "2": "pointer_variable4",
                    "3": "ptr_var4"
                },
                "puVar13": {
                    "1": "pointer_variable6",
                    "2": "pointer_variable5",
                    "3": "ptr_var5"
                },
                "puVar14": {
                    "1": "pointer_var_6",
                    "2": "pointer_variable6"
                },
                "puVar15": {
                    "1": "pointer_var_6",
                    "2": "pointer_var15"
                },
                "puVar18": {
                    "1": "ptr8"
                },
                "puVar19": {
                    "1": "ptr9"
                },
                "puVar20": {
                    "1": "ptr10"
                },
                "puVar21": {
                    "1": "ptr11"
                },
                "puVar8": {
                    "1": "pointer_variable1",
                    "2": "pointer_var1",
                    "3": "ptr_var",
                    "4": "pointer_variable"
                },
                "puVar9": {
                    "1": "object_ptr"
                },
                "result": {
                    "1": "current_comparison_result"
                },
                "resultArray": {
                    "1": "sorted_result_array"
                },
                "returnAddr": {
                    "1": "return_addr"
                },
                "returnAddress": {
                    "1": "return_address"
                },
                "size": {
                    "1": "size"
                },
                "tempPointer1": {
                    "1": "temp_pointer1"
                },
                "tempPointer2": {
                    "1": "temp_pointer2"
                },
                "tempPointer3": {
                    "1": "temp_pointer3"
                },
                "tempPointer4": {
                    "1": "temp_pointer4"
                },
                "tempPtr": {
                    "1": "temp_pointer"
                },
                "tempPtr2": {
                    "1": "temp_pointer2"
                },
                "tempPtr3": {
                    "1": "temp_pointer3"
                },
                "tempPtr4": {
                    "1": "object_pointer"
                },
                "uVar18": {
                    "1": "u_var18",
                    "2": "unsigned_variable_3",
                    "3": "unsigned_variable3",
                    "4": "ulong_var2"
                },
                "uVar5": {
                    "1": "is_object_valid",
                    "12": "uint_var",
                    "2": "uint_variable",
                    "3": "unsigned_var",
                    "6": "unsigned_variable"
                },
                "uVar6": {
                    "1": "unsigned_var2",
                    "10": "ulong_var",
                    "2": "unsigned_variable_2",
                    "3": "unsigned_variable2"
                },
                "uint": {
                    "1": ""
                },
                "unaff_N": {
                    "1": "unused_parameter"
                },
                "unaff_R12": {
                    "1": "block_count",
                    "2": "pointer_r12",
                    "4": "register_r12"
                },
                "unaff_R13": {
                    "1": "pointer_variable12",
                    "2": "ptr_r13",
                    "4": "register_r13"
                },
                "unaff_R14": {
                    "1": "decompressed_block_size",
                    "2": "ptr_r14",
                    "4": "register_r14"
                },
                "unaff_R15": {
                    "1": "ptr_to_r15",
                    "2": "unaff_r15",
                    "4": "register_r15"
                },
                "unaff_R8": {
                    "1": "size"
                },
                "unaff_R9": {
                    "1": "pointer_var_11"
                },
                "unaff_RBP": {
                    "1": "ptr2",
                    "2": "pointer_rbp",
                    "4": "register_bp"
                },
                "unaff_RBX": {
                    "1": "ptr_unaff_rbx",
                    "2": "pointer_rbx",
                    "4": "register_bx"
                },
                "unaff_retaddr": {
                    "1": "ulong_var_2",
                    "2": "ulong_variable",
                    "4": "ret_addr",
                    "5": "return_address"
                },
                "undefined8": {
                    "1": ""
                },
                "unusedParameter": {
                    "1": "unused_parameter"
                },
                "void": {
                    "1": ""
                },
                "yield": {
                    "1": "counter"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\nvoid process_lto_object_001049c0(void)\n\n{\n  char *char_pointer;\n  code *function_pointer;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined8 ulong_var;\n  long long_var;\n  undefined8 *pointer_variable;\n  long long_var2;\n  undefined8 *pointer_variable2;\n  undefined8 *register_bx;\n  undefined8 *pointer;\n  undefined8 *register_bp;\n  undefined8 *ptr_var3;\n  undefined8 *ptr_var4;\n  undefined8 *size;\n  undefined8 *ptr_var5;\n  undefined8 *ptr_to_r9;\n  undefined8 *pointer_variable6;\n  undefined8 *pointer_variable7;\n  undefined8 *register_r12;\n  undefined8 *register_r13;\n  undefined8 *register_r14;\n  undefined8 *register_r15;\n  bool bool_var;\n  byte byte_var;\n  ulong return_address;\n  ulong ulong_var2;\n  undefined8 stack_var1;\n  undefined8 *stack_var2;\n  undefined8 *stack_var3;\n  undefined8 stack_var4;\n  void *stack_var5;\n  undefined8 *stack_var6;\n  \n  byte_var = 0;\n  do {\n    register_bx = (undefined8 *)((long)register_bx + (long)register_r14);\nLAB_001049c3:\n    do {\n      do {\n        register_r13 = (undefined8 *)((long)register_r13 + (long)register_r14);\n        pointer_variable7 = register_r12;\n        ptr_var4 = register_bp;\n        if (register_r12 <= register_r13) goto LAB_00104b15;\nLAB_001049cf:\n        pointer_variable = (undefined8 *)\n                 (**(code **)(register_bp[1] + 0x270))\n                           (register_bp,return_address & 0xffffffff,register_r13,register_r15);\n        ptr_var3 = register_bp;\n        ptr_var4 = register_r13;\n        pointer_variable7 = register_r15;\n        if (pointer_variable == (undefined8 *)0x0) goto LAB_00102eb0;\n        char_pointer = (char *)pointer_variable[1];\n        if (((char_pointer == (char *)0x0) || (*char_pointer != '_')) || (char_pointer[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uint_var = (uint)(pointer_variable[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uint_var != 0) goto LAB_00104a2d;\n          register_r13 = (undefined8 *)((long)register_r13 + (long)register_r14);\n          pointer_variable7 = register_r12;\n          ptr_var4 = register_bp;\n          if (register_r12 <= register_r13) {\nLAB_00104b15:\n            register_bx = (undefined8 *)((long)register_bx - (long)stack_var3);\n            if (register_r14 == (undefined8 *)0x8) {\n              long_var2 = ptr_var4[1];\n              ptr_var3 = (undefined8 *)((long)register_bx + 7);\n              if (-1 < (long)register_bx) {\n                ptr_var3 = register_bx;\n              }\n              size = (undefined8 *)(ulong)DAT_0010b800;\n              function_pointer = *(code **)(long_var2 + 0x208);\n              ptr_var3 = (undefined8 *)((long)ptr_var3 >> 3);\n            }\n            else {\n              ptr_var3 = (undefined8 *)((long)register_bx / (long)register_r14);\n              long_var2 = ptr_var4[1];\n              function_pointer = *(code **)(long_var2 + 0x208);\n            }\n            register_bp = ptr_var4;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = ptr_var4;\n              DAT_0010b770 = (undefined8 *)(*function_pointer)(ptr_var4);\n              DAT_0010b768 = (undefined8 *)(**(code **)(ptr_var4[1] + 0x208))(ptr_var4);\n              register_bx = stack_var6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                FUN_00106530(*ptr_var4);\n                pointer = register_r15;\n                goto LAB_00102d8e;\n              }\n              register_r12 = (undefined8 *)(ulong)stack_var4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulong_var2 = (ulong)(DAT_0010b80c != 0);\n                qsort(stack_var6,(size_t)ptr_var3,(size_t)register_r12,FUN_00102fd2);\n                pointer_variable7 = (undefined8 *)xmalloc((long)ptr_var3 << 4);\n                ptr_var5 = DAT_0010b770;\n                register_bp = DAT_0010b768;\n                register_r14 = (undefined8 *)((long)ptr_var3 * (long)register_r12 + (long)register_bx);\n                pointer_variable = DAT_0010b770;\n                ptr_to_r9 = DAT_0010b768;\n                if (register_r14 <= register_bx) goto LAB_00102ec2;\n                ptr_var3 = (undefined8 *)\n                          (**(code **)(ptr_var4[1] + 0x270))(ptr_var4,ulong_var2 & 0xffffffff,register_bx);\n                pointer = register_bx;\n                size = register_r12;\n                stack_var2 = pointer_variable7;\n                if (ptr_var3 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stack_var6,(size_t)ptr_var3,(size_t)register_r12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              long_var2 = ptr_var4[1];\n            }\n            pointer = (undefined8 *)0x0;\n            do {\n              ptr_var4 = stack_var6;\n              pointer_variable = (undefined8 *)(ulong)DAT_0010b7f8;\n              register_r14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointer_variable7 = (undefined8 *)(**(code **)(long_var2 + 0x208))(register_bp);\n                if (pointer_variable7 == (undefined8 *)0x0) goto LAB_00102ed2;\n                register_bx = pointer + (long)ptr_var3 * 2;\n                ptr_var3 = pointer;\n                do {\n                  if (register_bx <= ptr_var3) {\nLAB_00104c75:\n                    if (stack_var5 == (void *)0x0) {\n                      free(stack_var6);\n                      free(pointer);\n                      return;\n                    }\n                    free(stack_var5);\n                    free(stack_var6);\n                    free(pointer);\n                    return;\n                  }\n                  pointer_variable = pointer_variable7;\n                  long_var2 = (**(code **)(register_bp[1] + 0x270))(register_bp,register_r14,*ptr_var3);\n                  if (long_var2 == 0) {\n                    FUN_00106530(*register_bp,0);\nLAB_00102ed2:\n                    ptr_var4 = (undefined8 *)*register_bp;\n                    FUN_00106530();\n                    ptr_var5 = size;\n                    pointer_variable6 = ptr_to_r9;\n                    goto LAB_00102edb;\n                  }\n                  ptr_var4 = ptr_var3 + 1;\n                  ptr_var3 = ptr_var3 + 2;\n                  FUN_00105110(register_bp,long_var2,*ptr_var4,stack_var1);\n                } while( true );\n              }\n              register_r12 = (undefined8 *)(ulong)stack_var4._4_4_;\n              register_r15 = (undefined8 *)(**(code **)(long_var2 + 0x208))(register_bp);\n              if (register_r15 == (undefined8 *)0x0) {\n                FUN_00106530(*register_bp);\n                ptr_var4 = register_r12;\n                if (DAT_0010b80c == 0) {\n                  long_var2 = (**(code **)(register_bp[1] + 0x350))(register_bp);\n                  ptr_var3 = stack_var6;\n                  pointer_variable7 = register_r12;\n                  if (long_var2 < 1) {\n                    pointer_variable = (undefined8 *)0x0;\n                    register_bx = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    register_bx = (undefined8 *)xmalloc();\n                    pointer_variable = (undefined8 *)(**(code **)(register_bp[1] + 0x358))(register_bp,register_bx);\n                    ptr_var4 = pointer_variable7;\n                    if ((long)pointer_variable < 0) {\n                      ptr_var4 = (undefined8 *)*register_bp;\n                      ptr_var3 = (undefined8 *)FUN_00106530(ptr_var4,pointer_variable7);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointer_variable = register_r12;\n                  register_bx = stack_var6;\n                  ptr_var3 = (undefined8 *)0x0;\n                  pointer_variable7 = (undefined8 *)0x0;\n                }\n                ptr_to_r9 = &stack0x00000040;\n                size = register_bx;\n                long_var2 = (**(code **)(register_bp[1] + 0x360))(register_bp,pointer_variable7,ptr_var3,pointer_variable);\n                register_r12 = ptr_var4;\n                if (0 < long_var2) {\n                  register_r12 = (undefined8 *)((long)ptr_var4 + long_var2);\n                  stack_var6 = (undefined8 *)xrealloc(stack_var6);\n                  long_var = 0;\n                  do {\n                    stack_var6[(long)((long)ptr_var4 + long_var)] =\n                         (void *)(long_var * 0x30 + (long)stack_var5);\n                    long_var = long_var + 1;\n                  } while (long_var2 != long_var);\n                  stack_var6[(long)((long)ptr_var4 + long_var2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (register_bx != (undefined8 *)0x0)) {\n                  free(register_bx);\n                }\n                if ((*(byte *)((long)register_bp + 0x4a) & 0x10) != 0) {\n                  register_bx = (undefined8 *)*register_bp;\n                  DAT_0010b230 = '\\0';\n                  ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(ulong_var);\n                }\n                register_r14 = (undefined8 *)(ulong)stack_var4._4_4_;\n                bool_var = DAT_0010b80c != 0;\n                ptr_var3 = (undefined8 *)(ulong)bool_var;\n                pointer_variable = stack_var6;\n                stack_var3 = stack_var6;\n                register_r15 = (undefined8 *)(**(code **)(register_bp[1] + 0x208))(register_bp);\n                if (register_r15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                ptr_var3 = (undefined8 *)((long)ptr_var3 * (long)register_r12 + (long)ptr_var4);\n                register_bx = ptr_var4;\n                while( true ) {\n                  if (ptr_var3 <= register_bx) goto LAB_00104c75;\n                  pointer_variable = register_r15;\n                  long_var2 = (**(code **)(register_bp[1] + 0x270))(register_bp,register_r14,register_bx);\n                  if (long_var2 == 0) break;\n                  register_bx = (undefined8 *)((long)register_bx + (long)register_r12);\n                  FUN_00105110(register_bp,long_var2,0,stack_var1);\n                }\n                FUN_00106530(*register_bp,0);\n              }\n              FUN_00106530(*register_bp);\n              ptr_var4 = register_bp;\n              pointer_variable7 = register_r15;\nLAB_00102eb0:\n              FUN_00106530(*ptr_var3);\nLAB_00102eb9:\n              FUN_00106530(*ptr_var4);\nLAB_00102ec2:\n              ptr_var3 = (undefined8 *)0x0;\n              pointer = register_bx;\n              size = register_r12;\n              ptr_var5 = pointer_variable;\n              register_bp = ptr_to_r9;\n              stack_var2 = pointer_variable7;\nLAB_00104e35:\n              while (ptr_to_r9 = ptr_var5, pointer < register_r14) {\n                register_bx = (undefined8 *)((long)pointer + (long)size);\n                if (register_bx < register_r14) {\n                  pointer_variable = register_bp;\n                  ptr_var5 = size;\n                  pointer_variable6 = ptr_to_r9;\n                  pointer_variable2 = (undefined8 *)(**(code **)(ptr_var4[1] + 0x270))();\n                  if (pointer_variable2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    ptr_to_r9 = pointer_variable6;\n                    size = ptr_var5;\n                    ptr_var4 = (undefined8 *)*ptr_var4;\n                    pointer_variable2 = (undefined8 *)FUN_00106530();\n                  }\n                  else {\n                    pointer_variable = (undefined8 *)ptr_var3[4];\n                    if ((*(uint *)(ptr_var3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  long_var2 = ptr_var3[2];\nLAB_00102ee7:\n                  if (pointer_variable == (undefined8 *)pointer_variable2[4]) {\n                    long_var2 = pointer_variable2[2] - long_var2;\n                    ptr_var5 = register_bp;\n                    pointer_variable6 = pointer;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  long_var2 = pointer_variable[8] - long_var2;\n                  ptr_var5 = register_bp;\n                  pointer_variable6 = pointer;\n                }\n                else {\n                  pointer_variable = (undefined8 *)ptr_var3[4];\n                  if ((*(uint *)(ptr_var3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    long_var2 = ptr_var3[2];\n                    pointer_variable2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointer_variable2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  ptr_var5 = register_bp;\n                  pointer_variable6 = pointer;\n                  if (*(int *)(ptr_var4[1] + 8) == 5) {\n                    long_var2 = ptr_var3[7];\n                  }\n                  else {\n                    long_var2 = ptr_var3[2];\n                    if ((*(byte *)((long)pointer_variable + 0x25) & 0x10) == 0) {\n                      if (register_bx < register_r14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                ptr_var3 = pointer_variable2;\n                pointer = register_bx;\n                register_bp = ptr_to_r9;\n                if (long_var2 != 0) {\n                  *pointer_variable7 = pointer_variable6;\n                  pointer_variable7[1] = long_var2;\n                  pointer_variable7 = pointer_variable7 + 2;\n                }\n              }\n              ptr_var3 = (undefined8 *)((long)pointer_variable7 - (long)stack_var2 >> 4);\n              qsort(stack_var2,(size_t)ptr_var3,0x10,FUN_00103533);\n              long_var2 = ptr_var4[1];\n              register_bx = pointer;\n              register_bp = ptr_var4;\n              pointer = stack_var2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        int_var = strcmp(char_pointer + (char_pointer[2] == '_'),\"__gnu_lto_slim\");\n        stack_var2 = pointer_variable;\n        if (int_var == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stack_var2 = (undefined8 *)*register_bp;\n            DAT_0010b230 = '\\0';\n            ulong_var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            FUN_00106400(ulong_var,stack_var2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uint_var = (*(uint *)(pointer_variable + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointer_variable + 3) & 0x800082) == 0) && (pointer_variable[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointer_variable[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n          if ((pointer_variable[4] != 0x10c2a8) && (pointer_variable[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointer_variable + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n      ptr_to_r9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        char_var = (**(code **)(register_bp[1] + 0x230))(register_bp);\n        if (char_var != '\\0') {\n          FUN_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointer_variable[4] == 0x10c2a8);\nLAB_00104cba:\n    char_var = (**(code **)(register_bp[1] + 0x230))(register_bp);\n    if (char_var != '\\0') {\n      FUN_00102c19();\n      return;\n    }\nLAB_00104a7b:\n    if (register_bx != register_r13) {\n      if (register_r14 == (undefined8 *)0x8) {\n        *register_bx = *register_r13;\n        process_lto_object_001049c0();\n        return;\n      }\n      for (; register_r14 != (undefined8 *)0x0; register_r14 = (undefined8 *)((long)register_r14 + -1)) {\n        *(undefined *)register_bx = *(undefined *)register_r13;\n        register_r13 = (undefined8 *)((long)register_r13 + (ulong)byte_var * -2 + 1);\n        register_bx = (undefined8 *)((long)register_bx + (ulong)byte_var * -2 + 1);\n      }\n      process_lto_object_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointer_variable7 = (undefined8 *)((long)register_r12 * (long)register_r14);\n  register_r12 = (undefined8 *)((long)stack_var3 + (long)pointer_variable7);\n  register_bx = stack_var3;\n  ptr_var4 = register_bp;\n  if (stack_var3 < register_r12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  return_address = (ulong)bool_var;\n  register_r13 = stack_var3;\n  goto LAB_001049cf;\n}\n\n",
            "current_name": "process_lto_object_001049c0",
            "entrypoint": "0x001049c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001049c0": "process_lto_object_001049c0",
                "__ptr": "pointer",
                "bVar16": "bool_var",
                "bVar17": "byte_var",
                "cVar3": "char_var",
                "iVar4": "int_var",
                "in_R8": "size",
                "in_R9": "ptr_to_r9",
                "in_stack_00000008": "stack_var1",
                "in_stack_00000010": "stack_var2",
                "in_stack_00000018": "stack_var3",
                "in_stack_00000038": "stack_var4",
                "in_stack_00000040": "stack_var5",
                "in_stack_00000048": "stack_var6",
                "lVar7": "long_var",
                "lVar9": "long_var2",
                "pcVar1": "char_pointer",
                "pcVar2": "function_pointer",
                "puVar10": "pointer_variable2",
                "puVar11": "ptr_var3",
                "puVar12": "ptr_var4",
                "puVar13": "ptr_var5",
                "puVar14": "pointer_variable6",
                "puVar15": "pointer_variable7",
                "puVar8": "pointer_variable",
                "uVar18": "ulong_var2",
                "uVar5": "uint_var",
                "uVar6": "ulong_var",
                "unaff_R12": "register_r12",
                "unaff_R13": "register_r13",
                "unaff_R14": "register_r14",
                "unaff_R15": "register_r15",
                "unaff_RBP": "register_bp",
                "unaff_RBX": "register_bx",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d5b": {
            "additional_data": {
                "FUN_00102c19": {
                    "1": "perform_cleanup",
                    "7": "handle_error"
                },
                "FUN_00102fd2": {
                    "1": "calculate_index",
                    "2": "perform_operation",
                    "3": "calculate_hash"
                },
                "FUN_00103533": {
                    "1": "compare_objects",
                    "5": "calculate_value"
                },
                "FUN_001049c0": {
                    "1": "cleanup",
                    "2": "finalize_processing"
                },
                "FUN_00104d5b": {
                    "1": "process_lto_object",
                    "2": "decompiled_function"
                },
                "FUN_00105110": {
                    "1": "apply_operation",
                    "7": "process_data"
                },
                "FUN_00106400": {
                    "1": "display_message",
                    "2": "print_error_message"
                },
                "FUN_00106530": {
                    "1": "process_failure",
                    "2": "handle_error",
                    "3": "cleanup"
                },
                "PTR_FUN_0010acc0": {
                    "1": "fun_0010acc0"
                },
                "__ptr": {
                    "1": "ptr_var",
                    "2": "pointer_var2"
                },
                "bVar11": {
                    "1": "flag1"
                },
                "bVar12": {
                    "1": "flag2"
                },
                "bVar16": {
                    "1": "b_var16",
                    "2": "bool_variable",
                    "6": "bool_var"
                },
                "bVar17": {
                    "1": "temp_byte",
                    "2": "byte_variable",
                    "7": "byte_var"
                },
                "bool bVar16": {
                    "1": "bool_26"
                },
                "byte bVar17": {
                    "1": "byte_27"
                },
                "cVar3": {
                    "1": "temp_char",
                    "2": "char_variable",
                    "4": "character_var"
                },
                "char *pcVar1": {
                    "1": "ptr_1"
                },
                "char cVar3": {
                    "1": "char_3"
                },
                "code *pcVar2": {
                    "1": "ptr_2"
                },
                "dcgettext": {
                    "1": "get_text",
                    "2": "get_translated_string"
                },
                "free": {
                    "2": "deallocate_memory",
                    "3": "release_memory",
                    "4": "free_memory"
                },
                "iVar4": {
                    "1": "integer",
                    "2": "int_variable",
                    "4": "int_var",
                    "5": "integer_var"
                },
                "iVar7": {
                    "1": "index"
                },
                "in_R8": {
                    "1": "input_pointer_2"
                },
                "in_R9": {
                    "1": "in_r9"
                },
                "in_RCX": {
                    "1": "data",
                    "2": "input_array_pointer"
                },
                "in_stack_00000038": {
                    "1": "temp_variable",
                    "2": "stack_var",
                    "4": "stack_variable"
                },
                "int iVar4": {
                    "1": "int_4"
                },
                "int strcmp": {
                    "1": "compare_strings"
                },
                "lVar10": {
                    "1": "length3"
                },
                "lVar12": {
                    "1": "long_var3"
                },
                "lVar13": {
                    "1": "long_var4"
                },
                "lVar8": {
                    "1": "index",
                    "2": "long_variable",
                    "6": "long_var"
                },
                "lVar9": {
                    "1": "length2",
                    "2": "long_var_2",
                    "6": "long_var2"
                },
                "long lVar8": {
                    "1": "long_8"
                },
                "long lVar9": {
                    "1": "long_9"
                },
                "pVar1": {
                    "1": "pointer1"
                },
                "pVar2": {
                    "1": "pointer2"
                },
                "pVar3": {
                    "1": "pointer3"
                },
                "param_1": {
                    "1": "function_param"
                },
                "param_10": {
                    "1": "unused_param_5"
                },
                "param_11": {
                    "1": "param_11"
                },
                "param_12": {
                    "1": "unused_param_6"
                },
                "param_13": {
                    "1": "temp_array",
                    "2": "array3",
                    "5": "parameter13"
                },
                "param_14": {
                    "1": "input_array_pointer4",
                    "2": "param_14",
                    "5": "parameter14"
                },
                "param_2": {
                    "1": "array_param"
                },
                "param_3": {
                    "1": "unaff_rbp"
                },
                "param_4": {
                    "1": "param_array5"
                },
                "param_5": {
                    "1": "unused_param_2"
                },
                "param_6": {
                    "1": "unused_param_3"
                },
                "param_7": {
                    "1": "param7",
                    "2": "parameter_7",
                    "5": "param_7"
                },
                "param_8": {
                    "1": "items",
                    "2": "param_8",
                    "5": "parameter8"
                },
                "param_9": {
                    "1": "undefined8_ptr",
                    "2": "parameter_9",
                    "5": "parameter9"
                },
                "pcVar1": {
                    "1": "character_pointer",
                    "2": "string_ptr",
                    "3": "char_pointer"
                },
                "pcVar2": {
                    "1": "pointer_code",
                    "3": "code_pointer",
                    "4": "function_pointer"
                },
                "ptr_to_free": {
                    "1": "ptr_to_free"
                },
                "ptr_to_malloc": {
                    "1": "ptr_to_malloc"
                },
                "ptr_to_process": {
                    "1": "ptr_to_process"
                },
                "puVar10": {
                    "1": "pointer_var2"
                },
                "puVar11": {
                    "1": "r11",
                    "2": "pointer_var4"
                },
                "puVar12": {
                    "1": "pointer_var_6",
                    "2": "pointer_var5"
                },
                "puVar13": {
                    "1": "pointer_undefined8_var6",
                    "2": "pointer_var6"
                },
                "puVar14": {
                    "1": "iterator_pointer2",
                    "2": "pointer_var7"
                },
                "puVar15": {
                    "1": "temp_buffer",
                    "2": "pointer_var8"
                },
                "puVar7": {
                    "1": "counter",
                    "2": "pointer_variable",
                    "3": "pointer_var"
                },
                "qsort": {
                    "1": "sort_objects",
                    "2": "sort",
                    "4": "sort_data"
                },
                "qsort(__compar_fn_t)": {
                    "1": "qsort_fn_t"
                },
                "strcmp": {
                    "9": "compare_strings"
                },
                "uVar18": {
                    "1": "uint_var_2",
                    "4": "unsigned_var3"
                },
                "uVar5": {
                    "1": "compare_flag",
                    "2": "uint_variable",
                    "4": "uint_var",
                    "5": "unsigned_var"
                },
                "uVar6": {
                    "1": "unsigned_long",
                    "2": "undefined8_var",
                    "4": "unsigned_var2"
                },
                "uint uVar5": {
                    "1": "uint_5"
                },
                "ulong FUN_00102fd2": {
                    "1": "process_fun_6"
                },
                "ulong FUN_00103533": {
                    "1": "process_fun_2"
                },
                "ulong uVar18": {
                    "1": "uint_28"
                },
                "ulong unaff_retaddr": {
                    "1": "retaddr"
                },
                "unaff_R12": {
                    "1": "register_r12",
                    "2": "unaffected_register12"
                },
                "unaff_R13": {
                    "1": "unaffected_variable2",
                    "2": "unaffected_register13"
                },
                "unaff_R14": {
                    "1": "item_size",
                    "2": "unaffected_register14"
                },
                "unaff_R15": {
                    "1": "register_r15",
                    "2": "unaffected_register15"
                },
                "unaff_R8": {
                    "1": "unaffected_variable10"
                },
                "unaff_R9": {
                    "1": "unaffected_variable9"
                },
                "unaff_RBP": {
                    "1": "undefined8_ptr",
                    "2": "unaffected_register_bp",
                    "3": "base_pointer"
                },
                "unaff_RBX": {
                    "1": "counter"
                },
                "unaff_RCX": {
                    "1": "unaffected_variable7"
                },
                "unaff_retaddr": {
                    "1": "ulong_var_2",
                    "2": "unaffected_ret_addr",
                    "8": "return_address"
                },
                "unaff_retaddr2": {
                    "1": "return_address_2"
                },
                "unaff_retaddr_3": {
                    "1": "return_address_3"
                },
                "undefined8 *__ptr": {
                    "1": "ptr_13"
                },
                "undefined8 *in_R8": {
                    "1": "ptr_17"
                },
                "undefined8 *in_R9": {
                    "1": "ptr_19"
                },
                "undefined8 *in_RCX": {
                    "1": "ptr_11"
                },
                "undefined8 *param_14": {
                    "1": "param_14"
                },
                "undefined8 *param_8": {
                    "1": "param_8"
                },
                "undefined8 *param_9": {
                    "1": "param_9"
                },
                "undefined8 *puVar10": {
                    "1": "ptr_10"
                },
                "undefined8 *puVar11": {
                    "1": "ptr_14"
                },
                "undefined8 *puVar12": {
                    "1": "ptr_16"
                },
                "undefined8 *puVar13": {
                    "1": "ptr_18"
                },
                "undefined8 *puVar14": {
                    "1": "ptr_20"
                },
                "undefined8 *puVar15": {
                    "1": "ptr_21"
                },
                "undefined8 *puVar7": {
                    "1": "ptr_7"
                },
                "undefined8 *unaff_R12": {
                    "1": "ptr_22"
                },
                "undefined8 *unaff_R13": {
                    "1": "ptr_23"
                },
                "undefined8 *unaff_R14": {
                    "1": "ptr_24"
                },
                "undefined8 *unaff_R15": {
                    "1": "ptr_25"
                },
                "undefined8 *unaff_RBP": {
                    "1": "ptr_15"
                },
                "undefined8 *unaff_RBX": {
                    "1": "ptr_12"
                },
                "undefined8 in_stack_00000038": {
                    "1": "stack_00000038"
                },
                "undefined8 param_7": {
                    "1": "param_7"
                },
                "undefined8 uVar6": {
                    "1": "result1"
                },
                "void *param_13": {
                    "1": "param_13"
                },
                "void FUN_00102c19": {
                    "1": "process_fun_4"
                },
                "void FUN_001049c0": {
                    "1": "process_fun_3"
                },
                "void FUN_00105110": {
                    "1": "process_fun_1"
                },
                "void FUN_00106400": {
                    "1": "display_message"
                },
                "void FUN_00106530": {
                    "1": "process_fun_5"
                },
                "void dcgettext": {
                    "1": "get_text"
                },
                "void free": {
                    "1": "free_memory"
                },
                "void qsort": {
                    "1": "quick_sort"
                },
                "void xmalloc": {
                    "1": "dynamic_memory_allocation"
                },
                "void xrealloc": {
                    "1": "reallocate_memory"
                },
                "xmalloc": {
                    "9": "allocate_memory"
                },
                "xrealloc": {
                    "1": "resize_memory",
                    "8": "reallocate_memory"
                }
            },
            "called": [
                "FUN_00105110",
                "dcgettext",
                "qsort",
                "xmalloc",
                "FUN_00103533",
                "free",
                "FUN_001049c0",
                "FUN_00106400",
                "FUN_00102c19",
                "FUN_00104d5b",
                "strcmp",
                "FUN_00106530",
                "FUN_00102fd2",
                "xrealloc"
            ],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\nvoid decompiled_function_00104d5b(void)\n\n{\n  char *char_pointer;\n  code *function_pointer;\n  char char_var;\n  int integer_var;\n  uint unsigned_var;\n  undefined8 unsigned_var2;\n  undefined8 *pointer_var;\n  long long_var;\n  long long_var2;\n  undefined8 *undefined8_ptr;\n  undefined8 *input_array_pointer;\n  undefined8 *undefined8_ptr;\n  undefined8 *pointer_var2;\n  undefined8 *pointer_var4;\n  undefined8 *base_pointer;\n  undefined8 *pointer_var5;\n  undefined8 *input_pointer_2;\n  undefined8 *pointer_var6;\n  undefined8 *input_pointer_3;\n  undefined8 *pointer_var7;\n  undefined8 *pointer_var8;\n  undefined8 *unaffected_register12;\n  undefined8 *unaffected_register13;\n  undefined8 *unaffected_register14;\n  undefined8 *unaffected_register15;\n  bool bool_var;\n  byte byte_var;\n  ulong return_address;\n  ulong unsigned_var3;\n  undefined8 parameter7;\n  undefined8 *parameter8;\n  undefined8 *parameter9;\n  undefined8 stack_variable;\n  void *parameter13;\n  undefined8 *parameter14;\n  \n  byte_var = 0;\n  do {\n    if ((input_array_pointer[4] != 0x10c2a8) && (input_array_pointer[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      unaffected_register13 = (undefined8 *)((long)unaffected_register13 + (long)unaffected_register14);\n      pointer_var8 = unaffected_register12;\n      pointer_var5 = base_pointer;\n      if (unaffected_register12 <= unaffected_register13) goto LAB_00104b15;\nLAB_001049cf:\n      input_array_pointer = (undefined8 *)\n               (**(code **)(base_pointer[1] + 0x270))\n                         (base_pointer,return_address & 0xffffffff,unaffected_register13,unaffected_register15);\n      pointer_var4 = base_pointer;\n      pointer_var5 = unaffected_register13;\n      pointer_var8 = unaffected_register15;\n      if (input_array_pointer == (undefined8 *)0x0) goto LAB_00102eb0;\n      char_pointer = (char *)input_array_pointer[1];\n      if (((char_pointer == (char *)0x0) || (*char_pointer != '_')) || (char_pointer[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        unsigned_var = (uint)(input_array_pointer[4] == 0x10c2a8);\nLAB_00104af9:\n        if (unsigned_var != 0) goto LAB_00104a2d;\n        unaffected_register13 = (undefined8 *)((long)unaffected_register13 + (long)unaffected_register14);\n        pointer_var8 = unaffected_register12;\n        pointer_var5 = base_pointer;\n        if (unaffected_register12 <= unaffected_register13) {\nLAB_00104b15:\n          undefined8_ptr = (undefined8 *)((long)undefined8_ptr - (long)parameter9);\n          if (unaffected_register14 == (undefined8 *)0x8) {\n            long_var2 = pointer_var5[1];\n            pointer_var4 = (undefined8 *)((long)undefined8_ptr + 7);\n            if (-1 < (long)undefined8_ptr) {\n              pointer_var4 = undefined8_ptr;\n            }\n            input_pointer_2 = (undefined8 *)(ulong)DAT_0010b800;\n            function_pointer = *(code **)(long_var2 + 0x208);\n            pointer_var4 = (undefined8 *)((long)pointer_var4 >> 3);\n          }\n          else {\n            pointer_var4 = (undefined8 *)((long)undefined8_ptr / (long)unaffected_register14);\n            long_var2 = pointer_var5[1];\n            function_pointer = *(code **)(long_var2 + 0x208);\n          }\n          base_pointer = pointer_var5;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = pointer_var5;\n            DAT_0010b770 = (undefined8 *)(*function_pointer)(pointer_var5);\n            DAT_0010b768 = (undefined8 *)(**(code **)(pointer_var5[1] + 0x208))(pointer_var5);\n            undefined8_ptr = parameter14;\n            if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n              FUN_00106530(*pointer_var5);\n              pointer_var2 = unaffected_register15;\n              goto LAB_00102d8e;\n            }\n            unaffected_register12 = (undefined8 *)(ulong)stack_variable._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              unsigned_var3 = (ulong)(DAT_0010b80c != 0);\n              qsort(parameter14,(size_t)pointer_var4,(size_t)unaffected_register12,FUN_00102fd2);\n              pointer_var8 = (undefined8 *)xmalloc((long)pointer_var4 << 4);\n              pointer_var6 = DAT_0010b770;\n              base_pointer = DAT_0010b768;\n              unaffected_register14 = (undefined8 *)((long)pointer_var4 * (long)unaffected_register12 + (long)undefined8_ptr);\n              input_array_pointer = DAT_0010b770;\n              input_pointer_3 = DAT_0010b768;\n              if (unaffected_register14 <= undefined8_ptr) goto LAB_00102ec2;\n              pointer_var4 = (undefined8 *)\n                        (**(code **)(pointer_var5[1] + 0x270))(pointer_var5,unsigned_var3 & 0xffffffff,undefined8_ptr);\n              pointer_var2 = undefined8_ptr;\n              input_pointer_2 = unaffected_register12;\n              parameter8 = pointer_var8;\n              if (pointer_var4 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(parameter14,(size_t)pointer_var4,(size_t)unaffected_register12,\n                  (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n            long_var2 = pointer_var5[1];\n          }\n          pointer_var2 = (undefined8 *)0x0;\n          do {\n            pointer_var5 = parameter14;\n            pointer_var = (undefined8 *)(ulong)DAT_0010b7f8;\n            unaffected_register14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              pointer_var8 = (undefined8 *)(**(code **)(long_var2 + 0x208))(base_pointer);\n              if (pointer_var8 == (undefined8 *)0x0) goto LAB_00102ed2;\n              undefined8_ptr = pointer_var2 + (long)pointer_var4 * 2;\n              pointer_var4 = pointer_var2;\n              do {\n                if (undefined8_ptr <= pointer_var4) {\nLAB_00104c75:\n                  if (parameter13 != (void *)0x0) {\n                    free_memory(parameter13);\n                    free_memory(parameter14);\n                    free_memory(pointer_var2);\n                    return;\n                  }\n                  free_memory(parameter14);\n                  free_memory(pointer_var2);\n                  return;\n                }\n                pointer_var = pointer_var8;\n                long_var2 = (**(code **)(base_pointer[1] + 0x270))(base_pointer,unaffected_register14,*pointer_var4);\n                if (long_var2 == 0) {\n                  FUN_00106530(*base_pointer,0);\nLAB_00102ed2:\n                  pointer_var5 = (undefined8 *)*base_pointer;\n                  FUN_00106530();\n                  pointer_var6 = input_pointer_2;\n                  pointer_var7 = input_pointer_3;\n                  goto LAB_00102edb;\n                }\n                pointer_var5 = pointer_var4 + 1;\n                pointer_var4 = pointer_var4 + 2;\n                FUN_00105110(base_pointer,long_var2,*pointer_var5,parameter7);\n              } while( true );\n            }\n            unaffected_register12 = (undefined8 *)(ulong)stack_variable._4_4_;\n            unaffected_register15 = (undefined8 *)(**(code **)(long_var2 + 0x208))(base_pointer);\n            if (unaffected_register15 == (undefined8 *)0x0) {\n              FUN_00106530(*base_pointer);\n              pointer_var5 = unaffected_register12;\n              if (DAT_0010b80c == 0) {\n                long_var2 = (**(code **)(base_pointer[1] + 0x350))(base_pointer);\n                pointer_var4 = parameter14;\n                pointer_var8 = unaffected_register12;\n                if (long_var2 < 1) {\n                  pointer_var = (undefined8 *)0x0;\n                  undefined8_ptr = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  undefined8_ptr = (undefined8 *)xmalloc();\n                  pointer_var = (undefined8 *)(**(code **)(base_pointer[1] + 0x358))(base_pointer,undefined8_ptr);\n                  pointer_var5 = pointer_var8;\n                  if ((long)pointer_var < 0) {\n                    pointer_var5 = (undefined8 *)*base_pointer;\n                    pointer_var4 = (undefined8 *)FUN_00106530(pointer_var5,pointer_var8);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                pointer_var = unaffected_register12;\n                undefined8_ptr = parameter14;\n                pointer_var4 = (undefined8 *)0x0;\n                pointer_var8 = (undefined8 *)0x0;\n              }\n              input_pointer_3 = &stack0x00000040;\n              input_pointer_2 = undefined8_ptr;\n              long_var2 = (**(code **)(base_pointer[1] + 0x360))(base_pointer,pointer_var8,pointer_var4,pointer_var);\n              unaffected_register12 = pointer_var5;\n              if (0 < long_var2) {\n                unaffected_register12 = (undefined8 *)((long)pointer_var5 + long_var2);\n                parameter14 = (undefined8 *)xrealloc(parameter14);\n                long_var = 0;\n                do {\n                  parameter14[(long)pointer_var5 + long_var] = (void *)(long_var * 0x30 + (long)parameter13);\n                  long_var = long_var + 1;\n                } while (long_var2 != long_var);\n                parameter14[(long)pointer_var5 + long_var2] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (undefined8_ptr != (undefined8 *)0x0)) {\n                free_memory(undefined8_ptr);\n              }\n              if ((*(byte *)((long)base_pointer + 0x4a) & 0x10) != 0) {\n                undefined8_ptr = (undefined8 *)*base_pointer;\n                DAT_0010b230 = '\\0';\n                unsigned_var2 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                FUN_00106400(unsigned_var2);\n              }\n              unaffected_register14 = (undefined8 *)(ulong)stack_variable._4_4_;\n              bool_var = DAT_0010b80c != 0;\n              pointer_var4 = (undefined8 *)(ulong)bool_var;\n              input_array_pointer = parameter14;\n              parameter9 = parameter14;\n              unaffected_register15 = (undefined8 *)(**(code **)(base_pointer[1] + 0x208))(base_pointer);\n              if (unaffected_register15 != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              pointer_var4 = (undefined8 *)((long)pointer_var4 * (long)unaffected_register12 + (long)pointer_var5);\n              undefined8_ptr = pointer_var5;\n              while( true ) {\n                if (pointer_var4 <= undefined8_ptr) goto LAB_00104c75;\n                input_array_pointer = unaffected_register15;\n                long_var2 = (**(code **)(base_pointer[1] + 0x270))(base_pointer,unaffected_register14,undefined8_ptr);\n                if (long_var2 == 0) break;\n                undefined8_ptr = (undefined8 *)((long)undefined8_ptr + (long)unaffected_register12);\n                FUN_00105110(base_pointer,long_var2,0,parameter7);\n              }\n              FUN_00106530(*base_pointer,0);\n            }\n            FUN_00106530(*base_pointer);\n            pointer_var5 = base_pointer;\n            pointer_var8 = unaffected_register15;\nLAB_00102eb0:\n            FUN_00106530(*pointer_var4);\nLAB_00102eb9:\n            FUN_00106530(*pointer_var5);\nLAB_00102ec2:\n            pointer_var4 = (undefined8 *)0x0;\n            pointer_var2 = undefined8_ptr;\n            input_pointer_2 = unaffected_register12;\n            pointer_var6 = input_array_pointer;\n            base_pointer = input_pointer_3;\n            parameter8 = pointer_var8;\nLAB_00104e35:\n            while (input_pointer_3 = pointer_var6, pointer_var2 < unaffected_register14) {\n              undefined8_ptr = (undefined8 *)((long)pointer_var2 + (long)input_pointer_2);\n              if (undefined8_ptr < unaffected_register14) {\n                pointer_var = base_pointer;\n                pointer_var6 = input_pointer_2;\n                pointer_var7 = input_pointer_3;\n                undefined8_ptr = (undefined8 *)(**(code **)(pointer_var5[1] + 0x270))();\n                if (undefined8_ptr == (undefined8 *)0x0) {\nLAB_00102edb:\n                  input_pointer_3 = pointer_var7;\n                  input_pointer_2 = pointer_var6;\n                  pointer_var5 = (undefined8 *)*pointer_var5;\n                  undefined8_ptr = (undefined8 *)FUN_00106530();\n                }\n                else {\n                  pointer_var = (undefined8 *)pointer_var4[4];\n                  if ((*(uint *)(pointer_var4 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                long_var2 = pointer_var4[2];\nLAB_00102ee7:\n                if (pointer_var == (undefined8 *)undefined8_ptr[4]) {\n                  long_var2 = undefined8_ptr[2] - long_var2;\n                  pointer_var6 = base_pointer;\n                  pointer_var7 = pointer_var2;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                long_var2 = pointer_var[8] - long_var2;\n                pointer_var6 = base_pointer;\n                pointer_var7 = pointer_var2;\n              }\n              else {\n                pointer_var = (undefined8 *)pointer_var4[4];\n                if ((*(uint *)(pointer_var4 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  long_var2 = pointer_var4[2];\n                  undefined8_ptr = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                undefined8_ptr = (undefined8 *)0x0;\nLAB_00104e95:\n                pointer_var6 = base_pointer;\n                pointer_var7 = pointer_var2;\n                if (*(int *)(pointer_var5[1] + 8) == 5) {\n                  long_var2 = pointer_var4[7];\n                }\n                else {\n                  long_var2 = pointer_var4[2];\n                  if ((*(byte *)((long)pointer_var + 0x25) & 0x10) == 0) {\n                    if (undefined8_ptr < unaffected_register14) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              pointer_var4 = undefined8_ptr;\n              pointer_var2 = undefined8_ptr;\n              base_pointer = input_pointer_3;\n              if (long_var2 != 0) {\n                *pointer_var8 = pointer_var7;\n                pointer_var8[1] = long_var2;\n                pointer_var8 = pointer_var8 + 2;\n              }\n            }\n            pointer_var4 = (undefined8 *)((long)pointer_var8 - (long)parameter8 >> 4);\n            qsort(parameter8,(size_t)pointer_var4,0x10,FUN_00103533);\n            long_var2 = pointer_var5[1];\n            undefined8_ptr = pointer_var2;\n            base_pointer = pointer_var5;\n            pointer_var2 = parameter8;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      integer_var = strcmp(char_pointer + (char_pointer[2] == '_'),\"__gnu_lto_slim\");\n      parameter8 = input_array_pointer;\n      if (integer_var == 0) {\n        if (DAT_0010b230 != '\\0') {\n          parameter8 = (undefined8 *)*base_pointer;\n          DAT_0010b230 = '\\0';\n          unsigned_var2 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          FUN_00106400(unsigned_var2,parameter8);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        unsigned_var = (*(uint *)(input_array_pointer + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(input_array_pointer + 3) & 0x800082) == 0) && (input_array_pointer[4] != 0x10c2a8)) &&\n         ((*(byte *)(input_array_pointer[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byte *)(input_array_pointer + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  input_pointer_3 = (undefined8 *)(ulong)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    char_var = (**(code **)(base_pointer[1] + 0x230))(base_pointer);\n    if (char_var != '\\0') {\n      FUN_00102c19();\n      return;\n    }\n  }\n  else {\n    if (input_array_pointer[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    char_var = (**(code **)(base_pointer[1] + 0x230))(base_pointer);\n    if (char_var != '\\0') {\n      FUN_00102c19();\n      return;\n    }\n  }\n  if (undefined8_ptr != unaffected_register13) {\n    if (unaffected_register14 != (undefined8 *)0x8) {\n      for (; unaffected_register14 != (undefined8 *)0x0; unaffected_register14 = (undefined8 *)((long)unaffected_register14 + -1)) {\n        *(undefined *)undefined8_ptr = *(undefined *)unaffected_register13;\n        unaffected_register13 = (undefined8 *)((long)unaffected_register13 + (ulong)byte_var * -2 + 1);\n        undefined8_ptr = (undefined8 *)((long)undefined8_ptr + (ulong)byte_var * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    *undefined8_ptr = *unaffected_register13;\n    FUN_001049c0();\n    return;\n  }\n  undefined8_ptr = (undefined8 *)((long)undefined8_ptr + (long)unaffected_register14);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  pointer_var8 = (undefined8 *)((long)unaffected_register12 * (long)unaffected_register14);\n  unaffected_register12 = (undefined8 *)((long)parameter9 + (long)pointer_var8);\n  undefined8_ptr = parameter9;\n  pointer_var5 = base_pointer;\n  if (parameter9 < unaffected_register12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  return_address = (ulong)bool_var;\n  unaffected_register13 = parameter9;\n  goto LAB_001049cf;\n}\n\n",
            "current_name": "decompiled_function_00104d5b",
            "entrypoint": "0x00104d5b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d5b": "decompiled_function_00104d5b",
                "__ptr": "pointer_var2",
                "bVar16": "bool_var",
                "bVar17": "byte_var",
                "cVar3": "char_var",
                "dcgettext": "get_translated_string",
                "free": "free_memory",
                "iVar4": "integer_var",
                "in_R8": "input_pointer_2",
                "in_R9": "input_pointer_3",
                "in_RCX": "input_array_pointer",
                "in_stack_00000038": "stack_variable",
                "lVar8": "long_var",
                "lVar9": "long_var2",
                "param_1": "in_rcx",
                "param_13": "parameter13",
                "param_14": "parameter14",
                "param_7": "parameter7",
                "param_8": "parameter8",
                "param_9": "parameter9",
                "pcVar1": "char_pointer",
                "pcVar2": "function_pointer",
                "puVar10": "undefined8_ptr",
                "puVar11": "pointer_var4",
                "puVar12": "pointer_var5",
                "puVar13": "pointer_var6",
                "puVar14": "pointer_var7",
                "puVar15": "pointer_var8",
                "puVar7": "pointer_var",
                "qsort": "sort_data",
                "strcmp": "compare_strings",
                "uVar18": "unsigned_var3",
                "uVar5": "unsigned_var",
                "uVar6": "unsigned_var2",
                "unaff_R12": "unaffected_register12",
                "unaff_R13": "unaffected_register13",
                "unaff_R14": "unaffected_register14",
                "unaff_R15": "unaffected_register15",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "undefined8_ptr",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104fa0": {
            "called": [
                "FUN_00102f9f",
                "strcoll"
            ],
            "calling": [
                "FUN_00103bf6",
                "FUN_00105050",
                "FUN_00102fd2"
            ],
            "code": "\nuint FUNC_00104fa0(undefined8 param_1,undefined8 param_2)\n\n{\n  char *__s2;\n  char *__s1;\n  uint uVar1;\n  long lVar2;\n  long lVar3;\n  \n  lVar2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,param_1,DAT_0010b770);\n  lVar3 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,param_2,DAT_0010b768);\n  if ((lVar2 == 0) || (lVar3 == 0)) {\n    FUN_00106530(*DAT_0010b780);\n  }\n  else {\n    __s2 = *(char **)(lVar3 + 8);\n    __s1 = *(char **)(lVar2 + 8);\n    if (__s2 == (char *)0x0) {\n      return (uint)(__s1 != (char *)0x0);\n    }\n    if (__s1 != (char *)0x0) {\n      if (*__s2 == '\\0') {\n        return (uint)(*__s1 != '\\0');\n      }\n      if (*__s1 == '\\0') {\n        return 0xffffffff;\n      }\n      uVar1 = strcoll(__s1,__s2);\n      return uVar1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "FUNC_00104fa0",
            "entrypoint": "0x00104fa0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00104fa0": "FUNC_00104fa0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105050": {
            "additional_data": {
                "FUN_00105050": {
                    "1": "check_compiled_code",
                    "2": "check_equality",
                    "3": "compare_binary_files",
                    "6": "check_binary_compatibility"
                },
                "__s": {
                    "1": "file_data1",
                    "11": "string1",
                    "2": "file1_content",
                    "5": "str1"
                },
                "__s_00": {
                    "1": "file_data2",
                    "11": "string2",
                    "2": "file2_content",
                    "5": "str2"
                },
                "bVar16": {
                    "1": "is_extension",
                    "2": "is_equal",
                    "3": "is_less",
                    "5": "is_true"
                },
                "cVar1": {
                    "1": "last_char_of_file1",
                    "11": "last_char"
                },
                "lVar10": {
                    "1": "length2",
                    "2": "file_info_2",
                    "4": "result_2",
                    "9": "result2"
                },
                "lVar3": {
                    "1": "size1",
                    "2": "ptr1",
                    "3": "file1_size",
                    "6": "length1"
                },
                "lVar9": {
                    "1": "file1_handle",
                    "2": "file_info_1",
                    "4": "result_1",
                    "9": "result1"
                },
                "param_1": {
                    "1": "binary_file_path",
                    "2": "input_param_1",
                    "3": "input1",
                    "4": "input_1"
                },
                "param_2": {
                    "1": "argument2",
                    "2": "file_path2",
                    "3": "input2",
                    "4": "file2"
                },
                "pcVar7": {
                    "1": "strstr_res1",
                    "2": "strstr_result_1"
                },
                "pcVar8": {
                    "1": "strstr_res2",
                    "2": "ptr2"
                },
                "sVar5": {
                    "1": "str1_length",
                    "2": "str_len1",
                    "3": "len1"
                },
                "sVar6": {
                    "1": "length_2",
                    "2": "length2",
                    "3": "len2"
                },
                "uVar11": {
                    "1": "output",
                    "13": "result",
                    "6": "comparison_result",
                    "7": "return_value"
                },
                "uVar12": {
                    "1": "temp_checksum2",
                    "2": "file2_end",
                    "3": "sum1"
                },
                "uVar13": {
                    "1": "file1_size",
                    "2": "file1_offset",
                    "3": "offset_1",
                    "5": "offset1"
                },
                "uVar14": {
                    "1": "total_length_1",
                    "2": "file1_end",
                    "3": "sum3",
                    "4": "sum1"
                },
                "uVar15": {
                    "1": "library_path",
                    "2": "param_3",
                    "3": "value",
                    "4": "temp"
                },
                "uVar2": {
                    "1": "hash2",
                    "2": "length2",
                    "3": "offset2"
                },
                "uVar4": {
                    "1": "mask",
                    "3": "flags",
                    "6": "flag"
                },
                "unaff_R13": {
                    "1": "ptr2",
                    "2": "temp1"
                }
            },
            "called": [
                "FUN_00102fc3",
                "FUN_00104fa0"
            ],
            "calling": [
                "FUN_00103bec"
            ],
            "code": "\nulong check_binary_compatibility_00105050(undefined8 input_param1,undefined8 input_param2)\n\n{\n  char last_char;\n  ulong offset2;\n  char *string1;\n  char *string2;\n  long length1;\n  uint flag;\n  size_t len1;\n  size_t len2;\n  char *search_result1;\n  char *search_result2;\n  long result1;\n  long result2;\n  ulong result;\n  ulong sum2;\n  ulong offset1;\n  ulong sum1;\n  undefined8 temp;\n  long unaff_r13;\n  bool is_true;\n  \n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,input_param1,DAT_0010b770);\n  result = (ulong)DAT_0010b778;\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,result,input_param2,DAT_0010b768);\n  if ((result1 != 0) && (result2 != 0)) {\n    length1 = *(long *)(result2 + 0x20);\n    if (*(long *)(result1 + 0x20) == 0x10c2a8) {\n      result = 0xffffffff;\n      if (length1 == 0x10c2a8) {\nLAB_001050fa:\n        result = FUNC_00104fa0(input_param1,input_param2);\n        return result;\n      }\n    }\n    else if (length1 == 0x10c2a8) {\n      result = 1;\n    }\n    else {\n      offset1 = *(long *)(result1 + 0x10) + *(long *)(*(long *)(result1 + 0x20) + 0x30);\n      result = *(long *)(result2 + 0x10) + *(long *)(length1 + 0x30);\n      if (offset1 == result) goto LAB_001050fa;\n      result = (ulong)(-(uint)(offset1 < result) | 1);\n    }\n    return result;\n  }\n  temp = *DAT_0010b780;\n  FUN_00106530();\n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,temp,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,result,DAT_0010b768);\n  if ((result1 == 0) || (unaff_r13 = result2, result2 == 0)) {\n    result2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  offset1 = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  offset2 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  sum1 = *(long *)(result1 + 0x10) + offset1;\n  sum2 = *(long *)(unaff_r13 + 0x10) + offset2;\n  is_true = sum1 < sum2;\n  if ((sum1 != sum2) || (is_true = offset1 < offset2, offset1 != offset2)) {\n    return (ulong)(-(uint)is_true | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(unaff_r13 + 8);\n  len1 = strlen(string1);\n  len2 = strlen(string2);\n  search_result1 = strstr(string1,\"gnu_compiled\");\n  if (search_result1 == (char *)0x0) {\n    search_result2 = strstr(string1,\"gcc2_compiled\");\n    search_result1 = strstr(string2,\"gnu_compiled\");\n    if ((search_result1 == (char *)0x0) && (search_result1 = strstr(string2,\"gcc2_compiled\"), search_result1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (search_result2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    search_result1 = strstr(string2,\"gnu_compiled\");\n    if (search_result1 == (char *)0x0) {\n      search_result2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (search_result2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(unaff_r13 + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((len1 < 3) || (string1[len1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((len2 < 3) || (string2[len2 - 2] != '.')) goto LAB_00103202;\n      is_true = false;\n      goto LAB_001031e7;\n    }\n    last_char = string1[len1 - 1];\n    is_true = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((len2 < 3) || (string2[len2 - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (len2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[len2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_true = true;\nLAB_001031e7:\n    if ((string2[len2 - 1] != 'o') && (string2[len2 - 1] != 'a')) {\n      if (is_true) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_true) {\n    return 1;\n  }\nLAB_00103202:\n  result = FUNC_00104fa0(temp,result);\n  return result;\n}\n\n",
            "current_name": "check_binary_compatibility_00105050",
            "entrypoint": "0x00105050",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105050": "check_binary_compatibility_00105050",
                "__s": "string1",
                "__s_00": "string2",
                "bVar16": "is_true",
                "cVar1": "last_char",
                "lVar10": "result2",
                "lVar3": "length1",
                "lVar9": "result1",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "pcVar7": "search_result1",
                "pcVar8": "search_result2",
                "sVar5": "len1",
                "sVar6": "len2",
                "uVar11": "result",
                "uVar12": "sum2",
                "uVar13": "offset1",
                "uVar14": "sum1",
                "uVar15": "temp",
                "uVar2": "offset2",
                "uVar4": "flag",
                "unaff_R13": "unaff_r13"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105110": {
            "additional_data": {
                "**pplVar1": {
                    "1": "ptr_to_ptr_var1"
                },
                "*__ptr": {
                    "1": "ptr"
                },
                "*__s1": {
                    "1": "string1"
                },
                "*local_88": {
                    "1": "local_ptr_var3"
                },
                "*local_90": {
                    "1": "local_ptr_var2"
                },
                "*local_98": {
                    "1": "local_ptr_var1"
                },
                "*plVar2": {
                    "1": "ptr_var2"
                },
                "*puVar4": {
                    "1": "ptr_var4"
                },
                "*pvVar7": {
                    "1": "ptr_var7"
                },
                "DAT_0010b738": {
                    "1": "global_var9"
                },
                "DAT_0010b740": {
                    "1": "global_var7"
                },
                "DAT_0010b748": {
                    "1": "global_var6"
                },
                "DAT_0010b750": {
                    "1": "global_var8"
                },
                "DAT_0010b758": {
                    "1": "global_var2"
                },
                "DAT_0010b7c8": {
                    "1": "global_string1"
                },
                "DAT_0010b804": {
                    "1": "flag_to_print"
                },
                "DAT_0010b818": {
                    "1": "global_flag2"
                },
                "FUN_00105110": {
                    "1": "print_file_info",
                    "2": "print_sections_info",
                    "3": "print_sections",
                    "7": "print_section_info"
                },
                "_DAT_0010b7b0": {
                    "1": "global_data1"
                },
                "_DAT_0010b7b8": {
                    "1": "section_ptr_to_print"
                },
                "__ptr": {
                    "1": "section_ptr",
                    "2": "pointer",
                    "21": "ptr",
                    "3": "section_data"
                },
                "__s1": {
                    "1": "string_s1",
                    "2": "string1",
                    "3": "str",
                    "6": "section_name"
                },
                "_stdout": {
                    "2": "standard_output"
                },
                "cVar5": {
                    "1": "temp_char",
                    "15": "char_var",
                    "2": "section_type",
                    "5": "character"
                },
                "iVar6": {
                    "1": "index",
                    "17": "int_var",
                    "2": "var6",
                    "3": "section_type"
                },
                "lVar10": {
                    "1": "var4",
                    "2": "counter",
                    "3": "index",
                    "8": "var10"
                },
                "lVar3": {
                    "1": "var_l",
                    "2": "section_address",
                    "3": "long_var",
                    "6": "var3"
                },
                "lVar8": {
                    "1": "var_l",
                    "2": "section_info",
                    "3": "long_var",
                    "9": "var8"
                },
                "local_60": {
                    "1": "flag_char1",
                    "2": "local_var9",
                    "3": "char_var2",
                    "4": "local_var_60",
                    "8": "local_char"
                },
                "local_68": {
                    "1": "file_name_str",
                    "2": "local_buffer2",
                    "4": "local_array2",
                    "5": "local_var_68"
                },
                "local_88": {
                    "1": "local_undefined_ptr88",
                    "2": "local_ptr",
                    "4": "local_var_88"
                },
                "local_90": {
                    "1": "var10",
                    "2": "local_pointer2",
                    "6": "local_var_90"
                },
                "local_98": {
                    "1": "section_info",
                    "2": "local_var5",
                    "6": "local_var_98"
                },
                "local_a0": {
                    "1": "filename",
                    "2": "local_var2",
                    "3": "local_var",
                    "7": "local_var_a0"
                },
                "local_a8": {
                    "1": "local_undefined_arr",
                    "2": "buffer",
                    "3": "local_ptr",
                    "6": "local_var_a8"
                },
                "local_b0": {
                    "1": "temp_array",
                    "2": "buffer",
                    "3": "local_var2",
                    "6": "local_var_b0"
                },
                "local_b4": {
                    "1": "local_u_int",
                    "2": "local_var",
                    "3": "local_uint",
                    "6": "local_var1",
                    "7": "local_var_b4"
                },
                "param_1": {
                    "1": "arg1",
                    "2": "section_info"
                },
                "param_2": {
                    "1": "symbols",
                    "2": "data",
                    "4": "elf_header",
                    "5": "section_info"
                },
                "param_3": {
                    "1": "section_offset",
                    "2": "filename",
                    "4": "param3",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "function_name",
                    "3": "file_name",
                    "7": "section_name"
                },
                "plVar2": {
                    "1": "section_header_ptr",
                    "2": "section",
                    "3": "ptr1"
                },
                "pplVar1": {
                    "1": "ptr_to_ptr_data",
                    "2": "ptr_ptr_var1",
                    "3": "section_ptr",
                    "4": "section_entry"
                },
                "puVar4": {
                    "1": "global_var3",
                    "2": "current_section",
                    "3": "var4",
                    "5": "ptr_var"
                },
                "putchar": {
                    "1": "put_character"
                },
                "pvStack_70": {
                    "1": "ptr_stack70",
                    "3": "stack_var_70",
                    "4": "stack_ptr3"
                },
                "pvStack_78": {
                    "1": "ptr_stack2",
                    "3": "stack_var_78",
                    "4": "stack_var2"
                },
                "pvStack_80": {
                    "1": "allocated_memory_a",
                    "3": "stack_var_80",
                    "4": "stack_var1"
                },
                "pvVar7": {
                    "1": "ptr_v",
                    "2": "section_data",
                    "3": "ptr_var2",
                    "4": "ptr_var"
                },
                "uVar9": {
                    "1": "flag_var",
                    "2": "section_flags",
                    "3": "flags",
                    "5": "var9",
                    "9": "uint_var"
                }
            },
            "called": [
                "FUN_001053c0",
                "xmalloc",
                "printf",
                "FUN_00103463",
                "FUN_00106530",
                "FUN_00103238",
                "FUN_001053b0",
                "free"
            ],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\n\n\nvoid print_section_info_00105110(undefined8 *strings,long *section_info,undefined8 param_3,undefined8 *section_name)\n\n{\n  void *ptr;\n  char *section_name;\n  long **section_entry;\n  long *ptr1;\n  long var3;\n  undefined8 *ptr_var;\n  char char_var;\n  int int_var;\n  void *var7;\n  long var8;\n  uint uint_var;\n  long var10;\n  uint local_var_b4;\n  undefined local_var_b0 [8];\n  undefined *local_var_a8;\n  undefined8 local_var_a0;\n  long *local_var_98;\n  long *local_var_90;\n  void *local_var_88;\n  void *stack_ptr1;\n  void *stack_ptr2;\n  void *stack_ptr3;\n  undefined local_var_68 [8];\n  char local_char;\n  \n  if (*(code **)(PTR_PTR_FUN_0010b260 + 0x18) == FUN_001053b0) {\n    if (DAT_0010b818 != 0) {\n      if (section_name != (undefined8 *)0x0) {\n        printf(\"%s:\",*section_name);\n      }\n      printf(\"%s:\",*strings);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x18))(section_name,strings);\n  }\n  local_var_a8 = local_var_68;\n  (**(code **)(strings[1] + 0x218))(strings,section_info,local_var_a8);\n  uint_var = *(uint *)(section_info + 3);\n  char_var = local_char;\n  if (((((local_char == 'i') && ((uint_var & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (char_var = *DAT_0010b7c8, (uint_var & 2) == 0)))) &&\n     (char_var = local_char, DAT_0010b7c8[1] != '\\0')) {\n    char_var = DAT_0010b7c8[1];\n  }\n  local_char = char_var;\n  local_var_a0 = param_3;\n  if ((uint_var & 0x200100) != 0) goto LAB_00103330;\n  var8 = *section_info;\n  int_var = *(int *)(*(long *)(var8 + 8) + 8);\n  if (((uint_var & 0x200000) == 0) && (int_var == 5)) {\n    local_var_98 = section_info;\n    if (*(long *)(var8 + 0x110) == 0) {\n      local_var_98 = (long *)0x0;\n    }\n  }\n  else {\n    local_var_98 = (long *)0x0;\n    if (((int_var - 2U & 0xfffffffd) == 0) && (local_var_90 = section_info, *(long *)(var8 + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  local_var_90 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&local_var_a8,strings);\n  do {\n    if (DAT_0010b804 == 0) {\nLAB_001051e6:\n      putc(10,standard_output);\n      return;\n    }\n    if (_DAT_0010b7b8 == strings) {\n      ptr_var = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      _DAT_0010b7b8 = ptr_var;\n      var7 = DAT_0010b750;\n      if (section_info[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == strings) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          uint_var = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; uint_var < DAT_0010b748; uint_var = uint_var + 1) {\n              ptr = *(void **)((long)var7 + (ulong)uint_var * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(var7);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(strings + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          stack_ptr3 = DAT_0010b758;\n          local_var_88 = DAT_0010b740;\n          stack_ptr1 = DAT_0010b750;\n          stack_ptr2 = DAT_0010b738;\n          bfd_map_over_sections(strings,FUN_00103c00,&local_var_88);\n          _DAT_0010b7b0 = strings;\n        }\n        section_name = (char *)section_info[1];\n        for (uint_var = 0; uint_var < DAT_0010b748; uint_var = uint_var + 1) {\n          var8 = (ulong)uint_var * 8;\n          var7 = DAT_0010b738;\n          for (var10 = 0;\n              *(long *)((long)var7 + var8) != var10 && var10 <= *(long *)((long)var7 + var8)\n              ; var10 = var10 + 1) {\n            section_entry = *(long ***)(*(long *)((long)DAT_0010b750 + var8) + var10 * 8);\n            ptr1 = *section_entry;\n            if ((((ptr1 != (long *)0x0) &&\n                 (var3 = *ptr1, *(long *)(var3 + 0x20) == section_info[4])) &&\n                (*(long *)(var3 + 0x10) == section_info[2])) &&\n               (((int_var = strcmp(section_name,*(char **)(var3 + 8)), int_var == 0 &&\n                 (char_var = (**(code **)(strings[1] + 0x240))\n                                    (strings,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + var8),section_entry[1],\n                                     &local_var_88,local_var_b0,&local_var_b4,0), var7 = DAT_0010b738,\n                 char_var != '\\0')) && (local_var_88 != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",local_var_88,(ulong)local_var_b4);\n              uint_var = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(section_info[4] + 0xe0) == strings) {\n        char_var = (**(code **)(strings[1] + 0x250))(strings,DAT_0010b758,section_info,&local_var_88,&local_var_b4);\n        if (((char_var != '\\0') ||\n            (char_var = (**(code **)(strings[1] + 0x240))\n                               (strings,DAT_0010b758,section_info[4],section_info[2],&local_var_88,local_var_b0,\n                                &local_var_b4,0), char_var != '\\0')) &&\n           ((local_var_88 != (void *)0x0 && (local_var_b4 != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nLAB_00105359:\n    var8 = (**(code **)(strings[1] + 0x1f8))(strings);\n    if (var8 < 0) {\n      FUN_00103463(var8);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    var8 = (**(code **)(strings[1] + 0x200))(strings,DAT_0010b758);\n    ptr_var = strings;\n    if (-1 < var8) goto LAB_00105288;\n    FUN_00106530(*strings);\nLAB_00103330:\n    local_var_98 = (long *)0x0;\n    local_var_90 = (long *)0x0;\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&local_var_a8,strings);\n  } while( true );\n}\n\n",
            "current_name": "print_section_info_00105110",
            "entrypoint": "0x00105110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105110": "print_section_info_00105110",
                "__ptr": "ptr",
                "__s1": "section_name",
                "_stdout": "standard_output",
                "cVar5": "char_var",
                "iVar6": "int_var",
                "lVar10": "var10",
                "lVar3": "var3",
                "lVar8": "var8",
                "local_60": "local_char",
                "local_68": "local_var_68",
                "local_88": "local_var_88",
                "local_90": "local_var_90",
                "local_98": "local_var_98",
                "local_a0": "local_var_a0",
                "local_a8": "local_var_a8",
                "local_b0": "local_var_b0",
                "local_b4": "local_var_b4",
                "param_1": "strings",
                "param_2": "section_info",
                "param_4": "section_name",
                "plVar2": "ptr1",
                "pplVar1": "section_entry",
                "puVar4": "ptr_var",
                "pvStack_70": "stack_ptr3",
                "pvStack_78": "stack_ptr2",
                "pvStack_80": "stack_ptr1",
                "pvVar7": "var7",
                "uVar9": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053b0": {
            "additional_data": {
                "*param_1": {
                    "1": "text1"
                },
                "*param_2": {
                    "1": "message_2"
                },
                "DAT_0010b818": {
                    "1": "condition_variable",
                    "2": "flag"
                },
                "FUN_001053b0": {
                    "1": "print_function_name_and_values",
                    "2": "print_colon_separated_strings",
                    "3": "print_parameters",
                    "4": "print_data",
                    "5": "print_message"
                },
                "param_1": {
                    "1": "message_header",
                    "2": "label1",
                    "3": "string1",
                    "4": "string_1",
                    "6": "message1"
                },
                "param_2": {
                    "1": "filename",
                    "2": "data",
                    "3": "message_2",
                    "4": "string_2",
                    "6": "message2"
                },
                "param_3": {
                    "1": "unused",
                    "10": "unused_param",
                    "4": "param_3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "data",
                    "2": "param",
                    "3": "additional_info",
                    "4": "param_4",
                    "5": "param4"
                },
                "printf": {
                    "2": "print"
                }
            },
            "called": [
                "FUN_00103573"
            ],
            "calling": [
                "FUN_00105110"
            ],
            "code": "\nvoid print_strings_001053b0(undefined8 *message1,undefined8 *message2,undefined8 unused_param,undefined8 param4)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (message1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*message1);\n  }\n  printf(\"%s:\",*message2,param4);\n  return;\n}\n\n",
            "current_name": "print_strings_001053b0",
            "entrypoint": "0x001053b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053b0": "print_strings_001053b0",
                "param_1": "message1",
                "param_2": "message2",
                "param_3": "unused_param",
                "param_4": "param4",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053c0": {
            "additional_data": {
                "DCGETTEXT": {
                    "1": "get_translated_message"
                },
                "FUN_001035a2": {
                    "1": "clean_print_output",
                    "2": "cleanup"
                },
                "FUN_00104740": {
                    "1": "other_function"
                },
                "FUN_001053c0": {
                    "1": "print_symclass_info",
                    "23": "print_symbol_info",
                    "5": "print_symbol_information"
                },
                "FUN_001054d0": {
                    "1": "print_value",
                    "2": "print_address"
                },
                "FUN_00106300": {
                    "1": "print_error",
                    "2": "print_error_message"
                },
                "bfd_is_undefined_symclass": {
                    "1": "is_symbol_undefined",
                    "2": "is_undefined_symbol_class"
                },
                "cVar2": {
                    "1": "is_undefined_symbol_class",
                    "12": "is_undefined",
                    "2": "is_undefined_sym_class",
                    "3": "is_symbol_undefined",
                    "6": "is_undefined_symbol",
                    "7": "is_undefined_symclass"
                },
                "dcgettext": {
                    "1": "get_localized_message",
                    "2": "get_localized_string",
                    "3": "get_error_message"
                },
                "iVar1": {
                    "1": "default_width",
                    "3": "symbol_class",
                    "4": "width",
                    "5": "is_undefined",
                    "9": "print_width"
                },
                "lVar4": {
                    "1": "print_value",
                    "2": "address",
                    "3": "offset",
                    "4": "value",
                    "6": "symbol_address"
                },
                "param_1": {
                    "1": "symbols",
                    "2": "symbol_info_ptr",
                    "22": "symbol_info",
                    "3": "symbol_data"
                },
                "param_2": {
                    "1": "data",
                    "16": "param",
                    "2": "format_specifier",
                    "5": "param2"
                },
                "printf": {
                    "1": "print",
                    "2": "print_output",
                    "6": "print_formatted"
                },
                "printf(\"        \")": {
                    "1": "print_indentation"
                },
                "printf(\" %5s\", *(undefined8 *)(*param_1 + 0x20))": {
                    "1": "print_string_value"
                },
                "printf(&DAT_0010b238, (ulong)(uint)(int)*(char *)(*param_1 + 0x19))": {
                    "1": "print_one_byte_value"
                },
                "printf(&DAT_0010b23d, (ulong)(uint)(int)*(short *)(*param_1 + 0x1a))": {
                    "1": "print_two_byte_value"
                },
                "printf(DAT_0010b7a0, uVar3)": {
                    "1": "print_symbol_value"
                },
                "putchar": {
                    "1": "print_character"
                },
                "uVar3": {
                    "1": "text",
                    "3": "width",
                    "5": "message",
                    "6": "print_width",
                    "7": "print_value"
                }
            },
            "called": [
                "FUN_00106300",
                "dcgettext",
                "printf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "FUN_001035a2"
            ],
            "calling": [
                "FUN_00105110"
            ],
            "code": "\nvoid print_symbol_info_001053c0(long *symbol_info,undefined8 param)\n\n{\n  int print_width;\n  char is_undefined;\n  undefined8 print_value;\n  long symbol_address;\n  \n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol_info + 8));\n  print_width = DAT_0010b7a8;\n  if (is_undefined == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        print_value = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        FUN_00106300(print_value,print_width);\n        goto LAB_00103623;\n      }\n      print_value = *(undefined8 *)*symbol_info;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (symbol_info[2] == 0) {\n          symbol_address = symbol_info[1];\n        }\n        else {\n          symbol_address = *(long *)(symbol_info[2] + 0x38);\n        }\n        FUNC_001054d0(symbol_address);\n        if (DAT_0010b7ec != 0) {\n          FUN_001035a2();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      print_value = *(undefined8 *)*symbol_info;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(DAT_0010b7a0,print_value);\n    if (DAT_0010b7ec != 0) {\n      FUN_001035a2();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) != '-') {\n    FUN_00104740(&DAT_0010712c,symbol_info,0,param);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbol_info + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbol_info + 0x20));\n  FUN_00104740(&DAT_0010712c,symbol_info,0,param);\n  return;\n}\n\n",
            "current_name": "print_symbol_info_001053c0",
            "entrypoint": "0x001053c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "bfd_is_undefined_symclass": "is_undefined_symbol_class",
                "cVar2": "is_undefined",
                "dcgettext": "get_error_message",
                "iVar1": "print_width",
                "lVar4": "symbol_address",
                "param_1": "symbol_info",
                "param_2": "param",
                "printf": "print_formatted",
                "putchar": "print_character",
                "uVar3": "print_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001054d0": {
            "called": [
                "FUN_0010370a",
                "printf"
            ],
            "calling": [
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_0010651a",
                "FUN_001035a2"
            ],
            "code": "\nvoid FUNC_001054d0(undefined8 param_1)\n\n{\n  char cVar1;\n  ushort uVar2;\n  int iVar3;\n  long *plVar4;\n  int *piVar5;\n  undefined8 uVar6;\n  long lVar7;\n  ulong uVar8;\n  byte bVar9;\n  ulong uVar10;\n  char *pcVar11;\n  undefined8 in_R8;\n  undefined8 in_R9;\n  \n  uVar8 = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,param_1);\n    return;\n  }\n  plVar4 = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  uVar10 = uVar8;\n  FUN_00106300(plVar4,uVar8);\n  FUN_00104740(\"%-20s|\",plVar4,0,uVar10,in_R8,in_R9,uVar8);\n  cVar1 = bfd_is_undefined_symclass((int)*(char *)(*plVar4 + 8));\n  if (cVar1 == '\\0') {\n    FUNC_001054d0(*(undefined8 *)*plVar4);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*plVar4 + 8));\n  if (*(char *)(*plVar4 + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*plVar4 + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*plVar4 + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (plVar4[2] == 0) {\n    if (plVar4[3] != 0) {\n      lVar7 = *(long *)(plVar4[3] + 0x30);\n      cVar1 = *(char *)(lVar7 + 0x28);\n      if (cVar1 == 'g') goto LAB_00103983;\n      if (cVar1 == 'h') {\n        pcVar11 = \"Line\";\n      }\n      else if (cVar1 == 'd') {\n        pcVar11 = \"Block\";\n      }\n      else if (*(ushort *)(lVar7 + 0x26) == 0) {\n        pcVar11 = \"None\";\n      }\n      else {\n        uVar2 = *(ushort *)(lVar7 + 0x26) >> 4 & 3;\n        if (uVar2 == 2) {\n          pcVar11 = \"Function\";\n        }\n        else if (uVar2 == 3) {\n          pcVar11 = \"Array\";\n        }\n        else {\n          if (uVar2 != 1) {\n            free(DAT_0010b730);\n            uVar2 = *(ushort *)(lVar7 + 0x26);\n            bVar9 = *(byte *)(lVar7 + 0x28);\n            pcVar11 = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            iVar3 = asprintf(&DAT_0010b730,pcVar11,(ulong)bVar9,(ulong)uVar2);\n            pcVar11 = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          pcVar11 = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    bVar9 = *(byte *)(plVar4[2] + 0x48) & 0xf;\n    switch(bVar9) {\n    case 0:\n      pcVar11 = \"NOTYPE\";\n      break;\n    case 1:\n      pcVar11 = \"OBJECT\";\n      break;\n    case 2:\n      pcVar11 = \"FUNC\";\n      break;\n    case 3:\n      pcVar11 = \"SECTION\";\n      break;\n    case 4:\n      pcVar11 = \"FILE\";\n      break;\n    case 5:\n      pcVar11 = \"COMMON\";\n      break;\n    case 6:\n      pcVar11 = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      pcVar11 = \"<processor specific>: %d\";\n      if ((2 < bVar9 - 0xd) && (pcVar11 = \"<OS specific>: %d\", 2 < bVar9 - 10)) {\n        pcVar11 = \"<unknown>: %d\";\n      }\n      pcVar11 = (char *)dcgettext(0,pcVar11,5);\n      iVar3 = asprintf(&DAT_0010b728,pcVar11,(ulong)bVar9);\n      pcVar11 = DAT_0010b728;\njoined_r0x00103964:\n      if (iVar3 < 0) {\n        piVar5 = __errno_location();\n        uVar6 = xstrerror(*piVar5);\n        FUN_00106300(&DAT_0010712d,uVar6);\nLAB_00103983:\n        pcVar11 = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",pcVar11);\n  }\n  if (plVar4[2] == 0) {\n    if (plVar4[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(plVar4[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUNC_001054d0();\n  }\n  lVar7 = plVar4[2];\n  if ((lVar7 != 0) || (lVar7 = plVar4[3], lVar7 != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(lVar7 + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "current_name": "FUNC_001054d0",
            "entrypoint": "0x001054d0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001054d0": "FUNC_001054d0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105530": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105530",
            "entrypoint": "0x00105530",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105560": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105560",
            "entrypoint": "0x00105560",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001055f0": {
            "additional_data": {
                "DAB_0010b23b": {
                    "1": "global_var1"
                },
                "DAB_0010b240": {
                    "1": "global_var2"
                },
                "DAB_0010b244": {
                    "1": "global_var3"
                },
                "DAT_00107033": {
                    "1": "data_var7033"
                },
                "DAT_0010b23b": {
                    "1": "data_var23b"
                },
                "DAT_0010b240": {
                    "1": "data_var240"
                },
                "DAT_0010b244": {
                    "1": "data_var244"
                },
                "DAT_0010b7c0": {
                    "1": "data_var7c0"
                },
                "DAT_0010b7c4": {
                    "1": "data_var7c4"
                },
                "DAT_0010b7c8": {
                    "1": "data_var7c8"
                },
                "DAT_0010b7cc": {
                    "1": "data_var7cc"
                },
                "DAT_0010b7d0": {
                    "1": "data_var7d0"
                },
                "DAT_0010b7d4": {
                    "1": "data_var7d4"
                },
                "DAT_0010b7d8": {
                    "1": "data_var7d8"
                },
                "DAT_0010b7dc": {
                    "1": "data_var7dc"
                },
                "DAT_0010b7e0": {
                    "1": "data_var7e0"
                },
                "DAT_0010b7e4": {
                    "1": "data_var7e4"
                },
                "DAT_0010b7e8": {
                    "1": "data_var7e8"
                },
                "DAT_0010b7ec": {
                    "1": "data_var7ec"
                },
                "DAT_0010b7f0": {
                    "1": "data_var7f0"
                },
                "DAT_0010b7f4": {
                    "1": "data_var7f4"
                },
                "DAT_0010b7fc": {
                    "1": "data_var7fc"
                },
                "DAT_0010b800": {
                    "1": "data_var800"
                },
                "DAT_0010b804": {
                    "1": "data_var804"
                },
                "DAT_0010b808": {
                    "1": "data_var808"
                },
                "DAT_0010b80c": {
                    "1": "data_var80c"
                },
                "DAT_0010b810": {
                    "1": "data_var810"
                },
                "DAT_0010b814": {
                    "1": "data_var814"
                },
                "DAT_0010b818": {
                    "1": "data_var818"
                },
                "DAT_0010b820": {
                    "1": "data_var820"
                },
                "FUN_00103ca0": {
                    "1": "print_error_message"
                },
                "FUN_001043d0": {
                    "1": "check_file_existence"
                },
                "FUN_001055f0": {
                    "1": "extracted_data_from_file",
                    "2": "parse_command_line_arguments"
                },
                "FUN_00106300": {
                    "1": "format_string_with_args"
                },
                "FUN_00106400": {
                    "1": "print_and_exit"
                },
                "PTR_s_debug_syms_0010b280": {
                    "1": "debug_syms_pointer"
                },
                "__ptr": {
                    "1": "new_buffer",
                    "2": "byte_pointer2",
                    "4": "byte_ptr3",
                    "5": "byte_pointer3",
                    "6": "byte_ptr"
                },
                "__s": {
                    "1": "content_string",
                    "3": "byte_stream",
                    "4": "byte_array",
                    "5": "byte_pointer2"
                },
                "__src": {
                    "1": "byte_source",
                    "3": "long_pointer",
                    "4": "long_ptr1",
                    "5": "long_pointer1"
                },
                "__stream": {
                    "1": "stream2",
                    "18": "file_stream",
                    "3": "file_pointer"
                },
                "_optarg": {
                    "1": "opt_arg_var"
                },
                "_sch_istable": {
                    "1": "istable_var"
                },
                "bVar2": {
                    "1": "bool_var1",
                    "10": "byte_var2",
                    "2": "byte_var1",
                    "4": "byte_var"
                },
                "bVar3": {
                    "1": "bool_var_3",
                    "10": "bool_var1",
                    "2": "is_escape",
                    "8": "bool_var3"
                },
                "bVar4": {
                    "1": "bool_variable2",
                    "11": "bool_var2",
                    "2": "bool_var_2",
                    "7": "bool_var4"
                },
                "bVar5": {
                    "1": "bool_flag_5",
                    "10": "bool_var3",
                    "2": "bool_var_3",
                    "7": "bool_var5"
                },
                "bVar7": {
                    "1": "byte_var_3",
                    "2": "byte_var1",
                    "4": "byte_var3",
                    "5": "byte_var2",
                    "7": "byte_var7"
                },
                "bfd_errmsg": {
                    "1": "bfd_error_msg"
                },
                "bfd_get_error": {
                    "3": "get_bfd_error"
                },
                "bfd_init": {
                    "1": "bfd_init",
                    "3": "initialize_bfd"
                },
                "bfd_plugin_set_program_name": {
                    "1": "set_program_name_in_bfd_plugin",
                    "2": "set_plugin_program_name"
                },
                "bfd_set_default_target": {
                    "1": "set_default_target_in_bfd"
                },
                "bfd_set_error_program_name": {
                    "1": "set_program_name_in_bfd_set_error",
                    "2": "set_bfd_error_program_name"
                },
                "bindtextdomain": {
                    "5": "bind_text_domain"
                },
                "cVar6": {
                    "1": "style_char",
                    "12": "char_var1",
                    "2": "char1",
                    "7": "char_var6"
                },
                "cVar8": {
                    "1": "char_var4",
                    "11": "char_var2",
                    "2": "char2",
                    "7": "char_var8"
                },
                "cVar9": {
                    "1": "cplus_demangle_style",
                    "11": "char_var3",
                    "2": "char_var_3",
                    "7": "char_var9"
                },
                "cplus_demangle_name_to_style": {
                    "1": "name_to_style_in_cplus_demangle"
                },
                "cplus_demangle_set_style": {
                    "1": "set_c_plus_demangle_style",
                    "2": "set_demangle_style"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "exit": {
                    "2": "exit_program"
                },
                "fclose": {
                    "1": "file_close",
                    "2": "close_file"
                },
                "ferror": {
                    "2": "check_file_error"
                },
                "fopen": {
                    "1": "file_open",
                    "3": "open_file"
                },
                "fprintf": {
                    "1": "formatted_print"
                },
                "fread": {
                    "1": "read_from_file"
                },
                "free": {
                    "1": "deallocate_memory",
                    "2": "free_memory"
                },
                "fseek": {
                    "1": "seek_file_position",
                    "2": "set_file_position"
                },
                "ftell": {
                    "1": "get_current_file_position",
                    "2": "get_file_position"
                },
                "getopt_long": {
                    "1": "parse_command_line_options",
                    "3": "get_long_option"
                },
                "hypen": {
                    "1": "hypen"
                },
                "iVar10": {
                    "1": "int_value10",
                    "10": "int_var1",
                    "2": "index",
                    "5": "int_var10"
                },
                "iVar12": {
                    "1": "iteration_index",
                    "2": "index",
                    "4": "int_var12",
                    "8": "int_var2"
                },
                "iVar12: ": {
                    "1": "index_var2"
                },
                "iVar13": {
                    "1": "int_var3"
                },
                "iVar14": {
                    "1": "int_var4"
                },
                "iVar15": {
                    "1": "int_variable3"
                },
                "iVar27": {
                    "1": "int_var3"
                },
                "iVar5": {
                    "1": "file_open_result"
                },
                "ioVar11": {
                    "1": "file_seek_result"
                },
                "lVar17": {
                    "1": "long_variable1",
                    "12": "long_var1",
                    "2": "long_var_17",
                    "6": "long_var17"
                },
                "lVar18": {
                    "1": "long_var2"
                },
                "lVar19": {
                    "1": "long_var3"
                },
                "lVar24": {
                    "1": "buffer",
                    "2": "long_var_24",
                    "6": "long_var24",
                    "9": "long_var2"
                },
                "local_108": {
                    "1": "temp_buffer_size",
                    "2": "local_variable3",
                    "3": "local_size",
                    "5": "local_var108",
                    "8": "local_var3"
                },
                "local_10c": {
                    "1": "local_var_2",
                    "2": "local_variable2",
                    "3": "local_int2",
                    "4": "local_var10c",
                    "7": "local_var2"
                },
                "local_110": {
                    "1": "temp_i",
                    "2": "local_int_110",
                    "5": "local_var110",
                    "7": "local_var1"
                },
                "local_c8": {
                    "1": "local_struct_variable",
                    "10": "local_stat",
                    "2": "local_stat_c8",
                    "4": "stat_var"
                },
                "memcmp": {
                    "1": "compare_memory"
                },
                "memcpy": {
                    "1": "mem_copy",
                    "3": "copy_memory"
                },
                "memmove": {
                    "1": "mem_move",
                    "3": "move_memory"
                },
                "memset": {
                    "1": "clear_buffer_data"
                },
                "param_1": {
                    "1": "num_args",
                    "2": "num_of_params",
                    "3": "count",
                    "6": "argc",
                    "7": "num_params",
                    "8": "num_files"
                },
                "param_2": {
                    "1": "param_values",
                    "2": "param_array",
                    "3": "file_names",
                    "6": "argv",
                    "8": "file_paths"
                },
                "pbVar1": {
                    "1": "byte_value",
                    "2": "ptr1",
                    "3": "current_byte",
                    "4": "byte_ptr1",
                    "7": "byte_pointer1"
                },
                "pbVar23": {
                    "1": "ptr_byte23",
                    "2": "byte_var23",
                    "3": "byte_pointer2",
                    "4": "byte_ptr4",
                    "5": "byte_pointer4"
                },
                "pbVar25": {
                    "1": "byte_ptr4",
                    "2": "byte_pointer4",
                    "3": "byte_pointer3",
                    "4": "byte_pointer5"
                },
                "pcVar22": {
                    "1": "char_pointer3",
                    "2": "str_ptr1",
                    "3": "str_var1",
                    "4": "char_pointer1"
                },
                "pcVar26": {
                    "1": "char_pointer_1",
                    "2": "char_ptr2",
                    "3": "string_var2",
                    "4": "str_var2"
                },
                "piVar15": {
                    "1": "int_pointer_1",
                    "2": "ptr2",
                    "4": "int_ptr1",
                    "8": "int_pointer1"
                },
                "piVar27": {
                    "1": "int_ptr_28",
                    "2": "int_pointer_3",
                    "3": "int_ptr2",
                    "4": "int_ptr3",
                    "8": "int_pointer3"
                },
                "plVar18": {
                    "1": "param_2_copy",
                    "2": "long_ptr2",
                    "3": "file_paths_ptr",
                    "5": "long_pointer2"
                },
                "plVar19": {
                    "1": "param_list2",
                    "2": "long_pointer2",
                    "5": "long_pointer3"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "realloc": {
                    "1": "reallocate_memory"
                },
                "sVar16": {
                    "1": "size_value16",
                    "2": "size_t_var1",
                    "3": "size_var1",
                    "5": "size",
                    "6": "size_var"
                },
                "setlocale": {
                    "5": "set_locale"
                },
                "stat": {
                    "1": "get_file_stats",
                    "2": "get_file_status"
                },
                "strcmp": {
                    "1": "string_compare",
                    "3": "compare_strings"
                },
                "strcpy": {
                    "1": "copy_string"
                },
                "strlen": {
                    "1": "string_length",
                    "3": "get_string_length"
                },
                "textdomain": {
                    "2": "set_text_domain"
                },
                "uVar11": {
                    "1": "uint_value11",
                    "10": "uint_var1",
                    "3": "uint_var",
                    "6": "uint_var11"
                },
                "uVar13": {
                    "1": "undefined4_1",
                    "2": "uint_var_2",
                    "4": "uint_var13",
                    "7": "uint_var2"
                },
                "uVar14": {
                    "1": "uint_var_14",
                    "2": "uint_var_3",
                    "4": "uint_var14",
                    "7": "uint_var3"
                },
                "uVar20": {
                    "1": "uint64_var1",
                    "2": "error_message",
                    "4": "uint_var20",
                    "8": "undefined8_var1"
                },
                "uVar21": {
                    "1": "u_var21",
                    "2": "uint_var5",
                    "4": "uint_var21",
                    "8": "undefined8_var2"
                },
                "unaff_R12": {
                    "1": "result_ptr2",
                    "2": "int_pointer",
                    "4": "int_ptr2",
                    "8": "int_pointer2"
                },
                "unaff_R14": {
                    "1": "int_pointer3"
                },
                "unaff_RBP": {
                    "1": "return_ptr",
                    "2": "result_ptr",
                    "5": "undefined_pointer",
                    "6": "undefined_ptr1"
                },
                "xFree": {
                    "1": "free_memory"
                },
                "xexit": {
                    "2": "exit_program"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xmalloc_set_program_name": {
                    "1": "set_program_name_in_xmalloc",
                    "2": "set_program_name"
                },
                "xrealloc": {
                    "3": "reallocate_memory"
                },
                "xstrdup": {
                    "1": "str_dup",
                    "3": "duplicate_string"
                }
            },
            "called": [
                "FUN_00104370",
                "bfd_set_error_program_name",
                "dcgettext",
                "fprintf",
                "memmove",
                "bfd_errmsg",
                "exit",
                "xmalloc_set_program_name",
                "free",
                "FUN_00106300",
                "xstrdup",
                "cplus_demangle_set_style",
                "setlocale",
                "bfd_set_default_target",
                "printf",
                "fclose",
                "bindtextdomain",
                "stat",
                "getopt_long",
                "bfd_get_error",
                "xmalloc",
                "memcpy",
                "fread",
                "bfd_init",
                "ftell",
                "cplus_demangle_name_to_style",
                "bfd_plugin_set_program_name",
                "strlen",
                "bfd_plugin_set_plugin",
                "ferror",
                "textdomain",
                "fopen",
                "FUN_00106400",
                "xexit",
                "strcmp",
                "fseek",
                "FUN_00103ca0",
                "FUN_001043d0",
                "xrealloc"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nundefined ** parse_command_line_arguments_001055f0(int num_files,long *file_paths)\n\n{\n  byte *byte_pointer1;\n  byte byte_var2;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  char char_var1;\n  byte byte_var7;\n  char char_var2;\n  char char_var3;\n  int int_var1;\n  uint uint_var1;\n  int int_var2;\n  undefined4 uint_var2;\n  undefined4 uint_var3;\n  FILE *file_stream;\n  byte *byte_pointer2;\n  int *int_pointer1;\n  size_t size_var;\n  byte *byte_ptr;\n  long *long_ptr;\n  long long_var1;\n  long *long_pointer2;\n  long *long_pointer3;\n  undefined8 undefined8_var1;\n  undefined8 undefined8_var2;\n  char *char_pointer1;\n  byte *byte_pointer4;\n  undefined **undefined_ptr1;\n  long long_var2;\n  byte *byte_ptr5;\n  char *char_pointer2;\n  int *int_pointer2;\n  int *int_pointer3;\n  int local_var1;\n  int local_var2;\n  size_t local_var3;\n  get_file_status local_stat;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  char_pointer1 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *file_paths;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  long_pointer2 = file_paths;\n  if (1 < num_files) {\n    local_var2 = 2000;\n    int_pointer2 = (int *)0x1;\n    local_var1 = 0;\n    do {\n      int_var2 = (int)int_pointer2;\n      undefined_ptr1 = (undefined **)(long)int_var2;\n      int_pointer3 = (int *)((long)undefined_ptr1 * 8);\n      if (*(char *)long_pointer2[(long)undefined_ptr1] != '@') goto LAB_00105a70;\n      local_var2 = local_var2 + -1;\n      if (local_var2 == 0) {\n        long_var2 = *long_pointer2;\n        char_pointer2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      char_pointer1 = (char *)long_pointer2[(long)undefined_ptr1] + 1;\n      int_var1 = get_file_status(char_pointer1,&local_stat);\n      if (int_var1 < 0) {\nLAB_00105a70:\n        if (num_files <= int_var2 + 1) break;\nLAB_00105a7a:\n        uint_var1 = int_var2 + 1;\n        local_var1 = int_var2;\n      }\n      else {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        file_stream = fopen(char_pointer1,\"r\");\n        if (file_stream == (FILE *)0x0) goto LAB_00105a70;\n        int_var1 = fseek(file_stream,0,2);\n        if (((int_var1 == -1) ||\n            (char_pointer1 = (char *)ftell(file_stream), (int *)char_pointer1 == (int *)0xffffffffffffffff)) ||\n           (int_var1 = fseek(file_stream,0,0), int_var1 == -1)) {\nLAB_00105ad0:\n          fclose(file_stream);\n          if (int_var2 + 1 < num_files) goto LAB_00105a7a;\n          break;\n        }\n        byte_pointer2 = (byte *)xmalloc((char *)((long)char_pointer1 + 1));\n        int_pointer1 = (int *)fread(byte_pointer2,1,(size_t)char_pointer1,file_stream);\n        if (((int *)char_pointer1 != int_pointer1) && (int_var1 = ferror(file_stream), int_var1 != 0)) {\n          free_memory(byte_pointer2);\n          goto LAB_00105ad0;\n        }\n        byte_pointer2[(long)int_pointer1] = 0;\n        byte_var7 = *byte_pointer2;\n        byte_pointer4 = byte_pointer2;\n        if (byte_var7 != 0) {\nLAB_001057d0:\n          if (((&istable_var)[(ulong)byte_var7 * 2] & 0x40) != 0) goto LAB_001057c0;\n          size_var = strlen((char *)byte_pointer2);\n          byte_ptr = (byte *)xmalloc(size_var + 1);\n          int_var1 = 0;\n          bool_var3 = false;\n          bool_var1 = false;\n          long_var2 = 0;\n          long_ptr = (long *)0x0;\n          bool_var2 = false;\n          byte_pointer4 = byte_pointer2;\n          do {\n            while (((&istable_var)[(ulong)*byte_pointer4 * 2] & 0x40) != 0) {\n              byte_pointer4 = byte_pointer4 + 1;\n            }\n            if ((int_var1 == 0) || (long_pointer3 = long_ptr + long_var2, int_var1 + -1 <= (int)long_var2)) {\n              if (long_ptr == (long *)0x0) {\n                int_var1 = 8;\n                long_ptr = (long *)xmalloc(0x40);\n                long_pointer3 = long_ptr + long_var2;\n                *long_pointer3 = 0;\n              }\n              else {\n                int_var1 = int_var1 * 2;\n                long_ptr = (long *)xrealloc(long_ptr,(long)int_var1 << 3);\n                long_pointer3 = long_ptr + long_var2;\n                *long_pointer3 = 0;\n              }\n            }\n            byte_var7 = *byte_pointer4;\n            byte_ptr5 = byte_ptr;\n            while (byte_var7 != 0) {\n              while( true ) {\n                if ((((&istable_var)[(ulong)byte_var7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bool_var3 | bool_var2 | bool_var1))) {\n                  bool_var2 = false;\n                  bool_var3 = false;\n                  bool_var1 = false;\n                  goto LAB_001058e0;\n                }\n                if (!bool_var2) break;\n                byte_pointer4 = byte_pointer4 + 1;\n                *byte_ptr5 = byte_var7;\n                byte_ptr5 = byte_ptr5 + 1;\n                bool_var2 = false;\n                byte_var7 = *byte_pointer4;\n                if (byte_var7 == 0) goto LAB_001058e0;\n              }\n              if (byte_var7 == 0x5c) {\n                bool_var2 = true;\n              }\n              else if (bool_var1) {\n                if (byte_var7 == 0x27) {\n                  bool_var1 = false;\n                }\n                else {\nLAB_00105a55:\n                  *byte_ptr5 = byte_var7;\n                  byte_ptr5 = byte_ptr5 + 1;\n                }\n              }\n              else if (bool_var3) {\n                if (byte_var7 != 0x22) goto LAB_00105a55;\n                bool_var3 = false;\n              }\n              else if (byte_var7 == 0x27) {\n                bool_var1 = true;\n              }\n              else {\n                if (byte_var7 != 0x22) goto LAB_00105a55;\n                bool_var3 = true;\n              }\n              byte_pointer1 = byte_pointer4 + 1;\n              byte_pointer4 = byte_pointer4 + 1;\n              byte_var7 = *byte_pointer1;\n            }\nLAB_001058e0:\n            *byte_ptr5 = 0;\n            long_var1 = xstrdup(byte_ptr);\n            *long_pointer3 = long_var1;\n            long_ptr[long_var2 + 1] = 0;\n            byte_var7 = *byte_pointer4;\n            byte_var2 = (&istable_var)[(ulong)byte_var7 * 2];\n            while ((byte_var2 & 0x40) != 0) {\n              byte_var7 = byte_pointer4[1];\n              byte_pointer4 = byte_pointer4 + 1;\n              byte_var2 = (&istable_var)[(ulong)byte_var7 * 2];\n            }\n            long_var2 = long_var2 + 1;\n          } while (byte_var7 != 0);\n          free_memory(byte_ptr);\n          long_pointer3 = long_pointer2;\n          if (file_paths == long_pointer2) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        long_ptr = (long *)xmalloc(8);\n        *long_ptr = 0;\n        if (file_paths == long_pointer2) {\nLAB_00105c79:\n          if (*long_pointer2 == 0) {\n            int_var1 = 0;\n          }\n          else {\n            long_var2 = 1;\n            do {\n              int_var1 = (int)long_var2;\n              long_pointer3 = long_pointer2 + long_var2;\n              long_var2 = long_var2 + 1;\n            } while (*long_pointer3 != 0);\n          }\n          long_var1 = 0;\n          long_pointer3 = (long *)xmalloc((long)(int_var1 + 1) << 3);\n          long_var2 = *long_pointer2;\n          while (long_var2 != 0) {\n            undefined8_var1 = xstrdup();\n            *(undefined8 *)((long)long_pointer3 + long_var1) = undefined8_var1;\n            long_var1 = long_var1 + 8;\n            long_var2 = *(long *)((long)long_pointer2 + long_var1);\n          }\n          *(undefined8 *)((long)long_pointer3 + long_var1) = 0;\nLAB_0010597d:\n          long_pointer2 = long_pointer3;\n          if (*long_ptr == 0) goto LAB_00105d50;\n          char_pointer1 = (char *)0x0;\n          do {\n            char_pointer1 = (char *)((long)char_pointer1 + 1);\n          } while (long_ptr[(long)char_pointer1] != 0);\n          local_var3 = (long)char_pointer1 * 8;\n        }\n        else {\nLAB_00105d50:\n          char_pointer1 = (char *)0x0;\n          local_var3 = 0;\n        }\n        free_memory((void *)long_pointer2[(long)undefined_ptr1]);\n        long_pointer2 = (long *)rexmalloc(long_pointer2,(long)((long)char_pointer1 + (long)num_files + 1) * 8);\n        int_var1 = num_files + -1 + (int)char_pointer1;\n        memmove(long_pointer2 + (long)(undefined **)((long)undefined_ptr1 + (long)char_pointer1),\n                long_pointer2 + 1 + (long)undefined_ptr1,(long)(num_files - int_var2) << 3);\n        memcpy(long_pointer2 + (long)undefined_ptr1,long_ptr,local_var3);\n        free_memory(long_ptr);\n        free_memory(byte_pointer2);\n        fclose(file_stream);\n        uint_var1 = local_var1 + 1;\n        undefined_ptr1 = (undefined **)((long)undefined_ptr1 + (long)char_pointer1);\n        int_pointer2 = int_pointer3;\n        num_files = int_var1;\n        if (int_var1 <= (int)uint_var1) break;\n      }\n      int_pointer2 = (int *)(ulong)uint_var1;\n    } while( true );\n  }\n  int_var2 = bfd_init();\n  char_pointer2 = \"fatal error: libbfd ABI mismatch\";\n  if (int_var2 != 0x118) goto LAB_00106085;\n  undefined_ptr1 = &PTR_s_debug_syms_0010b280;\n  char_var2 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  char_pointer1 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  int_pointer2 = (int *)\"x86_64-pc-linux-gnu\";\n  char_var3 = DAT_0010b23b;\n  char_var1 = DAT_0010b240;\n  uint_var3 = DAT_0010b244;\n  if (char_var2 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = uint_var3;\n    DAT_0010b240 = char_var1;\n    DAT_0010b23b = char_var3;\n    uint_var2 = getopt_long(num_files,long_pointer2,char_pointer1);\n    int_pointer3 = opt_arg_var;\n    int_pointer1 = (int *)char_pointer1;\n    char_var3 = DAT_0010b23b;\n    char_var1 = DAT_0010b240;\n    uint_var3 = DAT_0010b244;\n    switch(uint_var2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      FUN_00103ca0(_stderr,1);\n      int_pointer3 = int_pointer2;\nLAB_001061d5:\n      int_var2 = strcmp((char *)int_pointer3,\"l\");\n      if (int_var2 == 0) goto LAB_001061a3;\n      int_var2 = strcmp((char *)int_pointer3,\"escape\");\n      int_pointer2 = int_pointer3;\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)int_pointer3,\"e\"), int_var2 == 0)) {\n        DAT_0010b7e0 = 2;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var2 = strcmp((char *)int_pointer3,\"invalid\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)int_pointer3,\"i\"), int_var2 == 0)) {\n        DAT_0010b7e0 = 5;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var2 = strcmp((char *)int_pointer3,\"hex\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)int_pointer3,\"x\"), int_var2 == 0)) {\n        DAT_0010b7e0 = 3;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var2 = strcmp((char *)int_pointer3,\"highlight\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)int_pointer3,\"h\"), int_var2 == 0)) {\n        DAT_0010b7e0 = 4;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      char_pointer2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      FUN_00104370(&DAT_00107033);\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      FUN_00103ca0(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      int_pointer2 = (int *)&optarg;\n      DAT_0010b814 = 1;\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      if (opt_arg_var != (int *)0x0) {\n        int_var2 = cplus_demangle_name_to_style();\n        int_pointer1 = opt_arg_var;\n        if (int_var2 == 0) {\n          undefined8_var1 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          FUN_00106300(undefined8_var1,int_pointer1);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          char_pointer1 = (char *)int_pointer1;\n          char_var3 = DAT_0010b23b;\n          char_var1 = DAT_0010b240;\n          uint_var3 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          char_var3 = DAT_0010b23b;\n          char_var1 = DAT_0010b240;\n          uint_var3 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      FUN_00104370(\"posix\");\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      int_var2 = strcmp((char *)opt_arg_var,\"32_64\");\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      if (int_var2 != 0) {\n        char_pointer2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        undefined8_var1 = dcgettext(0,char_pointer2,5);\n        FUN_00106300(undefined8_var1);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      FUN_00104370(opt_arg_var);\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      FUN_00104370(\"just-symbols\");\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      char_var3 = *(char *)opt_arg_var;\n      int_pointer2 = int_pointer3;\n      char_var1 = char_var3;\n      uint_var3 = 10;\n      if (char_var3 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < char_var3) {\n        if (char_var3 == 'o') {\n          uint_var3 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (char_var3 == 'x') {\n          uint_var3 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      char_pointer2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = opt_arg_var;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(opt_arg_var);\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = opt_arg_var;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      int_var2 = strcmp((char *)opt_arg_var,\"default\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)int_pointer3,\"d\"), int_var2 == 0)) {\n        DAT_0010b7e0 = 0;\n        int_pointer2 = int_pointer3;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n      }\n      else {\n        int_var2 = strcmp((char *)int_pointer3,\"locale\");\n        if (int_var2 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        int_pointer2 = int_pointer3;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    undefined8_var1 = dcgettext(0,char_pointer2,5);\n    FUN_00106300(undefined8_var1,int_pointer3);\nLAB_00105f13:\n    long_var2 = *long_pointer2;\n    char_pointer2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,char_pointer2,long_var2);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uint_var3 = bfd_get_error();\n  undefined8_var1 = bfd_errmsg(uint_var3);\n  undefined8_var2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  FUN_00106300(undefined8_var2,\"x86_64-pc-linux-gnu\",undefined8_var1);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byte_var7 = byte_pointer4[1];\n  byte_pointer4 = byte_pointer4 + 1;\n  if (byte_var7 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  undefined_ptr1 = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    char_pointer1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(char_pointer1);\n    char_pointer1 = (char *)dcgettext(0,\n                                \"This program is free_memory software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(char_pointer1);\n                    \n    exit_program(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    undefined8_var1 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    FUN_00106400(undefined8_var1);\n    undefined8_var1 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    FUN_00106400(undefined8_var1);\n    return undefined_ptr1;\n  }\n  char_pointer1 = &optind;\n  if (_optind != num_files) {\n    if (1 < num_files - _optind) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      int_var2 = *(int *)char_pointer1;\n      if (num_files <= int_var2) break;\n      long_var2 = long_pointer2[int_var2];\n      *(int *)char_pointer1 = int_var2 + 1;\n      char_var3 = FUN_001043d0(long_var2);\n      if (char_var3 != '\\0') {\n        int_var2 = *(int *)char_pointer1;\n        if (num_files <= int_var2) break;\n        long_var2 = long_pointer2[int_var2];\n        *(int *)char_pointer1 = int_var2 + 1;\n        char_var3 = FUN_001043d0(long_var2);\n        if (char_var3 != '\\0') {\n          int_var2 = *(int *)char_pointer1;\n          while( true ) {\n            if (num_files <= int_var2) goto LAB_00105bdd;\n            long_var2 = long_pointer2[int_var2];\n            *(int *)char_pointer1 = int_var2 + 1;\n            char_var3 = FUN_001043d0(long_var2);\n            if (char_var3 == '\\0') break;\n            int_var2 = *(int *)char_pointer1;\n          }\n        }\n      }\n      undefined_ptr1 = (undefined **)(ulong)((int)undefined_ptr1 + 1);\n    }\nLAB_00105bdd:\n                    \n    exit_program((int)undefined_ptr1);\n  }\nLAB_0010613c:\n  uint_var1 = FUN_001043d0(\"a.out\");\n  return (undefined **)(ulong)((uint_var1 ^ 1) & 0xff);\n}\n\n",
            "current_name": "parse_command_line_arguments_001055f0",
            "entrypoint": "0x001055f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001055f0": "parse_command_line_arguments_001055f0",
                "__ptr": "byte_ptr",
                "__s": "byte_pointer2",
                "__src": "long_ptr",
                "__stream": "file_stream",
                "_optarg": "opt_arg_var",
                "_sch_istable": "istable_var",
                "bVar2": "byte_var2",
                "bVar3": "bool_var1",
                "bVar4": "bool_var2",
                "bVar5": "bool_var3",
                "bVar7": "byte_var7",
                "bfd_errmsg": "bfd_error_msg",
                "bfd_get_error": "get_bfd_error",
                "bfd_init": "initialize_bfd",
                "bfd_plugin_set_program_name": "set_plugin_program_name",
                "bfd_set_default_target": "set_default_target",
                "bfd_set_error_program_name": "set_error_program_name",
                "bindtextdomain": "bind_text_domain",
                "cVar6": "char_var1",
                "cVar8": "char_var2",
                "cVar9": "char_var3",
                "cplus_demangle_name_to_style": "convert_demangle_style",
                "cplus_demangle_set_style": "set_demangle_style",
                "dcgettext": "dc_get_text",
                "exit": "exit_program",
                "fclose": "close_file",
                "ferror": "check_file_error",
                "fopen": "open_file",
                "fprintf": "formatted_print",
                "fread": "file_read",
                "free": "free_memory",
                "fseek": "set_file_position",
                "ftell": "get_file_position",
                "getopt_long": "get_long_option",
                "iVar10": "int_var1",
                "iVar12": "int_var2",
                "iVar15": "int_variable3",
                "iVar27": "int_var3",
                "lVar17": "long_var1",
                "lVar18": "long_variable2",
                "lVar19": "long_variable3",
                "lVar24": "long_var2",
                "local_108": "local_var3",
                "local_10c": "local_var2",
                "local_110": "local_var1",
                "local_c8": "local_stat",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "param_1": "num_files",
                "param_2": "file_paths",
                "pbVar1": "byte_pointer1",
                "pbVar23": "byte_pointer4",
                "pbVar25": "byte_ptr5",
                "pcVar22": "char_pointer1",
                "pcVar26": "char_pointer2",
                "piVar15": "int_pointer1",
                "piVar27": "int_pointer3",
                "plVar18": "long_pointer2",
                "plVar19": "long_pointer3",
                "printf": "print_formatted",
                "realloc": "reallocate_memory",
                "sVar16": "size_var",
                "setlocale": "set_locale",
                "stat": "get_file_status",
                "strcmp": "compare_strings",
                "strlen": "get_string_length",
                "textdomain": "text_domain",
                "uVar11": "uint_var1",
                "uVar13": "uint_var2",
                "uVar14": "uint_var3",
                "uVar20": "undefined8_var1",
                "uVar21": "undefined8_var2",
                "unaff_R12": "int_pointer2",
                "unaff_RBP": "undefined_ptr1",
                "xexit": "exit_program",
                "xmalloc": "allocate_memory",
                "xmalloc_set_program_name": "set_program_name",
                "xrealloc": "reallocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001062d0": {
            "additional_data": {
                "DAT_0010b818": {
                    "1": "is_another_flag_set"
                },
                "FUN_001062d0": {
                    "1": "print_if_allowed",
                    "2": "print_if_condition_satisfied",
                    "3": "print_if_enabled",
                    "4": "print_message"
                },
                "_DAT_0010b7c4": {
                    "1": "condition_check_1"
                },
                "__format": {
                    "1": "format_string"
                },
                "param_1": {
                    "1": "function_name",
                    "30": "message"
                },
                "printf": {
                    "1": "output_formatted_string",
                    "2": "print_formatted"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\n\n\nvoid print_message_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_message_001062d0",
            "entrypoint": "0x001062d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001062d0": "print_message_001062d0",
                "param_1": "message",
                "printf": "print_formatted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00106300": {
            "additional_data": {
                "DAT_0010b820": {
                    "2": "error_message"
                },
                "FUN_00106300": {
                    "1": "formatted_print",
                    "29": "print_error_message"
                },
                "__arg": {
                    "1": "num_ptr",
                    "3": "arg_ptr",
                    "4": "arg_array",
                    "5": "arguments"
                },
                "__format": {
                    "1": "error_message_format",
                    "17": "format_string",
                    "4": "format",
                    "6": "format_str"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "_stdout": {
                    "1": "stdout"
                },
                "in_AL": {
                    "1": "is_error",
                    "14": "flag",
                    "3": "condition"
                },
                "local_18": {
                    "1": "value7",
                    "2": "param_8",
                    "3": "local_var8"
                },
                "local_28": {
                    "1": "local_param7",
                    "2": "param7",
                    "3": "arg7"
                },
                "local_38": {
                    "1": "format_specifier_copy",
                    "2": "param6",
                    "3": "local_var6"
                },
                "local_48": {
                    "1": "local_48",
                    "2": "param5_copy",
                    "3": "local_var5"
                },
                "local_58": {
                    "1": "error_code4",
                    "2": "local_arg4",
                    "3": "local_var4"
                },
                "local_68": {
                    "1": "local_var_3",
                    "2": "param3_copy",
                    "3": "local_var3"
                },
                "local_78": {
                    "1": "local_78",
                    "2": "local2",
                    "3": "arg2"
                },
                "local_88": {
                    "1": "error_code1_copy",
                    "2": "local_error_code",
                    "3": "error_code",
                    "5": "error_code_copy"
                },
                "local_90": {
                    "1": "arg14",
                    "2": "unused_var5",
                    "3": "param14_copy",
                    "8": "param14"
                },
                "local_98": {
                    "1": "var10",
                    "2": "param_13_copy",
                    "3": "param13_copy",
                    "8": "param13"
                },
                "local_a0": {
                    "1": "local_a0",
                    "2": "local_param12",
                    "3": "param12_copy",
                    "8": "param12"
                },
                "local_a8": {
                    "1": "local_a8",
                    "2": "local_param11",
                    "3": "param11_copy",
                    "8": "param11"
                },
                "local_b0": {
                    "1": "local_var5",
                    "2": "local_param10",
                    "3": "param10_copy",
                    "8": "param10"
                },
                "local_b8": {
                    "1": "temp_buffer",
                    "2": "unused_buffer",
                    "6": "buffer",
                    "7": "local_buffer",
                    "9": "local_array"
                },
                "local_c8": {
                    "1": "local_var4",
                    "11": "local_buffer",
                    "2": "local_var3",
                    "4": "buffer"
                },
                "local_d0": {
                    "1": "local_pointer",
                    "10": "buffer",
                    "2": "local_pointer1",
                    "4": "buffer_pointer"
                },
                "local_d4": {
                    "1": "num_chars",
                    "2": "length",
                    "3": "buffer_size",
                    "4": "value"
                },
                "local_d8": {
                    "1": "size1",
                    "2": "local_variable1",
                    "4": "num_args",
                    "9": "size"
                },
                "param_1": {
                    "1": "message_size",
                    "2": "error_code1",
                    "25": "error_code"
                },
                "param_10": {
                    "1": "string1",
                    "2": "unused_param2",
                    "9": "param10"
                },
                "param_11": {
                    "1": "param_b",
                    "10": "param11",
                    "2": "param_11",
                    "5": "arg11"
                },
                "param_12": {
                    "1": "param_c",
                    "10": "param12",
                    "2": "unused_param4",
                    "5": "arg12"
                },
                "param_13": {
                    "1": "param_d",
                    "10": "param13",
                    "2": "unused_param5",
                    "5": "arg13"
                },
                "param_14": {
                    "1": "pointer_5",
                    "10": "param14",
                    "2": "unused_param6",
                    "5": "arg14"
                },
                "param_2": {
                    "1": "file_descriptor",
                    "10": "arg2",
                    "2": "error_code2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "input_param2",
                    "10": "arg3",
                    "2": "param_3",
                    "8": "param3"
                },
                "param_4": {
                    "1": "input_param3",
                    "10": "arg4",
                    "2": "param3",
                    "3": "param_4",
                    "8": "param4"
                },
                "param_5": {
                    "1": "fflush_flag",
                    "10": "arg5",
                    "2": "param_5",
                    "8": "param5"
                },
                "param_6": {
                    "1": "value5",
                    "10": "arg6",
                    "2": "flag5",
                    "8": "param6"
                },
                "param_7": {
                    "1": "input_param6",
                    "10": "arg7",
                    "2": "error_code7",
                    "8": "param7"
                },
                "param_8": {
                    "1": "variable_argument_list2",
                    "10": "arg8",
                    "2": "param7",
                    "8": "param8"
                },
                "param_9": {
                    "1": "unused_param",
                    "13": "param9",
                    "2": "unused_param1",
                    "3": "param_9",
                    "6": "arg9"
                },
                "stack0x00000008": {
                    "1": "stack_buffer"
                }
            },
            "called": [
                "xexit",
                "FUN_001063a0"
            ],
            "calling": [
                "FUN_001053c0",
                "FUN_0010370a",
                "FUN_00104370",
                "FUN_00103729",
                "FUN_001055f0"
            ],
            "code": "\n\n\nvoid print_error_message_00106300(undefined4 error_code,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n                 undefined4 arg5,undefined4 arg6,undefined4 arg7,undefined4 arg8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 *arguments;\n  char *format_string;\n  undefined4 size;\n  undefined4 value;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 error_code_copy;\n  undefined4 arg2;\n  undefined4 arg3;\n  undefined4 arg4;\n  undefined4 arg5;\n  undefined4 arg6;\n  undefined4 arg7;\n  undefined4 arg8;\n  \n  arguments = &size;\n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    arg2 = arg2;\n    arg3 = arg3;\n    arg4 = arg4;\n    arg5 = arg5;\n    arg6 = arg6;\n    arg7 = arg7;\n    arg8 = arg8;\n  }\n  buffer = &stack_buffer;\n  size = 8;\n  local_buffer = local_array;\n  value = 0x30;\n  param10 = param10;\n  param11 = param11;\n  param12 = param12;\n  param13 = param13;\n  param14 = param14;\n  FUN_001063a0();\n  format_string = (char *)0x1;\n  xexit();\n  fflush(stdout);\n  fprintf(stderr,\"%s: \",DAT_0010b820);\n  vfprintf(stderr,format_string,arguments);\n  putc(10,stderr);\n  return;\n}\n\n",
            "current_name": "print_error_message_00106300",
            "entrypoint": "0x00106300",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00106300": "print_error_message_00106300",
                "__arg": "arguments",
                "__format": "format_string",
                "_stderr": "stderr",
                "_stdout": "stdout",
                "in_AL": "flag",
                "local_18": "arg8",
                "local_28": "arg7",
                "local_38": "arg6",
                "local_48": "arg5",
                "local_58": "arg4",
                "local_68": "arg3",
                "local_78": "arg2",
                "local_88": "error_code_copy",
                "local_90": "param14",
                "local_98": "param13",
                "local_a0": "param12",
                "local_a8": "param11",
                "local_b0": "param10",
                "local_b8": "local_array",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "value",
                "local_d8": "size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "param9",
                "stack0x00000008": "stack_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001063a0": {
            "additional_data": {
                "DAT_0010b820": {
                    "1": "program_name"
                },
                "FUN_001063a0": {
                    "1": "log_error_message",
                    "27": "print_error_message"
                },
                "__arg": {
                    "3": "arguments"
                },
                "__c": {
                    "9": "character"
                },
                "__format": {
                    "4": "format",
                    "5": "format_string"
                },
                "__gnuc_va_list": {
                    "1": "var_args"
                },
                "__gnuc_va_list param_2": {
                    "1": "varargs"
                },
                "__s": {
                    "1": "s",
                    "2": "stream",
                    "5": "output_stream"
                },
                "__stream": {
                    "2": "file_stream",
                    "3": "output_file"
                },
                "_stderr": {
                    "1": "stderr",
                    "8": "standard_error"
                },
                "_stdout": {
                    "1": "stdout",
                    "9": "standard_output"
                },
                "fflush": {
                    "1": "flush_error_stream",
                    "6": "flush_output"
                },
                "fprintf": {
                    "1": "format_error_message",
                    "2": "format_print",
                    "3": "formatted_print"
                },
                "fputc": {
                    "1": "write_character"
                },
                "fputs": {
                    "1": "write_string"
                },
                "fwrite": {
                    "1": "write_data"
                },
                "param_1": {
                    "14": "error_message",
                    "17": "message"
                },
                "param_2": {
                    "1": "arguments_list",
                    "18": "arguments",
                    "6": "args"
                },
                "putc": {
                    "1": "write_character_to_error_stream",
                    "4": "write_character"
                },
                "va_list": {
                    "1": "args"
                },
                "vfprintf": {
                    "1": "variable_formatted_print"
                }
            },
            "called": [
                "putc",
                "fprintf",
                "fflush",
                "vfprintf"
            ],
            "calling": [
                "FUN_00106300",
                "FUN_00106400"
            ],
            "code": "\n\n\nvoid print_error_message_001063a0(char *message,args arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_0010b820);\n  vfprintf(standard_error,message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_001063a0",
            "entrypoint": "0x001063a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "__gnuc_va_list": "args",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_output",
                "fprintf": "formatted_print",
                "param_1": "message",
                "param_2": "arguments",
                "putc": "write_character",
                "va_list": "args",
                "vfprintf": "formatted_variable_print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00106400": {
            "additional_data": {
                "FUN_001063a0": {
                    "1": "copy_function",
                    "2": "process_data"
                },
                "FUN_00106400": {
                    "1": "extract_function",
                    "2": "extract_and_process_data",
                    "4": "extract_data",
                    "8": "process_data"
                },
                "in_AL": {
                    "1": "condition_check",
                    "12": "flag",
                    "5": "input_flag",
                    "6": "condition"
                },
                "local_18": {
                    "1": "input_param_8",
                    "2": "input8_copy",
                    "3": "local_param8"
                },
                "local_28": {
                    "1": "param_7_copy",
                    "2": "input7_copy",
                    "3": "local_param7"
                },
                "local_38": {
                    "1": "param_6_copy",
                    "2": "input6_copy",
                    "3": "input_6_copy"
                },
                "local_48": {
                    "1": "new_param_5",
                    "2": "input5_copy",
                    "3": "input_5_copy"
                },
                "local_58": {
                    "1": "input_4",
                    "2": "input4_copy",
                    "3": "input_4_copy"
                },
                "local_68": {
                    "1": "local_var_3",
                    "2": "input3_copy",
                    "3": "input_3_copy"
                },
                "local_78": {
                    "1": "input_param1_copy",
                    "2": "input2_copy",
                    "3": "input_2_copy"
                },
                "local_88": {
                    "1": "input_param1_copy",
                    "2": "input1_copy",
                    "3": "input_1_copy"
                },
                "local_90": {
                    "1": "buffer_param5",
                    "2": "param14",
                    "4": "local_param14",
                    "6": "param_14_copy"
                },
                "local_98": {
                    "1": "ptr_13",
                    "2": "param_13",
                    "4": "local_param13",
                    "6": "param_13_copy"
                },
                "local_a0": {
                    "1": "buffer3",
                    "2": "local_param_12",
                    "4": "local_param12",
                    "6": "param_12_copy"
                },
                "local_a8": {
                    "1": "param11_new",
                    "2": "param11",
                    "4": "local_param11",
                    "6": "param_11_copy"
                },
                "local_b0": {
                    "1": "var_10",
                    "2": "local_param_10",
                    "4": "local_param10",
                    "6": "param_10_copy"
                },
                "local_b8": {
                    "1": "temporary_buffer",
                    "3": "output_buffer",
                    "4": "temp_buffer",
                    "6": "local_array"
                },
                "local_c8": {
                    "1": "buffer_ptr",
                    "16": "local_buffer",
                    "6": "buffer"
                },
                "local_d0": {
                    "1": "source",
                    "2": "pointer",
                    "3": "stack_pointer",
                    "6": "buffer_ptr"
                },
                "local_d4": {
                    "1": "local_variable_2",
                    "2": "offset",
                    "3": "buffer_length",
                    "6": "length"
                },
                "local_d8": {
                    "1": "local_variable_1",
                    "13": "size",
                    "3": "length",
                    "9": "buffer_size"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "value1",
                    "4": "input_param1",
                    "6": "input1",
                    "8": "input_1"
                },
                "param_10": {
                    "1": "pointer_2",
                    "10": "param_10",
                    "2": "param_b",
                    "3": "param10"
                },
                "param_11": {
                    "1": "data_param3",
                    "10": "param_11",
                    "2": "param_c",
                    "3": "param11"
                },
                "param_12": {
                    "1": "arg_4",
                    "10": "param_12",
                    "2": "param_d",
                    "3": "param12"
                },
                "param_13": {
                    "1": "param_d",
                    "10": "param_13",
                    "2": "input_param13",
                    "3": "param13"
                },
                "param_14": {
                    "1": "pointer_6",
                    "10": "param_14",
                    "2": "input_param14",
                    "3": "param14"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "value2",
                    "4": "input_param2",
                    "6": "input2",
                    "8": "input_2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "value3",
                    "4": "input_param3",
                    "6": "input3",
                    "8": "input_3"
                },
                "param_4": {
                    "1": "data4",
                    "2": "value4",
                    "4": "input_param4",
                    "6": "input4",
                    "8": "input_4"
                },
                "param_5": {
                    "1": "param_5",
                    "2": "value5",
                    "4": "input_param_5",
                    "6": "input5",
                    "8": "input_5"
                },
                "param_6": {
                    "1": "data6",
                    "2": "value6",
                    "4": "input_param6",
                    "5": "input6",
                    "8": "input_6"
                },
                "param_7": {
                    "1": "data7",
                    "2": "value7",
                    "4": "input_param7",
                    "5": "input7",
                    "8": "input_7"
                },
                "param_8": {
                    "1": "eighth_param",
                    "2": "value8",
                    "4": "input_param_8",
                    "6": "input8",
                    "8": "input_8"
                },
                "param_9": {
                    "1": "output1",
                    "2": "pointer1",
                    "9": "param_9"
                }
            },
            "called": [
                "FUN_001063a0"
            ],
            "calling": [
                "FUN_001048e0",
                "FUN_00104d5b",
                "FUN_001043d0",
                "FUN_0010249f",
                "FUN_001055f0"
            ],
            "code": "\nvoid process_data_00106400(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 param_9,undefined8 input_10,undefined8 input_11,undefined8 input_12,\n                 undefined8 input_13,undefined8 input_14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer_ptr;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 local_param1;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 local_param4;\n  undefined4 local_param5;\n  undefined4 local_param6;\n  undefined4 local_param7;\n  undefined4 local_param8;\n  \n  if (flag != '\\0') {\n    local_param1 = input_1;\n    local_param2 = input_2;\n    local_param3 = input_3;\n    local_param4 = input_4;\n    local_param5 = input_5;\n    local_param6 = input_6;\n    local_param7 = input_7;\n    local_param8 = input_8;\n  }\n  buffer_ptr = &stack0x00000008;\n  size = 8;\n  local_buffer = local_array;\n  length = 0x30;\n  param_10_copy = input_10;\n  param_11_copy = input_11;\n  param_12_copy = input_12;\n  param_13_copy = input_13;\n  param_14_copy = input_14;\n  FUN_001063a0(param_9,&size);\n  return;\n}\n\n",
            "current_name": "process_data_00106400",
            "entrypoint": "0x00106400",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00106400": "process_data_00106400",
                "in_AL": "flag",
                "local_18": "local_param8",
                "local_28": "local_param7",
                "local_38": "local_param6",
                "local_48": "local_param5",
                "local_58": "local_param4",
                "local_68": "local_param3",
                "local_78": "local_param2",
                "local_88": "local_param1",
                "local_90": "param_14_copy",
                "local_98": "param_13_copy",
                "local_a0": "param_12_copy",
                "local_a8": "param_11_copy",
                "local_b0": "param_10_copy",
                "local_b8": "local_array",
                "local_c8": "local_buffer",
                "local_d0": "buffer_ptr",
                "local_d4": "length",
                "local_d8": "size",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001064a0": {
            "additional_data": {
                "*param_1": {
                    "1": "label"
                },
                "*param_2": {
                    "1": "msg"
                },
                "FUN_001064a0": {
                    "1": "print_formatted_output",
                    "26": "print_message"
                },
                "param_1": {
                    "1": "message_header",
                    "2": "title",
                    "3": "message_type",
                    "6": "message1",
                    "7": "message"
                },
                "param_2": {
                    "1": "default_message_ptr",
                    "2": "message_text",
                    "3": "log_message",
                    "6": "message2",
                    "8": "message"
                },
                "printf": {
                    "1": "print"
                }
            },
            "called": [
                "FUN_001036e0"
            ],
            "calling": [],
            "code": "\nvoid print_message_001064a0(undefined8 *message,undefined8 *message)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (message != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*message);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "current_name": "print_message_001064a0",
            "entrypoint": "0x001064a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001064a0": "print_message_001064a0",
                "param_1": "message",
                "param_2": "message",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001064b0": {
            "additional_data": {
                "&DAT_00107363": {
                    "1": "symbol_table",
                    "3": "symbol_data"
                },
                "&DAT_00107363[0]": {
                    "1": "symbol_info_address"
                },
                "&param_4": {
                    "1": "undefined_param_4"
                },
                "*(char *)(*param_1 + 8)": {
                    "1": "symbol_char_value"
                },
                "*(long *)(param_1[2] + 0x38)": {
                    "1": "symbol_value_ptr"
                },
                "*(undefined8 *)*param_1": {
                    "1": "symbol_value"
                },
                "*param_1": {
                    "1": "symbol_pointer",
                    "2": "symbol"
                },
                "*param_1 + 8": {
                    "1": "symbol_value"
                },
                "BFD_SYMBOL_UNDEF": {
                    "1": "undefined_symbol_class"
                },
                "CHAR_00107363": {
                    "1": "symbol_class"
                },
                "DAT_00107363": {
                    "1": "some_data"
                },
                "FUN_00103a66": {
                    "1": "print_new_line",
                    "2": "reverse_something",
                    "4": "reverse"
                },
                "FUN_00104740": {
                    "1": "extract_info",
                    "10": "get_symbol_info",
                    "2": "get_symbol_information",
                    "3": "extract_symbol_info"
                },
                "FUN_001054d0": {
                    "1": "process_symbol",
                    "2": "print_symbol_value",
                    "3": "print_address",
                    "6": "print_info"
                },
                "FUN_001064b0": {
                    "1": "process_symbol",
                    "20": "print_symbol_info",
                    "7": "print_symbol_information"
                },
                "FUN_0010651a": {
                    "1": "handle_symbol",
                    "2": "print_warning",
                    "4": "print_undefined_symbol"
                },
                "PTR_*param_1": {
                    "1": "address_at_param_1"
                },
                "PUT": {
                    "1": "put_character"
                },
                "__c": {
                    "2": "c"
                },
                "bfd_is_undefined_symclass": {
                    "1": "is_symbol_undefined",
                    "3": "check_symclass",
                    "9": "is_undefined_symbol_class"
                },
                "cVar1": {
                    "1": "is_undefined_sym",
                    "16": "is_undefined",
                    "4": "is_undefined_symclass",
                    "7": "is_undefined_symbol"
                },
                "char": {
                    "1": "character"
                },
                "param_1": {
                    "1": "symbol_pointer",
                    "10": "symbol_info",
                    "2": "symbol_ptr",
                    "5": "symbol_address",
                    "7": "symbol"
                },
                "param_1[1]": {
                    "1": "value_info"
                },
                "param_1[2]": {
                    "1": "param2_ptr"
                },
                "param_1[2] + 0x38": {
                    "1": "param_1_2_offset38"
                },
                "param_2": {
                    "1": "data",
                    "11": "param",
                    "2": "param2",
                    "3": "param_value",
                    "6": "address"
                },
                "param_3": {
                    "1": "data"
                },
                "param_4": {
                    "1": "another_param",
                    "2": "param"
                },
                "printf": {
                    "1": "print_message",
                    "12": "print_formatted",
                    "2": "print_character",
                    "3": "print_formatted_output",
                    "6": "print"
                },
                "putchar": {
                    "1": "print_space",
                    "12": "print_character",
                    "14": "print_char"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "ulong": {
                    "1": "unsigned_long"
                }
            },
            "called": [
                "FUN_00103a66",
                "putchar",
                "FUN_0010651a",
                "printf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "FUN_00104740"
            ],
            "calling": [],
            "code": "\nvoid print_symbol_info_001064b0(long *symbol_info,undefined8 param)\n\n{\n  character is_undefined;\n  \n  FUN_00104740(&DAT_00107363,symbol_info,0,param);\n  printf(\"%c \",(unsigned_long)(unsigned_int)(int)*(character *)(*symbol_info + 8));\n  is_undefined = bfd_is_undefined_symclass((int)*(character *)(*symbol_info + 8));\n  if (is_undefined != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  FUN_001054d0(*(undefined8 *)*symbol_info);\n  putchar(0x20);\n  if (param_1_2 == 0) {\n    if (param_1_1 != 0) {\n      FUN_0010651a();\n      return;\n    }\n  }\n  else if (*(long *)(param_1_2 + 0x38) != 0) {\n    FUN_001054d0();\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_symbol_info_001064b0",
            "entrypoint": "0x001064b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001064b0": "print_symbol_info_001064b0",
                "bfd_is_undefined_symclass": "is_undefined_symbol_class",
                "cVar1": "is_undefined",
                "char": "character",
                "param_1": "symbol_info",
                "param_1[1]": "param_1_1",
                "param_1[2]": "param_1_2",
                "param_2": "param",
                "printf": "print_formatted",
                "putchar": "print_char",
                "uint": "unsigned_int",
                "ulong": "unsigned_long"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010651a": {
            "additional_data": {
                "FUN_001054d0": {
                    "1": "execute_startup_tasks",
                    "2": "initialize_system",
                    "9": "execute_initialization"
                },
                "FUN_0010651a": {
                    "1": "execute_function",
                    "11": "initialize_system",
                    "3": "execute_initialization",
                    "4": "initialize",
                    "5": "initialize_application"
                }
            },
            "called": [
                "FUN_001054d0"
            ],
            "calling": [
                "FUN_00103a66",
                "FUN_001064b0"
            ],
            "code": "\nvoid initialize_system_0010651a(void)\n\n{\n  FUN_001054d0();\n  return;\n}\n\n",
            "current_name": "initialize_system_0010651a",
            "entrypoint": "0x0010651a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010651a": "initialize_system_0010651a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00106530": {
            "additional_data": {
                "FUN_00106530": {
                    "1": "print_error_details",
                    "19": "print_error_message",
                    "2": "print_error_info",
                    "3": "handle_error",
                    "4": "print_error"
                },
                "FUN_00106540": {
                    "1": "initialize_error_handling",
                    "2": "initialize",
                    "3": "initialize_bfd"
                },
                "F_UNK_00106530": {
                    "1": "handle_error_and_exit"
                },
                "iVar1": {
                    "1": "error_check",
                    "14": "error",
                    "2": "bfd_error",
                    "3": "error_code",
                    "4": "error_status"
                },
                "in_R10": {
                    "1": "extra_data",
                    "2": "input_argument",
                    "20": "additional_info",
                    "3": "extra_info"
                },
                "lVar3": {
                    "1": "is_error_code_zero",
                    "10": "error_flag",
                    "2": "has_error",
                    "3": "is_error",
                    "4": "line_number",
                    "7": "error_code"
                },
                "param_1": {
                    "1": "error",
                    "3": "error_code"
                },
                "uVar2": {
                    "28": "error_message",
                    "3": "error_msg"
                },
                "xexit": {
                    "1": "exit_process",
                    "2": "cleanup",
                    "3": "exit_program"
                }
            },
            "called": [
                "FUN_00106540",
                "xexit"
            ],
            "calling": [
                "FUN_00105110",
                "FUN_001048e0",
                "FUN_00104d5b",
                "FUN_00103463",
                "FUN_00102fc3",
                "FUN_00102f9f",
                "FUN_001043d0",
                "FUN_00102fd2",
                "FUN_00103c00"
            ],
            "code": "\n\n\nvoid print_error_message_00106530(void)\n\n{\n  int error;\n  undefined8 error_message;\n  long error_flag;\n  undefined8 additional_info;\n  \n  FUN_00106540();\n  error_flag = 1;\n  xexit();\n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (error_flag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,error_flag,error_message,additional_info);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_00106530",
            "entrypoint": "0x00106530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00106530": "print_error_message_00106530",
                "iVar1": "error",
                "in_R10": "additional_info",
                "lVar3": "error_flag",
                "uVar2": "error_message",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00106540": {
            "additional_data": {
                "DAT_0010b820": {
                    "1": "program_name"
                },
                "FUN_00106540": {
                    "1": "print_bfd_error_message",
                    "21": "print_error_message",
                    "7": "print_error"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "fflush": {
                    "1": "flush_buffer"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "iVar1": {
                    "1": "bfd_error",
                    "12": "error",
                    "13": "error_code",
                    "2": "error_type"
                },
                "in_R10": {
                    "1": "unknown",
                    "2": "unknown_value",
                    "7": "additional_info"
                },
                "param_1": {
                    "1": "error_context",
                    "2": "error_code",
                    "3": "file_name",
                    "4": "error_string",
                    "5": "error_description",
                    "6": "error_type",
                    "8": "error_message"
                },
                "uVar2": {
                    "1": "error_description",
                    "2": "error_string",
                    "22": "error_message",
                    "3": "error_message_text"
                }
            },
            "called": [
                "bfd_get_error",
                "fprintf",
                "fflush",
                "bfd_errmsg",
                "FUN_00103a78"
            ],
            "calling": [
                "FUN_00106530",
                "FUN_001043d0"
            ],
            "code": "\n\n\nvoid print_error_message_00106540(long error_message)\n\n{\n  int error_code;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error_code = bfd_get_error();\n  if (error_code == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error_code);\n  }\n  fflush(standard_output);\n  if (error_message != 0) {\n    fprintf(error_file,\"%s: %s: %s\\n\",DAT_0010b820,error_message,error_message,additional_info);\n    return;\n  }\n  fprintf(error_file,\"%s: %s\\n\",DAT_0010b820,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_00106540",
            "entrypoint": "0x00106540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "_stderr": "error_file",
                "_stdout": "standard_output",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_bfd_error",
                "dcgettext": "get_error_message",
                "fflush": "flush_stdout",
                "fprintf": "print_to_stderr",
                "iVar1": "error_code",
                "in_R10": "additional_info",
                "param_1": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x001065a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "FUN_00105530",
                "__cxa_finalize"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  FUNC_00105530();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x001055a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00105560"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105560();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x001055e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00102440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00103729",
                "FUN_001043d0"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "abort": {
            "called": [
                "abort"
            ],
            "calling": [
                "FUN_00102fd2"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "abort",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "asprintf": {
            "called": [
                "asprintf"
            ],
            "calling": [
                "FUN_00103729"
            ],
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "current_name": "asprintf",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_canonicalize_reloc": {
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "calling": [
                "FUN_00103c00"
            ],
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "current_name": "bfd_canonicalize_reloc",
            "entrypoint": "0x001023a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x001023d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "called": [
                "bfd_check_format_matches"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "bfd_check_format_matches",
            "entrypoint": "0x00102380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00102360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_demangle": {
            "called": [
                "bfd_demangle"
            ],
            "calling": [
                "FUN_00102739"
            ],
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "current_name": "bfd_demangle",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00106540",
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x00102390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_arch_size": {
            "called": [
                "bfd_get_arch_size"
            ],
            "calling": [
                "FUN_00104670"
            ],
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "current_name": "bfd_get_arch_size",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00106540",
                "FUN_001048e0",
                "FUN_001043d0",
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_next_mapent": {
            "called": [
                "bfd_get_next_mapent"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "current_name": "bfd_get_next_mapent",
            "entrypoint": "0x00102430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_reloc_upper_bound": {
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "calling": [
                "FUN_00103c00"
            ],
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "current_name": "bfd_get_reloc_upper_bound",
            "entrypoint": "0x001023f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_is_undefined_symclass": {
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "calling": [
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00103729"
            ],
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "current_name": "bfd_is_undefined_symclass",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_map_over_sections": {
            "called": [
                "bfd_map_over_sections"
            ],
            "calling": [
                "FUN_00103238"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "bfd_map_over_sections",
            "entrypoint": "0x00102400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "bfd_openr_next_archived_file",
            "entrypoint": "0x001023e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_plugin_set_plugin": {
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "current_name": "bfd_plugin_set_plugin",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_plugin_set_program_name": {
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_plugin_set_program_name",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_00103ca0"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "caseD_4a": {
            "called": [
                "FUN_00104397"
            ],
            "calling": [
                "FUN_00104370"
            ],
            "code": "\nvoid switchD_00104393::caseD_4a(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00104397(param_1,param_2,3);\n  return;\n}\n\n",
            "current_name": "caseD_4a",
            "entrypoint": "0x00102475",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "concat": {
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_00104670",
                "FUN_001025f5"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "concat",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_name_to_style": {
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_name_to_style",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_set_style": {
            "called": [
                "cplus_demangle_set_style"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_set_style",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_001053c0",
                "FUN_0010370a",
                "FUN_00104370",
                "FUN_00103729",
                "FUN_00102f19",
                "FUN_00103a78",
                "FUN_001055f0",
                "FUN_00103abf",
                "FUN_00102450",
                "FUN_00103b5d",
                "FUN_001048e0",
                "FUN_00104d5b",
                "FUN_00103ca0",
                "FUN_001043d0",
                "FUN_0010249f"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_001055f0"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_001055f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00105500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_00103ca0",
                "FUN_001055f0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x001023c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_00106540",
                "FUN_00103b5d",
                "FUN_001063a0"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_00102450",
                "FUN_00103b5d",
                "FUN_00106540",
                "FUN_001063a0",
                "FUN_00103ca0",
                "FUN_001055f0"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_00103b5d",
                "FUN_00103ca0"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001047d0",
                "FUN_00105110",
                "FUN_00103b5d",
                "FUN_00103729",
                "FUN_00104670",
                "FUN_00104d5b",
                "FUN_00103ca0",
                "FUN_0010268b",
                "FUN_00103238",
                "FUN_001055f0"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "isatty": {
            "called": [
                "isatty"
            ],
            "calling": [
                "FUN_0010268b"
            ],
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "isatty",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001047d0",
                "FUN_001053c0",
                "FUN_0010351b",
                "FUN_00105110",
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_00103463",
                "FUN_00103573",
                "FUN_00102f19",
                "FUN_001036a7",
                "FUN_001036e0",
                "FUN_001055f0",
                "FUN_00103abf",
                "FUN_001054d0",
                "FUN_00103b2b",
                "FUN_001043d0",
                "FUN_00102f7b",
                "FUN_00102670",
                "FUN_001035a2",
                "FUN_00102739",
                "FUN_001062d0"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_001063a0",
                "FUN_00103463"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putchar": {
            "called": [
                "putchar"
            ],
            "calling": [
                "FUN_001064b0",
                "FUN_001035a2"
            ],
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "current_name": "putchar",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "qsort": {
            "called": [
                "qsort"
            ],
            "calling": [
                "FUN_00104d5b"
            ],
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "current_name": "qsort",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "reconcat": {
            "called": [
                "reconcat"
            ],
            "calling": [
                "FUN_001047d0"
            ],
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "current_name": "reconcat",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sprintf": {
            "called": [
                "sprintf"
            ],
            "calling": [
                "FUN_0010268b"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "sprintf",
            "entrypoint": "0x001023b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_001043d0",
                "FUN_001055f0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strchr": {
            "called": [
                "strchr"
            ],
            "calling": [
                "FUN_00102739"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strchr",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00104670",
                "FUN_00104d5b",
                "FUN_00103463",
                "FUN_001055f0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcoll": {
            "called": [
                "strcoll"
            ],
            "calling": [
                "FUN_00104fa0"
            ],
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcoll",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_001043d0"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00103ca0",
                "FUN_0010268b",
                "FUN_00102fd2",
                "FUN_001055f0"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strstr": {
            "called": [
                "strstr"
            ],
            "calling": [
                "FUN_00104670",
                "FUN_00102fd2"
            ],
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "current_name": "strstr",
            "entrypoint": "0x00102420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_001063a0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x00102370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00106300",
                "FUN_00106530",
                "FUN_001055f0"
            ],
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00102350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00105110",
                "FUN_00104d5b",
                "FUN_0010268b",
                "FUN_00103238",
                "FUN_00103c00",
                "FUN_001055f0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00104d5b",
                "FUN_001055f0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_001055f0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrerror": {
            "called": [
                "xstrerror"
            ],
            "calling": [
                "FUN_00103729"
            ],
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "current_name": "xstrerror",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_00102450",
            "FUN_0010249f",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_0010268b",
            "FUN_00102739",
            "FUN_00102c19",
            "FUN_00102f19",
            "FUN_00102f7b",
            "FUN_00102f9f",
            "FUN_00102fc3",
            "FUN_00102fd2",
            "FUN_00103238",
            "FUN_00103463",
            "FUN_0010351b",
            "FUN_00103533",
            "FUN_00103573",
            "FUN_001035a2",
            "FUN_001036a7",
            "FUN_001036e0",
            "FUN_0010370a",
            "FUN_00103729",
            "FUN_00103a66",
            "FUN_00103a78",
            "FUN_00103abf",
            "FUN_00103b2b",
            "FUN_00103b49",
            "FUN_00103b5d",
            "FUN_00103bec",
            "FUN_00103bf6",
            "FUN_00103c00",
            "FUN_00103ca0",
            "FUN_00104370",
            "FUN_00104397",
            "FUN_001043d0",
            "FUN_00104670",
            "FUN_00104740",
            "FUN_001047d0",
            "FUN_001048e0",
            "FUN_001049c0",
            "FUN_00104d5b",
            "FUN_00104fa0",
            "FUN_00105050",
            "FUN_00105110",
            "FUN_001053b0",
            "FUN_001053c0",
            "FUN_001054d0",
            "FUN_001055f0",
            "FUN_001062d0",
            "FUN_00106300",
            "FUN_001063a0",
            "FUN_00106400",
            "FUN_001064a0",
            "FUN_001064b0",
            "FUN_0010651a",
            "FUN_00106530",
            "FUN_00106540"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 406239
}