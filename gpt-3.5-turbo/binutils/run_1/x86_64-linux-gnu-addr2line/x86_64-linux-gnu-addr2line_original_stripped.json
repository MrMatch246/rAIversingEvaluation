{
    "functions": {
        "FUN_001070a0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070a0",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_001070a0"
        },
        "FUN_00102620": {
            "renaming": {
                "FUN_00102620": "report_function_00102620",
                "param_1": "reportType",
                "param_2": "reportName",
                "param_3": "reportLocation",
                "param_4": "reportDate",
                "param_5": "reportTime",
                "param_6": "reportSeverity",
                "param_7": "reportStatus",
                "param_8": "reportPriority",
                "param_9": "reportData",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "conditionFlag",
                "local_d8": "arraySize",
                "local_d4": "valueSize",
                "local_d0": "stackPointer",
                "local_c8": "localArray",
                "local_b8": "tempArray",
                "local_b0": "tempParam10",
                "local_a8": "tempParam11",
                "local_a0": "tempParam12",
                "local_98": "tempParam13",
                "local_90": "tempParam14",
                "local_88": "tempVar1",
                "local_78": "tempVar2",
                "local_68": "tempVar3",
                "local_58": "tempVar4",
                "local_48": "tempVar5",
                "local_38": "tempVar6",
                "local_28": "tempVar7",
                "local_18": "tempVar8"
            },
            "code": "\nvoid reportFunction_00102620(undefined4 reportType,undefined4 reportName,undefined4 reportLocation,undefined4 reportDate,\n                 undefined4 reportTime,undefined4 reportSeverity,undefined4 reportStatus,undefined4 reportPriority,\n                 undefined8 reportData,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char conditionFlag;\n  undefined4 arraySize;\n  undefined4 valueSize;\n  undefined *stackPointer;\n  undefined *localArray;\n  undefined tempArray [8];\n  undefined8 tempParam10;\n  undefined8 tempParam11;\n  undefined8 tempParam12;\n  undefined8 tempParam13;\n  undefined8 tempParam14;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  undefined4 tempVar5;\n  undefined4 tempVar6;\n  undefined4 tempVar7;\n  undefined4 tempVar8;\n  \n  if (conditionFlag != '\\0') {\n    tempVar1 = reportType;\n    tempVar2 = reportName;\n    tempVar3 = reportLocation;\n    tempVar4 = reportDate;\n    tempVar5 = reportTime;\n    tempVar6 = reportSeverity;\n    tempVar7 = reportStatus;\n    tempVar8 = reportPriority;\n  }\n  stackPointer = &stack0x00000008;\n  arraySize = 8;\n  localArray = tempArray;\n  valueSize = 0x30;\n  tempParam10 = param10;\n  tempParam11 = param11;\n  tempParam12 = param12;\n  tempParam13 = param13;\n  tempParam14 = param14;\n  report(reportData,&arraySize);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102620",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "report_function_00102620"
        },
        "FUN_001070a8": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070a8",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_001070a8"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001071c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071c8",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_001071c8"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "bfd_nonfatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00107120": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107120",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00107120"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_00107080": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107080",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00107080"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "usage",
                "main",
                "bfd_nonfatal.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00107128": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107128",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00107128"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "usage",
                "main",
                "bfd_nonfatal.cold",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_001070b0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070b0",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_001070b0"
        },
        "FUN_00107008": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107008",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_00107008"
        },
        "FUN_00107090": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107090",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00107090"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001070b8": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070b8",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_001070b8"
        },
        "FUN_001025c0": {
            "renaming": {
                "FUN_001025c0": "print_error_message_001025c0",
                "param_1": "message",
                "param_2": "args",
                "_stdout": "stdout_stream",
                "_stderr": "stderr_stream",
                "program_name": "name",
                "putc": "put_character"
            },
            "code": "\n\n\nvoid print_error_message_001025c0(char *message,__gnuc_va_list args)\n\n{\n  fflush(stdout_stream);\n  fprintf(stderr_stream,\"%s: \",name);\n  vfprintf(stderr_stream,message,args);\n  put_character(10,stderr_stream);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "putc",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025c0",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001025c0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "fatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\n\n\nint puts(char *__s)\n\n{\n  int iVar1;\n  \n  iVar1 = puts(__s);\n  return iVar1;\n}\n\n",
            "called": [
                "puts"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_00107098": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107098",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00107098"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_gmon_start_00102000",
                "ctx": "context",
                "iVar1": "result"
            },
            "code": "\nint initialize_gmon_start_00102000(EVP_PKEY_CTX *context)\n\n{\n  int result;\n  \n  result = __gmon_start__();\n  return result;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_gmon_start_00102000"
        },
        "FUN_00107018": {
            "renaming": {},
            "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107018",
            "calling": [
                "putchar"
            ],
            "imported": false,
            "current_name": "FUN_00107018"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00107138": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107138",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00107138"
        },
        "FUN_00102760": {
            "renaming": {
                "FUN_00102760": "initialize_program_00102760",
                "completed_0": "isCompleted",
                "__cxa_finalize": "finalizeObjects",
                "__dso_handle": "objectHandle",
                "deregister_tm_clones": "deregisterCloneFunctions"
            },
            "code": "\nvoid initializeProgram_00102760(void)\n\n{\n  if (isCompleted != '\\0') {\n    return;\n  }\n  finalizeObjects(objectHandle);\n  deregisterCloneFunctions();\n  isCompleted = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102760",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_00102760"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\nvoid bfd_fprintf_vma(void)\n\n{\n  bfd_fprintf_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_fprintf_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_001026f0": {
            "renaming": {
                "FUN_001026f0": "FUNC_001026f0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102703) */\n/* WARNING: Removing unreachable block (ram,0x0010270f) */\n\nvoid FUNC_001026f0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001026f0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_001026f0"
        },
        "FUN_001070c8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070c8",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_001070c8"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_00107020": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107020",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00107020"
        },
        "FUN_00107140": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107140",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00107140"
        },
        "FUN_00107028": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107028",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00107028"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00103cd0": {
            "renaming": {
                "FUN_00103cd0": "FUNC_00103cd0"
            },
            "code": "\nvoid FUNC_00103cd0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103cd0"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_001023a0": {
            "renaming": {
                "FUN_001023a0": "print_error_message_001023a0",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedMessage",
                "fflush": "flushOutput",
                "fprintf": "printFormatted",
                "_stderr": "errorOutput",
                "program_name": "appName",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid printErrorMessage_001023a0(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = getLocalizedMessage(0,\"cause of error unknown\",5);\n  flushOutput(standardOutput);\n  if (errorFlag != 0) {\n    printFormatted(errorOutput,\"%s: %s: %s\\n\",appName);\n    return;\n  }\n  printFormatted(errorOutput,\"%s: %s\\n\",appName,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001023a0"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001071f8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071f8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001071f8"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00107150": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107150",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_00107150"
        },
        "FUN_001027a0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027a0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_001027a0"
        },
        "FUN_00102540": {
            "renaming": {
                "FUN_00102540": "check_and_call_function_00102540",
                "param_1": "function_pointer",
                "param_2": "data_struct",
                "uVar1": "data_offset",
                "found": "is_found",
                "pc": "current_instruction_pointer",
                "syms": "symbol_table",
                "filename": "output_filename",
                "functionname": "output_functionname",
                "line": "output_line",
                "discriminator": "output_discriminator"
            },
            "code": "\nvoid check_and_call_function_00102540(long function_pointer,long data_struct)\n\n{\n  ulong data_offset;\n  \n  if ((is_found == '\\0') && ((*(byte *)(data_struct + 0x24) & 1) != 0)) {\n    data_offset = *(ulong *)(data_struct + 0x30);\n    if ((data_offset <= current_instruction_pointer) && (current_instruction_pointer < *(long *)(data_struct + 0x40) + data_offset)) {\n      is_found = (**(code **)(*(long *)(function_pointer + 8) + 0x240))\n                        (function_pointer,symbol_table,data_struct,current_instruction_pointer - data_offset,&output_filename,&output_functionname,&output_line,\n                         &output_discriminator);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_call_function_00102540"
        },
        "FUN_00107158": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107158",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_00107158"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nchar * fgets(char *__s,int __n,FILE *__stream)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = fgets(__s,__n,__stream);\n  return pcVar1;\n}\n\n",
            "called": [
                "fgets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_00107040": {
            "renaming": {},
            "code": "\n\n\n\nint puts(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* puts@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107040",
            "calling": [
                "puts"
            ],
            "imported": false,
            "current_name": "FUN_00107040"
        },
        "FUN_00107160": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107160",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00107160"
        },
        "FUN_001027b0": {
            "renaming": {
                "FUN_001027b0": "find_symbol_info_001027b0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptrByte1",
                "puVar2": "ptrUInt1",
                "bVar3": "byteVar1",
                "uVar4": "ushortVar1",
                "lVar5": "longVar1",
                "bVar6": "boolVar1",
                "bVar7": "boolVar2",
                "bVar8": "boolVar3",
                "pvVar9": "ptrVoid1",
                "bVar10": "byteVar2",
                "cVar11": "charVar1",
                "iVar12": "intVar1",
                "uVar13": "uintVar1",
                "iVar14": "intVar2",
                "uVar15": "uintVar2",
                "__stream": "stream",
                "__s": "ptrByte2",
                "plVar16": "ptrLong1",
                "sVar17": "sizeVar1",
                "__ptr": "ptrByte3",
                "lVar18": "longVar2",
                "pFVar19": "file",
                "psVar20": "ptrStat1",
                "uVar21": "ulongVar1",
                "piVar22": "ptrInt1",
                "plVar23": "ptrLong2",
                "__s_00": "ptrStat2",
                "uVar24": "ulongVar2",
                "pcVar26": "ptrChar1",
                "pbVar27": "ptrByte4",
                "unaff_RBP": "ptrChar2",
                "lVar28": "longVar3",
                "pbVar29": "ptrByte5",
                "pcVar30": "ptrChar3",
                "plVar31": "ptrLong3",
                "iVar32": "intVar3",
                "uVar35": "uintVar3",
                "local_148": "ptrLong4",
                "local_140": "ptrLong5",
                "local_120": "sizeVar2",
                "local_118": "longVar4",
                "local_d0": "ptrLong6",
                "local_c8": "stat1"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined8 findSymbolInfo_001027b0(uint argc,FILE *argv)\n\n{\n  byte *ptrByte1;\n  uint *ptrUInt1;\n  byte byteVar1;\n  ushort ushortVar1;\n  long longVar1;\n  bool boolVar1;\n  bool boolVar2;\n  bool boolVar3;\n  void *ptrVoid1;\n  byte byteVar2;\n  char charVar1;\n  int intVar1;\n  uint uintVar1;\n  int intVar2;\n  undefined4 uintVar2;\n  FILE *stream;\n  byte *ptrByte2;\n  long *ptrLong1;\n  size_t sizeVar1;\n  byte *ptrByte3;\n  long longVar2;\n  FILE *file;\n  stat *ptrStat1;\n  undefined8 ulongVar1;\n  int *ptrInt1;\n  long *ptrLong2;\n  stat *ptrStat2;\n  ulong ulongVar2;\n  FILE *pFVar25;\n  char *ptrChar1;\n  byte *ptrByte4;\n  char *ptrChar2;\n  long longVar3;\n  byte *ptrByte5;\n  char *ptrChar3;\n  long *ptrLong3;\n  int intVar3;\n  undefined1 *unaff_R12;\n  stat *psVar33;\n  int iVar34;\n  uint uintVar3;\n  long *ptrLong4;\n  long *ptrLong5;\n  size_t sizeVar2;\n  long longVar4;\n  long *ptrLong6;\n  stat stat1;\n  \n  pFVar25 = (FILE *)(ulong)argc;\n  setlocale(5,\"\");\n  ptrChar1 = \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  file = argv;\n  stream = argv;\n  if (1 < (int)argc) {\n    intVar2 = 2000;\n    unaff_R12 = (undefined1 *)0x1;\n    ptrLong5 = (long *)0x0;\n    do {\n      intVar3 = (int)unaff_R12;\n      ptrChar2 = (char *)(long)intVar3;\n      ptrLong4 = (long *)((long)ptrChar2 * 8);\n      iVar34 = (int)pFVar25;\n      if (**(char **)(&file->_flags + (long)ptrChar2 * 2) == '@') {\n        intVar2 = intVar2 + -1;\n        if (intVar2 == 0) {\n          ptrLong1 = *(long **)file;\n          ptrChar1 = \"%s: error: too many @-files encountered\\n\";\n          goto LAB_00103239;\n        }\n        ptrChar1 = *(char **)(&file->_flags + (long)ptrChar2 * 2) + 1;\n        intVar1 = stat(ptrChar1,&stat1);\n        if (intVar1 < 0) goto LAB_00102c30;\n        if ((stat1.st_mode & 0xf000) == 0x4000) {\n          do {\n            ptrLong1 = *(long **)file;\n            ptrChar1 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00103239:\n            fprintf(_stderr,ptrChar1,ptrLong1);\n            xexit(1);\n          } while( true );\n        }\n        stream = fopen(ptrChar1,\"r\");\n        if (stream == (FILE *)0x0) goto LAB_00102c30;\n        intVar1 = fseek(stream,0,2);\n        if (((intVar1 == -1) ||\n            (ptrChar1 = (char *)ftell(stream), (long *)ptrChar1 == (long *)0xffffffffffffffff)) ||\n           (intVar1 = fseek(stream,0,0), intVar1 == -1)) {\nLAB_00102c90:\n          fclose(stream);\n          if (intVar3 + 1 < iVar34) goto LAB_00102c3a;\n          break;\n        }\n        ptrByte2 = (byte *)xmalloc((long)ptrChar1 + 1);\n        ptrLong1 = (long *)fread(ptrByte2,1,(size_t)ptrChar1,stream);\n        if (((long *)ptrChar1 != ptrLong1) && (intVar1 = ferror(stream), intVar1 != 0)) {\n          free(ptrByte2);\n          goto LAB_00102c90;\n        }\n        ptrByte2[(long)ptrLong1] = 0;\n        byteVar2 = *ptrByte2;\n        ptrByte4 = ptrByte2;\n        if (byteVar2 != 0) {\nLAB_00102980:\n          if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) goto LAB_00102970;\n          sizeVar1 = strlen((char *)ptrByte2);\n          ptrByte3 = (byte *)xmalloc(sizeVar1 + 1);\n          ptrLong1 = (long *)0x0;\n          intVar1 = 0;\n          boolVar1 = false;\n          boolVar2 = false;\n          boolVar3 = false;\n          longVar4 = 0;\n          ptrByte4 = ptrByte2;\n          do {\n            while (((&_sch_istable)[(ulong)*ptrByte4 * 2] & 0x40) != 0) {\n              ptrByte4 = ptrByte4 + 1;\n            }\n            if ((intVar1 == 0) || (ptrLong2 = ptrLong1 + longVar4, intVar1 + -1 <= (int)longVar4)) {\n              if (ptrLong1 == (long *)0x0) {\n                ptrLong1 = (long *)xmalloc(0x40);\n                intVar1 = 8;\n                ptrLong2 = ptrLong1 + longVar4;\n                *ptrLong2 = 0;\n              }\n              else {\n                intVar1 = intVar1 * 2;\n                ptrLong1 = (long *)xrealloc(ptrLong1,(long)intVar1 << 3);\n                ptrLong2 = ptrLong1 + longVar4;\n                *ptrLong2 = 0;\n              }\n            }\n            byteVar2 = *ptrByte4;\n            ptrByte5 = ptrByte3;\n            while (byteVar2 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar3 | boolVar2 | boolVar1))) {\n                  boolVar3 = false;\n                  boolVar1 = false;\n                  boolVar2 = false;\n                  goto LAB_00102a9e;\n                }\n                if (!boolVar3) break;\n                ptrByte4 = ptrByte4 + 1;\n                *ptrByte5 = byteVar2;\n                ptrByte5 = ptrByte5 + 1;\n                boolVar3 = false;\n                byteVar2 = *ptrByte4;\n                if (byteVar2 == 0) goto LAB_00102a9e;\n              }\n              if (byteVar2 == 0x5c) {\n                boolVar3 = true;\n              }\n              else if (boolVar2) {\n                if (byteVar2 == 0x27) {\n                  boolVar2 = false;\n                }\n                else {\nLAB_00102c0d:\n                  *ptrByte5 = byteVar2;\n                  ptrByte5 = ptrByte5 + 1;\n                }\n              }\n              else if (boolVar1) {\n                if (byteVar2 != 0x22) goto LAB_00102c0d;\n                boolVar1 = false;\n              }\n              else if (byteVar2 == 0x27) {\n                boolVar2 = true;\n              }\n              else {\n                if (byteVar2 != 0x22) goto LAB_00102c0d;\n                boolVar1 = true;\n              }\n              ptrByte1 = ptrByte4 + 1;\n              ptrByte4 = ptrByte4 + 1;\n              byteVar2 = *ptrByte1;\n            }\nLAB_00102a9e:\n            *ptrByte5 = 0;\n            longVar2 = xstrdup(ptrByte3);\n            *ptrLong2 = longVar2;\n            ptrLong1[longVar4 + 1] = 0;\n            byteVar2 = *ptrByte4;\n            byteVar1 = (&_sch_istable)[(ulong)byteVar2 * 2];\n            while ((byteVar1 & 0x40) != 0) {\n              byteVar2 = ptrByte4[1];\n              ptrByte4 = ptrByte4 + 1;\n              byteVar1 = (&_sch_istable)[(ulong)byteVar2 * 2];\n            }\n            longVar4 = longVar4 + 1;\n          } while (byteVar2 != 0);\n          free(ptrByte3);\n          pFVar25 = file;\n          if (argv == file) goto LAB_001030d9;\n          goto LAB_00102b38;\n        }\nLAB_001030bb:\n        ptrLong1 = (long *)xmalloc(8);\n        *ptrLong1 = 0;\n        if (argv == file) {\nLAB_001030d9:\n          if (*(long **)file == (long *)0x0) {\n            intVar1 = 0;\n          }\n          else {\n            longVar2 = 1;\n            do {\n              intVar1 = (int)longVar2;\n              longVar3 = longVar2 * 2;\n              longVar2 = longVar2 + 1;\n            } while (*(long *)(&file->_flags + longVar3) != 0);\n          }\n          pFVar25 = (FILE *)xmalloc((long)(intVar1 + 1) << 3);\n          ptrLong2 = *(long **)file;\n          longVar2 = 0;\n          while (ptrLong2 != (long *)0x0) {\n            ulongVar1 = xstrdup();\n            *(undefined8 *)((long)&pFVar25->_flags + longVar2) = ulongVar1;\n            ptrLong2 = *(long **)(file->_shortbuf + longVar2 + -0x7b);\n            longVar2 = longVar2 + 8;\n          }\n          *(undefined8 *)((long)&pFVar25->_flags + longVar2) = 0;\nLAB_00102b38:\n          file = pFVar25;\n          if (*ptrLong1 == 0) goto LAB_0010318e;\n          ptrChar1 = (char *)0x0;\n          do {\n            ptrChar1 = (char *)((long)ptrChar1 + 1);\n          } while (ptrLong1[(long)ptrChar1] != 0);\n          sizeVar2 = (long)ptrChar1 * 8;\n        }\n        else {\nLAB_0010318e:\n          ptrChar1 = (char *)0x0;\n          sizeVar2 = 0;\n        }\n        free(*(void **)(&file->_flags + (long)ptrChar2 * 2));\n        file = (FILE *)xrealloc(file,((long)ptrChar1 + (long)iVar34 + 1) * 8);\n        uintVar3 = iVar34 + -1 + (int)ptrChar1;\n        pFVar25 = (FILE *)(ulong)uintVar3;\n        memmove(&file->_flags + (long)(FILE **)((long)ptrChar2 + (long)ptrChar1) * 2,\n                &file->_IO_read_ptr + (long)ptrChar2,(long)(iVar34 - intVar3) << 3);\n        memcpy(&file->_flags + (long)ptrChar2 * 2,ptrLong1,sizeVar2);\n        free(ptrLong1);\n        free(ptrByte2);\n        fclose(stream);\n        uintVar1 = (int)ptrLong5 + 1;\n        ptrChar2 = (char *)(FILE **)((long)ptrChar2 + (long)ptrChar1);\n        unaff_R12 = (undefined1 *)ptrLong4;\n        ptrLong4 = ptrLong1;\n        if ((int)uintVar3 <= (int)uintVar1) break;\n      }\n      else {\nLAB_00102c30:\n        if (iVar34 <= intVar3 + 1) break;\nLAB_00102c3a:\n        uintVar1 = intVar3 + 1;\n        ptrLong5 = (long *)unaff_R12;\n      }\n      unaff_R12 = (undefined1 *)(ulong)uintVar1;\n    } while( true );\n  }\n  intVar2 = bfd_init();\n  if (intVar2 != 0x118) {\n    ulongVar1 = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    fatal(ulongVar1);\n    goto switchD_00102d16_caseD_43;\n  }\n  ptrChar1 = \"x86_64-pc-linux-gnu\";\n  charVar1 = bfd_set_default_target();\n  if (charVar1 == '\\0') {\n    uintVar2 = bfd_get_error();\n    ptrChar2 = (char *)bfd_errmsg(uintVar2);\n    ulongVar1 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    fatal(ulongVar1,\"x86_64-pc-linux-gnu\",ptrChar2);\n    goto switchD_00102d16_caseD_61;\n  }\n  unaff_R12 = long_options;\n  ptrLong5 = (long *)0x0;\n  ptrChar2 = \"ab:Ce:rRsfHhij:pVv\";\n  ptrLong4 = (long *)0x0;\n  ptrChar1 = (char *)(long *)0x0;\nswitchD_00102d16_caseD_0:\n  do {\n    uintVar2 = getopt_long(pFVar25,file,ptrChar2,unaff_R12,0);\n    switch(uintVar2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x41:\n    case 0x42:\n    case 0x44:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x50:\n    case 0x51:\n    case 0x53:\n    case 0x54:\n    case 0x55:\n    case 0x57:\n    case 0x58:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 99:\n    case 100:\n    case 0x67:\n    case 0x6b:\n    case 0x6c:\n    case 0x6d:\n    case 0x6e:\n    case 0x6f:\n    case 0x71:\n    case 0x74:\n    case 0x75:\n      usage(_stderr,1);\n    case 0x6a:\n      ptrLong4 = _optarg;\n      break;\n    case 0x43:\nswitchD_00102d16_caseD_43:\n      stream = (FILE *)&optarg;\n      do_demangle = '\\x01';\n      if (_optarg != (long *)0x0) {\n        intVar2 = cplus_demangle_name_to_style();\n        if (intVar2 == 0) goto LAB_0010339f;\n        cplus_demangle_set_style();\n      }\n      break;\n    case 0x48:\n    case 0x68:\n      usage(_stdout,0);\nLAB_0010339f:\n      ptrChar1 = *(char **)stream;\n      ptrChar3 = \"unknown demangling style `%s\\'\";\nLAB_001033ae:\n      ulongVar1 = dcgettext(0,ptrChar3,5);\n      fatal(ulongVar1,ptrChar1);\nswitchD_00102d16_caseD_72:\n      demangle_flags = demangle_flags | 0x40000;\n      break;\n    case 0x52:\n      demangle_flags = demangle_flags & 0xfffbffff;\n      break;\n    case 0x56:\n    case 0x76:\n      printf(\"GNU %s %s\\n\",\"addr2line\",\"(GNU Binutils for Debian) 2.40\");\n      ptrChar1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(ptrChar1);\n      ptrChar1 = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(ptrChar1);\n                    \n      exit(0);\n    case 0x61:\nswitchD_00102d16_caseD_61:\n      with_addresses = '\\x01';\n      break;\n    case 0x62:\n      ptrLong5 = _optarg;\n      break;\n    case 0x65:\n      ptrChar1 = (char *)_optarg;\n      break;\n    case 0x66:\n      with_functions = '\\x01';\n      break;\n    case 0x69:\n      unwind_inlines = '\\x01';\n      break;\n    case 0x70:\n      pretty_print = '\\x01';\n      break;\n    case 0x72:\n      goto switchD_00102d16_caseD_72;\n    case 0x73:\n      goto switchD_00102d16_caseD_73;\n    default:\n      addr = (char **)(&file->_flags + (long)_optind * 2);\n      naddr = (int)pFVar25 - _optind;\n      if ((long *)ptrChar1 == (long *)0x0) {\n        ptrChar1 = \"a.out\";\n      }\n      intVar2 = stat(ptrChar1,&stat1);\n      if (intVar2 < 0) {\n        ptrInt1 = __errno_location();\n        ptrChar3 = \"\\'%s\\': No such file\";\n        if (*ptrInt1 != 2) {\n          ptrChar3 = strerror(*ptrInt1);\n          ulongVar1 = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n          non_fatal(ulongVar1,ptrChar1,ptrChar3);\n          return 1;\n        }\nLAB_001039cd:\n        ulongVar1 = dcgettext(0,ptrChar3,5);\n        non_fatal(ulongVar1,ptrChar1);\n        return 1;\n      }\n      if ((stat1.st_mode & 0xf000) == 0x4000) {\n        ptrChar3 = \"Warning: \\'%s\\' is a directory\";\n        goto LAB_001039cd;\n      }\n      ptrChar3 = \"Warning: \\'%s\\' is not an ordinary file\";\n      if ((stat1.st_mode & 0xf000) != 0x8000) goto LAB_001039cd;\n      ptrChar3 = \"Warning: \\'%s\\' has negative size, probably it is too large\";\n      if (stat1.st_size < 0) goto LAB_001039cd;\n      if (stat1.st_size == 0) {\n        return 1;\n      }\n      file = (FILE *)bfd_openr(ptrChar1,ptrLong5);\n      if (file == (FILE *)0x0) {\n        bfd_nonfatal(ptrChar1);\n        xexit(1);\n        goto LAB_00103a85;\n      }\n      ptrUInt1 = (uint *)((long)&file->_IO_buf_end + 4);\n      *ptrUInt1 = *ptrUInt1 | 0x8000;\n      charVar1 = bfd_check_format(file,2);\n      if (charVar1 != '\\0') {\n        ptrChar3 = \"%s: cannot get addresses from archive\";\n        goto LAB_001033ae;\n      }\n      charVar1 = bfd_check_format_matches(file,1,&ptrLong6);\n      if (charVar1 == '\\0') {\n        bfd_nonfatal(*(long **)file);\n        intVar2 = bfd_get_error();\n        if (intVar2 == 0xd) {\n          file = (FILE *)0x1040e1;\n          fflush(_stdout);\n          ptrLong1 = program_name;\n          ptrChar1 = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n          fprintf(_stderr,ptrChar1,ptrLong1);\n          for (ptrLong1 = ptrLong6; *ptrLong1 != 0; ptrLong1 = ptrLong1 + 1) {\n            fprintf(_stderr,\" %s\");\n          }\n          free(ptrLong6);\n          fputc(10,_stderr);\n        }\n        goto LAB_00103801;\n      }\n      ptrLong1 = ptrLong4;\n      if ((ptrLong4 != (long *)0x0) &&\n         (ptrLong1 = (long *)bfd_get_section_by_name(file), ptrLong1 == (long *)0x0)) {\n        ulongVar1 = dcgettext(0,\"%s: cannot find section %s\",5);\n        fatal(ulongVar1,ptrChar1,ptrLong4);\n        goto LAB_0010399c;\n      }\n      ptrLong4 = ptrLong1;\n      if ((*(byte *)((long)&file->_IO_buf_end + 4) & 0x10) == 0) goto LAB_00102ecd;\n      longVar2 = (**(code **)(file->_IO_read_ptr + 0x1f8))(file);\n      if (longVar2 == 0) {\n        longVar2 = (**(code **)(file->_IO_read_ptr + 0x350))(file);\n        if (-1 < longVar2) {\n          syms = (void *)xmalloc(longVar2);\n          symcount = (**(code **)(file->_IO_read_ptr + 0x358))(file);\n          if (-1 < symcount) goto LAB_00102ebf;\n        }\n      }\n      else if (-1 < longVar2) {\n        syms = (void *)xmalloc(longVar2);\n        symcount = (**(code **)(file->_IO_read_ptr + 0x200))(file);\n        if (-1 < symcount) {\n          if (symcount == 0) goto LAB_0010380b;\n          goto LAB_00102ebf;\n        }\n      }\n      bfd_nonfatal(*(long **)file);\nLAB_00103801:\n      xexit(1);\nLAB_0010380b:\n      longVar2 = (**(code **)(file->_IO_read_ptr + 0x350))(file);\n      if (0 < longVar2) {\n        free(syms);\n        syms = (void *)xmalloc(longVar2);\n        symcount = (**(code **)(file->_IO_read_ptr + 0x358))(file);\n      }\nLAB_00102ebf:\n      if (symcount < 1) {\n        free(syms);\n        syms = (void *)0x0;\n      }\nLAB_00102ecd:\n      unaff_R12 = (undefined1 *)(ulong)naddr;\n      stream = (FILE *)&DAT_0010400a;\n      if (naddr == 0) goto LAB_00103065;\nLAB_00102ee7:\n      if ((int)naddr < 1) {\nLAB_0010308a:\n        free(syms);\n        syms = (void *)0x0;\n        bfd_close(file);\n        return 0;\n      }\n      naddr = naddr - 1;\n      ptrStat1 = (stat *)*addr;\n      addr = addr + 1;\n      do {\n        byteVar2 = *(byte *)&ptrStat1->st_dev;\n        ulongVar2 = (ulong)byteVar2;\n        ushortVar1 = *(ushort *)(&_sch_istable + ulongVar2 * 2);\n        ptrStat2 = ptrStat1;\n        while ((ushortVar1 & 0x40) != 0) {\n          byteVar2 = *(byte *)((long)&ptrStat2->st_dev + 1);\n          ulongVar2 = (ulong)byteVar2;\n          ptrStat2 = (stat *)((long)&ptrStat2->st_dev + 1);\n          ushortVar1 = *(ushort *)(&_sch_istable + ulongVar2 * 2);\n        }\n        if ((((ushortVar1 & 4) == 0) && (byteVar2 != 0)) &&\n           ((psVar33 = ptrStat2, 5 < (byte)((&_sch_toupper)[ulongVar2] + 0xbf) ||\n            (ptrChar1 = strchr((char *)ptrStat2,0x2b), ptrChar1 != (char *)0x0)))) {\n          while( true ) {\n            byteVar2 = *(byte *)&psVar33->st_dev;\n            ptrStat1 = psVar33;\n            if (((byteVar2 == 0) || ((*(ushort *)(&_sch_istable + (ulong)byteVar2 * 2) & 0x40) != 0)) ||\n               (byteVar2 == 0x2b)) break;\n            psVar33 = (stat *)((long)&psVar33->st_dev + 1);\n          }\n          while (((&_sch_istable)[(ulong)*(byte *)&ptrStat1->st_dev * 2] & 0x40) != 0) {\n            ptrStat1 = (stat *)((long)&ptrStat1->st_dev + 1);\n          }\n          ulongVar2 = 0;\n          if (*(byte *)&ptrStat1->st_dev == 0x2b) {\n            ulongVar2 = strtoul((char *)((long)&ptrStat1->st_dev + 1),(char **)0x0,0);\n          }\n          ptrVoid1 = syms;\n          longVar2 = symcount;\n          *(undefined *)&psVar33->st_dev = 0;\n          for (longVar3 = 0; longVar3 < longVar2; longVar3 = longVar3 + 1) {\n            longVar1 = *(long *)((long)ptrVoid1 + longVar3 * 8);\n            intVar2 = strcmp(*(char **)(longVar1 + 8),(char *)ptrStat2);\n            if (intVar2 == 0) {\n              unaff_R12 = (undefined1 *)((ulong)unaff_R12 & 0xffffffff);\n              pc = ulongVar2 + *(long *)(longVar1 + 0x10) + *(long *)(*(long *)(longVar1 + 0x20) + 0x30);\n              goto LAB_00102f4b;\n            }\n          }\n          unaff_R12 = (undefined1 *)((ulong)unaff_R12 & 0xffffffff);\n          for (longVar2 = 0; longVar2 < symcount; longVar2 = longVar2 + 1) {\n            ptrChar1 = (char *)bfd_demangle(file,*(undefined8 *)\n                                                    (*(long *)((long)syms + longVar2 * 8) + 8),\n                                           demangle_flags);\n            if ((ptrChar1 != (char *)0x0) && (intVar2 = strcmp(ptrChar1,(char *)ptrStat2), intVar2 == 0))\n            {\n              free(ptrChar1);\n              longVar2 = *(long *)((long)syms + longVar2 * 8);\n              pc = *(long *)(longVar2 + 0x10) + ulongVar2 + *(long *)(*(long *)(longVar2 + 0x20) + 0x30);\n              goto LAB_00102f4b;\n            }\n            free(ptrChar1);\n          }\n          pc = 0;\n        }\n        else {\n          pc = bfd_scan_vma(ptrStat1,0,0x10);\n        }\nLAB_00102f4b:\n        if (*(int *)(file->_IO_read_ptr + 8) == 5) {\n          longVar2 = *(long *)(file->_IO_read_ptr + 0x380);\n          ulongVar2 = 1L << (*(char *)(*(long *)(longVar2 + 0x340) + 10) - 1U & 0x3f);\n          pc = pc & ulongVar2 * 2 - 1;\n          if ((*(byte *)(longVar2 + 0x3f1) & 1) != 0) {\n            pc = (pc ^ ulongVar2) - ulongVar2;\n          }\n        }\n        if (with_addresses != '\\0') {\n          printf(\"0x\");\n          bfd_fprintf_vma(file,_stdout,pc);\n          if (pretty_print == '\\0') {\n            putchar(10);\n          }\n          else {\n            printf(\": \");\n          }\n        }\n        ptrChar2 = &stdout;\n        found = '\\0';\n        if (ptrLong4 == (long *)0x0) {\n          bfd_map_over_sections(file,find_address_in_section,0);\nLAB_00102fcf:\n          if (found != '\\0') {\n            do {\n              if (with_functions != '\\0') {\n                ptrLong1 = functionname;\n                if (functionname == (long *)0x0) {\nLAB_00103a4a:\n                  ptrLong2 = (long *)&DAT_0010400a;\n                }\n                else {\n                  if (*(char *)functionname == '\\0') {\n                    ptrLong1 = (long *)0x0;\n                    goto LAB_00103a4a;\n                  }\n                  ptrChar1 = (char *)functionname;\n                  pFVar25 = file;\n                  if (do_demangle == '\\0') {\nLAB_001031f4:\n                    ptrLong1 = (long *)0x0;\n                    ptrLong2 = (long *)ptrChar1;\n                    file = pFVar25;\n                  }\n                  else {\nLAB_0010399c:\n                    ptrLong1 = (long *)bfd_demangle(pFVar25,ptrChar1,demangle_flags);\n                    ptrLong2 = ptrLong1;\n                    file = pFVar25;\n                    if (ptrLong1 == (long *)0x0) goto LAB_001031f4;\n                  }\n                }\n                printf(\"%s\",ptrLong2);\n                if (pretty_print == '\\0') {\n                  putchar(10);\n                }\n                else {\n                  ptrChar1 = (char *)dcgettext(0,&DAT_001040f1,5);\n                  printf(ptrChar1);\n                }\n                free(ptrLong1);\n              }\n              pFVar25 = filename;\n              if (base_names == '\\0') {\n                if (filename == (FILE *)0x0) {\n                  pFVar25 = stream;\n                }\n              }\n              else if (filename == (FILE *)0x0) {\n                pFVar25 = (FILE *)&DAT_0010400a;\n              }\n              else {\n                ptrChar1 = strrchr((char *)filename,0x2f);\n                if (ptrChar1 != (char *)0x0) {\n                  pFVar25 = (FILE *)(ptrChar1 + 1);\n                  filename = pFVar25;\n                }\n              }\n              printf(\"%s:\",pFVar25);\n              pFVar25 = file;\n              if (line == 0) {\nLAB_00103a85:\n                puts(\"?\");\n                file = pFVar25;\n              }\n              else if (discriminator == 0) {\n                printf(\"%u\\n\");\n              }\n              else {\n                printf(\"%u (discriminator %u)\\n\");\n              }\n              if (unwind_inlines == '\\0') {\nLAB_0010304c:\n                found = '\\0';\n                goto LAB_00103053;\n              }\n              found = (**(code **)(file->_IO_read_ptr + 600))\n                                (file,&filename,&functionname,&line);\n              ptrLong1 = functionname;\n              if (found == '\\0') goto LAB_00103053;\n              while (functionname = ptrLong1, pretty_print == '\\0') {\n                if (with_functions != '\\0') {\n                  ptrLong2 = ptrLong1;\n                  if (ptrLong1 == (long *)0x0) {\nLAB_00103b7b:\n                    ptrLong3 = (long *)&DAT_0010400a;\n                  }\n                  else {\n                    if (*(char *)ptrLong1 == '\\0') {\n                      ptrLong2 = (long *)0x0;\n                      goto LAB_00103b7b;\n                    }\n                    if ((do_demangle == '\\0') ||\n                       (ptrLong2 = (long *)bfd_demangle(file,ptrLong1,demangle_flags),\n                       ptrLong3 = ptrLong2, ptrLong2 == (long *)0x0)) {\n                      ptrLong2 = (long *)0x0;\n                      ptrLong3 = ptrLong1;\n                    }\n                  }\n                  printf(\"%s\",ptrLong3);\n                  if (pretty_print == '\\0') {\n                    putchar(10);\n                  }\n                  else {\n                    ptrChar1 = (char *)dcgettext(0,&DAT_001040f1,5);\n                    printf(ptrChar1);\n                  }\n                  free(ptrLong2);\n                }\n                pFVar25 = filename;\n                if (base_names == '\\0') {\n                  if (filename == (FILE *)0x0) {\n                    pFVar25 = (FILE *)&DAT_0010400a;\n                  }\n                }\n                else if (filename == (FILE *)0x0) {\n                  pFVar25 = (FILE *)&DAT_0010400a;\n                }\n                else {\n                  ptrChar1 = strrchr((char *)filename,0x2f);\n                  if (ptrChar1 != (char *)0x0) {\n                    pFVar25 = (FILE *)(ptrChar1 + 1);\n                    filename = pFVar25;\n                  }\n                }\n                printf(\"%s:\",pFVar25);\n                if (line == 0) {\n                  puts(\"?\");\n                }\n                else if (discriminator == 0) {\n                  printf(\"%u\\n\");\n                }\n                else {\n                  printf(\"%u (discriminator %u)\\n\");\n                }\n                if (unwind_inlines == '\\0') goto LAB_0010304c;\n                found = (**(code **)(file->_IO_read_ptr + 600))\n                                  (file,&filename,&functionname,&line);\n                ptrLong1 = functionname;\n                if (found == '\\0') {\n                  found = '\\0';\n                  goto LAB_00103053;\n                }\n              }\n              ptrChar1 = (char *)dcgettext(0,\" (inlined by) \",5);\n              printf(ptrChar1);\n            } while( true );\n          }\n        }\n        else if (((*(byte *)((long)ptrLong4 + 0x24) & 1) != 0) && (pc < (ulong)ptrLong4[8])) {\n          found = (**(code **)(file->_IO_read_ptr + 0x240))\n                            (file,syms,ptrLong4,pc,&filename,&functionname,&line,&discriminator)\n          ;\n          goto LAB_00102fcf;\n        }\n        if (with_functions != '\\0') {\n          if (pretty_print == '\\0') {\n            puts(\"??\");\n          }\n          else {\n            printf(\"?? \");\n          }\n        }\n        puts(\"??:0\");\nLAB_00103053:\n        fflush(*(FILE **)ptrChar2);\n        if ((int)unaff_R12 != 0) goto LAB_00102ee7;\nLAB_00103065:\n        ptrChar1 = fgets((char *)&stat1,100,_stdin);\n        ptrStat1 = &stat1;\n        if (ptrChar1 == (char *)0x0) goto LAB_0010308a;\n      } while( true );\n    }\n  } while( true );\nLAB_00102970:\n  byteVar2 = ptrByte4[1];\n  ptrByte4 = ptrByte4 + 1;\n  if (byteVar2 == 0) goto LAB_001030bb;\n  goto LAB_00102980;\nswitchD_00102d16_caseD_73:\n  base_names = '\\x01';\n  goto switchD_00102d16_caseD_0;\n}\n\n",
            "called": [
                "xstrdup",
                "non_fatal",
                "bfd_check_format_matches",
                "fputc",
                "bfd_check_format",
                "stat",
                "fgets",
                "bindtextdomain",
                "fread",
                "find_address_in_section",
                "bfd_openr",
                "strtoul",
                "fatal",
                "xmalloc",
                "free",
                "fprintf",
                "strchr",
                "__errno_location",
                "fclose",
                "exit",
                "setlocale",
                "xexit",
                "fopen",
                "bfd_get_section_by_name",
                "bfd_init",
                "bfd_demangle",
                "usage",
                "strlen",
                "ftell",
                "strrchr",
                "bfd_errmsg",
                "getopt_long",
                "strerror",
                "fseek",
                "bfd_map_over_sections",
                "memcpy",
                "ferror",
                "cplus_demangle_set_style",
                "textdomain",
                "dcgettext",
                "bfd_set_default_target",
                "strcmp",
                "bfd_nonfatal",
                "xmalloc_set_program_name",
                "bfd_fprintf_vma",
                "cplus_demangle_name_to_style",
                "bfd_set_error_program_name",
                "fflush",
                "memmove",
                "putchar",
                "bfd_scan_vma",
                "xrealloc",
                "printf",
                "puts",
                "bfd_get_error",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027b0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "find_symbol_info_001027b0"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00107048": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107048",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_00107048"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00103bd0": {
            "renaming": {
                "FUN_00103bd0": "analyze_and_report_00103bd0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "param_10": "data_1",
                "param_11": "data_2",
                "param_12": "data_3",
                "param_13": "data_4",
                "param_14": "data_5",
                "in_AL": "flag",
                "iVar1": "result",
                "uVar2": "error_message",
                "lVar3": "error_cause",
                "in_R10": "additional_data",
                "local_d8": "buffer_size",
                "local_d4": "buffer_length",
                "local_d0": "buffer",
                "local_c8": "local_buffer",
                "local_b8": "temp_buffer",
                "local_b0": "data_1_copy",
                "local_a8": "data_2_copy",
                "local_a0": "data_3_copy",
                "local_98": "data_4_copy",
                "local_90": "data_5_copy",
                "local_88": "input_1_copy",
                "local_78": "input_2_copy",
                "local_68": "input_3_copy",
                "local_58": "input_4_copy",
                "local_48": "input_5_copy",
                "local_38": "input_6_copy",
                "local_28": "input_7_copy",
                "local_18": "input_8_copy"
            },
            "code": "\n\n\nvoid analyze_and_report_00103bd0(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 param_9,undefined8 data_1,undefined8 data_2,undefined8 data_3,\n                 undefined8 data_4,undefined8 data_5)\n\n{\n  char flag;\n  int result;\n  undefined8 error_message;\n  long error_cause;\n  undefined8 additional_data;\n  undefined4 buffer_size;\n  undefined4 buffer_length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined temp_buffer [8];\n  undefined8 data_1_copy;\n  undefined8 data_2_copy;\n  undefined8 data_3_copy;\n  undefined8 data_4_copy;\n  undefined8 data_5_copy;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined4 input_5_copy;\n  undefined4 input_6_copy;\n  undefined4 input_7_copy;\n  undefined4 input_8_copy;\n  \n  if (flag != '\\0') {\n    input_1_copy = input_1;\n    input_2_copy = input_2;\n    input_3_copy = input_3;\n    input_4_copy = input_4;\n    input_5_copy = input_5;\n    input_6_copy = input_6;\n    input_7_copy = input_7;\n    input_8_copy = input_8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = temp_buffer;\n  buffer_length = 0x30;\n  data_1_copy = data_1;\n  data_2_copy = data_2;\n  data_3_copy = data_3;\n  data_4_copy = data_4;\n  data_5_copy = data_5;\n  report(param_9,&buffer_size);\n  error_cause = 1;\n  xexit();\n  result = bfd_get_error();\n  if (result == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(result);\n  }\n  fflush(_stdout);\n  if (error_cause != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,error_cause,error_message,additional_data);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,error_message,additional_data);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "analyze_and_report_00103bd0"
        },
        "FUN_00107168": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107168",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00107168"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main",
                "bfd_nonfatal.cold",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00107208": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107208",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_00107208"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00107170": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107170",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00107170"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00107058": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107058",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_00107058"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_00102720": {
            "renaming": {
                "FUN_00102720": "FUNC_00102720"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102744) */\n/* WARNING: Removing unreachable block (ram,0x00102750) */\n\nvoid FUNC_00102720(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00102720",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00102720"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_00107180": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107180",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_00107180"
        },
        "FUN_001071a8": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071a8",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_001071a8"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "bfd_nonfatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_00107100": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107100",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00107100"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001071b8": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071b8",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_001071b8"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001023e1": {
            "renaming": {
                "FUN_001023e1": "print_usage_001023e1",
                "param_1": "output_file",
                "param_2": "exit_code",
                "lVar1": "program_name_ptr",
                "pcVar2": "translation",
                "__ptr": "target_list",
                "plVar3": "target_ptr"
            },
            "code": "\nvoid print_usage_001023e1(FILE *output_file,int exit_code)\n\n{\n  long program_name_ptr;\n  char *translation;\n  long *target_list;\n  long *target_ptr;\n  \n  program_name_ptr = program_name;\n  translation = (char *)dcgettext(0,\"Usage: %s [option(s)] [addr(s)]\\n\",5);\n  fprintf(output_file,translation,program_name_ptr);\n  translation = (char *)dcgettext(0,\" Convert addresses into line number/file name pairs.\\n\",5);\n  fprintf(output_file,translation);\n  translation = (char *)dcgettext(0,\n                             \" If no addresses are specified on the command line, they will be read from stdin\\n\"\n                             ,5);\n  fprintf(output_file,translation);\n  translation = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                Read options from <file>\\n  -a --addresses         Show addresses\\n  -b --target=<bfdname>  Set the binary file format\\n  -e --exe=<executable>  Set the input file name (default is a.out)\\n  -i --inlines           Unwind inlined functions\\n  -j --section=<name>    Read section-relative offsets instead of addresses\\n  -p --pretty-print      Make the output easier to read for humans\\n  -s --basenames         Strip directory names\\n  -f --functions         Show function names\\n  -C --demangle[=style]  Demangle function names\\n  -R --recurse-limit     Enable a limit on recursion whilst demangling.  [Default]\\n  -r --no-recurse-limit  Disable a limit on recursion whilst demangling\\n  -h --help              Display this information\\n  -v --version           Display the program\\'s version\\n\\n\"\n                             ,5);\n  fprintf(output_file,translation);\n  program_name_ptr = program_name;\n  if (program_name == 0) {\n    translation = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,translation);\n  }\n  else {\n    translation = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,translation,program_name_ptr);\n  }\n  target_list = (long *)bfd_target_list();\n  target_ptr = target_list;\n  while( true ) {\n    program_name_ptr = *target_ptr;\n    target_ptr = target_ptr + 1;\n    if (program_name_ptr == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  if (exit_code == 0) {\n    translation = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,translation,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exit_code);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "bfd_target_list",
                "fputc",
                "exit",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e1",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_001023e1"
        },
        "FUN_00103c70": {
            "renaming": {
                "FUN_00103c70": "print_error_message_00103c70",
                "param_1": "errorType",
                "iVar1": "errorCode",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "appName"
            },
            "code": "\n\n\nvoid printErrorMessage_00103c70(long errorType)\n\n{\n  int errorCode;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  errorCode = bfd_get_error();\n  if (errorCode == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorCode);\n  }\n  fflush(standardOutput);\n  if (errorType != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",appName,errorType,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",appName,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c70",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_error_message_00103c70"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001026c0": {
            "renaming": {
                "FUN_001026c0": "start_main_loop_001026c0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "stackArray"
            },
            "code": "\nvoid processEntry startMainLoop_001026c0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stackArray [8];\n  \n  __libc_start_main(main,arg2,&stack0x00000008,0,0,arg1,stackArray);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001026c0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_loop_001026c0"
        },
        "FUN_00107070": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107070",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_00107070"
        },
        "FUN_00107190": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107190",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_00107190"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00107110": {
            "renaming": {},
            "code": "\n\n\n\nchar * fgets(char *__s,int __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fgets@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107110",
            "calling": [
                "fgets"
            ],
            "imported": false,
            "current_name": "FUN_00107110"
        }
    },
    "used_tokens": 14430,
    "layers": [
        [
            "FUN_00102620",
            "FUN_001025c0",
            "FUN_00102000",
            "FUN_00102760",
            "FUN_001023a0",
            "FUN_00102540",
            "FUN_00102020",
            "FUN_001027b0",
            "FUN_00103bd0",
            "FUN_001023e1",
            "FUN_00103c70",
            "FUN_001026c0"
        ]
    ],
    "locked_functions": []
}