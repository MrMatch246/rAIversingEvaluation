{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "0x0": {
                    "1": "target_address"
                },
                "FUN_00102020": {
                    "1": "call_indirect_jump",
                    "17": "execute_indirect_jump",
                    "2": "execute_indirect_function"
                },
                "PTR_0": {
                    "1": "target_address"
                },
                "PTR_00102020": {
                    "1": "function_pointer"
                },
                "PTR_FUN_00102020": {
                    "1": "function_pointer"
                },
                "PTR_undefined_0": {
                    "1": "jump_address"
                },
                "code": {
                    "1": "indirect_function",
                    "5": "function_pointer"
                },
                "undefined": {
                    "1": "target_function",
                    "3": "jump_address",
                    "5": "target_address"
                },
                "undefined*": {
                    "1": "function_pointer"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(target_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "target_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001023a0": {
            "additional_data": {
                "FUN_001023a0": {
                    "1": "print_error_details",
                    "24": "print_error_message",
                    "3": "print_error"
                },
                "uVar1": {
                    "18": "error_message",
                    "2": "error_description",
                    "3": "error_string"
                },
                "unaff_RBX": {
                    "1": "error_type",
                    "19": "error_code",
                    "2": "error_cause",
                    "8": "error_flag"
                },
                "unaff_retaddr": {
                    "1": "return_addr",
                    "30": "return_address"
                }
            },
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "calling": [
                "FUN_00103c70"
            ],
            "code": "\n\n\nvoid print_error_message_001023a0(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00106438);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00106438,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_001023a0",
            "entrypoint": "0x001023a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001023a0": "print_error_message_001023a0",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001023e1": {
            "additional_data": {
                "FUN_001023e1": {
                    "1": "display_usage_information",
                    "19": "print_usage",
                    "3": "print_usage_info",
                    "5": "print_usage_and_exit"
                },
                "__ptr": {
                    "1": "pointer_list",
                    "30": "target_list"
                },
                "bf_target_list": {
                    "1": "get_target_list"
                },
                "bfd_target_list": {
                    "1": "get_supported_targets"
                },
                "dcgettext": {
                    "1": "get_string",
                    "2": "translate_text",
                    "3": "get_localized_text"
                },
                "exit": {
                    "2": "exit_program",
                    "5": "terminate_program"
                },
                "fp": {
                    "1": "output_stream"
                },
                "fprintf": {
                    "1": "write_formatted_output",
                    "2": "write_formatted",
                    "3": "write_to_file",
                    "4": "print_formatted"
                },
                "fputc": {
                    "1": "put_character",
                    "9": "write_character"
                },
                "free": {
                    "1": "deallocate",
                    "9": "release_memory"
                },
                "free(__ptr)": {
                    "1": "free_target_list"
                },
                "lVar1": {
                    "1": "version",
                    "2": "target_name",
                    "3": "target",
                    "4": "language_code",
                    "6": "default_target"
                },
                "param_1": {
                    "1": "file_stream",
                    "14": "file",
                    "15": "output_file"
                },
                "param_2": {
                    "2": "error_code",
                    "26": "exit_code",
                    "3": "exit_status"
                },
                "pcVar2": {
                    "2": "translation",
                    "22": "message",
                    "3": "localized_string",
                    "4": "text"
                },
                "plVar3": {
                    "1": "ptr_target",
                    "2": "pointer",
                    "3": "target_pointer",
                    "5": "current_target",
                    "7": "ptr",
                    "9": "target"
                }
            },
            "called": [
                "exit",
                "fprintf",
                "bfd_target_list",
                "free",
                "dcgettext",
                "fputc"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid print_usage_001023e1(FILE *output_file,int exit_code)\n\n{\n  long default_target;\n  char *message;\n  long *target_list;\n  long *target;\n  \n  default_target = DAT_00106438;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [addr(s)]\\n\",5);\n  fprintf(output_file,message,default_target);\n  message = (char *)dcgettext(0,\" Convert addresses into line number/file name pairs.\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \" If no addresses are specified on the command line, they will be read from stdin\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                Read options from <file>\\n  -a --addresses         Show addresses\\n  -b --target=<bfdname>  Set the binary file format\\n  -e --exe=<executable>  Set the input file name (default is a.out)\\n  -i --inlines           Unwind inlined functions\\n  -j --section=<name>    Read section-relative offsets instead of addresses\\n  -p --pretty-print      Make the output easier to read for humans\\n  -s --basenames         Strip directory names\\n  -f --functions         Show function names\\n  -C --demangle[=style]  Demangle function names\\n  -R --recurse-limit     Enable a limit on recursion whilst demangling.  [Default]\\n  -r --no-recurse-limit  Disable a limit on recursion whilst demangling\\n  -h --help              Display this information\\n  -v --version           Display the program\\'s version\\n\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  default_target = DAT_00106438;\n  if (DAT_00106438 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,default_target);\n  }\n  target_list = (long *)bfd_target_list();\n  target = target_list;\n  while( true ) {\n    default_target = *target;\n    target = target + 1;\n    if (default_target == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free_target_list;\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminate_program(exit_code);\n}\n\n",
            "current_name": "print_usage_001023e1",
            "entrypoint": "0x001023e1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001023e1": "print_usage_001023e1",
                "__ptr": "target_list",
                "bfd_target_list": "list_targets",
                "dcgettext": "get_localized_text",
                "exit": "terminate_program",
                "fp": "output_stream",
                "fprintf": "print_formatted",
                "fputc": "write_character",
                "free": "release_memory",
                "free(__ptr)": "free_target_list",
                "lVar1": "default_target",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "plVar3": "target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102540": {
            "additional_data": {
                "&DAT_001063f0": {
                    "1": "data5"
                },
                "&DAT_001063f4": {
                    "1": "pointer3"
                },
                "&DAT_001063f8": {
                    "1": "data2"
                },
                "&DAT_00106400": {
                    "1": "arg4"
                },
                "(DAT_)00106408": {
                    "1": "flag"
                },
                "(byte *)(param_2 + 0x24)": {
                    "1": "byte_ptr"
                },
                "(code **)(*(long *)(param_1 + 8) + 0x240)": {
                    "1": "callback_function_ptr"
                },
                "(long *)(param_2 + 0x30)": {
                    "1": "ulong_ptr"
                },
                "(long *)(param_2 + 0x40)": {
                    "1": "long_ptr"
                },
                "*(byte *)(param_2 + 0x24)": {
                    "1": "argument_flag",
                    "3": "byte_value"
                },
                "*(byte *)(param_2 + 0x24) & 1": {
                    "1": "is_flag_set"
                },
                "*(code **)(*(long *)(param_1 + 8) + 0x240)": {
                    "1": "function_pointer"
                },
                "*(long *)(param_2 + 0x40)": {
                    "1": "address_value"
                },
                "*(long *)(param_2 + 0x40) + uVar1": {
                    "1": "computed_end_address"
                },
                "*(ulong *)(param_2 + 0x30)": {
                    "1": "data2"
                },
                "DAT_001063f0": {
                    "1": "result4",
                    "2": "output4"
                },
                "DAT_001063f4": {
                    "1": "output2",
                    "2": "output3"
                },
                "DAT_001063f8": {
                    "1": "arg3",
                    "2": "output1"
                },
                "DAT_00106400": {
                    "1": "var2",
                    "2": "output2"
                },
                "DAT_00106408": {
                    "1": "initialized_flag",
                    "10": "flag"
                },
                "DAT_00106410": {
                    "1": "max_offset",
                    "2": "end_address"
                },
                "DAT_00106410 - uVar1": {
                    "1": "difference"
                },
                "DAT_00106418": {
                    "1": "constant",
                    "2": "param3"
                },
                "FUN_00102540": {
                    "1": "perform_operation",
                    "11": "process_data",
                    "3": "check_and_execute_function",
                    "4": "execute_function"
                },
                "PTR_0010267": {
                    "1": "function_ptr"
                },
                "byte": {
                    "1": "value_byte"
                },
                "code": {
                    "1": "callback"
                },
                "long": {
                    "1": "signed_long"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "data_pointer",
                    "3": "input_pointer",
                    "4": "input_data"
                },
                "param_1 + 8": {
                    "1": "function_pointer"
                },
                "param_2": {
                    "1": "address_param",
                    "3": "input_param2",
                    "4": "data_pointer"
                },
                "param_2 + 0x24": {
                    "2": "byte_value"
                },
                "param_2 + 0x30": {
                    "1": "struct_offset"
                },
                "param_2 + 0x40": {
                    "1": "size"
                },
                "uVar1": {
                    "1": "data_value",
                    "2": "data_offset",
                    "5": "offset"
                },
                "uVar1 <= DAT_00106410": {
                    "1": "is_in_range"
                },
                "ulong": {
                    "1": "unsigned_long"
                }
            },
            "called": [],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid process_data_00102540(signed_long input_data,signed_long data_pointer)\n\n{\n  unsigned_long offset;\n  \n  if ((DAT_00106408 == '\\0') && ((*(value_byte *)(data_pointer + 0x24) & 1) != 0)) {\n    offset = *(unsigned_long *)(data_pointer + 0x30);\n    if ((offset <= DAT_00106410) && (DAT_00106410 < *(signed_long *)(data_pointer + 0x40) + offset)) {\n      DAT_00106408 = (**(function_ptr **)(*(signed_long *)(input_data + 8) + 0x240))\n                               (input_data,DAT_00106418,data_pointer,DAT_00106410 - offset,&DAT_001063f8,\n                                &DAT_00106400,&DAT_001063f4,&DAT_001063f0);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00102540",
            "entrypoint": "0x00102540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102540": "process_data_00102540",
                "byte": "value_byte",
                "code": "function_ptr",
                "long": "signed_long",
                "param_1": "input_data",
                "param_2": "data_pointer",
                "uVar1": "offset",
                "ulong": "unsigned_long"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001025c0": {
            "additional_data": {
                "10": {
                    "1": "newline"
                },
                "DAT_00106438": {
                    "1": "program_name"
                },
                "FUN_001025c0": {
                    "1": "print_formatted_error",
                    "2": "print_formatted_message",
                    "27": "print_error_message"
                },
                "PTR_stdin_00106434": {
                    "1": "stdin"
                },
                "__gnuc_va_list": {
                    "1": "args"
                },
                "_stderr": {
                    "1": "stderr_file",
                    "17": "standard_error",
                    "2": "stderr"
                },
                "_stdout": {
                    "1": "stdout_file",
                    "17": "standard_output",
                    "2": "output_stream"
                },
                "fflush": {
                    "1": "flush_output"
                },
                "fprintf": {
                    "1": "print_to_stderr"
                },
                "param_1": {
                    "1": "format_string",
                    "21": "error_message",
                    "8": "message"
                },
                "param_2": {
                    "1": "format_arguments",
                    "14": "args",
                    "2": "variable_arguments",
                    "3": "format_args",
                    "9": "arguments"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "putc": {
                    "1": "end_of_line",
                    "3": "put_character",
                    "5": "write_character"
                },
                "vfprintf": {
                    "1": "format_var_print"
                }
            },
            "called": [
                "fprintf",
                "fflush",
                "vfprintf",
                "putc"
            ],
            "calling": [
                "FUN_00102620",
                "FUN_00103bd0"
            ],
            "code": "\n\n\nvoid print_error_message_001025c0(char *error_message,args args)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_00106438);\n  vfprintf(standard_error,error_message,args);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_001025c0",
            "entrypoint": "0x001025c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001025c0": "print_error_message_001025c0",
                "__gnuc_va_list": "args",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_stdout",
                "fprintf": "format_error_message",
                "param_1": "error_message",
                "param_2": "args",
                "printf": "print_formatted",
                "putc": "write_character",
                "vfprintf": "print_formatted_to_stderr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102620": {
            "additional_data": {
                "FUN_00102620": {
                    "1": "print_error",
                    "29": "print_error_message"
                },
                "in_AL": {
                    "1": "condition_result",
                    "14": "flag",
                    "2": "condition_flag",
                    "5": "condition",
                    "7": "is_error"
                },
                "local_18": {
                    "1": "param7",
                    "15": "param8_copy",
                    "2": "local_param8",
                    "3": "param8"
                },
                "local_28": {
                    "1": "param7_new",
                    "15": "param7_copy",
                    "2": "param_7",
                    "3": "param7"
                },
                "local_38": {
                    "1": "local_error_param6",
                    "15": "param6_copy",
                    "2": "param_6",
                    "3": "param6"
                },
                "local_48": {
                    "1": "error_param5",
                    "15": "param5_copy",
                    "2": "param_5",
                    "3": "param5"
                },
                "local_58": {
                    "1": "error_param4",
                    "15": "param4_copy",
                    "2": "local_param4",
                    "3": "param4"
                },
                "local_68": {
                    "1": "error_param_3_copy",
                    "14": "param3_copy",
                    "2": "param3_local",
                    "3": "param3"
                },
                "local_78": {
                    "1": "local_error_param2",
                    "13": "param2_copy",
                    "2": "param_2",
                    "3": "param2"
                },
                "local_88": {
                    "1": "error_code_new",
                    "15": "error_code_copy",
                    "2": "local_param1",
                    "6": "error_code"
                },
                "local_90": {
                    "1": "param14_shadow",
                    "13": "param14_copy",
                    "2": "param_14",
                    "3": "local_param14",
                    "7": "param14"
                },
                "local_98": {
                    "1": "param_13_copy",
                    "13": "param13_copy",
                    "2": "param_13",
                    "3": "local_param13",
                    "7": "param13"
                },
                "local_a0": {
                    "1": "local_parameter12",
                    "13": "param12_copy",
                    "2": "param_12",
                    "3": "local_param12",
                    "7": "param12"
                },
                "local_a8": {
                    "1": "param11_shadow",
                    "13": "param11_copy",
                    "2": "param_11",
                    "3": "local_param11",
                    "7": "param11"
                },
                "local_b0": {
                    "1": "param10_shadow",
                    "13": "param10_copy",
                    "2": "param_10",
                    "3": "local_param10",
                    "8": "param10"
                },
                "local_b8": {
                    "1": "error_array",
                    "2": "temporary_buffer",
                    "3": "buffer",
                    "4": "local_array"
                },
                "local_c8": {
                    "1": "local_byte_ptr2",
                    "16": "local_buffer",
                    "2": "local_c8",
                    "6": "buffer"
                },
                "local_d0": {
                    "1": "arg_ptr",
                    "5": "stack_pointer",
                    "6": "buffer",
                    "9": "buffer_pointer"
                },
                "local_d4": {
                    "1": "local_undefined4_2",
                    "2": "local_var",
                    "3": "local_d4"
                },
                "local_d8": {
                    "1": "arg_size",
                    "14": "buffer_size",
                    "2": "length",
                    "3": "buffer_length",
                    "4": "size"
                },
                "param_1": {
                    "1": "error_type",
                    "2": "error_param1",
                    "27": "error_code"
                },
                "param_10": {
                    "1": "message",
                    "2": "param_10",
                    "22": "param10"
                },
                "param_11": {
                    "1": "error_param11",
                    "2": "param_11",
                    "24": "param11"
                },
                "param_12": {
                    "1": "parameter12",
                    "2": "param_12",
                    "24": "param12"
                },
                "param_13": {
                    "1": "error_param_13",
                    "2": "param_13",
                    "23": "param13"
                },
                "param_14": {
                    "1": "error_param14",
                    "2": "param_14",
                    "23": "param14"
                },
                "param_2": {
                    "1": "error_type",
                    "2": "param_2",
                    "21": "param2"
                },
                "param_3": {
                    "1": "flag2",
                    "2": "param_3",
                    "22": "param3"
                },
                "param_4": {
                    "1": "output_data",
                    "2": "error_param4",
                    "23": "param4"
                },
                "param_5": {
                    "1": "option1",
                    "2": "param_5",
                    "23": "param5"
                },
                "param_6": {
                    "1": "param5",
                    "2": "param_6",
                    "23": "param6"
                },
                "param_7": {
                    "1": "option3",
                    "2": "param_7",
                    "23": "param7"
                },
                "param_8": {
                    "1": "param7",
                    "2": "error_param8",
                    "23": "param8"
                },
                "param_9": {
                    "1": "param8",
                    "19": "error_message",
                    "2": "error_data",
                    "5": "param9"
                }
            },
            "called": [
                "FUN_001025c0"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid print_error_message_00102620(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 buffer_size;\n  undefined *buffer_pointer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer_pointer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_array;\n  buffer_size = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_error_message_00102620_001025c0(error_message,&buffer_size);\n  return;\n}\n\n",
            "current_name": "print_error_message_00102620",
            "entrypoint": "0x00102620",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102620": "print_error_message_00102620",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "local_array",
                "local_c8": "local_buffer",
                "local_d0": "buffer_pointer",
                "local_d4": "buffer_size",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001026f0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102703) */\n/* WARNING: Removing unreachable block (ram,0x0010270f) */\n\nvoid FUNC_001026f0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_001026f0",
            "entrypoint": "0x001026f0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001026f0": "FUNC_001026f0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00102720": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102744) */\n/* WARNING: Removing unreachable block (ram,0x00102750) */\n\nvoid FUNC_00102720(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00102720",
            "entrypoint": "0x00102720",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00102720": "FUNC_00102720"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001027b0": {
            "additional_data": {
                "DAT_001063f0": {
                    "1": "discriminator"
                },
                "DAT_001063f4": {
                    "1": "num_addresses"
                },
                "DAT_001063f8": {
                    "1": "current_filename"
                },
                "DAT_00106408": {
                    "1": "found_file"
                },
                "DAT_00106410": {
                    "2": "address"
                },
                "DAT_00106420": {
                    "2": "num_files"
                },
                "DAT_00106428": {
                    "1": "file_args"
                },
                "DAT_00106430": {
                    "1": "function_names"
                },
                "DAT_00106431": {
                    "1": "format_address"
                },
                "DAT_00106432": {
                    "1": "print_filename"
                },
                "DAT_00106433": {
                    "1": "filename_given"
                },
                "DAT_00106434": {
                    "1": "demangle_style_given"
                },
                "DAT_00106435": {
                    "1": "detailed_output"
                },
                "DAT_00106438": {
                    "1": "program_name"
                },
                "FILE *__stream": {
                    "1": "stream_file"
                },
                "FILE *pFVar19": {
                    "1": "output_file"
                },
                "FILE *pFVar27": {
                    "1": "current_file"
                },
                "FILE *param_2": {
                    "1": "input_file"
                },
                "FUN_001027b0": {
                    "1": "read_debug_info",
                    "3": "process_file"
                },
                "__ptr": {
                    "1": "byte_pointer_var2",
                    "2": "byte_pointer2",
                    "3": "byte_pointer3",
                    "8": "byte_ptr"
                },
                "__s": {
                    "1": "ptr_byte_string",
                    "2": "ptr_byte_s",
                    "3": "buffer",
                    "4": "byte_ptr_s"
                },
                "__s_00": {
                    "1": "ptr_byte_s00"
                },
                "__stream": {
                    "1": "file_ptr",
                    "2": "stream_ptr",
                    "8": "stream",
                    "9": "file_stream"
                },
                "_stderr": {
                    "1": "stderr_pointer"
                },
                "_stdout": {
                    "1": "stdout_pointer"
                },
                "bVar10": {
                    "1": "byte_var3",
                    "10": "byte_var2",
                    "11": "byte_var10"
                },
                "bVar3": {
                    "1": "byte_var_3",
                    "11": "byte_var3",
                    "5": "byte_var1",
                    "6": "byte_var"
                },
                "bVar6": {
                    "1": "var_bool_6",
                    "10": "bool_var6",
                    "12": "bool_var1"
                },
                "bVar7": {
                    "1": "bool_var3",
                    "10": "bool_var7",
                    "12": "bool_var2"
                },
                "bVar8": {
                    "1": "bool_var_8",
                    "10": "bool_var8",
                    "12": "bool_var3"
                },
                "bfd_init": {
                    "1": "bfd_init"
                },
                "bfd_set_error_program_name": {
                    "1": "bfd_set_error_program_name"
                },
                "bool bVar6": {
                    "1": "bool_var1"
                },
                "bool bVar7": {
                    "1": "bool_var2"
                },
                "bool bVar8": {
                    "1": "bool_var3"
                },
                "byte *__ptr": {
                    "1": "byte_ptr2"
                },
                "byte *__s": {
                    "1": "byte_arr"
                },
                "byte *pbVar1": {
                    "1": "byte_ptr1"
                },
                "byte *pbVar29": {
                    "1": "byte_ptr3"
                },
                "byte *pbVar31": {
                    "1": "byte_ptr4"
                },
                "byte bVar10": {
                    "1": "byte_var1"
                },
                "byte bVar3": {
                    "1": "byte_var"
                },
                "cVar11": {
                    "1": "var_char_11",
                    "11": "char_var11",
                    "6": "char_var1",
                    "7": "char_var"
                },
                "char *pcVar28": {
                    "1": "char_ptr"
                },
                "char *pcVar32": {
                    "1": "char_ptr2"
                },
                "char *unaff_RBP": {
                    "1": "char_ptr1"
                },
                "char cVar11": {
                    "1": "char_var"
                },
                "dcgettext": {
                    "1": "dcgettext"
                },
                "fclose": {
                    "1": "fclose"
                },
                "ferror": {
                    "1": "ferror"
                },
                "fopen": {
                    "1": "fopen"
                },
                "fprintf": {
                    "1": "fprintf"
                },
                "fread": {
                    "1": "fread"
                },
                "free": {
                    "1": "free"
                },
                "fseek": {
                    "1": "fseek"
                },
                "ftell": {
                    "1": "ftell"
                },
                "getopt_long": {
                    "1": "getopt_long"
                },
                "iVar12": {
                    "1": "var_int12",
                    "11": "int_var12",
                    "6": "int_var",
                    "7": "int_var1"
                },
                "iVar14": {
                    "1": "int_var",
                    "10": "int_var14",
                    "11": "int_var2"
                },
                "iVar34": {
                    "1": "int_var",
                    "7": "int_var3",
                    "9": "int_var34"
                },
                "iVar36": {
                    "1": "temp_int3",
                    "10": "int_var36",
                    "7": "int_var4"
                },
                "int *piVar23": {
                    "1": "int_ptr"
                },
                "int iVar12": {
                    "1": "int_var1"
                },
                "int iVar14": {
                    "1": "int_var2"
                },
                "int iVar34": {
                    "1": "int_var3"
                },
                "int iVar36": {
                    "1": "int_var4"
                },
                "lVar20": {
                    "1": "long_var_20",
                    "10": "long_var2",
                    "11": "long_var20"
                },
                "lVar30": {
                    "1": "long_var2",
                    "5": "long_var3",
                    "6": "long_var30"
                },
                "lVar5": {
                    "1": "current_value",
                    "11": "long_var5",
                    "6": "long_var1",
                    "7": "long_var"
                },
                "local_118": {
                    "1": "file_idx",
                    "2": "long_var_local_118",
                    "5": "long_var4"
                },
                "local_120": {
                    "1": "local_size_var120",
                    "2": "size_t_var_local_120",
                    "3": "size_var2"
                },
                "local_140": {
                    "1": "ptr_array3",
                    "2": "undefined_pointer4"
                },
                "local_148": {
                    "1": "ptr_ptr_void5",
                    "2": "undefined_pointer3"
                },
                "local_c8": {
                    "1": "stat_struct_var4",
                    "2": "var_stat_local_c8",
                    "3": "stat_struct3",
                    "4": "stat_var1"
                },
                "local_d0": {
                    "1": "temp_array3",
                    "2": "ptr_local_d0",
                    "3": "long_ptr_local_d0"
                },
                "long *local_d0": {
                    "1": "local_var5"
                },
                "long *plVar26": {
                    "1": "long_ptr"
                },
                "long lVar20": {
                    "1": "long_var1"
                },
                "long lVar30": {
                    "1": "long_var2"
                },
                "long lVar5": {
                    "1": "long_var"
                },
                "long local_118": {
                    "1": "local_var4"
                },
                "memcpy": {
                    "1": "memcpy"
                },
                "memmove": {
                    "1": "memmove"
                },
                "memset": {
                    "1": "memset"
                },
                "offset_1": {
                    "1": "int_var3"
                },
                "pFVar19": {
                    "1": "file_var19",
                    "2": "file_ptr19",
                    "3": "file_ptr2",
                    "4": "file_ptr",
                    "5": "file_pointer"
                },
                "pFVar27": {
                    "1": "arg_file",
                    "2": "file_ptr27",
                    "3": "file_ptr3"
                },
                "pFvar19": {
                    "1": "file_ptr"
                },
                "param_1": {
                    "1": "param_file",
                    "17": "argc",
                    "2": "file_count",
                    "4": "param1"
                },
                "param_1+1": {
                    "1": "argc_minus_one"
                },
                "param_2": {
                    "1": "arg2",
                    "17": "argv",
                    "2": "file",
                    "3": "input_file",
                    "4": "param2"
                },
                "param_2->_IO_buf_end": {
                    "1": "buf_end"
                },
                "param_2->_IO_read_ptr": {
                    "1": "read_ptr"
                },
                "param_2->_IO_read_ptr + 0x1f8": {
                    "1": "ab"
                },
                "param_2->_IO_read_ptr + 0x200": {
                    "1": "dc"
                },
                "param_2->_IO_read_ptr + 0x240": {
                    "1": "get_inliners"
                },
                "param_2->_IO_read_ptr + 0x340": {
                    "1": "icl"
                },
                "param_2->_IO_read_ptr + 0x350": {
                    "1": "cksum"
                },
                "param_2->_IO_read_ptr + 0x358": {
                    "1": "alloc_object"
                },
                "param_2->_IO_read_ptr + 0x380": {
                    "1": "syms"
                },
                "param_2->_IO_read_ptr + 0x3f1": {
                    "1": "block_flag"
                },
                "param_2->_IO_read_ptr + 600": {
                    "1": "find_addresses"
                },
                "param_2->_flags": {
                    "1": "flags"
                },
                "param_2->_flags + unaff_RBP * 2": {
                    "1": "flag_ptr"
                },
                "param_2->_shortbuf": {
                    "1": "short_buf"
                },
                "pbVar1": {
                    "1": "byte_pointer_var",
                    "2": "ptr_byte_1",
                    "4": "byte_pointer1",
                    "6": "byte_ptr1"
                },
                "pbVar29": {
                    "1": "temp_byte_ptr",
                    "2": "byte_ptr4",
                    "5": "byte_ptr29"
                },
                "pbVar31": {
                    "1": "temp_byte_ptr2",
                    "2": "byte_ptr5",
                    "4": "byte_ptr31"
                },
                "pcVar28": {
                    "1": "char_var28",
                    "3": "char_ptr1",
                    "5": "char_ptr28"
                },
                "pcVar32": {
                    "1": "temp_string2",
                    "2": "char_ptr3",
                    "4": "char_ptr32"
                },
                "piVar23": {
                    "1": "int_pointer_var",
                    "2": "ptr_int23",
                    "3": "ptr_int_var23",
                    "4": "int_pointer",
                    "5": "int_ptr23"
                },
                "plVar23": {
                    "1": "ptr_long1"
                },
                "plVar26": {
                    "1": "ptr4",
                    "2": "long_ptr1",
                    "5": "long_ptr26"
                },
                "ppuVar16": {
                    "1": "ptr_ptr_undefined16",
                    "2": "undefined_ptr_ptr16"
                },
                "ppuVar24": {
                    "1": "ptr_ptr_24",
                    "2": "undefined_pointer2",
                    "3": "undefined_ptr_ptr24"
                },
                "ppuVar33": {
                    "1": "pointer_ptr3",
                    "3": "undefined_ptr_ptr33"
                },
                "ppvVar16": {
                    "1": "demangled_strings"
                },
                "ppvVar24": {
                    "1": "demangled_string_ptr"
                },
                "print_error_and_exit_00103bd0": {
                    "1": "print_error_and_exit"
                },
                "print_error_message_00102620": {
                    "1": "print_error_message"
                },
                "print_usage_001023e1": {
                    "1": "print_usage"
                },
                "psVar21": {
                    "1": "ptr_stat21",
                    "2": "ptr_stat_var21",
                    "3": "stat_pointer",
                    "5": "stat_ptr21"
                },
                "psVar35": {
                    "1": "stat_struct_var3",
                    "2": "stat_ptr2",
                    "3": "stat_pointer2",
                    "5": "stat_ptr35"
                },
                "puVar16": {
                    "1": "strings"
                },
                "puVar18": {
                    "1": "ptr_void_var18",
                    "2": "undefined_pointer1",
                    "4": "undefined_ptr18"
                },
                "puVar2": {
                    "1": "ptr_uint_2",
                    "2": "ptr_u_int1",
                    "3": "ptr_uint2",
                    "4": "uint_pointer",
                    "5": "uint_ptr2"
                },
                "puVar24": {
                    "1": "output_string"
                },
                "puVar33": {
                    "1": "undefined_pointer3"
                },
                "pvVar9": {
                    "1": "ptr_value",
                    "2": "ptr_void9",
                    "4": "void_pointer",
                    "5": "void_ptr9"
                },
                "sVar17": {
                    "1": "size",
                    "2": "size_var"
                },
                "sVar21": {
                    "1": "stat1"
                },
                "s_00": {
                    "1": "stat2"
                },
                "setlocale": {
                    "1": "setlocale"
                },
                "size_t local_120": {
                    "1": "local_var3"
                },
                "size_t sVar17": {
                    "1": "size"
                },
                "stat *__s_00": {
                    "1": "stat_ptr1"
                },
                "stat *psVar21": {
                    "1": "stat_ptr"
                },
                "stat *psVar35": {
                    "1": "stat_ptr2"
                },
                "stat local_c8": {
                    "1": "local_var6"
                },
                "strchr": {
                    "1": "strchr"
                },
                "strcmp": {
                    "1": "strcmp"
                },
                "strdup": {
                    "1": "strdup"
                },
                "strerror": {
                    "1": "strerror"
                },
                "strlen": {
                    "1": "strlen"
                },
                "strncmp": {
                    "1": "strncmp"
                },
                "strtoul": {
                    "1": "strtoul"
                },
                "uVar13": {
                    "1": "uint_var_1",
                    "11": "uint_var13",
                    "6": "uint_var",
                    "7": "uint_var1"
                },
                "uVar15": {
                    "1": "uint_var",
                    "10": "uint_var15",
                    "11": "uint_var2"
                },
                "uVar22": {
                    "1": "temp_undef2",
                    "2": "ulong_var",
                    "3": "undefined8_var",
                    "4": "undefined8_var22",
                    "5": "uint_var22"
                },
                "uVar25": {
                    "1": "ulong_var_25",
                    "3": "ulong_var",
                    "6": "ulong_var25"
                },
                "uVar37": {
                    "1": "uint_var4",
                    "6": "uint_var3",
                    "7": "uint_var37"
                },
                "uVar4": {
                    "1": "ushort_var_4",
                    "11": "ushort_var4",
                    "6": "ushort_var1",
                    "7": "ushort_var"
                },
                "uint *puVar2": {
                    "1": "uint_ptr"
                },
                "uint param_1": {
                    "1": "file_status"
                },
                "uint uVar13": {
                    "1": "uint_var1"
                },
                "uint uVar37": {
                    "1": "uint_var2"
                },
                "ulong uVar25": {
                    "1": "ulong_var"
                },
                "unaff_R12": {
                    "1": "undefined_double_pointer3",
                    "2": "undefined_pointer2"
                },
                "unaff_RBP": {
                    "1": "char_pointer_var",
                    "2": "char_ptr2",
                    "3": "char_pointer",
                    "4": "char_ptr_unaff_rbp"
                },
                "undefined **local_140": {
                    "1": "local_var2"
                },
                "undefined **local_148": {
                    "1": "local_var1"
                },
                "undefined **ppuVar16": {
                    "1": "undefined_ptr"
                },
                "undefined **ppuVar24": {
                    "1": "undefined_ptr1"
                },
                "undefined **ppuVar33": {
                    "1": "undefined_ptr2"
                },
                "undefined **unaff_R12": {
                    "1": "undefined_ptr3"
                },
                "undefined *puVar18": {
                    "1": "undefined_var"
                },
                "undefined4 uVar15": {
                    "1": "undefined4_var"
                },
                "undefined8 uVar22": {
                    "1": "undefined8_var"
                },
                "ushort uVar4": {
                    "1": "ushort_var"
                },
                "void *pvVar9": {
                    "1": "void_ptr"
                },
                "xexit": {
                    "1": "xexit"
                },
                "xmalloc_set_program_name": {
                    "1": "xmalloc_set_program_name"
                }
            },
            "called": [
                "setlocale",
                "printf",
                "strcmp",
                "bfd_get_section_by_name",
                "bfd_fprintf_vma",
                "stat",
                "cplus_demangle_set_style",
                "bfd_demangle",
                "cplus_demangle_name_to_style",
                "exit",
                "bfd_openr",
                "FUN_00103bd0",
                "bfd_check_format_matches",
                "strchr",
                "ftell",
                "fputc",
                "getopt_long",
                "bindtextdomain",
                "bfd_errmsg",
                "ferror",
                "xmalloc_set_program_name",
                "FUN_00103c70",
                "strerror",
                "FUN_00102540",
                "bfd_set_error_program_name",
                "bfd_scan_vma",
                "fseek",
                "strrchr",
                "FUN_00102620",
                "putchar",
                "bfd_init",
                "fflush",
                "xstrdup",
                "xexit",
                "bfd_map_over_sections",
                "memcpy",
                "fprintf",
                "fread",
                "puts",
                "xmalloc",
                "bfd_close",
                "fopen",
                "xrealloc",
                "__errno_location",
                "textdomain",
                "bfd_get_error",
                "memmove",
                "strtoul",
                "free",
                "dcgettext",
                "fgets",
                "bfd_set_default_target",
                "fclose",
                "strlen",
                "FUN_001023e1",
                "bfd_check_format"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined8 process_file_001027b0(uint argc,FILE *argv)\n\n{\n  byte *byte_ptr1;\n  uint *uint_ptr2;\n  byte byte_var3;\n  ushort ushort_var4;\n  long long_var5;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  void *void_ptr9;\n  byte byte_var10;\n  char char_var11;\n  int int_var12;\n  uint uint_var13;\n  int int_var2;\n  undefined4 uint_var2;\n  FILE *file_stream;\n  byte *byte_ptr_s;\n  undefined **undefined_ptr_ptr16;\n  size_t size_var;\n  byte *byte_ptr;\n  undefined *undefined_ptr18;\n  FILE *file_pointer;\n  long long_var20;\n  stat *stat_ptr21;\n  undefined8 uint_var22;\n  int *int_ptr23;\n  undefined **undefined_ptr_ptr24;\n  stat *stat_pointer2;\n  ulong ulong_var25;\n  long *long_ptr26;\n  FILE *file_ptr3;\n  char *char_ptr28;\n  byte *byte_ptr29;\n  char *char_ptr_unaff_rbp;\n  long long_var30;\n  byte *byte_ptr31;\n  char *char_ptr32;\n  undefined **undefined_ptr_ptr33;\n  int int_var34;\n  undefined **undefined_pointer2;\n  stat *stat_ptr35;\n  int int_var36;\n  uint uint_var37;\n  undefined **undefined_pointer3;\n  undefined **undefined_pointer4;\n  size_t size_var2;\n  long long_var4;\n  long *long_ptr_local_d0;\n  stat stat_var1;\n  \n  file_ptr3 = (FILE *)(ulong)argc;\n  setlocale(5,\"\");\n  char_ptr28 = \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00106438 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00106438);\n  file_pointer = argv;\n  file_stream = argv;\n  if (1 < (int)argc) {\n    int_var2 = 2000;\n    undefined_pointer2 = (undefined **)0x1;\n    undefined_pointer4 = (undefined **)0x0;\n    do {\n      int_var34 = (int)undefined_pointer2;\n      char_ptr_unaff_rbp = (char *)(long)int_var34;\n      undefined_pointer3 = (undefined **)((long)char_ptr_unaff_rbp * 8);\n      int_var36 = (int)file_ptr3;\n      if (**(char **)(&file_pointer->_flags + (long)char_ptr_unaff_rbp * 2) == '@') {\n        int_var2 = int_var2 + -1;\n        if (int_var2 == 0) {\n          long_ptr26 = *(long **)file_pointer;\n          char_ptr28 = \"%s: error: too many @-files encountered\\n\";\n          goto LAB_00103239;\n        }\n        char_ptr28 = *(char **)(&file_pointer->_flags + (long)char_ptr_unaff_rbp * 2) + 1;\n        int_var12 = stat(char_ptr28,&stat_var1);\n        if (int_var12 < 0) goto LAB_00102c30;\n        if ((stat_var1.st_mode & 0xf000) == 0x4000) {\n          do {\n            long_ptr26 = *(long **)file_pointer;\n            char_ptr28 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00103239:\n            fprintf(stderr_pointer,char_ptr28,long_ptr26);\n            xexit(1);\n          } while( true );\n        }\n        file_stream = fopen(char_ptr28,\"r\");\n        if (file_stream == (FILE *)0x0) goto LAB_00102c30;\n        int_var12 = fseek(file_stream,0,2);\n        if (((int_var12 == -1) ||\n            (char_ptr28 = (char *)ftell(file_stream),\n            (undefined **)char_ptr28 == (undefined **)0xffffffffffffffff)) ||\n           (int_var12 = fseek(file_stream,0,0), int_var12 == -1)) {\nLAB_00102c90:\n          fclose(file_stream);\n          if (int_var34 + 1 < int_var36) goto LAB_00102c3a;\n          break;\n        }\n        byte_ptr_s = (byte *)xmalloc((long)char_ptr28 + 1);\n        undefined_ptr_ptr16 = (undefined **)fread(byte_ptr_s,1,(size_t)char_ptr28,file_stream);\n        if (((undefined **)char_ptr28 != undefined_ptr_ptr16) && (int_var12 = ferror(file_stream), int_var12 != 0)) {\n          free(byte_ptr_s);\n          goto LAB_00102c90;\n        }\n        byte_ptr_s[(long)undefined_ptr_ptr16] = 0;\n        byte_var10 = *byte_ptr_s;\n        byte_ptr29 = byte_ptr_s;\n        if (byte_var10 != 0) {\nLAB_00102980:\n          if (((&_sch_istable)[(ulong)byte_var10 * 2] & 0x40) != 0) goto LAB_00102970;\n          size_var = strlen((char *)byte_ptr_s);\n          byte_ptr = (byte *)xmalloc(size_var + 1);\n          undefined_ptr_ptr16 = (undefined **)0x0;\n          int_var12 = 0;\n          bool_var1 = false;\n          bool_var2 = false;\n          bool_var3 = false;\n          long_var4 = 0;\n          byte_ptr29 = byte_ptr_s;\n          do {\n            while (((&_sch_istable)[(ulong)*byte_ptr29 * 2] & 0x40) != 0) {\n              byte_ptr29 = byte_ptr29 + 1;\n            }\n            if ((int_var12 == 0) || (undefined_ptr_ptr24 = undefined_ptr_ptr16 + long_var4, int_var12 + -1 <= (int)long_var4)) {\n              if (undefined_ptr_ptr16 == (undefined **)0x0) {\n                undefined_ptr_ptr16 = (undefined **)xmalloc(0x40);\n                int_var12 = 8;\n                undefined_ptr_ptr24 = undefined_ptr_ptr16 + long_var4;\n                *undefined_ptr_ptr24 = (undefined *)0x0;\n              }\n              else {\n                int_var12 = int_var12 * 2;\n                undefined_ptr_ptr16 = (undefined **)xrealloc(undefined_ptr_ptr16,(long)int_var12 << 3);\n                undefined_ptr_ptr24 = undefined_ptr_ptr16 + long_var4;\n                *undefined_ptr_ptr24 = (undefined *)0x0;\n              }\n            }\n            byte_var10 = *byte_ptr29;\n            byte_ptr31 = byte_ptr;\n            while (byte_var10 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byte_var10 * 2] & 0x40) != 0) &&\n                   (!(bool)(bool_var3 | bool_var2 | bool_var1))) {\n                  bool_var3 = false;\n                  bool_var1 = false;\n                  bool_var2 = false;\n                  goto LAB_00102a9e;\n                }\n                if (!bool_var3) break;\n                byte_ptr29 = byte_ptr29 + 1;\n                *byte_ptr31 = byte_var10;\n                byte_ptr31 = byte_ptr31 + 1;\n                bool_var3 = false;\n                byte_var10 = *byte_ptr29;\n                if (byte_var10 == 0) goto LAB_00102a9e;\n              }\n              if (byte_var10 == 0x5c) {\n                bool_var3 = true;\n              }\n              else if (bool_var2) {\n                if (byte_var10 == 0x27) {\n                  bool_var2 = false;\n                }\n                else {\nLAB_00102c0d:\n                  *byte_ptr31 = byte_var10;\n                  byte_ptr31 = byte_ptr31 + 1;\n                }\n              }\n              else if (bool_var1) {\n                if (byte_var10 != 0x22) goto LAB_00102c0d;\n                bool_var1 = false;\n              }\n              else if (byte_var10 == 0x27) {\n                bool_var2 = true;\n              }\n              else {\n                if (byte_var10 != 0x22) goto LAB_00102c0d;\n                bool_var1 = true;\n              }\n              byte_ptr1 = byte_ptr29 + 1;\n              byte_ptr29 = byte_ptr29 + 1;\n              byte_var10 = *byte_ptr1;\n            }\nLAB_00102a9e:\n            *byte_ptr31 = 0;\n            undefined_ptr18 = (undefined *)xstrdup(byte_ptr);\n            *undefined_ptr_ptr24 = undefined_ptr18;\n            undefined_ptr_ptr16[long_var4 + 1] = (undefined *)0x0;\n            byte_var10 = *byte_ptr29;\n            byte_var3 = (&_sch_istable)[(ulong)byte_var10 * 2];\n            while ((byte_var3 & 0x40) != 0) {\n              byte_var10 = byte_ptr29[1];\n              byte_ptr29 = byte_ptr29 + 1;\n              byte_var3 = (&_sch_istable)[(ulong)byte_var10 * 2];\n            }\n            long_var4 = long_var4 + 1;\n          } while (byte_var10 != 0);\n          free(byte_ptr);\n          file_ptr3 = file_pointer;\n          if (argv == file_pointer) goto LAB_001030d9;\n          goto LAB_00102b38;\n        }\nLAB_001030bb:\n        undefined_ptr_ptr16 = (undefined **)xmalloc(8);\n        *undefined_ptr_ptr16 = (undefined *)0x0;\n        if (argv == file_pointer) {\nLAB_001030d9:\n          if (*(long **)file_pointer == (long *)0x0) {\n            int_var12 = 0;\n          }\n          else {\n            long_var20 = 1;\n            do {\n              int_var12 = (int)long_var20;\n              long_var30 = long_var20 * 2;\n              long_var20 = long_var20 + 1;\n            } while (*(long *)(&file_pointer->_flags + long_var30) != 0);\n          }\n          file_ptr3 = (FILE *)xmalloc((long)(int_var12 + 1) << 3);\n          long_ptr26 = *(long **)file_pointer;\n          long_var20 = 0;\n          while (long_ptr26 != (long *)0x0) {\n            uint_var22 = xstrdup();\n            *(undefined8 *)((long)&file_ptr3->_flags + long_var20) = uint_var22;\n            long_ptr26 = *(long **)(file_pointer->_shortbuf + long_var20 + -0x7b);\n            long_var20 = long_var20 + 8;\n          }\n          *(undefined8 *)((long)&file_ptr3->_flags + long_var20) = 0;\nLAB_00102b38:\n          file_pointer = file_ptr3;\n          if (*undefined_ptr_ptr16 == (undefined *)0x0) goto LAB_0010318e;\n          char_ptr28 = (char *)0x0;\n          do {\n            char_ptr28 = (char *)((long)char_ptr28 + 1);\n          } while (undefined_ptr_ptr16[(long)char_ptr28] != (undefined *)0x0);\n          size_var2 = (long)char_ptr28 * 8;\n        }\n        else {\nLAB_0010318e:\n          char_ptr28 = (char *)0x0;\n          size_var2 = 0;\n        }\n        free(*(void **)(&file_pointer->_flags + (long)char_ptr_unaff_rbp * 2));\n        file_pointer = (FILE *)xrealloc(file_pointer,((long)char_ptr28 + (long)int_var36 + 1) * 8);\n        uint_var37 = int_var36 + -1 + (int)char_ptr28;\n        file_ptr3 = (FILE *)(ulong)uint_var37;\n        memmove(&file_pointer->_flags + (long)(FILE **)((long)char_ptr_unaff_rbp + (long)char_ptr28) * 2,\n                &file_pointer->_IO_read_ptr + (long)char_ptr_unaff_rbp,(long)(int_var36 - int_var34) << 3);\n        memcpy(&file_pointer->_flags + (long)char_ptr_unaff_rbp * 2,undefined_ptr_ptr16,size_var2);\n        free(undefined_ptr_ptr16);\n        free(byte_ptr_s);\n        fclose(file_stream);\n        uint_var13 = (int)undefined_pointer4 + 1;\n        char_ptr_unaff_rbp = (char *)(FILE **)((long)char_ptr_unaff_rbp + (long)char_ptr28);\n        undefined_pointer2 = undefined_pointer3;\n        undefined_pointer3 = undefined_ptr_ptr16;\n        if ((int)uint_var37 <= (int)uint_var13) break;\n      }\n      else {\nLAB_00102c30:\n        if (int_var36 <= int_var34 + 1) break;\nLAB_00102c3a:\n        uint_var13 = int_var34 + 1;\n        undefined_pointer4 = undefined_pointer2;\n      }\n      undefined_pointer2 = (undefined **)(ulong)uint_var13;\n    } while( true );\n  }\n  int_var2 = bfd_init();\n  if (int_var2 != 0x118) {\n    uint_var22 = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    print_error_and_exit(uint_var22);\n    goto switchD_00102d16_caseD_43;\n  }\n  char_ptr28 = \"x86_64-pc-linux-gnu\";\n  char_var11 = bfd_set_default_target();\n  if (char_var11 == '\\0') {\n    uint_var2 = bfd_get_error();\n    char_ptr_unaff_rbp = (char *)bfd_errmsg(uint_var2);\n    uint_var22 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    print_error_and_exit(uint_var22,\"x86_64-pc-linux-gnu\",char_ptr_unaff_rbp);\n    goto switchD_00102d16_caseD_61;\n  }\n  undefined_pointer2 = &PTR_s_addressestat21061e0;\n  undefined_pointer4 = (undefined **)0x0;\n  char_ptr_unaff_rbp = \"ab:Ce:rRsfHhij:pVv\";\n  undefined_pointer3 = (undefined **)0x0;\n  char_ptr28 = (char *)(undefined **)0x0;\nswitchD_00102d16_caseD_0:\n  do {\n    uint_var2 = getopt_long(file_ptr3,file_pointer,char_ptr_unaff_rbp,undefined_pointer2,0);\n    switch(uint_var2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x41:\n    case 0x42:\n    case 0x44:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x50:\n    case 0x51:\n    case 0x53:\n    case 0x54:\n    case 0x55:\n    case 0x57:\n    case 0x58:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 99:\n    case 100:\n    case 0x67:\n    case 0x6b:\n    case 0x6c:\n    case 0x6d:\n    case 0x6e:\n    case 0x6f:\n    case 0x71:\n    case 0x74:\n    case 0x75:\n      print_usage(stderr_pointer,1);\n    case 0x6a:\n      undefined_pointer3 = _optarg;\n      break;\n    case 0x43:\nswitchD_00102d16_caseD_43:\n      file_stream = (FILE *)&optarg;\n      DAT_00106434 = '\\x01';\n      if (_optarg != (undefined **)0x0) {\n        int_var2 = cplus_demangle_name_to_style();\n        if (int_var2 == 0) goto LAB_0010339f;\n        cplus_demangle_set_style();\n      }\n      break;\n    case 0x48:\n    case 0x68:\n      print_usage(stdout_pointer,0);\nLAB_0010339f:\n      char_ptr28 = *(char **)file_stream;\n      char_ptr32 = \"unknown demangling style `%s\\'\";\nLAB_001033ae:\n      uint_var22 = dcgettext(0,char_ptr32,5);\n      print_error_and_exit(uint_var22,char_ptr28);\nswitchD_00102d16_caseD_72:\n      DAT_001061d0 = DAT_001061d0 | 0x40000;\n      break;\n    case 0x52:\n      DAT_001061d0 = DAT_001061d0 & 0xfffbffff;\n      break;\n    case 0x56:\n    case 0x76:\n      printf(\"GNU %s %s\\n\",\"addr2line\",\"(GNU Binutils for Debian) 2.40\");\n      char_ptr28 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(char_ptr28);\n      char_ptr28 = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(char_ptr28);\n                    \n      exit(0);\n    case 0x61:\nswitchD_00102d16_caseD_61:\n      DAT_00106435 = '\\x01';\n      break;\n    case 0x62:\n      undefined_pointer4 = _optarg;\n      break;\n    case 0x65:\n      char_ptr28 = (char *)_optarg;\n      break;\n    case 0x66:\n      DAT_00106432 = '\\x01';\n      break;\n    case 0x69:\n      DAT_00106430 = '\\x01';\n      break;\n    case 0x70:\n      DAT_00106431 = '\\x01';\n      break;\n    case 0x72:\n      goto switchD_00102d16_caseD_72;\n    case 0x73:\n      goto switchD_00102d16_caseD_73;\n    default:\n      DAT_00106428 = (char **)(&file_pointer->_flags + (long)_optind * 2);\n      DAT_00106420 = (int)file_ptr3 - _optind;\n      if ((undefined **)char_ptr28 == (undefined **)0x0) {\n        char_ptr28 = \"a.out\";\n      }\n      int_var2 = stat(char_ptr28,&stat_var1);\n      if (int_var2 < 0) {\n        int_ptr23 = __errno_location();\n        char_ptr32 = \"\\'%s\\': No such file\";\n        if (*int_ptr23 != 2) {\n          char_ptr32 = strerror(*int_ptr23);\n          uint_var22 = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n          print_error_message(uint_var22,char_ptr28,char_ptr32);\n          return 1;\n        }\nLAB_001039cd:\n        uint_var22 = dcgettext(0,char_ptr32,5);\n        print_error_message(uint_var22,char_ptr28);\n        return 1;\n      }\n      if ((stat_var1.st_mode & 0xf000) == 0x4000) {\n        char_ptr32 = \"Warning: \\'%s\\' is a directory\";\n        goto LAB_001039cd;\n      }\n      char_ptr32 = \"Warning: \\'%s\\' is not an ordinary file\";\n      if ((stat_var1.st_mode & 0xf000) != 0x8000) goto LAB_001039cd;\n      char_ptr32 = \"Warning: \\'%s\\' has negative size, probably it is too large\";\n      if (stat_var1.st_size < 0) goto LAB_001039cd;\n      if (stat_var1.st_size == 0) {\n        return 1;\n      }\n      file_pointer = (FILE *)bfd_openr(char_ptr28,undefined_pointer4);\n      if (file_pointer == (FILE *)0x0) {\n        print_error_message_00103c70(char_ptr28);\n        xexit(1);\n        goto LAB_00103a85;\n      }\n      uint_ptr2 = (uint *)((long)&file_pointer->_IO_buf_end + 4);\n      *uint_ptr2 = *uint_ptr2 | 0x8000;\n      char_var11 = bfd_check_format(file_pointer,2);\n      if (char_var11 != '\\0') {\n        char_ptr32 = \"%s: cannot get addresses from archive\";\n        goto LAB_001033ae;\n      }\n      char_var11 = bfd_check_format_matches(file_pointer,1,&long_ptr_local_d0);\n      if (char_var11 == '\\0') {\n        print_error_message_00103c70(*(long **)file_pointer);\n        int_var2 = bfd_get_error();\n        if (int_var2 == 0xd) {\n          file_pointer = (FILE *)0x1040e1;\n          fflush(stdout_pointer);\n          long_ptr26 = DAT_00106438;\n          char_ptr28 = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n          fprintf(stderr_pointer,char_ptr28,long_ptr26);\n          for (long_ptr26 = long_ptr_local_d0; *long_ptr26 != 0; long_ptr26 = long_ptr26 + 1) {\n            fprintf(stderr_pointer,\" %s\");\n          }\n          free(long_ptr_local_d0);\n          fputc(10,stderr_pointer);\n        }\n        goto LAB_00103801;\n      }\n      undefined_ptr_ptr16 = undefined_pointer3;\n      if ((undefined_pointer3 != (undefined **)0x0) &&\n         (undefined_ptr_ptr16 = (undefined **)bfd_get_section_by_name(file_pointer), undefined_ptr_ptr16 == (undefined **)0x0))\n      {\n        uint_var22 = dcgettext(0,\"%s: cannot find section %s\",5);\n        print_error_and_exit(uint_var22,char_ptr28,undefined_pointer3);\n        goto LAB_0010399c;\n      }\n      undefined_pointer3 = undefined_ptr_ptr16;\n      if ((*(byte *)((long)&file_pointer->_IO_buf_end + 4) & 0x10) == 0) goto LAB_00102ecd;\n      long_var20 = (**(code **)(file_pointer->_IO_read_ptr + 0x1f8))(file_pointer);\n      if (long_var20 == 0) {\n        long_var20 = (**(code **)(file_pointer->_IO_read_ptr + 0x350))(file_pointer);\n        if (-1 < long_var20) {\n          DAT_00106418 = (void *)xmalloc(long_var20);\n          DAT_001063e8 = (**(code **)(file_pointer->_IO_read_ptr + 0x358))(file_pointer);\n          if (-1 < DAT_001063e8) goto LAB_00102ebf;\n        }\n      }\n      else if (-1 < long_var20) {\n        DAT_00106418 = (void *)xmalloc(long_var20);\n        DAT_001063e8 = (**(code **)(file_pointer->_IO_read_ptr + 0x200))(file_pointer);\n        if (-1 < DAT_001063e8) {\n          if (DAT_001063e8 == 0) goto LAB_0010380b;\n          goto LAB_00102ebf;\n        }\n      }\n      print_error_message_00103c70(*(long **)file_pointer);\nLAB_00103801:\n      xexit(1);\nLAB_0010380b:\n      long_var20 = (**(code **)(file_pointer->_IO_read_ptr + 0x350))(file_pointer);\n      if (0 < long_var20) {\n        free(DAT_00106418);\n        DAT_00106418 = (void *)xmalloc(long_var20);\n        DAT_001063e8 = (**(code **)(file_pointer->_IO_read_ptr + 0x358))(file_pointer);\n      }\nLAB_00102ebf:\n      if (DAT_001063e8 < 1) {\n        free(DAT_00106418);\n        DAT_00106418 = (void *)0x0;\n      }\nLAB_00102ecd:\n      undefined_pointer2 = (undefined **)(ulong)DAT_00106420;\n      file_stream = (FILE *)&DAT_0010400a;\n      if (DAT_00106420 == 0) goto LAB_00103065;\nLAB_00102ee7:\n      if ((int)DAT_00106420 < 1) {\nLAB_0010308a:\n        free(DAT_00106418);\n        DAT_00106418 = (void *)0x0;\n        bfd_close(file_pointer);\n        return 0;\n      }\n      DAT_00106420 = DAT_00106420 - 1;\n      stat_ptr21 = (stat *)*DAT_00106428;\n      DAT_00106428 = DAT_00106428 + 1;\n      do {\n        byte_var10 = *(byte *)&stat_ptr21->st_dev;\n        ulong_var25 = (ulong)byte_var10;\n        ushort_var4 = *(ushort *)(&_sch_istable + ulong_var25 * 2);\n        stat_pointer2 = stat_ptr21;\n        while ((ushort_var4 & 0x40) != 0) {\n          byte_var10 = *(byte *)((long)&stat_pointer2->st_dev + 1);\n          ulong_var25 = (ulong)byte_var10;\n          stat_pointer2 = (stat *)((long)&stat_pointer2->st_dev + 1);\n          ushort_var4 = *(ushort *)(&_sch_istable + ulong_var25 * 2);\n        }\n        if ((((ushort_var4 & 4) == 0) && (byte_var10 != 0)) &&\n           ((stat_ptr35 = stat_pointer2, 5 < (byte)((&_sch_toupper)[ulong_var25] + 0xbf) ||\n            (char_ptr28 = strchr((char *)stat_pointer2,0x2b), char_ptr28 != (char *)0x0)))) {\n          while( true ) {\n            byte_var10 = *(byte *)&stat_ptr35->st_dev;\n            stat_ptr21 = stat_ptr35;\n            if (((byte_var10 == 0) || ((*(ushort *)(&_sch_istable + (ulong)byte_var10 * 2) & 0x40) != 0)) ||\n               (byte_var10 == 0x2b)) break;\n            stat_ptr35 = (stat *)((long)&stat_ptr35->st_dev + 1);\n          }\n          while (((&_sch_istable)[(ulong)*(byte *)&stat_ptr21->st_dev * 2] & 0x40) != 0) {\n            stat_ptr21 = (stat *)((long)&stat_ptr21->st_dev + 1);\n          }\n          ulong_var25 = 0;\n          if (*(byte *)&stat_ptr21->st_dev == 0x2b) {\n            ulong_var25 = strtoul((char *)((long)&stat_ptr21->st_dev + 1),(char **)0x0,0);\n          }\n          void_ptr9 = DAT_00106418;\n          long_var20 = DAT_001063e8;\n          *(undefined *)&stat_ptr35->st_dev = 0;\n          for (long_var30 = 0; long_var30 < long_var20; long_var30 = long_var30 + 1) {\n            long_var5 = *(long *)((long)void_ptr9 + long_var30 * 8);\n            int_var2 = strcmp(*(char **)(long_var5 + 8),(char *)stat_pointer2);\n            if (int_var2 == 0) {\n              undefined_pointer2 = (undefined **)((ulong)undefined_pointer2 & 0xffffffff);\n              DAT_00106410 = (undefined *)\n                             (ulong_var25 + *(long *)(long_var5 + 0x10) +\n                             *(long *)(*(long *)(long_var5 + 0x20) + 0x30));\n              goto LAB_00102f4b;\n            }\n          }\n          undefined_pointer2 = (undefined **)((ulong)undefined_pointer2 & 0xffffffff);\n          for (long_var20 = 0; long_var20 < DAT_001063e8; long_var20 = long_var20 + 1) {\n            char_ptr28 = (char *)bfd_demangle(file_pointer,*(undefined8 *)\n                                                    (*(long *)((long)DAT_00106418 + long_var20 * 8) + 8)\n                                           ,DAT_001061d0);\n            if ((char_ptr28 != (char *)0x0) && (int_var2 = strcmp(char_ptr28,(char *)stat_pointer2), int_var2 == 0))\n            {\n              free(char_ptr28);\n              long_var20 = *(long *)((long)DAT_00106418 + long_var20 * 8);\n              DAT_00106410 = (undefined *)\n                             (*(long *)(long_var20 + 0x10) + ulong_var25 +\n                             *(long *)(*(long *)(long_var20 + 0x20) + 0x30));\n              goto LAB_00102f4b;\n            }\n            free(char_ptr28);\n          }\n          DAT_00106410 = (undefined *)0x0;\n        }\n        else {\n          DAT_00106410 = (undefined *)bfd_scan_vma(stat_ptr21,0,0x10);\n        }\nLAB_00102f4b:\n        if (*(int *)(file_pointer->_IO_read_ptr + 8) == 5) {\n          long_var20 = *(long *)(file_pointer->_IO_read_ptr + 0x380);\n          ulong_var25 = 1L << (*(char *)(*(long *)(long_var20 + 0x340) + 10) - 1U & 0x3f);\n          DAT_00106410 = (undefined *)((ulong)DAT_00106410 & ulong_var25 * 2 - 1);\n          if ((*(byte *)(long_var20 + 0x3f1) & 1) != 0) {\n            DAT_00106410 = (undefined *)(((ulong)DAT_00106410 ^ ulong_var25) - ulong_var25);\n          }\n        }\n        if (DAT_00106435 != '\\0') {\n          printf(\"0x\");\n          bfd_fprintf_vma(file_pointer,stdout_pointer,DAT_00106410);\n          if (DAT_00106431 == '\\0') {\n            putchar(10);\n          }\n          else {\n            printf(\": \");\n          }\n        }\n        char_ptr_unaff_rbp = &stdout;\n        DAT_00106408 = '\\0';\n        if (undefined_pointer3 == (undefined **)0x0) {\n          bfd_map_over_sections(file_pointer,process_data_00102540,0);\nLAB_00102fcf:\n          if (DAT_00106408 != '\\0') {\n            do {\n              if (DAT_00106432 != '\\0') {\n                undefined_ptr_ptr16 = DAT_00106400;\n                if (DAT_00106400 == (undefined **)0x0) {\nLAB_00103a4a:\n                  undefined_ptr_ptr24 = (undefined **)&DAT_0010400a;\n                }\n                else {\n                  if (*(char *)DAT_00106400 == '\\0') {\n                    undefined_ptr_ptr16 = (undefined **)0x0;\n                    goto LAB_00103a4a;\n                  }\n                  char_ptr28 = (char *)DAT_00106400;\n                  file_ptr3 = file_pointer;\n                  if (DAT_00106434 == '\\0') {\nLAB_001031f4:\n                    undefined_ptr_ptr16 = (undefined **)0x0;\n                    undefined_ptr_ptr24 = (undefined **)char_ptr28;\n                    file_pointer = file_ptr3;\n                  }\n                  else {\nLAB_0010399c:\n                    undefined_ptr_ptr16 = (undefined **)bfd_demangle(file_ptr3,char_ptr28,DAT_001061d0);\n                    undefined_ptr_ptr24 = undefined_ptr_ptr16;\n                    file_pointer = file_ptr3;\n                    if (undefined_ptr_ptr16 == (undefined **)0x0) goto LAB_001031f4;\n                  }\n                }\n                printf(\"%s\",undefined_ptr_ptr24);\n                if (DAT_00106431 == '\\0') {\n                  putchar(10);\n                }\n                else {\n                  char_ptr28 = (char *)dcgettext(0,&DAT_001040f1,5);\n                  printf(char_ptr28);\n                }\n                free(undefined_ptr_ptr16);\n              }\n              file_ptr3 = DAT_001063f8;\n              if (DAT_00106433 == '\\0') {\n                if (DAT_001063f8 == (FILE *)0x0) {\n                  file_ptr3 = file_stream;\n                }\n              }\n              else if (DAT_001063f8 == (FILE *)0x0) {\n                file_ptr3 = (FILE *)&DAT_0010400a;\n              }\n              else {\n                char_ptr28 = strrchr((char *)DAT_001063f8,0x2f);\n                if (char_ptr28 != (char *)0x0) {\n                  file_ptr3 = (FILE *)(char_ptr28 + 1);\n                  DAT_001063f8 = file_ptr3;\n                }\n              }\n              printf(\"%s:\",file_ptr3);\n              file_ptr3 = file_pointer;\n              if (DAT_001063f4 == 0) {\nLAB_00103a85:\n                puts(\"?\");\n                file_pointer = file_ptr3;\n              }\n              else if (DAT_001063f0 == 0) {\n                printf(\"%u\\n\");\n              }\n              else {\n                printf(\"%u (discriminator %u)\\n\");\n              }\n              if (DAT_00106430 == '\\0') {\nLAB_0010304c:\n                DAT_00106408 = '\\0';\n                goto LAB_00103053;\n              }\n              DAT_00106408 = (**(code **)(file_pointer->_IO_read_ptr + 600))\n                                       (file_pointer,&DAT_001063f8,&DAT_00106400,&DAT_001063f4);\n              undefined_ptr_ptr16 = DAT_00106400;\n              if (DAT_00106408 == '\\0') goto LAB_00103053;\n              while (DAT_00106400 = undefined_ptr_ptr16, DAT_00106431 == '\\0') {\n                if (DAT_00106432 != '\\0') {\n                  undefined_ptr_ptr24 = undefined_ptr_ptr16;\n                  if (undefined_ptr_ptr16 == (undefined **)0x0) {\nLAB_00103b7b:\n                    undefined_ptr_ptr33 = (undefined **)&DAT_0010400a;\n                  }\n                  else {\n                    if (*(char *)undefined_ptr_ptr16 == '\\0') {\n                      undefined_ptr_ptr24 = (undefined **)0x0;\n                      goto LAB_00103b7b;\n                    }\n                    if ((DAT_00106434 == '\\0') ||\n                       (undefined_ptr_ptr24 = (undefined **)bfd_demangle(file_pointer,undefined_ptr_ptr16,DAT_001061d0),\n                       undefined_ptr_ptr33 = undefined_ptr_ptr24, undefined_ptr_ptr24 == (undefined **)0x0)) {\n                      undefined_ptr_ptr24 = (undefined **)0x0;\n                      undefined_ptr_ptr33 = undefined_ptr_ptr16;\n                    }\n                  }\n                  printf(\"%s\",undefined_ptr_ptr33);\n                  if (DAT_00106431 == '\\0') {\n                    putchar(10);\n                  }\n                  else {\n                    char_ptr28 = (char *)dcgettext(0,&DAT_001040f1,5);\n                    printf(char_ptr28);\n                  }\n                  free(undefined_ptr_ptr24);\n                }\n                file_ptr3 = DAT_001063f8;\n                if (DAT_00106433 == '\\0') {\n                  if (DAT_001063f8 == (FILE *)0x0) {\n                    file_ptr3 = (FILE *)&DAT_0010400a;\n                  }\n                }\n                else if (DAT_001063f8 == (FILE *)0x0) {\n                  file_ptr3 = (FILE *)&DAT_0010400a;\n                }\n                else {\n                  char_ptr28 = strrchr((char *)DAT_001063f8,0x2f);\n                  if (char_ptr28 != (char *)0x0) {\n                    file_ptr3 = (FILE *)(char_ptr28 + 1);\n                    DAT_001063f8 = file_ptr3;\n                  }\n                }\n                printf(\"%s:\",file_ptr3);\n                if (DAT_001063f4 == 0) {\n                  puts(\"?\");\n                }\n                else if (DAT_001063f0 == 0) {\n                  printf(\"%u\\n\");\n                }\n                else {\n                  printf(\"%u (discriminator %u)\\n\");\n                }\n                if (DAT_00106430 == '\\0') goto LAB_0010304c;\n                DAT_00106408 = (**(code **)(file_pointer->_IO_read_ptr + 600))\n                                         (file_pointer,&DAT_001063f8,&DAT_00106400,&DAT_001063f4);\n                undefined_ptr_ptr16 = DAT_00106400;\n                if (DAT_00106408 == '\\0') {\n                  DAT_00106408 = '\\0';\n                  goto LAB_00103053;\n                }\n              }\n              char_ptr28 = (char *)dcgettext(0,\" (inlined by) \",5);\n              printf(char_ptr28);\n            } while( true );\n          }\n        }\n        else if (((*(byte *)((long)undefined_pointer3 + 0x24) & 1) != 0) && (DAT_00106410 < undefined_pointer3[8])) {\n          DAT_00106408 = (**(code **)(file_pointer->_IO_read_ptr + 0x240))\n                                   (file_pointer,DAT_00106418,undefined_pointer3,DAT_00106410,&DAT_001063f8,\n                                    &DAT_00106400,&DAT_001063f4,&DAT_001063f0);\n          goto LAB_00102fcf;\n        }\n        if (DAT_00106432 != '\\0') {\n          if (DAT_00106431 == '\\0') {\n            puts(\"??\");\n          }\n          else {\n            printf(\"?? \");\n          }\n        }\n        puts(\"??:0\");\nLAB_00103053:\n        fflush(*(FILE **)char_ptr_unaff_rbp);\n        if ((int)undefined_pointer2 != 0) goto LAB_00102ee7;\nLAB_00103065:\n        char_ptr28 = fgets((char *)&stat_var1,100,_stdin);\n        stat_ptr21 = &stat_var1;\n        if (char_ptr28 == (char *)0x0) goto LAB_0010308a;\n      } while( true );\n    }\n  } while( true );\nLAB_00102970:\n  byte_var10 = byte_ptr29[1];\n  byte_ptr29 = byte_ptr29 + 1;\n  if (byte_var10 == 0) goto LAB_001030bb;\n  goto LAB_00102980;\nswitchD_00102d16_caseD_73:\n  DAT_00106433 = '\\x01';\n  goto switchD_00102d16_caseD_0;\n}\n\n",
            "current_name": "process_file_001027b0",
            "entrypoint": "0x001027b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001027b0": "process_file_001027b0",
                "__ptr": "byte_ptr",
                "__s": "byte_ptr_s",
                "__s_00": "stat_pointer2",
                "__stream": "file_stream",
                "_stderr": "stderr_pointer",
                "_stdout": "stdout_pointer",
                "bVar10": "byte_var10",
                "bVar3": "byte_var3",
                "bVar6": "bool_var1",
                "bVar7": "bool_var2",
                "bVar8": "bool_var3",
                "cVar11": "char_var11",
                "iVar12": "int_var12",
                "iVar14": "int_var2",
                "iVar34": "int_var34",
                "iVar36": "int_var36",
                "lVar20": "long_var20",
                "lVar30": "long_var30",
                "lVar5": "long_var5",
                "local_118": "long_var4",
                "local_120": "size_var2",
                "local_140": "undefined_pointer4",
                "local_148": "undefined_pointer3",
                "local_c8": "stat_var1",
                "local_d0": "long_ptr_local_d0",
                "pFVar19": "file_pointer",
                "pFVar27": "file_ptr3",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_ptr1",
                "pbVar29": "byte_ptr29",
                "pbVar31": "byte_ptr31",
                "pcVar28": "char_ptr28",
                "pcVar32": "char_ptr32",
                "piVar23": "int_ptr23",
                "plVar26": "long_ptr26",
                "ppuVar16": "undefined_ptr_ptr16",
                "ppuVar24": "undefined_ptr_ptr24",
                "ppuVar33": "undefined_ptr_ptr33",
                "print_error_and_exit_00103bd0": "print_error_and_exit",
                "print_error_message_00102620": "print_error_message",
                "print_usage_001023e1": "print_usage",
                "psVar21": "stat_ptr21",
                "psVar35": "stat_ptr35",
                "puVar16": "strings",
                "puVar18": "undefined_ptr18",
                "puVar2": "uint_ptr2",
                "puVar24": "output_string",
                "puVar33": "undefined_pointer3",
                "pvVar9": "void_ptr9",
                "sVar17": "size_var",
                "sVar21": "stat1",
                "s_00": "stat2",
                "uVar13": "uint_var13",
                "uVar15": "uint_var2",
                "uVar22": "uint_var22",
                "uVar25": "ulong_var25",
                "uVar37": "uint_var37",
                "uVar4": "ushort_var4",
                "unaff_R12": "undefined_pointer2",
                "unaff_RBP": "char_ptr_unaff_rbp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103bd0": {
            "additional_data": {
                "DAT_00106438": {
                    "1": "program_name"
                },
                "FUN_00103bd0": {
                    "1": "print_error_details",
                    "11": "print_error_message",
                    "16": "print_error_and_exit"
                },
                "_stderr": {
                    "1": "error_stream",
                    "2": "standard_error"
                },
                "_stdout": {
                    "1": "stdout",
                    "2": "standard_output"
                },
                "bfd_errmsg": {
                    "1": "bfd_error_message"
                },
                "bfd_get_error": {
                    "1": "get_error"
                },
                "dcgettext": {
                    "1": "retrieve_error_message"
                },
                "fflush": {
                    "1": "flush_output_stream"
                },
                "fprintf": {
                    "1": "print_formatted_error"
                },
                "iVar1": {
                    "1": "error_status",
                    "11": "bfd_error",
                    "2": "error_check",
                    "6": "bfd_error_code"
                },
                "in_AL": {
                    "1": "condition_check",
                    "13": "flag",
                    "2": "is_error",
                    "3": "input_flag",
                    "5": "condition"
                },
                "in_R10": {
                    "1": "unknown_error_message",
                    "2": "extra_info",
                    "3": "param_r10",
                    "5": "additional_info"
                },
                "lVar3": {
                    "1": "error_code_returned",
                    "2": "error_indicator",
                    "3": "error_flag",
                    "5": "exit_code"
                },
                "local_18": {
                    "1": "extra_args_copy",
                    "2": "param_8_copy",
                    "4": "local_18",
                    "5": "param_8"
                },
                "local_28": {
                    "1": "error_message_7",
                    "2": "local_param_7",
                    "4": "local_28",
                    "5": "param_7"
                },
                "local_38": {
                    "1": "error_code_6_copy",
                    "2": "local_param_6",
                    "4": "local_38",
                    "5": "param_6"
                },
                "local_48": {
                    "1": "error_message_5",
                    "2": "param_5_copy",
                    "4": "local_48",
                    "5": "param_5"
                },
                "local_58": {
                    "1": "error_code4_copy",
                    "2": "param4_copy",
                    "4": "local_58",
                    "5": "param_4"
                },
                "local_68": {
                    "1": "error_message_3",
                    "2": "error_message_3_copy",
                    "4": "local_68",
                    "5": "param_3"
                },
                "local_78": {
                    "1": "error_code2",
                    "2": "local_param_2",
                    "4": "local_78",
                    "5": "param_2"
                },
                "local_88": {
                    "1": "error_code_1",
                    "2": "local_param1",
                    "4": "local_88",
                    "5": "param_1"
                },
                "local_90": {
                    "1": "param14_value_copy",
                    "2": "local_90",
                    "3": "param14_copy",
                    "4": "local_param_14",
                    "7": "param_14"
                },
                "local_98": {
                    "1": "param13_value_copy",
                    "2": "local_98",
                    "3": "param13_copy",
                    "4": "local_param_13",
                    "7": "param_13"
                },
                "local_a0": {
                    "1": "param12_value_copy",
                    "2": "local_a0",
                    "3": "param12_copy",
                    "4": "local_param_12",
                    "7": "param_12"
                },
                "local_a8": {
                    "1": "param11_value_copy",
                    "2": "local_a8",
                    "3": "param11_copy",
                    "4": "local_param_11",
                    "7": "param_11"
                },
                "local_b0": {
                    "1": "param10_value_copy",
                    "2": "local_b0",
                    "3": "local_param10",
                    "4": "local_param_10",
                    "7": "param_10_copy"
                },
                "local_b8": {
                    "1": "error_line",
                    "2": "local_array",
                    "3": "local_variable",
                    "7": "local_buffer"
                },
                "local_c8": {
                    "1": "string_ptr",
                    "13": "local_buffer",
                    "2": "destination",
                    "3": "local_c8"
                },
                "local_d0": {
                    "1": "buffer_address",
                    "2": "buffer_pointer",
                    "5": "buffer_ptr",
                    "9": "buffer"
                },
                "local_d4": {
                    "1": "print_buffer_length",
                    "4": "local_d4"
                },
                "local_d8": {
                    "1": "error_message_length",
                    "16": "buffer_size",
                    "2": "length"
                },
                "param_1": {
                    "1": "error_type",
                    "14": "error_code",
                    "3": "error_code_1"
                },
                "param_10": {
                    "1": "file_name",
                    "20": "param_10",
                    "7": "param10"
                },
                "param_11": {
                    "1": "error_param_11",
                    "22": "param_11",
                    "7": "param11"
                },
                "param_12": {
                    "1": "error_param_12",
                    "22": "param_12",
                    "7": "param12"
                },
                "param_13": {
                    "1": "error_param_13",
                    "22": "param_13",
                    "7": "param13"
                },
                "param_14": {
                    "1": "error_param_14",
                    "22": "param_14",
                    "7": "param14"
                },
                "param_2": {
                    "1": "arg2",
                    "12": "param_2",
                    "3": "error_code2",
                    "4": "param2"
                },
                "param_3": {
                    "1": "arg3",
                    "12": "param_3",
                    "3": "error_message_3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "arg4",
                    "12": "param_4",
                    "3": "error_code_4",
                    "4": "param4"
                },
                "param_5": {
                    "1": "error_code",
                    "12": "param_5",
                    "3": "error_message_5",
                    "4": "param5"
                },
                "param_6": {
                    "1": "print_type",
                    "12": "param_6",
                    "3": "error_code_6",
                    "4": "param6"
                },
                "param_7": {
                    "1": "num_args",
                    "12": "param_7",
                    "3": "error_message_7",
                    "4": "param7"
                },
                "param_8": {
                    "1": "extra_args",
                    "12": "param_8",
                    "3": "error_param_8",
                    "4": "param8"
                },
                "param_9": {
                    "1": "file",
                    "11": "error_message",
                    "2": "file_handle",
                    "3": "param_9",
                    "5": "error_code"
                },
                "print_error_message_001025c0": {
                    "2": "print_error_message"
                },
                "uVar2": {
                    "1": "error_text",
                    "19": "error_message",
                    "2": "error_message_ptr"
                }
            },
            "called": [
                "FUN_001025c0",
                "xexit"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nvoid print_error_and_exit_00103bd0(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char flag;\n  int bfd_error;\n  undefined8 error_message;\n  long exit_code;\n  undefined8 additional_info;\n  undefined4 buffer_size;\n  undefined4 local_d4;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 param_1;\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 param_5;\n  undefined4 param_6;\n  undefined4 param_7;\n  undefined4 param_8;\n  \n  if (flag != '\\0') {\n    param_1 = error_code;\n    param_2 = param_2;\n    param_3 = param_3;\n    param_4 = param_4;\n    param_5 = param_5;\n    param_6 = param_6;\n    param_7 = param_7;\n    param_8 = param_8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_buffer;\n  local_d4 = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message(error_message,&buffer_size);\n  exit_code = 1;\n  xexit();\n  bfd_error = bfd_get_error();\n  if (bfd_error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(bfd_error);\n  }\n  fflush(standard_output);\n  if (exit_code != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_00106438,exit_code,error_message,additional_info);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_00106438,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_and_exit_00103bd0",
            "entrypoint": "0x00103bd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bd0": "print_error_and_exit_00103bd0",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bfd_errmsg": "bfd_error_message",
                "bfd_get_error": "get_error",
                "dcgettext": "retrieve_error_message",
                "fflush": "flush_standard_output",
                "fprintf": "print_to_standard_error",
                "iVar1": "bfd_error",
                "in_AL": "flag",
                "in_R10": "additional_info",
                "lVar3": "exit_code",
                "local_18": "param_8",
                "local_28": "param_7",
                "local_38": "param_6",
                "local_48": "param_5",
                "local_58": "param_4",
                "local_68": "param_3",
                "local_78": "param_2",
                "local_88": "param_1",
                "local_90": "param_14_copy",
                "local_98": "param_13_copy",
                "local_a0": "param_12_copy",
                "local_a8": "param_11_copy",
                "local_b0": "param_10_copy",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_9": "error_message",
                "print_error_message_001025c0": "print_error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103c70": {
            "additional_data": {
                "FUN_00103c70": {
                    "1": "print_bfd_error_message",
                    "25": "print_error_message",
                    "5": "print_error"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "iVar1": {
                    "15": "error",
                    "3": "bfd_error",
                    "6": "error_code",
                    "7": "error_status"
                },
                "in_R10": {
                    "1": "unknown_value",
                    "2": "unknown_cause",
                    "8": "additional_info"
                },
                "param_1": {
                    "1": "error_msg",
                    "2": "file_name",
                    "3": "error_cause",
                    "4": "error_type",
                    "7": "error_message"
                },
                "uVar2": {
                    "1": "error_text",
                    "23": "error_message",
                    "3": "error_message_text",
                    "4": "error_string"
                }
            },
            "called": [
                "bfd_errmsg",
                "FUN_001023a0",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nvoid print_error_message_00103c70(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_message != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_00106438,error_message,error_message,additional_info);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_00106438,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_00103c70",
            "entrypoint": "0x00103c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103c70": "print_error_message_00103c70",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "iVar1": "error",
                "in_R10": "additional_info",
                "param_1": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00103cd0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "__cxa_finalize",
                "FUN_001026f0"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001063e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_001061c8);\n  FUNC_001026f0();\n  DAT_001063e0 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00102760",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00102720"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00102720();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x001027a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00102390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00102350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "called": [
                "bfd_check_format_matches"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "bfd_check_format_matches",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_demangle": {
            "called": [
                "bfd_demangle"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "current_name": "bfd_demangle",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00103c70",
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fprintf_vma": {
            "called": [
                "bfd_fprintf_vma"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_fprintf_vma(void)\n\n{\n  bfd_fprintf_vma();\n  return;\n}\n\n",
            "current_name": "bfd_fprintf_vma",
            "entrypoint": "0x00102360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00103c70",
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_section_by_name": {
            "called": [
                "bfd_get_section_by_name"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "current_name": "bfd_get_section_by_name",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_map_over_sections": {
            "called": [
                "bfd_map_over_sections"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "bfd_map_over_sections",
            "entrypoint": "0x00102370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_scan_vma": {
            "called": [
                "bfd_scan_vma"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "current_name": "bfd_scan_vma",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_001023e1"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_name_to_style": {
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_name_to_style",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_set_style": {
            "called": [
                "cplus_demangle_set_style"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_set_style",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_001023a0",
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_001027b0",
                "__libc_start_main"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(process_file_001027b0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x001026c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x00102340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_001023a0",
                "FUN_001025c0",
                "FUN_001027b0"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fgets": {
            "called": [
                "fgets"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nchar * fgets(char *__s,int __n,FILE *__stream)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = fgets(__s,__n,__stream);\n  return pcVar1;\n}\n\n",
            "current_name": "fgets",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_001023a0",
                "FUN_001025c0",
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_001025c0"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putchar": {
            "called": [
                "putchar"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "current_name": "putchar",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "puts": {
            "called": [
                "puts"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nint puts(char *__s)\n\n{\n  int iVar1;\n  \n  iVar1 = puts(__s);\n  return iVar1;\n}\n\n",
            "current_name": "puts",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strchr": {
            "called": [
                "strchr"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strchr",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strrchr": {
            "called": [
                "strrchr"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strrchr",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_001025c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00103bd0",
                "FUN_001027b0"
            ],
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_001027b0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_001023a0",
            "FUN_001023e1",
            "FUN_00102540",
            "FUN_001025c0",
            "FUN_00103c70"
        ],
        [
            "FUN_00102620",
            "FUN_00103bd0"
        ],
        [
            "FUN_001027b0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 71721
}