{
    "functions": {
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_location_00102cd9",
                "in_EAX": "counter",
                "iVar1": "comparisonResult",
                "unaff_RBX": "locations",
                "param_7": "position",
                "posname": "desiredPosition"
            },
            "code": "\nlong * findMatchingLocation_00102cd9(void)\n\n{\n  int counter;\n  int comparisonResult;\n  long *locations;\n  undefined8 position;\n  \n  position = desiredPosition;\n  if (counter == 3) {\n    for (; *locations != 0; locations = (long *)(*locations + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*locations != (undefined8 *)0x0; locations = (long *)(*locations + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*locations,position);\n      if (comparisonResult == 0) {\n        if (counter != 2) {\n          return locations;\n        }\n        return (long *)(*locations + 0xf0);\n      }\n    }\n  }\n  return locations;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "get_pos_bfd"
            ],
            "imported": false,
            "current_name": "find_matching_location_00102cd9"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_details_001079c0",
                "param_1": "outputFile",
                "param_2": "fileData",
                "param_3": "includeDetails",
                "param_4": "includeHexDump",
                "iVar1": "result",
                "ppcVar2": "dataPtr",
                "pcVar3": "timeString",
                "uVar4": "fileType",
                "local_100": "currentTime",
                "uStack_f3": "filePermission",
                "cStack_f2": "ownerRead",
                "cStack_f1": "ownerWrite",
                "cStack_f0": "ownerExecute",
                "cStack_ef": "groupRead",
                "cStack_ee": "groupWrite",
                "cStack_ed": "groupExecute",
                "cStack_ec": "otherRead",
                "cStack_eb": "otherWrite",
                "cStack_ea": "otherExecute",
                "local_e8": "formattedTime",
                "local_b8": "textData",
                "uStack_a0": "fileSize",
                "uStack_9c": "dayOfMonth",
                "uStack_98": "month",
                "uStack_88": "year",
                "local_60": "fileModificationTime"
            },
            "code": "\nvoid printFileDetails_001079c0(FILE *outputFile,char **fileData,char includeDetails,char includeHexDump)\n\n{\n  int result;\n  char **dataPtr;\n  char *timeString;\n  uint fileType;\n  time_t currentTime;\n  undefined filePermission;\n  char ownerRead;\n  char ownerWrite;\n  char ownerExecute;\n  char groupRead;\n  char groupWrite;\n  char groupExecute;\n  char otherRead;\n  char otherWrite;\n  char otherExecute;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined textData [24];\n  uint fileSize;\n  uint dayOfMonth;\n  uint month;\n  undefined8 year;\n  time_t fileModificationTime;\n  \n  if (includeDetails != '\\0') {\n    dataPtr = (char **)fileData[0x1d];\n    if ((char **)fileData[0x1d] == (char **)0x0) {\n      dataPtr = fileData;\n    }\n    result = (**(code **)(dataPtr[1] + 0x1e8))(fileData,textData);\n    if (result == 0) {\n      currentTime = fileModificationTime;\n      timeString = ctime(&currentTime);\n      if (timeString == (char *)0x0) {\n        timeString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeString);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeString + 4);\n      }\n      fileType = fileSize & 0xf000;\n      if (fileType == 0x4000) {\n        filePermission = 100;\n      }\n      else if (fileType == 0xa000) {\n        filePermission = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        filePermission = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        filePermission = 99;\n      }\n      else if (fileType == 0xc000) {\n        filePermission = 0x73;\n      }\n      else {\n        filePermission = 0x70;\n        if (fileType != 0x1000) {\n          filePermission = 0x2d;\n        }\n      }\n      ownerRead = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      ownerWrite = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      ownerExecute = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      groupRead = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      groupWrite = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      groupExecute = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      otherRead = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      otherWrite = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      otherExecute = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (ownerExecute == 'x') {\n          ownerExecute = 's';\n        }\n        else {\n          ownerExecute = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (groupExecute == 'x') {\n          groupExecute = 's';\n        }\n        else {\n          groupExecute = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (otherExecute == 'x') {\n          otherExecute = 't';\n        }\n        else {\n          otherExecute = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&ownerRead,(ulong)dayOfMonth,(ulong)month,year,\n              formattedTime,(ulong)fileSize);\n    }\n  }\n  fputs(*fileData,outputFile);\n  if (includeHexDump != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "ctime",
                "print_arelt_descr.cold",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "ar_directory_doer",
                "print_descr"
            ],
            "imported": false,
            "current_name": "print_file_details_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "write_to_file_00105a68",
                "pcVar1": "outputDirectory",
                "pFVar2": "filePointer",
                "sVar3": "directoryLength"
            },
            "code": "\nvoid writeToFile_00105a68(void)\n\n{\n  char *outputDirectory;\n  FILE *filePointer;\n  size_t directoryLength;\n  \n  outputDirectory = output_dir;\n  if (output_dir != (char *)0x0) {\n    directoryLength = strlen(output_dir);\n    if (directoryLength != 0) {\n      if (outputDirectory[directoryLength - 1] == '/') {\n        output_filename = (char *)concat(outputDirectory,output_filename,0);\n      }\n      else {\n        output_filename = (char *)concat(outputDirectory,&DAT_00108260,output_filename,0);\n      }\n    }\n  }\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",output_filename);\n  }\n  filePointer = fopen(output_filename,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(output_filename);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "perror",
                "strlen",
                "xexit",
                "concat",
                "fopen",
                "printf",
                "open_output_file.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "write_to_file_00105a68"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_entries_001032a8",
                "param_1": "archive_entries",
                "param_2": "entry_handler",
                "param_3": "requested_entries",
                "param_4": "result",
                "lVar1": "next_entry",
                "uVar2": "current_entry",
                "bVar3": "entry_found",
                "plVar4": "current_node",
                "iVar5": "comparison_result",
                "__format": "error_message_format",
                "plVar6": "next_node",
                "lVar7": "current_entry",
                "plVar8": "previous_node"
            },
            "code": "\n\n\nundefined8 process_archive_entries_001032a8(long *archive_entries,code *entry_handler,undefined8 *requested_entries,undefined8 result)\n\n{\n  long next_entry;\n  undefined8 current_entry;\n  bool entry_found;\n  long *current_node;\n  int comparison_result;\n  char *error_message_format;\n  long *next_node;\n  long current_entry;\n  long *previous_node;\n  \n  current_entry = archive_entries[0x1e];\n  if (requested_entries == (undefined8 *)0x0) {\n    while (current_entry != 0) {\n      next_entry = *(long *)(current_entry + 0xf0);\n      (*entry_handler)(current_entry,0);\n      current_entry = next_entry;\n    }\n  }\n  else {\n    do {\n      entry_found = false;\n      current_node = (long *)archive_entries[0x1e];\n      previous_node = archive_entries;\n      while (next_node = current_node, next_node != (long *)0x0) {\n        if (*next_node != 0) {\n          comparison_result = filename_cmp(*requested_entries);\n          if (comparison_result == 0) {\n            entry_found = true;\n            (*entry_handler)(next_node,previous_node);\n          }\n        }\n        previous_node = next_node;\n        current_node = (long *)next_node[0x1e];\n      }\n      if (!entry_found) {\n        current_entry = *requested_entries;\n        error_message_format = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,error_message_format,current_entry);\n      }\n      requested_entries = (undefined8 *)requested_entries[1];\n    } while (requested_entries != (undefined8 *)0x0);\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "process_archive_entries_001032a8"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_command_help_0010342d",
                "param_1": "outputToStdout",
                "uVar1": "programNameCopy",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printCommandHelp_0010342d(uint outputToStdout)\n\n{\n  undefined8 programNameCopy;\n  char *message;\n  FILE *outputStream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (outputToStdout != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,message,program_name);\n  programNameCopy = program_name;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,message,programNameCopy);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  ar_emul_default_usage(outputStream);\n  list_supported_targets(program_name,outputStream);\n  if (outputToStdout != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToStdout ^ 1);\n}\n\n",
            "called": [
                "fprintf",
                "ar_emul_default_usage",
                "list_supported_targets",
                "dcgettext",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_command_help_0010342d"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "report_function_00107920",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "local_d8": "count",
                "local_d4": "size",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "param10",
                "local_a8": "param11",
                "local_a0": "param12",
                "local_98": "param13",
                "local_90": "param14",
                "local_88": "conditionalParam1",
                "local_78": "conditionalParam2",
                "local_68": "conditionalParam3",
                "local_58": "conditionalParam4",
                "local_48": "conditionalParam5",
                "local_38": "conditionalParam6",
                "local_28": "conditionalParam7",
                "local_18": "conditionalParam8"
            },
            "code": "\nvoid reportFunction_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param_9,undefined8 input10,undefined8 input11,undefined8 input12,\n                 undefined8 input13,undefined8 input14)\n\n{\n  char in_AL;\n  undefined4 count;\n  undefined4 size;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined temporaryBuffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 conditionalParam1;\n  undefined4 conditionalParam2;\n  undefined4 conditionalParam3;\n  undefined4 conditionalParam4;\n  undefined4 conditionalParam5;\n  undefined4 conditionalParam6;\n  undefined4 conditionalParam7;\n  undefined4 conditionalParam8;\n  \n  if (in_AL != '\\0') {\n    conditionalParam1 = input1;\n    conditionalParam2 = input2;\n    conditionalParam3 = input3;\n    conditionalParam4 = input4;\n    conditionalParam5 = input5;\n    conditionalParam6 = input6;\n    conditionalParam7 = input7;\n    conditionalParam8 = input8;\n  }\n  buffer = &stack0x00000008;\n  count = 8;\n  localBuffer = temporaryBuffer;\n  size = 0x30;\n  param10 = input10;\n  param11 = input11;\n  param12 = input12;\n  param13 = input13;\n  param14 = input14;\n  report(param_9,&count);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "open_inarch",
                "main",
                "set_times.cold",
                "get_file_size",
                "get_file_size.cold",
                "smart_rename.constprop.0.cold",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "report_function_00107920"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main",
                "normalize.cold",
                "replace_members.cold",
                "print_contents",
                "make_tempname",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00102590": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102590"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_0010e190": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e190",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010e190"
        },
        "FUN_00102470": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102470"
        },
        "FUN_0010e070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010e070"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "create_output_file_00102e6f",
                "in_RAX": "path",
                "pcVar1": "outputDir",
                "uVar2": "baseName",
                "uVar3": "errorMsg",
                "pFVar4": "outputFile",
                "sVar5": "outputDirLength",
                "pcVar6": "currentPathSegment"
            },
            "code": "\nvoid createOutputFile_00102e6f(void)\n\n{\n  char *outputDir;\n  char *path;\n  undefined8 baseName;\n  undefined8 errorMsg;\n  FILE *outputFile;\n  size_t outputDirLength;\n  char *currentPathSegment;\n  \n  outputDir = output_dir;\n  do {\n    path = path + 1;\n    while (*path != '/') {\n      if (*path == '\\0') {\n        if ((output_dir != (char *)0x0) && (outputDirLength = strlen(output_dir), outputDirLength != 0)) {\n          if (outputDir[outputDirLength - 1] == '/') {\n            output_filename = (char *)concat(outputDir,output_filename,0);\n          }\n          else {\n            output_filename = (char *)concat(outputDir,&DAT_00108260,output_filename,0);\n          }\n        }\n        if (verbose != 0) {\n          printf(\"x - %s\\n\",output_filename);\n        }\n        outputFile = fopen(output_filename,\"w\");\n        if (outputFile == (FILE *)0x0) {\n          perror(output_filename);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      currentPathSegment = path;\n      if ((*path == '.') && (currentPathSegment = path + 1, path[1] == '.')) {\n        currentPathSegment = path + 2;\n        if ((path[2] == '/') || (path[2] == '\\0')) {\n          baseName = lbasename();\n          outputDir = output_filename;\n          errorMsg = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          non_fatal(errorMsg,outputDir,baseName);\n          output_filename = (char *)baseName;\n          write_to_file_00105a68();\n          return;\n        }\n      }\n      for (; (path = currentPathSegment, *currentPathSegment != '\\0' && (*currentPathSegment != '/')); currentPathSegment = currentPathSegment + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "non_fatal",
                "dcgettext",
                "FUN_00102e6f",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "create_output_file_00102e6f"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "auxBuffer",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *auxBuffer;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)yy_fatal_error(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    auxBuffer = malloc(0x4002);\n    *(void **)((long)buffer + 8) = auxBuffer;\n  } while (auxBuffer == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  yy_init_buffer(buffer,param1);\n  result._8_8_ = param4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "malloc",
                "yy_init_buffer",
                "yy_fatal_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_profiler_00102000",
                "ctx": "profileContext",
                "iVar1": "startStatus"
            },
            "code": "\nint initializeProfiler_00102000(EVP_PKEY_CTX *profileContext)\n\n{\n  int startStatus;\n  \n  startStatus = __gmon_start__();\n  return startStatus;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_profiler_00102000"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00102480": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "FUN_00105a68",
                "ranlib_only",
                "main",
                "maybequit",
                "fatal",
                "ranlib_usage",
                "write_archive.cold",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102480"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_last_matching_entry_00105870",
                "param_1": "entries",
                "param_2": "entryCount",
                "param_3": "position",
                "uVar2": "targetPosition",
                "iVar3": "targetEntryType",
                "iVar1": "comparisonResult"
            },
            "code": "\nlong * findLastMatchingEntry_00105870(long *entries,int entryCount,undefined8 position)\n\n{\n  int comparisonResult;\n  undefined8 targetPosition;\n  int targetEntryType;\n  \n  targetPosition = posname;\n  targetEntryType = postype;\n  if (postype == 0) {\n    targetPosition = position;\n    targetEntryType = entryCount;\n  }\n  if (targetEntryType == 3) {\n    for (; *entries != 0; entries = (long *)(*entries + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*entries != (undefined8 *)0x0; entries = (long *)(*entries + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*entries,targetPosition);\n      if (comparisonResult == 0) {\n        if (targetEntryType != 2) {\n          return entries;\n        }\n        return (long *)(*entries + 0xf0);\n      }\n    }\n  }\n  return entries;\n}\n\n",
            "called": [
                "get_pos_bfd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "find_last_matching_entry_00105870"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "prompt_user_for_input_00103ba8",
                "interactive": "isInteractiveMode",
                "printf": "printPrompt",
                "fflush": "flushStandardOutput"
            },
            "code": "\n\n\nvoid promptUserForInput_00103ba8(void)\n\n{\n  if (isInteractiveMode != 0) {\n    printPrompt(\"AR >\");\n    flushStandardOutput(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "prompt_user_for_input_00103ba8"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_arelt_descr_verbose_00103ddc",
                "param_1": "param",
                "outfile": "output_file",
                "verbose": "is_verbose"
            },
            "code": "\nvoid print_arelt_descr_verbose_00103ddc(undefined8 param)\n\n{\n  print_arelt_descr(output_file,param,is_verbose != 0,0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_arelt_descr_verbose_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_001078c0",
                "param_1": "message",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printError_001078c0(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,message,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "putc",
                "fflush",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_001078c0"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "uVar1": "lineNumber",
                "__format": "errorMessageFormat"
            },
            "code": "\nvoid printSyntaxError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *errorMessageFormat;\n  \n  lineNumber = linenumber + 1;\n  errorMessageFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessageFormat,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_syntax_error_001031a5"
        },
        "FUN_0010e098": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e098",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e098"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00102490": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "open_inarch",
                "main",
                "open_inarch.cold",
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102490"
        },
        "FUN_0010e090": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e090",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_0010e090"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "open_inarch",
                "open_inarch.cold",
                "ar_open",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "return_value",
                "__size": "buffer_size",
                "lVar1": "loop_counter",
                "lVar2": "new_stack_max",
                "puVar3": "buffer_ptr",
                "bVar4": "is_initialized"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 return_value;\n  long loop_counter;\n  long new_stack_max;\n  undefined4 *buffer_ptr;\n  byte is_initialized;\n  \n  is_initialized = 0;\n  if (yy_buffer_stack == (void *)0x0) {\n    yy_buffer_stack = calloc(8,1);\n    if (yy_buffer_stack != (void *)0x0) {\n      yy_buffer_stack_max = 1;\n      yy_buffer_stack_top = 0;\n      return return_value;\n    }\n  }\n  else {\n    if (yy_buffer_stack_top < yy_buffer_stack_max - 1U) {\n      return return_value;\n    }\n    new_stack_max = yy_buffer_stack_max + 8;\n    buffer_size = new_stack_max * 8;\n    yy_buffer_stack = realloc(yy_buffer_stack,buffer_size);\n    if (yy_buffer_stack != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)yy_buffer_stack + (buffer_size - 0x40));\n      yy_buffer_stack_max = new_stack_max;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)is_initialized * -2 + 1;\n      }\n      return return_value;\n    }\n  }\n  yy_fatal_error(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  yy_buffer_stack_top = 0;\n  yy_buffer_stack_max = 1;\n  return return_value;\n}\n\n",
            "called": [
                "realloc",
                "calloc",
                "yy_fatal_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "FUN_0010e308": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e308",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010e308"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "main",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00105da0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00105da0"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_files_00102bf5",
                "output_bfd": "bfd_handle",
                "output_file": "output_file_ptr",
                "output_filename": "filename"
            },
            "code": "\nvoid cleanup_files_00102bf5(void)\n\n{\n  if (bfd_handle != 0) {\n    bfd_cache_close();\n  }\n  if (output_file_ptr != (FILE *)0x0) {\n    fclose(output_file_ptr);\n  }\n  unlink_if_ordinary(filename);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "bfd_cache_close",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "remove_output"
            ],
            "imported": false,
            "current_name": "cleanup_files_00102bf5"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "simple_copy.constprop.0.cold",
                "write_archive",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main",
                "remove_output.cold",
                "yyparse.isra.0",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_output_filename_00102943",
                "output_filename": "outputFilename"
            },
            "code": "\nvoid initializeOutputFilename_00102943(void)\n\n{\n  outputFilename = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "replace_members",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "initialize_output_filename_00102943"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errMsg",
                "uVar4": "translatedErrMsg",
                "local_38": "accessTime",
                "uStack_34": "modTime_high",
                "uStack_30": "modTime_low",
                "uStack_2c": "creationTime",
                "local_28": "backupTime",
                "uStack_24": "fileAttr",
                "uStack_20": "extraAttr",
                "uStack_1c": "reserved"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errMsg;\n  undefined8 translatedErrMsg;\n  undefined4 accessTime;\n  undefined4 modTime_high;\n  undefined4 modTime_low;\n  undefined4 creationTime;\n  undefined4 backupTime;\n  undefined4 fileAttr;\n  undefined4 extraAttr;\n  undefined4 reserved;\n  \n  backupTime = *(undefined4 *)(fileInfo + 0x58);\n  fileAttr = *(undefined4 *)(fileInfo + 0x5c);\n  extraAttr = *(undefined4 *)(fileInfo + 0x60);\n  reserved = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modTime_high = *(undefined4 *)(fileInfo + 0x4c);\n  modTime_low = *(undefined4 *)(fileInfo + 0x50);\n  creationTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errMsg = strerror(*errnoPtr);\n    translatedErrMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(translatedErrMsg,filePath,errMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "main",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "param_19": "fileMode",
                "unaff_RBX": "fileContents",
                "unaff_RBP": "outputFileStream",
                "unaff_R12B": "checkFlag",
                "uStack0000000000000015": "permissionChar",
                "cStack0000000000000016": "isRegularFile",
                "cStack0000000000000017": "isWritable",
                "param_9": "isExecutable",
                "cStack0000000000000019": "isSetUID",
                "cStack000000000000001a": "isSetGID",
                "cStack000000000000001b": "isSticky",
                "cStack000000000000001c": "otherRead",
                "cStack000000000000001d": "otherWrite",
                "cStack000000000000001e": "otherExecute",
                "uStack000000000000001f": "hasExtraInfo",
                "uStack000000000000006c": "fileOwnerID",
                "param_20": "fileGroupID",
                "param_22": "fileSize"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *__format;\n  uint uVar1;\n  char **fileContents;\n  FILE *outputFileStream;\n  char checkFlag;\n  undefined permissionChar;\n  char isRegularFile;\n  char isWritable;\n  char isExecutable;\n  char isSetUID;\n  char isSetGID;\n  char isSticky;\n  char otherRead;\n  char otherWrite;\n  char otherExecute;\n  undefined hasExtraInfo;\n  uint fileMode;\n  uint fileOwnerID;\n  uint fileGroupID;\n  undefined8 fileSize;\n  \n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar1 = fileMode & 0xf000;\n  if (uVar1 == 0x4000) {\n    permissionChar = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    permissionChar = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    permissionChar = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    permissionChar = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    permissionChar = 0x73;\n  }\n  else {\n    permissionChar = 0x70;\n    if (uVar1 != 0x1000) {\n      permissionChar = 0x2d;\n    }\n  }\n  isRegularFile = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  isWritable = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  isExecutable = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  isSetUID = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  isSetGID = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  isSticky = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  otherRead = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  otherWrite = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  otherExecute = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (isExecutable == 'x') {\n      isExecutable = 's';\n    }\n    else {\n      isExecutable = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (isSticky == 'x') {\n      isSticky = 's';\n    }\n    else {\n      isSticky = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (otherExecute == 'x') {\n      otherExecute = 't';\n    }\n    else {\n      otherExecute = 'T';\n    }\n  }\n  hasExtraInfo = 0;\n  fprintf(outputFileStream,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileOwnerID,\n          (ulong)fileGroupID,fileSize,&stack0x00000020,(ulong)fileMode);\n  fputs(*fileContents,outputFileStream);\n  if (checkFlag != '\\0') {\n    if ((*(byte *)((long)fileContents + 0x49) & 0x10) == 0) {\n      if (fileContents[0xb] != (char *)0x0) {\n        fprintf(outputFileStream,\" 0x%lx\");\n      }\n    }\n    else if (fileContents[0xc] != (char *)0x0) {\n      fprintf(outputFileStream,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFileStream);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputs",
                "dcgettext",
                "fputc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "create_archive_00105300",
                "param_1": "input_filename",
                "param_2": "archive",
                "plVar1": "file_list_pointer",
                "pcVar2": "output_filename",
                "bVar3": "is_thin_library",
                "cVar4": "format_check_result",
                "iVar5": "status",
                "uVar6": "error_message",
                "uVar7": "error_message_2",
                "piVar8": "errno_address",
                "lVar9": "file_descriptor",
                "puVar10": "inarch_file_descriptor",
                "local_b0": "formats_array",
                "local_a8": "file_stats"
            },
            "code": "\n\n\nundefined8 * createArchive_00105300(char *input_filename,undefined8 *archive)\n\n{\n  long *file_list_pointer;\n  char *output_filename;\n  byte is_thin_library;\n  char format_check_result;\n  int status;\n  undefined8 error_message;\n  undefined8 error_message_2;\n  int *errno_address;\n  long file_descriptor;\n  undefined8 *inarch_file_descriptor;\n  undefined8 formats_array;\n  stat file_stats;\n  \n  bfd_set_error(0);\n  if (target == (char *)0x0) {\n    target = \"plugin\";\n  }\n  status = stat(input_filename,&file_stats);\n  output_filename = output_filename;\n  if (status == 0) goto LAB_001053be;\n  errno_address = __errno_location();\n  if (*errno_address == 2) {\n    if (operation_alters_arch == '\\0') {\n      fprintf(_stderr,\"%s: \",program_name);\n      perror(input_filename);\n      maybequit();\n      return (undefined8 *)0x0;\n    }\n    if ((target == (char *)0x0) && (archive != (undefined8 *)0x0)) {\n      inarch_file_descriptor = (undefined8 *)open_inarch_cold();\n      return inarch_file_descriptor;\n    }\n    archive = (undefined8 *)bfd_openw(input_filename,target);\n    if (((archive != (undefined8 *)0x0) && (format_check_result = bfd_set_format(archive,2), format_check_result != '\\0')) &&\n       (format_check_result = bfd_close(archive), format_check_result != '\\0')) {\n      output_filename = input_filename;\n      if (silent_create == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  bfd_fatal(input_filename);\n  do {\n    is_thin_library = *(byte *)((long)archive + 0x49) >> 4 & 1;\n    if (make_thin_archive == '\\0') {\n      if (is_thin_library != 0) {\n        error_message_2 = *archive;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(error_message,error_message_2);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_library == 0) {\n      error_message_2 = *archive;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(error_message,error_message_2);\nLAB_001027cb:\n      bfd_nonfatal(input_filename);\n      status = bfd_get_error();\n      if (status == 0xd) {\nLAB_00102812:\n        list_matching_formats(formats_array);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      file_list_pointer = archive + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(archive,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(archive,file_descriptor)) {\n        *file_list_pointer = file_descriptor;\n        file_list_pointer = (long *)(file_descriptor + 0xf0);\n      }\n      *file_list_pointer = 0;\n      status = bfd_get_error();\n      if (status == 9) {\n        return archive;\n      }\n      do {\n        bfd_fatal(input_filename);\nLAB_00102826:\n        error_message_2 = dcgettext(0,\"creating %s\",5);\n        non_fatal(error_message_2,input_filename);\n        output_filename = input_filename;\nLAB_001053be:\n        output_filename = output_filename;\n        archive = (undefined8 *)bfd_openr(input_filename,target);\n      } while (archive == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(archive,2,&formats_array);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((operation != 2) && (operation != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(archive,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_fatal",
                "perror",
                "fprintf",
                "stat",
                "bfd_set_format",
                "bfd_check_format_matches",
                "bfd_nonfatal",
                "non_fatal",
                "list_matching_formats",
                "bfd_openw",
                "open_inarch.cold",
                "bfd_close",
                "maybequit",
                "fatal",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "xexit",
                "bfd_get_error",
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "ranlib_only",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "create_archive_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptrBytes",
                "puVar2": "ptrUint",
                "bVar3": "byteVar",
                "plVar4": "ptrLong",
                "puVar5": "ptrVoid",
                "uVar6": "uintVar1",
                "uVar7": "uintVar2",
                "bVar8": "boolVar1",
                "bVar9": "boolVar2",
                "ppcVar10": "ptrPointer",
                "piVar11": "ptrInt",
                "puVar12": "ptrUndefined",
                "bVar13": "byteVar2",
                "cVar14": "charVar",
                "iVar15": "intVar",
                "uVar16": "uintVar",
                "uVar17": "uintVar3",
                "pFVar18": "ptrFile",
                "sVar19": "sizeVar1",
                "sVar20": "sizeVar2",
                "__ptr": "ptrByte",
                "plVar21": "ptrLong1",
                "pFVar22": "ptrFile1",
                "pcVar23": "ptrChar",
                "lVar24": "longVar1",
                "uVar25": "ulongVar1",
                "puVar26": "ptrUInt2",
                "uVar27": "ulongVar2",
                "pFVar28": "ptrFile2",
                "pplVar29": "ptrPtrLongs",
                "uVar30": "ulongVar3",
                "extraout_EDX": "uintVar4",
                "pbVar33": "ptrByte1",
                "lVar34": "longVar2",
                "lVar35": "longVar3",
                "puVar36": "ptrUndefined1",
                "uVar37": "uintVar5",
                "unaff_RBP": "ptrChar1",
                "pbVar38": "ptrByte2",
                "pcVar39": "ptrCharVar",
                "uVar40": "ulongVar4",
                "uVar41": "ulongVar5",
                "uVar42": "ulongVar6",
                "uVar44": "uintVar6",
                "iVar45": "intVar2",
                "pcVar46": "ptrChar2",
                "bVar47": "boolVar3",
                "bVar48": "byteVar3",
                "local_130": "localFile",
                "local_128": "localFile1",
                "local_118": "localByte",
                "local_110": "localPointer",
                "local_108": "localSize",
                "local_100": "localLong",
                "local_c8": "localUndefined",
                "uStack_c6": "uStackUndefined",
                "uStack_c5": "uStackUndefined1",
                "local_b0": "localUint"
            },
            "code": "\n\n\nvoid processFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *ptrBytes;\n  uint *ptrUint;\n  byte byteVar;\n  long *ptrLong;\n  undefined8 *ptrVoid;\n  undefined4 uintVar1;\n  undefined4 uintVar2;\n  bool boolVar1;\n  bool boolVar2;\n  char **ptrPointer;\n  int *ptrInt;\n  undefined *ptrUndefined;\n  byte byteVar2;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined4 uintVar3;\n  FILE *ptrFile;\n  size_t sizeVar1;\n  size_t sizeVar2;\n  byte *ptrByte;\n  long *ptrLong1;\n  FILE *ptrFile1;\n  char *ptrChar;\n  long longVar1;\n  ulong ulongVar1;\n  undefined8 *ptrUInt2;\n  undefined8 ulongVar2;\n  FILE *ptrFile2;\n  long **ptrPtrLongs;\n  undefined8 ulongVar3;\n  char **ppcVar31;\n  uint uintVar4;\n  char **ppcVar32;\n  byte *ptrByte1;\n  long longVar2;\n  long longVar3;\n  undefined1 *ptrUndefined1;\n  uint uintVar5;\n  char *ptrChar1;\n  byte *ptrByte2;\n  char *ptrCharVar;\n  ulong ulongVar4;\n  ulong ulongVar5;\n  ulong ulongVar6;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uintVar6;\n  int intVar2;\n  char *ptrChar2;\n  bool boolVar3;\n  byte byteVar3;\n  undefined8 localFile;\n  FILE *localFile1;\n  byte *localByte;\n  char **localPointer;\n  size_t localSize;\n  long localLong;\n  undefined localUndefined [2];\n  undefined uStackUndefined;\n  undefined5 uStackUndefined1;\n  uint localUint;\n  \n  byteVar3 = 0;\n  ptrChar2 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  pcVar43 = (char *)argv;\n  ptrFile = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  localPointer = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  localFile1 = (FILE *)0x0;\n  ptrFile1 = argv;\n  do {\n    uintVar = (uint)unaff_R12;\n    ptrChar1 = (char *)(long)(int)uintVar;\n    localFile = (FILE *)((long)ptrChar1 * 8);\n    pcVar43 = (char *)ptrFile1;\n    if (**(char **)(&ptrFile1->_flags + (long)ptrChar1 * 2) == '@') {\n      uintVar6 = (int)localPointer - 1;\n      localPointer = (char **)(ulong)uintVar6;\n      if (uintVar6 == 0) {\n        ptrLong1 = *(long **)ptrFile1;\n        ptrChar2 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,ptrChar2,ptrLong1);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      ptrCharVar = *(char **)(&ptrFile1->_flags + (long)ptrChar1 * 2) + 1;\n      intVar = stat(ptrCharVar,(stat *)localUndefined);\n      if (-1 < intVar) {\n        if ((localUint & 0xf000) == 0x4000) {\n          ptrLong1 = *(long **)ptrFile1;\n          ptrChar2 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        ptrFile = fopen(ptrCharVar,\"r\");\n        if (ptrFile != (FILE *)0x0) {\n          intVar = fseek(ptrFile,0,2);\n          if (((intVar != -1) && (sizeVar1 = ftell(ptrFile), sizeVar1 != 0xffffffffffffffff)) &&\n             (intVar = fseek(ptrFile,0,0), intVar != -1)) {\n            localByte = (byte *)xmalloc(sizeVar1 + 1);\n            sizeVar2 = fread(localByte,1,sizeVar1,ptrFile);\n            if ((sizeVar1 == sizeVar2) || (intVar = ferror(ptrFile), intVar == 0)) {\n              localByte[sizeVar2] = 0;\n              byteVar2 = *localByte;\n              ptrByte1 = localByte;\n              while( true ) {\n                if (byteVar2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) == 0) break;\n                byteVar2 = ptrByte1[1];\n                ptrByte1 = ptrByte1 + 1;\n              }\n              sizeVar1 = strlen((char *)localByte);\n              ptrByte = (byte *)xmalloc(sizeVar1 + 1);\n              ptrFile2 = (FILE *)0x0;\n              intVar = 0;\n              boolVar2 = false;\n              boolVar3 = false;\n              boolVar1 = false;\n              localLong = 0;\n              ptrByte1 = localByte;\n              do {\n                while (((&_sch_istable)[(ulong)*ptrByte1 * 2] & 0x40) != 0) {\n                  ptrByte1 = ptrByte1 + 1;\n                }\n                if ((intVar == 0) || (intVar + -1 <= (int)localLong)) {\n                  if (ptrFile2 == (FILE *)0x0) {\n                    intVar = 8;\n                    ptrFile2 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&ptrFile2->_flags + localLong * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar = intVar * 2;\n                    ptrFile2 = (FILE *)xrealloc(ptrFile2,(long)intVar << 3);\n                    ppcVar31 = (char **)((long)&ptrFile2->_flags + localLong * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&ptrFile2->_flags + localLong * 8);\n                }\n                byteVar2 = *ptrByte1;\n                ptrByte2 = ptrByte;\n                while (byteVar2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar2 | boolVar1 | boolVar3))) {\n                      boolVar1 = false;\n                      boolVar2 = false;\n                      boolVar3 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar1) break;\n                    ptrByte1 = ptrByte1 + 1;\n                    *ptrByte2 = byteVar2;\n                    ptrByte2 = ptrByte2 + 1;\n                    boolVar1 = false;\n                    byteVar2 = *ptrByte1;\n                    if (byteVar2 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar2 == 0x5c) {\n                    boolVar1 = true;\n                  }\n                  else if (boolVar3) {\n                    if (byteVar2 == 0x27) {\n                      boolVar3 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *ptrByte2 = byteVar2;\n                      ptrByte2 = ptrByte2 + 1;\n                    }\n                  }\n                  else if (boolVar2) {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = false;\n                  }\n                  else if (byteVar2 == 0x27) {\n                    boolVar3 = true;\n                  }\n                  else {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = true;\n                  }\n                  ptrBytes = ptrByte1 + 1;\n                  ptrByte1 = ptrByte1 + 1;\n                  byteVar2 = *ptrBytes;\n                }\nLAB_0010606f:\n                *ptrByte2 = 0;\n                ptrLong1 = (long *)xstrdup(ptrByte);\n                *ppcVar31 = (char *)ptrLong1;\n                *(undefined8 *)(ptrFile2->_shortbuf + localLong * 8 + -0x7b) = 0;\n                byteVar2 = *ptrByte1;\n                byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                while ((byteVar & 0x40) != 0) {\n                  byteVar2 = ptrByte1[1];\n                  ptrByte1 = ptrByte1 + 1;\n                  byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                }\n                localLong = localLong + 1;\n                if (byteVar2 == 0) {\n                  free(ptrByte);\n                  if (ptrFile1 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(localByte);\n          }\n          fclose(ptrFile);\n        }\n      }\n    }\n    if ((int)ptrChar2 <= (int)(uintVar + 1)) {\nLAB_001062c6:\n      do {\n        if (is_ranlib < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar = (uint)unaff_R12;\n        intVar = bfd_init();\n        ptrCharVar = \"fatal error: libbfd ABI mismatch\";\n        if (intVar != 0x118) goto LAB_00106803;\n        ptrCharVar = \"x86_64-pc-linux-gnu\";\n        uintVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        ptrUndefined = xatexit_head;\n        unaff_R12 = (FILE *)(ulong)uintVar;\n        if ((char)uintVar != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = xatexit_cleanup;\n          }\n          if (*(int *)(xatexit_head + 8) < 0x20) {\nLAB_0010632b:\n            ptrUndefined = xatexit_head;\n            intVar = *(int *)(xatexit_head + 8);\n            *(int *)(xatexit_head + 8) = intVar + 1;\n            *(code **)(ptrUndefined + (long)intVar * 8 + 0x10) = remove_output;\n          }\n          else {\n            ptrUInt2 = (undefined8 *)malloc(0x110);\n            if (ptrUInt2 != (undefined8 *)0x0) {\n              *ptrUInt2 = ptrUndefined;\n              *(undefined4 *)(ptrUInt2 + 1) = 0;\n              xatexit_head = (undefined *)ptrUInt2;\n              goto LAB_0010632b;\n            }\n          }\n          longVar1 = 1;\n          do {\n            longVar3 = longVar1;\n            intVar = (int)ptrChar2;\n            if (intVar <= (int)longVar3) break;\n            charVar = ar_emul_default_parse_arg(*(undefined8 *)((int *)pcVar43 + longVar3 * 2));\n            longVar1 = longVar3 + 1;\n          } while (charVar != '\\0');\n          ptrChar2 = (char *)((long)pcVar43 + longVar3 * 8 + -8);\n          uintVar6 = intVar - ((int)longVar3 + -1);\n          ptrFile = (FILE *)(ulong)uintVar6;\n          if (is_ranlib != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uintVar5 = 0;\n            while (intVar = getopt_long(ptrFile,ptrChar2,\"DhHUvVt\",long_options), intVar != -1) {\n              if (intVar < 0x77) {\n                if (0x43 < intVar) {\n                  switch(intVar) {\n                  case 0x44:\n                    deterministic = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    show_help = 1;\n                    break;\n                  case 0x55:\n                    deterministic = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    show_version = 1;\n                    break;\n                  case 0x74:\n                    uintVar5 = uintVar;\n                  }\n                }\n              }\n              else if (intVar == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uintVar6 < 2) {\nLAB_00107125:\n              ptrCharVar = (char *)0x0;\n              ranlib_usage();\n            }\n            else {\n              if (show_help != 0) {\nLAB_0010711b:\n                ranlib_usage();\n                goto LAB_00107125;\n              }\n              if (show_version != 0) {\n                print_version(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uintVar6 <= (int)pcVar43) goto LAB_00106f8b;\n                ptrCharVar = *(char **)((int *)ptrChar2 + (long)pcVar43 * 2);\n                if ((char)uintVar5 != '\\0') break;\n                uintVar = ranlib_only();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              }\n            }\n            while (longVar1 = get_file_size(ptrCharVar), longVar1 < 1) {\n              uintVar = 1;\nLAB_001071c4:\n              ptrInt = (int *)pcVar43;\n              pcVar43 = (char *)((long)ptrInt + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              if ((int)uintVar6 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              ptrCharVar = *(char **)((char *)((long)ptrChar2 + 0x83) + (long)ptrInt * 8 + -0x7b);\n            }\n            intVar = open(ptrCharVar,2,0);\n            if (intVar < 0) {\n              bfd_set_error(1);\n              bfd_fatal(ptrCharVar);\nLAB_0010737f:\n              bfd_fatal(ptrCharVar);\nLAB_00107387:\n              bfd_nonfatal(ptrCharVar);\n              intVar = bfd_get_error();\n              if (intVar == 0xd) {\n                list_matching_formats\n                          (CONCAT53(uStackUndefined1,CONCAT12(uStackUndefined,CONCAT11(localUndefined[1],localUndefined[0])))\n                          );\n              }\n              goto LAB_0010700f;\n            }\n            ptrChar1 = (char *)bfd_fdopenr(ptrCharVar,0);\n            if ((FILE *)ptrChar1 == (FILE *)0x0) goto LAB_0010737f;\n            charVar = bfd_check_format_matches(ptrChar1,2,localUndefined);\n            if (charVar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)ptrChar1 + 0x48) + 1) & 8) != 0) {\n              if (deterministic != 0) {\n                ptrUint = (uint *)((long)((long)ptrChar1 + 0x40) + 4);\n                *ptrUint = *ptrUint | 0x2000;\n              }\n              (**(code **)(*(char **)((long)ptrChar1 + 8) + 0x1f0))(ptrChar1);\n              charVar = bfd_close(ptrChar1);\n              if (charVar != '\\0') {\n                uintVar = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            ulongVar2 = dcgettext(0,\"%s: no archive map to update\",5);\n            fatal(ulongVar2,ptrCharVar);\nLAB_001073cc:\n            ptrCharVar = (char *)lbasename(program_name);\n            sizeVar1 = strlen(ptrCharVar);\n            if ((sizeVar1 < 6) ||\n               (intVar = filename_cmp(ptrCharVar + (sizeVar1 - 6),\"ranlib\"), intVar != 0)) {\n              is_ranlib = 0;\n            }\n            else {\n              is_ranlib = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ptrUndefined1 = long_options;\n          ptrChar1 = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          ptrFile1 = (FILE *)ptrChar1;\n          ptrFile2 = ptrFile;\n          if ((int)uintVar6 < 2) goto switchD_00107462_caseD_1;\n          localFile = (FILE *)CONCAT71(localFile._1_7_,(char)uintVar);\nLAB_001063a3:\n          ptrFile1 = (FILE *)ptrChar1;\n          if (**(char **)((long)ptrChar2 + 8) != '-') {\n            localUndefined[0] = 0x2d;\n            uStackUndefined = 0;\n            sizeVar1 = strlen(*(char **)((long)ptrChar2 + 8));\n            intVar = (int)sizeVar1 + (int)ptrFile;\n            unaff_R12 = (FILE *)xmalloc((long)intVar * 8);\n            uintVar3 = *(undefined4 *)((long)ptrChar2 + 4);\n            unaff_R12->_flags = *(int *)ptrChar2;\n            *(undefined4 *)&unaff_R12->field_0x4 = uintVar3;\n            ppcVar31 = *(char ***)((long)ptrChar2 + 8);\n            localFile1 = (FILE *)((long)ptrChar2 + 0x10);\n            localPointer = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              localByte = localUndefined;\n              localUndefined[1] = *(char *)ppcVar31;\n              ptrCharVar = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = ptrCharVar;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                localUndefined[1] = *(char *)((long)ppcVar31 + 1);\n                ptrCharVar = (char *)xstrdup(localByte);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = ptrCharVar;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  localUndefined[1] = *(char *)((long)ppcVar31 + 2);\n                  ptrCharVar = (char *)xstrdup(localByte);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = ptrCharVar;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    localUndefined[1] = *(char *)((long)ppcVar31 + 3);\n                    ptrCharVar = (char *)xstrdup(localByte);\n                    unaff_R12->_IO_write_base = ptrCharVar;\n                    charVar = *(char *)((long)ppcVar31 + 4);\n                    localPointer = ppcVar32;\n                    if (charVar != '\\0') {\n                      ptrCharVar = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        localUndefined[1] = charVar;\n                        ptrChar = (char *)xstrdup(localByte);\n                        ptrCharVar = ptrCharVar + 1;\n                        *ppcVar31 = ptrChar;\n                        charVar = *ptrCharVar;\n                        ppcVar31 = ppcVar32;\n                        localPointer = ppcVar32;\n                      } while (charVar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar1 = (long)(int)ptrFile;\n            ptrInt = (int *)ptrChar2 + longVar1 * 2;\n            if (localFile1 < ptrInt) {\n              ulongVar1 = longVar1 * 8 - 0x11;\n              if ((ulongVar1 < 0x18) || (ppcVar32 == (char **)((long)ptrChar2 + 0x18))) {\n                *ppcVar32 = *(char **)((long)ptrChar2 + 0x10);\n                if (((char **)((long)ptrChar2 + 0x18) < ptrInt) &&\n                   ((((ppcVar32[1] = *(char **)((long)ptrChar2 + 0x18),\n                      (char **)((long)ptrChar2 + 0x20) < ptrInt &&\n                      (ppcVar32[2] = *(char **)((long)ptrChar2 + 0x20),\n                      (char **)((long)ptrChar2 + 0x28) < ptrInt)) &&\n                     (ppcVar32[3] = *(char **)((long)ptrChar2 + 0x28),\n                     (char **)((long)ptrChar2 + 0x30) < ptrInt)) &&\n                    (ppcVar32[4] = *(char **)((long)ptrChar2 + 0x30),\n                    (char **)((long)ptrChar2 + 0x38) < ptrInt)))) {\n                  ppcVar32[5] = *(char **)((long)ptrChar2 + 0x38);\n                  ptrPointer = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)ptrChar2 + 0x40); ppcVar31 < ptrInt;\n                      ppcVar31 = ppcVar31 + (ulong)byteVar3 * -2 + 1) {\n                    *ptrPointer = *ppcVar31;\n                    ptrPointer = ptrPointer + (ulong)byteVar3 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                uintVar3 = *(undefined4 *)((long)((long)ptrChar2 + 0x10) + 4);\n                uintVar1 = *(undefined4 *)((long)ptrChar2 + 0x18);\n                uintVar2 = *(undefined4 *)((long)((long)ptrChar2 + 0x18) + 4);\n                ulongVar4 = (ulongVar1 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)ptrChar2 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = uintVar3;\n                *(undefined4 *)(ppcVar32 + 1) = uintVar1;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = uintVar2;\n                uintVar3 = *(undefined4 *)((long)((long)ptrChar2 + 0x20) + 4);\n                uintVar1 = *(undefined4 *)((long)ptrChar2 + 0x28);\n                uintVar2 = *(undefined4 *)((long)((long)ptrChar2 + 0x28) + 4);\n                ulongVar1 = ulongVar4 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)ptrChar2 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = uintVar3;\n                *(undefined4 *)(ppcVar32 + 3) = uintVar1;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = uintVar2;\n                if (ulongVar1 != 2) {\n                  uintVar3 = *(undefined4 *)((long)((long)ptrChar2 + 0x30) + 4);\n                  uintVar1 = *(undefined4 *)((long)ptrChar2 + 0x38);\n                  uintVar2 = *(undefined4 *)((long)((long)ptrChar2 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)ptrChar2 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = uintVar3;\n                  *(undefined4 *)(ppcVar32 + 5) = uintVar1;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = uintVar2;\n                  if (ulongVar1 != 3) {\n                    ulongVar5 = 3;\n                    do {\n                      ulongVar6 = ulongVar5 + 1;\n                      ptrCharVar = (char *)((long)ptrChar2 + 0x83) + ulongVar5 * 0x10 + -0x73;\n                      uintVar3 = *(undefined4 *)(ptrCharVar + 4);\n                      uintVar1 = *(undefined4 *)(ptrCharVar + 8);\n                      uintVar2 = *(undefined4 *)(ptrCharVar + 0xc);\n                      ppcVar31 = ppcVar32 + ulongVar5 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)ptrCharVar;\n                      *(undefined4 *)((long)ppcVar31 + 4) = uintVar3;\n                      *(undefined4 *)(ppcVar31 + 1) = uintVar1;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = uintVar2;\n                      ulongVar5 = ulongVar6;\n                    } while (ulongVar6 != ulongVar1);\n                  }\n                }\n                if ((ulongVar4 & 1) != 0) {\n                  ppcVar32[ulongVar4 & 0xfffffffffffffffe] =\n                       *(char **)((long)localFile1 + (ulongVar4 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar1 + -2;\n            }\n            ptrFile = (FILE *)(ulong)(intVar - 1);\n            *ppcVar32 = (char *)0x0;\n            ptrChar2 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar = (uint)unaff_R12;\n            uintVar6 = getopt_long((ulong)ptrFile & 0xffffffff,ptrChar2,ptrFile1,ptrUndefined1,0);\n            ptrChar1 = (char *)ptrFile1;\n            if (uintVar6 == 0xffffffff) break;\n            if (((uintVar6 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uintVar6 - 100) & 0x3f) & 1) != 0))\n               && (operation != 0)) goto LAB_001067f7;\n            ptrFile2 = (FILE *)ptrChar2;\n            if (uintVar6 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uintVar6]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            usage(0);\n            ptrChar2 = (char *)ptrFile2;\nswitchD_00107462_caseD_68:\n            show_help = 1;\n          }\nLAB_00106680:\n          uintVar6 = operation;\n          ptrFile1 = (FILE *)ptrChar1;\n          if (operation == 0) {\n            if (((write_armap == 1) || (mri_mode != 0)) ||\n               (((int)ptrFile <= _optind || (_optind < 1)))) {\n              uintVar6 = 0;\n              goto LAB_001066aa;\n            }\n            ptrChar2 = (char *)((long)ptrChar2 + (long)_optind * 8 + -8);\n            uintVar = (int)ptrFile - (_optind + -1);\n            ptrFile = (FILE *)(ulong)uintVar;\n            _optind = 0;\n            if (1 < (int)uintVar) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)localFile & 0xff);\n          uintVar = (uint)unaff_R12;\n          ptrUndefined1 = (undefined1 *)((int *)ptrChar2 + (long)_optind * 2);\n          if (show_help == 0) {\n            if (show_version != 0) {\n              print_version(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (mri_mode == 0) {\n              ptrFile2 = (FILE *)ptrChar2;\n              if (*(long *)ptrUndefined1 == 0) goto switchD_00107462_caseD_1;\n              if (operation == 7) {\n                if (write_armap == 0) {\n                  if (uintVar6 == 3) goto LAB_00106abc;\n                  if (uintVar6 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  ptrCharVar = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                operation = 2;\n                if (newer_only != 0) goto LAB_0010704f;\n              }\n              else if ((uintVar6 == 3) || (uintVar6 == 0)) {\n                if (write_armap == 1) {\n                  uintVar3 = ranlib_only();\n                    \n                  xexit(uintVar3);\n                }\nLAB_00106abc:\n                if (uintVar6 == 0) goto LAB_00106eff;\n                if (newer_only != 0) {\nLAB_00106ad1:\n                  ptrCharVar = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (newer_only != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\nLAB_00106720:\n              ptrChar1 = (char *)0x0;\n              if (postype != 0) {\n                posname = *(long *)ptrUndefined1;\n                ptrChar1 = (char *)0x1;\n                ptrCharVar = \"missing position arg.\";\n                if (posname == 0) goto LAB_00106803;\n              }\n              if (counted_name_mode != '\\0') {\n                ptrCharVar = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((operation & 0xfffffffb) == 1) {\n                  intVar = (int)ptrChar1;\n                  if (*(char **)((long)ptrUndefined1 + (long)intVar * 2 * 4) == (char *)0x0) {\n                    ulongVar2 = dcgettext(0,\"`N\\' missing value.\",5);\n                    fatal(ulongVar2);\n                    uintVar6 = uintVar4;\nLAB_00107548:\n                    if (uintVar6 == 2) {\nLAB_0010704f:\n                      ptrCharVar = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (deterministic < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  ptrChar1 = (char *)(ulong)(intVar + 1);\n                  longVar1 = strtol(*(char **)((long)ptrUndefined1 + (long)intVar * 2 * 4),(char **)0x0,10);\n                  ptrCharVar = \"Value for `N\\' must be positive.\";\n                  counted_name_counter = (int)longVar1;\n                  if (0 < counted_name_counter) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar1 = (long)(int)ptrChar1;\n              ptrFile1 = (FILE *)ptrChar1;\n              if (*(long *)(int *)((long)ptrUndefined1 + longVar1 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              ptrFile1 = (FILE *)((long)ptrUndefined1 + (longVar1 + 1) * 2 * 4);\n              if (*(FILE **)ptrFile1 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                ptrFile1 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ptrUndefined1 + (longVar1 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ptrUndefined1 + (longVar1 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ptrUndefined1 + (longVar1 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ptrUndefined1 + (longVar1 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                ptrFile = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)ptrFile;\n                  ptrFile = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ptrUndefined1 + longVar1 * 2 * 4) + (long)ptrFile * 2) != 0\n                        );\n              }\n              ptrUInt2 = (undefined8 *)open_inarch();\n              ptrFile = ptrFile1;\n              if (operation == 5) {\n                ptrCharVar = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)ptrUInt2 + 0x49) & 0x10) == 0) {\n                  ptrChar1 = (char *)ptrFile1;\n                  if (libdeps != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  map_over_members(ptrUInt2,extract_file,ptrChar1,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (libdeps != (char *)0x0) {\nLAB_00106d5c:\n                sizeVar1 = strlen(libdeps);\n                ptrChar2 = \"__.LIBDEP\";\n                ptrChar1 = (char *)(sizeVar1 + 1);\n                libdeps_bfd = bfd_create(\"__.LIBDEP\",ptrUInt2);\n                if (libdeps_bfd == 0) {\n                  ptrCharVar = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar1 = bfd_find_target(\"binary\",libdeps_bfd);\n                  ptrCharVar = \"Cannot set libdeps record type to binary.\";\n                  if (longVar1 != 0) {\n                    charVar = bfd_set_format(libdeps_bfd,1,5);\n                    ptrCharVar = \"Cannot set libdeps object format.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    charVar = bfd_make_writable(libdeps_bfd,\"Cannot set libdeps object format.\",5);\n                    ptrCharVar = \"Cannot make libdeps object writable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    ptrFile2 = (FILE *)bfd_bwrite(libdeps,ptrChar1,libdeps_bfd);\n                    ptrCharVar = \"Cannot write libdeps record.\";\n                    if (ptrFile2 != (FILE *)ptrChar1) goto LAB_00106803;\n                    charVar = bfd_make_readable(libdeps_bfd,\"Cannot write libdeps record.\",5);\n                    ptrCharVar = \"Cannot make libdeps object readable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    longVar1 = bfd_find_target(\"plugin\",libdeps_bfd,5);\n                    ptrCharVar = \"Cannot reset libdeps record type.\";\n                    if (longVar1 == 0) goto LAB_00106803;\n                    intVar = (int)pcVar43;\n                    localFile = (FILE *)((long)(intVar + 2) * 8);\n                    ptrChar1 = (char *)xmalloc(localFile,\"Cannot reset libdeps record type.\");\n                    if (intVar == 0) {\n                      longVar1 = 0;\n                    }\n                    else {\n                      uintVar3 = *(undefined4 *)&ptrFile1->field_0x4;\n                      *(int *)ptrChar1 = ptrFile1->_flags;\n                      *(undefined4 *)((long)ptrChar1 + 4) = uintVar3;\n                      longVar1 = 8;\n                      ppcVar31 = (char **)((long)ptrChar1 + 8);\n                      for (pcVar43 = localFile[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&ptrFile1->_flags;\n                        ptrFile1 = (FILE *)((long)ptrFile1 + (ulong)byteVar3 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byteVar3 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)ptrChar1 + longVar1) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)ptrChar1 + -0xd8))->_unused2 + 0xc + (long)localFile) = 0;\n                    switch(operation) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      ptrFile1 = (FILE *)ptrChar1;\n                      if (silent_create == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(operation) {\n              case 1:\n                ptrChar1 = (char *)ptrFile1;\n                if (ptrFile1 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                ptrFile = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                ptrChar1 = (char *)ptrFile1;\n                if ((ptrFile1 != (FILE *)0x0) || (0 < write_armap)) {\nswitchD_00106ed8_caseD_2:\n                  replace_members(ptrUInt2,ptrChar1,operation == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                ptrChar1 = (char *)ptrFile1;\nswitchD_00106ed8_caseD_3:\n                map_over_members(ptrUInt2,print_descr,ptrChar1,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                ptrChar1 = (char *)ptrFile1;\nswitchD_00106ed8_caseD_4:\n                map_over_members(ptrUInt2,print_contents,ptrChar1,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                ptrCharVar = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (silent_create != 0) goto switchD_001067e8_caseD_2;\n                if (ptrFile1 == (FILE *)0x0) break;\nLAB_00106afb:\n                ptrFile = (FILE *)(ptrUInt2 + 0x1e);\n                do {\n                  unaff_R12 = ptrFile;\n                  if (*(FILE **)ptrFile1 == (FILE *)0x0) {\nLAB_00106b9f:\n                    write_archive(ptrUInt2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    ptrLong1 = *(long **)unaff_R12;\n                    ptrChar2 = *(char **)ptrFile1;\n                    if (ptrLong1 == (long *)0x0) {\n                      ulongVar2 = *ptrUInt2;\n                      ulongVar3 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      fatal(ulongVar3,ptrChar2,ulongVar2);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar1 = *ptrLong1;\n                    ulongVar2 = normalize(ptrChar2,ptrUInt2);\n                    intVar = filename_cmp(ulongVar2,longVar1);\n                    if (intVar == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)ptrLong1[0x1e];\n                  ptrPtrLongs = (long **)get_pos_bfd(ptrFile,3,0);\n                  boolVar3 = verbose != 0;\n                  ptrLong = *ptrPtrLongs;\n                  *ptrPtrLongs = ptrLong1;\n                  ptrLong1[0x1e] = (long)ptrLong;\n                  if (boolVar3) {\n                    printf(\"m - %s\\n\",*(FILE **)ptrFile1);\n                  }\n                  ptrFile1 = (FILE *)&ptrFile1->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < deterministic) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            usage(1);\n          }\n          deterministic = 1;\nLAB_0010755f:\n          intVar = fileno(_stdin);\n          interactive = isatty(intVar);\n          yyparse_isra_0();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        uintVar3 = bfd_get_error();\n        ptrFile1 = (FILE *)bfd_errmsg(uintVar3);\n        ulongVar2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar = fatal(ulongVar2,\"x86_64-pc-linux-gnu\",ptrFile1);\nLAB_0010751b:\n        if (operation == 0) {\nLAB_00107447:\n          ptrUndefined1 = ptrCharVar;\n          ptrFile2 = (FILE *)ptrChar2;\n          switch(intVar) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            deterministic = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            mri_mode = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            counted_name_mode = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            display_offsets = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            full_pathname = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            write_armap = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            make_thin_archive = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            deterministic = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            show_version = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            postype = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            postype = 1;\n            goto LAB_001065a2;\n          case 99:\n            silent_create = 1;\n            goto LAB_001065a2;\n          case 100:\n            operation = 1;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            ar_truncate = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (libdeps == (char *)0x0) {\n              libdeps = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar = (uint)unaff_R12;\n            ptrCharVar = \"libdeps specified more than once\";\n            ptrChar1 = (char *)ptrFile1;\n            break;\n          case 0x6d:\n            operation = 6;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            preserve_dates = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            operation = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            operation = 7;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            operation = 2;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            write_armap = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            operation = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            newer_only = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            verbose = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            operation = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            target = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            output_dir = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        ptrCharVar = \"two different operation options specified\";\n        ptrChar1 = (char *)ptrFile1;\nLAB_00106803:\n        ulongVar2 = dcgettext(0,ptrCharVar,5);\n        fatal(ulongVar2);\nLAB_00106814:\n        intVar = (int)ptrChar2;\n        ptrFile2 = (FILE *)xmalloc(8);\n        *(long **)ptrFile2 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar = 0;\n          }\n          else {\n            longVar1 = 1;\n            do {\n              intVar = (int)longVar1;\n              longVar3 = longVar1 * 2;\n              longVar1 = longVar1 + 1;\n            } while (*(long *)((int *)pcVar43 + longVar3) != 0);\n          }\n          ptrFile1 = (FILE *)xmalloc((long)(intVar + 1) << 3);\n          ptrLong1 = *(long **)pcVar43;\n          longVar1 = 0;\n          while (ptrLong1 != (long *)0x0) {\n            ulongVar2 = xstrdup();\n            *(undefined8 *)((long)&ptrFile1->_flags + longVar1) = ulongVar2;\n            ptrLong1 = *(long **)((char *)((long)pcVar43 + 0x83) + longVar1 + -0x7b);\n            longVar1 = longVar1 + 8;\n          }\n          *(undefined8 *)((long)&ptrFile1->_flags + longVar1) = 0;\nLAB_0010610a:\n          intVar = (int)ptrChar2;\n          pcVar43 = (char *)ptrFile1;\n          if (*(long **)ptrFile2 == (long *)0x0) goto LAB_00106a80;\n          longVar1 = 0;\n          do {\n            longVar2 = longVar1 + 1;\n            longVar3 = longVar1 * 8;\n            longVar1 = longVar2;\n          } while (*(long *)(ptrFile2->_shortbuf + longVar3 + -0x7b) != 0);\n          localSize = longVar2 * 8;\n        }\n        else {\nLAB_00106a80:\n          longVar2 = 0;\n          localSize = 0;\n        }\n        longVar1 = (long)ptrChar1 * 2;\n        ptrChar1 = (char *)((long)(char **)ptrChar1 + longVar2);\n        free(*(void **)((int *)pcVar43 + longVar1));\n        ptrFile1 = (FILE *)xrealloc(pcVar43,(longVar2 + 1 + (long)intVar) * 8);\n        uintVar6 = intVar + -1 + (int)longVar2;\n        ptrChar2 = (char *)(ulong)uintVar6;\n        memmove(&ptrFile1->_flags + (long)ptrChar1 * 2,\n                (void *)((long)&ptrFile1->_IO_read_ptr + (long)localFile),\n                (long)(int)(intVar - uintVar) << 3);\n        memcpy((void *)((long)&localFile->_flags + (long)&ptrFile1->_flags),ptrFile2,localSize);\n        free(ptrFile2);\n        free(localByte);\n        fclose(ptrFile);\n        uintVar = (int)localFile1 + 1;\n        unaff_R12 = localFile;\n        pcVar43 = (char *)ptrFile1;\n        localFile = ptrFile2;\n        if ((int)uintVar < (int)uintVar6) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar = uintVar + 1;\n    localFile1 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar = getopt_long((ulong)ptrFile & 0xffffffff,ptrChar2,ptrFile1,\"x86_64-pc-linux-gnu\");\n  ptrChar1 = (char *)ptrFile1;\n  if (intVar == -1) goto LAB_00106680;\n  if ((0x14 < intVar - 100U) || ((0x117201UL >> ((byte)(intVar - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (deterministic != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  ulongVar2 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  non_fatal(ulongVar2);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)ptrChar1 == (FILE *)0x0) {\n    if ((char)ptrFile != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    output_filename = 0;\n    goto LAB_0010696c;\n  }\n  intVar2 = 0;\n  intVar = strcmp((char *)*(FILE **)ptrChar1,\"__.SYMDEF\");\n  ptrVoid = ptrUInt2;\n  if (intVar == 0) {\n    *(byte *)((long)ptrUInt2 + 0x49) = *(byte *)((long)ptrUInt2 + 0x49) & 0xf7;\n    write_armap = -1;\n  }\n  else {\n    while( true ) {\n      ptrLong1 = ptrVoid + 0x1e;\n      if ((undefined8 *)*ptrLong1 == (undefined8 *)0x0) break;\n      ulongVar2 = *(undefined8 *)*ptrLong1;\n      ulongVar3 = normalize(*(FILE **)ptrChar1,ptrUInt2);\n      intVar = filename_cmp(ulongVar3,ulongVar2);\n      if ((intVar == 0) &&\n         ((counted_name_mode == '\\0' || (intVar2 = intVar2 + 1, intVar2 == counted_name_counter)))) {\n        if (verbose != 0) {\n          printf(\"d - %s\\n\",*(FILE **)ptrChar1);\n        }\n        *ptrLong1 = *(long *)(*ptrLong1 + 0xf0);\n        ptrFile = unaff_R12;\n        goto LAB_00106d38;\n      }\n      ptrVoid = (undefined8 *)*ptrLong1;\n    }\n    if (verbose != 0) {\n      ptrFile1 = *(FILE **)ptrChar1;\n      ptrChar2 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(ptrChar2,ptrFile1);\n    }\n  }\nLAB_00106d38:\n  ptrChar1 = (char *)((long)ptrChar1 + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "fprintf",
                "memmove",
                "bfd_create",
                "fclose",
                "ranlib_usage",
                "strcmp",
                "xstrdup",
                "textdomain",
                "bfd_set_error_program_name",
                "bfd_get_error",
                "print_version",
                "usage",
                "free",
                "replace_members",
                "write_archive",
                "fileno",
                "strtol",
                "bfd_bwrite",
                "open_inarch",
                "fseek",
                "map_over_members",
                "xatexit_cleanup",
                "normalize",
                "bfd_make_writable",
                "bfd_fdopenr",
                "get_pos_bfd",
                "bindtextdomain",
                "bfd_errmsg",
                "open",
                "strlen",
                "stat",
                "xmalloc_set_program_name",
                "bfd_nonfatal",
                "yyparse.isra.0",
                "print_descr",
                "ar_emul_default_parse_arg",
                "bfd_init",
                "remove_output",
                "ranlib_only",
                "bfd_close",
                "bfd_plugin_set_program_name",
                "extract_file",
                "getopt_long",
                "bfd_set_default_target",
                "fopen",
                "memcpy",
                "ftell",
                "bfd_find_target",
                "bfd_fatal",
                "bfd_check_format_matches",
                "bfd_set_format",
                "non_fatal",
                "print_contents",
                "bfd_plugin_set_plugin",
                "malloc",
                "list_matching_formats",
                "fread",
                "ferror",
                "setlocale",
                "bfd_make_readable",
                "fatal",
                "get_file_size",
                "dcgettext",
                "isatty",
                "xexit",
                "xrealloc",
                "filename_cmp",
                "printf",
                "xmalloc",
                "bfd_set_error",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "process_files_00105db0"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main",
                "ar_open",
                "write_archive",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matched_formats_00103bd1",
                "param_1": "formatList",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "programName"
            },
            "code": "\n\n\nvoid printMatchedFormats_00103bd1(long *formatList)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,programName);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "free",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "print_matched_formats_00103bd1"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main",
                "make_tempname.cold",
                "list_supported_targets",
                "print_contents",
                "yyparse.isra.0",
                "extract_file.cold",
                "list_matching_formats",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "improved_code_extraction_00102710",
                "lVar5": "file_handle",
                "cVar2": "format_matches",
                "bVar3": "thin_library",
                "iVar4": "error_code",
                "puVar8": "output_file_handle",
                "unaff_RBP": "output_filename",
                "in_stack_00000008": "format_options",
                "target": "binary_target",
                "silent_create": "create_silently",
                "make_thin_archive": "convert_to_thin_archive",
                "uVar7": "message",
                "uVar6": "translation_message"
            },
            "code": "\nundefined8 * improved_code_extraction_00102710(void)\n\n{\n  long *plVar1;\n  char format_matches;\n  byte thin_library;\n  int error_code;\n  long file_handle;\n  undefined8 translation_message;\n  undefined8 message;\n  undefined8 *output_file_handle;\n  undefined8 output_filename;\n  undefined8 format_options;\n  \n  file_handle = bfd_openr();\n  if (file_handle != 0) {\n    format_matches = bfd_check_format(file_handle,1);\n    if (format_matches != '\\0') {\n      binary_target = **(undefined8 **)(file_handle + 8);\n    }\n    bfd_close(file_handle);\n  }\n  output_file_handle = (undefined8 *)bfd_openw();\n  if (((output_file_handle != (undefined8 *)0x0) && (format_matches = bfd_set_format(output_file_handle,2), format_matches != '\\0')) &&\n     (format_matches = bfd_close(output_file_handle), format_matches != '\\0')) {\n    if (create_silently == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  bfd_fatal();\n  do {\n    thin_library = *(byte *)((long)output_file_handle + 0x49) >> 4 & 1;\n    if (convert_to_thin_archive == '\\0') {\n      if (thin_library != 0) {\n        message = *output_file_handle;\n        translation_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(translation_message,message);\n        goto LAB_00102812;\n      }\n    }\n    else if (thin_library == 0) {\n      message = *output_file_handle;\n      translation_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(translation_message,message);\nLAB_001027cb:\n      bfd_nonfatal();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        list_matching_formats(format_options);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      plVar1 = output_file_handle + 0x1e;\n      for (file_handle = bfd_openr_next_archived_file(output_file_handle,0); file_handle != 0;\n          file_handle = bfd_openr_next_archived_file(output_file_handle,file_handle)) {\n        *plVar1 = file_handle;\n        plVar1 = (long *)(file_handle + 0xf0);\n      }\n      *plVar1 = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_file_handle;\n      }\n      do {\n        bfd_fatal();\nLAB_00102826:\n        message = dcgettext(0,\"creating %s\",5);\n        non_fatal(message);\nLAB_001053b7:\n        output_filename = output_filename;\n        output_file_handle = (undefined8 *)bfd_openr();\n      } while (output_file_handle == (undefined8 *)0x0);\n      format_matches = bfd_check_format_matches(output_file_handle,2,&stack0x00000008);\n      if (format_matches == '\\0') goto LAB_001027cb;\n    } while (((operation != 2) && (operation != 7)) ||\n            (file_handle = bfd_openr_next_archived_file(output_file_handle,0), file_handle == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "open_inarch"
            ],
            "imported": false,
            "current_name": "improved_code_extraction_00102710"
        },
        "FUN_0010e2b0": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b0",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b0"
        },
        "FUN_0010e208": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e208",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010e208"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "reverse_function_00103e95",
                "pplVar1": "doublePointerList",
                "cVar2": "characterVar",
                "ppFVar3": "doublePointerToFile",
                "pFVar4": "filePointer",
                "plVar5": "longVar",
                "uVar6": "unsignedVar",
                "pbVar7": "bytePointer",
                "iVar8": "integerVar",
                "pcVar10": "pointerCharacterVar",
                "uVar11": "unsignedVar",
                "iVar9": "integerVar",
                "plVar12": "longVar",
                "sVar13": "sizeVar",
                "pvVar14": "voidPointer",
                "pcVar15": "pointerCharacterVar",
                "pcVar16": "pointerCharacterVar",
                "lVar17": "longVar",
                "lVar18": "longVar",
                "uVar19": "unsignedVar",
                "uVar20": "unsignedVar",
                "lVar21": "longVar",
                "puVar22": "unsignedLongPointer",
                "puVar23": "unsignedLongPointer",
                "uVar24": "unsignedVar",
                "iVar25": "integerVar",
                "uVar26": "unsignedVar",
                "ppcVar27": "doublePointerToCharacter",
                "bVar28": "boolVar",
                "ppcVar29": "doublePointerToCharacter",
                "bVar30": "byteVar",
                "lVar31": "longVar",
                "pbVar32": "bytePointer",
                "pbVar33": "bytePointer",
                "piVar34": "integerPointer",
                "pbVar35": "bytePointer",
                "local_828": "localPointer",
                "local_820": "localPointer",
                "local_818": "localLong",
                "local_810": "localDoublePointerToCharacter",
                "local_800": "localInteger",
                "local_7fc": "localUnsigned",
                "local_7f8": "localBytePointer",
                "local_7d0": "localStat",
                "local_740": "localCharacterArray",
                "local_678": "localCharacterArray"
            },
            "code": "\n\n\nvoid reverseFunction_00103e95(void)\n\n{\n  long **doublePointerList;\n  char characterVar;\n  FILE **doublePointerToFile;\n  FILE *filePointer;\n  long *longVar;\n  undefined8 unsignedVar;\n  byte *bytePointer;\n  int integerVar;\n  char *pointerCharacterVar;\n  undefined8 unsignedVar;\n  int integerVar;\n  long *longVar;\n  size_t sizeVar;\n  void *voidPointer;\n  char *pointerCharacterVar;\n  char *pointerCharacterVar;\n  long longVar;\n  long longVar;\n  ulong unsignedVar;\n  uint unsignedVar;\n  long longVar;\n  undefined8 *unsignedLongPointer;\n  undefined8 *unsignedLongPointer;\n  uint unsignedVar;\n  int integerVar;\n  ulong unsignedVar;\n  char **doublePointerToCharacter;\n  bool boolVar;\n  char **doublePointerToCharacter;\n  byte byteVar;\n  long longVar;\n  byte *bytePointer;\n  byte *bytePointer;\n  int *integerPointer;\n  byte *bytePointer;\n  uint uVar36;\n  int iVar37;\n  char **ppcVar38;\n  byte bVar39;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *localPointer;\n  char *localPointer;\n  long localLong;\n  char **localDoublePointerToCharacter;\n  int localInteger;\n  uint localUnsigned;\n  byte *localBytePointer;\n  stat localStat;\n  char localCharacterArray [200];\n  char *localCharacterArray [201];\n  \n  bVar39 = 0;\n  longVar = 0;\n  yychar = -2;\n  doublePointerToCharacter = localCharacterArray;\n  localInteger = 0;\n  localPointer = localCharacterArray;\n  localLong = 200;\n  localPointer = localPointer;\n  localDoublePointerToCharacter = doublePointerToCharacter;\nLAB_00103ee9:\n  *localPointer = (char)longVar;\n  if (localPointer + localLong + -1 <= localPointer) {\n    longVar = (long)localPointer - (long)localPointer;\n    longVar = longVar + 1;\n    if (localLong < 10000) {\n      longVar = localLong * 2;\n      localLong = 10000;\n      if (longVar < 0x2711) {\n        localLong = longVar;\n      }\n      pointerCharacterVar = (char *)malloc(localLong * 9 + 7);\n      if (pointerCharacterVar != (char *)0x0) {\n        longVar = longVar * 8;\n        pointerCharacterVar = localPointer;\n        pointerCharacterVar = pointerCharacterVar;\n        for (; longVar != 0; longVar = longVar + -1) {\n          *pointerCharacterVar = *pointerCharacterVar;\n          pointerCharacterVar = pointerCharacterVar + (ulong)bVar39 * -2 + 1;\n          pointerCharacterVar = pointerCharacterVar + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(pointerCharacterVar + localLong);\n        doublePointerToCharacter = ppcVar38;\n        for (; longVar != 0; longVar = longVar + -1) {\n          *(undefined *)doublePointerToCharacter = *(undefined *)localDoublePointerToCharacter;\n          localDoublePointerToCharacter = (char **)((long)localDoublePointerToCharacter + (ulong)bVar39 * -2 + 1);\n          doublePointerToCharacter = (char **)((long)doublePointerToCharacter + (ulong)bVar39 * -2 + 1);\n        }\n        if (localPointer != localCharacterArray) {\n          free(localPointer);\n        }\n        localPointer = pointerCharacterVar + longVar;\n        doublePointerToCharacter = ppcVar38 + longVar;\n        localPointer = pointerCharacterVar;\n        localDoublePointerToCharacter = ppcVar38;\n        if (pointerCharacterVar + localLong + -1 <= localPointer) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    yyerror_constprop_0();\nLAB_0010524c:\n    pointerCharacterVar = localPointer;\n    if (localPointer == localCharacterArray) {\n      return;\n    }\nLAB_00105265:\n    free(pointerCharacterVar);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)longVar;\n  if (iVar37 == 3) goto LAB_0010524c;\n  characterVar = (&yypact)[iVar37];\n  if (characterVar != -0xe) {\n    if (yychar == -2) {\n      if (yy_init == 0) {\n        yy_init = 1;\n        if (yy_start == 0) {\n          yy_start = 1;\n        }\n        if (yyin == (FILE *)0x0) {\n          yyin = _stdin;\n        }\n        if (yyout == (FILE *)0x0) {\n          yyout = _stdout;\n        }\n        if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0)) {\n          yyensure_buffer_stack();\n          unsignedLongPointer = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          unsignedVar = yy_create_buffer_constprop_0(yyin);\n          *unsignedLongPointer = unsignedVar;\n        }\n        yy_load_buffer_state();\n      }\nLAB_001040b1:\n      *yy_c_buf_p = yy_hold_char;\n      bytePointer = yy_c_buf_p;\n      bytePointer = yy_c_buf_p;\n      unsignedVar = yy_start;\nLAB_001040d4:\n      unsignedVar = (ulong)unsignedVar;\n      unsignedVar = (ulong)localUnsigned;\n      boolVar = false;\n      do {\n        byteVar = yy_ec[*bytePointer];\n        if (*(short *)(yy_accept + (long)(int)unsignedVar * 2) != 0) {\n          boolVar = true;\n          unsignedVar = unsignedVar & 0xffffffff;\n          localBytePointer = bytePointer;\n        }\n        while( true ) {\n          integerVar = (int)unsignedVar;\n          longVar = (long)(int)((int)*(short *)(yy_base + (long)integerVar * 2) + (uint)byteVar);\n          if (integerVar == *(short *)(yy_chk + longVar * 2)) break;\n          unsignedVar = (ulong)(uint)(int)*(short *)(yy_def + (long)integerVar * 2);\n          if (0xb0 < *(short *)(yy_def + (long)integerVar * 2)) {\n            byteVar = yy_meta[(int)(uint)byteVar];\n          }\n        }\n        bytePointer = bytePointer + 1;\n        unsignedVar = (ulong)*(short *)(yy_nxt + longVar * 2);\n      } while (*(short *)(yy_base + unsignedVar * 2) != 0xc2);\n      localUnsigned = (uint)unsignedVar;\n      bytePointer = bytePointer;\n      if (boolVar) {\n        yy_last_accepting_cpos = localBytePointer;\n        yy_last_accepting_state = localUnsigned;\n      }\nLAB_0010419f:\n      integerVar = (int)*(short *)(yy_accept + (long)(int)unsignedVar * 2);\n      if (integerVar == 0) {\n        integerVar = (int)*(short *)(yy_accept + (long)(int)yy_last_accepting_state * 2);\n        bytePointer = yy_last_accepting_cpos;\n      }\n      yyleng = (int)bytePointer - (int)bytePointer;\n      yy_hold_char = *bytePointer;\n      yy_c_buf_p = bytePointer;\n      yytext = bytePointer;\n      *bytePointer = 0;\nLAB_001041f0:\n      bytePointer = yytext;\n      longVar = yy_buffer_stack_top;\n      switch(integerVar) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        yychar = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        yychar = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        yychar = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        yychar = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        yychar = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        yychar = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        yychar = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        yychar = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        yychar = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        yychar = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        yychar = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        yychar = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        yychar = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        yychar = 0x103;\n        break;\n      case 0x1f:\n        linenumber = linenumber + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        yychar = 0x28;\n        break;\n      case 0x21:\n        yychar = 0x29;\n        break;\n      case 0x22:\n        yychar = 0x2c;\n        break;\n      case 0x23:\n        yylval = (char *)xstrdup(yytext);\n        yychar = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        linenumber = linenumber + 1;\n        yychar = 0x102;\n        break;\n      case 0x28:\n        fwrite(yytext,(long)yyleng,1,yyout);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        yychar = 0;\n        break;\n      default:\n        yy_fatal_error(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        yychar = 0x112;\n      }\n      longVar = (long)iVar37;\n    }\n    if (0 < yychar) {\n      if (yychar != 0x100) {\n        iVar37 = 2;\n        if (yychar < 0x114) {\n          iVar37 = (int)(char)yytranslate[yychar];\n        }\n        goto LAB_0010497d;\n      }\n      yychar = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    yychar = 0;\nLAB_0010497d:\n    unsignedVar = characterVar + iVar37;\n    if ((0x22 < unsignedVar) || (iVar37 != (char)yycheck[(int)unsignedVar])) goto LAB_001049db;\n    characterVar = yytable[(int)unsignedVar];\n    longVar = (long)characterVar;\n    if (characterVar < '\\x01') {\n      iVar37 = -(int)characterVar;\n      goto LAB_00104a0a;\n    }\n    yychar = -2;\n    localInteger = localInteger + -1 + (uint)(localInteger == 0);\n    doublePointerToCharacter = doublePointerToCharacter + 1;\n    *doublePointerToCharacter = yylval;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&yydefact)[(int)longVar];\n  if ((&yydefact)[(int)longVar] == '\\0') {\n    if (localInteger == 0) {\n      yynerrs = yynerrs + 1;\n      yyerror_constprop_0();\nLAB_001051f0:\n      do {\n        if (((((char)(&yypact)[longVar] != -0xe) &&\n             (unsignedVar = (int)(char)(&yypact)[longVar] + 1, unsignedVar < 0x23)) &&\n            (yycheck[(int)unsignedVar] == '\\x01')) &&\n           (longVar = (long)(char)yytable[(int)unsignedVar], '\\0' < (char)yytable[(int)unsignedVar]))\n        goto LAB_00105227;\n        if (localPointer == localPointer) goto LAB_0010524c;\n        localPointer = localPointer + -1;\n        doublePointerToCharacter = doublePointerToCharacter + -1;\n        longVar = (long)*localPointer;\n      } while( true );\n    }\n    if (localInteger != 3) goto LAB_001051f0;\n    if (0 < yychar) {\n      yychar = -2;\n      goto LAB_001051f0;\n    }\n    if (yychar != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  unsignedVar = program_name;\n  doublePointerToCharacter = obfd;\n  characterVar = yyr2[iVar37];\n  ppcVar38 = (char **)doublePointerToCharacter[1 - characterVar];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    prompt();\n    break;\n  case 0x13:\n    if (obfd == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*obfd);\n    return;\n  case 0x15:\n    yyerror_constprop_0();\n    break;\n  case 0x17:\n    unsignedLongPointer = (undefined8 *)*doublePointerToCharacter;\n    if (obfd == (char **)0x0) {\n      pointerCharacterVar = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pointerCharacterVar = (char *)dcgettext(0,pointerCharacterVar,5);\n      fprintf(_stderr,pointerCharacterVar,unsignedVar);\n      maybequit();\n    }\n    else {\n      for (; unsignedLongPointer != (undefined8 *)0x0; unsignedLongPointer = (undefined8 *)unsignedLongPointer[1]) {\n        for (unsignedLongPointer = (undefined8 *)obfd[0x1f]; unsignedLongPointer != (undefined8 *)0x0;\n            unsignedLongPointer = (undefined8 *)unsignedLongPointer[0x1e]) {\n          integerVar = filename_cmp(*unsignedLongPointer);\n          if (integerVar == 0) {\n            extract_file();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*unsignedLongPointer,0);\n        unsignedVar = program_name;\n        unsignedVar = *unsignedLongPointer;\n        pointerCharacterVar = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerCharacterVar,unsignedVar,unsignedVar);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    unsignedLongPointer = (undefined8 *)*doublePointerToCharacter;\n    if (obfd == (char **)0x0) {\nLAB_00104b4f:\n      pointerCharacterVar = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; unsignedLongPointer != (undefined8 *)0x0; unsignedLongPointer = (undefined8 *)unsignedLongPointer[1]) {\n      boolVar = false;\n      doublePointerToCharacter = obfd + 0x1f;\n      for (pointerCharacterVar = obfd[0x1f]; pointerCharacterVar != (char *)0x0; pointerCharacterVar = *(char **)(pointerCharacterVar + 0xf0)) {\n        integerVar = filename_cmp();\n        if (integerVar == 0) {\n          pointerCharacterVar = (char *)bfd_openr(*unsignedLongPointer,0);\n          unsignedVar = program_name;\n          if (pointerCharacterVar == (char *)0x0) {\n            unsignedVar = *unsignedLongPointer;\n            pointerCharacterVar = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pointerCharacterVar,unsignedVar,unsignedVar);\n            maybequit();\n          }\n          else {\n            *doublePointerToCharacter = pointerCharacterVar;\n            boolVar = true;\n            *(undefined8 *)(pointerCharacterVar + 0xf0) = *(undefined8 *)(pointerCharacterVar + 0xf0);\n          }\n        }\n        else {\n          doublePointerToCharacter = (char **)(pointerCharacterVar + 0xf0);\n        }\n      }\n      if (!boolVar) {\n        pointerCharacterVar = (char *)bfd_openr(*unsignedLongPointer,0);\n        unsignedVar = program_name;\n        unsignedVar = *unsignedLongPointer;\n        pointerCharacterVar = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerCharacterVar,unsignedVar,unsignedVar);\n        unsignedVar = program_name;\n        if (pointerCharacterVar == (char *)0x0) {\n          unsignedVar = *unsignedLongPointer;\n          pointerCharacterVar = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pointerCharacterVar,unsignedVar,unsignedVar);\n          maybequit();\n        }\n        else {\n          *doublePointerToCharacter = pointerCharacterVar;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (obfd != (char **)0x0) {\n      obfd[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    unsignedLongPointer = (undefined8 *)*doublePointerToCharacter;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; unsignedLongPointer != (undefined8 *)0x0; unsignedLongPointer = (undefined8 *)unsignedLongPointer[1]) {\n      boolVar = false;\n      doublePointerToCharacter = obfd + 0x1f;\n      for (unsignedLongPointer = (undefined8 *)obfd[0x1f]; unsignedVar = program_name, unsignedLongPointer != (undefined8 *)0x0;\n          unsignedLongPointer = (undefined8 *)unsignedLongPointer[0x1e]) {\n        integerVar = filename_cmp(*unsignedLongPointer,*unsignedLongPointer);\n        if (integerVar == 0) {\n          boolVar = true;\n          *doublePointerToCharacter = (char *)unsignedLongPointer[0x1e];\n        }\n        else {\n          doublePointerToCharacter = (char **)(unsignedLongPointer + 0x1e);\n        }\n      }\n      if (!boolVar) {\n        unsignedVar = *unsignedLongPointer;\n        pointerCharacterVar = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerCharacterVar,unsignedVar,unsignedVar);\n        maybequit();\n      }\n    }\n    break;\n  case 0x1b:\n    unsignedLongPointer = (undefined8 *)*doublePointerToCharacter;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; unsignedLongPointer != (undefined8 *)0x0; unsignedLongPointer = (undefined8 *)unsignedLongPointer[1]) {\n      pointerCharacterVar = (char *)bfd_openr(*unsignedLongPointer,\"plugin\");\n      unsignedVar = program_name;\n      doublePointerToCharacter = obfd;\n      if (pointerCharacterVar == (char *)0x0) {\n        unsignedVar = *unsignedLongPointer;\n        pointerCharacterVar = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pointerCharacterVar,unsignedVar,unsignedVar);\n        maybequit();\n      }\n      else {\n        *(char **)(pointerCharacterVar + 0xf0) = obfd[0x1f];\n        doublePointerToCharacter[0x1f] = pointerCharacterVar;\n      }\n    }\n    break;\n  case 0x1c:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    pointerCharacterVar = *obfd;\n    verbose = 1;\n    outfile = _stdout;\n    pointerCharacterVar = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pointerCharacterVar,pointerCharacterVar);\n    for (pointerCharacterVar = obfd[0x1f]; pointerCharacterVar != (char *)0x0; pointerCharacterVar = *(char **)(pointerCharacterVar + 0xf0)) {\n      ar_directory_doer(pointerCharacterVar,0);\n    }\n    break;\n  case 0x1d:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    if (0 < deterministic) {\n      *(uint *)((long)obfd + 0x44) = *(uint *)((long)obfd + 0x44) | 0x2000;\n    }\n    temp_fd = dup(temp_fd);\n    bfd_close(doublePointerToCharacter);\n    pointerCharacterVar = real_name;\n    integerVar = stat(real_name,&localStat);\n    if ((integerVar != 0) && (obfd = (char **)bfd_openw(pointerCharacterVar,0), obfd != (char **)0x0)) {\n      bfd_set_format(obfd,2);\n      bfd_close(obfd);\n    }\n    smart_rename_constprop_0(temp_name,real_name,temp_fd);\n    obfd = (char **)0x0;\n    free(temp_name);\n    free(real_name);\n    break;\n  case 0x1e:\n    ar_open(*doublePointerToCharacter,0);\n    break;\n  case 0x1f:\n    ar_open(*doublePointerToCharacter,1);\n    break;\n  case 0x20:\n    pointerCharacterVar = *doublePointerToCharacter;\n    if (obfd == (char **)0x0) {\n      pointerCharacterVar = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    longVar = open_inarch(doublePointerToCharacter[-1],0);\n    if (longVar != 0) {\n      map_over_list(longVar,ar_addlib_doer,pointerCharacterVar);\n    }\n    break;\n  case 0x21:\n    pointerCharacterVar = *doublePointerToCharacter;\n    pointerCharacterVar = doublePointerToCharacter[-1];\n    unsignedVar = open_inarch(doublePointerToCharacter[-2],0);\n    if (pointerCharacterVar == (char *)0x0) {\n      outfile = _stdout;\n    }\n    else {\n      outfile = fopen(pointerCharacterVar,\"w\");\n      if (outfile != (FILE *)0x0) {\n        map_over_list(unsignedVar,ar_directory_doer,pointerCharacterVar);\n        bfd_close(unsignedVar);\n        fclose(outfile);\n        break;\n      }\n      outfile = _stdout;\n      pointerCharacterVar = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pointerCharacterVar,pointerCharacterVar);\n    }\n    map_over_list(unsignedVar,ar_directory_doer,pointerCharacterVar);\n    bfd_close(unsignedVar);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*doublePointerToCharacter;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)doublePointerToCharacter[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    pointerCharacterVar = doublePointerToCharacter[-2];\n    *ppcVar38 = *doublePointerToCharacter;\n    ppcVar38[1] = pointerCharacterVar;\n    break;\n  case 0x2a:\n    verbose = (uint)(verbose == 0);\n  }\n  longVar = (long)characterVar;\n  localPointer = localPointer + -longVar;\n  doublePointerToCharacter[1 - longVar] = (char *)ppcVar38;\n  doublePointerToCharacter = doublePointerToCharacter + (1 - longVar);\n  unsignedVar = (int)(char)yypgoto[(char)yyr1[iVar37] + -0x18] + (int)*localPointer;\n  if ((unsignedVar < 0x23) && (*localPointer == yycheck[(int)unsignedVar])) {\n    longVar = (long)(char)yytable[(int)unsignedVar];\n  }\n  else {\n    longVar = (long)(char)yydefgoto[(char)yyr1[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integerVar = ((int)bytePointer - (int)yytext) + -1;\n  *bytePointer = yy_hold_char;\n  doublePointerList = (long **)(yy_buffer_stack + longVar * 8);\n  doublePointerToFile = (FILE **)*doublePointerList;\n  if (*(int *)(doublePointerToFile + 7) == 0) {\n    yy_n_chars = *(uint *)((long)doublePointerToFile + 0x1c);\n    *(undefined4 *)(doublePointerToFile + 7) = 1;\n    *doublePointerToFile = yyin;\n  }\n  bytePointer = yy_c_buf_p;\n  filePointer = doublePointerToFile[1];\n  auVar40._8_8_ = filePointer;\n  auVar40._0_8_ = doublePointerToFile;\n  if ((byte *)((long)&filePointer->_flags + (long)(int)yy_n_chars) < yy_c_buf_p) {\n    if ((byte *)((long)&filePointer->_flags + (long)(int)yy_n_chars + 1) < yy_c_buf_p) {\n      auVar40 = yy_fatal_error();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      unsignedVar = (int)((long)bytePointer - (long)bytePointer) - 1;\n      for (longVar = 0; (int)longVar < (int)unsignedVar; longVar = longVar + 1) {\n        *(byte *)(auVar40._8_8_ + longVar) = bytePointer[longVar];\n      }\n      longVar = *doublePointerList;\n      if (*(int *)(longVar + 7) == 2) {\n        yy_n_chars = 0;\n        *(undefined4 *)((long)longVar + 0x1c) = 0;\nLAB_0010475e:\n        filePointer = yyin;\n        if (unsignedVar == 0) {\n          if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0))\n          {\n            yyensure_buffer_stack();\n            unsignedLongPointer = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n            unsignedVar = yy_create_buffer_constprop_0(filePointer);\n            *unsignedLongPointer = unsignedVar;\n          }\n          longVar = yy_buffer_stack;\n          if (yy_buffer_stack != 0) {\n            longVar = *(long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          }\n          integerVar = 1;\n          yy_init_buffer(longVar);\n          yy_load_buffer_state();\n        }\n        else {\n          integerVar = 2;\n          *(undefined4 *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          longVar = *doublePointerList;\n          unsignedVar = ~unsignedVar + *(int *)(longVar + 3);\n          if (0 < (int)unsignedVar) break;\n          unsignedVar = (int)yy_c_buf_p - (int)(void *)longVar[1];\n          if (*(int *)(longVar + 4) == 0) {\n            longVar[1] = 0;\nLAB_00104626:\n            yy_fatal_error();\n            break;\n          }\n          integerVar = *(int *)(longVar + 3);\n          integerVar = integerVar;\n          if (integerVar < 1) {\n            integerVar = integerVar / 8;\n          }\n          *(int *)(longVar + 3) = integerVar + integerVar;\n          voidPointer = realloc((void *)longVar[1],(long)(integerVar + integerVar + 2));\n          longVar[1] = (long)voidPointer;\n          if (voidPointer == (void *)0x0) goto LAB_00104626;\n          yy_c_buf_p = (byte *)((long)voidPointer + (long)(int)unsignedVar);\n          longVar = *doublePointerList;\n        }\n        if (0x2000 < (int)unsignedVar) {\n          unsignedVar = 0x2000;\n        }\n        unsignedVar = (ulong)unsignedVar;\n        if (*(int *)((long)longVar + 0x24) == 0) {\n          integerPointer = __errno_location();\n          unsignedVar = (ulong)(int)unsignedVar;\n          unsignedVar = (ulong)(int)unsignedVar;\n          *integerPointer = 0;\n          goto LAB_001046c7;\n        }\n        unsignedVar = 0;\n        integerPointer = (int *)(long)(int)unsignedVar;\n        do {\n          integerVar = getc(yyin);\n          uVar36 = (uint)unsignedVar;\n          if (integerVar == -1) {\n            integerVar = ferror(yyin);\n            unsignedVar = uVar36;\n            if (integerVar != 0) {\n              do {\n                pointerCharacterVar = \"input in flex scanner failed\";\n                yy_fatal_error();\n                do {\n                  *integerPointer = 0;\n                  clearerr((FILE *)pointerCharacterVar);\nLAB_001046c7:\n                  sizeVar = fread((void *)(*(long *)(*(long *)(yy_buffer_stack +\n                                                             yy_buffer_stack_top * 8) + 8) + unsignedVar)\n                                 ,1,unsignedVar,yyin);\n                  pointerCharacterVar = (char *)yyin;\n                  yy_n_chars = (uint)sizeVar;\n                  unsignedVar = yy_n_chars;\n                  if ((yy_n_chars != 0) || (integerVar = ferror(yyin), unsignedVar = yy_n_chars, integerVar == 0))\n                  goto LAB_00104738;\n                } while (*integerPointer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (integerVar == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)unsignedVar +\n             (long)(int)uVar36 + *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8)\n             ) = 10;\n            unsignedVar = uVar36 + 1;\n            break;\n          }\n          unsignedVar = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8) +\n                   (long)integerPointer) = (char)integerVar;\n          integerPointer = (int *)((long)integerPointer + 1);\n        } while (unsignedVar != uVar36 + 1);\nLAB_00104738:\n        yy_n_chars = unsignedVar;\n        unsignedVar = yy_n_chars;\n        integerVar = 0;\n        *(uint *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x1c) = yy_n_chars;\n        if (unsignedVar == 0) goto LAB_0010475e;\n      }\n      longVar = (long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n      longVar = *longVar;\n      unsignedVar = unsignedVar + yy_n_chars;\n      if (*(int *)(longVar + 0x18) < (int)unsignedVar) {\n        integerVar = ((int)yy_n_chars >> 1) + unsignedVar;\n        voidPointer = realloc(*(void **)(longVar + 8),(long)integerVar);\n        *(void **)(longVar + 8) = voidPointer;\n        auVar41._8_8_ = longVar;\n        auVar41._0_8_ = *longVar;\n        if (*(long *)(*longVar + 8) == 0) {\n          auVar41 = yy_fatal_error();\n        }\n        longVar = auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) = integerVar + -2;\n      }\n      yy_n_chars = unsignedVar;\n      *(undefined *)(*(long *)(*longVar + 8) + (long)(int)unsignedVar) = 0;\n      *(undefined *)(*(long *)(*longVar + 8) + 1 + (long)(int)unsignedVar) = 0;\n      bytePointer = *(byte **)(*longVar + 8);\n      yytext = bytePointer;\n      if (integerVar == 1) goto LAB_001048a4;\n      if (integerVar == 2) goto LAB_001048ca;\n      bytePointer = bytePointer + integerVar;\n      yy_c_buf_p = bytePointer;\n      unsignedVar = yy_get_previous_state();\n      goto LAB_001040d4;\n    }\n    if ((long)bytePointer - (long)bytePointer == 1) goto LAB_001048a4;\nLAB_001048ca:\n    bytePointer = (byte *)((long)(int)yy_n_chars +\n                      *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8));\n    yy_c_buf_p = bytePointer;\n    unsignedVar = yy_get_previous_state();\n    bytePointer = yytext;\n    goto LAB_0010419f;\n  }\n  bytePointer = bytePointer + integerVar;\n  yy_c_buf_p = bytePointer;\n  unsignedVar = yy_get_previous_state();\n  if (*(short *)(yy_accept + (long)(int)(uint)unsignedVar * 2) != 0) {\n    yy_last_accepting_cpos = bytePointer;\n    yy_last_accepting_state = (uint)unsignedVar;\n  }\n  unsignedVar = unsignedVar & 0xffffffff;\n  while( true ) {\n    integerVar = (int)unsignedVar;\n    if (integerVar == *(short *)(yy_chk + (long)(*(short *)(yy_base + (long)integerVar * 2) + 1) * 2)) break;\n    unsignedVar = (ulong)(uint)(int)*(short *)(yy_def + (long)integerVar * 2);\n  }\n  unsignedVar = (uint)*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)integerVar * 2) + 1) * 2);\n  bytePointer = bytePointer;\n  if ((*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)integerVar * 2) + 1) * 2) == 0) ||\n     (unsignedVar == 0xb0)) goto LAB_0010419f;\n  bytePointer = bytePointer + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  yy_c_buf_p = yytext;\n  integerVar = (int)(yy_start - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *bytePointer = yy_hold_char;\n  unsignedVar = (ulong)yy_last_accepting_state;\n  bytePointer = yy_last_accepting_cpos;\n  goto LAB_0010419f;\nLAB_00105227:\n  doublePointerToCharacter = doublePointerToCharacter + 1;\n  localInteger = 3;\n  *doublePointerToCharacter = yylval;\nLAB_001049d1:\n  localPointer = localPointer + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "realloc",
                "fprintf",
                "ar_addlib_doer",
                "stat",
                "fclose",
                "yyerror.constprop.0",
                "fwrite",
                "bfd_openw",
                "xstrdup",
                "ar_directory_doer",
                "bfd_cache_close",
                "map_over_list",
                "prompt",
                "ar_open",
                "maybequit",
                "bfd_close",
                "yy_create_buffer.constprop.0",
                "bfd_openr",
                "extract_file",
                "clearerr",
                "yyensure_buffer_stack",
                "__errno_location",
                "fopen",
                "getc",
                "yy_fatal_error",
                "free",
                "bfd_set_format",
                "malloc",
                "open_inarch",
                "dup",
                "yy_load_buffer_state",
                "ferror",
                "fread",
                "yy_get_previous_state",
                "unlink",
                "dcgettext",
                "smart_rename.constprop.0",
                "filename_cmp",
                "printf",
                "yy_init_buffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "reverse_function_00103e95"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_0010e200": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e200",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e200"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "list_supported_targets",
                "list_matching_formats",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_and_close_output_00107730",
                "output_filename": "filename",
                "output_file": "file",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid cleanupAndCloseOutput_00107730(void)\n\n{\n  if (filename == 0) {\n    return;\n  }\n  if (output_bfd != 0) {\n    bfd_cache_close();\n  }\n  if (file != (FILE *)0x0) {\n    fclose(file);\n  }\n  removeFile(filename);\n  return;\n}\n\n",
            "called": [
                "remove_output.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_and_close_output_00107730"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_0010e2a8": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2a8",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e2a8"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePointer",
                "param_2": "inputFile",
                "piVar4": "errorLocation",
                "lVar5": "bufferStack",
                "yy_buffer_stack": "bufferStackPointer",
                "iVar1": "errorCode",
                "LAB_00103263": "label1",
                "param_1[2]": "filePointer2",
                "uVar2": "result",
                "iVar3": "fileDescriptor",
                "fileno(param_2)": "fileDescriptorValue",
                "isatty(iVar3)": "isTerminal"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePointer,FILE *inputFile,undefined8 param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  int errorCode;\n  uint result;\n  int fileDescriptor;\n  int *errorLocation;\n  long bufferStack;\n  \n  errorLocation = __errno_location();\n  bufferStack = bufferStackPointer;\n  errorCode = *errorLocation;\n  if (filePointer == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (bufferStackPointer != 0) {\nlabel1:\n      if (filePointer == *(FILE ***)(bufferStack + bufferStackPointer_top * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePointer + 0x1c) = 0;\n    *(undefined *)&filePointer[1]->_flags = 0;\n    *(undefined *)((long)&filePointer[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePointer + 5) = 1;\n    filePointer2 = filePointer[1];\n    *(undefined4 *)(filePointer + 7) = 0;\n    if (bufferStack != 0) {\n      if (filePointer == *(FILE ***)(bufferStack + bufferStackPointer_top * 8)) {\n        yy_load_buffer_state();\n      }\n      *filePointer = inputFile;\n      *(undefined4 *)((long)filePointer + 0x34) = 1;\n      goto label1;\n    }\n    *filePointer = inputFile;\n    *(undefined4 *)((long)filePointer + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePointer + 0x2c) = 1;\nLAB_0010327b:\n  result = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileDescriptor = fileDescriptorValue;\n    fileDescriptor = isTerminal;\n    result = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePointer + 0x24) = result;\n  *errorLocation = errorCode;\n  return param_5;\n}\n\n",
            "called": [
                "yy_load_buffer_state",
                "isatty",
                "__errno_location",
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_and_swap_data_0010312d",
                "param_1": "sourceParam",
                "param_2": "destinationParam",
                "lVar1": "temporaryVar"
            },
            "code": "\nvoid copyAndSwapData_0010312d(long sourceParam,long destinationParam)\n\n{\n  long temporaryVar;\n  \n  if (destinationParam != 0) {\n    *(undefined8 *)(destinationParam + 0xf0) = *(undefined8 *)(sourceParam + 0xf0);\n  }\n  temporaryVar = obfd;\n  *(undefined8 *)(sourceParam + 0xf0) = *(undefined8 *)(obfd + 0xf8);\n  *(long *)(temporaryVar + 0xf8) = sourceParam;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "copy_and_swap_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_00105c00",
                "param_1": "fileDescriptor",
                "param_2": "destinationPath",
                "_Var3": "seekResult",
                "uVar4": "readResult",
                "sVar5": "writeResult",
                "iVar1": "closeError",
                "iVar2": "closeError2",
                "__fd": "destinationFileDescriptor",
                "piVar6": "errnoPtr",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFile_00105c00(int fileDescriptor,char *destinationPath)\n\n{\n  int closeError;\n  int destinationFileDescriptor;\n  int closeError2;\n  __off_t seekResult;\n  ulong readResult;\n  size_t writeResult;\n  int *errnoPtr;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptor) && (seekResult = lseek(fileDescriptor,0,0), seekResult == 0)) {\n    destinationFileDescriptor = open(destinationPath,0x201);\n    if (destinationFileDescriptor < 0) {\n      readResult = simple_copy_constprop_0_cold();\n      return readResult;\n    }\n    do {\n      readResult = read(fileDescriptor,buffer,0x2000);\n      closeError2 = (int)readResult;\n      if (closeError2 < 1) {\n        errnoPtr = __errno_location();\n        closeError = *errnoPtr;\n        close(fileDescriptor);\n        close(destinationFileDescriptor);\n        if (closeError2 != 0) {\n          *errnoPtr = closeError;\n          return 0xffffffff;\n        }\n        return readResult & 0xffffffff;\n      }\n      writeResult = write(destinationFileDescriptor,buffer,(long)closeError2);\n    } while (writeResult == (long)closeError2);\n    errnoPtr = __errno_location();\n    closeError2 = *errnoPtr;\n    close(fileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPtr = closeError2;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "simple_copy.constprop.0.cold",
                "__errno_location",
                "lseek",
                "open",
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_file_00105c00"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_properties_001052a0",
                "param_1": "file_path",
                "iVar1": "stat_result",
                "piVar2": "error_number_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stat"
            },
            "code": "\nlong check_file_properties_001052a0(char *file_path)\n\n{\n  int stat_result;\n  int *error_number_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    stat_result = stat(file_path,&file_stat);\n    if (stat_result < 0) {\n      error_number_ptr = __errno_location();\n      if (*error_number_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*error_number_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_message,file_path);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stat.st_size) {\n        return file_stat.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "dcgettext",
                "get_file_size.cold",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "ranlib_only",
                "main"
            ],
            "imported": false,
            "current_name": "check_file_properties_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "optionString"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *optionString;\n  \n  optionString = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,optionString);\n  optionString = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,optionString);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "process_binary_file_00103c60",
                "param_1": "binaryFilePath",
                "param_2": "isPlugin",
                "cVar1": "formatCheckResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "lVar4": "inputArchive",
                "lVar5": "archivedFile",
                "uVar6": "programName",
                "plVar7": "currentArchivedFile"
            },
            "code": "\n\n\nvoid processBinaryFile_00103c60(char *binaryFilePath,int isPlugin)\n\n{\n  char formatCheckResult;\n  int *errnoLocation;\n  char *errorMessage;\n  long inputArchive;\n  long archivedFile;\n  undefined8 programName;\n  long *currentArchivedFile;\n  \n  real_name = xstrdup();\n  temp_name = (char *)make_tempname(real_name,&temp_fd);\n  if (temp_name == (char *)0x0) {\n    errnoLocation = __errno_location();\n    binaryFilePath = strerror(*errnoLocation);\n    programName = program_name;\n    errorMessage = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    obfd = bfd_fdopenw(temp_name,0,temp_fd);\n    if (obfd == 0) {\n      errorMessage = \"%s: Can\\'t open output archive %s\\n\";\n      binaryFilePath = temp_name;\n    }\n    else {\n      if (isPlugin != 0) {\nLAB_00103d02:\n        bfd_set_format(obfd,2);\n        *(byte *)(obfd + 0x49) = *(byte *)(obfd + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchive = bfd_openr(binaryFilePath,\"plugin\");\n      if (inputArchive == 0) {\n        errorMessage = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        formatCheckResult = bfd_check_format(inputArchive,2);\n        if (formatCheckResult != '\\0') {\n          currentArchivedFile = (long *)(obfd + 0xf8);\n          for (archivedFile = bfd_openr_next_archived_file(inputArchive,0); archivedFile != 0;\n              archivedFile = bfd_openr_next_archived_file(inputArchive,archivedFile)) {\n            *currentArchivedFile = archivedFile;\n            currentArchivedFile = (long *)(archivedFile + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMessage = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    programName = program_name;\n    errorMessage = (char *)dcgettext(0,errorMessage,5);\n  }\n  fprintf(_stderr,errorMessage,programName,binaryFilePath);\n  maybequit();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "strerror",
                "xstrdup",
                "bfd_fdopenw",
                "fprintf",
                "bfd_set_format",
                "maybequit",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "make_tempname",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "process_binary_file_00103c60"
        },
        "FUN_0010e218": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e218",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_0010e218"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main",
                "bfd_nonfatal.cold",
                "ar_emul_default_usage",
                "list_supported_targets",
                "replace_members.cold",
                "set_times.cold",
                "yyerror.constprop.0",
                "get_file_size.cold",
                "print_contents",
                "write_archive",
                "yyparse.isra.0",
                "ranlib_usage",
                "list_matching_formats",
                "print_arelt_descr.cold",
                "FUN_00102e6f",
                "open_inarch",
                "map_over_list",
                "ar_open",
                "get_file_size",
                "map_over_members.cold",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "usage",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "process_lexical_analysis_0010300e",
                "yy_start": "start_state",
                "yytext": "current_char",
                "yy_c_buf_p": "buffer_pointer",
                "yy_ec": "char_class",
                "yy_accept": "accept_array",
                "yy_base": "base_array",
                "yy_chk": "check_array",
                "yy_def": "default_array",
                "yy_meta": "meta_array",
                "yy_nxt": "next_array",
                "bVar1": "found_accept_state",
                "iVar2": "current_state",
                "lVar3": "next_state_index",
                "bVar4": "char_class_index",
                "pbVar5": "current_char_pointer",
                "in_R9": "last_accepting_cpos",
                "in_R10D": "last_accepting_state"
            },
            "code": "\nvoid process_lexical_analysis_0010300e(void)\n\n{\n  bool found_accept_state;\n  int current_state;\n  long next_state_index;\n  byte char_class_index;\n  byte *current_char_pointer;\n  byte *last_accepting_cpos;\n  int last_accepting_state;\n  \n  found_accept_state = false;\n  current_state = start_state;\n  for (current_char_pointer = current_char; current_char_pointer < buffer_pointer; current_char_pointer = current_char_pointer + 1) {\n    char_class_index = 1;\n    if (*current_char_pointer != 0) {\n      char_class_index = char_class[*current_char_pointer];\n    }\n    if (*(short *)(accept_array + (long)current_state * 2) != 0) {\n      found_accept_state = true;\n      last_accepting_cpos = current_char_pointer;\n      last_accepting_state = current_state;\n    }\n    while( true ) {\n      next_state_index = (long)(int)((int)*(short *)(base_array + (long)current_state * 2) + (uint)char_class_index);\n      if (*(short *)(check_array + next_state_index * 2) == current_state) break;\n      current_state = (int)*(short *)(default_array + (long)current_state * 2);\n      if (0xb0 < current_state) {\n        char_class_index = meta_array[(int)(uint)char_class_index];\n      }\n    }\n    current_state = (int)*(short *)(next_array + next_state_index * 2);\n  }\n  if (found_accept_state) {\n    yy_last_accepting_cpos = last_accepting_cpos;\n    yy_last_accepting_state = last_accepting_state;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "process_lexical_analysis_0010300e"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "copy_archive_00107740",
                "param_1": "inputFiles",
                "iVar1": "comparisonResult",
                "iVar2": "returnValue",
                "piVar3": "errorLocation",
                "pcVar4": "errorString",
                "uVar5": "errorValue",
                "pplVar6": "archive",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "plVar8": "currentFile",
                "puVar9": "preserveDates",
                "uVar10": "bytesProcessed",
                "sVar11": "bytesToRead",
                "local_c8": "datePreservation",
                "_Stack_b0": "filePermissions",
                "uStack_98": "archiveSize",
                "uStack_80": "previousTime",
                "uStack_70": "currentTime"
            },
            "code": "\nlong * copyArchive_00107740(long **inputFiles)\n\n{\n  int comparisonResult;\n  int returnValue;\n  int *errorLocation;\n  char *errorString;\n  undefined8 errorValue;\n  long **archive;\n  void *buffer;\n  size_t bytesRead;\n  long loopCounter;\n  long *currentFile;\n  undefined4 *preserveDates;\n  ulong bytesProcessed;\n  size_t bytesToRead;\n  undefined4 datePreservation [6];\n  __mode_t filePermissions;\n  ulong archiveSize;\n  undefined8 previousTime;\n  undefined8 currentTime;\n  \n  if (preserve_dates != 0) {\n    preserveDates = datePreservation;\n    for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *preserveDates = 0;\n      preserveDates = preserveDates + 1;\n    }\n  }\n  archive = (long **)inputFiles[0x1d];\n  if ((long **)inputFiles[0x1d] == (long **)0x0) {\n    archive = inputFiles;\n  }\n  returnValue = (*(code *)archive[1][0x3d])(inputFiles,datePreservation);\n  if (returnValue != 0) {\n    currentFile = *inputFiles;\n    errorValue = dcgettext(0,\"internal stat error on %s\",5);\n    returnValue = fatal(errorValue,currentFile);\n    errorValue = posname;\n    if (returnValue == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentFile,errorValue);\n        if (comparisonResult == 0) {\n          if (returnValue != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek(inputFiles,0,0);\n  output_file = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    output_file = (FILE *)open_output_file_isra_0(*inputFiles);\n  }\n  else {\n    bytesProcessed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = archiveSize - bytesProcessed;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToRead,inputFiles);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        inputFiles = (long **)*inputFiles[0x1d];\n        errorValue = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(errorValue,inputFiles);\n        goto LAB_00102ca2;\n      }\n      if (output_file == (FILE *)0x0) {\n        output_file = (FILE *)open_output_file_isra_0(*inputFiles);\n      }\n      bytesToRead = fwrite(buffer,1,bytesRead,output_file);\n      if (bytesToRead != bytesRead) {\n        errorLocation = __errno_location();\n        errorString = strerror(*errorLocation);\n        fatal(\"%s: %s\",output_filename,errorString);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + bytesRead;\n    } while (bytesProcessed < archiveSize);\n    free(buffer);\n  }\n  fclose(output_file);\n  errorString = output_filename;\n  output_file = (FILE *)0x0;\n  chmod(output_filename,filePermissions);\n  if (preserve_dates != 0) {\n    previousTime = currentTime;\n    set_times(errorString,datePreservation);\n  }\n  output_filename = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "extract_file.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "copy_archive_00107740"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "remove_output.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_0010e2b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b8",
            "calling": [
                "fwrite"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b8"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_binary_001028ed",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "result",
                "bVar2": "byteValue",
                "iVar3": "comparisonResult",
                "sVar4": "size",
                "piVar5": "pointerVar5",
                "pcVar6": "pointerCharVar6",
                "pcVar7": "pointerCharVar7",
                "ppcVar8": "pointerPointerCharVar8",
                "uVar9": "resultVar9",
                "lVar10": "longVar10",
                "__s": "charArray1",
                "__s_00": "charArray2",
                "lVar11": "longVar11",
                "uVar12": "resultVar12",
                "uVar13": "ulongVar13",
                "unaff_RBX": "pointerCharVarUnaffRBX",
                "ppcVar14": "pointerPointerCharVar14",
                "unaff_RBP": "pointerPointerCharVarUnaffRBP",
                "unaff_R12": "pointerPointerCharVarUnaffR12",
                "unaff_R13D": "unsignedIntVarUnaffR13D",
                "ppcVar15": "pointerPointerCharVar15",
                "unaff_R14": "longVarUnaffR14",
                "bVar16": "boolValue",
                "bVar17": "byteValue2",
                "param_7": "param7",
                "param_9": "param9",
                "in_stack_00000078": "stackVar1",
                "in_stack_00000108": "stackVar2",
                "posname": "positionName",
                "filename_cmp": "compareFilename",
                "libdeps_bfd": "libdepsBfd",
                "verbose": "isVerbose",
                "bfd_openr": "openRead",
                "do_ar_emul_append_constprop_0": "arEmulAppendConstprop0",
                "write_archive": "writeArchive",
                "xmalloc": "dynamicMemoryAllocation",
                "ar_truncate": "isArTruncate",
                "stat": "getStatistics",
                "fatal": "fatalError",
                "ar_emul_default_replace": "arEmulDefaultReplace",
                "get_pos_bfd": "getPositionBfd",
                "normalize": "normalizePath",
                "ar_emul_default_append": "arEmulDefaultAppend",
                "make_thin_archive": "isMakeThinArchive",
                "output_filename": "outputFilename"
            },
            "code": "\nundefined8 processBinary_001028ed(undefined8 param1,long param2)\n\n{\n  undefined result;\n  byte byteValue;\n  int comparisonResult;\n  size_t size;\n  int *pointerVar5;\n  char *pointerCharVar6;\n  char *pointerCharVar7;\n  char **pointerPointerCharVar8;\n  undefined8 resultVar9;\n  long longVar10;\n  char *charArray1;\n  char *charArray2;\n  long longVar11;\n  undefined8 resultVar12;\n  ulong ulongVar13;\n  char *pointerCharVarUnaffRBX;\n  char **pointerPointerCharVar14;\n  char **pointerPointerCharVarUnaffRBP;\n  char **pointerPointerCharVarUnaffR12;\n  uint unsignedIntVarUnaffR13D;\n  char **pointerPointerCharVar15;\n  long longVarUnaffR14;\n  bool boolValue;\n  byte byteValue2;\n  char **param7;\n  undefined8 param9;\n  long stackVar1;\n  long stackVar2;\n  \n  byteValue2 = 0;\ncode_r0x001028ed:\n  bfd_fatalError(pointerCharVarUnaffRBX,param2);\nLAB_001028f5:\n  resultVar12 = positionName;\n  if (unsignedIntVarUnaffR13D != 3) {\n    while( true ) {\n      if ((undefined8 *)*pointerPointerCharVarUnaffR12 == (undefined8 *)0x0) goto LAB_0010571f;\n      comparisonResult = compareFilename(*(undefined8 *)*pointerPointerCharVarUnaffR12,resultVar12);\n      if (comparisonResult == 0) break;\n      pointerPointerCharVarUnaffR12 = (char **)(*pointerPointerCharVarUnaffR12 + 0xf0);\n    }\n    if (unsignedIntVarUnaffR13D != 2) goto LAB_0010571f;\n    pointerPointerCharVarUnaffR12 = (char **)(*pointerPointerCharVarUnaffR12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  longVar10 = *(long *)(longVarUnaffR14 + 0xf0);\n  if (*(long *)(longVarUnaffR14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    longVar11 = longVar10;\n    longVar10 = *(long *)(longVar11 + 0xf0);\n  } while (longVar10 != 0);\n  pointerPointerCharVarUnaffR12 = (char **)(longVar11 + 0xf0);\n  pointerCharVarUnaffRBX = *pointerPointerCharVarUnaffRBP;\n  if (libdepsBfd != 0) goto LAB_00105731;\nLAB_00105698:\n  result = isMakeThinArchive;\n  unsignedIntVarUnaffR13D = (uint)(isVerbose != 0);\n  param2 = openRead(pointerCharVarUnaffRBX,target);\n  if (param2 != 0) {\n    pointerPointerCharVarUnaffRBP = pointerPointerCharVarUnaffRBP + 1;\n    byteValue = arEmulAppendConstprop0(pointerPointerCharVarUnaffR12,param2,unsignedIntVarUnaffR13D,result);\n    param9._6_1_ = param9._6_1_ | byteValue;\n    pointerCharVar6 = *pointerPointerCharVarUnaffRBP;\n    do {\n      if (pointerCharVar6 == (char *)0x0) {\n        if (param9._6_1_ == 0) {\n          outputFilename = 0;\n          return 0;\n        }\n        resultVar12 = writeArchive();\n        return resultVar12;\n      }\n      pointerPointerCharVar14 = *(char ***)(longVarUnaffR14 + 0xf0);\n      pointerPointerCharVarUnaffR12 = param7;\n      if (param9._7_1_ == '\\0') {\n        pointerPointerCharVar15 = param7;\n        if (pointerPointerCharVar14 != (char **)0x0) {\n          do {\n            if (full_pathname == '\\0') {\n              charArray1 = (char *)lbasename(*pointerPointerCharVar14);\n              pointerCharVar7 = charArray1;\n              if (isArTruncate != '\\0') {\n                size = strlen(charArray1);\n                ulongVar13 = (ulong)*(byte *)(*(long *)(longVarUnaffR14 + 8) + 0x1e);\n                if (ulongVar13 < size) {\n                  pointerCharVar7 = (char *)dynamicMemoryAllocation(ulongVar13 + 1);\n                  longVar10 = *(long *)(longVarUnaffR14 + 8);\n                  pointerCharVar6 = pointerCharVar7;\n                  for (ulongVar13 = (ulong)*(byte *)(longVar10 + 0x1e); ulongVar13 != 0; ulongVar13 = ulongVar13 - 1) {\n                    *pointerCharVar6 = *charArray1;\n                    charArray1 = charArray1 + (ulong)byteValue2 * -2 + 1;\n                    pointerCharVar6 = pointerCharVar6 + (ulong)byteValue2 * -2 + 1;\n                  }\n                  pointerCharVar7[*(byte *)(longVar10 + 0x1e)] = '\\0';\n                }\n                pointerCharVar6 = *pointerPointerCharVarUnaffRBP;\n                charArray1 = pointerCharVar7;\n                if (full_pathname == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              pointerCharVar6 = *pointerPointerCharVarUnaffRBP;\n              if (full_pathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n              charArray2 = (char *)lbasename(pointerCharVar6);\n              if (isArTruncate != '\\0') {\n                size = strlen(charArray2);\n                ulongVar13 = (ulong)*(byte *)(*(long *)(longVarUnaffR14 + 8) + 0x1e);\n                pointerCharVar6 = charArray2;\n                charArray1 = pointerCharVar7;\n                if (ulongVar13 < size) {\n                  pointerCharVar6 = (char *)dynamicMemoryAllocation(ulongVar13 + 1);\n                  longVar10 = *(long *)(longVarUnaffR14 + 8);\n                  pointerCharVar7 = pointerCharVar6;\n                  for (ulongVar13 = (ulong)*(byte *)(longVar10 + 0x1e); ulongVar13 != 0; ulongVar13 = ulongVar13 - 1) {\n                    *pointerCharVar7 = *charArray2;\n                    charArray2 = charArray2 + (ulong)byteValue2 * -2 + 1;\n                    pointerCharVar7 = pointerCharVar7 + (ulong)byteValue2 * -2 + 1;\n                  }\n                  pointerCharVar6[*(byte *)(longVar10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              comparisonResult = compareFilename(charArray2,pointerCharVar7);\n            }\n            else {\n              pointerCharVar6 = *pointerPointerCharVarUnaffRBP;\n              charArray1 = *pointerPointerCharVar14;\nLAB_00102980:\n              comparisonResult = compareFilename(pointerCharVar6,charArray1);\n            }\n            if ((comparisonResult == 0) && (pointerPointerCharVar14[0x1c] != (char *)0x0)) {\n              if (newer_only != 0) {\n                comparisonResult = getStatistics(*pointerPointerCharVarUnaffRBP,(getStatistics *)&stack0x000000b0);\n                if (comparisonResult != 0) {\n                  pointerVar5 = __errno_location();\n                  if (*pointerVar5 != 2) {\n                    bfd_fatalError(*pointerPointerCharVarUnaffRBP);\nLAB_00102b7e:\n                    pointerCharVar6 = *pointerPointerCharVar14;\n                    resultVar12 = dcgettext(0,\"internal getStatistics error on %s\",5);\n                    fatalError(resultVar12,pointerCharVar6);\n                    free(pointerPointerCharVarUnaffRBP);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                pointerPointerCharVar8 = (char **)pointerPointerCharVar14[0x1d];\n                if ((char **)pointerPointerCharVar14[0x1d] == (char **)0x0) {\n                  pointerPointerCharVar8 = pointerPointerCharVar14;\n                }\n                comparisonResult = (**(code **)(pointerPointerCharVar8[1] + 0x1e8))(pointerPointerCharVar14,&stack0x00000020);\n                if (comparisonResult != 0) goto LAB_00102b7e;\n                if (stackVar2 <= stackVar1) goto LAB_0010577e;\n              }\n              resultVar12 = getPositionBfd(param7,2,*pointerPointerCharVar14);\n              if (libdepsBfd == 0) {\nLAB_00102ae2:\n                pointerCharVar6 = *pointerPointerCharVarUnaffRBP;\n                boolValue = isVerbose != 0;\n                longVar10 = openRead(pointerCharVar6,target);\n                if (longVar10 == 0) {\n                  bfd_fatalError(pointerCharVar6,0);\n                  goto LAB_00102b3e;\n                }\n                byteValue = arEmulDefaultReplace(resultVar12,longVar10,boolValue);\n              }\n              else {\n                resultVar9 = normalizePath(*pointerPointerCharVarUnaffRBP);\n                comparisonResult = compareFilename(resultVar9,\"__.LIBDEP\");\n                if (comparisonResult != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byteValue = arEmulDefaultReplace(resultVar12,libdepsBfd,isVerbose != 0);\n              }\n              if (byteValue != 0) {\n                *pointerPointerCharVar15 = *(char **)(*pointerPointerCharVar15 + 0xf0);\n                param9._6_1_ = byteValue;\n              }\n              goto LAB_0010577e;\n            }\n            pointerPointerCharVar15 = pointerPointerCharVar14 + 0x1e;\n            pointerPointerCharVar14 = (char **)pointerPointerCharVar14[0x1e];\n          } while (pointerPointerCharVar14 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        unsignedIntVarUnaffR13D = postype;\n        if (postype != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        unsignedIntVarUnaffR13D = postype;\n        if (postype != 0) goto LAB_001028f5;\n        longVar10 = *(long *)(longVarUnaffR14 + 0xf0);\n        if (*(long *)(longVarUnaffR14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      pointerCharVarUnaffRBX = *pointerPointerCharVarUnaffRBP;\n      if (libdepsBfd == 0) goto LAB_00105698;\nLAB_00105731:\n      resultVar12 = normalizePath(pointerCharVarUnaffRBX);\n      comparisonResult = compareFilename(resultVar12,\"__.LIBDEP\");\n      if (comparisonResult != 0) goto code_r0x0010574f;\n      byteValue = arEmulDefaultAppend(pointerPointerCharVarUnaffR12,libdepsBfd,isVerbose != 0,isMakeThinArchive);\n      param9._6_1_ = byteValue | param9._6_1_;\nLAB_0010577e:\n      pointerPointerCharVarUnaffRBP = pointerPointerCharVarUnaffRBP + 1;\n      pointerCharVar6 = *pointerPointerCharVarUnaffRBP;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  pointerCharVarUnaffRBX = *pointerPointerCharVarUnaffRBP;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "bfd_fatal",
                "strlen",
                "stat",
                "do_ar_emul_append.constprop.0",
                "replace_members.cold",
                "write_archive",
                "ar_emul_default_append",
                "normalize",
                "ar_emul_default_replace",
                "fatal",
                "bfd_openr",
                "dcgettext",
                "FUN_00102943",
                "get_pos_bfd",
                "__errno_location",
                "filename_cmp",
                "lbasename",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "process_binary_001028ed"
        },
        "FUN_0010e1b0": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1b0",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010e1b0"
        },
        "FUN_0010e228": {
            "renaming": {},
            "code": "\n\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e228",
            "calling": [
                "realloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e228"
        },
        "FUN_0010e108": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e108",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_0010e108"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "open_inarch",
                "ar_open",
                "replace_members.cold",
                "simple_copy.constprop.0.cold",
                "set_times.cold",
                "get_file_size.cold",
                "print_contents",
                "yyparse.isra.0",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "yy_init_buffer",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00105a68",
                "main",
                "normalize.cold",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "errno_ptr",
                "uVar2": "error_msg"
            },
            "code": "\nundefined8 handleFileError_001025a0(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_msg;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_msg = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(error_msg);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_msg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(error_msg);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_one_0010284b"
            },
            "code": "\nundefined8 getOne_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "ranlib_only"
            ],
            "imported": false,
            "current_name": "get_one_0010284b"
        },
        "FUN_0010e220": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e220",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e220"
        },
        "FUN_0010e100": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e100",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e100"
        },
        "FUN_00105cc0": {
            "renaming": {
                "FUN_00105cc0": "process_entry_00105cc0",
                "param_1": "entry",
                "param_2": "argc",
                "auStack_8": "stack",
                "__libc_start_main": "initializeProgram",
                "main": "mainFunction"
            },
            "code": "\nvoid processEntry_00105cc0 processEntry_00105cc0(undefined8 entry,undefined8 argc)\n\n{\n  undefined stack [8];\n  \n  initializeProgram(mainFunction,argc,&stack0x00000008,0,0,entry,stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "process_entry_00105cc0"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_assign_00102f08",
                "unaff_RBX": "ptrStr",
                "unaff_R12": "ptrPtr"
            },
            "code": "\nundefined8 printAndAssign_00102f08(void)\n\n{\n  undefined8 *ptrStr;\n  undefined8 *ptrPtr;\n  \n  printf(\"a - %s\\n\",*ptrStr);\n  ptrStr[0x1e] = *ptrPtr;\n  *ptrPtr = ptrStr;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "print_and_assign_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "extract_and_process_files_00105570",
                "param_1": "archive",
                "param_2": "file_paths",
                "param_3": "flag",
                "ppcVar1": "current_file",
                "uVar2": "undefined_value",
                "bVar3": "byte_value",
                "iVar4": "integer_value",
                "sVar5": "size",
                "piVar6": "error_ptr",
                "pcVar7": "file_path",
                "pcVar8": "basename_file_path",
                "uVar9": "normalized_file_path",
                "__s": "basename_current_file",
                "lVar11": "current_archive",
                "lVar12": "next_archive",
                "uVar13": "result",
                "uVar14": "file_length",
                "ppcVar15": "archive_entry",
                "ppcVar16": "archive_list",
                "uVar17": "position_type",
                "ppcVar18": "prev_archive_entry",
                "bVar19": "boolean_value",
                "bVar20": "byte_value",
                "local_15a": "local_flag",
                "auStack_158": "stack_array",
                "lStack_100": "last_modified_time",
                "sStack_c8": "file_stats"
            },
            "code": "\nundefined8 extract_and_process_files_00105570(long archive,char **file_paths,char flag)\n\n{\n  char **current_file;\n  undefined undefined_value;\n  byte byte_value;\n  int integer_value;\n  size_t size;\n  int *error_ptr;\n  char *file_path;\n  char *basename_file_path;\n  undefined8 normalized_file_path;\n  char *pcVar10;\n  char *basename_current_file;\n  long current_archive;\n  long next_archive;\n  undefined8 result;\n  ulong file_length;\n  char **archive_entry;\n  char **archive_list;\n  uint position_type;\n  char **prev_archive_entry;\n  bool boolean_value;\n  byte byte_value;\n  byte local_flag;\n  undefined stack_array [88];\n  long last_modified_time;\n  stat file_stats;\n  \n  byte_value = 0;\n  current_file = (char **)(archive + 0xf0);\n  local_flag = 0;\n  if (file_paths == (char **)0x0) {\n    result = initialize_output_filename_00102943();\n    return result;\n  }\n  do {\n    pcVar10 = *file_paths;\njoined_r0x001055aa:\n    if (pcVar10 == (char *)0x0) {\n      if (local_flag != 0) {\n        result = write_archive(archive);\n        return result;\n      }\n      output_filename = 0;\n      return 0;\n    }\n    archive_entry = *(char ***)(archive + 0xf0);\n    archive_list = current_file;\n    if (flag != '\\0') {\nLAB_0010564c:\n      position_type = postype;\n      if (postype != 0) goto LAB_001028f5;\n      next_archive = *(long *)(archive + 0xf0);\n      if (*(long *)(archive + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        current_archive = next_archive;\n        next_archive = *(long *)(current_archive + 0xf0);\n      } while (next_archive != 0);\n      archive_list = (char **)(current_archive + 0xf0);\n      pcVar10 = *file_paths;\n      do {\n        if (libdeps_bfd != 0) {\n          result = normalize(pcVar10,archive);\n          integer_value = filename_cmp(result,\"__.LIBDEP\");\n          if (integer_value == 0) {\n            byte_value = ar_emul_default_append(archive_list,libdeps_bfd,verbose != 0,make_thin_archive);\n            local_flag = byte_value | local_flag;\n            goto LAB_0010577e;\n          }\n          pcVar10 = *file_paths;\n        }\n        undefined_value = make_thin_archive;\n        boolean_value = verbose != 0;\n        next_archive = bfd_openr(pcVar10,target);\n        if (next_archive != 0) {\n          file_paths = file_paths + 1;\n          byte_value = do_ar_emul_append_constprop_0(archive_list,next_archive,(uint)boolean_value,undefined_value);\n          local_flag = local_flag | byte_value;\n          pcVar10 = *file_paths;\n          goto joined_r0x001055aa;\n        }\n        bfd_fatal(pcVar10,0);\n        position_type = (uint)boolean_value;\nLAB_001028f5:\n        result = posname;\n        if (position_type == 3) {\n          next_archive = *(long *)(archive + 0xf0);\n          if (*(long *)(archive + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*archive_list != (undefined8 *)0x0;\n              archive_list = (char **)(*archive_list + 0xf0)) {\n            integer_value = filename_cmp(*(undefined8 *)*archive_list,result);\n            if (integer_value == 0) {\n              if (position_type == 2) {\n                archive_list = (char **)(*archive_list + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        pcVar10 = *file_paths;\n      } while( true );\n    }\n    prev_archive_entry = current_file;\n    if (archive_entry == (char **)0x0) {\n      position_type = postype;\n      if (postype == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (full_pathname == '\\0') {\n      pcVar10 = (char *)lbasename(*archive_entry);\n      basename_file_path = pcVar10;\n      if (ar_truncate != '\\0') {\n        size = strlen(pcVar10);\n        file_length = (ulong)*(byte *)(*(long *)(archive + 8) + 0x1e);\n        if (file_length < size) {\n          basename_file_path = (char *)xmalloc(file_length + 1);\n          next_archive = *(long *)(archive + 8);\n          file_path = basename_file_path;\n          for (file_length = (ulong)*(byte *)(next_archive + 0x1e); file_length != 0; file_length = file_length - 1) {\n            *file_path = *pcVar10;\n            pcVar10 = pcVar10 + (ulong)byte_value * -2 + 1;\n            file_path = file_path + (ulong)byte_value * -2 + 1;\n          }\n          basename_file_path[*(byte *)(next_archive + 0x1e)] = '\\0';\n        }\n        file_path = *file_paths;\n        pcVar10 = basename_file_path;\n        if (full_pathname == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      file_path = *file_paths;\n      if (full_pathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basename_current_file = (char *)lbasename(file_path);\n      if (ar_truncate != '\\0') {\n        size = strlen(basename_current_file);\n        file_length = (ulong)*(byte *)(*(long *)(archive + 8) + 0x1e);\n        file_path = basename_current_file;\n        pcVar10 = basename_file_path;\n        if (file_length < size) {\n          file_path = (char *)xmalloc(file_length + 1);\n          next_archive = *(long *)(archive + 8);\n          basename_file_path = file_path;\n          for (file_length = (ulong)*(byte *)(next_archive + 0x1e); file_length != 0; file_length = file_length - 1) {\n            *basename_file_path = *basename_current_file;\n            basename_current_file = basename_current_file + (ulong)byte_value * -2 + 1;\n            basename_file_path = basename_file_path + (ulong)byte_value * -2 + 1;\n          }\n          file_path[*(byte *)(next_archive + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      integer_value = filename_cmp(basename_current_file,basename_file_path);\n      if (integer_value == 0) goto LAB_00102993;\nLAB_00105639:\n      prev_archive_entry = archive_entry + 0x1e;\n      archive_entry = (char **)archive_entry[0x1e];\n      if (archive_entry == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    file_path = *file_paths;\n    pcVar10 = *archive_entry;\nLAB_00102980:\n    integer_value = filename_cmp(file_path,pcVar10);\n    if (integer_value != 0) goto LAB_00105639;\nLAB_00102993:\n    if (archive_entry[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (newer_only != 0) {\n      integer_value = stat(*file_paths,&file_stats);\n      if (integer_value != 0) {\n        error_ptr = __errno_location();\n        if (*error_ptr != 2) {\n          bfd_fatal(*file_paths);\nLAB_00102b7e:\n          pcVar10 = *archive_entry;\n          result = dcgettext(0,\"internal stat error on %s\",5);\n          fatal(result,pcVar10);\n          free(file_paths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      archive_list = (char **)archive_entry[0x1d];\n      if ((char **)archive_entry[0x1d] == (char **)0x0) {\n        archive_list = archive_entry;\n      }\n      integer_value = (**(code **)(archive_list[1] + 0x1e8))(archive_entry,stack_array);\n      if (integer_value != 0) goto LAB_00102b7e;\n      if (file_stats.st_mtim.tv_sec <= last_modified_time) goto LAB_0010577e;\n    }\n    result = get_pos_bfd(current_file,2,*archive_entry);\n    if (libdeps_bfd == 0) {\nLAB_00102ae2:\n      pcVar10 = *file_paths;\n      boolean_value = verbose != 0;\n      next_archive = bfd_openr(pcVar10,target);\n      if (next_archive == 0) {\n        bfd_fatal(pcVar10,0);\n        goto LAB_00102b3e;\n      }\n      byte_value = ar_emul_default_replace(result,next_archive,boolean_value);\n    }\n    else {\n      normalized_file_path = normalize(*file_paths,archive);\n      integer_value = filename_cmp(normalized_file_path,\"__.LIBDEP\");\n      if (integer_value != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byte_value = ar_emul_default_replace(result,libdeps_bfd,verbose != 0);\n    }\n    if (byte_value != 0) {\n      *prev_archive_entry = *(char **)(*prev_archive_entry + 0xf0);\n      local_flag = byte_value;\n    }\nLAB_0010577e:\n    file_paths = file_paths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_and_process_files_00105570"
        },
        "FUN_0010e1a8": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1a8",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e1a8"
        },
        "FUN_0010e2e8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e8"
        },
        "FUN_0010e1c0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1c0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010e1c0"
        },
        "FUN_00102500": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "print_version",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102500"
        },
        "FUN_0010e2e0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e0",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e0"
        },
        "FUN_0010e238": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e238",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010e238"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "yyparse.isra.0",
                "smart_rename.constprop.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_missing_entry_error_message_0010285f",
                "__format": "errorMessageFormat",
                "lVar2": "entryName",
                "plVar3": "fallbackEntry",
                "uVar4": "entry",
                "plVar5": "currentEntry",
                "unaff_RBP": "functionPointer",
                "unaff_R12": "archivePtr",
                "unaff_R13D": "remainingEntries",
                "unaff_R14": "entryArray",
                "iStack000000000000000c": "nameCounter"
            },
            "code": "\n\n\nvoid printMissingEntryErrorMessage_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessageFormat;\n  long entryName;\n  long *fallbackEntry;\n  undefined8 entry;\n  long *currentEntry;\n  code *functionPointer;\n  long archivePtr;\n  int remainingEntries;\n  undefined8 *entryArray;\n  int nameCounter;\n  \ncode_r0x0010285f:\n  entry = *entryArray;\n  errorMessageFormat = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorMessageFormat,entry);\nLAB_0010553e:\n  entryArray = entryArray + 1;\n  remainingEntries = remainingEntries + -1;\n  if (remainingEntries == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archivePtr + 0xf0);\n  nameCounter = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      entryName = *currentEntry;\n      if (entryName == 0) {\n        fallbackEntry = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          fallbackEntry = currentEntry;\n        }\n        (**(code **)(fallbackEntry[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePtr + 0x49) & 0x10) == 0) || (entryName = normalize(), entryName != 0)) {\n        entry = normalize(*entryArray);\n        iVar1 = filename_cmp(entry,entryName);\n        if ((iVar1 == 0) &&\n           ((counted_name_mode == '\\0' ||\n            (nameCounter = nameCounter + 1,\n            nameCounter == counted_name_counter)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*functionPointer)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "map_over_members"
            ],
            "imported": false,
            "current_name": "print_missing_entry_error_message_0010285f"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "param_1": "isSilent",
                "uVar1": "programName",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010394a(uint isSilent)\n\n{\n  undefined8 programName;\n  char *message;\n  FILE *outputStream;\n  \n  programName = program_name;\n  outputStream = _stderr;\n  if (isSilent != 0) {\n    outputStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,programName);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  list_supported_targets(program_name,outputStream);\n  if (isSilent != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isSilent ^ 1);\n}\n\n",
            "called": [
                "fprintf",
                "list_supported_targets",
                "dcgettext",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_0010394a"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "check_if_true_00105bb0"
            },
            "code": "\nundefined8 check_if_true_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_if_true_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "do_nothing_00107640"
            },
            "code": "\nundefined8 do_nothing_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_00107640"
        },
        "FUN_0010e1d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid clearerr(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* clearerr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d8",
            "calling": [
                "clearerr"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d8"
        },
        "FUN_00102510": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "print_contents",
                "yyparse.isra.0",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102510"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_interactive_and_exit_0010315d",
                "interactive": "isInteractive",
                "xexit": "exitProgram"
            },
            "code": "\nvoid checkInteractiveAndExit_0010315d(void)\n\n{\n  if (isInteractive == 0) {\n                    \n    exitProgram(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "open_inarch",
                "ar_open",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "check_interactive_and_exit_0010315d"
        },
        "FUN_0010e1d0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d0"
        },
        "FUN_0010e248": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e248",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_0010e248"
        },
        "FUN_0010e008": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e008",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_0010e008"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_arelt_descr_verbose_00107890",
                "param_1": "element",
                "_stdout": "output_stream",
                "verbose": "is_verbose",
                "display_offsets": "show_offsets"
            },
            "code": "\n\n\nvoid print_arelt_descr_verbose_00107890(undefined8 element)\n\n{\n  print_arelt_descr(output_stream,element,is_verbose != 0,show_offsets != 0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_arelt_descr_verbose_00107890"
        },
        "FUN_001024a0": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "open_inarch",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "FUN_001024a0"
        },
        "FUN_0010e000": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e000",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010e000"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_values_00103172",
                "param_1": "old_value",
                "param_2": "new_value",
                "param_3": "flag",
                "param_4": "additional_info",
                "uVar1": "temp_value",
                "auVar2": "updated_values"
            },
            "code": "\nundefined  [16]\nupdate_values_00103172(undefined8 *old_value,undefined8 *new_value,char flag,undefined8 additional_info)\n\n{\n  undefined8 temp_value;\n  undefined updated_values [16];\n  \n  if (flag != '\\0') {\n    printf(\"r - %s\\n\",*new_value);\n  }\n  temp_value = *old_value;\n  new_value[0x1e] = temp_value;\n  updated_values._1_7_ = (undefined7)((ulong)temp_value >> 8);\n  updated_values[0] = 1;\n  *old_value = new_value;\n  updated_values._8_8_ = additional_info;\n  return updated_values;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "update_values_00103172"
        },
        "FUN_0010e0a8": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0a8",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010e0a8"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "initialize_buffer_001030ed",
                "puVar1": "buffer_ptr",
                "yy_buffer_stack": "buffer_stack",
                "yy_buffer_stack_top": "buffer_stack_top",
                "yy_n_chars": "num_chars",
                "yy_c_buf_p": "buffer_ptr",
                "yytext": "text_buffer",
                "yyin": "input",
                "yy_hold_char": "hold_char"
            },
            "code": "\nvoid initialize_buffer_001030ed(void)\n\n{\n  undefined8 *buffer_ptr;\n  \n  buffer_ptr = *(undefined8 **)(buffer_stack + buffer_stack_top * 8);\n  num_chars = *(undefined4 *)((long)buffer_ptr + 0x1c);\n  buffer_ptr = (undefined *)buffer_ptr[2];\n  text_buffer = buffer_ptr;\n  input = *buffer_ptr;\n  hold_char = *buffer_ptr;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "yyparse.isra.0",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "initialize_buffer_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_unlink_file_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "fileFlags",
                "param_4": "returnAddress",
                "uVar1": "copyResult",
                "piVar2": "errnoLocationPtr",
                "pcVar3": "errorString",
                "uVar4": "errorMsg",
                "uVar5": "unlinkStatus",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] copyAndUnlinkFile_00105bc0(char *sourceFilePath,char *destinationFilePath,undefined4 fileFlags,undefined8 returnAddress)\n\n{\n  uint copyResult;\n  int *errnoLocationPtr;\n  char *errorString;\n  undefined8 errorMsg;\n  ulong unlinkStatus;\n  undefined result [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    unlinkStatus = 0;\n  }\n  else {\n    copyResult = simple_copy_constprop_0(fileFlags);\n    unlinkStatus = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocationPtr = __errno_location();\n      errorString = strerror(*errnoLocationPtr);\n      errorMsg = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(errorMsg,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  result._8_8_ = returnAddress;\n  result._0_8_ = unlinkStatus;\n  return result;\n}\n\n",
            "called": [
                "smart_rename.constprop.0.cold",
                "simple_copy.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_file_size_and_write_archive_00107650",
                "param_1": "filePath",
                "uVar1": "returnValue",
                "lVar2": "fileSize"
            },
            "code": "\nundefined8 checkFileSizeAndWriteArchive_00107650(undefined8 filePath)\n\n{\n  undefined8 returnValue;\n  long fileSize;\n  \n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    returnValue = 1;\n  }\n  else {\n    write_armap = 1;\n    fileSize = open_inarch(filePath,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    write_archive(fileSize);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "open_inarch",
                "ranlib_only.cold",
                "get_file_size",
                "write_archive",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_file_size_and_write_archive_00107650"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_and_unlink_file_00102f1e",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "auVar3": "returnValues",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyAndUnlinkFile_00102f1e(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  ulong fileSize;\n  char *filePath;\n  undefined returnValues [16];\n  undefined8 returnAddress;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(filePath);\n  returnValues._0_8_ = fileSize & 0xffffffff;\n  returnValues._8_8_ = returnAddress;\n  return returnValues;\n}\n\n",
            "called": [
                "strerror",
                "unlink",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00102f1e"
        },
        "FUN_0010e1e8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1e8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010e1e8"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "error_message_00102fd7",
                "piVar1": "errorCodePtr",
                "uVar2": "localizedErrorMessage"
            },
            "code": "\nvoid errorMessage_00102fd7(void)\n\n{\n  int *errorCodePtr;\n  undefined8 localizedErrorMessage;\n  \n  errorCodePtr = __errno_location();\n  strerror(*errorCodePtr);\n  localizedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(localizedErrorMessage);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "error_message_00102fd7"
        },
        "FUN_0010e0c8": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c8",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c8"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "yyparse.isra.0",
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102520": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "open_inarch.cold",
                "ar_open",
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102520"
        },
        "FUN_001024b0": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001024b0"
        },
        "FUN_00107da8": {
            "renaming": {
                "FUN_00107da8": "FUNC_00107da8"
            },
            "code": "\nvoid FUNC_00107da8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00107da8"
        },
        "FUN_0010e0c0": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c0",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c0"
        },
        "FUN_0010e018": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e018",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010e018"
        },
        "FUN_00105d60": {
            "renaming": {
                "FUN_00105d60": "initialize_program_00105d60",
                "completed_0": "isInitialized",
                "__cxa_finalize": "cleanUp",
                "__dso_handle": "dynamicSharedObjectHandle",
                "deregister_tm_clones": "removeTmClones"
            },
            "code": "\nvoid initializeProgram_00105d60(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  cleanUp(dynamicSharedObjectHandle);\n  removeTmClones();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_00105d60"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 version)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archive_entries_00105480",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entryNames",
                "param_4": "numEntries",
                "iVar1": "cmpResult",
                "__format": "errorMessage",
                "lVar2": "currentEntry",
                "plVar3": "fallbackEntry",
                "uVar4": "normalizedEntry",
                "plVar5": "entry",
                "local_cc": "nameCounter",
                "local_c8": "localBuffer"
            },
            "code": "\n\n\nvoid processArchiveEntries_00105480(long archive,code *callback,undefined8 *entryNames,int numEntries)\n\n{\n  int cmpResult;\n  char *errorMessage;\n  long currentEntry;\n  long *fallbackEntry;\n  undefined8 normalizedEntry;\n  long *entry;\n  int nameCounter;\n  undefined localBuffer [152];\n  \n  currentEntry = *(long *)(archive + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callback)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entry = *(long **)(archive + 0xf0);\n      nameCounter = 0;\n      for (; entry != (long *)0x0; entry = (long *)entry[0x1e]) {\n        if (*(int *)((long)entry + 0xac) == 0) {\n          currentEntry = *entry;\n          if (currentEntry == 0) {\n            fallbackEntry = (long *)entry[0x1d];\n            if ((long *)entry[0x1d] == (long *)0x0) {\n              fallbackEntry = entry;\n            }\n            (**(code **)(fallbackEntry[1] + 0x1e8))(entry,localBuffer);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (currentEntry = normalize(currentEntry,archive), currentEntry != 0)) {\n            normalizedEntry = normalize(*entryNames,archive);\n            cmpResult = filename_cmp(normalizedEntry,currentEntry);\n            if ((cmpResult == 0) &&\n               ((counted_name_mode == '\\0' ||\n                (nameCounter = nameCounter + 1, nameCounter == counted_name_counter)))) {\n              (*callback)();\n              *(undefined4 *)((long)entry + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      normalizedEntry = *entryNames;\n      errorMessage = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,errorMessage,normalizedEntry);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "normalize",
                "map_over_members.cold",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_archive_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_0010e258": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e258",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010e258"
        },
        "FUN_00102530": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "open_inarch",
                "ar_open",
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102530"
        },
        "FUN_0010e0b8": {
            "renaming": {},
            "code": "\n\n\n\nchar * ctime(time_t *__timer)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ctime@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0b8",
            "calling": [
                "ctime"
            ],
            "imported": false,
            "current_name": "FUN_0010e0b8"
        },
        "FUN_0010e0d8": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d8",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d8"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_contents_00103a78",
                "param_1": "parameters",
                "__ptr": "buffer",
                "puVar2": "ptr_or_default",
                "iVar1": "result",
                "uVar3": "bytesRead",
                "uVar4": "errorMsg",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPtr",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorString",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "requiredBytes"
            },
            "code": "\n\n\nvoid extractAndPrintArchiveContents_00103a78(undefined8 *parameters)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *ptr_or_default;\n  ulong bytesRead;\n  undefined8 errorMsg;\n  size_t bytesWritten;\n  int *errnoPtr;\n  size_t remainingBytes;\n  char *errorString;\n  ulong totalBytesRead;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong requiredBytes;\n  \n  buffer = (void *)xmalloc(0x2000);\n  ptr_or_default = (undefined8 *)parameters[0x1d];\n  if ((undefined8 *)parameters[0x1d] == (undefined8 *)0x0) {\n    ptr_or_default = parameters;\n  }\n  result = (**(code **)(ptr_or_default[1] + 0x1e8))(parameters,stackBuffer);\n  if (result == 0) {\n    if (verbose != 0) {\n      printf(\"\\n<%s>\\n\\n\",*parameters);\n    }\n    totalBytesRead = 0;\n    bfd_seek(parameters,0,0);\n    goto LAB_00103afd;\n  }\n  parameters = (undefined8 *)*parameters;\n  errorString = \"internal stat error on %s\";\n  do {\n    errorMsg = dcgettext(0,errorString,5);\n    fatal(errorMsg,parameters);\n    requiredBytes = archiveSize;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        fatal(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (requiredBytes <= totalBytesRead) goto LAB_00103b91;\n      remainingBytes = requiredBytes - totalBytesRead;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,parameters);\n    } while (remainingBytes == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    parameters = *(undefined8 **)parameters[0x1d];\n    archiveSize = requiredBytes;\n  } while( true );\n}\n\n",
            "called": [
                "strerror",
                "bfd_bread",
                "free",
                "fatal",
                "dcgettext",
                "fwrite",
                "bfd_seek",
                "__errno_location",
                "printf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_contents_00103a78"
        },
        "FUN_0010e1f0": {
            "renaming": {},
            "code": "\n\n\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1f0",
            "calling": [
                "fileno"
            ],
            "imported": false,
            "current_name": "FUN_0010e1f0"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_0010e0d0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d0",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d0"
        },
        "FUN_001024c0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024c0"
        },
        "FUN_0010e028": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e028",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_0010e028"
        },
        "FUN_0010e268": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e268",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010e268"
        },
        "FUN_0010e148": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e148",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_0010e148"
        },
        "FUN_0010e020": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e020",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010e020"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_entry_001058b0",
                "param_1": "entry",
                "cVar1": "result",
                "uVar2": "flags",
                "iVar3": "temp_fd",
                "uVar4": "archive_head",
                "__format": "error_msg",
                "__ptr": "temp_filename",
                "__stream": "output_file",
                "ppcVar5": "output_bfd_handle",
                "uStack0000000000000020": "file_mode",
                "in_stack_00000028": "file_uid",
                "in_stack_00000038": "file_size",
                "local_3c": "temp_file_descriptor",
                "uStack_33": "file_type_flag",
                "cStack_32": "setuid_flag",
                "cStack_31": "setgid_flag"
            },
            "code": "\nvoid write_archive_entry_001058b0(undefined8 *entry)\n\n{\n  char result;\n  uint flags;\n  int temp_fd;\n  undefined8 archive_head;\n  char *error_msg;\n  void *temp_filename;\n  FILE *output_file;\n  char **output_bfd_handle;\n  uint file_mode;\n  uint file_uid;\n  undefined8 file_size;\n  int temp_file_descriptor [2];\n  undefined file_type_flag;\n  char setuid_flag;\n  char setgid_flag;\n  \n  archive_head = entry[0x1e];\n  temp_file_descriptor[0] = -1;\n  temp_filename = (void *)xstrdup(*entry);\n  output_file = (FILE *)make_tempname(temp_filename,temp_file_descriptor);\n  temp_fd = temp_file_descriptor[0];\n  if (output_file != (FILE *)0x0) {\n    output_filename = output_file;\n    output_bfd_handle = (char **)bfd_fdopenw(output_file,*(undefined8 *)entry[1],temp_file_descriptor[0]);\n    if (output_bfd_handle != (char **)0x0) {\n      output_bfd = output_bfd_handle;\n      bfd_set_format(output_bfd_handle,2);\n      flags = (~write_armap >> 0x1f) << 3 | *(byte *)((long)output_bfd_handle + 0x49) & 0xfffffff7;\n      *(char *)((long)output_bfd_handle + 0x49) = (char)flags;\n      if (ar_truncate != '\\0') {\n        *(uint *)((long)output_bfd_handle + 0x44) = *(uint *)((long)output_bfd_handle + 0x44) | 0x400;\n      }\n      if (deterministic != 0) {\n        *(uint *)((long)output_bfd_handle + 0x44) = *(uint *)((long)output_bfd_handle + 0x44) | 0x2000;\n      }\n      if (full_pathname != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((make_thin_archive != '\\0') || ((*(byte *)((long)entry + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)output_bfd_handle + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(output_bfd_handle,archive_head);\n        if (result != '\\0') break;\n        flags = bfd_fatal(temp_filename);\nLAB_00102d37:\n        *(uint *)((long)output_bfd_handle + 0x44) = *(uint *)((long)output_bfd_handle + 0x44) | 0x100000;\n      }\n      temp_fd = dup(temp_fd);\n      result = bfd_close(output_bfd_handle);\n      if (result == '\\0') {\n        bfd_fatal(temp_filename);\n        error_msg = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,error_msg);\n        flags = file_mode & 0xf000;\n        if (flags == 0x4000) {\n          file_type_flag = 100;\n        }\n        else if (flags == 0xa000) {\n          file_type_flag = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          file_type_flag = 0x62;\n        }\n        else if (flags == 0x2000) {\n          file_type_flag = 99;\n        }\n        else if (flags == 0xc000) {\n          file_type_flag = 0x73;\n        }\n        else {\n          file_type_flag = 0x70;\n          if (flags != 0x1000) {\n            file_type_flag = 0x2d;\n          }\n        }\n        setuid_flag = (-((_file_mode & 0x100) == 0) & 0xbbU) + 0x72;\n        setgid_flag = (-((_file_mode & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(output_file,\"%s %ld/%ld %6lu %s \",&setuid_flag,_file_mode >> 0x20,\n                (ulong)file_uid,file_size,&stack0xffffffffffffffd8,\n                _file_mode & 0xffffffff);\n        fputs(*output_bfd_handle,output_file);\n        if ((char)entry != '\\0') {\n          if ((*(byte *)((long)output_bfd_handle + 0x49) & 0x10) == 0) {\n            if (output_bfd_handle[0xb] != (char *)0x0) {\n              fprintf(output_file,\" 0x%lx\");\n            }\n          }\n          else if (output_bfd_handle[0xc] != (char *)0x0) {\n            fprintf(output_file,\" 0x%lx\");\n          }\n        }\n        fputc(10,output_file);\n        return;\n      }\n      output_bfd = (char **)0x0;\n      output_filename = (FILE *)0x0;\n      bfd_close(entry);\n      temp_fd = smart_rename_constprop_0(output_file,temp_filename,temp_fd);\n      if (temp_fd == 0) {\n        free(temp_filename);\n        free(output_file);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(temp_fd);\n    bfd_fatal(temp_filename);\n  }\n  archive_head = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  bfd_fatal(archive_head);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_fdopenw",
                "bfd_fatal",
                "close",
                "bfd_set_format",
                "dcgettext",
                "make_tempname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "ranlib_only",
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "write_archive_entry_001058b0"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "open_inarch",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_0010e260": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e260",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_0010e260"
        },
        "FUN_00102540": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102540"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_001024d0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001024d0"
        },
        "FUN_0010e0e0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0e0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010e0e0"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "main",
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_output_file_00105a20",
                "param_1": "inputFilePath",
                "pcVar1": "outputDir",
                "pcVar2": "currentPathSegment",
                "uVar3": "baseName",
                "uVar4": "errorMessage",
                "pFVar5": "outputFile",
                "sVar6": "outputDirLength"
            },
            "code": "\nvoid extractOutputFile_00105a20(char *inputFilePath)\n\n{\n  char *outputDir;\n  char *currentPathSegment;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *outputFile;\n  size_t outputDirLength;\n  \n  outputDir = output_dir;\n  output_filename = inputFilePath;\n  if (*inputFilePath == '/') {\nLAB_00102e9a:\n    baseName = lbasename();\n    outputDir = output_filename;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    non_fatal(errorMessage,outputDir,baseName);\n    output_filename = (char *)baseName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*inputFilePath == '\\0') {\n      if ((output_dir != (char *)0x0) && (outputDirLength = strlen(output_dir), outputDirLength != 0)) {\n        if (outputDir[outputDirLength - 1] == '/') {\n          output_filename = (char *)concat(outputDir,output_filename,0);\n        }\n        else {\n          output_filename = (char *)concat(outputDir,&DAT_00108260,output_filename,0);\n        }\n      }\n      if (verbose != 0) {\n        printf(\"x - %s\\n\",output_filename);\n      }\n      outputFile = fopen(output_filename,\"w\");\n      if (outputFile == (FILE *)0x0) {\n        perror(output_filename);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentPathSegment = inputFilePath;\n    if ((*inputFilePath == '.') && (currentPathSegment = inputFilePath + 1, inputFilePath[1] == '.')) {\n      currentPathSegment = inputFilePath + 2;\n      if ((inputFilePath[2] == '/') || (inputFilePath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentPathSegment != '\\0' && (*currentPathSegment != '/')); currentPathSegment = currentPathSegment + 1) {\n    }\n    for (; inputFilePath = currentPathSegment, *currentPathSegment == '/'; currentPathSegment = currentPathSegment + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "extract_output_file_00105a20"
        },
        "FUN_0010e158": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e158",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010e158"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoLocation",
                "iVar1": "errnoValue"
            },
            "code": "\nundefined8 closeFile_00102f55(void)\n\n{\n  int errnoValue;\n  int *errnoLocation;\n  int fileDescriptor;\n  \n  errnoLocation = __errno_location();\n  errnoValue = *errnoLocation;\n  close(fileDescriptor);\n  *errnoLocation = errnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "close_file_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "get_temp_file_path_001057a0",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "path_length",
                "lVar4": "index",
                "lVar5": "last_slash_distance",
                "pcVar6": "new_path",
                "bVar7": "zero_byte",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] get_temp_file_path_001057a0(char *file_path,int *file_descriptor,undefined8 arg3,undefined8 arg4)\n\n{\n  int result;\n  char *last_slash;\n  long path_length;\n  long index;\n  long last_slash_distance;\n  char *new_path;\n  byte zero_byte;\n  undefined return_value [16];\n  \n  zero_byte = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    last_slash_distance = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(last_slash_distance + 0xb);\n    path_length = last_slash_distance + 1;\n    new_path = last_slash;\n    for (index = last_slash_distance; index != 0; index = index + -1) {\n      *new_path = *file_path;\n      file_path = file_path + (ulong)zero_byte * -2 + 1;\n      new_path = new_path + (ulong)zero_byte * -2 + 1;\n    }\n    last_slash[last_slash_distance] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    new_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    new_path = last_slash;\n  }\n  return_value._8_8_ = arg4;\n  return_value._0_8_ = new_path;\n  return return_value;\n}\n\n",
            "called": [
                "make_tempname.cold",
                "mkstemp",
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "get_temp_file_path_001057a0"
        },
        "FUN_00102550": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "ar_open",
                "set_times.cold",
                "get_file_size.cold",
                "print_contents",
                "smart_rename.constprop.0.cold",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102550"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "report",
                "main",
                "ar_emul_default_usage",
                "bfd_nonfatal.cold",
                "list_supported_targets",
                "yyparse.isra.0",
                "ranlib_usage",
                "list_matching_formats",
                "print_arelt_descr.cold",
                "open_inarch",
                "map_over_list",
                "ar_open",
                "map_over_members.cold",
                "usage",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_0010e0f8": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f8",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f8"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_on_error_00107c10",
                "bfd_nonfatal": "handleNonFatal",
                "xexit": "exitProgram"
            },
            "code": "\nvoid exitOnError_00107c10(void)\n\n{\n  handleNonFatal();\n                    \n  exitProgram(1);\n}\n\n",
            "called": [
                "bfd_nonfatal",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "write_archive",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "exit_on_error_00107c10"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "report",
                "prompt",
                "bfd_nonfatal.cold",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010e0f0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f0",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f0"
        },
        "FUN_001024e0": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024e0"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_exit_functions_00107cc0",
                "plVar4": "currentFunction",
                "uVar5": "functionIndex",
                "lVar1": "remainingFunctions",
                "lVar2": "tempCounter",
                "lVar3": "tempIndex"
            },
            "code": "\nvoid executeExitFunctions_00107cc0(void)\n\n{\n  long remainingFunctions;\n  long tempCounter;\n  long tempIndex;\n  long *currentFunction;\n  uint functionIndex;\n  \n  currentFunction = (long *)xatexit_head;\n  if (xatexit_head != (undefined *)0x0) {\n    do {\n      functionIndex = *(int *)(currentFunction + 1) - 1;\n      if (-1 < (int)functionIndex) {\n        remainingFunctions = (long)(int)functionIndex;\n        functionIndex = functionIndex & 7;\n        (*(code *)currentFunction[remainingFunctions + 2])();\n        tempCounter = remainingFunctions + -1;\n        if (-1 < (int)tempCounter) {\n          tempIndex = tempCounter;\n          if (functionIndex != 0) {\n            if (functionIndex != 1) {\n              if (functionIndex != 2) {\n                if (functionIndex != 3) {\n                  if (functionIndex != 4) {\n                    if (functionIndex != 5) {\n                      if (functionIndex != 6) {\n                        (*(code *)currentFunction[remainingFunctions + 1])();\n                        tempCounter = remainingFunctions + -2;\n                      }\n                      (*(code *)currentFunction[tempCounter + 2])();\n                      tempCounter = tempCounter + -1;\n                    }\n                    (*(code *)currentFunction[tempCounter + 2])();\n                    tempCounter = tempCounter + -1;\n                  }\n                  (*(code *)currentFunction[tempCounter + 2])();\n                  tempCounter = tempCounter + -1;\n                }\n                (*(code *)currentFunction[tempCounter + 2])();\n                tempCounter = tempCounter + -1;\n              }\n              (*(code *)currentFunction[tempCounter + 2])();\n              tempCounter = tempCounter + -1;\n            }\n            (*(code *)currentFunction[tempCounter + 2])();\n            tempIndex = tempCounter + -1;\n            if ((int)(tempCounter + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)currentFunction[tempIndex + 2])();\n            remainingFunctions = tempIndex + -1;\n            (*(code *)currentFunction[tempIndex + 1])();\n            (*(code *)currentFunction[tempIndex])();\n            (*(code *)currentFunction[remainingFunctions])();\n            (*(code *)currentFunction[tempIndex + -2])();\n            (*(code *)currentFunction[tempIndex + -3])();\n            (*(code *)currentFunction[tempIndex + -4])();\n            (*(code *)currentFunction[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)remainingFunctions + -7);\n        }\n      }\nLAB_00107d96:\n      currentFunction = (long *)*currentFunction;\n    } while (currentFunction != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_functions_00107cc0"
        },
        "FUN_0010e288": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e288",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e288"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "append_constprop_00105ae0",
                "param_1": "paramA",
                "param_2": "paramB",
                "param_3": "paramC",
                "param_4": "paramD"
            },
            "code": "\nvoid appendConstprop_00105ae0(undefined8 paramA,undefined8 paramB,undefined paramC,undefined paramD)\n\n{\n  do_ar_emul_append_constprop_0(paramA,paramB,paramC,paramD);\n  return;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "append_constprop_00105ae0"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "report_and_exit_00107690",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "value1",
                "local_a8": "value2",
                "local_a0": "value3",
                "local_98": "value4",
                "local_90": "value5",
                "local_88": "output1",
                "local_78": "output2",
                "local_68": "output3",
                "local_58": "output4",
                "local_48": "output5",
                "local_38": "output6",
                "local_28": "output7",
                "local_18": "output8"
            },
            "code": "\nvoid reportAndExit_00107690(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined temporaryBuffer [8];\n  undefined8 value1;\n  undefined8 value2;\n  undefined8 value3;\n  undefined8 value4;\n  undefined8 value5;\n  undefined4 output1;\n  undefined4 output2;\n  undefined4 output3;\n  undefined4 output4;\n  undefined4 output5;\n  undefined4 output6;\n  undefined4 output7;\n  undefined4 output8;\n  \n  if (condition != '\\0') {\n    output1 = input1;\n    output2 = input2;\n    output3 = input3;\n    output4 = input4;\n    output5 = input5;\n    output6 = input6;\n    output7 = input7;\n    output8 = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  localBuffer = temporaryBuffer;\n  length = 0x30;\n  value1 = param2;\n  value2 = param3;\n  value3 = param4;\n  value4 = param5;\n  value5 = param6;\n  report(param1,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "report",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "report_and_exit_00107690"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetPtr",
                "pcVar2": "message",
                "__ptr": "targetListPtr",
                "plVar3": "currentTargetPtr"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long targetPtr;\n  char *message;\n  long *targetListPtr;\n  long *currentTargetPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetListPtr = (long *)bfd_target_list();\n  currentTargetPtr = targetListPtr;\n  while( true ) {\n    targetPtr = *currentTargetPtr;\n    currentTargetPtr = currentTargetPtr + 1;\n    if (targetPtr == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetListPtr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "free",
                "bfd_target_list",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_0010e280": {
            "renaming": {},
            "code": "\n\n\n\nvoid perror(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* perror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e280",
            "calling": [
                "perror"
            ],
            "imported": false,
            "current_name": "FUN_0010e280"
        },
        "FUN_00102560": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102560"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_basename_00105830",
                "param_1": "input_string",
                "param_2": "input_struct_ptr",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "__s": "source_string",
                "uVar3": "source_length",
                "pcVar4": "destination_string",
                "bVar5": "is_negative",
                "auVar6": "return_value"
            },
            "code": "\nundefined  [16] extract_basename_00105830(char *input_string,long input_struct_ptr,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  long lVar1;\n  size_t sVar2;\n  char *source_string;\n  ulong source_length;\n  char *destination_string;\n  byte is_negative;\n  undefined return_value [16];\n  \n  is_negative = 0;\n  if (full_pathname == '\\0') {\n    source_string = (char *)lbasename();\n    input_string = source_string;\n    if ((ar_truncate != '\\0') && (input_struct_ptr != 0)) {\n      sVar2 = strlen(source_string);\n      source_length = (ulong)*(byte *)(*(long *)(input_struct_ptr + 8) + 0x1e);\n      if (source_length < sVar2) {\n        input_string = (char *)xmalloc(source_length + 1);\n        lVar1 = *(long *)(input_struct_ptr + 8);\n        destination_string = input_string;\n        for (source_length = (ulong)*(byte *)(lVar1 + 0x1e); source_length != 0; source_length = source_length - 1) {\n          *destination_string = *source_string;\n          source_string = source_string + (ulong)is_negative * -2 + 1;\n          destination_string = destination_string + (ulong)is_negative * -2 + 1;\n        }\n        input_string[*(byte *)(lVar1 + 0x1e)] = '\\0';\n      }\n    }\n  }\n  return_value._8_8_ = unused_param_2;\n  return_value._0_8_ = input_string;\n  return return_value;\n}\n\n",
            "called": [
                "normalize.cold",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "map_over_members",
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "extract_basename_00105830"
        },
        "FUN_0010e160": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e160",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_0010e160"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "open_output_file.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_00107c20",
                "param_1": "errorContext",
                "iVar1": "errorCode",
                "uVar2": "errorMessage",
                "in_R10": "unresolvedArgument"
            },
            "code": "\n\n\nvoid printError_00107c20(long errorContext)\n\n{\n  int errorCode;\n  undefined8 errorMessage;\n  undefined8 unresolvedArgument;\n  \n  errorCode = bfd_get_error();\n  if (errorCode == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorCode);\n  }\n  fflush(_stdout);\n  if (errorContext != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorContext,errorMessage,unresolvedArgument);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,unresolvedArgument);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "print_error_00107c20"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "remove_output.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_001024f0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "print_arelt_descr",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001024f0"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "initialize_output_file_00102e57",
                "pFVar1": "outputFile",
                "output_filename": "concatenatedFilename"
            },
            "code": "\nvoid initializeOutputFile_00102e57(void)\n\n{\n  FILE *outputFile;\n  \n  concatenatedFilename = (char *)concat();\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",concatenatedFilename);\n  }\n  outputFile = fopen(concatenatedFilename,\"w\");\n  if (outputFile != (FILE *)0x0) {\n    return;\n  }\n  perror(concatenatedFilename);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00102e57"
        },
        "FUN_0010e058": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e058",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010e058"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_files_00105af0",
                "param_1": "file_list",
                "param_2": "archive",
                "param_3": "perform_action",
                "param_4": "check_format",
                "cVar1": "is_bfd_format_valid",
                "uVar2": "result",
                "lVar3": "archived_file",
                "uVar4": "output",
                "do_ar_emul_append_constprop_0_cold": "perform_action_on_archive",
                "bfd_check_format": "is_format_valid",
                "bfd_openr_next_archived_file": "get_next_archived_file"
            },
            "code": "\nulong process_files_00105af0(long *file_list,long archive,char perform_action,char check_format)\n\n{\n  char is_bfd_format_valid;\n  uint result;\n  long archived_file;\n  ulong output;\n  \n  if (check_format == '\\0') {\n    if (perform_action != '\\0') {\n      output = perform_action_on_archive();\n      return output;\n    }\n  }\n  else {\n    is_bfd_format_valid = is_format_valid(archive,2);\n    if (is_bfd_format_valid != '\\0') {\n      output = 0;\n      for (archived_file = get_next_archived_file(archive,0); archived_file != 0;\n          archived_file = get_next_archived_file(archive,archived_file)) {\n        result = process_files_00105af0(file_list,archived_file,perform_action,1);\n        if ((char)result != '\\0') {\n          output = (ulong)result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return output;\n    }\n    if (perform_action != '\\0') {\n      output = perform_action_on_archive();\n      return output;\n    }\n  }\n  *(long *)(archive + 0xf0) = *file_list;\n  *file_list = archive;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "do_ar_emul_append.constprop.0",
                "do_ar_emul_append.constprop.0.cold",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "do_ar_emul_append.constprop.0",
                "replace_members.cold",
                "ar_emul_default_append"
            ],
            "imported": false,
            "current_name": "process_files_00105af0"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "get_file_size",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102450": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102450"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_return_00102ba1",
                "unaff_RBP": "ptr_to_free_memory",
                "unaff_retaddr": "return_address",
                "auVar1": "return_value"
            },
            "code": "\nundefined  [16] free_and_return_00102ba1(void)\n\n{\n  undefined return_value [16];\n  void *ptr_to_free_memory;\n  ulong return_address;\n  \n  free(ptr_to_free_memory);\n  return_value._8_8_ = 0;\n  return_value._0_8_ = return_address;\n  return return_value << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "free_and_return_00102ba1"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102570": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "FUN_00102570"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_stats_00102d2f",
                "unaff_RBX": "fileContents",
                "unaff_RBP": "outputFile",
                "unaff_R12": "archiveHeader",
                "unaff_R13": "formattedTime",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "filePermissionChar",
                "cStack0000000000000016": "filePermissionChar2",
                "cStack0000000000000017": "filePermissionChar3",
                "in_stack_00000018": "filePermissionChar4",
                "cStack0000000000000019": "filePermissionChar5",
                "cStack000000000000001a": "filePermissionChar6",
                "cStack000000000000001b": "filePermissionChar7",
                "cStack000000000000001c": "filePermissionChar8",
                "cStack000000000000001d": "filePermissionChar9",
                "cStack000000000000001e": "filePermissionChar10",
                "uStack000000000000001f": "dummyVar",
                "uStack0000000000000068": "fileMode",
                "uStack000000000000006c": "numLinks",
                "in_stack_00000070": "fileSize",
                "in_stack_00000080": "formattedTimestamp"
            },
            "code": "\nvoid printFileStats_00102d2f(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *__format;\n  uint uVar4;\n  char **fileContents;\n  FILE *outputFile;\n  long archiveHeader;\n  void *formattedTime;\n  int fileDescriptor;\n  undefined filePermissionChar;\n  char filePermissionChar2;\n  char filePermissionChar3;\n  char filePermissionChar4;\n  char filePermissionChar5;\n  char filePermissionChar6;\n  char filePermissionChar7;\n  char filePermissionChar8;\n  char filePermissionChar9;\n  char filePermissionChar10;\n  undefined dummyVar;\n  uint fileMode;\n  uint numLinks;\n  uint fileSize;\n  undefined8 formattedTimestamp;\n  \n  do {\n    bVar1 = bfd_fatal();\n    *(uint *)((long)fileContents + 0x44) = *(uint *)((long)fileContents + 0x44) | 0x100000;\n    if ((make_thin_archive != '\\0') || ((*(byte *)(archiveHeader + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileContents + 0x49) = bVar1 | 0x10;\n    }\n    cVar2 = bfd_set_archive_head();\n  } while (cVar2 == '\\0');\n  dup(fileDescriptor);\n  cVar2 = bfd_close();\n  if (cVar2 != '\\0') {\n    output_bfd = 0;\n    output_filename = 0;\n    bfd_close();\n    iVar3 = smart_rename_constprop_0();\n    if (iVar3 == 0) {\n      free(formattedTime);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  bfd_fatal();\n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar4 = fileMode & 0xf000;\n  if (uVar4 == 0x4000) {\n    filePermissionChar = 100;\n  }\n  else if (uVar4 == 0xa000) {\n    filePermissionChar = 0x6c;\n  }\n  else if (uVar4 == 0x6000) {\n    filePermissionChar = 0x62;\n  }\n  else if (uVar4 == 0x2000) {\n    filePermissionChar = 99;\n  }\n  else if (uVar4 == 0xc000) {\n    filePermissionChar = 0x73;\n  }\n  else {\n    filePermissionChar = 0x70;\n    if (uVar4 != 0x1000) {\n      filePermissionChar = 0x2d;\n    }\n  }\n  filePermissionChar2 = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  filePermissionChar3 = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  filePermissionChar4 = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  filePermissionChar5 = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  filePermissionChar6 = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  filePermissionChar7 = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  filePermissionChar8 = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  filePermissionChar9 = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  filePermissionChar10 = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (filePermissionChar4 == 'x') {\n      filePermissionChar4 = 's';\n    }\n    else {\n      filePermissionChar4 = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (filePermissionChar7 == 'x') {\n      filePermissionChar7 = 's';\n    }\n    else {\n      filePermissionChar7 = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (filePermissionChar10 == 'x') {\n      filePermissionChar10 = 't';\n    }\n    else {\n      filePermissionChar10 = 'T';\n    }\n  }\n  dummyVar = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)numLinks,\n          (ulong)fileSize,formattedTimestamp,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*fileContents,outputFile);\n  if ((char)archiveHeader != '\\0') {\n    if ((*(byte *)((long)fileContents + 0x49) & 0x10) == 0) {\n      if (fileContents[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileContents[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dup",
                "bfd_fatal",
                "free",
                "bfd_close",
                "smart_rename.constprop.0",
                "bfd_set_archive_head",
                "xexit",
                "write_archive.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "print_file_stats_00102d2f"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "prompt",
                "main",
                "do_ar_emul_append.constprop.0.cold",
                "ar_emul_default_replace",
                "yyerror.constprop.0",
                "print_contents",
                "yyparse.isra.0",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(errorStream,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0",
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "main",
                "normalize",
                "replace_members.cold",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_write_file_00102c25",
                "iVar1": "comparisonResult",
                "iVar2": "status",
                "piVar3": "errorPointer",
                "pcVar4": "errorMessage",
                "uVar5": "messageId",
                "pplVar6": "fileList",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "unaff_RBX": "archiveInfo",
                "plVar8": "filePointer",
                "puVar9": "paramPointer",
                "uVar10": "bytesProcessed",
                "sVar11": "readSize",
                "param_7": "paramArray",
                "param_11": "filePermissions",
                "param_12": "fileSize",
                "output_file": "outputFile",
                "output_filename": "outputFileName",
                "preserve_dates": "preserveDates"
            },
            "code": "\nlong * extractAndWriteFile_00102c25(void)\n\n{\n  int comparisonResult;\n  int status;\n  int *errorPointer;\n  char *errorMessage;\n  undefined8 messageId;\n  long **fileList;\n  void *buffer;\n  size_t bytesRead;\n  long loopCounter;\n  long **archiveInfo;\n  long *filePointer;\n  undefined4 *paramPointer;\n  ulong bytesProcessed;\n  size_t readSize;\n  undefined4 *paramArray;\n  __mode_t filePermissions;\n  ulong fileSize;\n  \n  paramPointer = paramArray;\n  for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *paramPointer = 0;\n    paramPointer = paramPointer + 1;\n  }\n  fileList = (long **)archiveInfo[0x1d];\n  if ((long **)archiveInfo[0x1d] == (long **)0x0) {\n    fileList = archiveInfo;\n  }\n  status = (*(code *)fileList[1][0x3d])();\n  if (status != 0) {\n    filePointer = *archiveInfo;\n    messageId = dcgettext(0,\"internal stat error on %s\",5);\n    status = fatal(messageId,filePointer);\n    messageId = posname;\n    if (status == 3) {\n      for (; *filePointer != 0; filePointer = (long *)(*filePointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*filePointer != (undefined8 *)0x0; filePointer = (long *)(*filePointer + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*filePointer,messageId);\n        if (comparisonResult == 0) {\n          if (status != 2) {\n            return filePointer;\n          }\n          return (long *)(*filePointer + 0xf0);\n        }\n      }\n    }\n    return filePointer;\n  }\n  bfd_seek();\n  outputFile = (FILE *)0x0;\n  if (fileSize == 0) {\nLAB_00102ca2:\n    outputFile = (FILE *)open_outputFile_isra_0(*archiveInfo);\n  }\n  else {\n    bytesProcessed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      readSize = fileSize - bytesProcessed;\n      if (0x2000 < readSize) {\n        readSize = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,readSize);\n      if (readSize != bytesRead) {\nLAB_00102c78:\n        archiveInfo = (long **)*archiveInfo[0x1d];\n        messageId = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(messageId,archiveInfo);\n        goto LAB_00102ca2;\n      }\n      if (outputFile == (FILE *)0x0) {\n        outputFile = (FILE *)open_outputFile_isra_0(*archiveInfo);\n      }\n      readSize = fwrite(buffer,1,bytesRead,outputFile);\n      if (readSize != bytesRead) {\n        errorPointer = __errno_location();\n        errorMessage = strerror(*errorPointer);\n        fatal(\"%s: %s\",outputFileName,errorMessage);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + bytesRead;\n    } while (bytesProcessed < fileSize);\n    free(buffer);\n  }\n  fclose(outputFile);\n  errorMessage = outputFileName;\n  outputFile = (FILE *)0x0;\n  chmod(outputFileName,filePermissions);\n  if (preserveDates != 0) {\n    set_times(errorMessage,paramArray);\n  }\n  outputFileName = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "bfd_bread",
                "chmod",
                "open_output_file.isra.0",
                "free",
                "fclose",
                "fwrite",
                "set_times",
                "strerror",
                "fatal",
                "dcgettext",
                "bfd_seek",
                "__errno_location",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "extract_file"
            ],
            "imported": false,
            "current_name": "extract_and_write_file_00102c25"
        },
        "FUN_0010e188": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e188",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010e188"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "open_inarch",
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_string_with_length_check_00102bb0",
                "in_RAX": "sourceString",
                "sVar2": "sourceLength",
                "puVar3": "destinationString",
                "uVar4": "maxLength",
                "unaff_RBX": "sourcePointer",
                "unaff_RBP": "stackFramePointer",
                "puVar5": "destinationPointer",
                "bVar6": "isNegative",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyStringWithLengthCheck_00102bb0(void)\n\n{\n  long lVar1;\n  char *sourceString;\n  size_t sourceLength;\n  undefined *destinationString;\n  ulong maxLength;\n  undefined *sourcePointer;\n  long stackFramePointer;\n  undefined *destinationPointer;\n  byte isNegative;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  isNegative = 0;\n  sourceLength = strlen(sourceString);\n  maxLength = (ulong)*(byte *)(*(long *)(stackFramePointer + 8) + 0x1e);\n  destinationString = sourcePointer;\n  if (maxLength < sourceLength) {\n    destinationString = (undefined *)xmalloc(maxLength + 1);\n    lVar1 = *(long *)(stackFramePointer + 8);\n    destinationPointer = destinationString;\n    for (maxLength = (ulong)*(byte *)(lVar1 + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n      *destinationPointer = *sourcePointer;\n      sourcePointer = sourcePointer + (ulong)isNegative * -2 + 1;\n      destinationPointer = destinationPointer + (ulong)isNegative * -2 + 1;\n    }\n    destinationString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = destinationString;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "normalize"
            ],
            "imported": false,
            "current_name": "copy_string_with_length_check_00102bb0"
        },
        "FUN_0010e060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010e060"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "open_inarch",
                "main",
                "ar_open",
                "write_archive",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "map_over_members",
                "map_over_list",
                "main",
                "get_pos_bfd.cold",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102460": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "main",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102460"
        },
        "FUN_00102580": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102580"
        },
        "FUN_0010e180": {
            "renaming": {},
            "code": "\n\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e180",
            "calling": [
                "calloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e180"
        }
    },
    "used_tokens": 100355,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_00107920",
            "FUN_001033d6",
            "FUN_00102000",
            "FUN_00105870",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107730",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_0010300e",
            "FUN_00107740",
            "FUN_001028ed",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00105cc0",
            "FUN_00102f08",
            "FUN_0010285f",
            "FUN_0010394a",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_00103172",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00105d60",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00107c10",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107c20",
            "FUN_00102e57",
            "FUN_00102ba1",
            "FUN_00102d2f",
            "FUN_001033b0",
            "FUN_00102c25",
            "FUN_00102bb0"
        ],
        [
            "FUN_00102e6f",
            "FUN_00105570"
        ],
        [
            "FUN_00105af0"
        ]
    ],
    "locked_functions": []
}