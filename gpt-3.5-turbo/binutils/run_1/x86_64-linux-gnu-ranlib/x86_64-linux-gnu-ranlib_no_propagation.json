{
    "functions": {
        "_DT_INIT": {
            "entrypoint": "0x00102000",
            "current_name": "_DT_INIT",
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "__gmon_start__"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102020": {
            "entrypoint": "0x00102020",
            "current_name": "execute_indirect_jump_00102020",
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "function_pointer",
                "_": "jump_address"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102020": {
                    "10": "execute_indirect_jump",
                    "1": "execute_function_zero",
                    "2": "call_indirect_jump",
                    "3": "execute_function"
                },
                "code": {
                    "5": "function_pointer",
                    "1": "indirect_call_func"
                },
                "undefined": {
                    "1": "indirect_function_pointer"
                },
                "PTR_0": {
                    "1": "jump_function"
                },
                "code*": {
                    "1": "jump_function"
                },
                "<original_variable_name_1>": {
                    "1": "temp_var1"
                },
                "<original_variable_name_2>": {
                    "1": "temp_var2"
                },
                "_": {
                    "1": "jump_address"
                },
                "PTR_undefined": {
                    "1": "jump_target"
                },
                "<original_function_name>": {
                    "1": "execute_code_at_address"
                },
                "<undefined_parameter_name>": {
                    "1": "address"
                },
                "PTR": {
                    "1": "ptr_"
                },
                "(*(code *)(undefined *)0x0)()": {
                    "1": "execute_indirect_function"
                }
            }
        },
        "free": {
            "entrypoint": "0x00102030",
            "current_name": "free",
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102c25",
                "FUN_00105db0",
                "FUN_00102d2f",
                "FUN_00103e95",
                "FUN_0010266f",
                "FUN_00103bd1",
                "FUN_00102ba1",
                "FUN_00103a78"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "utimensat": {
            "entrypoint": "0x00102040",
            "current_name": "utimensat",
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00107c80"
            ],
            "called": [
                "utimensat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_cache_close": {
            "entrypoint": "0x00102050",
            "current_name": "bfd_cache_close",
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95"
            ],
            "called": [
                "bfd_cache_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "__errno_location": {
            "entrypoint": "0x00102060",
            "current_name": "__errno_location",
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001028ed",
                "FUN_00105300",
                "FUN_001031cf",
                "FUN_00102c25",
                "FUN_00105c00",
                "FUN_00102f55",
                "FUN_00103e95",
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_00102f1e",
                "FUN_00102fd7",
                "FUN_00103a78"
            ],
            "called": [
                "__errno_location"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "unlink": {
            "entrypoint": "0x00102070",
            "current_name": "unlink",
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103e95",
                "FUN_00102f1e"
            ],
            "called": [
                "unlink"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_make_writable": {
            "entrypoint": "0x00102080",
            "current_name": "bfd_make_writable",
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_make_writable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_plugin_set_plugin": {
            "entrypoint": "0x00102090",
            "current_name": "bfd_plugin_set_plugin",
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_make_readable": {
            "entrypoint": "0x001020a0",
            "current_name": "bfd_make_readable",
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_make_readable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "ferror": {
            "entrypoint": "0x001020b0",
            "current_name": "ferror",
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "called": [
                "ferror"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "isatty": {
            "entrypoint": "0x001020c0",
            "current_name": "isatty",
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "called": [
                "isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "entrypoint": "0x001020d0",
            "current_name": "bfd_set_default_target",
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_set_default_target"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fread": {
            "entrypoint": "0x001020e0",
            "current_name": "fread",
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "called": [
                "fread"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_set_archive_head": {
            "entrypoint": "0x001020f0",
            "current_name": "bfd_set_archive_head",
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102d2f"
            ],
            "called": [
                "bfd_set_archive_head"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "filename_cmp": {
            "entrypoint": "0x00102100",
            "current_name": "filename_cmp",
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102cd9",
                "FUN_00103e95",
                "FUN_00105480",
                "FUN_001032a8"
            ],
            "called": [
                "filename_cmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "write": {
            "entrypoint": "0x00102110",
            "current_name": "write",
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105c00"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "textdomain": {
            "entrypoint": "0x00102120",
            "current_name": "textdomain",
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "textdomain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_openr": {
            "entrypoint": "0x00102130",
            "current_name": "bfd_openr",
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00103e95",
                "FUN_00103c60",
                "FUN_00102710"
            ],
            "called": [
                "bfd_openr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fclose": {
            "entrypoint": "0x00102140",
            "current_name": "fclose",
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102bf5",
                "FUN_00102c25",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "called": [
                "fclose"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "ctime": {
            "entrypoint": "0x00102150",
            "current_name": "ctime",
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001079c0"
            ],
            "called": [
                "ctime"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bindtextdomain": {
            "entrypoint": "0x00102160",
            "current_name": "bindtextdomain",
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bindtextdomain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "dcgettext": {
            "entrypoint": "0x00102170",
            "current_name": "dcgettext",
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_0010266f",
                "FUN_00103bd1",
                "FUN_001025a0",
                "FUN_00103a78",
                "FUN_001028ed",
                "FUN_0010336b",
                "FUN_00102f96",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_0010394a",
                "FUN_00102e6f",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_00102d8c",
                "FUN_001052a0",
                "FUN_0010285f",
                "FUN_00102f1e",
                "FUN_00102fd7",
                "FUN_001032a8",
                "FUN_001075e0"
            ],
            "called": [
                "dcgettext"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strlen": {
            "entrypoint": "0x00102180",
            "current_name": "strlen",
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102bb0",
                "FUN_00105a68"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "getopt_long": {
            "entrypoint": "0x00102190",
            "current_name": "getopt_long",
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "getopt_long"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "printf": {
            "entrypoint": "0x001021a0",
            "current_name": "printf",
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0",
                "FUN_001031a5",
                "FUN_00103172",
                "FUN_00102f08",
                "FUN_00103ba8",
                "FUN_00103e95",
                "FUN_00105a68",
                "FUN_00103a78",
                "FUN_001075e0"
            ],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xrealloc": {
            "entrypoint": "0x001021b0",
            "current_name": "xrealloc",
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "xrealloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strrchr": {
            "entrypoint": "0x001021c0",
            "current_name": "strrchr",
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001057a0"
            ],
            "called": [
                "strrchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "dup": {
            "entrypoint": "0x001021d0",
            "current_name": "dup",
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "called": [
                "dup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "lseek": {
            "entrypoint": "0x001021e0",
            "current_name": "lseek",
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105c00"
            ],
            "called": [
                "lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fputs": {
            "entrypoint": "0x001021f0",
            "current_name": "fputs",
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102d8c"
            ],
            "called": [
                "fputs"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "concat": {
            "entrypoint": "0x00102200",
            "current_name": "concat",
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102e57",
                "FUN_00105a68"
            ],
            "called": [
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_target_list": {
            "entrypoint": "0x00102210",
            "current_name": "bfd_target_list",
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010266f"
            ],
            "called": [
                "bfd_target_list"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_get_error": {
            "entrypoint": "0x00102220",
            "current_name": "bfd_get_error",
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "called": [
                "bfd_get_error"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xmalloc": {
            "entrypoint": "0x00102230",
            "current_name": "xmalloc",
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00105db0",
                "FUN_00102bb0",
                "FUN_001057a0",
                "FUN_00103a78"
            ],
            "called": [
                "xmalloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_set_error": {
            "entrypoint": "0x00102240",
            "current_name": "bfd_set_error",
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "called": [
                "bfd_set_error"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "entrypoint": "0x00102250",
            "current_name": "xmalloc_set_program_name",
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "xmalloc_set_program_name"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "close": {
            "entrypoint": "0x00102260",
            "current_name": "close",
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001058b0",
                "FUN_00105c00",
                "FUN_00102f55"
            ],
            "called": [
                "close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xstrdup": {
            "entrypoint": "0x00102270",
            "current_name": "xstrdup",
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_00103e95",
                "FUN_00103c60"
            ],
            "called": [
                "xstrdup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fputc": {
            "entrypoint": "0x00102280",
            "current_name": "fputc",
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010266f",
                "FUN_00103bd1",
                "FUN_00102d8c"
            ],
            "called": [
                "fputc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "read": {
            "entrypoint": "0x00102290",
            "current_name": "read",
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105c00"
            ],
            "called": [
                "read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_create": {
            "entrypoint": "0x001022a0",
            "current_name": "bfd_create",
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_create"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_init": {
            "entrypoint": "0x001022b0",
            "current_name": "bfd_init",
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "lbasename": {
            "entrypoint": "0x001022c0",
            "current_name": "lbasename",
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001028ed",
                "FUN_00105830",
                "FUN_00105db0",
                "FUN_00102e6f"
            ],
            "called": [
                "lbasename"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "calloc": {
            "entrypoint": "0x001022d0",
            "current_name": "calloc",
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103df9"
            ],
            "called": [
                "calloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strcmp": {
            "entrypoint": "0x001022e0",
            "current_name": "strcmp",
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "putc": {
            "entrypoint": "0x001022f0",
            "current_name": "putc",
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001078c0"
            ],
            "called": [
                "putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_fdopenr": {
            "entrypoint": "0x00102300",
            "current_name": "bfd_fdopenr",
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_fdopenr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fprintf": {
            "entrypoint": "0x00102310",
            "current_name": "fprintf",
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00103e95",
                "FUN_0010266f",
                "FUN_00103bd1",
                "FUN_0010336b",
                "FUN_001078c0",
                "FUN_00105db0",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_00102d8c",
                "FUN_001033b0",
                "FUN_0010285f",
                "FUN_001032a8"
            ],
            "called": [
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "ftell": {
            "entrypoint": "0x00102320",
            "current_name": "ftell",
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "ftell"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "stat": {
            "entrypoint": "0x00102330",
            "current_name": "stat",
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001028ed",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001052a0"
            ],
            "called": [
                "stat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_set_format": {
            "entrypoint": "0x00102340",
            "current_name": "bfd_set_format",
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_00103e95",
                "FUN_00103c60"
            ],
            "called": [
                "bfd_set_format"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strtol": {
            "entrypoint": "0x00102350",
            "current_name": "strtol",
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "clearerr": {
            "entrypoint": "0x00102360",
            "current_name": "clearerr",
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103e95"
            ],
            "called": [
                "clearerr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_bwrite": {
            "entrypoint": "0x00102370",
            "current_name": "bfd_bwrite",
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_bwrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "memcpy": {
            "entrypoint": "0x00102380",
            "current_name": "memcpy",
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fileno": {
            "entrypoint": "0x00102390",
            "current_name": "fileno",
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "called": [
                "fileno"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_plugin_set_program_name": {
            "entrypoint": "0x001023a0",
            "current_name": "bfd_plugin_set_program_name",
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "malloc": {
            "entrypoint": "0x001023b0",
            "current_name": "malloc",
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001033d6"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fflush": {
            "entrypoint": "0x001023c0",
            "current_name": "fflush",
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001078c0",
                "FUN_00102f96",
                "FUN_00103ba8",
                "FUN_00103bd1"
            ],
            "called": [
                "fflush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "unlink_if_ordinary": {
            "entrypoint": "0x001023d0",
            "current_name": "unlink_if_ordinary",
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102bf5"
            ],
            "called": [
                "unlink_if_ordinary"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "mkstemp": {
            "entrypoint": "0x001023e0",
            "current_name": "mkstemp",
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001057a0"
            ],
            "called": [
                "mkstemp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fseek": {
            "entrypoint": "0x001023f0",
            "current_name": "fseek",
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "fseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "realloc": {
            "entrypoint": "0x00102400",
            "current_name": "realloc",
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "setlocale": {
            "entrypoint": "0x00102410",
            "current_name": "setlocale",
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "setlocale"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_openw": {
            "entrypoint": "0x00102420",
            "current_name": "bfd_openw",
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "called": [
                "bfd_openw"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "chmod": {
            "entrypoint": "0x00102430",
            "current_name": "chmod",
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102c25"
            ],
            "called": [
                "chmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "entrypoint": "0x00102440",
            "current_name": "bfd_set_error_program_name",
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_set_error_program_name"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "memmove": {
            "entrypoint": "0x00102450",
            "current_name": "memmove",
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "open": {
            "entrypoint": "0x00102460",
            "current_name": "open",
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0",
                "FUN_00105c00"
            ],
            "called": [
                "open"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fopen": {
            "entrypoint": "0x00102470",
            "current_name": "fopen",
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00105a68"
            ],
            "called": [
                "fopen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "xexit": {
            "entrypoint": "0x00102480",
            "current_name": "xexit",
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c10",
                "FUN_0010394a",
                "FUN_00102d2f",
                "FUN_00107650",
                "FUN_0010342d",
                "FUN_00107690",
                "FUN_0010315d",
                "FUN_00105a68"
            ],
            "called": [
                "xexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_close": {
            "entrypoint": "0x00102490",
            "current_name": "bfd_close",
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00102d2f",
                "FUN_00103e95",
                "FUN_00102710"
            ],
            "called": [
                "bfd_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "perror": {
            "entrypoint": "0x001024a0",
            "current_name": "perror",
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "called": [
                "perror"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "vfprintf": {
            "entrypoint": "0x001024b0",
            "current_name": "vfprintf",
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001078c0"
            ],
            "called": [
                "vfprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "entrypoint": "0x001024c0",
            "current_name": "bfd_check_format_matches",
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "called": [
                "bfd_check_format_matches"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_errmsg": {
            "entrypoint": "0x001024d0",
            "current_name": "bfd_errmsg",
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "called": [
                "bfd_errmsg"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_find_target": {
            "entrypoint": "0x001024e0",
            "current_name": "bfd_find_target",
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "bfd_find_target"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "sprintf": {
            "entrypoint": "0x001024f0",
            "current_name": "sprintf",
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001079c0",
                "FUN_00102d8c"
            ],
            "called": [
                "sprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "exit": {
            "entrypoint": "0x00102500",
            "current_name": "exit",
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "called": [
                "exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fwrite": {
            "entrypoint": "0x00102510",
            "current_name": "fwrite",
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00103a78"
            ],
            "called": [
                "fwrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_check_format": {
            "entrypoint": "0x00102520",
            "current_name": "bfd_check_format",
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105af0",
                "FUN_00103c60",
                "FUN_00102710"
            ],
            "called": [
                "bfd_check_format"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "entrypoint": "0x00102530",
            "current_name": "bfd_openr_next_archived_file",
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00105300",
                "FUN_00105af0",
                "FUN_00103c60"
            ],
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_bread": {
            "entrypoint": "0x00102540",
            "current_name": "bfd_bread",
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "called": [
                "bfd_bread"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strerror": {
            "entrypoint": "0x00102550",
            "current_name": "strerror",
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102c25",
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_00102f1e",
                "FUN_00102fd7",
                "FUN_00103a78"
            ],
            "called": [
                "strerror"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "getc": {
            "entrypoint": "0x00102560",
            "current_name": "getc",
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103e95"
            ],
            "called": [
                "getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_fdopenw": {
            "entrypoint": "0x00102570",
            "current_name": "bfd_fdopenw",
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001058b0",
                "FUN_00103c60"
            ],
            "called": [
                "bfd_fdopenw"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bfd_seek": {
            "entrypoint": "0x00102580",
            "current_name": "bfd_seek",
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "called": [
                "bfd_seek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "__cxa_finalize": {
            "entrypoint": "0x00102590",
            "current_name": "__cxa_finalize",
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "_FINI_0"
            ],
            "called": [
                "__cxa_finalize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001025a0": {
            "entrypoint": "0x001025a0",
            "current_name": "file_not_found_error_001025a0",
            "code": "\nundefined8 file_not_found_error_001025a0(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00107920(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00107920(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "renaming": {
                "FUN_001025a0": "file_not_found_error_001025a0",
                "piVar1": "errno_ptr",
                "uVar2": "error_message",
                "dcgettext": "localized_error_message",
                "strerror": "get_error_string",
                "__errno_location": "get_errno_location"
            },
            "calling": [
                "FUN_001052a0"
            ],
            "called": [
                "dcgettext",
                "strerror",
                "__errno_location",
                "FUN_00107920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001025a0": {
                    "1": "check_file_exists",
                    "7": "handle_file_error",
                    "5": "handle_file_not_found_error",
                    "8": "file_not_found_error",
                    "2": "check_file_existence"
                },
                "piVar1": {
                    "3": "error_ptr",
                    "2": "errno_pointer",
                    "5": "error_pointer",
                    "11": "errno_ptr",
                    "1": "error_number_pointer"
                },
                "uVar2": {
                    "30": "error_message",
                    "1": "error_string"
                },
                "dcgettext": {
                    "1": "localized_error_message"
                },
                "strerror": {
                    "5": "get_error_string",
                    "1": "get_error_description"
                },
                "__errno_location": {
                    "1": "get_error_pointer",
                    "4": "get_errno_location"
                },
                "*piVar1": {
                    "1": "errno_ptr"
                },
                "FUN_00107920": {
                    "1": "print_error_message"
                }
            }
        },
        "FUN_0010266f": {
            "entrypoint": "0x0010266f",
            "current_name": "print_supported_targets_0010266f",
            "code": "\nvoid print_supported_targets_0010266f(long target,FILE *output_file)\n\n{\n  long current_target;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target = *current_target;\n    current_target = current_target + 1;\n    if (current_target == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "output_file",
                "lVar1": "current_target",
                "pcVar2": "message",
                "__ptr": "target_list",
                "plVar3": "current_target",
                "dcgettext": "get_message",
                "fprintf": "write_to_file",
                "fputc": "write_character",
                "bfd_target_list": "get_target_list",
                "free": "release_memory"
            },
            "calling": [
                "FUN_0010394a",
                "FUN_0010342d"
            ],
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "bfd_target_list",
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010266f": {
                    "31": "print_supported_targets"
                },
                "param_1": {
                    "23": "target",
                    "1": "selected_target",
                    "7": "target_name"
                },
                "param_2": {
                    "26": "output_file",
                    "1": "output",
                    "2": "output_stream"
                },
                "lVar1": {
                    "1": "target_addr",
                    "3": "target",
                    "2": "target_ptr",
                    "8": "current_target_value",
                    "9": "current_target"
                },
                "pcVar2": {
                    "1": "translation",
                    "20": "message",
                    "2": "target_message"
                },
                "__ptr": {
                    "31": "target_list"
                },
                "plVar3": {
                    "1": "ptr_target",
                    "3": "ptr",
                    "18": "current_target",
                    "6": "target_ptr"
                },
                "dcgettext": {
                    "1": "get_localized_text",
                    "2": "get_message"
                },
                "fprintf": {
                    "2": "print_formatted",
                    "1": "print_to_output_file"
                },
                "fputc": {
                    "1": "put_character",
                    "3": "write_character"
                },
                "bfd_target_list": {
                    "4": "get_target_list",
                    "1": "get_list"
                },
                "free": {
                    "4": "release_memory",
                    "1": "free_memory"
                },
                "__stream": {
                    "2": "output_stream"
                },
                "__format": {
                    "2": "format_string"
                },
                "__c": {
                    "2": "character"
                }
            }
        },
        "FUN_00102710": {
            "entrypoint": "0x00102710",
            "current_name": "extract_archived_files_00102710",
            "code": "\n\n\nundefined8 * extract_archived_files_00102710(void)\n\n{\n  long *file_pointer;\n  char format_check_result;\n  byte is_thin_library;\n  int error_code;\n  long bfd_handle;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *output_file;\n  undefined8 stack_variable;\n  undefined8 stack_parameter;\n  \n  bfd_handle = bfd_openr();\n  if (bfd_handle != 0) {\n    format_check_result = bfd_check_format(bfd_handle,1);\n    if (format_check_result != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(bfd_handle + 8);\n    }\n    bfd_close(bfd_handle);\n  }\n  output_file = (undefined8 *)bfd_openw();\n  if (((output_file != (undefined8 *)0x0) && (format_check_result = bfd_set_format(output_file,2), format_check_result != '\\0')) &&\n     (format_check_result = bfd_close(output_file), format_check_result != '\\0')) {\n    if (_DAT_0010d610 == 0) goto label1;\n    goto label2;\n  }\n  FUN_00107c10();\n  do {\n    is_thin_library = *(byte *)((long)output_file + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        library_name = *output_file;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(error_message,library_name);\n        goto handle_error_label;\n      }\n    }\n    else if (is_thin_library == 0) {\n      library_name = *output_file;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(error_message,library_name);\nLAB_001027cb:\n      FUN_00107c20();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nhandle_error_label:\n        FUN_00103bd1(stack_parameter);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      file_pointer = output_file + 0x1e;\n      for (bfd_handle = bfd_openr_next_archived_file(output_file,0); bfd_handle != 0;\n          bfd_handle = bfd_openr_next_archived_file(output_file,bfd_handle)) {\n        *file_pointer = bfd_handle;\n        file_pointer = (long *)(bfd_handle + 0xf0);\n      }\n      *file_pointer = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_file;\n      }\n      do {\n        FUN_00107c10();\nlabel1:\n        library_name = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(library_name);\nlabel2:\n        DAT_0010d618 = stack_variable;\n        output_file = (undefined8 *)bfd_openr();\n      } while (output_file == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(output_file,2,&variable1);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (bfd_handle = bfd_openr_next_archived_file(output_file,0), bfd_handle == 0));\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00102710": "extract_archived_files_00102710",
                "lVar5": "bfd_handle",
                "plVar1": "file_pointer",
                "cVar2": "format_check_result",
                "bVar3": "is_thin_library",
                "iVar4": "error_code",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "puVar8": "output_file",
                "unaff_RBP": "stack_variable",
                "in_stack_00000008": "stack_parameter",
                "bfd_openr": "open_input_file",
                "bfd_check_format": "check_file_format",
                "bfd_close": "close_file",
                "bfd_openw": "open_output_file",
                "bfd_set_format": "set_format",
                "dcgettext": "get_text",
                "LAB_00102826": "label1",
                "LAB_001053b7": "label2",
                "bfd_get_error": "get_error",
                "xexit": "exit_program",
                "bfd_openr_next_archived_file": "get_next_archived_file",
                "LAB_00102812": "handle_error_label",
                "stack0x00000008": "variable1"
            },
            "calling": [
                "FUN_00105300"
            ],
            "called": [
                "bfd_close",
                "bfd_openr",
                "bfd_check_format"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102710": {
                    "3": "extract_library_files",
                    "1": "parse_and_convert_archive_files",
                    "5": "extract_archived_files"
                },
                "PLVAR1": {
                    "1": "archived_files"
                },
                "CVAR2": {
                    "1": "check_format_result"
                },
                "BVAR3": {
                    "1": "is_thin_format"
                },
                "IVAR4": {
                    "1": "error_code"
                },
                "LVAR5": {
                    "1": "archived_file"
                },
                "UVAR6": {
                    "1": "library_error"
                },
                "UVAR7": {
                    "1": "library_path"
                },
                "PUVAR8": {
                    "1": "write_bfd"
                },
                "UNAFF_RBP": {
                    "1": "additional_data"
                },
                "IN_STACK_00000008": {
                    "1": "stack_data"
                },
                "DAT_0010d5f0": {
                    "3": "existing_library",
                    "2": "library_data",
                    "1": "default_bfd"
                },
                "DAT_0010d5f8": {
                    "4": "is_existing_library",
                    "1": "convert_library_flag",
                    "2": "convert_flag"
                },
                "DAT_0010d610": {
                    "1": "normal_format_flag",
                    "2": "is_normal_format"
                },
                "FUN_00107c10": {
                    "1": "cleanup",
                    "2": "print_error_message"
                },
                "FUN_001053b7": {
                    "1": "exit_process"
                },
                "DCGETTEXT": {
                    "1": "get_text"
                },
                "FUN_00107690": {
                    "3": "print_error",
                    "1": "some_function2"
                },
                "FUN_00107c20": {
                    "1": "cleanup",
                    "2": "cleanup_and_exit"
                },
                "FUN_00103bd1": {
                    "1": "handle_exit",
                    "2": "handle_error"
                },
                "XEXIT": {
                    "1": "exit_program"
                },
                "FUN_00107920": {
                    "1": "create_library",
                    "2": "print_message"
                },
                "DAT_0010d618": {
                    "1": "unaffected_variable"
                },
                "BFD_OPENR": {
                    "1": "open_read_binary"
                },
                "BFD_CLOSE": {
                    "1": "close_binary"
                },
                "BFD_SET_FORMAT": {
                    "1": "set_binary_format"
                },
                "BFD_OPENW": {
                    "1": "open_write_binary"
                },
                "BFD_CHECK_FORMAT": {
                    "1": "check_binary_format"
                },
                "BFD_OPENR_NEXT_ARCHIVED_FILE": {
                    "1": "open_next_archived_file"
                },
                "BFD_GET_ERROR": {
                    "1": "get_error_code"
                },
                "BFD_CHECK_FORMAT_MATCHES": {
                    "1": "check_binary_format_matches"
                },
                "lVar5": {
                    "4": "archived_file",
                    "2": "library_handle",
                    "1": "next_archived_file",
                    "3": "file_handle",
                    "5": "file_descriptor",
                    "7": "bfd_handle"
                },
                "plVar1": {
                    "2": "archived_file_list",
                    "1": "archived_file_pointer",
                    "4": "file_pointer"
                },
                "cVar2": {
                    "1": "format_match",
                    "5": "format_check",
                    "4": "is_valid_format",
                    "10": "format_check_result",
                    "2": "check_result",
                    "6": "format_valid"
                },
                "bVar3": {
                    "1": "thin_flag",
                    "2": "thin_library",
                    "6": "is_thin",
                    "10": "is_thin_library",
                    "3": "is_thin_format"
                },
                "iVar4": {
                    "1": "bfd_error",
                    "27": "error_code",
                    "2": "error"
                },
                "uVar6": {
                    "1": "error_message_1",
                    "19": "error_message",
                    "2": "error_msg"
                },
                "uVar7": {
                    "1": "library_path",
                    "3": "message",
                    "14": "library_name"
                },
                "puVar8": {
                    "1": "output_ptr",
                    "3": "output_bfd",
                    "2": "output_library",
                    "5": "output_file"
                },
                "unaff_RBP": {
                    "1": "temp_variable_1",
                    "2": "stack_variable"
                },
                "in_stack_00000008": {
                    "2": "stack_value",
                    "1": "stack_param",
                    "6": "stack_parameter"
                },
                "bfd_openr": {
                    "1": "open_file_for_reading"
                },
                "bfd_check_format": {
                    "1": "check_format_validity",
                    "2": "check_file_format"
                },
                "bfd_close": {
                    "1": "close_handle",
                    "2": "close_file"
                },
                "bfd_openw": {
                    "1": "open_write_handle"
                },
                "bfd_set_format": {
                    "3": "set_format",
                    "2": "set_file_format",
                    "1": "set_bfd_format"
                },
                "_DAT_0010d610": {
                    "1": "is_convertible",
                    "2": "convert_flag"
                },
                "FUNC_00107c10": {
                    "1": "initialize"
                },
                "FUNC_00107690": {
                    "1": "print_error_message"
                },
                "dcgettext": {
                    "1": "get_string",
                    "2": "get_text"
                },
                "LAB_00102826": {
                    "1": "create_output_bfd_handle"
                },
                "LAB_001053b7": {
                    "1": "label2"
                },
                "bfd_get_error": {
                    "3": "get_error",
                    "1": "get_bfd_error",
                    "2": "get_error_code"
                },
                "xexit": {
                    "5": "exit_program",
                    "1": "exit_function"
                },
                "lVar5 + 0xf0": {
                    "1": "archived_file_offset"
                },
                "bfd_openr_next_archived_file": {
                    "1": "open_next_file",
                    "2": "get_next_archived_file"
                },
                "DAT_0010d64c": {
                    "1": "archived_file_type",
                    "2": "archived_file_format"
                },
                "LAB_00102812": {
                    "1": "exit_label"
                },
                "stack0x00000008": {
                    "1": "format_string"
                },
                "dgettext": {
                    "1": "get_text"
                },
                "DATA_0010d618": {
                    "1": "stack_value"
                },
                "load_binary_file": {
                    "1": "improved_binary_loader"
                },
                "DAT_0010d678": {
                    "1": "converted_library"
                },
                "DAT_0010d654": {
                    "1": "constant1"
                },
                "DAT_0010d65c": {
                    "1": "constant2"
                },
                "DAT_0010d6a0": {
                    "1": "constant3"
                }
            }
        },
        "FUN_0010284b": {
            "entrypoint": "0x0010284b",
            "current_name": "get_one_0010284b",
            "code": "\nuint64_t get_one_0010284b(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_0010284b": "get_one_0010284b",
                "undefined8": "uint64_t",
                "return": "result"
            },
            "calling": [
                "FUN_00107650"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010284b": {
                    "1": "get_constant_value",
                    "8": "get_return_value",
                    "3": "get_true_value",
                    "12": "get_one",
                    "2": "calculate_return_value"
                },
                "<unnamed_variable_1>": {
                    "1": "result"
                },
                "undefined8": {
                    "7": "uint64_t",
                    "1": "unsigned_long",
                    "4": "int"
                },
                "return": {
                    "5": "result"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "unamed_param_1": {
                    "1": "void"
                },
                "DAT_00102800": {
                    "1": "return_value"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                }
            }
        },
        "FUN_0010285f": {
            "entrypoint": "0x0010285f",
            "current_name": "print_archive_entry_not_found_0010285f",
            "code": "\n\n\nvoid print_archive_entry_not_found_0010285f(void)\n\n{\n  int comparison_result;\n  char *error_message;\n  long current_entry;\n  long *next_entry;\n  undefined8 entry_name;\n  long *current_entry;\n  func_ptr *callback_function;\n  long archive;\n  int entry_count;\n  undefined8 *entry_names;\n  int entry_counter;\n  \nfunc_ptr_r0x0010285f:\n  entry_name = *entry_names;\n  error_message = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(error_stream,error_message,entry_name);\nLAB_0010553e:\n  entry_names = entry_names + 1;\n  entry_count = entry_count + -1;\n  if (entry_count == 0) {\n    return;\n  }\n  current_entry = *(long **)(archive + 0xf0);\n  entry_counter = 0;\n  do {\n    if (current_entry == (long *)0x0) goto func_ptr_r0x0010285f;\n    if (*(int *)((long)current_entry + 0xac) == 0) {\n      current_entry = *current_entry;\n      if (current_entry == 0) {\n        next_entry = (long *)current_entry[0x1d];\n        if ((long *)current_entry[0x1d] == (long *)0x0) {\n          next_entry = current_entry;\n        }\n        (**(func_ptr **)(next_entry[1] + 0x1e8))(current_entry,&stack_parameter);\n      }\n      else if (((*(archive_flag *)(archive + 0x49) & 0x10) == 0) || (current_entry = FUN_00105830(), current_entry != 0))\n      {\n        entry_name = FUN_00105830(*entry_names);\n        comparison_result = filename_cmp(entry_name,current_entry);\n        if ((comparison_result == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (entry_counter = entry_counter + 1,\n            entry_counter == _DAT_0010d630)))) break;\n      }\n    }\n    current_entry = (long *)current_entry[0x1e];\n  } while( true );\n  (*callback_function)();\n  *(undefined4 *)((long)current_entry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "renaming": {
                "FUN_0010285f": "print_archive_entry_not_found_0010285f",
                "__format": "error_message",
                "lVar2": "current_entry",
                "plVar3": "next_entry",
                "uVar4": "entry_name",
                "plVar5": "current_entry",
                "unaff_RBP": "callback_function",
                "unaff_R12": "archive",
                "unaff_R13D": "entry_count",
                "unaff_R14": "entry_names",
                "iStack000000000000000c": "entry_counter",
                "dcgettext": "get_localized_message",
                "fprintf": "write_to_stream",
                "_stderr": "error_stream",
                "stack0x00000010": "stack_parameter",
                "filename_cmp": "compare_filenames",
                "iVar1": "comparison_result",
                "code": "func_ptr",
                "byte": "archive_flag"
            },
            "calling": [
                "FUN_00105480"
            ],
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010285f": {
                    "1": "print_archived_entry_not_found_error",
                    "3": "print_archive_entry_error",
                    "4": "print_archive_entry_not_found_error",
                    "2": "print_error_message",
                    "6": "print_archive_entry_not_found"
                },
                "__format": {
                    "14": "error_message",
                    "3": "error_message_format",
                    "7": "format_string",
                    "1": "error_msg_format"
                },
                "lVar2": {
                    "1": "entry_value",
                    "11": "current_entry",
                    "3": "entry_address",
                    "2": "current_entry_name"
                },
                "plVar3": {
                    "1": "next_entry_pointer",
                    "2": "temp_pointer",
                    "8": "next_entry",
                    "6": "fallback_entry"
                },
                "uVar4": {
                    "1": "result",
                    "4": "current_entry_name",
                    "19": "entry_name"
                },
                "plVar5": {
                    "1": "current_archive_entry",
                    "2": "current_entry_pointer",
                    "11": "current_entry",
                    "4": "current_entry_ptr",
                    "3": "archive_entry"
                },
                "unaff_RBP": {
                    "1": "execute_callback",
                    "5": "callback",
                    "7": "function_pointer",
                    "12": "callback_function"
                },
                "unaff_R12": {
                    "2": "archive_base",
                    "7": "archive",
                    "1": "file_pointer",
                    "3": "base_address",
                    "5": "archive_data",
                    "6": "archive_ptr"
                },
                "unaff_R13D": {
                    "15": "entry_count",
                    "5": "remaining_entries",
                    "1": "remaining_entries_count",
                    "8": "num_entries"
                },
                "unaff_R14": {
                    "1": "entry_pointers",
                    "2": "entry_addresses",
                    "3": "entry_list",
                    "14": "entry_names"
                },
                "iStack000000000000000c": {
                    "1": "print_counter",
                    "2": "entry_count",
                    "5": "entry_counter",
                    "4": "num_matches",
                    "3": "counter"
                },
                "dcgettext": {
                    "1": "get_localized_message"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "stack0x00000010": {
                    "1": "stack_parameter"
                },
                "FUN_00105830": {
                    "1": "is_invalid_entry"
                },
                "filename_cmp": {
                    "1": "compare_entry_names",
                    "2": "compare_filenames"
                },
                "DAT_0010d634": {
                    "1": "is_case_sensitive",
                    "2": "flag"
                },
                "_DAT_0010d630": {
                    "1": "count_threshold"
                },
                "iVar1": {
                    "3": "comparison_result"
                },
                "code": {
                    "1": "func_ptr"
                },
                "byte": {
                    "1": "archive_flag"
                },
                "*(int *)((long)plVar5 + 0xac)": {
                    "1": "status"
                },
                "__stream": {
                    "1": "output_stream"
                }
            }
        },
        "FUN_001028ed": {
            "entrypoint": "0x001028ed",
            "current_name": "process_files_001028ed",
            "code": "\n\n\nulong process_files_001028ed(ulong param1,long param2)\n\n{\n  undefined undefined_var1;\n  byte byte_var2;\n  int int_var3;\n  size_t size_var4;\n  int *int_ptr5;\n  char *char_ptr6;\n  char *char_ptr7;\n  char **char_ptr_ptr8;\n  ulong undefined_var9;\n  long long_var10;\n  char *char_var1;\n  char *char_var2;\n  long long_var11;\n  ulong undefined_var12;\n  ulong ulong_var13;\n  char *unaff_rbx;\n  char **char_ptr_ptr14;\n  char **unaff_rbp;\n  char **unaff_r12;\n  uint unaff_r13_d;\n  char **char_ptr_ptr15;\n  long unaff_r14;\n  bool bool_var16;\n  byte byte_var17;\n  char **param7;\n  ulong param9;\n  long stack_var1;\n  long stack_var2;\n  \n  byte_var17 = 0;\ncode_r0x001028ed:\n  FUN_00107c10(unaff_rbx,param2);\nLAB_001028f5:\n  undefined_var12 = DAT_0010d638;\n  if (unaff_r13_d != 3) {\n    while( true ) {\n      if ((ulong *)*unaff_r12 == (ulong *)0x0) goto LAB_0010571f;\n      int_var3 = filename_cmp(*(ulong *)*unaff_r12,undefined_var12);\n      if (int_var3 == 0) break;\n      unaff_r12 = (char **)(*unaff_r12 + 0xf0);\n    }\n    if (unaff_r13_d != 2) goto LAB_0010571f;\n    unaff_r12 = (char **)(*unaff_r12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  long_var10 = *(long *)(unaff_r14 + 0xf0);\n  if (*(long *)(unaff_r14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    long_var11 = long_var10;\n    long_var10 = *(long *)(long_var11 + 0xf0);\n  } while (long_var10 != 0);\n  unaff_r12 = (char **)(long_var11 + 0xf0);\n  unaff_rbx = *unaff_rbp;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined_var1 = DAT_0010d5f8;\n  unaff_r13_d = (uint)(DAT_0010d60c != 0);\n  param2 = bfd_openr(unaff_rbx,DAT_0010d5f0);\n  if (param2 != 0) {\n    unaff_rbp = unaff_rbp + 1;\n    byte_var2 = FUN_00105af0(unaff_r12,param2,unaff_r13_d,undefined_var1);\n    param9._6_1_ = param9._6_1_ | byte_var2;\n    char_ptr6 = *unaff_rbp;\n    do {\n      if (char_ptr6 == (char *)0x0) {\n        if (param9._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefined_var12 = FUNC_001058b0();\n        return undefined_var12;\n      }\n      char_ptr_ptr14 = *(char ***)(unaff_r14 + 0xf0);\n      unaff_r12 = param7;\n      if (param9._7_1_ == '\\0') {\n        char_ptr_ptr15 = param7;\n        if (char_ptr_ptr14 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              char_var1 = (char *)lbasename(*char_ptr_ptr14);\n              char_ptr7 = char_var1;\n              if (DAT_0010d5fa != '\\0') {\n                size_var4 = strlen(char_var1);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(unaff_r14 + 8) + 0x1e);\n                if (ulong_var13 < size_var4) {\n                  char_ptr7 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(unaff_r14 + 8);\n                  char_ptr6 = char_ptr7;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_ptr6 = *char_var1;\n                    char_var1 = char_var1 + (ulong)byte_var17 * -2 + 1;\n                    char_ptr6 = char_ptr6 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_ptr7[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                char_ptr6 = *unaff_rbp;\n                char_var1 = char_ptr7;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              char_ptr6 = *unaff_rbp;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              char_var2 = (char *)lbasename(char_ptr6);\n              if (DAT_0010d5fa != '\\0') {\n                size_var4 = strlen(char_var2);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(unaff_r14 + 8) + 0x1e);\n                char_ptr6 = char_var2;\n                char_var1 = char_ptr7;\n                if (ulong_var13 < size_var4) {\n                  char_ptr6 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(unaff_r14 + 8);\n                  char_ptr7 = char_ptr6;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_ptr7 = *char_var2;\n                    char_var2 = char_var2 + (ulong)byte_var17 * -2 + 1;\n                    char_ptr7 = char_ptr7 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_ptr6[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              int_var3 = filename_cmp(char_var2,char_ptr7);\n            }\n            else {\n              char_ptr6 = *unaff_rbp;\n              char_var1 = *char_ptr_ptr14;\nLAB_00102980:\n              int_var3 = filename_cmp(char_ptr6,char_var1);\n            }\n            if ((int_var3 == 0) && (char_ptr_ptr14[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                int_var3 = stat(*unaff_rbp,(stat *)&stack0x000000b0);\n                if (int_var3 != 0) {\n                  int_ptr5 = __errno_location();\n                  if (*int_ptr5 != 2) {\n                    FUN_00107c10(*unaff_rbp);\nLAB_00102b7e:\n                    char_ptr6 = *char_ptr_ptr14;\n                    undefined_var12 = dcgettext(0,\"internal stat error on %s\",5);\n                    FUN_00107690(undefined_var12,char_ptr6);\n                    free(unaff_rbp);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                char_ptr_ptr8 = (char **)char_ptr_ptr14[0x1d];\n                if ((char **)char_ptr_ptr14[0x1d] == (char **)0x0) {\n                  char_ptr_ptr8 = char_ptr_ptr14;\n                }\n                int_var3 = (**(code **)(char_ptr_ptr8[1] + 0x1e8))(char_ptr_ptr14,&stack0x00000020);\n                if (int_var3 != 0) goto LAB_00102b7e;\n                if (stack_var2 <= stack_var1) goto LAB_0010577e;\n              }\n              undefined_var12 = FUN_00105870(param7,2,*char_ptr_ptr14);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                char_ptr6 = *unaff_rbp;\n                bool_var16 = DAT_0010d60c != 0;\n                long_var10 = bfd_openr(char_ptr6,DAT_0010d5f0);\n                if (long_var10 == 0) {\n                  FUN_00107c10(char_ptr6,0);\n                  goto LAB_00102b3e;\n                }\n                byte_var2 = FUN_00103172(undefined_var12,long_var10,bool_var16);\n              }\n              else {\n                undefined_var9 = FUN_00105830(*unaff_rbp);\n                int_var3 = filename_cmp(undefined_var9,\"__.LIBDEP\");\n                if (int_var3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte_var2 = FUN_00103172(undefined_var12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte_var2 != 0) {\n                *char_ptr_ptr15 = *(char **)(*char_ptr_ptr15 + 0xf0);\n                param9._6_1_ = byte_var2;\n              }\n              goto LAB_0010577e;\n            }\n            char_ptr_ptr15 = char_ptr_ptr14 + 0x1e;\n            char_ptr_ptr14 = (char **)char_ptr_ptr14[0x1e];\n          } while (char_ptr_ptr14 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        unaff_r13_d = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        unaff_r13_d = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        long_var10 = *(long *)(unaff_r14 + 0xf0);\n        if (*(long *)(unaff_r14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      unaff_rbx = *unaff_rbp;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefined_var12 = FUN_00105830(unaff_rbx);\n      int_var3 = filename_cmp(undefined_var12,\"__.LIBDEP\");\n      if (int_var3 != 0) goto code_r0x0010574f;\n      byte_var2 = FUN_00105ae0(unaff_r12,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      param9._6_1_ = byte_var2 | param9._6_1_;\nLAB_0010577e:\n      unaff_rbp = unaff_rbp + 1;\n      char_ptr6 = *unaff_rbp;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  unaff_rbx = *unaff_rbp;\n  goto LAB_00105698;\n}\n\n",
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "undefined_var1",
                "bVar2": "byte_var2",
                "iVar3": "int_var3",
                "sVar4": "size_var4",
                "piVar5": "int_ptr5",
                "pcVar6": "char_ptr6",
                "pcVar7": "char_ptr7",
                "ppcVar8": "char_ptr_ptr8",
                "uVar9": "undefined_var9",
                "lVar10": "long_var10",
                "__s": "char_var1",
                "__s_00": "char_var2",
                "lVar11": "long_var11",
                "uVar12": "undefined_var12",
                "uVar13": "ulong_var13",
                "unaff_RBX": "unaff_rbx",
                "ppcVar14": "char_ptr_ptr14",
                "unaff_RBP": "unaff_rbp",
                "unaff_R12": "unaff_r12",
                "unaff_R13D": "unaff_r13_d",
                "ppcVar15": "char_ptr_ptr15",
                "unaff_R14": "unaff_r14",
                "bVar16": "bool_var16",
                "bVar17": "byte_var17",
                "param_7": "param7",
                "param_9": "param9",
                "in_stack_00000078": "stack_var1",
                "in_stack_00000108": "stack_var2",
                "undefined8": "ulong"
            },
            "calling": [
                "FUN_001028ed"
            ],
            "called": [
                "FUN_00105830",
                "FUN_00103172",
                "FUN_00107c10",
                "filename_cmp",
                "FUN_00105870",
                "bfd_openr",
                "__errno_location",
                "FUN_001028ed",
                "xmalloc",
                "FUN_00102943",
                "dcgettext",
                "FUN_001058b0",
                "lbasename",
                "FUN_00105af0",
                "stat",
                "strlen",
                "FUN_00107690",
                "FUN_00105ae0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001028ed": {
                    "1": "check_file_dependencies",
                    "8": "process_files"
                },
                "param_1": {
                    "1": "param_ptr",
                    "4": "param_1",
                    "10": "arg1",
                    "2": "input_param",
                    "12": "param1"
                },
                "param_2": {
                    "10": "arg2",
                    "1": "data_param",
                    "12": "param2",
                    "5": "param_2"
                },
                "uVar1": {
                    "1": "undefined_value_1",
                    "2": "undefined_var",
                    "15": "undefined_var1"
                },
                "bVar2": {
                    "15": "byte_var2",
                    "1": "byte_value_1",
                    "4": "byte_var"
                },
                "iVar3": {
                    "1": "int_value",
                    "15": "int_var3",
                    "4": "int_var",
                    "2": "comparison_result"
                },
                "sVar4": {
                    "1": "size1",
                    "2": "string_length",
                    "4": "size_var",
                    "14": "size_var4"
                },
                "piVar5": {
                    "1": "ptr_to_value",
                    "2": "int_ptr_var5",
                    "7": "int_ptr5",
                    "3": "int_ptr_var"
                },
                "pcVar6": {
                    "1": "char_pointer_1",
                    "7": "char_ptr6",
                    "2": "char_pointer_var6",
                    "3": "ptr_char_var6"
                },
                "pcVar7": {
                    "1": "str2",
                    "3": "ptr_char_var7",
                    "7": "char_ptr7",
                    "2": "char_ptr_var2"
                },
                "ppcVar8": {
                    "3": "ptr_ptr_char_var8",
                    "1": "pointer_pointer",
                    "7": "char_ptr_ptr8",
                    "2": "char_ptr_ptr"
                },
                "uVar9": {
                    "1": "temp_var",
                    "2": "u_var9",
                    "15": "undefined_var9"
                },
                "lVar10": {
                    "1": "long_value_1",
                    "2": "long_var_1",
                    "3": "long_var1",
                    "15": "long_var10"
                },
                "__s": {
                    "4": "char_var1",
                    "1": "basename_of_arg1",
                    "3": "string1",
                    "2": "basename1"
                },
                "__s_00": {
                    "1": "char_pointer_4",
                    "2": "char_ptr2",
                    "3": "string2",
                    "4": "char_var2"
                },
                "lVar11": {
                    "2": "long_value_2",
                    "3": "long_var2",
                    "1": "temp_pointer",
                    "15": "long_var11"
                },
                "uVar12": {
                    "1": "ulong_var_2",
                    "15": "undefined_var12",
                    "2": "temp_var"
                },
                "uVar13": {
                    "2": "u_var13",
                    "15": "ulong_var13",
                    "1": "result4"
                },
                "unaff_RBX": {
                    "1": "char_ptr_unaff_rbx",
                    "2": "ptr1",
                    "4": "unaffected_rbx",
                    "7": "unaff_rbx"
                },
                "ppcVar14": {
                    "1": "char_pointer_pointer_var14",
                    "3": "ppc_var14",
                    "2": "char_ptr_ptr_var14",
                    "6": "char_ptr_ptr14"
                },
                "unaff_RBP": {
                    "1": "ptr2",
                    "2": "file_list",
                    "4": "unaffected_rbp",
                    "7": "unaff_rbp"
                },
                "unaff_R12": {
                    "1": "register_r12",
                    "2": "char_ptr_ptr4",
                    "4": "unaffected_r12",
                    "7": "unaff_r12"
                },
                "unaff_R13D": {
                    "1": "file_type",
                    "4": "uint_var",
                    "2": "r13_d",
                    "3": "uint_var_r13_d",
                    "6": "unaff_r13_d"
                },
                "ppcVar15": {
                    "2": "ptr_ptr_char_var15",
                    "1": "char_pointer_pointer_3",
                    "3": "ppc_var15",
                    "6": "char_ptr_ptr15"
                },
                "unaff_R14": {
                    "1": "long3",
                    "2": "long_var3",
                    "3": "unaffected_r14",
                    "7": "unaff_r14"
                },
                "bVar16": {
                    "1": "b_var16",
                    "5": "bool_var",
                    "12": "bool_var16",
                    "2": "bool_value"
                },
                "bVar17": {
                    "2": "byte_var_2",
                    "1": "byte_value",
                    "15": "byte_var17"
                },
                "param_7": {
                    "1": "output_file_list",
                    "11": "param7",
                    "4": "arg7",
                    "5": "param_7"
                },
                "param_9": {
                    "1": "param_ptr_3",
                    "4": "param_9",
                    "2": "result",
                    "5": "arg9",
                    "11": "param9"
                },
                "in_stack_00000078": {
                    "1": "in_stack00000078",
                    "2": "stack_var78",
                    "7": "stack_var1",
                    "5": "in_stack_00000078"
                },
                "in_stack_00000108": {
                    "1": "in_stack_var2",
                    "2": "stack_var108",
                    "7": "stack_var2",
                    "5": "in_stack_00000108"
                },
                "undefined8": {
                    "1": "ulong"
                },
                "undefined8 param_1": {
                    "1": "result"
                },
                "long param_2": {
                    "1": "num_files"
                },
                "undefined uVar1": {
                    "1": "undefined_var1"
                },
                "byte bVar2": {
                    "1": "byte_var2"
                },
                "int iVar3": {
                    "1": "file_cmp_result"
                },
                "size_t sVar4": {
                    "1": "str_len"
                },
                "int *piVar5": {
                    "1": "errno_location"
                },
                "char *pcVar6": {
                    "1": "current_file_path"
                },
                "char *pcVar7": {
                    "1": "basename1"
                },
                "char **ppcVar8": {
                    "1": "ppc_var8"
                },
                "undefined8 uVar9": {
                    "1": "u_var9"
                },
                "long lVar10": {
                    "1": "current_entry"
                },
                "char *__s": {
                    "1": "basename2"
                },
                "char *__s_00": {
                    "1": "basename3"
                },
                "long lVar11": {
                    "1": "previous_entry"
                },
                "undefined8 uVar12": {
                    "1": "libc_dep_path"
                },
                "ulong uVar13": {
                    "1": "limit"
                },
                "char *unaff_RBX": {
                    "1": "result_file_path"
                },
                "char **ppcVar14": {
                    "1": "file_entry"
                },
                "char **unaff_RBP": {
                    "1": "file_paths"
                },
                "char **unaff_R12": {
                    "1": "dir_entries"
                },
                "uint unaff_R13D": {
                    "1": "entry_kind"
                },
                "char **ppcVar15": {
                    "1": "current_entry_ptr"
                },
                "long unaff_R14": {
                    "1": "dir_pointer"
                },
                "bool bVar16": {
                    "1": "use_shared_libs"
                },
                "byte bVar17": {
                    "1": "byte_var17"
                },
                "char **param_7": {
                    "1": "dirs"
                },
                "undefined8 param_9": {
                    "1": "return_val"
                },
                "long in_stack_00000078": {
                    "1": "stack_arg1"
                },
                "long in_stack_00000108": {
                    "1": "stack_arg2"
                },
                "F_UNK_001028ed": {
                    "1": "process_files"
                }
            }
        },
        "FUN_00102943": {
            "entrypoint": "0x00102943",
            "current_name": "initialize_data_00102943",
            "code": "\nvoid initialize_data_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102943": {
                    "4": "reset_data",
                    "1": "clear_dat_variable",
                    "3": "initialize_counter",
                    "7": "reset_counter",
                    "13": "initialize_data"
                },
                "DAT_0010d618": {
                    "2": "data_flag",
                    "1": "data_initialized",
                    "7": "data_counter",
                    "11": "counter"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "data": {
                    "1": "initialized_data"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_00102ba1": {
            "entrypoint": "0x00102ba1",
            "current_name": "deallocate_memory_00102ba1",
            "code": "\nundefined  [16] deallocate_memory_00102ba1(void)\n\n{\n  undefined result [16];\n  void *memory_address;\n  ulong return_address;\n  \n  free(memory_address);\n  result._8_8_ = 0;\n  result._0_8_ = return_address;\n  return result << 0x40;\n}\n\n",
            "renaming": {
                "FUN_00102ba1": "deallocate_memory_00102ba1",
                "unaff_RBP": "memory_address",
                "unaff_retaddr": "return_address",
                "auVar1": "result"
            },
            "calling": [
                "FUN_001057a0"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102ba1": {
                    "1": "decompile_and_return",
                    "3": "free_and_return",
                    "2": "reverse_and_free_memory",
                    "8": "decompiled_function"
                },
                "unaff_RBP": {
                    "1": "allocated_memory",
                    "2": "pointer_to_memory",
                    "3": "ptr_to_be_freed",
                    "4": "memory_block",
                    "6": "memory_address"
                },
                "unaff_retaddr": {
                    "27": "return_address",
                    "1": "addr"
                },
                "__ptr": {
                    "3": "memory_block",
                    "1": "memory_address"
                },
                "auVar1": {
                    "1": "updated_return_value",
                    "6": "result",
                    "2": "return_value"
                }
            }
        },
        "FUN_00102bb0": {
            "entrypoint": "0x00102bb0",
            "current_name": "reverse_string_00102bb0",
            "code": "\nundefined  [16] reverse_string_00102bb0(void)\n\n{\n  long source;\n  char *input_string;\n  size_t string_length;\n  undefined *reversed_string;\n  ulong max_length;\n  undefined *source_pointer;\n  long base_pointer;\n  undefined *reversed_string_ptr;\n  byte flag;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  flag = 0;\n  string_length = strlen(input_string);\n  max_length = (ulong)*(byte *)(*(long *)(base_pointer + 8) + 0x1e);\n  reversed_string = source_pointer;\n  if (max_length < string_length) {\n    reversed_string = (undefined *)xmalloc(max_length + 1);\n    source = *(long *)(base_pointer + 8);\n    reversed_string_ptr = reversed_string;\n    for (max_length = (ulong)*(byte *)(source + 0x1e); max_length != 0; max_length = max_length - 1) {\n      *reversed_string_ptr = *source_pointer;\n      source_pointer = source_pointer + (ulong)flag * -2 + 1;\n      reversed_string_ptr = reversed_string_ptr + (ulong)flag * -2 + 1;\n    }\n    reversed_string[*(byte *)(source + 0x1e)] = 0;\n  }\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = reversed_string;\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00102bb0": "reverse_string_00102bb0",
                "in_RAX": "input_string",
                "sVar2": "string_length",
                "puVar3": "reversed_string",
                "uVar4": "max_length",
                "unaff_RBX": "source_pointer",
                "unaff_RBP": "base_pointer",
                "puVar5": "reversed_string_ptr",
                "bVar6": "flag",
                "auVar7": "return_value",
                "unaff_retaddr": "return_address",
                "lVar1": "source"
            },
            "calling": [
                "FUN_00105830"
            ],
            "called": [
                "xmalloc",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102bb0": {
                    "3": "reverse_and_allocate_string",
                    "1": "reverse_and_allocate_substring",
                    "4": "reverse_and_copy_string",
                    "2": "copy_string_with_limit",
                    "16": "reverse_string"
                },
                "in_RAX": {
                    "1": "string_data",
                    "2": "string",
                    "26": "input_string"
                },
                "sVar2": {
                    "20": "string_length",
                    "8": "input_length",
                    "1": "length"
                },
                "puVar3": {
                    "1": "substring",
                    "4": "output_string",
                    "16": "reversed_string",
                    "3": "copied_string",
                    "2": "new_string"
                },
                "uVar4": {
                    "1": "byte_count",
                    "2": "max_reversed_length",
                    "14": "max_length",
                    "4": "limit"
                },
                "unaff_RBX": {
                    "6": "current_char",
                    "2": "current_char_ptr",
                    "1": "source_ptr",
                    "5": "source"
                },
                "unaff_RBP": {
                    "2": "stack_base",
                    "1": "stack_pointer",
                    "17": "base_pointer"
                },
                "puVar5": {
                    "1": "current_char",
                    "2": "destination",
                    "3": "reversed_string_ptr"
                },
                "bVar6": {
                    "1": "byte_value",
                    "4": "reverse_flag",
                    "2": "byte_var",
                    "5": "is_negative",
                    "3": "increment"
                },
                "auVar7": {
                    "2": "return_variable",
                    "1": "return_val",
                    "19": "return_value",
                    "5": "result"
                },
                "unaff_retaddr": {
                    "18": "return_address"
                },
                "lVar1": {
                    "1": "input_address"
                },
                "unaff_RAX": {
                    "1": "input_string"
                }
            }
        },
        "FUN_00102bf5": {
            "entrypoint": "0x00102bf5",
            "current_name": "cleanup_resources_00102bf5",
            "code": "\nvoid cleanup_resources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102bf5": "cleanup_resources_00102bf5",
                "fclose": "close_file",
                "bfd_cache_close": "close_bfd_cache",
                "unlink_if_ordinary": "remove_file"
            },
            "calling": [
                "FUN_00107730"
            ],
            "called": [
                "fclose",
                "bfd_cache_close",
                "unlink_if_ordinary"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102bf5": {
                    "12": "cleanup_resources",
                    "3": "cleanup_and_close",
                    "2": "cleanup_files",
                    "1": "close_file_and_delete_cache",
                    "4": "cleanup"
                },
                "fclose": {
                    "1": "close",
                    "18": "close_file"
                },
                "bfd_cache_close": {
                    "3": "close_cache",
                    "25": "close_bfd_cache",
                    "1": "close_bf_dcache"
                },
                "unlink_if_ordinary": {
                    "4": "unlink_file",
                    "2": "remove_ordinary_file",
                    "1": "remove_if_ordinary",
                    "14": "remove_file"
                },
                "__stream": {
                    "1": "file_pointer",
                    "15": "file",
                    "4": "file_stream"
                },
                "DAT_0010d5d8": {
                    "1": "stream"
                },
                "DAT_0010d5e0": {
                    "1": "cache_status"
                },
                "DAT_0010d618": {
                    "1": "file_path"
                },
                "__stream_2": {
                    "1": "file_ptr_2"
                }
            }
        },
        "FUN_00102c25": {
            "entrypoint": "0x00102c25",
            "current_name": "extract_archive_00102c25",
            "code": "\n\n\nlong * extract_archive_00102c25(void)\n\n{\n  int comparison_result;\n  int status;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_message;\n  long **archive_pointer;\n  void *buffer;\n  size_t bytes_read;\n  long loop_counter;\n  long **archive;\n  long *current_file;\n  undefined4 *param_pointer;\n  ulong bytes_processed;\n  size_t bytes_to_read;\n  undefined4 *param_array;\n  mode_t file_permissions;\n  ulong archive_size;\n  \n  param_pointer = param_array;\n  for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *param_pointer = 0;\n    param_pointer = param_pointer + 1;\n  }\n  archive_pointer = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    archive_pointer = archive;\n  }\n  status = (*(code *)archive_pointer[1][0x3d])();\n  if (status != 0) {\n    current_file = *archive;\n    error_message = dcgettext(0,\"internal stat error on %s\",5);\n    status = FUN_00107690(error_message,current_file);\n    error_message = DAT_0010d638;\n    if (status == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file,error_message);\n        if (comparison_result == 0) {\n          if (status != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive);\n  }\n  else {\n    bytes_processed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_read = archive_size - bytes_processed;\n      if (0x2000 < bytes_to_read) {\n        bytes_to_read = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_read);\n      if (bytes_to_read != bytes_read) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        error_message = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(error_message,archive);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive);\n      }\n      bytes_to_read = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_read != bytes_read) {\n        errno_location = __errno_location();\n        error_message = strerror(*errno_location);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      bytes_processed = bytes_processed + bytes_read;\n    } while (bytes_processed < archive_size);\n    free_memory(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    FUN_00107c80(error_message,param_array);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "renaming": {
                "FUN_00102c25": "extract_archive_00102c25",
                "param_7": "param_array",
                "param_11": "file_permissions",
                "param_12": "archive_size",
                "iVar1": "comparison_result",
                "iVar2": "status",
                "piVar3": "errno_location",
                "pcVar4": "error_message",
                "uVar5": "error_message",
                "pplVar6": "archive_pointer",
                "__ptr": "buffer",
                "__n": "bytes_read",
                "lVar7": "loop_counter",
                "unaff_RBX": "archive",
                "plVar8": "current_file",
                "puVar9": "param_pointer",
                "uVar10": "bytes_processed",
                "sVar11": "bytes_to_read",
                "fclose": "close_file",
                "chmod": "change_file_permissions",
                "dcgettext": "get_translation",
                "bfd_seek": "seek_bfd",
                "bfd_bread": "read_bfd",
                "strerror": "get_error_message",
                "__errno_location": "get_errno_location",
                "free": "free_memory",
                "fwrite": "write_to_file",
                "xmalloc": "allocate_memory",
                "filename_cmp": "compare_file_names",
                "k": "index",
                "__mode": "mode"
            },
            "calling": [
                "FUN_00107740"
            ],
            "called": [
                "bfd_seek",
                "bfd_bread",
                "strerror",
                "__errno_location",
                "free",
                "fwrite",
                "fclose",
                "chmod",
                "xmalloc",
                "FUN_00107c80",
                "dcgettext",
                "FUN_00107690",
                "FUN_00105a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102c25": {
                    "1": "extract_valid_archive_from_binary",
                    "4": "extract_and_write_archive",
                    "2": "process_archive",
                    "6": "extract_archive"
                },
                "param_7": {
                    "1": "file_modes",
                    "5": "file_permissions",
                    "3": "permissions",
                    "2": "flags"
                },
                "param_11": {
                    "6": "file_permission",
                    "2": "file_mode",
                    "5": "mode",
                    "1": "output_file_permissions",
                    "3": "permissions",
                    "8": "file_permissions"
                },
                "param_12": {
                    "1": "input_archive_size",
                    "8": "file_size",
                    "2": "size",
                    "18": "archive_size"
                },
                "iVar1": {
                    "2": "cmp_result",
                    "14": "comparison_result",
                    "1": "internal_stat_error_type",
                    "3": "filename_cmp_result",
                    "9": "filename_comparison_result"
                },
                "iVar2": {
                    "1": "stat_error_result",
                    "5": "result",
                    "9": "status",
                    "2": "stat_error_code",
                    "3": "internal_stat_error"
                },
                "piVar3": {
                    "1": "errno_location_ptr",
                    "5": "error_number",
                    "14": "errno_location",
                    "3": "errno_ptr"
                },
                "pcVar4": {
                    "8": "error_string",
                    "1": "str_err",
                    "2": "error_description",
                    "14": "error_message"
                },
                "uVar5": {
                    "1": "gettext_result",
                    "2": "gettext_message",
                    "12": "error_message",
                    "3": "translated_message"
                },
                "pplVar6": {
                    "1": "archive_ptr_ptr",
                    "4": "archive",
                    "3": "function_pointer",
                    "2": "pointer_array"
                },
                "__ptr": {
                    "3": "buffer_pointer",
                    "1": "allocated_memory",
                    "23": "buffer",
                    "4": "buffer_ptr"
                },
                "__n": {
                    "1": "data_size",
                    "6": "read_size",
                    "2": "buffer_size",
                    "22": "bytes_read"
                },
                "lVar7": {
                    "1": "counter",
                    "17": "loop_counter",
                    "3": "loop_count"
                },
                "unaff_RBX": {
                    "1": "archive_list_ptr",
                    "2": "pointer_array",
                    "4": "archive"
                },
                "plVar8": {
                    "1": "current_archive_ptr",
                    "2": "result_ptr",
                    "3": "current_entry",
                    "7": "current_file",
                    "5": "file_pointer"
                },
                "puVar9": {
                    "4": "ptr",
                    "2": "temp_ptr",
                    "1": "param_iterator",
                    "3": "param_ptr"
                },
                "uVar10": {
                    "1": "total_read",
                    "4": "total_bytes_read",
                    "5": "bytes_written",
                    "10": "bytes_processed",
                    "2": "total_read_size",
                    "3": "bytes_read"
                },
                "sVar11": {
                    "2": "bytes_written",
                    "1": "bytes_remaining",
                    "8": "bytes_to_read",
                    "4": "bytes_to_process",
                    "3": "bytes_to_write"
                },
                "__errnum": {
                    "2": "error_number"
                },
                "__size": {
                    "2": "element_size"
                },
                "__stream": {
                    "2": "file_stream"
                },
                "DAT_0010d618": {
                    "1": "current_archive_name"
                },
                "DAT_0010d600": {
                    "1": "flag"
                },
                "fclose": {
                    "8": "close_file"
                },
                "chmod": {
                    "4": "change_file_permissions",
                    "1": "change_file_permission",
                    "3": "change_permissions"
                },
                "FUN_00107c80": {
                    "3": "process_file",
                    "2": "perform_operation",
                    "1": "perform_action"
                },
                "dcgettext": {
                    "2": "get_translated_message",
                    "1": "get_text_message"
                },
                "FUN_00107690": {
                    "1": "display_error_message",
                    "6": "handle_error",
                    "2": "print_error_message"
                },
                "FUN_00105a20": {
                    "1": "open_archive",
                    "8": "open_file"
                },
                "bfd_seek": {
                    "2": "seek_bfd",
                    "1": "seek_in_file"
                },
                "bfd_bread": {
                    "2": "read_bfd",
                    "1": "read_data"
                },
                "strerror": {
                    "1": "get_error_string",
                    "5": "get_error_message"
                },
                "__errno_location": {
                    "1": "get_error_number",
                    "2": "get_errno_location"
                },
                "free": {
                    "2": "deallocate_memory",
                    "3": "free_memory"
                },
                "fwrite": {
                    "4": "write_to_file",
                    "1": "write_file",
                    "2": "write_data"
                },
                "xmalloc": {
                    "5": "allocate_memory"
                },
                "DAT_0010d5d8": {
                    "1": "file_pointer"
                },
                "DAT_0010d638": {
                    "1": "default_message"
                },
                "_DAT_0010d600": {
                    "1": "flag"
                },
                "filename_cmp": {
                    "1": "compare_file_names"
                },
                "k": {
                    "1": "index"
                },
                "__s": {
                    "1": "output_file"
                },
                "__mode": {
                    "1": "mode"
                }
            }
        },
        "FUN_00102cd9": {
            "entrypoint": "0x00102cd9",
            "current_name": "find_matching_file_00102cd9",
            "code": "\nlong * find_matching_file_00102cd9(vocomparison_resultd)\n\n{\n  comparison_resultnt status;\n  comparison_resultnt comparison_result;\n  long *file_list;\n  undefcomparison_resultned8 target_filename;\n  \n  target_filename = DAT_0010d638;\n  comparison_resultf (status == 3) {\n    for (; *file_list != 0; file_list = (long *)(*file_list + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefcomparison_resultned8 *)*file_list != (undefcomparison_resultned8 *)0x0; file_list = (long *)(*file_list + 0xf0)) {\n      comparison_result = filename_cmp(*(undefcomparison_resultned8 *)*file_list,target_filename);\n      comparison_resultf (comparison_result == 0) {\n        comparison_resultf (status != 2) {\n          return file_list;\n        }\n        return (long *)(*file_list + 0xf0);\n      }\n    }\n  }\n  return file_list;\n}\n\n",
            "renaming": {
                "FUN_00102cd9": "find_matching_file_00102cd9",
                "in_EAX": "status",
                "iVar1": "comparison_result",
                "unaff_RBX": "file_list",
                "param_7": "target_filename",
                "i": "comparison_result",
                "filename_cmp": "compare_filenames"
            },
            "calling": [
                "FUN_00105870"
            ],
            "called": [
                "filename_cmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102cd9": {
                    "1": "find_file",
                    "6": "find_matching_entry",
                    "4": "find_matching_address",
                    "11": "find_matching_file",
                    "2": "find_matching_filename"
                },
                "in_EAX": {
                    "2": "counter",
                    "3": "comparison_value",
                    "1": "file_type",
                    "5": "status",
                    "4": "input_value"
                },
                "iVar1": {
                    "12": "comparison_result",
                    "8": "cmp_result",
                    "1": "result"
                },
                "unaff_RBX": {
                    "1": "entries",
                    "2": "file_pointer",
                    "7": "file_list"
                },
                "param_7": {
                    "1": "comparison_param",
                    "2": "search_string",
                    "13": "target_filename",
                    "4": "filename"
                },
                "i": {
                    "1": "comparison_result"
                },
                "filename_cmp": {
                    "4": "compare_filenames"
                },
                "FUn_00102cd9": {
                    "1": "get_matching_file"
                }
            }
        },
        "FUN_00102d2f": {
            "entrypoint": "0x00102d2f",
            "current_name": "print_file_info_00102d2f",
            "code": "\nvoid print_file_info_00102d2f(void)\n\n{\n  byte byte_value;\n  char result;\n  int status;\n  char *format_string;\n  uint file_type;\n  char **file_paths;\n  FILE *output_file;\n  long flag;\n  void *buffer;\n  int file_descriptor;\n  undefined file_permission;\n  char has_read_permission;\n  char has_write_permission;\n  char has_execute_permission;\n  char group_read_permission;\n  char group_write_permission;\n  char group_execute_permission;\n  char other_read_permission;\n  char other_write_permission;\n  char other_execute_permission;\n  undefined undefined_val;\n  uint file_mode;\n  uint file_owner;\n  uint file_size;\n  undefined8 file_size;\n  \n  do {\n    byte_value = FUN_00107c10();\n    *(uint *)((long)file_paths + 0x44) = *(uint *)((long)file_paths + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(flag + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)file_paths + 0x49) = byte_value | 0x10;\n    }\n    result = bfd_set_archive_head();\n  } while (result == '\\0');\n  duplicate_file_descriptor(file_descriptor);\n  result = bfd_close();\n  if (result != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    status = FUN_00105bc0();\n    if (status == 0) {\n      free(buffer);\n      free(output_file);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  FUN_00107c10();\n  format_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,format_string);\n  file_type = file_mode & 0xf000;\n  if (file_type == 0x4000) {\n    file_permission = 100;\n  }\n  else if (file_type == 0xa000) {\n    file_permission = 0x6c;\n  }\n  else if (file_type == 0x6000) {\n    file_permission = 0x62;\n  }\n  else if (file_type == 0x2000) {\n    file_permission = 99;\n  }\n  else if (file_type == 0xc000) {\n    file_permission = 0x73;\n  }\n  else {\n    file_permission = 0x70;\n    if (file_type != 0x1000) {\n      file_permission = 0x2d;\n    }\n  }\n  has_read_permission = (-((file_mode & 0x100) == 0) & 0xbbU) + 0x72;\n  has_write_permission = (-((file_mode & 0x80) == 0) & 0xb6U) + 0x77;\n  has_execute_permission = (-((file_mode & 0x40) == 0) & 0xb5U) + 0x78;\n  group_read_permission = (-((file_mode & 0x20) == 0) & 0xbbU) + 0x72;\n  group_write_permission = (-((file_mode & 0x10) == 0) & 0xb6U) + 0x77;\n  group_execute_permission = (-((file_mode & 8) == 0) & 0xb5U) + 0x78;\n  other_read_permission = (-((file_mode & 4) == 0) & 0xbbU) + 0x72;\n  other_write_permission = (-((file_mode & 2) == 0) & 0xb6U) + 0x77;\n  other_execute_permission = (-((file_mode & 1) == 0) & 0xb5U) + 0x78;\n  if ((file_mode & 0x800) != 0) {\n    if (has_execute_permission == 'x') {\n      has_execute_permission = 's';\n    }\n    else {\n      has_execute_permission = 'S';\n    }\n  }\n  if ((file_mode & 0x400) != 0) {\n    if (group_execute_permission == 'x') {\n      group_execute_permission = 's';\n    }\n    else {\n      group_execute_permission = 'S';\n    }\n  }\n  if ((file_mode & 0x200) != 0) {\n    if (other_execute_permission == 'x') {\n      other_execute_permission = 't';\n    }\n    else {\n      other_execute_permission = 'T';\n    }\n  }\n  undefined_val = 0;\n  fprintf(output_file,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)file_owner,\n          (ulong)file_size,file_size,&stack0x00000020,(ulong)file_mode)\n  ;\n  fputs(*file_paths,output_file);\n  if ((char)flag != '\\0') {\n    if ((*(byte *)((long)file_paths + 0x49) & 0x10) == 0) {\n      if (file_paths[0xb] != (char *)0x0) {\n        fprintf(output_file,\" 0x%lx\");\n      }\n    }\n    else if (file_paths[0xc] != (char *)0x0) {\n      fprintf(output_file,\" 0x%lx\");\n    }\n  }\n  fputc(10,output_file);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "__format": "format_string",
                "unaff_RBX": "file_paths",
                "unaff_RBP": "output_file",
                "unaff_R12": "flag",
                "unaff_R13": "buffer",
                "unaff_R14D": "file_descriptor",
                "uStack0000000000000068": "file_mode",
                "uStack000000000000006c": "file_owner",
                "in_stack_00000070": "file_size",
                "in_stack_00000080": "file_size",
                "bVar1": "byte_value",
                "cVar2": "result",
                "iVar3": "status",
                "uVar4": "file_type",
                "uStack0000000000000015": "file_permission",
                "cStack0000000000000016": "has_read_permission",
                "cStack0000000000000017": "has_write_permission",
                "in_stack_00000018": "has_execute_permission",
                "cStack0000000000000019": "group_read_permission",
                "cStack000000000000001a": "group_write_permission",
                "cStack000000000000001b": "group_execute_permission",
                "cStack000000000000001c": "other_read_permission",
                "cStack000000000000001d": "other_write_permission",
                "cStack000000000000001e": "other_execute_permission",
                "uStack000000000000001f": "undefined_val",
                "bfd_set_archive_head": "set_archive_header",
                "bfd_close": "close_file",
                "xexit": "exit_program",
                "dup": "duplicate_file_descriptor",
                "free": "release_memory",
                "fprintf": "write_to_file",
                "fputs": "write_string_to_file",
                "fputc": "write_char_to_file"
            },
            "calling": [
                "FUN_00102d2f"
            ],
            "called": [
                "FUN_00105bc0",
                "FUN_00107c10",
                "FUN_00102d2f",
                "bfd_set_archive_head",
                "bfd_close",
                "xexit",
                "dup",
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102d2f": {
                    "2": "print_file_details",
                    "1": "print_file_information",
                    "6": "print_file_metadata",
                    "21": "print_file_info"
                },
                "__format": {
                    "1": "time_data_corrupt",
                    "2": "time_corrupt_message",
                    "3": "time_error_message",
                    "8": "format_string"
                },
                "unaff_RBX": {
                    "7": "file_info",
                    "1": "file_metadata",
                    "2": "file_names",
                    "4": "file_content",
                    "3": "file_data"
                },
                "unaff_RBP": {
                    "17": "output_file",
                    "3": "file_ptr",
                    "1": "file",
                    "8": "file_pointer"
                },
                "unaff_R12": {
                    "1": "is_executable",
                    "2": "file_type",
                    "5": "is_archive",
                    "7": "flag"
                },
                "unaff_R13": {
                    "1": "buffer_ptr",
                    "2": "file_data",
                    "7": "buffer",
                    "4": "allocated_memory"
                },
                "unaff_R14D": {
                    "1": "dup_result",
                    "4": "fd",
                    "2": "dup_file_descriptor",
                    "17": "file_descriptor"
                },
                "uStack0000000000000068": {
                    "2": "permission",
                    "9": "file_permissions",
                    "1": "flags"
                },
                "uStack000000000000006c": {
                    "4": "file_owner",
                    "1": "links_count",
                    "3": "inode",
                    "2": "owner_id"
                },
                "in_stack_00000070": {
                    "1": "gid",
                    "6": "file_size",
                    "2": "block_size",
                    "3": "group_id"
                },
                "in_stack_00000080": {
                    "1": "val3",
                    "3": "modification_time",
                    "11": "file_size",
                    "4": "timestamp"
                },
                "bVar1": {
                    "2": "byte_var",
                    "1": "function_result",
                    "4": "byte_value"
                },
                "cVar2": {
                    "2": "char_val",
                    "4": "char_value",
                    "1": "bfd_set_archive_head_result"
                },
                "iVar3": {
                    "3": "status",
                    "1": "format_line_result",
                    "2": "close_result"
                },
                "uVar4": {
                    "2": "uint_var",
                    "1": "format_check",
                    "13": "file_type"
                },
                "uStack0000000000000015": {
                    "6": "file_permission",
                    "1": "unknown_permission",
                    "3": "file_type_char",
                    "4": "file_type"
                },
                "cStack0000000000000016": {
                    "4": "has_read_permission",
                    "1": "flag_symbol1",
                    "2": "is_executable"
                },
                "cStack0000000000000017": {
                    "3": "write_permission",
                    "1": "owner_write",
                    "2": "is_writable",
                    "4": "has_write_permission"
                },
                "in_stack_00000018": {
                    "1": "permission_flag3",
                    "4": "has_execute_permission",
                    "2": "is_readable"
                },
                "cStack0000000000000019": {
                    "1": "file_flag4",
                    "2": "group_read_permission"
                },
                "cStack000000000000001a": {
                    "1": "set_user_write_permission",
                    "2": "group_write_permission"
                },
                "cStack000000000000001b": {
                    "1": "set_user_read_permission",
                    "2": "group_execute_permission"
                },
                "cStack000000000000001c": {
                    "1": "file_flag7",
                    "2": "other_read_permission"
                },
                "cStack000000000000001d": {
                    "1": "modified_char7",
                    "2": "other_write_permission"
                },
                "cStack000000000000001e": {
                    "1": "flag_symbol9",
                    "2": "other_execute_permission"
                },
                "uStack000000000000001f": {
                    "1": "file_flag10",
                    "2": "undefined_val"
                },
                "FUN_00105bc0": {
                    "1": "check_error"
                },
                "FUN_00107c10": {
                    "1": "read_byte"
                },
                "bfd_set_archive_head": {
                    "2": "set_archive_header"
                },
                "bfd_close": {
                    "2": "close_file"
                },
                "xexit": {
                    "2": "exit_program"
                },
                "dup": {
                    "2": "duplicate_file_descriptor"
                },
                "free": {
                    "3": "release_memory"
                },
                "DAT_0010d5f8": {
                    "1": "flag3"
                },
                "DAT_0010d5e0": {
                    "1": "flag1"
                },
                "DAT_0010d618": {
                    "1": "success_flag2"
                },
                "cStack000000000000001f": {
                    "1": "has_group_readable_permission"
                },
                "cStack0000000000000020": {
                    "1": "error_message"
                },
                "[16] FUN_00105bc0": {
                    "1": "check_error_status"
                },
                "fprintf": {
                    "1": "write_to_file"
                },
                "fputs": {
                    "1": "write_string_to_file"
                },
                "fputc": {
                    "1": "write_char_to_file"
                }
            }
        },
        "FUN_00102d8c": {
            "entrypoint": "0x00102d8c",
            "current_name": "print_file_info_00102d8c",
            "code": "\nvoid print_file_info_00102d8c(void)\n\n{\n  char *error_message;\n  uint file_type;\n  char **file_content;\n  FILE *output_file;\n  char is_hexadecimal;\n  undefined file_type;\n  char read_permission;\n  char write_permission;\n  char execute_permission;\n  char permission_char4;\n  char permission_char5;\n  char permission_char6;\n  char permission_char7;\n  char permission_char8;\n  char permission_char9;\n  undefined is_executable;\n  uint file_mode;\n  uint file_size;\n  uint file_size;\n  undefined8 timestamp;\n  \n  error_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&formatted_time,error_message);\n  file_type = file_mode & 0xf000;\n  if (file_type == 0x4000) {\n    file_type = 100;\n  }\n  else if (file_type == 0xa000) {\n    file_type = 0x6c;\n  }\n  else if (file_type == 0x6000) {\n    file_type = 0x62;\n  }\n  else if (file_type == 0x2000) {\n    file_type = 99;\n  }\n  else if (file_type == 0xc000) {\n    file_type = 0x73;\n  }\n  else {\n    file_type = 0x70;\n    if (file_type != 0x1000) {\n      file_type = 0x2d;\n    }\n  }\n  read_permission = (-((file_mode & 0x100) == 0) & 0xbbU) + 0x72;\n  write_permission = (-((file_mode & 0x80) == 0) & 0xb6U) + 0x77;\n  execute_permission = (-((file_mode & 0x40) == 0) & 0xb5U) + 0x78;\n  permission_char4 = (-((file_mode & 0x20) == 0) & 0xbbU) + 0x72;\n  permission_char5 = (-((file_mode & 0x10) == 0) & 0xb6U) + 0x77;\n  permission_char6 = (-((file_mode & 8) == 0) & 0xb5U) + 0x78;\n  permission_char7 = (-((file_mode & 4) == 0) & 0xbbU) + 0x72;\n  permission_char8 = (-((file_mode & 2) == 0) & 0xb6U) + 0x77;\n  permission_char9 = (-((file_mode & 1) == 0) & 0xb5U) + 0x78;\n  if ((file_mode & 0x800) != 0) {\n    if (execute_permission == 'x') {\n      execute_permission = 's';\n    }\n    else {\n      execute_permission = 'S';\n    }\n  }\n  if ((file_mode & 0x400) != 0) {\n    if (permission_char6 == 'x') {\n      permission_char6 = 's';\n    }\n    else {\n      permission_char6 = 'S';\n    }\n  }\n  if ((file_mode & 0x200) != 0) {\n    if (permission_char9 == 'x') {\n      permission_char9 = 't';\n    }\n    else {\n      permission_char9 = 'T';\n    }\n  }\n  is_executable = 0;\n  fprintf(output_file,\"%s %ld/%ld %6lu %s \",&time_data,(ulong)file_size,\n          (ulong)file_size,timestamp,&formatted_time,(ulong)file_mode);\n  fputs(*file_content,output_file);\n  if (is_hexadecimal != '\\0') {\n    if ((*(byte *)((long)file_content + 0x49) & 0x10) == 0) {\n      if (file_content[0xb] != (char *)0x0) {\n        fprintf(output_file,\" 0x%lx\");\n      }\n    }\n    else if (file_content[0xc] != (char *)0x0) {\n      fprintf(output_file,\" 0x%lx\");\n    }\n  }\n  fputc(10,output_file);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "param_19": "file_mode",
                "param_20": "file_size",
                "param_22": "timestamp",
                "unaff_RBP": "output_file",
                "unaff_RBX": "file_content",
                "unaff_R12B": "is_hexadecimal",
                "__format": "error_message",
                "uVar1": "file_type",
                "cStack0000000000000016": "read_permission",
                "cStack0000000000000017": "write_permission",
                "param_9": "execute_permission",
                "cStack0000000000000019": "permission_char4",
                "cStack000000000000001a": "permission_char5",
                "cStack000000000000001b": "permission_char6",
                "cStack000000000000001c": "permission_char7",
                "cStack000000000000001d": "permission_char8",
                "cStack000000000000001e": "permission_char9",
                "uStack000000000000001f": "is_executable",
                "uStack000000000000006c": "file_size",
                "stack0x00000020": "formatted_time",
                "uStack0000000000000015": "file_type",
                "fputc": "write_character",
                "fputs": "write_string",
                "sprintf": "format_string",
                "fprintf": "print_formatted_string",
                "dcgettext": "get_localised_text",
                "stack0x00000016": "time_data"
            },
            "calling": [
                "FUN_001079c0"
            ],
            "called": [
                "fputs",
                "dcgettext",
                "fprintf",
                "fputc",
                "sprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102d8c": {
                    "1": "format_and_print_data",
                    "2": "print_file_details",
                    "4": "print_file_permissions",
                    "3": "print_file_metadata",
                    "17": "print_file_info"
                },
                "param_19": {
                    "4": "file_permission",
                    "10": "file_mode",
                    "1": "file_permission_flags",
                    "6": "permissions",
                    "2": "file_attributes",
                    "5": "file_permissions"
                },
                "param_20": {
                    "2": "file_group_id",
                    "1": "group_id",
                    "19": "file_size"
                },
                "param_22": {
                    "1": "memory_address",
                    "5": "file_address",
                    "2": "file_timestamp",
                    "13": "timestamp"
                },
                "unaff_RBP": {
                    "2": "file_stream",
                    "8": "file_pointer",
                    "17": "output_file",
                    "1": "file_output"
                },
                "unaff_RBX": {
                    "1": "file_pointer",
                    "3": "file_contents",
                    "5": "file_lines",
                    "13": "file_content",
                    "4": "file_data",
                    "2": "file_permissions"
                },
                "unaff_R12B": {
                    "6": "is_hex",
                    "1": "has_extra_info",
                    "7": "is_hexadecimal",
                    "2": "is_flag_set",
                    "4": "is_executable"
                },
                "__format": {
                    "3": "error_msg",
                    "1": "time_data_message",
                    "9": "error_message",
                    "2": "corrupt_time_format",
                    "5": "time_error_message"
                },
                "uVar1": {
                    "2": "file_permission",
                    "1": "file_permission_flags",
                    "4": "file_type_flag",
                    "11": "file_type",
                    "5": "file_permissions"
                },
                "cStack0000000000000016": {
                    "1": "is_executable",
                    "2": "flag1",
                    "3": "read_permission"
                },
                "cStack0000000000000017": {
                    "1": "symbol2",
                    "2": "flag2",
                    "3": "write_permission"
                },
                "param_9": {
                    "1": "first_character",
                    "2": "permission3",
                    "3": "execute_permission"
                },
                "cStack0000000000000019": {
                    "4": "permission_char4",
                    "1": "is_executable",
                    "2": "flag4"
                },
                "cStack000000000000001a": {
                    "1": "c1a",
                    "4": "permission_char5",
                    "2": "flag5"
                },
                "cStack000000000000001b": {
                    "4": "permission_char6",
                    "2": "flag6",
                    "1": "permission_execute"
                },
                "cStack000000000000001c": {
                    "1": "permission_read",
                    "4": "permission_char7",
                    "2": "permission7"
                },
                "cStack000000000000001d": {
                    "1": "guid_exec_perm",
                    "2": "flag8",
                    "4": "permission_char8"
                },
                "cStack000000000000001e": {
                    "1": "permission_execute",
                    "2": "permission9",
                    "4": "permission_char9"
                },
                "uStack000000000000001f": {
                    "1": "extra_flag",
                    "5": "is_executable"
                },
                "uStack000000000000006c": {
                    "1": "inode",
                    "5": "file_size",
                    "2": "inode_number"
                },
                "stack0x00000020": {
                    "1": "file_time",
                    "3": "formatted_time"
                },
                "__s": {
                    "1": "string_to_print"
                },
                "__stream": {
                    "1": "output_stream"
                },
                "uStack0000000000000015": {
                    "2": "permission_code",
                    "1": "file_permissions",
                    "3": "file_type"
                },
                "cStack000000000000001f": {
                    "1": "c1f"
                },
                "fputc": {
                    "1": "put_char_to_file",
                    "2": "write_character"
                },
                "fputs": {
                    "2": "write_string",
                    "1": "write_to_file"
                },
                "sprintf": {
                    "3": "format_string"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "dcgettext": {
                    "1": "get_corrupt_time_msg"
                },
                "stack0x00000016": {
                    "1": "time_data"
                },
                "unaff_R8": {
                    "1": "unaff_r8"
                }
            }
        },
        "FUN_00102e57": {
            "entrypoint": "0x00102e57",
            "current_name": "write_to_file_00102e57",
            "code": "\nvoid write_to_file_00102e57(void)\n\n{\n  FILE *file_pointer;\n  \n  DAT_0010d618 = (char *)concatenate_strings();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file_pointer = fopen(DAT_0010d618,\"w\");\n  if (file_pointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "renaming": {
                "FUN_00102e57": "write_to_file_00102e57",
                "pFVar1": "file_pointer",
                "concat": "concatenate_strings"
            },
            "calling": [
                "FUN_00105a68"
            ],
            "called": [
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102e57": {
                    "1": "handle_file_write",
                    "25": "write_to_file",
                    "2": "save_data_to_file"
                },
                "pFVar1": {
                    "11": "file_ptr",
                    "1": "file",
                    "14": "file_pointer"
                },
                "concat": {
                    "1": "concatenate",
                    "17": "concatenate_strings",
                    "2": "combine_strings"
                },
                "DAT_0010d618": {
                    "2": "filename",
                    "1": "file_path"
                },
                "DAT_0010d60c": {
                    "1": "flag"
                }
            }
        },
        "FUN_00102e6f": {
            "entrypoint": "0x00102e6f",
            "current_name": "extract_file_path_00102e6f",
            "code": "\nvoid extract_file_path_00102e6f(void)\n\n{\n  char *base_path;\n  char *file_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t path_length;\n  char *current_char;\n  \n  base_path = DAT_0010d5e8;\n  do {\n    file_path = file_path + 1;\n    while (*file_path != '/') {\n      if (*file_path == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (path_length = strlen(DAT_0010d5e8), path_length != 0)) {\n          if (base_path[path_length - 1] == '/') {\n            DAT_0010d618 = (char *)concatenate_strings(base_path,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concatenate_strings(base_path,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        file_pointer = fopen(DAT_0010d618,\"w\");\n        if (file_pointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_char = file_path;\n      if ((*file_path == '.') && (current_char = file_path + 1, file_path[1] == '.')) {\n        current_char = file_path + 2;\n        if ((file_path[2] == '/') || (file_path[2] == '\\0')) {\n          base_name = lbasename();\n          base_path = DAT_0010d618;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          FUN_00107920(error_message,base_path,base_name);\n          DAT_0010d618 = (char *)base_name;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (file_path = current_char, *current_char != '\\0' && (*current_char != '/')); current_char = current_char + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00102e6f": "extract_file_path_00102e6f",
                "in_RAX": "file_path",
                "pcVar1": "base_path",
                "pcVar6": "current_char",
                "uVar2": "base_name",
                "uVar3": "error_message",
                "pFVar4": "file_pointer",
                "sVar5": "path_length",
                "concat": "concatenate_strings",
                "printf": "print_output",
                "fopen": "open_file",
                "perror": "print_error",
                "xexit": "exit_program",
                "dcgettext": "get_translation",
                "lbasename": "get_base_name"
            },
            "calling": [
                "FUN_00102e6f"
            ],
            "called": [
                "dcgettext",
                "lbasename",
                "FUN_00102e6f",
                "FUN_00107920",
                "FUN_00105a68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102e6f": {
                    "2": "extract_and_save_file",
                    "1": "extract_file_from_archive",
                    "8": "extract_file_path",
                    "4": "extract_archive_member"
                },
                "in_RAX": {
                    "1": "current_char_pointer",
                    "4": "path",
                    "16": "file_path",
                    "3": "current_path",
                    "2": "filename"
                },
                "pcVar1": {
                    "1": "current_dir",
                    "3": "current_path",
                    "2": "base_dir",
                    "11": "base_path"
                },
                "pcVar6": {
                    "2": "sub_path",
                    "1": "next_path_token",
                    "6": "current_path",
                    "10": "current_char"
                },
                "uVar2": {
                    "1": "alternate_path",
                    "3": "basename",
                    "12": "base_name"
                },
                "uVar3": {
                    "22": "error_message",
                    "1": "err_msg",
                    "2": "error_msg"
                },
                "pFVar4": {
                    "1": "output_file",
                    "5": "file_ptr",
                    "3": "file",
                    "22": "file_pointer"
                },
                "sVar5": {
                    "3": "base_path_length",
                    "1": "file_name_length",
                    "2": "base_dir_length",
                    "5": "length",
                    "4": "base_length",
                    "8": "path_length"
                },
                "DAT_0010d5e8": {
                    "1": "default_directory"
                },
                "DAT_0010d618": {
                    "1": "output_file_path",
                    "4": "output_path"
                },
                "DAT_0010d60c": {
                    "1": "use_output_path"
                },
                "DAT_00108260": {
                    "1": "default_output_file_name"
                },
                "concat": {
                    "1": "concatenate_paths"
                },
                "printf": {
                    "1": "print_output"
                },
                "fopen": {
                    "1": "open_file"
                },
                "perror": {
                    "1": "print_error"
                },
                "xexit": {
                    "2": "exit_program"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "lbasename": {
                    "1": "get_base_name"
                },
                "FUN_00107920": {
                    "1": "handle_error"
                },
                "FUN_00105a68": {
                    "1": "cleanup"
                },
                "pcVar12": {
                    "1": "illegal_output_message"
                },
                "pcVar2_2": {
                    "1": "illegal_output_message"
                },
                "DCGETTEXT_MESSAGE": {
                    "1": "dcgettext_message"
                },
                "void": {
                    "1": ""
                },
                "&DAT_00108260": {
                    "1": "default_output_path"
                }
            }
        },
        "FUN_00102f08": {
            "entrypoint": "0x00102f08",
            "current_name": "print_and_assign_00102f08",
            "code": "\nundefined8 print_and_assign_00102f08(void)\n\n{\n  undefined8 *message_ptr;\n  undefined8 *value_ptr;\n  \n  printf(\"a - %s\\n\",*message_ptr);\n  message_ptr[0x1e] = *value_ptr;\n  *value_ptr = message_ptr;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00102f08": "print_and_assign_00102f08",
                "unaff_RBX": "message_ptr",
                "unaff_R12": "value_ptr"
            },
            "calling": [
                "FUN_00105af0"
            ],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102f08": {
                    "1": "print_and_modify",
                    "2": "print_and_modify_array",
                    "3": "print_and_update_values",
                    "5": "print_and_assign",
                    "4": "print_and_swap"
                },
                "unaff_RBX": {
                    "3": "array_ptr",
                    "4": "str_ptr",
                    "1": "message_pointer",
                    "5": "string_ptr",
                    "2": "string_pointer",
                    "7": "message_ptr"
                },
                "unaff_R12": {
                    "1": "swap_ptr",
                    "2": "target_ptr",
                    "3": "data_ptr",
                    "5": "value_ptr"
                },
                "*unaff_RBX": {
                    "1": "message_text"
                },
                "*unaff_R12": {
                    "1": "value_to_assign"
                }
            }
        },
        "FUN_00102f1e": {
            "entrypoint": "0x00102f1e",
            "current_name": "copy_file_with_reason_00102f1e",
            "code": "\nundefined  [16] copy_file_with_reason_00102f1e(void)\n\n{\n  int *errno_location;\n  undefined8 error_message;\n  ulong file_size;\n  char *file_path;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  errno_location = __errno_location();\n  strerror(*errno_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00107920(error_message);\n  unlink(file_path);\n  return_value._0_8_ = file_size & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00102f1e": "copy_file_with_reason_00102f1e",
                "unaff_RBP": "file_size",
                "unaff_R12": "file_path",
                "unaff_retaddr": "return_address",
                "piVar1": "errno_location",
                "uVar2": "error_message",
                "auVar3": "return_value",
                "__errno_location": "get_errno_location",
                "strerror": "get_error_message",
                "dcgettext": "get_text",
                "unlink": "remove_file"
            },
            "calling": [
                "FUN_00105bc0"
            ],
            "called": [
                "dcgettext",
                "unlink",
                "strerror",
                "__errno_location",
                "FUN_00107920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102f1e": {
                    "2": "copy_file_with_error_handling",
                    "1": "copy_file_reason",
                    "6": "copy_file_and_unlink",
                    "5": "copy_and_unlink_file",
                    "4": "copy_file",
                    "3": "copy_file_and_delete"
                },
                "unaff_RBP": {
                    "1": "stack_pointer",
                    "22": "file_size",
                    "2": "file_length"
                },
                "unaff_R12": {
                    "1": "filename",
                    "14": "file_name",
                    "16": "file_path"
                },
                "unaff_retaddr": {
                    "26": "return_address"
                },
                "piVar1": {
                    "1": "error_num_pointer",
                    "4": "errno_ptr",
                    "3": "errno_pointer",
                    "5": "errno_location",
                    "2": "errno_location_ptr"
                },
                "uVar2": {
                    "14": "error_message",
                    "2": "error_string",
                    "3": "error_msg",
                    "1": "gettext_result"
                },
                "auVar3": {
                    "9": "return_value"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "strerror": {
                    "1": "get_error_message"
                },
                "*piVar1": {
                    "1": "error_number"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "unlink": {
                    "1": "remove_file"
                }
            }
        },
        "FUN_00102f55": {
            "entrypoint": "0x00102f55",
            "current_name": "close_file_00102f55",
            "code": "\nundefined8 close_file_00102f55(void)\n\n{\n  int error_code;\n  int *error_location;\n  int file_descriptor;\n  \n  error_location = __errno_location();\n  error_code = *error_location;\n  close_file_00102f55(file_descriptor);\n  *error_location = error_code;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00102f55": "close_file_00102f55",
                "unaff_R12D": "file_descriptor",
                "piVar2": "error_location",
                "iVar1": "error_code",
                "__errno_location": "get_error_location",
                "close": "close_file"
            },
            "calling": [
                "FUN_00105c00"
            ],
            "called": [
                "__errno_location",
                "close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102f55": {
                    "1": "close_and_update_errno",
                    "7": "close_file",
                    "6": "close_and_set_errno",
                    "3": "close_and_set_error",
                    "2": "close_file_and_set_errno",
                    "5": "close_and_return_error"
                },
                "unaff_R12D": {
                    "30": "file_descriptor"
                },
                "piVar2": {
                    "1": "error_location_pointer",
                    "2": "errno_ptr"
                },
                "iVar1": {
                    "1": "original_errno",
                    "3": "error_code",
                    "2": "saved_errno"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "<original_variable_name_1>": {
                    "1": "file_descriptor"
                },
                "<original_variable_name_n>": {
                    "1": "error_code"
                },
                "close": {
                    "1": "close_file"
                }
            }
        },
        "FUN_00102f96": {
            "entrypoint": "0x00102f96",
            "current_name": "print_error_message_00102f96",
            "code": "\n\n\nvoid print_error_message_00102f96(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standard_output);\n  if (error_code != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_0010d660,error_message,return_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address",
                "uVar1": "error_message",
                "dcgettext": "retrieve_error_message",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "fprintf": "print_to_standard_error",
                "fflush": "flush_standard_output"
            },
            "calling": [
                "FUN_00107c20"
            ],
            "called": [
                "dcgettext",
                "fprintf",
                "fflush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102f96": {
                    "1": "report_error",
                    "8": "print_error",
                    "2": "print_error_info",
                    "18": "print_error_message"
                },
                "unaff_RBX": {
                    "24": "error_code",
                    "6": "error_flag",
                    "1": "error_status"
                },
                "unaff_retaddr": {
                    "30": "return_address"
                },
                "uVar1": {
                    "14": "error_message",
                    "1": "error_description"
                },
                "dcgettext": {
                    "1": "retrieve_error_message"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "fprintf": {
                    "1": "print_to_standard_error"
                },
                "fflush": {
                    "1": "flush_standard_output"
                }
            }
        },
        "FUN_00102fd7": {
            "entrypoint": "0x00102fd7",
            "current_name": "set_time_error_00102fd7",
            "code": "\nvoid set_time_error_00102fd7(void)\n\n{\n  int *error_number;\n  undefined8 error_message;\n  \n  error_number = __errno_location();\n  strerror(*error_number);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00107920(error_message);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102fd7": "set_time_error_00102fd7",
                "piVar1": "error_number",
                "uVar2": "error_message",
                "dcgettext": "get_localized_error",
                "strerror": "get_error_string",
                "__errno_location": "get_errno_location"
            },
            "calling": [
                "FUN_00107c80"
            ],
            "called": [
                "dcgettext",
                "strerror",
                "__errno_location",
                "FUN_00107920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102fd7": {
                    "7": "set_time_error_handler",
                    "4": "set_time_error_message",
                    "2": "print_time_error",
                    "3": "print_error_message",
                    "8": "set_time_error",
                    "1": "print_time_set_error_message"
                },
                "piVar1": {
                    "1": "error_code_pointer",
                    "9": "error_number",
                    "2": "errno_ptr",
                    "5": "error_number_ptr"
                },
                "uVar2": {
                    "3": "translated_error_message",
                    "17": "error_message",
                    "2": "error_msg",
                    "1": "error_message_ptr"
                },
                "dcgettext": {
                    "2": "get_localized_error",
                    "1": "format_error_message"
                },
                "strerror": {
                    "1": "get_error_msg",
                    "7": "get_error_message"
                },
                "__errno_location": {
                    "2": "get_error_number",
                    "1": "get_error_location",
                    "3": "get_errno_location"
                },
                "FUN_00107920": {
                    "1": "handle_error",
                    "2": "display_message",
                    "6": "print_error_message"
                },
                "*piVar1": {
                    "1": "error_num"
                }
            }
        },
        "FUN_0010300e": {
            "entrypoint": "0x0010300e",
            "current_name": "find_matching_value_0010300e",
            "code": "\nvoid find_matching_value_0010300e(void)\n\n{\n  bool found_match;\n  int current_index;\n  long calculated_index;\n  byte lookup_value;\n  byte *current_byte;\n  byte *matching_byte;\n  int matching_index;\n  \n  found_match = false;\n  current_index = DAT_0010d5d0;\n  for (current_byte = DAT_0010d5c8; current_byte < DAT_0010d5b0; current_byte = current_byte + 1) {\n    lookup_value = 1;\n    if (*current_byte != 0) {\n      lookup_value = (&DAT_0010ab00)[*current_byte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)current_index * 2) != 0) {\n      found_match = true;\n      matching_byte = current_byte;\n      matching_index = current_index;\n    }\n    while( true ) {\n      calculated_index = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)current_index * 2) + (uint)lookup_value);\n      if (*(short *)(&DAT_0010a440 + calculated_index * 2) == current_index) break;\n      current_index = (int)*(short *)(&DAT_0010a800 + (long)current_index * 2);\n      if (0xb0 < current_index) {\n        lookup_value = (&DAT_0010a7c0)[(int)(uint)lookup_value];\n      }\n    }\n    current_index = (int)*(short *)(&DAT_0010a240 + calculated_index * 2);\n  }\n  if (found_match) {\n    DAT_0010d5b8 = matching_byte;\n    DAT_0010d5c0 = matching_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010300e": "find_matching_value_0010300e",
                "pbVar5": "current_byte",
                "bVar4": "lookup_value",
                "iVar2": "current_index",
                "lVar3": "calculated_index",
                "bVar1": "found_match",
                "in_R9": "matching_byte",
                "in_R10D": "matching_index"
            },
            "calling": [
                "FUN_00103e95"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010300e": {
                    "1": "find_matching_indices",
                    "3": "find_matching_pattern",
                    "8": "find_matching_value",
                    "2": "find_matching_index"
                },
                "pbVar5": {
                    "3": "byte_array_pointer",
                    "1": "current_element",
                    "2": "data_ptr",
                    "4": "byte_pointer",
                    "17": "current_byte"
                },
                "bVar4": {
                    "2": "offset",
                    "7": "lookup_value",
                    "1": "temp_byte",
                    "6": "lookup_result"
                },
                "iVar2": {
                    "1": "current_idx",
                    "2": "current_value",
                    "22": "current_index"
                },
                "lVar3": {
                    "2": "offset",
                    "8": "calculated_index",
                    "1": "target_address"
                },
                "bVar1": {
                    "3": "is_match_found",
                    "1": "found_matching_pattern",
                    "8": "has_match",
                    "2": "found_target",
                    "9": "found_match"
                },
                "in_R9": {
                    "9": "matching_byte",
                    "1": "matched_byte",
                    "4": "matching_byte_ptr",
                    "5": "matching_byte_pointer"
                },
                "in_R10D": {
                    "1": "index",
                    "17": "matching_index",
                    "2": "matched_index"
                },
                "DAT_0010d5d0": {
                    "1": "start_index"
                },
                "DAT_0010d5c8": {
                    "2": "start_byte_pointer"
                },
                "DAT_0010d5b0": {
                    "2": "end_byte_pointer"
                },
                "&DAT_0010ab00": {
                    "1": "lookup_table1"
                },
                "&DAT_0010a980": {
                    "1": "short_array1"
                },
                "&DAT_0010a640": {
                    "1": "lookup_table3"
                },
                "&DAT_0010a440": {
                    "1": "lookup_table4"
                },
                "&DAT_0010a800": {
                    "1": "short_array4"
                },
                "&DAT_0010a7c0": {
                    "1": "byte_lookup_table2"
                },
                "&DAT_0010a240": {
                    "1": "short_array5"
                },
                "DAT_0010d5b8": {
                    "1": "found_match_byte_pointer"
                },
                "DAT_0010d5c0": {
                    "1": "matched_index_result"
                },
                "DAG_0010d5d0": {
                    "1": "initial_index"
                },
                "DAG_0010d5c8": {
                    "1": "start_bytes"
                },
                "DAG_0010d5b0": {
                    "1": "end_bytes"
                },
                "DAG_0010ab00": {
                    "1": "lookup_table1"
                },
                "DAG_0010a980": {
                    "1": "check_value_table"
                },
                "DAG_0010a640": {
                    "1": "offset_table"
                },
                "DAG_0010a440": {
                    "1": "compare_value_table"
                },
                "DAG_0010a800": {
                    "1": "next_index_table"
                },
                "DAG_0010a7c0": {
                    "1": "special_lookup_table"
                },
                "DAG_0010a240": {
                    "1": "result_value_table"
                },
                "DAG_0010d5b8": {
                    "1": "matching_byte_output"
                },
                "DAG_0010d5c0": {
                    "1": "matching_index_output"
                }
            }
        },
        "FUN_001030ed": {
            "entrypoint": "0x001030ed",
            "current_name": "extract_data_from_binary_001030ed",
            "code": "\nvoid extract_data_from_binary_001030ed(void)\n\n{\n  undefined8 *data_pointer;\n  \n  data_pointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)data_pointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)data_pointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *data_pointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "data_pointer"
            },
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001030ed": {
                    "1": "extract_function_metadata",
                    "9": "extract_data_from_binary",
                    "7": "extract_data",
                    "4": "extract_function_data",
                    "5": "initialize_data"
                },
                "puVar1": {
                    "1": "binary_data",
                    "4": "function_pointer",
                    "15": "data_pointer",
                    "3": "pointer",
                    "2": "extracted_data"
                },
                "*puVar1": {
                    "1": "data_value"
                },
                "DAT_0010d5a8": {
                    "2": "data_address1",
                    "1": "ptr_array",
                    "8": "base_address",
                    "3": "data_pointer1"
                },
                "DAT_0010d5a0": {
                    "1": "data_offset",
                    "2": "data_address2",
                    "6": "offset",
                    "3": "data_pointer2",
                    "10": "index"
                },
                "DAT_0010d598": {
                    "1": "data_field1",
                    "3": "value1",
                    "8": "extracted_value",
                    "6": "extracted_value1"
                },
                "DAT_0010d5b0": {
                    "2": "string_pointer",
                    "3": "extracted_pointer",
                    "5": "extracted_value2",
                    "1": "data"
                },
                "DAT_0010d5c8": {
                    "1": "extracted_copy",
                    "3": "extracted_value3",
                    "2": "copied_pointer"
                },
                "DAT_0010d590": {
                    "1": "first_element",
                    "3": "extracted_value4",
                    "2": "value3",
                    "5": "first_value"
                },
                "DAT_0010d588": {
                    "1": "memory_value2",
                    "2": "first_char",
                    "3": "extracted_value5"
                }
            }
        },
        "FUN_0010312d": {
            "entrypoint": "0x0010312d",
            "current_name": "copy_data_0010312d",
            "code": "\nvoid copy_data_0010312d(long source,long destination)\n\n{\n  long temp;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = source;\n  void;\n}\n\n",
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "source",
                "param_2": "destination",
                "lVar1": "temp",
                "return": "void"
            },
            "calling": [
                "FUN_00103e95"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010312d": {
                    "1": "copy_and_swap_values",
                    "19": "copy_data"
                },
                "param_1": {
                    "2": "source_address",
                    "1": "dest_pointer",
                    "4": "source_ptr",
                    "17": "source"
                },
                "param_2": {
                    "4": "source",
                    "2": "destination_pointer",
                    "17": "destination",
                    "1": "source_buffer"
                },
                "lVar1": {
                    "2": "temp_ptr",
                    "1": "temp_address",
                    "11": "temp",
                    "10": "temp_var"
                },
                "DAT_0010d558": {
                    "1": "data_constant"
                },
                "return": {
                    "1": "void"
                },
                "*(undefined8 *)(param_2 + 0xf0)": {
                    "1": "value_to_copy"
                },
                "*(undefined8 *)(param_1 + 0xf0)": {
                    "1": "source_value"
                }
            }
        },
        "FUN_0010315d": {
            "entrypoint": "0x0010315d",
            "current_name": "check_and_exit_if_zero_0010315d",
            "code": "\n\n\nvoid check_and_exit_if_zero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_zero_0010315d",
                "xexit": "exit_program"
            },
            "calling": [
                "FUN_00105300",
                "FUN_00103e95",
                "FUN_00103c60"
            ],
            "called": [
                "xexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010315d": {
                    "1": "halt_if_zero_data",
                    "8": "check_and_exit",
                    "10": "check_and_exit_if_zero",
                    "5": "check_exit_condition"
                },
                "_DAT_0010d608": {
                    "1": "is_initialized",
                    "2": "error_code"
                },
                "xexit": {
                    "1": "terminate",
                    "5": "exit_with_error",
                    "8": "exit_program",
                    "3": "exit_function",
                    "4": "terminate_program"
                }
            }
        },
        "FUN_00103172": {
            "entrypoint": "0x00103172",
            "current_name": "copy_and_print_string_00103172",
            "code": "\nundefined  [16]\ncopy_and_print_string_00103172(undefined8 *source,undefined8 *destination,char should_printf,undefined8 additional_data)\n\n{\n  undefined8 source_value;\n  undefined result [16];\n  \n  if (should_printf != '\\0') {\n    printf(\"r - %s\\n\",*destination);\n  }\n  source_value = *source;\n  destination[0x1e] = source_value;\n  result._1_7_ = (undefined7)((ulong)source_value >> 8);\n  result[0] = 1;\n  *source = destination;\n  result._8_8_ = additional_data;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00103172": "copy_and_print_string_00103172",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "should_print",
                "param_4": "additional_data",
                "uVar1": "source_value",
                "auVar2": "result",
                "printf": "print"
            },
            "calling": [
                "FUN_001028ed"
            ],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103172": {
                    "1": "process_data",
                    "6": "copy_and_print_string",
                    "2": "update_and_print",
                    "3": "update_and_print_data"
                },
                "param_1": {
                    "1": "data",
                    "5": "source",
                    "2": "old_param",
                    "4": "source_ptr"
                },
                "param_2": {
                    "1": "input_data",
                    "4": "destination_ptr",
                    "2": "destination_data",
                    "5": "destination"
                },
                "param_3": {
                    "19": "should_print",
                    "7": "flag",
                    "1": "should_reverse"
                },
                "param_4": {
                    "1": "extra_data",
                    "8": "additional_data",
                    "6": "value",
                    "5": "new_value",
                    "3": "data"
                },
                "uVar1": {
                    "1": "source",
                    "2": "temp_var",
                    "7": "source_value",
                    "3": "data_value"
                },
                "auVar2": {
                    "1": "temp_buffer",
                    "10": "result",
                    "2": "updated_data",
                    "3": "modified_data"
                },
                "printf": {
                    "1": "print"
                },
                "__format": {
                    "2": "format_string"
                }
            }
        },
        "FUN_001031a5": {
            "entrypoint": "0x001031a5",
            "current_name": "print_syntax_error_001031a5",
            "code": "\nvoid print_syntax_error_001031a5(void)\n\n{\n  uint line_number;\n  char *error_message_format;\n  \n  line_number = DAT_0010d554 + 1;\n  error_message_format = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(error_message_format,(ulong)line_number);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "__format": "error_message_format",
                "uVar1": "line_number"
            },
            "calling": [
                "FUN_00103e95"
            ],
            "called": [
                "dcgettext",
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001031a5": {
                    "1": "report_syntax_error",
                    "3": "print_error_message",
                    "7": "print_archive_script_syntax_error",
                    "5": "print_archive_script_error",
                    "13": "print_syntax_error"
                },
                "__format": {
                    "3": "error_message",
                    "2": "error_format",
                    "10": "format_string",
                    "14": "error_message_format"
                },
                "uVar1": {
                    "28": "line_number",
                    "1": "incremented_value"
                }
            }
        },
        "FUN_001031cf": {
            "entrypoint": "0x001031cf",
            "current_name": "initialize_file_001031cf",
            "code": "\n\n\nundefined8\ninitialize_file_001031cf(file **file_pointer,file *input_file,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errno_value;\n  uint is_terminal;\n  int file_descriptor;\n  int *errno_location;\n  long file_location;\n  \n  errno_location = __errno_location();\n  file_location = DAT_0010d5a8;\n  errno_value = *errno_location;\n  if (file_pointer == (file **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = input_file;\n    if (DAT_0010d5a8 != 0) {\ncheck_file_match:\n      if (file_pointer == *(file ***)(file_location + DAT_0010d5a0 * 8)) goto verify_file_pointer;\n    }\n  }\n  else {\n    *(undefined4 *)((long)file_pointer + 0x1c) = 0;\n    *(undefined *)&file_pointer[1]->_flags = 0;\n    *(undefined *)((long)&file_pointer[1]->_flags + 1) = 0;\n    *(undefined4 *)(file_pointer + 5) = 1;\n    initialized_value5 = file_pointer[1];\n    *(undefined4 *)(file_pointer + 7) = 0;\n    if (file_location != 0) {\n      if (file_pointer == *(file ***)(file_location + DAT_0010d5a0 * 8)) {\n        FUN_001030ed();\n      }\n      *file_pointer = input_file;\n      *(undefined4 *)((long)file_pointer + 0x34) = 1;\n      goto check_file_match;\n    }\n    *file_pointer = input_file;\n    *(undefined4 *)((long)file_pointer + 0x34) = 1;\n  }\n  *(undefined8 *)((long)file_pointer + 0x2c) = 1;\nverify_file_pointer:\n  is_terminal = 0;\n  if (input_file != (file *)0x0) {\n    file_descriptor = fileno;\n    file_descriptor = is_file_terminal;\n    is_terminal = (uint)(0 < file_descriptor);\n  }\n  *(uint *)((long)file_pointer + 0x24) = is_terminal;\n  *errno_location = errno_value;\n  return param5;\n}\n\n",
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "file_pointer",
                "param_2": "input_file",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errno_value",
                "uVar2": "is_terminal",
                "iVar3": "file_descriptor",
                "piVar4": "errno_location",
                "lVar5": "file_location",
                "param_1[2]": "initialized_value5",
                "fileno(param_2)": "get_file_descriptor",
                "isatty(iVar3)": "is_file_terminal",
                "isatty": "check_if_terminal",
                "fileno": "get_file_descriptor",
                "__errno_location": "get_errno_location",
                "LAB_00103263": "check_file_match",
                "LAB_0010327b": "verify_file_pointer",
                "FILE": "file"
            },
            "calling": [
                "FUN_00103e95",
                "FUN_001033d6"
            ],
            "called": [
                "FUN_001030ed",
                "isatty",
                "fileno",
                "__errno_location"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001031cf": {
                    "2": "initialize_file_stream",
                    "1": "open_file",
                    "26": "initialize_file"
                },
                "param_1": {
                    "1": "out_file_stream",
                    "2": "error_message",
                    "6": "file_ptr",
                    "8": "file_pointer",
                    "5": "output_file"
                },
                "param_2": {
                    "4": "file",
                    "14": "input_file",
                    "1": "initial_file",
                    "2": "source_file",
                    "3": "file_pointer"
                },
                "param_3": {
                    "1": "param1",
                    "14": "param_3",
                    "16": "param3"
                },
                "param_4": {
                    "16": "param4",
                    "14": "param_4",
                    "1": "param2"
                },
                "param_5": {
                    "14": "param5",
                    "1": "return_val",
                    "13": "param_5"
                },
                "iVar1": {
                    "3": "error_value",
                    "1": "error_num",
                    "2": "error_code",
                    "8": "error",
                    "12": "errno_value"
                },
                "uVar2": {
                    "1": "file_is_terminal",
                    "6": "is_tty",
                    "17": "is_terminal"
                },
                "iVar3": {
                    "1": "file_id",
                    "2": "fd",
                    "23": "file_descriptor"
                },
                "piVar4": {
                    "1": "errno_location_ptr",
                    "2": "error_ptr",
                    "3": "errno_pointer",
                    "7": "errno_ptr",
                    "6": "error_location"
                },
                "lVar5": {
                    "3": "file_location",
                    "2": "file_count",
                    "1": "file_array_ptr"
                },
                "_DAT_00000034": {
                    "1": "is_initialized"
                },
                "_DAT_00000000": {
                    "1": "initialized_file"
                },
                "DAT_0010d5a8": {
                    "1": "static_variable",
                    "2": "data_location"
                },
                "DAT_0010d5a0": {
                    "1": "data2",
                    "2": "file_index"
                },
                "*(undefined4 *)((long)param_1 + 0x1c)": {
                    "1": "initialized_value1"
                },
                "*(undefined *)&param_1[1]->_flags": {
                    "1": "uninitialized_var2"
                },
                "*(undefined *)((long)&param_1[1]->_flags + 1)": {
                    "1": "initialized_value3"
                },
                "*(undefined4 *)(param_1 + 5)": {
                    "1": "initialized_value4"
                },
                "param_1[2]": {
                    "1": "initialized_value5"
                },
                "*(undefined4 *)(param_1 + 7)": {
                    "1": "flag4"
                },
                "*param_1": {
                    "1": "initialized_value7"
                },
                "*(undefined4 *)((long)param_1 + 0x34)": {
                    "1": "initialized_value8"
                },
                "*(undefined8 *)((long)param_1 + 0x2c)": {
                    "1": "flag6"
                },
                "fileno(param_2)": {
                    "1": "get_file_descriptor"
                },
                "isatty(iVar3)": {
                    "1": "is_file_terminal"
                },
                "*(uint *)((long)param_1 + 0x24)": {
                    "1": "terminal_flag"
                },
                "*piVar4": {
                    "1": "original_errno"
                },
                "outfile->_flags": {
                    "1": "out_flags"
                },
                "&outfile->_flags + 1": {
                    "1": "padding"
                },
                "outfile[5]": {
                    "1": "out_5"
                },
                "outfile[2]": {
                    "1": "out_2"
                },
                "outfile[7]": {
                    "1": "out_7"
                },
                "infile->_flags": {
                    "1": "in_flags"
                },
                "&infile->_flags + 1": {
                    "1": "padding"
                },
                "outfile[1]": {
                    "1": "out_1"
                },
                "outfile": {
                    "1": "output_file"
                },
                "infile": {
                    "1": "input_file"
                },
                "isatty": {
                    "1": "check_is_atty",
                    "2": "check_if_terminal"
                },
                "fileno": {
                    "1": "get_file_no",
                    "2": "get_file_descriptor"
                },
                "__errno_location": {
                    "4": "get_errno_location"
                },
                "LAB_00103263": {
                    "1": "check_file_match"
                },
                "LAB_0010327b": {
                    "1": "verify_file_pointer"
                },
                "FILE": {
                    "1": "file"
                },
                "*(FILE ***)(lVar5 + DAT_0010d5a0 * 8)": {
                    "1": "file_ptr_at_location"
                },
                "FUN_001030ed": {
                    "1": "execute_function"
                }
            }
        },
        "FUN_001032a8": {
            "entrypoint": "0x001032a8",
            "current_name": "process_archive_entries_001032a8",
            "code": "\n\n\nundefined8 process_archive_entries_001032a8(long *archive,code *callback,undefined8 *entry_names,undefined8 return_value)\n\n{\n  long next_entry;\n  undefined8 entry_name;\n  bool entry_found;\n  long *current_entry;\n  int comparison_result;\n  char *error_message;\n  long *next_entry;\n  long current_entry;\n  long *previous_entry;\n  \n  current_entry = archive[0x1e];\n  if (entry_names == (undefined8 *)0x0) {\n    while (current_entry != 0) {\n      next_entry = *(long *)(current_entry + 0xf0);\n      (*callback)(current_entry,0);\n      current_entry = next_entry;\n    }\n  }\n  else {\n    do {\n      entry_found = false;\n      current_entry = (long *)archive[0x1e];\n      previous_entry = archive;\n      while (next_entry = current_entry, next_entry != (long *)0x0) {\n        if (*next_entry != 0) {\n          comparison_result = filename_cmp(*entry_names);\n          if (comparison_result == 0) {\n            entry_found = true;\n            (*callback)(next_entry,previous_entry);\n          }\n        }\n        previous_entry = next_entry;\n        current_entry = (long *)next_entry[0x1e];\n      }\n      if (!entry_found) {\n        entry_name = *entry_names;\n        error_message = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,error_message,entry_name);\n      }\n      entry_names = (undefined8 *)entry_names[1];\n    } while (entry_names != (undefined8 *)0x0);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entry_names",
                "param_4": "return_value",
                "lVar1": "next_entry",
                "uVar2": "entry_name",
                "bVar3": "entry_found",
                "plVar4": "current_entry",
                "iVar5": "comparison_result",
                "__format": "error_message",
                "plVar6": "next_entry",
                "lVar7": "current_entry",
                "plVar8": "previous_entry",
                "FUN_001032a8": "process_archive_entries_001032a8"
            },
            "calling": [
                "FUN_00103e95"
            ],
            "called": [
                "dcgettext",
                "fprintf",
                "filename_cmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "10": "archive",
                    "5": "entries",
                    "1": "file_struct",
                    "4": "archive_data",
                    "3": "entry_list"
                },
                "param_2": {
                    "8": "callback",
                    "1": "action",
                    "5": "entry_processor",
                    "3": "extract_function"
                },
                "param_3": {
                    "1": "filename_list",
                    "2": "filenames",
                    "11": "entry_names",
                    "5": "entry_list",
                    "3": "entries"
                },
                "param_4": {
                    "5": "result",
                    "2": "return_val",
                    "23": "return_value",
                    "1": "param_4"
                },
                "lVar1": {
                    "26": "next_entry",
                    "2": "current_entry",
                    "1": "next_entry_offset"
                },
                "uVar2": {
                    "1": "current_file_name",
                    "7": "current_entry",
                    "2": "filename",
                    "12": "entry_name"
                },
                "bVar3": {
                    "1": "found",
                    "13": "entry_found",
                    "3": "is_entry_found",
                    "12": "found_entry",
                    "2": "file_found"
                },
                "plVar4": {
                    "3": "current_ptr",
                    "22": "current_entry",
                    "2": "current_node",
                    "1": "current_entry_list"
                },
                "iVar5": {
                    "25": "comparison_result",
                    "5": "cmp_result",
                    "1": "filename_comparison"
                },
                "__format": {
                    "10": "error_message",
                    "3": "message_format",
                    "9": "format_string",
                    "1": "error_format",
                    "7": "error_message_format"
                },
                "plVar6": {
                    "3": "next_ptr",
                    "1": "next_entry_list",
                    "5": "next_entry_ptr",
                    "10": "next_entry",
                    "2": "next_node"
                },
                "lVar7": {
                    "2": "current_entry_iterator",
                    "1": "current_entry_index",
                    "7": "current_entry",
                    "5": "current_entry_ptr",
                    "3": "current_archive_entry"
                },
                "plVar8": {
                    "2": "previous_archive_entry",
                    "1": "previous_entry_pointer",
                    "10": "previous_entry",
                    "3": "previous_entry_ptr"
                },
                "FUN_001032a8": {
                    "3": "extract_entries_from_archive",
                    "1": "extract_entries",
                    "5": "extract_files_from_archive",
                    "2": "process_entries",
                    "12": "process_archive_entries",
                    "4": "process_archive"
                },
                "lvar7": {
                    "1": "current_entry_offset"
                }
            }
        },
        "FUN_0010336b": {
            "entrypoint": "0x0010336b",
            "current_name": "print_emulation_options_0010336b",
            "code": "\nvoid print_emulation_options_0010336b(FILE *output_file)\n\n{\n  char *emulation_options_message;\n  \n  emulation_options_message = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(output_file,emulation_options_message);\n  emulation_options_message = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(output_file,emulation_options_message);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "output_file",
                "pcVar1": "emulation_options_message"
            },
            "calling": [
                "FUN_0010342d"
            ],
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010336b": {
                    "31": "print_emulation_options"
                },
                "param_1": {
                    "1": "file_ptr",
                    "2": "file_output",
                    "25": "output_file"
                },
                "pcVar1": {
                    "2": "message",
                    "3": "emulation_options_text",
                    "4": "emulation_option_string",
                    "1": "option_string"
                }
            }
        },
        "FUN_001033b0": {
            "entrypoint": "0x001033b0",
            "current_name": "print_error_message_and_exit_001033b0",
            "code": "\n\n\nvoid print_error_message_and_exit_001033b0(undefined8 error_message)\n\n{\n  fprintf(error_stream,\"%s\\n\",error_message);\n                    \n  exit_program(2);\n}\n\n",
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "error_message",
                "fprintf": "print_to_stderr",
                "exit": "exit_program",
                "_stderr": "error_stream"
            },
            "calling": [
                "FUN_00103e95",
                "FUN_001033d6",
                "FUN_00103df9"
            ],
            "called": [
                "fprintf",
                "exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001033b0": {
                    "19": "print_error_message_and_exit",
                    "10": "print_and_exit",
                    "2": "print_error_and_exit"
                },
                "param_1": {
                    "23": "error_message",
                    "7": "message",
                    "1": "error_msg"
                },
                "fprintf": {
                    "2": "print_to_stderr",
                    "1": "print_to_standard_error"
                },
                "exit": {
                    "1": "terminate_program",
                    "3": "exit_program"
                },
                "_stderr": {
                    "1": "output_stream",
                    "2": "error_stream"
                },
                "__stream": {
                    "2": "stream"
                },
                "__format": {
                    "1": "format_string"
                },
                "__status": {
                    "1": "status"
                }
            }
        },
        "FUN_001033d6": {
            "entrypoint": "0x001033d6",
            "current_name": "create_buffer_001033d6",
            "code": "\nundefined  [16]\ncreate_buffer_001033d6(undefined8 file_ptr,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  void *buffer;\n  void *buffer2;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)FUN_001033b0(\"out of dynamic memory in yy_create_buffer_001033d6()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    buffer2 = malloc(0x4002);\n    *(void **)((long)buffer + 8) = buffer2;\n  } while (buffer2 == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  FUN_001031cf(buffer,file_ptr);\n  result._8_8_ = param_4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "file_ptr",
                "pvVar1": "buffer",
                "pvVar2": "buffer2",
                "auVar3": "result",
                "malloc": "allocate_memory"
            },
            "calling": [
                "FUN_00103e95"
            ],
            "called": [
                "FUN_001031cf",
                "malloc",
                "FUN_001033b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001033d6": {
                    "26": "create_buffer",
                    "1": "create_yy_buffer"
                },
                "param_1": {
                    "2": "file_pointer",
                    "4": "file1",
                    "7": "file_ptr",
                    "3": "input_file",
                    "1": "file_struct"
                },
                "param_2": {
                    "2": "file_2",
                    "1": "buffer_ptr",
                    "4": "file2",
                    "7": "param_2",
                    "3": "output_file"
                },
                "param_3": {
                    "1": "param",
                    "12": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "2": "param",
                    "1": "param_4_buffer",
                    "8": "param4",
                    "11": "param_4"
                },
                "pvVar1": {
                    "1": "buffer1",
                    "27": "buffer",
                    "2": "buffer_ptr"
                },
                "pvVar2": {
                    "1": "buffer_ptr2",
                    "4": "dynamic_memory",
                    "2": "buffer_2",
                    "9": "buffer2",
                    "3": "data"
                },
                "auVar3": {
                    "21": "result",
                    "1": "result_array",
                    "2": "result_buffer"
                },
                "FUN_001031cf": {
                    "1": "write_to_buffer"
                },
                "param_5": {
                    "1": "param_5"
                },
                "malloc": {
                    "1": "allocate_memory"
                },
                "FUN_001033b0": {
                    "1": "error_message"
                },
                "__size": {
                    "1": "size"
                }
            }
        },
        "FUN_0010342d": {
            "entrypoint": "0x0010342d",
            "current_name": "print_usage_0010342d",
            "code": "\n\n\nvoid print_usage_0010342d(uint param)\n\n{\n  undefined8 version;\n  char *message;\n  FILE *output_stream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  output_stream = _stderr;\n  if (param != 0) {\n    output_stream = _stdout;\n  }\n  fprintf(output_stream,message,DAT_0010d660);\n  version = DAT_0010d660;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(output_stream,message,version);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(output_stream,message);\n  FUN_0010336b(output_stream);\n  FUN_0010266f(DAT_0010d660,output_stream);\n  if (param != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_stream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(param ^ 1);\n}\n\n",
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "param",
                "uVar1": "version",
                "pcVar2": "message",
                "__stream": "output_stream",
                "fprintf": "print_to_stream",
                "xexit": "exit_program"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "FUN_0010336b",
                "dcgettext",
                "fprintf",
                "xexit",
                "FUN_0010266f"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010342d": {
                    "1": "print_usage_information",
                    "3": "display_usage",
                    "18": "print_usage",
                    "4": "print_archive_usage"
                },
                "param_1": {
                    "6": "output_to_stdout",
                    "1": "is_std_err",
                    "2": "option_flag",
                    "3": "is_verbose"
                },
                "uVar1": {
                    "1": "data",
                    "2": "archive_filename",
                    "5": "format_string",
                    "6": "version"
                },
                "pcVar2": {
                    "3": "error_message",
                    "15": "message",
                    "1": "message_pointer",
                    "5": "localized_string",
                    "2": "text"
                },
                "__stream": {
                    "5": "stream",
                    "1": "error_stream",
                    "25": "output_stream"
                },
                "FUN_0010336b": {
                    "1": "print_commands"
                },
                "FUN_0010266f": {
                    "1": "print_additional_info"
                },
                "fprintf": {
                    "2": "print_to_stream"
                },
                "DAT_0010d660": {
                    "1": "default_archive_name"
                },
                "xexit": {
                    "2": "exit_program"
                }
            }
        },
        "FUN_0010394a": {
            "entrypoint": "0x0010394a",
            "current_name": "print_usage_0010394a",
            "code": "\n\n\nvoid print_usage_0010394a(uint flag)\n\n{\n  undefined8 usage_string;\n  char *message;\n  FILE *output_stream;\n  \n  usage_string = DAT_0010d660;\n  output_stream = standard_error;\n  if (flag != 0) {\n    output_stream = standard_output;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(output_stream,message,usage_string);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  FUN_0010266f(DAT_0010d660,output_stream);\n  if (flag != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_stream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(flag ^ 1);\n}\n\n",
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "param_1": "flag",
                "uVar1": "usage_string",
                "__stream": "output_stream",
                "pcVar2": "message",
                "dcgettext": "get_translated_message",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "fprintf": "print_formatted_message",
                "xexit": "exit_program"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "dcgettext",
                "fprintf",
                "xexit",
                "FUN_0010266f"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010394a": {
                    "1": "generate_archive_index",
                    "2": "print_usage_message",
                    "18": "print_usage",
                    "4": "print_archive_usage"
                },
                "param_1": {
                    "1": "input_flag",
                    "8": "flag",
                    "3": "options",
                    "5": "option_flag",
                    "4": "option"
                },
                "uVar1": {
                    "8": "usage_string",
                    "3": "version",
                    "1": "default_caption",
                    "2": "data"
                },
                "__stream": {
                    "7": "stream",
                    "1": "file_stream",
                    "22": "output_stream"
                },
                "pcVar2": {
                    "23": "message",
                    "1": "format_string",
                    "2": "text",
                    "3": "string"
                },
                "__format": {
                    "1": "format_string"
                },
                "dcgettext": {
                    "1": "get_translated_string",
                    "2": "get_message",
                    "5": "get_translated_message"
                },
                "_stdout": {
                    "1": "stdout",
                    "3": "standard_output_stream"
                },
                "_stderr": {
                    "3": "standard_error",
                    "1": "stderr"
                },
                "fprintf": {
                    "1": "print_with_format",
                    "4": "print_formatted",
                    "3": "print_message",
                    "2": "print"
                },
                "FUN_0010266f": {
                    "13": "print_version_info",
                    "1": "update_symbol_map"
                },
                "xexit": {
                    "1": "exit",
                    "14": "exit_program"
                },
                "DAT_0010d660": {
                    "1": "default_message"
                }
            }
        },
        "FUN_00103a78": {
            "entrypoint": "0x00103a78",
            "current_name": "extract_and_print_archive_00103a78",
            "code": "\n\n\nvoid extract_and_print_archive_00103a78(undefined8 *archive_data)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *archive;\n  ulong bytes_read;\n  undefined8 error_message;\n  size_t bytes_written;\n  int *errno_location;\n  size_t remaining_bytes;\n  char *error_string;\n  ulong total_bytes_read;\n  ulong archive_size;\n  undefined stack_buffer [48];\n  ulong max_bytes_to_read;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archive = (undefined8 *)archive_data[0x1d];\n  if ((undefined8 *)archive_data[0x1d] == (undefined8 *)0x0) {\n    archive = archive_data;\n  }\n  result = (**(code **)(archive[1] + 0x1e8))(archive_data,stack_buffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*archive_data);\n    }\n    total_bytes_read = 0;\n    bfd_seek(archive_data,0,0);\n    goto LAB_00103afd;\n  }\n  archive_data = (undefined8 *)*archive_data;\n  error_string = \"internal stat error on %s\";\n  do {\n    error_message = dcgettext(0,error_string,5);\n    FUN_00107690(error_message,archive_data);\n    max_bytes_to_read = archive_size;\n    do {\n      bytes_written = fwrite(buffer,1,remaining_bytes,_stdout);\n      if (bytes_written != remaining_bytes) {\n        errno_location = __errno_location();\n        error_string = strerror(*errno_location);\n        FUN_00107690(\"stdout: %s\",error_string);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      total_bytes_read = total_bytes_read + bytes_written;\nLAB_00103afd:\n      if (max_bytes_to_read <= total_bytes_read) goto LAB_00103b91;\n      remaining_bytes = max_bytes_to_read - total_bytes_read;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,remaining_bytes,archive_data);\n    } while (remaining_bytes == bytes_read);\n    error_string = \"%s is not a valid archive\";\n    archive_data = *(undefined8 **)archive_data[0x1d];\n    archive_size = max_bytes_to_read;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "archive_data",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "archive",
                "uVar3": "bytes_read",
                "uVar4": "error_message",
                "sVar5": "bytes_written",
                "piVar6": "errno_location",
                "unaff_RBP": "remaining_bytes",
                "pcVar7": "error_string",
                "unaff_R13": "total_bytes_read",
                "unaff_R14": "archive_size",
                "auStack_b8": "stack_buffer",
                "local_88": "max_bytes_to_read"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "fwrite",
                "xmalloc",
                "dcgettext",
                "printf",
                "bfd_seek",
                "bfd_bread",
                "strerror",
                "__errno_location",
                "FUN_00107690",
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103a78": {
                    "1": "decompiled_function",
                    "2": "extract_archive_contents",
                    "4": "extract_archive_data",
                    "9": "extract_and_print_archive",
                    "3": "process_archive"
                },
                "param_1": {
                    "1": "input_data",
                    "4": "input_params",
                    "5": "archive_data",
                    "3": "arguments",
                    "2": "archive_file"
                },
                "iVar1": {
                    "19": "result",
                    "2": "status",
                    "1": "result_code"
                },
                "__ptr": {
                    "28": "buffer",
                    "3": "allocated_memory"
                },
                "puVar2": {
                    "2": "secondary_param",
                    "1": "ptr_1d",
                    "6": "archive",
                    "3": "pointer",
                    "4": "archive_ptr"
                },
                "uVar3": {
                    "1": "read_bytes",
                    "27": "bytes_read"
                },
                "uVar4": {
                    "2": "error_string",
                    "19": "error_message",
                    "4": "message",
                    "1": "translation",
                    "3": "error_msg"
                },
                "sVar5": {
                    "1": "write_result",
                    "30": "bytes_written"
                },
                "piVar6": {
                    "1": "err_num_ptr",
                    "7": "errno_location",
                    "6": "errno_ptr",
                    "2": "error_num"
                },
                "unaff_RBP": {
                    "1": "remaining_buffer_size",
                    "28": "remaining_bytes"
                },
                "pcVar7": {
                    "14": "error_string",
                    "1": "fmt_str",
                    "12": "error_message"
                },
                "unaff_R13": {
                    "2": "bytes_read",
                    "22": "total_bytes_read",
                    "1": "total_read_bytes"
                },
                "unaff_R14": {
                    "2": "total_bytes_to_read",
                    "1": "total_bytes",
                    "23": "archive_size"
                },
                "auStack_b8": {
                    "20": "stack_buffer",
                    "1": "stack_array",
                    "4": "temp_stack"
                },
                "local_88": {
                    "1": "archive_size_limit",
                    "4": "archive_size",
                    "3": "file_size",
                    "10": "max_bytes_to_read"
                },
                "DAT_0010d60c": {
                    "1": "enable_printing"
                }
            }
        },
        "FUN_00103ba8": {
            "entrypoint": "0x00103ba8",
            "current_name": "check_and_print_ar_00103ba8",
            "code": "\n\n\nvoid check_and_print_ar_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_00103ba8",
                "printf": "print_formatted_text",
                "fflush": "flush_output_stream"
            },
            "calling": [
                "FUN_00103e95"
            ],
            "called": [
                "printf",
                "fflush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103ba8": {
                    "1": "print_or_return_ar",
                    "2": "print_ar_status",
                    "10": "check_and_print_ar",
                    "4": "check_ar_status"
                },
                "__format": {
                    "2": "message",
                    "1": "message_format",
                    "19": "format_string"
                },
                "__stream": {
                    "4": "stream",
                    "1": "output_file",
                    "19": "output_stream"
                },
                "_DAT_0010d608": {
                    "1": "ar_status",
                    "2": "status"
                },
                "printf": {
                    "1": "print"
                },
                "fflush": {
                    "1": "flush_stream"
                }
            }
        },
        "FUN_00103bd1": {
            "entrypoint": "0x00103bd1",
            "current_name": "print_matching_formats_00103bd1",
            "code": "\n\n\nvoid print_matching_formats_00103bd1(long *formats)\n\n{\n  undefined8 matching_formats;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  matching_formats = DAT_0010d660;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,matching_formats);\n  for (current_format = formats; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free(formats);\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formats",
                "__format": "format_string",
                "plVar2": "current_format",
                "uVar1": "matching_formats",
                "fprintf": "print_to_stream",
                "fputc": "write_character_to_stream",
                "fflush": "flush_stream",
                "free": "deallocate_memory",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "dcgettext": "get_localized_message"
            },
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "fflush",
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103bd1": {
                    "31": "print_matching_formats"
                },
                "param_1": {
                    "1": "strings",
                    "8": "format_strings",
                    "3": "formats_array",
                    "2": "matching_formats",
                    "13": "formats"
                },
                "__format": {
                    "1": "error_message_format",
                    "4": "message_format",
                    "18": "format_string"
                },
                "plVar2": {
                    "1": "current_match",
                    "3": "current_format_string",
                    "20": "current_format"
                },
                "uVar1": {
                    "1": "data_value",
                    "2": "matching_formats_header",
                    "3": "default_format",
                    "4": "data"
                },
                "fprintf": {
                    "2": "print_to_stream",
                    "1": "print_message"
                },
                "fputc": {
                    "1": "write_character"
                },
                "fflush": {
                    "2": "flush_stream"
                },
                "free": {
                    "1": "free_memory",
                    "2": "deallocate_memory"
                },
                "__stream": {
                    "1": "output_file",
                    "4": "output_stream"
                },
                "_stdout": {
                    "3": "standard_output",
                    "1": "stdout_stream"
                },
                "__c": {
                    "2": "character"
                },
                "__ptr": {
                    "2": "pointer"
                },
                "_stderr": {
                    "2": "standard_error",
                    "1": "stderr"
                },
                "dcgettext": {
                    "1": "get_localized_message"
                }
            }
        },
        "FUN_00103c60": {
            "entrypoint": "0x00103c60",
            "current_name": "process_archives_00103c60",
            "code": "\n\n\nvoid process_archives_00103c60(char *input_archive,int flag)\n\n{\n  char format_check;\n  int *errno_location;\n  char *error_message;\n  long input_archive;\n  long archived_file;\n  undefined8 program_name;\n  long *archived_file_ptr;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)FUN_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errno_location = __errno_location();\n    input_archive = strerror(*errno_location);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive = DAT_0010d560;\n    }\n    else {\n      if (flag != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive = bfd_openr(input_archive,\"plugin\");\n      if (input_archive == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        format_check = bfd_check_format(input_archive,2);\n        if (format_check != '\\0') {\n          archived_file_ptr = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_archive,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_archive,archived_file)) {\n            *archived_file_ptr = archived_file;\n            archived_file_ptr = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(error_stream,error_message,program_name,input_archive);\n  FUN_0010315d();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103c60": "process_archives_00103c60",
                "param_1": "input_archive",
                "param_2": "flag",
                "cVar1": "format_check",
                "piVar2": "errno_location",
                "pcVar3": "error_message",
                "lVar4": "input_archive",
                "lVar5": "archived_file",
                "uVar6": "program_name",
                "plVar7": "archived_file_ptr",
                "_stderr": "error_stream",
                "_format": "format_string",
                "fprintf": "print_error",
                "dcgettext": "gettext",
                "bfd_fdopenw": "open_output_archive",
                "bfd_openr_next_archived_file": "get_next_archived_file",
                "strerror": "get_error_message",
                "xstrdup": "duplicate_string",
                "bfd_set_format": "set_output_format",
                "bfd_openr": "open_input_archive",
                "bfd_check_format": "check_file_format",
                "__errno_location": "get_error_number"
            },
            "calling": [
                "FUN_00103e95"
            ],
            "called": [
                "dcgettext",
                "bfd_fdopenw",
                "fprintf",
                "bfd_openr_next_archived_file",
                "strerror",
                "xstrdup",
                "bfd_set_format",
                "bfd_openr",
                "__errno_location",
                "FUN_001057a0",
                "bfd_check_format",
                "FUN_0010315d"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103c60": {
                    "4": "process_archive_file",
                    "1": "create_output_archive",
                    "8": "process_archives"
                },
                "param_1": {
                    "1": "error_message",
                    "2": "filename",
                    "3": "input_file",
                    "5": "input_archive_path",
                    "10": "input_archive"
                },
                "param_2": {
                    "1": "flags",
                    "15": "flag",
                    "5": "is_plugin"
                },
                "cVar1": {
                    "1": "format_valid",
                    "5": "check_format_result",
                    "4": "format_check_result",
                    "3": "is_archive"
                },
                "piVar2": {
                    "5": "error_number",
                    "1": "error_location_ptr",
                    "9": "errno_location",
                    "7": "errno_ptr",
                    "2": "error_number_ptr",
                    "3": "error_num"
                },
                "pcVar3": {
                    "29": "error_message",
                    "1": "error_message_format"
                },
                "lVar4": {
                    "7": "input_archive_handle",
                    "1": "archive_file",
                    "2": "input_file",
                    "17": "input_archive"
                },
                "lVar5": {
                    "21": "archived_file",
                    "1": "next_archived_file",
                    "6": "archived_file_handle"
                },
                "uVar6": {
                    "22": "program_name",
                    "1": "temporary_file",
                    "2": "temp_file"
                },
                "plVar7": {
                    "1": "archived_file_locator",
                    "3": "archived_files_array",
                    "4": "archived_files",
                    "2": "current_file",
                    "9": "archived_file_ptr"
                },
                "_stderr": {
                    "1": "stderr",
                    "6": "error_stream",
                    "2": "standard_error"
                },
                "DAT_0010d570": {
                    "1": "input_archive_strdup"
                },
                "DAT_0010d560": {
                    "1": "output_archive"
                },
                "DAT_0010d558": {
                    "1": "output_archive_stream"
                },
                "_format": {
                    "1": "format_string"
                },
                "fprintf": {
                    "3": "print_error",
                    "1": "print_error_message"
                },
                "dcgettext": {
                    "1": "localize_error_message",
                    "2": "gettext"
                },
                "bfd_fdopenw": {
                    "3": "open_output_archive",
                    "1": "open_output_archive_file"
                },
                "bfd_openr_next_archived_file": {
                    "1": "get_archived_files",
                    "3": "get_next_archived_file"
                },
                "strerror": {
                    "1": "get_error_string",
                    "3": "get_error_message"
                },
                "xstrdup": {
                    "4": "duplicate_string"
                },
                "bfd_set_format": {
                    "3": "set_output_format",
                    "1": "set_file_format"
                },
                "bfd_openr": {
                    "4": "open_input_archive"
                },
                "bfd_check_format": {
                    "1": "is_archive_format_valid"
                },
                "FUN_0010315d": {
                    "2": "cleanup"
                },
                "__errno_location": {
                    "1": "get_error_number"
                },
                "FUN_001057a0": {
                    "1": "process_archive"
                }
            }
        },
        "FUN_00103ddc": {
            "entrypoint": "0x00103ddc",
            "current_name": "process_data_00103ddc",
            "code": "\nvoid process_data_00103ddc(undefined8 file)\n\n{\n  FUN_001079c0(DAT_0010d578,file,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103ddc": "process_data_00103ddc",
                "param_1": "file"
            },
            "calling": [
                "FUN_00103e95"
            ],
            "called": [
                "FUN_001079c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103ddc": {
                    "1": "execute_task",
                    "2": "execute_data_processing",
                    "3": "initialize_file",
                    "10": "process_data",
                    "5": "execute_function"
                },
                "param_1": {
                    "1": "input_data",
                    "13": "file",
                    "8": "file_pointer",
                    "3": "output_file",
                    "2": "data"
                },
                "FUN_001079c0": {
                    "3": "print_to_file",
                    "1": "execute_sub_function",
                    "15": "write_to_file",
                    "2": "perform_file_operation",
                    "5": "process_data"
                },
                "param_2": {
                    "5": "strings",
                    "6": "string_array",
                    "1": "buffer_array",
                    "2": "file_names",
                    "10": "data"
                },
                "param_3": {
                    "2": "flag_1",
                    "1": "is_enabled",
                    "4": "flag",
                    "6": "flag1",
                    "5": "condition1"
                },
                "param_4": {
                    "1": "default_value",
                    "2": "additional_flag",
                    "5": "condition2",
                    "9": "flag2"
                },
                "FILE": {
                    "1": "file_pointer"
                }
            }
        },
        "FUN_00103df9": {
            "entrypoint": "0x00103df9",
            "current_name": "ensure_buffer_stack_00103df9",
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 return_value;\n  long loop_counter;\n  long new_size;\n  undefined4 *buffer_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return return_value;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return return_value;\n    }\n    new_size = DAT_0010d580 + 8;\n    buffer_size = new_size * 8;\n    DAT_0010d5a8 = recalloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)flag * -2 + 1;\n      }\n      return return_value;\n    }\n  }\n  FUN_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "return_value",
                "__size": "buffer_size",
                "lVar1": "loop_counter",
                "lVar2": "new_size",
                "puVar3": "buffer_ptr",
                "bVar4": "flag",
                "calloc": "allocate_memory",
                "realloc": "reallocate_memory"
            },
            "calling": [
                "FUN_00103e95"
            ],
            "called": [
                "realloc",
                "FUN_001033b0",
                "calloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103df9": {
                    "2": "expand_buffer_stack",
                    "26": "ensure_buffer_stack",
                    "1": "ensure_buffer_stack_size"
                },
                "in_RCX": {
                    "17": "return_value",
                    "1": "input_param",
                    "4": "result",
                    "2": "input_parameter"
                },
                "__size": {
                    "1": "element_size",
                    "20": "buffer_size",
                    "3": "size"
                },
                "lVar1": {
                    "2": "counter",
                    "24": "loop_counter",
                    "1": "loop_index"
                },
                "lVar2": {
                    "13": "new_size",
                    "1": "buffer_stack_new_capacity"
                },
                "puVar3": {
                    "1": "buffer_stack_end_ptr",
                    "10": "ptr",
                    "2": "current_ptr",
                    "4": "buffer_pointer",
                    "11": "buffer_ptr"
                },
                "bVar4": {
                    "1": "bit_variable",
                    "6": "flag",
                    "3": "byte_value",
                    "4": "counter"
                },
                "FUN_001033b0": {
                    "1": "out_of_memory_error",
                    "2": "print_error_message"
                },
                "calloc": {
                    "1": "initialize_buffer_stack",
                    "5": "allocate_memory"
                },
                "realloc": {
                    "5": "reallocate_memory",
                    "1": "resize_buffer_stack"
                },
                "DAT_0010d5a8": {
                    "2": "buffer",
                    "1": "buffer_stack"
                },
                "DAT_0010d580": {
                    "1": "buffer_size_limit"
                },
                "DAT_0010d5a0": {
                    "1": "current_buffer_index"
                }
            }
        },
        "FUN_00103e95": {
            "entrypoint": "0x00103e95",
            "current_name": "decompiled_function_00103e95",
            "code": "\n\n\nvoid decompiled_function_00103e95(void)\n\n{\n  long **pointer_to_pointer_to_long;\n  char character_variable;\n  FILE **pointer_to_pointer_to_file;\n  FILE *pointer_to_file;\n  long *pointer_to_long;\n  undefined8 undefined_var6;\n  byte *pointer_to_byte;\n  int int_var;\n  char *pointer_to_character;\n  undefined8 undefined_var11;\n  int integer_variable;\n  long *pointer_to_long;\n  size_t size_var13;\n  void *pointer_to_void;\n  char *pointer_to_character;\n  char *pointer_to_character;\n  long long_var;\n  long long_var18;\n  ulong ulong_var19;\n  uint uint_var20;\n  long long_var21;\n  undefined8 *pointer_to_undefined8;\n  undefined8 *ptr_var2;\n  uint uint_var24;\n  int integer_variable;\n  ulong ulong_var26;\n  char **pointer_to_pointer_to_character;\n  bool bool_var;\n  char **pointer_to_pointer_to_character;\n  byte byte_var;\n  long long_var31;\n  byte *pointer_to_byte;\n  byte *pointer_to_byte;\n  int *pointer_to_integer;\n  byte *pointer_to_byte;\n  uint uint_var36;\n  int int_var37;\n  char **string_pointers3;\n  byte byte_var39;\n  undefined array_var1 [16];\n  undefined undefined16_var2 [16];\n  char *local_pointer_to_character;\n  char *local_pointer_to_character;\n  long local_long_var;\n  char **string_array;\n  int local_int_var;\n  uint local_uint_var;\n  byte *local_byte_pointer;\n  get_file_status local_stat;\n  char local_char_array [200];\n  char *local_character_pointer_array [201];\n  \n  byte_var39 = 0;\n  long_var18 = 0;\n  DAT_0010d550 = -2;\n  pointer_to_pointer_to_character = local_character_pointer_array;\n  local_int_var = 0;\n  local_pointer_to_character = local_char_array;\n  local_long_var = 200;\n  local_pointer_to_character = local_pointer_to_character;\n  string_array = pointer_to_pointer_to_character;\nLAB_00103ee9:\n  *local_pointer_to_character = (char)long_var18;\n  if (local_pointer_to_character + local_long_var + -1 <= local_pointer_to_character) {\n    long_var21 = (long)local_pointer_to_character - (long)local_pointer_to_character;\n    long_var = long_var21 + 1;\n    if (local_long_var < 10000) {\n      long_var31 = local_long_var * 2;\n      local_long_var = 10000;\n      if (long_var31 < 0x2711) {\n        local_long_var = long_var31;\n      }\n      pointer_to_character = (char *)malloc(local_long_var * 9 + 7);\n      if (pointer_to_character != (char *)0x0) {\n        long_var31 = long_var * 8;\n        pointer_to_character = local_pointer_to_character;\n        pointer_to_character = pointer_to_character;\n        for (; long_var != 0; long_var = long_var + -1) {\n          *pointer_to_character = *pointer_to_character;\n          pointer_to_character = pointer_to_character + (ulong)byte_var39 * -2 + 1;\n          pointer_to_character = pointer_to_character + (ulong)byte_var39 * -2 + 1;\n        }\n        string_pointers3 = (char **)(pointer_to_character + local_long_var);\n        pointer_to_pointer_to_character = string_pointers3;\n        for (; long_var31 != 0; long_var31 = long_var31 + -1) {\n          *(undefined *)pointer_to_pointer_to_character = *(undefined *)string_array;\n          string_array = (char **)((long)string_array + (ulong)byte_var39 * -2 + 1);\n          pointer_to_pointer_to_character = (char **)((long)pointer_to_pointer_to_character + (ulong)byte_var39 * -2 + 1);\n        }\n        if (local_pointer_to_character != local_char_array) {\n          free(local_pointer_to_character);\n        }\n        local_pointer_to_character = pointer_to_character + long_var21;\n        pointer_to_pointer_to_character = string_pointers3 + long_var21;\n        local_pointer_to_character = pointer_to_character;\n        string_array = string_pointers3;\n        if (pointer_to_character + local_long_var + -1 <= local_pointer_to_character) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    FUN_001031a5();\nLAB_0010524c:\n    pointer_to_character = local_pointer_to_character;\n    if (local_pointer_to_character == local_char_array) {\n      return;\n    }\nLAB_00105265:\n    free(pointer_to_character);\n    return;\n  }\nLAB_00103fd8:\n  int_var37 = (int)long_var18;\n  if (int_var37 == 3) goto LAB_0010524c;\n  character_variable = (&DAT_0010a200)[int_var37];\n  if (character_variable != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          FUN_00103df9();\n          pointer_to_undefined8 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          undefined_var11 = FUN_001033d6(DAT_0010d590);\n          *pointer_to_undefined8 = undefined_var11;\n        }\n        FUN_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pointer_to_byte = DAT_0010d5b0;\n      pointer_to_byte = DAT_0010d5b0;\n      uint_var20 = DAT_0010d5d0;\nLAB_001040d4:\n      ulong_var19 = (ulong)uint_var20;\n      ulong_var26 = (ulong)local_uint_var;\n      bool_var = false;\n      do {\n        byte_var = (&DAT_0010ab00)[*pointer_to_byte];\n        if (*(short *)(&DAT_0010a980 + (long)(int)ulong_var19 * 2) != 0) {\n          bool_var = true;\n          ulong_var26 = ulong_var19 & 0xffffffff;\n          local_byte_pointer = pointer_to_byte;\n        }\n        while( true ) {\n          int_var = (int)ulong_var19;\n          long_var18 = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)int_var * 2) + (uint)byte_var);\n          if (int_var == *(short *)(&DAT_0010a440 + long_var18 * 2)) break;\n          ulong_var19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)int_var * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)int_var * 2)) {\n            byte_var = (&DAT_0010a7c0)[(int)(uint)byte_var];\n          }\n        }\n        pointer_to_byte = pointer_to_byte + 1;\n        ulong_var19 = (ulong)*(short *)(&DAT_0010a240 + long_var18 * 2);\n      } while (*(short *)(&DAT_0010a640 + ulong_var19 * 2) != 0xc2);\n      local_uint_var = (uint)ulong_var26;\n      pointer_to_byte = pointer_to_byte;\n      if (bool_var) {\n        DAT_0010d5b8 = local_byte_pointer;\n        DAT_0010d5c0 = local_uint_var;\n      }\nLAB_0010419f:\n      int_var = (int)*(short *)(&DAT_0010a980 + (long)(int)ulong_var19 * 2);\n      if (int_var == 0) {\n        int_var = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pointer_to_byte = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pointer_to_byte - (int)pointer_to_byte;\n      DAT_0010d588 = *pointer_to_byte;\n      DAT_0010d5b0 = pointer_to_byte;\n      DAT_0010d5c8 = pointer_to_byte;\n      *pointer_to_byte = 0;\nLAB_001041f0:\n      pointer_to_byte = DAT_0010d5c8;\n      long_var18 = DAT_0010d5a0;\n      switch(int_var) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        FUN_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      long_var18 = (long)int_var37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        int_var37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          int_var37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    int_var37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uint_var20 = character_variable + int_var37;\n    if ((0x22 < uint_var20) || (int_var37 != (char)(&DAT_0010a0a0)[(int)uint_var20])) goto LAB_001049db;\n    character_variable = (&DAT_0010a060)[(int)uint_var20];\n    long_var18 = (long)character_variable;\n    if (character_variable < '\\x01') {\n      int_var37 = -(int)character_variable;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    local_int_var = local_int_var + -1 + (uint)(local_int_var == 0);\n    pointer_to_pointer_to_character = pointer_to_pointer_to_character + 1;\n    *pointer_to_pointer_to_character = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  int_var37 = (int)(char)(&DAT_0010a020)[(int)long_var18];\n  if ((&DAT_0010a020)[(int)long_var18] == '\\0') {\n    if (local_int_var == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      FUN_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[long_var18] != -0xe) &&\n             (uint_var20 = (int)(char)(&DAT_0010a200)[long_var18] + 1, uint_var20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uint_var20] == '\\x01')) &&\n           (long_var18 = (long)(char)(&DAT_0010a060)[(int)uint_var20],\n           '\\0' < (char)(&DAT_0010a060)[(int)uint_var20])) goto LAB_00105227;\n        if (local_pointer_to_character == local_pointer_to_character) goto LAB_0010524c;\n        local_pointer_to_character = local_pointer_to_character + -1;\n        pointer_to_pointer_to_character = pointer_to_pointer_to_character + -1;\n        long_var18 = (long)*local_pointer_to_character;\n      } while( true );\n    }\n    if (local_int_var != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  undefined_var11 = DAT_0010d660;\n  pointer_to_pointer_to_character = DAT_0010d558;\n  character_variable = (&DAT_00109fe0)[int_var37];\n  string_pointers3 = (char **)pointer_to_pointer_to_character[1 - character_variable];\n  switch(int_var37) {\n  case 2:\n  case 6:\n    FUN_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    FUN_001031a5();\n    break;\n  case 0x17:\n    pointer_to_undefined8 = (undefined8 *)*pointer_to_pointer_to_character;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointer_to_character = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pointer_to_character = (char *)dcgettext(0,pointer_to_character,5);\n      fprintf(_stderr,pointer_to_character,undefined_var11);\n      FUN_0010315d();\n    }\n    else {\n      for (; pointer_to_undefined8 != (undefined8 *)0x0; pointer_to_undefined8 = (undefined8 *)pointer_to_undefined8[1]) {\n        for (ptr_var2 = (undefined8 *)DAT_0010d558[0x1f]; ptr_var2 != (undefined8 *)0x0;\n            ptr_var2 = (undefined8 *)ptr_var2[0x1e]) {\n          int_var = filename_cmp(*ptr_var2);\n          if (int_var == 0) {\n            FUN_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*pointer_to_undefined8,0);\n        undefined_var6 = DAT_0010d660;\n        undefined_var11 = *pointer_to_undefined8;\n        pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_to_character,undefined_var6,undefined_var11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    pointer_to_undefined8 = (undefined8 *)*pointer_to_pointer_to_character;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      pointer_to_character = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; pointer_to_undefined8 != (undefined8 *)0x0; pointer_to_undefined8 = (undefined8 *)pointer_to_undefined8[1]) {\n      bool_var = false;\n      pointer_to_pointer_to_character = DAT_0010d558 + 0x1f;\n      for (pointer_to_character = DAT_0010d558[0x1f]; pointer_to_character != (char *)0x0;\n          pointer_to_character = *(char **)(pointer_to_character + 0xf0)) {\n        int_var = filename_cmp();\n        if (int_var == 0) {\n          pointer_to_character = (char *)bfd_openr(*pointer_to_undefined8,0);\n          undefined_var11 = DAT_0010d660;\n          if (pointer_to_character == (char *)0x0) {\n            undefined_var6 = *pointer_to_undefined8;\n            pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pointer_to_character,undefined_var11,undefined_var6);\n            FUN_0010315d();\n          }\n          else {\n            *pointer_to_pointer_to_character = pointer_to_character;\n            bool_var = true;\n            *(undefined8 *)(pointer_to_character + 0xf0) = *(undefined8 *)(pointer_to_character + 0xf0);\n          }\n        }\n        else {\n          pointer_to_pointer_to_character = (char **)(pointer_to_character + 0xf0);\n        }\n      }\n      if (!bool_var) {\n        pointer_to_character = (char *)bfd_openr(*pointer_to_undefined8,0);\n        undefined_var6 = DAT_0010d660;\n        undefined_var11 = *pointer_to_undefined8;\n        pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_to_character,undefined_var6,undefined_var11);\n        undefined_var11 = DAT_0010d660;\n        if (pointer_to_character == (char *)0x0) {\n          undefined_var6 = *pointer_to_undefined8;\n          pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pointer_to_character,undefined_var11,undefined_var6);\n          FUN_0010315d();\n        }\n        else {\n          *pointer_to_pointer_to_character = pointer_to_character;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    pointer_to_undefined8 = (undefined8 *)*pointer_to_pointer_to_character;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointer_to_undefined8 != (undefined8 *)0x0; pointer_to_undefined8 = (undefined8 *)pointer_to_undefined8[1]) {\n      bool_var = false;\n      pointer_to_pointer_to_character = DAT_0010d558 + 0x1f;\n      for (ptr_var2 = (undefined8 *)DAT_0010d558[0x1f]; undefined_var11 = DAT_0010d660,\n          ptr_var2 != (undefined8 *)0x0; ptr_var2 = (undefined8 *)ptr_var2[0x1e]) {\n        int_var = filename_cmp(*ptr_var2,*pointer_to_undefined8);\n        if (int_var == 0) {\n          bool_var = true;\n          *pointer_to_pointer_to_character = (char *)ptr_var2[0x1e];\n        }\n        else {\n          pointer_to_pointer_to_character = (char **)(ptr_var2 + 0x1e);\n        }\n      }\n      if (!bool_var) {\n        undefined_var6 = *pointer_to_undefined8;\n        pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_to_character,undefined_var11,undefined_var6);\n        FUN_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    pointer_to_undefined8 = (undefined8 *)*pointer_to_pointer_to_character;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointer_to_undefined8 != (undefined8 *)0x0; pointer_to_undefined8 = (undefined8 *)pointer_to_undefined8[1]) {\n      pointer_to_character = (char *)bfd_openr(*pointer_to_undefined8,\"plugin\");\n      undefined_var11 = DAT_0010d660;\n      pointer_to_pointer_to_character = DAT_0010d558;\n      if (pointer_to_character == (char *)0x0) {\n        undefined_var6 = *pointer_to_undefined8;\n        pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pointer_to_character,undefined_var11,undefined_var6);\n        FUN_0010315d();\n      }\n      else {\n        *(char **)(pointer_to_character + 0xf0) = DAT_0010d558[0x1f];\n        pointer_to_pointer_to_character[0x1f] = pointer_to_character;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    pointer_to_character = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    pointer_to_character = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pointer_to_character,pointer_to_character);\n    for (pointer_to_character = DAT_0010d558[0x1f]; pointer_to_character != (char *)0x0; pointer_to_character = *(char **)(pointer_to_character + 0xf0))\n    {\n      FUN_00103ddc(pointer_to_character,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = duplicate_file_descriptor(DAT_0010d568);\n    bfd_close(pointer_to_pointer_to_character);\n    pointer_to_character = DAT_0010d570;\n    int_var = get_file_status(DAT_0010d570,&local_stat);\n    if ((int_var != 0) && (DAT_0010d558 = (char **)bfd_openw(pointer_to_character,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    FUN_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    FUN_00103c60(*pointer_to_pointer_to_character,0);\n    break;\n  case 0x1f:\n    FUN_00103c60(*pointer_to_pointer_to_character,1);\n    break;\n  case 0x20:\n    pointer_to_character = *pointer_to_pointer_to_character;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointer_to_character = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    long_var18 = FUN_00105300(pointer_to_pointer_to_character[-1],0);\n    if (long_var18 != 0) {\n      FUN_001032a8(long_var18,FUN_0010312d,pointer_to_character);\n    }\n    break;\n  case 0x21:\n    pointer_to_character = *pointer_to_pointer_to_character;\n    pointer_to_character = pointer_to_pointer_to_character[-1];\n    undefined_var11 = FUN_00105300(pointer_to_pointer_to_character[-2],0);\n    if (pointer_to_character == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(pointer_to_character,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        FUN_001032a8(undefined_var11,FUN_00103ddc,pointer_to_character);\n        bfd_close(undefined_var11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pointer_to_character = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pointer_to_character,pointer_to_character);\n    }\n    FUN_001032a8(undefined_var11,FUN_00103ddc,pointer_to_character);\n    bfd_close(undefined_var11);\n    break;\n  case 0x22:\n    string_pointers3 = (char **)*pointer_to_pointer_to_character;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    string_pointers3 = (char **)0x0;\n    break;\n  case 0x24:\n    string_pointers3 = (char **)pointer_to_pointer_to_character[-1];\n    break;\n  case 0x26:\n    string_pointers3 = (char **)malloc(0x10);\n    pointer_to_character = pointer_to_pointer_to_character[-2];\n    *string_pointers3 = *pointer_to_pointer_to_character;\n    string_pointers3[1] = pointer_to_character;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  long_var18 = (long)character_variable;\n  local_pointer_to_character = local_pointer_to_character + -long_var18;\n  pointer_to_pointer_to_character[1 - long_var18] = (char *)string_pointers3;\n  pointer_to_pointer_to_character = pointer_to_pointer_to_character + (1 - long_var18);\n  uint_var20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[int_var37] + -0x18] + (int)*local_pointer_to_character;\n  if ((uint_var20 < 0x23) && (*local_pointer_to_character == (&DAT_0010a0a0)[(int)uint_var20])) {\n    long_var18 = (long)(char)(&DAT_0010a060)[(int)uint_var20];\n  }\n  else {\n    long_var18 = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[int_var37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  int_var = ((int)pointer_to_byte - (int)DAT_0010d5c8) + -1;\n  *pointer_to_byte = DAT_0010d588;\n  pointer_to_pointer_to_long = (long **)(DAT_0010d5a8 + long_var18 * 8);\n  pointer_to_pointer_to_file = (FILE **)*pointer_to_pointer_to_long;\n  if (*(int *)(pointer_to_pointer_to_file + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)pointer_to_pointer_to_file + 0x1c);\n    *(undefined4 *)(pointer_to_pointer_to_file + 7) = 1;\n    *pointer_to_pointer_to_file = DAT_0010d590;\n  }\n  pointer_to_byte = DAT_0010d5b0;\n  pointer_to_file = pointer_to_pointer_to_file[1];\n  array_var1._8_8_ = pointer_to_file;\n  array_var1._0_8_ = pointer_to_pointer_to_file;\n  if ((byte *)((long)&pointer_to_file->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&pointer_to_file->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      array_var1 = FUN_001033b0();\n    }\n    if (*(int *)(array_var1._0_8_ + 0x34) != 0) {\n      uint_var20 = (int)((long)pointer_to_byte - (long)pointer_to_byte) - 1;\n      for (long_var18 = 0; (int)long_var18 < (int)uint_var20; long_var18 = long_var18 + 1) {\n        *(byte *)(array_var1._8_8_ + long_var18) = pointer_to_byte[long_var18];\n      }\n      pointer_to_long = *pointer_to_pointer_to_long;\n      if (*(int *)(pointer_to_long + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)pointer_to_long + 0x1c) = 0;\nLAB_0010475e:\n        pointer_to_file = DAT_0010d590;\n        if (uint_var20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            FUN_00103df9();\n            pointer_to_undefined8 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            undefined_var11 = FUN_001033d6(pointer_to_file);\n            *pointer_to_undefined8 = undefined_var11;\n          }\n          long_var18 = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            long_var18 = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          integer_variable = 1;\n          FUN_001031cf(long_var18);\n          FUN_001030ed();\n        }\n        else {\n          integer_variable = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointer_to_long = *pointer_to_pointer_to_long;\n          uint_var24 = ~uint_var20 + *(int *)(pointer_to_long + 3);\n          if (0 < (int)uint_var24) break;\n          uint_var24 = (int)DAT_0010d5b0 - (int)(void *)pointer_to_long[1];\n          if (*(int *)(pointer_to_long + 4) == 0) {\n            pointer_to_long[1] = 0;\nLAB_00104626:\n            FUN_001033b0();\n            break;\n          }\n          integer_variable = *(int *)(pointer_to_long + 3);\n          integer_variable = integer_variable;\n          if (integer_variable < 1) {\n            integer_variable = integer_variable / 8;\n          }\n          *(int *)(pointer_to_long + 3) = integer_variable + integer_variable;\n          pointer_to_void = remalloc((void *)pointer_to_long[1],(long)(integer_variable + integer_variable + 2));\n          pointer_to_long[1] = (long)pointer_to_void;\n          if (pointer_to_void == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)pointer_to_void + (long)(int)uint_var24);\n          pointer_to_long = *pointer_to_pointer_to_long;\n        }\n        if (0x2000 < (int)uint_var24) {\n          uint_var24 = 0x2000;\n        }\n        ulong_var26 = (ulong)uint_var24;\n        if (*(int *)((long)pointer_to_long + 0x24) == 0) {\n          pointer_to_integer = __errno_location();\n          ulong_var26 = (ulong)(int)uint_var24;\n          ulong_var19 = (ulong)(int)uint_var20;\n          *pointer_to_integer = 0;\n          goto LAB_001046c7;\n        }\n        ulong_var19 = 0;\n        pointer_to_integer = (int *)(long)(int)uint_var20;\n        do {\n          integer_variable = getc(DAT_0010d590);\n          uint_var36 = (uint)ulong_var19;\n          if (integer_variable == -1) {\n            integer_variable = ferror(DAT_0010d590);\n            uint_var24 = uint_var36;\n            if (integer_variable != 0) {\n              do {\n                pointer_to_character = \"input in flex scanner failed\";\n                FUN_001033b0();\n                do {\n                  *pointer_to_integer = 0;\n                  clearerr((FILE *)pointer_to_character);\nLAB_001046c7:\n                  size_var13 = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + ulong_var19),1,ulong_var26,DAT_0010d590);\n                  pointer_to_character = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)size_var13;\n                  uint_var24 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (integer_variable = ferror(DAT_0010d590), uint_var24 = DAT_0010d598, integer_variable == 0))\n                  goto LAB_00104738;\n                } while (*pointer_to_integer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (integer_variable == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uint_var20 +\n             (long)(int)uint_var36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uint_var24 = uint_var36 + 1;\n            break;\n          }\n          ulong_var19 = (ulong)(uint_var36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)pointer_to_integer) =\n               (char)integer_variable;\n          pointer_to_integer = (int *)((long)pointer_to_integer + 1);\n        } while (uint_var24 != uint_var36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uint_var24;\n        uint_var24 = DAT_0010d598;\n        integer_variable = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uint_var24 == 0) goto LAB_0010475e;\n      }\n      pointer_to_long = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      long_var18 = *pointer_to_long;\n      uint_var20 = uint_var20 + DAT_0010d598;\n      if (*(int *)(long_var18 + 0x18) < (int)uint_var20) {\n        integer_variable = ((int)DAT_0010d598 >> 1) + uint_var20;\n        pointer_to_void = remalloc(*(void **)(long_var18 + 8),(long)integer_variable);\n        *(void **)(long_var18 + 8) = pointer_to_void;\n        undefined16_var2._8_8_ = pointer_to_long;\n        undefined16_var2._0_8_ = *pointer_to_long;\n        if (*(long *)(*pointer_to_long + 8) == 0) {\n          undefined16_var2 = FUN_001033b0();\n        }\n        pointer_to_long = undefined16_var2._8_8_;\n        *(int *)(undefined16_var2._0_8_ + 0x18) = integer_variable + -2;\n      }\n      DAT_0010d598 = uint_var20;\n      *(undefined *)(*(long *)(*pointer_to_long + 8) + (long)(int)uint_var20) = 0;\n      *(undefined *)(*(long *)(*pointer_to_long + 8) + 1 + (long)(int)uint_var20) = 0;\n      pointer_to_byte = *(byte **)(*pointer_to_long + 8);\n      DAT_0010d5c8 = pointer_to_byte;\n      if (integer_variable == 1) goto LAB_001048a4;\n      if (integer_variable == 2) goto LAB_001048ca;\n      pointer_to_byte = pointer_to_byte + int_var;\n      DAT_0010d5b0 = pointer_to_byte;\n      uint_var20 = FUN_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)pointer_to_byte - (long)pointer_to_byte == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pointer_to_byte = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pointer_to_byte;\n    ulong_var19 = FUN_0010300e();\n    pointer_to_byte = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pointer_to_byte = pointer_to_byte + int_var;\n  DAT_0010d5b0 = pointer_to_byte;\n  ulong_var19 = FUN_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)ulong_var19 * 2) != 0) {\n    DAT_0010d5b8 = pointer_to_byte;\n    DAT_0010d5c0 = (uint)ulong_var19;\n  }\n  ulong_var26 = ulong_var19 & 0xffffffff;\n  while( true ) {\n    int_var = (int)ulong_var26;\n    if (int_var == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)int_var * 2) + 1) * 2)) break;\n    ulong_var26 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)int_var * 2);\n  }\n  uint_var20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)int_var * 2) + 1) * 2);\n  pointer_to_byte = pointer_to_byte;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)int_var * 2) + 1) * 2) == 0)\n     || (uint_var20 == 0xb0)) goto LAB_0010419f;\n  pointer_to_byte = pointer_to_byte + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  int_var = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pointer_to_byte = DAT_0010d588;\n  ulong_var19 = (ulong)DAT_0010d5c0;\n  pointer_to_byte = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  pointer_to_pointer_to_character = pointer_to_pointer_to_character + 1;\n  local_int_var = 3;\n  *pointer_to_pointer_to_character = DAT_0010d548;\nLAB_001049d1:\n  local_pointer_to_character = local_pointer_to_character + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "renaming": {
                "FUN_00103e95": "decompiled_function_00103e95",
                "ppFVar3": "pointer_to_pointer_to_file",
                "pFVar4": "pointer_to_file",
                "puVar22": "pointer_to_undefined8",
                "plVar5": "pointer_to_long",
                "pvVar14": "pointer_to_void",
                "pcVar15": "pointer_to_character",
                "pcVar16": "pointer_to_character",
                "lVar17": "long_var",
                "lVar18": "long_var18",
                "uVar19": "ulong_var19",
                "uVar20": "uint_var20",
                "lVar21": "long_var21",
                "puVar23": "ptr_var2",
                "ppcVar27": "pointer_to_pointer_to_character",
                "bVar28": "bool_var",
                "ppcVar29": "pointer_to_pointer_to_character",
                "bVar30": "byte_var",
                "lVar31": "long_var31",
                "pbVar32": "pointer_to_byte",
                "pbVar33": "pointer_to_byte",
                "piVar34": "pointer_to_integer",
                "pbVar35": "pointer_to_byte",
                "auVar40": "array_var1",
                "auVar41": "undefined16_var2",
                "local_828": "local_pointer_to_character",
                "local_820": "local_pointer_to_character",
                "local_818": "local_long_var",
                "local_810": "string_array",
                "local_800": "local_int_var",
                "local_7fc": "local_uint_var",
                "local_7f8": "local_byte_pointer",
                "local_7d0": "local_stat",
                "local_740": "local_char_array",
                "local_678": "local_character_pointer_array",
                "pplVar1": "pointer_to_pointer_to_long",
                "cVar2": "character_variable",
                "uVar6": "undefined_var6",
                "pbVar7": "pointer_to_byte",
                "iVar8": "int_var",
                "pcVar10": "pointer_to_character",
                "uVar11": "undefined_var11",
                "iVar9": "integer_variable",
                "plVar12": "pointer_to_long",
                "sVar13": "size_var13",
                "uVar24": "uint_var24",
                "iVar25": "integer_variable",
                "uVar26": "ulong_var26",
                "iVar37": "int_var37",
                "uVar36": "uint_var36",
                "bVar39": "byte_var39",
                "lVar12": "long_var",
                "uVar22": "undefined_var1",
                "uVar23": "undefined_var2",
                "pcVar38": "char_pointer3",
                "ppcVar38": "string_pointers3",
                "clearerr": "clear_error",
                "fopen": "open_file",
                "printf": "print",
                "malloc": "allocate_memory",
                "unlink": "delete_file",
                "bfd_openr": "open_bfd_read",
                "bfd_openw": "open_bfd_write",
                "bfd_close": "close_bfd",
                "fread": "read_data",
                "filename_cmp": "compare_file_name",
                "realloc": "reallocate_memory",
                "dup": "duplicate_file_descriptor",
                "xstrdup": "duplicate_string",
                "bfd_cache_close": "close_bfd_cache",
                "bfd_set_format": "set_bfd_format",
                "__errno_location": "get_errno_location",
                "getc": "read_character",
                "free": "deallocate_memory",
                "fwrite": "write_data",
                "fclose": "close_file",
                "dcgettext": "get_translation",
                "fprintf": "print_formatted",
                "ferror": "get_error",
                "stat": "get_file_status"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "clearerr",
                "fopen",
                "FUN_0010300e",
                "printf",
                "malloc",
                "unlink",
                "bfd_openr",
                "FUN_00107740",
                "FUN_00103ddc",
                "bfd_openw",
                "FUN_00105bc0",
                "FUN_001031a5",
                "bfd_close",
                "FUN_00103ba8",
                "FUN_00103c60",
                "FUN_001033b0",
                "FUN_001033d6",
                "FUN_001032a8",
                "fread",
                "FUN_00105300",
                "FUN_001030ed",
                "FUN_001031cf",
                "filename_cmp",
                "realloc",
                "dup",
                "xstrdup",
                "bfd_cache_close",
                "bfd_set_format",
                "__errno_location",
                "FUN_0010315d",
                "getc",
                "free",
                "fwrite",
                "fclose",
                "dcgettext",
                "fprintf",
                "FUN_0010312d",
                "ferror",
                "stat",
                "FUN_00103df9"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103e95": {
                    "1": "extract_function",
                    "2": "decompile_and_improve",
                    "3": "decompiled_function"
                },
                "ppFVar3": {
                    "2": "file_pointer",
                    "1": "file_pointers",
                    "4": "pointer_to_pointer_to_file"
                },
                "pFVar4": {
                    "2": "file",
                    "6": "pointer_to_file",
                    "1": "file_var",
                    "5": "file_pointer",
                    "3": "pointer_file_var4"
                },
                "puVar22": {
                    "1": "pointer_to_unsigned_variable22",
                    "2": "pointer_to_undefined8"
                },
                "plVar5": {
                    "1": "buffer_ptr",
                    "2": "pointer_long_var5",
                    "7": "pointer_to_long"
                },
                "pvVar14": {
                    "1": "pointer2",
                    "4": "void_ptr",
                    "2": "pointer_void_var14",
                    "5": "pointer_to_void",
                    "3": "void_pointer"
                },
                "pcVar15": {
                    "1": "pointer_to_character_variable_15",
                    "4": "pointer_to_character",
                    "3": "pointer_char_var15"
                },
                "pcVar16": {
                    "1": "new_string",
                    "4": "pointer_to_character",
                    "3": "pointer_char_var16"
                },
                "lVar17": {
                    "4": "long_var17",
                    "1": "temporary_long_variable"
                },
                "lVar18": {
                    "1": "long_variable18",
                    "4": "long_var18",
                    "3": "index",
                    "2": "long_var"
                },
                "uVar19": {
                    "1": "value19",
                    "2": "var19",
                    "3": "ulong_var19"
                },
                "uVar20": {
                    "1": "uint_var1",
                    "2": "uint_var",
                    "3": "uint_var20"
                },
                "lVar21": {
                    "1": "temp_loop_index",
                    "4": "long_var21",
                    "3": "long_var3"
                },
                "puVar23": {
                    "1": "pointer_to_undefined8_2"
                },
                "ppcVar27": {
                    "1": "pointer_to_pointer_to_character27",
                    "3": "pointer_to_pointer_to_character"
                },
                "bVar28": {
                    "6": "bool_var",
                    "1": "found_flag",
                    "5": "bool_var28"
                },
                "ppcVar29": {
                    "1": "pointer_to_pointer_to_character_variable_29",
                    "3": "pointer_to_pointer_to_character"
                },
                "bVar30": {
                    "1": "boolean2",
                    "3": "byte_variable",
                    "5": "byte_var"
                },
                "lVar31": {
                    "1": "long_variable_31",
                    "3": "long_variable",
                    "2": "long_var5",
                    "4": "long_var31"
                },
                "pbVar32": {
                    "1": "byte_pointer5",
                    "3": "pointer_byte_var32",
                    "4": "pointer_to_byte",
                    "2": "byte_pointer"
                },
                "pbVar33": {
                    "1": "ptr_byte2",
                    "4": "pointer_to_byte",
                    "3": "pointer_byte_var33"
                },
                "piVar34": {
                    "1": "ptr_int_var",
                    "4": "pointer_to_integer",
                    "2": "int_pointer"
                },
                "pbVar35": {
                    "1": "byte_ptr4",
                    "4": "pointer_to_byte",
                    "3": "pointer_byte_var35"
                },
                "pbVar37": {
                    "1": "pointer_byte_var37"
                },
                "iVar38": {
                    "1": "int_var"
                },
                "pbVar39": {
                    "1": "pointer_byte_var39",
                    "2": "byte_var"
                },
                "auVar40": {
                    "1": "undefined_array_var40"
                },
                "auVar41": {
                    "2": "undefined16_var2",
                    "1": "au_var41"
                },
                "local_828": {
                    "1": "pointer_to_character_variable_828",
                    "2": "local_pointer_char_var828"
                },
                "local_820": {
                    "1": "local_array_start",
                    "2": "local_pointer_char_var820"
                },
                "local_818": {
                    "1": "local_long818",
                    "2": "long_var6",
                    "3": "local_long"
                },
                "local_810": {
                    "1": "pointer_to_pointer_to_character",
                    "2": "string_array"
                },
                "local_800": {
                    "1": "integer_variable_800",
                    "2": "loop_counter",
                    "3": "local_int_var"
                },
                "local_7fc": {
                    "1": "uint_var3",
                    "2": "local_unsigned_var",
                    "3": "local_uint_var"
                },
                "local_7f8": {
                    "3": "local_pointer_byte_var7f8",
                    "1": "local_byte_ptr1",
                    "2": "local_pointer_to_byte",
                    "5": "local_byte_pointer"
                },
                "local_7d0": {
                    "1": "stat_info",
                    "4": "stat_struct",
                    "3": "local_stat_struct"
                },
                "local_740": {
                    "2": "local_char_var740",
                    "1": "character_array_variable_740",
                    "3": "local_char_array"
                },
                "local_678": {
                    "1": "local_string_array",
                    "2": "string_array"
                },
                "pplVar1": {
                    "1": "binary_data",
                    "2": "pointer_to_pointer_to_long"
                },
                "cVar2": {
                    "2": "char_var",
                    "1": "temporary_char",
                    "3": "char_var2",
                    "6": "character_variable"
                },
                "uVar6": {
                    "2": "undefined8_var6",
                    "1": "temp_var"
                },
                "pbVar7": {
                    "3": "byte_pointer",
                    "1": "byte_var",
                    "6": "pointer_to_byte"
                },
                "iVar8": {
                    "1": "var8",
                    "2": "counter",
                    "4": "integer_variable"
                },
                "pcVar10": {
                    "2": "string",
                    "1": "temporary_char_pointer",
                    "3": "pointer_char_var10",
                    "5": "pointer_to_character"
                },
                "uVar11": {
                    "2": "unsigned_var2",
                    "1": "unsigned_variable11"
                },
                "iVar9": {
                    "1": "index2",
                    "2": "int_var9",
                    "3": "integer_variable"
                },
                "plVar12": {
                    "1": "dynamic_memory1",
                    "4": "pointer_to_long",
                    "2": "pointer_long_var12"
                },
                "sVar13": {
                    "1": "s_var13",
                    "4": "size_variable",
                    "2": "size_t_variable"
                },
                "uVar24": {
                    "2": "uint_var",
                    "1": "action",
                    "3": "uint_var24"
                },
                "iVar25": {
                    "2": "int_var2",
                    "1": "value25",
                    "3": "integer_variable"
                },
                "uVar26": {
                    "1": "value26",
                    "2": "var26"
                },
                "pbVar36": {
                    "1": "pointer_to_byte"
                },
                "iVar37": {
                    "1": "value37",
                    "2": "integer_variable"
                },
                "uVar36": {
                    "3": "uint_var36",
                    "1": "index2"
                },
                "bVar39": {
                    "4": "byte_var39",
                    "1": "b_var39"
                },
                "piVar10": {
                    "1": "int_pointer"
                },
                "pcVar11": {
                    "1": "char_var"
                },
                "lVar12": {
                    "1": "long_var"
                },
                "uVar22": {
                    "1": "undefined_var1"
                },
                "uVar23": {
                    "1": "temporary_unsigned_long"
                },
                "pcVar38": {
                    "1": "char_pointer3"
                },
                "ppcVar38": {
                    "1": "pointer_to_pointer_to_character"
                },
                "lVar29": {
                    "1": "long_variable29"
                },
                "uVar25": {
                    "1": "unsigned_var6"
                },
                "pbVar38": {
                    "1": "pointer_byte5"
                },
                "DAT_0010d550": {
                    "1": "data_flag"
                },
                "ppVar3": {
                    "1": "file_pointer_array"
                },
                "clearerr": {
                    "1": "clear_error"
                },
                "fopen": {
                    "1": "open_file"
                },
                "FUN_0010300e": {
                    "1": "get_character"
                },
                "printf": {
                    "1": "print"
                },
                "malloc": {
                    "1": "allocate_memory"
                },
                "unlink": {
                    "1": "delete_file"
                },
                "bfd_openr": {
                    "1": "open_bfd_read"
                },
                "FUN_00107740": {
                    "1": "extract_data"
                },
                "FUN_00103ddc": {
                    "1": "write_data"
                },
                "bfd_openw": {
                    "1": "open_bfd_write"
                },
                "FUN_00105bc0": {
                    "1": "process_data"
                },
                "FUN_001031a5": {
                    "1": "handle_error"
                },
                "bfd_close": {
                    "1": "close_bfd"
                },
                "FUN_00103ba8": {
                    "1": "calculate"
                },
                "FUN_00103c60": {
                    "1": "execute_action"
                },
                "FUN_001033b0": {
                    "1": "handle_error"
                },
                "FUN_001033d6": {
                    "1": "convert"
                },
                "FUN_001032a8": {
                    "1": "process_data"
                },
                "fread": {
                    "1": "read_data"
                },
                "FUN_00105300": {
                    "1": "search_file"
                },
                "FUN_001030ed": {
                    "1": "initialize"
                },
                "FUN_001031cf": {
                    "1": "handle_error"
                },
                "filename_cmp": {
                    "1": "compare_file_name"
                },
                "realloc": {
                    "1": "reallocate_memory"
                },
                "dup": {
                    "1": "duplicate_file_descriptor"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                },
                "bfd_cache_close": {
                    "1": "close_bfd_cache"
                },
                "bfd_set_format": {
                    "1": "set_bfd_format"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "FUN_0010315d": {
                    "1": "handle_error"
                },
                "getc": {
                    "1": "read_character"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "fwrite": {
                    "1": "write_data"
                },
                "fclose": {
                    "1": "close_file"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "FUN_0010312d": {
                    "1": "handle_error"
                },
                "ferror": {
                    "1": "get_error"
                },
                "stat": {
                    "1": "get_file_status"
                },
                "FUN_00103df9": {
                    "1": "handle_error"
                },
                "local_628": {
                    "1": "loop_counter"
                },
                "lVar36": {
                    "1": "temporary_long_variable"
                },
                "local_640": {
                    "1": "temporary_char_array"
                },
                "local_620": {
                    "1": "temporary_char_pointer"
                },
                "ppFVar20": {
                    "1": "double_pointer_to_file_pointer"
                },
                "pFVar21": {
                    "1": "file_pointer"
                },
                "plVar22": {
                    "1": "pointer_to_long"
                },
                "bVar24": {
                    "1": "temporary_unsigned_char"
                },
                "auVar25": {
                    "1": "temporary_unsigned_big_int16_array"
                },
                "auVar26": {
                    "1": "temporary_unsigned_big_int16_array"
                },
                "local_8178": {
                    "1": "temporary_char_array"
                },
                "local_154": {
                    "1": "temporary_char_pointer"
                },
                "local_808": {
                    "1": "temporary_char_array"
                },
                "local_830": {
                    "1": "temporary_char_array"
                },
                "local_260": {
                    "1": "temporary_int_array"
                },
                "uStack1024": {
                    "1": "temporary_uint"
                },
                "local_416": {
                    "1": "temporary_stat_struct"
                },
                "local_6408": {
                    "1": "temporary_char_array"
                },
                "local_7376": {
                    "1": "temporary_char_pointer_array"
                },
                "local_2544": {
                    "1": "temporary_int_array"
                },
                "local_400": {
                    "1": "temporary_stat_struct"
                },
                "local_4840": {
                    "1": "temporary_char_array"
                },
                "local_4872": {
                    "1": "temporary_char_array"
                },
                "local_6178": {
                    "1": "temporary_char_array"
                },
                "local_6864": {
                    "1": "temporary_char_pointer_array"
                },
                "local_7728": {
                    "1": "temporary_char_pointer_array"
                },
                "uStack15856": {
                    "1": "temporary_uint"
                },
                "local_182": {
                    "1": "temporary_char_pointer"
                },
                "ppFVar34": {
                    "1": "double_pointer_to_file_pointer"
                },
                "pFVar35": {
                    "1": "file_pointer"
                },
                "plVar36": {
                    "1": "pointer_to_long"
                },
                "uVar37": {
                    "1": "temporary_unsigned_long"
                },
                "bVar38": {
                    "1": "temporary_unsigned_char"
                },
                "auVar39": {
                    "1": "temporary_unsigned_big_int16_array"
                },
                "ppvVar3": {
                    "1": "double_pointer_to_void_pointer"
                },
                "ppvVar4": {
                    "1": "double_pointer_to_void_pointer"
                },
                "local_8264": {
                    "1": "temporary_char_array"
                },
                "param_1": {
                    "1": "void"
                },
                "__stream": {
                    "1": "file_stream"
                },
                "__filename": {
                    "1": "filename"
                },
                "__modes": {
                    "1": "file_mode"
                },
                "ptrVar1": {
                    "1": "pointer_var1"
                },
                "pbVar40": {
                    "1": "byte_var"
                },
                "DAT_0010d548": {
                    "1": "data_string"
                },
                "DAT_0010d540": {
                    "1": "data_var1"
                },
                "DAT_0010d5d0": {
                    "1": "data_var2"
                },
                "DAT_0010d590": {
                    "1": "global_file1"
                },
                "DAT_0010d538": {
                    "1": "global_file2"
                },
                "DAT_0010d5a8": {
                    "1": "global_pointer1"
                },
                "DAT_0010d5a0": {
                    "1": "global_pointer2"
                },
                "DAT_0010d588": {
                    "1": "global_value1"
                },
                "DAT_0010d5b0": {
                    "1": "global_value2"
                },
                "DAT_0010d5c8": {
                    "1": "global_pointer3"
                },
                "DAT_0010d560": {
                    "1": "file_string1"
                },
                "DAT_0010d570": {
                    "1": "file_string2"
                },
                "DAT_0010d568": {
                    "1": "file_descriptor"
                },
                "DAT_0010d578": {
                    "1": "file_stream"
                },
                "DAT_0010d598": {
                    "1": "file_flags"
                },
                "uVar13": {
                    "1": "unintialized_variable"
                },
                "pData": {
                    "1": "data_pointer"
                },
                "puVar15": {
                    "1": "pointer_variable1"
                },
                "puVar16": {
                    "1": "pointer_variable2"
                },
                "lVar10": {
                    "1": "long_variable10"
                },
                "ppvar10": {
                    "1": "pointer_to_pointer"
                },
                "pcVar28": {
                    "1": "temporary_string4"
                },
                "piVar29": {
                    "1": "integer_pointer"
                },
                "iVar10": {
                    "1": "integer_variable"
                },
                "prng": {
                    "1": "random_number_generator"
                },
                "iVar13": {
                    "1": "integer_variable2"
                },
                "pcVar14": {
                    "1": "temporary_string5"
                },
                "pbVar15": {
                    "1": "temporary_byte_array"
                },
                "ppVar16": {
                    "1": "pointer_to_pointer2"
                },
                "pbVar17": {
                    "1": "temporary_byte_array2"
                },
                "plVar19": {
                    "1": "pointer_to_long_variable2"
                },
                "lVar20": {
                    "1": "loop_index3"
                },
                "pbVar21": {
                    "1": "temporary_byte_array3"
                },
                "ppVar22": {
                    "1": "pointer_to_pointer3"
                },
                "puVar24": {
                    "1": "pointer_to_unsigned_int_variable2"
                },
                "puVar25": {
                    "1": "pointer_to_unsigned_int_variable3"
                },
                "lVar26": {
                    "1": "loop_index4"
                },
                "puVar27": {
                    "1": "pointer_to_unsigned_int_variable4"
                },
                "plVar32": {
                    "1": "pointer_to_long_variable3"
                },
                "puVar34": {
                    "1": "pointer_to_unsigned_int_variable5"
                },
                "uVar35": {
                    "1": "temp_variable4"
                },
                "puVar38": {
                    "1": "pointer_to_unsigned_int_variable6"
                },
                "auVar40 [16]": {
                    "1": "undefined_au_var40"
                },
                "auVar41 [16]": {
                    "1": "undefined_au_var41"
                },
                "local_740 [200]": {
                    "1": "local_char_array_var740"
                },
                "local_678 [201]": {
                    "1": "local_char_pointer_array_var678"
                }
            }
        },
        "FUN_001052a0": {
            "entrypoint": "0x001052a0",
            "current_name": "get_file_information_001052a0",
            "code": "\nlong get_file_information_001052a0(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  get_file_info file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = get_file_info(file_path,&file_stat);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00107920(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00107920(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_type & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00107920(error_message,file_path);\n    }\n    else if ((file_type & 0xf000) == 0x8000) {\n      if (-1 < file_size) {\n        return file_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00107920(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00107920(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_001052a0": "get_file_information_001052a0",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "errno_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stat",
                "__errno_location": "get_error_number",
                "strerror": "get_error_reason",
                "dcgettext": "get_message",
                "sStack_a8.st_mode": "file_type",
                "sStack_a8.st_size": "file_size",
                "stat": "get_file_info"
            },
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "called": [
                "dcgettext",
                "stat",
                "FUN_00107920",
                "FUN_001025a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001052a0": {
                    "11": "get_file_information",
                    "8": "get_file_info",
                    "2": "check_file_status",
                    "1": "check_file_info",
                    "6": "check_file"
                },
                "param_1": {
                    "8": "filename",
                    "23": "file_path"
                },
                "iVar1": {
                    "1": "status_code",
                    "7": "result",
                    "18": "status",
                    "3": "stat_result"
                },
                "piVar2": {
                    "1": "error_ptr",
                    "4": "errno_location",
                    "9": "errno_ptr",
                    "3": "error_pointer",
                    "2": "err_num_ptr"
                },
                "uVar3": {
                    "2": "warning_message",
                    "1": "error",
                    "14": "error_message",
                    "5": "message",
                    "3": "error_msg"
                },
                "pcVar4": {
                    "1": "errormsg",
                    "2": "str_error",
                    "4": "error_description",
                    "12": "error_reason"
                },
                "sStack_a8": {
                    "16": "file_stat",
                    "5": "file_info",
                    "2": "file_status",
                    "8": "file_stats"
                },
                "__errno_location": {
                    "2": "get_error_number",
                    "1": "get_error_code"
                },
                "strerror": {
                    "3": "get_error_reason"
                },
                "dcgettext": {
                    "1": "translate",
                    "2": "get_message"
                },
                "sStack_a8.st_mode": {
                    "1": "file_mode"
                },
                "sStack_a8.st_size": {
                    "1": "file_size"
                },
                "FUN_00107920": {
                    "2": "print_warning"
                },
                "stat": {
                    "1": "get_file_info"
                }
            }
        },
        "FUN_00105300": {
            "entrypoint": "0x00105300",
            "current_name": "extract_archived_files_00105300",
            "code": "\n\n\nundefined8 * extract_archived_files_00105300(char *filename,undefined8 *archived_files)\n\n{\n  long *archived_file_ptr;\n  char *error_message;\n  byte is_thin_library;\n  char format_check_result;\n  int status;\n  undefined8 error_message;\n  undefined8 error_message;\n  int *errno_ptr;\n  long archived_file;\n  undefined8 *conversion_result;\n  undefined8 local_buffer;\n  get_file_status file_stats;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  status = get_file_status(filename,&file_stats);\n  error_message = DAT_0010d618;\n  if (status == 0) goto LAB_001053be;\n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      print_perror_message(filename);\n      FUN_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (archived_files != (undefined8 *)0x0)) {\n      conversion_result = (undefined8 *)FUN_00102710();\n      return conversion_result;\n    }\n    archived_files = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((archived_files != (undefined8 *)0x0) && (format_check_result = bfd_set_format(archived_files,2), format_check_result != '\\0')) &&\n       (format_check_result = bfd_close(archived_files), format_check_result != '\\0')) {\n      error_message = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  FUN_00107c10(filename);\n  do {\n    is_thin_library = *(byte *)((long)archived_files + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        error_message = *archived_files;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(error_message,error_message);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_library == 0) {\n      error_message = *archived_files;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(error_message,error_message);\nLAB_001027cb:\n      FUN_00107c20(filename);\n      status = bfd_get_error();\n      if (status == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(local_buffer);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file_ptr = archived_files + 0x1e;\n      for (archived_file = bfd_openr_next_archived_file(archived_files,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archived_files,archived_file)) {\n        *archived_file_ptr = archived_file;\n        archived_file_ptr = (long *)(archived_file + 0xf0);\n      }\n      *archived_file_ptr = 0;\n      status = bfd_get_error();\n      if (status == 9) {\n        return archived_files;\n      }\n      do {\n        FUN_00107c10(filename);\nLAB_00102826:\n        error_message = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(error_message,filename);\n        error_message = filename;\nLAB_001053be:\n        DAT_0010d618 = error_message;\n        archived_files = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (archived_files == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(archived_files,2,&local_buffer);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archived_file = bfd_openr_next_archived_file(archived_files,0), archived_file == 0));\n  } while( true );\n}\n\n",
            "renaming": {
                "param_1": "filename",
                "param_2": "archived_files",
                "plVar1": "archived_file_ptr",
                "pcVar2": "error_message",
                "bVar3": "is_thin_library",
                "cVar4": "format_check_result",
                "iVar5": "status",
                "uVar6": "error_message",
                "uVar7": "error_message",
                "piVar8": "errno_ptr",
                "lVar9": "archived_file",
                "puVar10": "conversion_result",
                "local_b0": "local_buffer",
                "local_a8": "file_stats",
                "FUN_00105300": "extract_archived_files_00105300",
                "__errno_location": "get_errno_location",
                "fprintf": "print_error_message",
                "perror": "print_perror_message",
                "bfd_get_error": "get_bfd_error",
                "dcgettext": "translate_message",
                "bfd_set_error": "set_bfd_error",
                "bfd_close": "close_bfd",
                "bfd_set_format": "set_bfd_format",
                "xexit": "exit_program",
                "stat": "get_file_status",
                "bfd_openw": "open_bfd_write_mode"
            },
            "calling": [
                "FUN_00105db0",
                "FUN_00107650",
                "FUN_00103e95"
            ],
            "called": [
                "FUN_00107c10",
                "bfd_openr_next_archived_file",
                "bfd_check_format_matches",
                "bfd_set_format",
                "FUN_00103bd1",
                "bfd_openr",
                "perror",
                "__errno_location",
                "FUN_0010315d",
                "FUN_00107c20",
                "dcgettext",
                "bfd_openw",
                "fprintf",
                "bfd_set_error",
                "bfd_close",
                "xexit",
                "stat",
                "FUN_00102710",
                "FUN_00107690",
                "bfd_get_error",
                "FUN_00107920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "archive_file_path",
                    "6": "file_path",
                    "3": "input_file_name",
                    "13": "filename",
                    "2": "library_path"
                },
                "param_2": {
                    "1": "output_ptr",
                    "2": "output_file_ptr",
                    "7": "output",
                    "3": "result"
                },
                "plVar1": {
                    "1": "file_pointer",
                    "2": "file_ptr_array",
                    "4": "archived_file_pointer",
                    "8": "archived_file_ptr"
                },
                "pcVar2": {
                    "1": "plugin_ptr",
                    "8": "plugin_name",
                    "5": "plugin",
                    "10": "error_message",
                    "2": "default_plugin_name"
                },
                "bVar3": {
                    "3": "convert_flag",
                    "1": "bit_flag",
                    "6": "is_thin_format",
                    "2": "thin_library_flag"
                },
                "cVar4": {
                    "1": "check_format_flag",
                    "3": "result",
                    "12": "format_check_result",
                    "2": "check_result",
                    "4": "conversion_error"
                },
                "iVar5": {
                    "6": "result",
                    "13": "status",
                    "12": "stat_result"
                },
                "uVar6": {
                    "4": "error_string",
                    "1": "format_result",
                    "8": "error_message",
                    "2": "error_message_1"
                },
                "uVar7": {
                    "1": "error_argument",
                    "6": "error_message",
                    "2": "library_name"
                },
                "piVar8": {
                    "2": "error_number",
                    "1": "error_number_ptr",
                    "9": "errno_location",
                    "11": "errno_ptr",
                    "4": "error_code"
                },
                "lVar9": {
                    "1": "archive_file",
                    "9": "archived_file",
                    "3": "file_ptr",
                    "5": "file_descriptor",
                    "2": "next_archived_file"
                },
                "puVar10": {
                    "1": "alloc_ptr",
                    "2": "memory_allocation",
                    "3": "converted_library"
                },
                "local_b0": {
                    "1": "flags",
                    "2": "buffer"
                },
                "local_a8": {
                    "4": "file_stat",
                    "10": "file_stats",
                    "1": "file_metadata",
                    "5": "stat_buffer"
                },
                "FUN_00105300": {
                    "2": "decompile_and_improve",
                    "1": "convert_library_format",
                    "4": "extract_archived_files"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "perror": {
                    "1": "print_perror_message"
                },
                " FUN_0010315d": {
                    "1": "cleanup_and_return_null"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "FUN_00103bd1": {
                    "1": "cleanup_and_return"
                },
                "FUN_00102710": {
                    "1": "create_default_plugin"
                },
                "FUN_00107690": {
                    "1": "print_conversion_error"
                },
                "FUN_00107c10": {
                    "1": "cleanup"
                },
                "FUN_00107c20": {
                    "1": "cleanup_and_print_error"
                },
                "dcgettext": {
                    "1": "translate_message"
                },
                "bfd_set_error": {
                    "1": "set_bfd_error"
                },
                "bfd_close": {
                    "1": "close_bfd"
                },
                "bfd_set_format": {
                    "1": "set_bfd_format"
                },
                "xexit": {
                    "1": "exit_program"
                },
                "stat": {
                    "1": "get_file_status"
                },
                "bfd_openw": {
                    "1": "open_bfd_write_mode"
                },
                "DAT_0010d5f0": {
                    "1": "default_bfd_format"
                },
                "DAT_0010d618": {
                    "1": "current_bfd_format"
                },
                "DAT_0010d604": {
                    "1": "is_default_name"
                },
                "DAT_0010d660": {
                    "1": "error_prefix"
                },
                "DAT_0010d5f8": {
                    "1": "is_library_conversion"
                }
            }
        },
        "FUN_00105480": {
            "entrypoint": "0x00105480",
            "current_name": "process_entries_00105480",
            "code": "\n\n\nvoid process_entries_00105480(long entry_list,code *callback,undefined8 *filenames,int num_entries)\n\n{\n  int comparison_result;\n  char *format_string;\n  long current_entry;\n  long *next_entry;\n  undefined8 result;\n  long *entry_ptr;\n  int counter;\n  undefined buffer [152];\n  \n  current_entry = *(long *)(entry_list + 0xf0);\n  if (num_entries == 0) {\n    for (; current_entry != 0; current_entry = *(long *)(current_entry + 0xf0)) {\n      (*callback)(current_entry);\n    }\n  }\n  else {\n    for (; current_entry != 0; current_entry = *(long *)(current_entry + 0xf0)) {\n      *(undefined4 *)(current_entry + 0xac) = 0;\n    }\n    do {\n      entry_ptr = *(long **)(entry_list + 0xf0);\n      counter = 0;\n      for (; entry_ptr != (long *)0x0; entry_ptr = (long *)entry_ptr[0x1e]) {\n        if (*(int *)((long)entry_ptr + 0xac) == 0) {\n          current_entry = *entry_ptr;\n          if (current_entry == 0) {\n            next_entry = (long *)entry_ptr[0x1d];\n            if ((long *)entry_ptr[0x1d] == (long *)0x0) {\n              next_entry = entry_ptr;\n            }\n            (**(code **)(next_entry[1] + 0x1e8))(entry_ptr,buffer);\n          }\n          else if (((*(byte *)(entry_list + 0x49) & 0x10) == 0) ||\n                  (current_entry = FUN_00105830(current_entry,entry_list), current_entry != 0)) {\n            result = FUN_00105830(*filenames,entry_list);\n            comparison_result = filename_cmp(result,current_entry);\n            if ((comparison_result == 0) &&\n               ((DAT_0010d634 == '\\0' || (counter = counter + 1, counter == _DAT_0010d630)))) {\n              (*callback)();\n              *(undefined4 *)((long)entry_ptr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      result = *filenames;\n      format_string = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,format_string,result);\nLAB_0010553e:\n      filenames = filenames + 1;\n      num_entries = num_entries + -1;\n    } while (num_entries != 0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00105480": "process_entries_00105480",
                "param_1": "entry_list",
                "param_2": "callback",
                "param_3": "filenames",
                "param_4": "num_entries",
                "lVar2": "current_entry",
                "plVar3": "next_entry",
                "uVar4": "result",
                "plVar5": "entry_ptr",
                "local_cc": "counter",
                "local_c8": "buffer",
                "__format": "format_string",
                "iVar1": "comparison_result",
                "filename_cmp": "compare_filenames"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "FUN_00105830",
                "filename_cmp",
                "FUN_0010285f"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105480": {
                    "1": "process_archive",
                    "19": "process_entries",
                    "8": "process_archive_entries"
                },
                "param_1": {
                    "4": "archive",
                    "3": "archive_ptr",
                    "1": "input_buffer",
                    "9": "entry_list",
                    "2": "entries"
                },
                "param_2": {
                    "3": "callback_func",
                    "12": "callback",
                    "1": "process_entry_fn",
                    "4": "process_entry",
                    "2": "entry_callback"
                },
                "param_3": {
                    "1": "archive_names",
                    "6": "archive_entries",
                    "3": "entry_list",
                    "7": "filenames",
                    "5": "file_list",
                    "4": "file_names"
                },
                "param_4": {
                    "11": "num_files",
                    "13": "num_entries",
                    "3": "num_filenames",
                    "4": "file_count"
                },
                "lVar2": {
                    "1": "current_file",
                    "25": "current_entry",
                    "2": "current_entry_ptr"
                },
                "plVar3": {
                    "1": "start_entry",
                    "2": "temp_entry_ptr",
                    "3": "default_entry",
                    "6": "next_entry",
                    "4": "temp_entry"
                },
                "uVar4": {
                    "1": "param_result",
                    "17": "result",
                    "5": "comparison_result",
                    "2": "filename"
                },
                "plVar5": {
                    "11": "entry_ptr",
                    "1": "file_list",
                    "4": "entry_pointer",
                    "6": "entry",
                    "2": "entry_list"
                },
                "local_cc": {
                    "1": "file_count",
                    "4": "count",
                    "3": "entry_counter",
                    "2": "num_processed",
                    "15": "counter"
                },
                "local_c8": {
                    "1": "tmp_buffer",
                    "20": "buffer",
                    "6": "local_buffer",
                    "4": "temp_buffer"
                },
                "__format": {
                    "3": "error_message",
                    "14": "format_string",
                    "1": "err_format",
                    "2": "error_msg"
                },
                "iVar1": {
                    "11": "comparison_result",
                    "5": "cmp_result",
                    "1": "result"
                },
                "FUN_00105830": {
                    "1": "get_archive_entry",
                    "2": "get_entry_name"
                },
                "_DAT_0010d630": {
                    "2": "limit"
                },
                "DAT_0010d634": {
                    "2": "flag"
                },
                "FRIENDLY_FUNCTION": {
                    "1": "process_entries_from_binary"
                },
                "FRIENDLY_FUNCTION_2": {
                    "1": "check_entry_in_archive"
                },
                "filename_cmp": {
                    "6": "compare_filenames"
                },
                "FUN_0010285f": {
                    "2": "unspecified_function",
                    "1": "other_function"
                }
            }
        },
        "FUN_00105570": {
            "entrypoint": "0x00105570",
            "current_name": "process_files_00105570",
            "code": "\n\n\nundefined8 process_files_00105570(long arg1,char **file_paths,char flag)\n\n{\n  char **current_file_path;\n  undefined undefined_var;\n  byte byte_var;\n  int index;\n  size_t size_var;\n  int *errno_location;\n  char *file_path;\n  char *base_name;\n  undefined8 result;\n  char *current_file;\n  char *basename;\n  long current_ptr;\n  long next_ptr;\n  undefined8 return_value;\n  ulong ulong_var;\n  char **current_file_ptr;\n  char **next_file_ptr;\n  uint uint_var;\n  char **previous_file_ptr;\n  bool bool_var;\n  byte byte_var2;\n  byte local_flag;\n  undefined stack_array [88];\n  long modification_time;\n  stat file_stat;\n  \n  byte_var2 = 0;\n  current_file_path = (char **)(arg1 + 0xf0);\n  local_flag = 0;\n  if (file_paths == (char **)0x0) {\n    return_value = FUN_00102943();\n    return return_value;\n  }\n  do {\n    current_file = *file_paths;\njoined_r0x001055aa:\n    if (current_file == (char *)0x0) {\n      if (local_flag != 0) {\n        return_value = FUNC_001058b0(arg1);\n        return return_value;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    current_file_ptr = *(char ***)(arg1 + 0xf0);\n    next_file_ptr = current_file_path;\n    if (flag != '\\0') {\nLAB_0010564c:\n      uint_var = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      next_ptr = *(long *)(arg1 + 0xf0);\n      if (*(long *)(arg1 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        current_ptr = next_ptr;\n        next_ptr = *(long *)(current_ptr + 0xf0);\n      } while (next_ptr != 0);\n      next_file_ptr = (char **)(current_ptr + 0xf0);\n      current_file = *file_paths;\n      do {\n        if (DAT_0010d620 != 0) {\n          return_value = FUN_00105830(current_file,arg1);\n          index = filename_cmp(return_value,\"__.LIBDEP\");\n          if (index == 0) {\n            byte_var = FUN_00105ae0(next_file_ptr,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            local_flag = byte_var | local_flag;\n            goto LAB_0010577e;\n          }\n          current_file = *file_paths;\n        }\n        undefined_var = DAT_0010d5f8;\n        bool_var = DAT_0010d60c != 0;\n        next_ptr = bfd_openr(current_file,DAT_0010d5f0);\n        if (next_ptr != 0) {\n          file_paths = file_paths + 1;\n          byte_var = FUN_00105af0(next_file_ptr,next_ptr,(uint)bool_var,undefined_var);\n          local_flag = local_flag | byte_var;\n          current_file = *file_paths;\n          goto joined_r0x001055aa;\n        }\n        FUN_00107c10(current_file,0);\n        uint_var = (uint)bool_var;\nLAB_001028f5:\n        return_value = DAT_0010d638;\n        if (uint_var == 3) {\n          next_ptr = *(long *)(arg1 + 0xf0);\n          if (*(long *)(arg1 + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*next_file_ptr != (undefined8 *)0x0;\n              next_file_ptr = (char **)(*next_file_ptr + 0xf0)) {\n            index = filename_cmp(*(undefined8 *)*next_file_ptr,return_value);\n            if (index == 0) {\n              if (uint_var == 2) {\n                next_file_ptr = (char **)(*next_file_ptr + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        current_file = *file_paths;\n      } while( true );\n    }\n    previous_file_ptr = current_file_path;\n    if (current_file_ptr == (char **)0x0) {\n      uint_var = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      current_file = (char *)lbasename(*current_file_ptr);\n      base_name = current_file;\n      if (DAT_0010d5fa != '\\0') {\n        size_var = strlen(current_file);\n        ulong_var = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        if (ulong_var < size_var) {\n          base_name = (char *)xmalloc(ulong_var + 1);\n          next_ptr = *(long *)(arg1 + 8);\n          file_path = base_name;\n          for (ulong_var = (ulong)*(byte *)(next_ptr + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n            *file_path = *current_file;\n            current_file = current_file + (ulong)byte_var2 * -2 + 1;\n            file_path = file_path + (ulong)byte_var2 * -2 + 1;\n          }\n          base_name[*(byte *)(next_ptr + 0x1e)] = '\\0';\n        }\n        file_path = *file_paths;\n        current_file = base_name;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      file_path = *file_paths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basename = (char *)lbasename(file_path);\n      if (DAT_0010d5fa != '\\0') {\n        size_var = strlen(basename);\n        ulong_var = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        file_path = basename;\n        current_file = base_name;\n        if (ulong_var < size_var) {\n          file_path = (char *)xmalloc(ulong_var + 1);\n          next_ptr = *(long *)(arg1 + 8);\n          base_name = file_path;\n          for (ulong_var = (ulong)*(byte *)(next_ptr + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n            *base_name = *basename;\n            basename = basename + (ulong)byte_var2 * -2 + 1;\n            base_name = base_name + (ulong)byte_var2 * -2 + 1;\n          }\n          file_path[*(byte *)(next_ptr + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      index = filename_cmp(basename,base_name);\n      if (index == 0) goto LAB_00102993;\nLAB_00105639:\n      previous_file_ptr = current_file_ptr + 0x1e;\n      current_file_ptr = (char **)current_file_ptr[0x1e];\n      if (current_file_ptr == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    file_path = *file_paths;\n    current_file = *current_file_ptr;\nLAB_00102980:\n    index = filename_cmp(file_path,current_file);\n    if (index != 0) goto LAB_00105639;\nLAB_00102993:\n    if (current_file_ptr[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      index = stat(*file_paths,&file_stat);\n      if (index != 0) {\n        errno_location = __errno_location();\n        if (*errno_location != 2) {\n          FUN_00107c10(*file_paths);\nLAB_00102b7e:\n          current_file = *current_file_ptr;\n          return_value = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00107690(return_value,current_file);\n          free(file_paths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      next_file_ptr = (char **)current_file_ptr[0x1d];\n      if ((char **)current_file_ptr[0x1d] == (char **)0x0) {\n        next_file_ptr = current_file_ptr;\n      }\n      index = (**(code **)(next_file_ptr[1] + 0x1e8))(current_file_ptr,stack_array);\n      if (index != 0) goto LAB_00102b7e;\n      if (file_stat.st_mtim.tv_sec <= modification_time) goto LAB_0010577e;\n    }\n    return_value = FUN_00105870(current_file_path,2,*current_file_ptr);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      current_file = *file_paths;\n      bool_var = DAT_0010d60c != 0;\n      next_ptr = bfd_openr(current_file,DAT_0010d5f0);\n      if (next_ptr == 0) {\n        FUN_00107c10(current_file,0);\n        goto LAB_00102b3e;\n      }\n      byte_var = FUN_00103172(return_value,next_ptr,bool_var);\n    }\n    else {\n      result = FUN_00105830(*file_paths,arg1);\n      index = filename_cmp(result,\"__.LIBDEP\");\n      if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byte_var = FUN_00103172(return_value,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byte_var != 0) {\n      *previous_file_ptr = *(char **)(*previous_file_ptr + 0xf0);\n      local_flag = byte_var;\n    }\nLAB_0010577e:\n    file_paths = file_paths + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "param_1": "arg1",
                "param_2": "file_paths",
                "param_3": "flag",
                "ppcVar1": "current_file_path",
                "uVar2": "undefined_var",
                "bVar3": "byte_var",
                "iVar4": "index",
                "sVar5": "size_var",
                "piVar6": "errno_location",
                "pcVar7": "file_path",
                "pcVar8": "base_name",
                "uVar9": "result",
                "pcVar10": "current_file",
                "__s": "basename",
                "lVar11": "current_ptr",
                "lVar12": "next_ptr",
                "uVar13": "return_value",
                "uVar14": "ulong_var",
                "ppcVar15": "current_file_ptr",
                "ppcVar16": "next_file_ptr",
                "uVar17": "uint_var",
                "ppcVar18": "previous_file_ptr",
                "bVar19": "bool_var",
                "bVar20": "byte_var2",
                "local_15a": "local_flag",
                "auStack_158": "stack_array",
                "lStack_100": "modification_time",
                "sStack_c8": "file_stat",
                "FUN_00105570": "process_files_00105570",
                "strlen": "get_string_length"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "FUN_00102943"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "library_handle",
                    "2": "file_data",
                    "3": "data",
                    "5": "arg1"
                },
                "param_2": {
                    "4": "arg2",
                    "1": "filenames",
                    "17": "file_paths",
                    "3": "input_strings"
                },
                "param_3": {
                    "1": "check_stat",
                    "20": "flag",
                    "4": "arg3",
                    "3": "is_recursive"
                },
                "ppcVar1": {
                    "1": "file_data_ptr",
                    "4": "current_file",
                    "3": "file_ptr",
                    "2": "ptr1"
                },
                "uVar2": {
                    "1": "out1",
                    "5": "undefined_variable",
                    "2": "undefined_var2",
                    "8": "undefined_value",
                    "9": "undefined_var"
                },
                "bVar3": {
                    "4": "byte_variable",
                    "1": "return_flag",
                    "2": "byte_var3",
                    "8": "byte_value",
                    "10": "byte_var"
                },
                "iVar4": {
                    "2": "comparison_result",
                    "1": "int_value",
                    "3": "integer_value",
                    "7": "int_var",
                    "8": "index"
                },
                "sVar5": {
                    "1": "s_var5",
                    "2": "size_variable",
                    "4": "string_length",
                    "7": "size_var"
                },
                "piVar6": {
                    "1": "err_number",
                    "8": "errno_location",
                    "4": "errno_ptr",
                    "2": "error_code"
                },
                "pcVar7": {
                    "1": "file_path_var",
                    "6": "file_path",
                    "3": "file_name",
                    "2": "current_file"
                },
                "pcVar8": {
                    "1": "filtered_file_path",
                    "5": "base_name",
                    "3": "basename1"
                },
                "uVar9": {
                    "1": "unknown_value",
                    "2": "basename2",
                    "6": "result",
                    "3": "undefined_var2"
                },
                "pcVar10": {
                    "1": "file_path_var_3",
                    "2": "file_path",
                    "6": "current_file"
                },
                "__s": {
                    "1": "file_base_name",
                    "2": "basename_string",
                    "3": "basename"
                },
                "lVar11": {
                    "1": "long_var_1",
                    "2": "long_var11",
                    "4": "current_ptr"
                },
                "lVar12": {
                    "4": "next_ptr",
                    "1": "previous_value",
                    "2": "temp_var2",
                    "3": "next_file_ptr"
                },
                "uVar13": {
                    "1": "temp_undefined_val",
                    "8": "return_value",
                    "6": "result",
                    "2": "undefined_var13",
                    "3": "undefined_var3"
                },
                "uVar14": {
                    "1": "file_name_length",
                    "7": "ulong_var",
                    "2": "buffer_size",
                    "4": "ulong_value",
                    "3": "length"
                },
                "ppcVar15": {
                    "1": "current_search_path",
                    "4": "current_file_ptr",
                    "2": "ptr2"
                },
                "ppcVar16": {
                    "1": "ptr2",
                    "4": "next_file_ptr",
                    "2": "ptr3"
                },
                "uVar17": {
                    "1": "u_var17",
                    "3": "uint_value",
                    "2": "uint_variable",
                    "7": "uint_var",
                    "4": "flag_value"
                },
                "ppcVar18": {
                    "1": "pointer_to_ppc_var18",
                    "4": "previous_file_ptr",
                    "3": "previous_node",
                    "2": "ptr4"
                },
                "bVar19": {
                    "1": "flag_status",
                    "2": "bool_var19",
                    "9": "bool_var",
                    "4": "bool_value"
                },
                "bVar20": {
                    "5": "byte_var2",
                    "2": "byte_var20",
                    "1": "byte_var",
                    "3": "byte_value"
                },
                "local_15a": {
                    "1": "byte_var3",
                    "2": "local_byte_value",
                    "4": "local_flag"
                },
                "auStack_158": {
                    "5": "stack_buffer",
                    "1": "stack_var",
                    "2": "buffer",
                    "9": "stack_array"
                },
                "lStack_100": {
                    "1": "temp_long3",
                    "3": "modification_time",
                    "2": "stack_var"
                },
                "sStack_c8": {
                    "1": "s_stack_var",
                    "6": "stat_struct",
                    "2": "stat_info",
                    "10": "file_stat"
                },
                "FUN_00105570": {
                    "8": "process_files"
                },
                "DAT_0010d618": {
                    "1": "dat_0010d618"
                },
                "DAT_0010d640": {
                    "1": "dat_0010d640"
                },
                "DAT_0010d620": {
                    "1": "dat_0010d620"
                },
                "DAT_0010d60c": {
                    "1": "dat_0010d60c"
                },
                "DAT_0010d5f8": {
                    "1": "dat_0010d5f8"
                },
                "DAT_0010d5f0": {
                    "1": "dat_0010d5f0"
                },
                "DAT_0010d638": {
                    "1": "dat_0010d638"
                },
                "DAT_0010d5f9": {
                    "1": "dat_0010d5f9"
                },
                "DAT_0010d64c": {
                    "1": "dat_0010d64c"
                },
                "DAT_0010d644": {
                    "1": "dat_0010d644"
                },
                "DAT_0010d5fa": {
                    "1": "dat_0010d5fa"
                },
                "FUN_00102943": {
                    "1": "get_error_message"
                },
                "FUN_001058b0": {
                    "1": "process_dependencies"
                },
                "FUN_00105830": {
                    "1": "get_dependency_path"
                },
                "FUN_00105ae0": {
                    "1": "compare_dependency_paths"
                },
                "FUN_00105af0": {
                    "1": "process_dependency"
                },
                "FUN_00105870": {
                    "1": "update_dependency"
                },
                "FUN_00103172": {
                    "1": "perform_dependency_check"
                },
                "FUN_00107c10": {
                    "1": "print_error_message"
                },
                "FUN_00107690": {
                    "1": "format_error_message"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "strings_cmp": {
                    "1": "compare_strings"
                }
            }
        },
        "FUN_001057a0": {
            "entrypoint": "0x001057a0",
            "current_name": "extract_file_path_001057a0",
            "code": "\nundefined  [16] extract_file_path_001057a0(char *path,int *file_descriptor,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  int result;\n  char *last_slash;\n  long path_length;\n  long i;\n  long last_slash_offset;\n  char *new_path;\n  byte increment;\n  undefined return_value [16];\n  \n  increment = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    last_slash_offset = (long)last_slash - (long)path;\n    last_slash = (char *)xmalloc(last_slash_offset + 0xb);\n    path_length = last_slash_offset + 1;\n    new_path = last_slash;\n    for (i = last_slash_offset; i != 0; i = i + -1) {\n      *new_path = *path;\n      path = path + (ulong)increment * -2 + 1;\n      new_path = new_path + (ulong)increment * -2 + 1;\n    }\n    last_slash[last_slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    new_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    new_path = last_slash;\n  }\n  return_value._8_8_ = unused_param_2;\n  return_value._0_8_ = new_path;\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_001057a0": "extract_file_path_001057a0",
                "param_1": "path",
                "param_2": "file_descriptor",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "path_length",
                "lVar4": "i",
                "lVar5": "last_slash_offset",
                "pcVar6": "new_path",
                "bVar7": "increment",
                "auVar8": "return_value",
                "xmalloc": "allocate_memory",
                "mkstemp": "create_temporary_file",
                "strrchr": "find_last_occurrence"
            },
            "calling": [
                "FUN_001058b0",
                "FUN_00103c60"
            ],
            "called": [
                "xmalloc",
                "mkstemp",
                "strrchr",
                "FUN_00102ba1"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001057a0": {
                    "3": "create_temp_file",
                    "2": "reverse_and_allocate_path",
                    "1": "extract_filepath_and_create_temp_file"
                },
                "param_1": {
                    "2": "input_file_path",
                    "1": "input_filename",
                    "14": "path",
                    "3": "filepath",
                    "9": "file_path"
                },
                "param_2": {
                    "1": "result_fd",
                    "6": "output_file_descriptor",
                    "24": "file_descriptor"
                },
                "param_3": {
                    "2": "unused_param",
                    "1": "unknown1",
                    "12": "unused_param_1",
                    "4": "unused_param1",
                    "3": "param3"
                },
                "param_4": {
                    "1": "data",
                    "2": "param_4",
                    "5": "unused_param2",
                    "3": "param4",
                    "12": "unused_param_2"
                },
                "iVar1": {
                    "9": "result",
                    "2": "temp_file_descriptor"
                },
                "pcVar2": {
                    "5": "last_slash_position",
                    "1": "last_slash_in_path",
                    "3": "last_separator",
                    "14": "last_slash"
                },
                "lVar3": {
                    "1": "file_name_length",
                    "4": "file_path_length",
                    "12": "path_length"
                },
                "lVar4": {
                    "4": "counter",
                    "6": "i",
                    "1": "iteration_count",
                    "5": "loop_counter",
                    "3": "current_position"
                },
                "lVar5": {
                    "5": "last_slash_offset",
                    "1": "slash_distance",
                    "2": "length",
                    "3": "last_slash_index",
                    "4": "offset"
                },
                "pcVar6": {
                    "13": "new_path",
                    "1": "filename",
                    "2": "allocated_path",
                    "6": "new_file_path",
                    "3": "temp_file_path"
                },
                "bVar7": {
                    "1": "byte_value",
                    "3": "is_null",
                    "2": "zero_byte"
                },
                "auVar8": {
                    "16": "return_value",
                    "1": "result_tuple",
                    "12": "result"
                },
                "bx": {
                    "1": "start_index"
                },
                "xmalloc": {
                    "1": "allocate",
                    "4": "allocate_memory"
                },
                "mkstemp": {
                    "1": "create_temp_file",
                    "3": "create_temporary_file"
                },
                "strrchr": {
                    "2": "find_last_occurrence",
                    "1": "find_last_slash"
                },
                "0x2f": {
                    "1": "slash",
                    "2": "slash_character"
                },
                "0xb": {
                    "1": "extra_length"
                },
                "0x5858585858587473": {
                    "2": "magic_number",
                    "1": "magic_value"
                },
                "9": {
                    "1": "allocated_memory_size"
                }
            }
        },
        "FUN_00105830": {
            "entrypoint": "0x00105830",
            "current_name": "extract_substring_00105830",
            "code": "\nundefined  [16] extract_substring_00105830(char *input_string,long struct_ptr,undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  long struct_value;\n  size_t base_name_length;\n  char *base_name;\n  ulong substring_length;\n  char *output_string;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    base_name = (char *)lbasename();\n    input_string = base_name;\n    if ((DAT_0010d5fa != '\\0') && (struct_ptr != 0)) {\n      base_name_length = strlen(base_name);\n      substring_length = (ulong)*(byte *)(*(long *)(struct_ptr + 8) + 0x1e);\n      if (substring_length < base_name_length) {\n        input_string = (char *)xmalloc(substring_length + 1);\n        struct_value = *(long *)(struct_ptr + 8);\n        output_string = input_string;\n        for (substring_length = (ulong)*(byte *)(struct_value + 0x1e); substring_length != 0; substring_length = substring_length - 1) {\n          *output_string = *base_name;\n          base_name = base_name + (ulong)flag * -2 + 1;\n          output_string = output_string + (ulong)flag * -2 + 1;\n        }\n        input_string[*(byte *)(struct_value + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = unused_param2;\n  result._0_8_ = input_string;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00105830": "extract_substring_00105830",
                "param_1": "input_string",
                "param_2": "struct_ptr",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "__s": "base_name",
                "uVar3": "substring_length",
                "pcVar4": "output_string",
                "bVar5": "flag",
                "sVar2": "base_name_length",
                "lVar1": "struct_value",
                "auVar6": "result",
                "lbasename": "get_base_name",
                "strlen": "get_string_length",
                "xmalloc": "allocate_memory"
            },
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00105480"
            ],
            "called": [
                "lbasename",
                "FUN_00102bb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105830": {
                    "1": "extracted_function",
                    "2": "parse_string",
                    "6": "extract_substring",
                    "4": "extract_string"
                },
                "param_1": {
                    "1": "file_name",
                    "18": "input_string",
                    "6": "filename"
                },
                "param_2": {
                    "4": "struct_address",
                    "2": "file_info",
                    "1": "file_struct",
                    "3": "data_ptr",
                    "6": "struct_ptr",
                    "5": "struct_pointer"
                },
                "param_3": {
                    "3": "param_3",
                    "2": "param3",
                    "1": "unused_1",
                    "5": "unused_param1",
                    "4": "unused_param"
                },
                "param_4": {
                    "2": "param4",
                    "1": "var4",
                    "7": "unused_param2",
                    "3": "var2"
                },
                "__s": {
                    "6": "basename",
                    "1": "input_string",
                    "17": "base_name",
                    "5": "basename_result"
                },
                "uVar3": {
                    "1": "string_length",
                    "3": "byte_value",
                    "4": "substring_length",
                    "2": "max_string_length"
                },
                "pcVar4": {
                    "1": "output_ptr",
                    "11": "output_string",
                    "2": "substring_ptr"
                },
                "bVar5": {
                    "1": "index",
                    "6": "flag",
                    "2": "is_negative",
                    "4": "byte_var",
                    "3": "counter"
                },
                "sVar2": {
                    "2": "input_length",
                    "1": "input_len",
                    "3": "input_string_length",
                    "7": "base_name_length",
                    "4": "basename_length"
                },
                "lVar1": {
                    "2": "file_info_ptr",
                    "1": "struct_field_pointer",
                    "3": "struct_value"
                },
                "auVar6": {
                    "7": "return_value",
                    "1": "return_val",
                    "15": "result"
                },
                "lbasename": {
                    "1": "get_base_name"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            }
        },
        "FUN_00105870": {
            "entrypoint": "0x00105870",
            "current_name": "find_matching_file_00105870",
            "code": "\nlong * find_matching_file_00105870(long *file_list,int count,undefined8 target_filename)\n\n{\n  int comparison_result;\n  undefined8 default_filename;\n  int mode;\n  \n  default_filename = DAT_0010d638;\n  mode = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    default_filename = target_filename;\n    mode = count;\n  }\n  if (mode == 3) {\n    for (; *file_list != 0; file_list = (long *)(*file_list + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*file_list != (undefined8 *)0x0; file_list = (long *)(*file_list + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*file_list,default_filename);\n      if (comparison_result == 0) {\n        if (mode != 2) {\n          result file_list;\n        }\n        result (long *)(*file_list + 0xf0);\n      }\n    }\n  }\n  result file_list;\n}\n\n",
            "renaming": {
                "FUN_00105870": "find_matching_file_00105870",
                "param_1": "file_list",
                "param_2": "count",
                "param_3": "target_filename",
                "iVar1": "comparison_result",
                "iVar3": "mode",
                "uVar2": "default_filename",
                "filename_cmp": "compare_filenames",
                "return": "result"
            },
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "called": [
                "FUN_00102cd9"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105870": {
                    "1": "find_file_in_array",
                    "2": "find_last_match",
                    "4": "find_matching_file",
                    "3": "find_file"
                },
                "param_1": {
                    "1": "data",
                    "5": "array",
                    "2": "entries",
                    "6": "file_array",
                    "9": "file_list"
                },
                "param_2": {
                    "2": "search_option",
                    "1": "param_count",
                    "3": "search_mode",
                    "6": "count"
                },
                "param_3": {
                    "2": "search_file",
                    "1": "default_value",
                    "3": "search_value",
                    "6": "filename"
                },
                "iVar1": {
                    "17": "comparison_result",
                    "11": "cmp_result",
                    "3": "result"
                },
                "iVar3": {
                    "2": "loop_type",
                    "1": "option",
                    "7": "mode",
                    "4": "search_mode",
                    "5": "file_type"
                },
                "uVar2": {
                    "2": "default_string",
                    "8": "default_filename",
                    "1": "search_directory"
                },
                "*param_1": {
                    "1": "current_item"
                },
                "filename_cmp": {
                    "1": "compare_filename",
                    "2": "compare_filenames"
                },
                "*param_1 + 0xf0": {
                    "1": "next_element"
                },
                "return": {
                    "1": "result"
                },
                "0xf0": {
                    "1": "offset"
                },
                "0x0": {
                    "1": "null_pointer"
                }
            }
        },
        "FUN_001058b0": {
            "entrypoint": "0x001058b0",
            "current_name": "FUNC_001058b0",
            "code": "\n\n\nvoid FUNC_001058b0(undefined8 *param_1)\n\n{\n  char cVar1;\n  uint uVar2;\n  int iVar3;\n  undefined8 uVar4;\n  char *__format;\n  void *__ptr;\n  FILE *__stream;\n  char **ppcVar5;\n  uint uStack0000000000000020;\n  uint in_stack_00000028;\n  undefined8 in_stack_00000038;\n  int local_3c [2];\n  undefined uStack_33;\n  char cStack_32;\n  char cStack_31;\n  \n  uVar4 = param_1[0x1e];\n  local_3c[0] = -1;\n  __ptr = (void *)xstrdup(*param_1);\n  __stream = (FILE *)FUN_001057a0(__ptr,local_3c);\n  iVar3 = local_3c[0];\n  if (__stream != (FILE *)0x0) {\n    DAT_0010d618 = __stream;\n    ppcVar5 = (char **)bfd_fdopenw(__stream,*(undefined8 *)param_1[1],local_3c[0]);\n    if (ppcVar5 != (char **)0x0) {\n      DAT_0010d5e0 = ppcVar5;\n      bfd_set_format(ppcVar5,2);\n      uVar2 = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)ppcVar5 + 0x49) & 0xfffffff7;\n      *(char *)((long)ppcVar5 + 0x49) = (char)uVar2;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)ppcVar5 + 0x44) = *(uint *)((long)ppcVar5 + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)ppcVar5 + 0x44) = *(uint *)((long)ppcVar5 + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)param_1 + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)ppcVar5 + 0x49) = (byte)uVar2 | 0x10;\n        }\n        cVar1 = bfd_set_archive_head(ppcVar5,uVar4);\n        if (cVar1 != '\\0') break;\n        uVar2 = FUN_00107c10(__ptr);\nLAB_00102d37:\n        *(uint *)((long)ppcVar5 + 0x44) = *(uint *)((long)ppcVar5 + 0x44) | 0x100000;\n      }\n      iVar3 = dup(iVar3);\n      cVar1 = bfd_close(ppcVar5);\n      if (cVar1 == '\\0') {\n        FUN_00107c10(__ptr);\n        __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,__format);\n        uVar2 = uStack0000000000000020 & 0xf000;\n        if (uVar2 == 0x4000) {\n          uStack_33 = 100;\n        }\n        else if (uVar2 == 0xa000) {\n          uStack_33 = 0x6c;\n        }\n        else if (uVar2 == 0x6000) {\n          uStack_33 = 0x62;\n        }\n        else if (uVar2 == 0x2000) {\n          uStack_33 = 99;\n        }\n        else if (uVar2 == 0xc000) {\n          uStack_33 = 0x73;\n        }\n        else {\n          uStack_33 = 0x70;\n          if (uVar2 != 0x1000) {\n            uStack_33 = 0x2d;\n          }\n        }\n        cStack_32 = (-((_uStack0000000000000020 & 0x100) == 0) & 0xbbU) + 0x72;\n        cStack_31 = (-((_uStack0000000000000020 & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(__stream,\"%s %ld/%ld %6lu %s \",&cStack_32,_uStack0000000000000020 >> 0x20,\n                (ulong)in_stack_00000028,in_stack_00000038,&stack0xffffffffffffffd8,\n                _uStack0000000000000020 & 0xffffffff);\n        fputs(*ppcVar5,__stream);\n        if ((char)param_1 != '\\0') {\n          if ((*(byte *)((long)ppcVar5 + 0x49) & 0x10) == 0) {\n            if (ppcVar5[0xb] != (char *)0x0) {\n              fprintf(__stream,\" 0x%lx\");\n            }\n          }\n          else if (ppcVar5[0xc] != (char *)0x0) {\n            fprintf(__stream,\" 0x%lx\");\n          }\n        }\n        fputc(10,__stream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(param_1);\n      iVar3 = FUN_00105bc0(__stream,__ptr,iVar3);\n      if (iVar3 == 0) {\n        free(__ptr);\n        free(__stream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(iVar3);\n    FUN_00107c10(__ptr);\n  }\n  uVar4 = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  FUN_00107c10(uVar4);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "renaming": {
                "FUN_001058b0": "FUNC_001058b0"
            },
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "called": [
                "dcgettext",
                "bfd_fdopenw",
                "FUN_00107c10",
                "xstrdup",
                "bfd_set_format",
                "FUN_001057a0",
                "close"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00105a20": {
            "entrypoint": "0x00105a20",
            "current_name": "extract_archive_member_00105a20",
            "code": "\nvoid extract_archive_member_00105a20(char *output_path)\n\n{\n  char *base_path;\n  char *current_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t base_path_length;\n  \n  base_path = DAT_0010d5e8;\n  DAT_0010d618 = output_path;\n  if (*output_path == '/') {\nLAB_00102e9a:\n    base_name = lbasename();\n    base_path = DAT_0010d618;\n    error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    FUN_00107920(error_message,base_path,base_name);\n    DAT_0010d618 = (char *)base_name;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*output_path == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (base_path_length = strlen(DAT_0010d5e8), base_path_length != 0)) {\n        if (base_path[base_path_length - 1] == '/') {\n          DAT_0010d618 = (char *)concatenate_strings(base_path,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concatenate_strings(base_path,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      file_pointer = fopen(DAT_0010d618,\"w\");\n      if (file_pointer == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    current_path = output_path;\n    if ((*output_path == '.') && (current_path = output_path + 1, output_path[1] == '.')) {\n      current_path = output_path + 2;\n      if ((output_path[2] == '/') || (output_path[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n    }\n    for (; output_path = current_path, *current_path == '/'; current_path = current_path + 1) {\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00105a20": "extract_archive_member_00105a20",
                "param_1": "output_path",
                "pcVar1": "base_path",
                "pcVar2": "current_path",
                "uVar3": "base_name",
                "uVar4": "error_message",
                "pFVar5": "file_pointer",
                "sVar6": "base_path_length",
                "concat": "concatenate_strings"
            },
            "calling": [
                "FUN_00102c25"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105a20": {
                    "1": "extract_and_save_file",
                    "5": "extract_archive_member",
                    "2": "process_output_file",
                    "3": "extract_output_path"
                },
                "param_1": {
                    "7": "input_path",
                    "3": "pathname",
                    "1": "filename",
                    "12": "output_path"
                },
                "pcVar1": {
                    "1": "basepath",
                    "3": "base_directory",
                    "7": "base_dir",
                    "2": "archive_path",
                    "17": "base_path"
                },
                "pcVar2": {
                    "1": "cur_dir",
                    "2": "current_char",
                    "4": "current_dir",
                    "19": "current_path"
                },
                "uVar3": {
                    "2": "basename",
                    "7": "basename_result",
                    "17": "base_name",
                    "1": "result_path"
                },
                "uVar4": {
                    "21": "error_message",
                    "8": "error_msg",
                    "1": "warning_message"
                },
                "pFVar5": {
                    "6": "file",
                    "13": "file_pointer"
                },
                "sVar6": {
                    "11": "base_path_length",
                    "1": "len",
                    "6": "base_dir_length",
                    "3": "base_len"
                },
                "DAT_0010d5e8": {
                    "1": "default_base_path",
                    "2": "base_path"
                },
                "DAT_0010d618": {
                    "1": "input_path",
                    "2": "output_path"
                },
                "DAT_0010d60c": {
                    "1": "enable_print"
                },
                "*param_1": {
                    "1": "path"
                },
                "concat": {
                    "1": "concatenate_strings"
                }
            }
        },
        "FUN_00105a68": {
            "entrypoint": "0x00105a68",
            "current_name": "process_file_00105a68",
            "code": "\nvoid process_file_00105a68(void)\n\n{\n  char *directory_path;\n  FILE *file_pointer;\n  size_t path_length;\n  \n  directory_path = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    path_length = strlen(DAT_0010d5e8);\n    if (path_length != 0) {\n      if (directory_path[path_length - 1] == '/') {\n        DAT_0010d618 = (char *)concatenate_strings(directory_path,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concatenate_strings(directory_path,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file_pointer = fopen(DAT_0010d618,\"w\");\n  if (file_pointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "renaming": {
                "FUN_00105a68": "process_file_00105a68",
                "pcVar1": "directory_path",
                "pFVar2": "file_pointer",
                "sVar3": "path_length",
                "printf": "print_msg",
                "perror": "print_error",
                "strlen": "get_length",
                "concat": "concatenate_strings"
            },
            "calling": [
                "FUN_00102e6f"
            ],
            "called": [
                "fopen",
                "printf",
                "FUN_00102e57",
                "xexit",
                "perror",
                "strlen",
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105a68": {
                    "1": "reformat_path_and_print",
                    "3": "generate_output_file",
                    "6": "process_file",
                    "2": "create_output_file"
                },
                "pcVar1": {
                    "1": "current_path",
                    "3": "input_directory",
                    "5": "file_directory",
                    "10": "directory_path"
                },
                "pFVar2": {
                    "6": "file",
                    "5": "file_ptr",
                    "1": "file_stream",
                    "14": "file_pointer",
                    "4": "output_file"
                },
                "sVar3": {
                    "1": "string_length",
                    "3": "file_size",
                    "2": "file_length",
                    "4": "directory_length",
                    "7": "path_length"
                },
                "fp": {
                    "1": "file_pointer"
                },
                "printf": {
                    "1": "print_message"
                },
                "perror": {
                    "1": "print_error"
                },
                "strlen": {
                    "1": "get_length"
                },
                "concat": {
                    "2": "concatenate_strings",
                    "1": "join_strings"
                },
                "DAT_0010d5e8": {
                    "1": "directory"
                },
                "DAT_0010d618": {
                    "1": "full_file_path"
                },
                "DAT_0010d60c": {
                    "1": "enable_print"
                },
                "fprintf": {
                    "1": "write_to_file"
                },
                "DAT_00108260": {
                    "1": "default_path"
                }
            }
        },
        "FUN_00105ae0": {
            "entrypoint": "0x00105ae0",
            "current_name": "execute_function_00105ae0",
            "code": "\nvoid execute_function_00105ae0(undefined8 arg1,undefined8 arg2,undefined flag1,undefined flag2)\n\n{\n  FUN_00105af0(arg1,arg2,flag1,flag2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00105ae0": "execute_function_00105ae0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "flag1",
                "param_4": "flag2"
            },
            "calling": [
                "FUN_001028ed"
            ],
            "called": [
                "FUN_00105af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105ae0": {
                    "1": "run_function",
                    "23": "execute_function"
                },
                "param_1": {
                    "1": "param1",
                    "5": "data_pointer",
                    "2": "argument1",
                    "12": "arg1",
                    "3": "input1"
                },
                "param_2": {
                    "12": "arg2",
                    "1": "input_value",
                    "5": "value",
                    "2": "argument2",
                    "3": "input2"
                },
                "param_3": {
                    "1": "character1",
                    "20": "flag1",
                    "3": "char1"
                },
                "param_4": {
                    "3": "char2",
                    "1": "param4",
                    "20": "flag2"
                },
                "FUN_00105af0": {
                    "1": "reverse_data",
                    "4": "perform_operation",
                    "5": "process_data"
                }
            }
        },
        "FUN_00105af0": {
            "entrypoint": "0x00105af0",
            "current_name": "extract_archived_files_00105af0",
            "code": "\nulong extract_archived_files_00105af0(long *file_list,long archive_file,char flag1,char flag2)\n\n{\n  char is_valid_format;\n  uint result;\n  long archived_file;\n  ulong return_value;\n  \n  if (flag2 == '\\0') {\n    if (flag1 != '\\0') {\n      return_value = FUN_00102f08();\n      return return_value;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(archive_file,2);\n    if (is_valid_format != '\\0') {\n      return_value = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_file,archived_file)) {\n        result = extract_archived_files_00105af0(file_list,archived_file,flag1,1);\n        if ((char)result != '\\0') {\n          return_value = (ulong)result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (flag1 != '\\0') {\n      return_value = FUN_00102f08();\n      return return_value;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *file_list;\n  *file_list = archive_file;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00105af0": "extract_archived_files_00105af0",
                "param_1": "file_list",
                "param_2": "archive_file",
                "param_3": "flag1",
                "param_4": "flag2",
                "cVar1": "is_valid_format",
                "uVar2": "result",
                "lVar3": "archived_file",
                "uVar4": "return_value",
                "bfd_openr_next_archived_file": "get_next_archived_file",
                "bfd_check_format": "check_archive_format"
            },
            "calling": [
                "FUN_001028ed",
                "FUN_00105af0",
                "FUN_00105ae0"
            ],
            "called": [
                "FUN_00102f08",
                "bfd_openr_next_archived_file",
                "FUN_00105af0",
                "bfd_check_format"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105af0": {
                    "1": "extract_and_process_files",
                    "4": "process_archived_files",
                    "2": "process_file",
                    "6": "process_files",
                    "10": "extract_archived_files"
                },
                "param_1": {
                    "1": "file_list_array",
                    "3": "files_list",
                    "2": "file_list_ptr",
                    "22": "file_list"
                },
                "param_2": {
                    "2": "file",
                    "8": "archive",
                    "1": "archive_ptr",
                    "4": "archive_handle",
                    "10": "archive_file"
                },
                "param_3": {
                    "1": "check_archives",
                    "2": "check_format_flag",
                    "9": "check_format"
                },
                "param_4": {
                    "1": "check_format_flag",
                    "2": "check_format",
                    "9": "recursive"
                },
                "cVar1": {
                    "2": "is_bfd_format_valid",
                    "1": "format_supported",
                    "12": "is_valid_format",
                    "6": "format_check_result",
                    "3": "format_valid",
                    "5": "is_bfd_format"
                },
                "uVar2": {
                    "1": "nested_result",
                    "24": "result"
                },
                "lVar3": {
                    "4": "next_file",
                    "14": "archived_file",
                    "1": "nested_file",
                    "3": "file_handle"
                },
                "uVar4": {
                    "1": "num_archived_files",
                    "7": "return_value",
                    "2": "num_extracted",
                    "3": "total_extracted"
                },
                "FUN_00102f08": {
                    "1": "get_extracted_value"
                },
                "bfd_openr_next_archived_file": {
                    "2": "open_next_archived_file",
                    "6": "get_next_archived_file"
                },
                "bfd_check_format": {
                    "1": "is_bfd_valid_format",
                    "2": "check_format",
                    "3": "check_archive_format"
                },
                "<original_function_name>": {
                    "1": "extract_archived_files"
                }
            }
        },
        "FUN_00105bb0": {
            "entrypoint": "0x00105bb0",
            "current_name": "get_one_00105bb0",
            "code": "\nuint64_t get_one_00105bb0(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_00105bb0": "get_one_00105bb0",
                "undefined8": "uint64_t",
                "return": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105bb0": {
                    "1": "get_result",
                    "3": "check_success",
                    "4": "initialize",
                    "2": "get_status",
                    "5": "get_return_value",
                    "11": "get_one"
                },
                "undefined8": {
                    "1": "status",
                    "3": "void",
                    "5": "uint64_t",
                    "4": "int"
                },
                "return": {
                    "10": "result"
                },
                "PTR_*": {
                    "1": "unchanged"
                },
                "DAT_*": {
                    "1": "unchanged"
                },
                "1": {
                    "1": "flag"
                },
                "PTR_": {
                    "2": "ptr_",
                    "1": ""
                },
                "DAT_": {
                    "1": "",
                    "2": "dat_"
                },
                "<none>": {
                    "1": "return_value"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                }
            }
        },
        "FUN_00105bc0": {
            "entrypoint": "0x00105bc0",
            "current_name": "copy_and_delete_file_00105bc0",
            "code": "\nundefined  [16] copy_and_delete_file_00105bc0(char *source_file_path,char *destination_file_path,undefined4 error_code,undefined8 result)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 localized_error_message;\n  ulong unlink_result;\n  undefined result [16];\n  \n  if (destination_file_path == source_file_path) {\n    unlink_result = 0;\n  }\n  else {\n    copy_result = FUN_00105c00(error_code);\n    unlink_result = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      localized_error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00107920(localized_error_message,destination_file_path,error_message);\n    }\n    unlink(source_file_path);\n  }\n  result._8_8_ = result;\n  result._0_8_ = unlink_result;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "param_1": "source_file_path",
                "param_2": "destination_file_path",
                "param_3": "error_code",
                "param_4": "result",
                "uVar1": "copy_result",
                "piVar2": "errno_location",
                "pcVar3": "error_message",
                "uVar4": "localized_error_message",
                "uVar5": "unlink_result",
                "auVar6": "result"
            },
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105bc0": {
                    "16": "copy_and_delete_file",
                    "3": "copy_and_remove_file",
                    "1": "copy_file_and_delete",
                    "9": "copy_and_unlink_file"
                },
                "param_1": {
                    "16": "source_file_path",
                    "5": "source_path",
                    "2": "source_file_name",
                    "1": "source_filename",
                    "7": "source_file"
                },
                "param_2": {
                    "1": "destination_filename",
                    "16": "destination_file_path",
                    "7": "destination_file",
                    "5": "destination_path"
                },
                "param_3": {
                    "1": "copy_buffer_size",
                    "3": "copy_options",
                    "13": "error_code",
                    "2": "param",
                    "4": "flags"
                },
                "param_4": {
                    "2": "return_value",
                    "13": "result",
                    "11": "file_size",
                    "1": "return_code"
                },
                "uVar1": {
                    "1": "errno_result",
                    "9": "copy_result",
                    "2": "error",
                    "6": "error_code"
                },
                "piVar2": {
                    "1": "error_location_ptr",
                    "4": "error_location",
                    "11": "errno_location",
                    "5": "errno_ptr",
                    "2": "error_number_ptr"
                },
                "pcVar3": {
                    "11": "error_string",
                    "1": "error_msg",
                    "17": "error_message"
                },
                "uVar4": {
                    "3": "translated_error",
                    "1": "localized_error",
                    "6": "error_message",
                    "7": "localized_error_message",
                    "5": "translated_error_message",
                    "2": "translated_message"
                },
                "uVar5": {
                    "15": "unlink_result",
                    "1": "copy_status",
                    "3": "error_code",
                    "2": "result"
                },
                "auVar6": {
                    "1": "result_container",
                    "10": "return_value",
                    "11": "result",
                    "2": "result_data"
                }
            }
        },
        "FUN_00105c00": {
            "entrypoint": "0x00105c00",
            "current_name": "copy_file_00105c00",
            "code": "\nulong copy_file_00105c00(int file_descriptor,char *output_file)\n\n{\n  int errno_value;\n  int output_file_descriptor;\n  int read_result;\n  __off_t file_offset;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < file_descriptor) && (file_offset = lseek(file_descriptor,0,0), file_offset == 0)) {\n    output_file_descriptor = open_file(output_file,0x201);\n    if (output_file_descriptor < 0) {\n      bytes_read = FUN_00102f55();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read_source_file(file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_read;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        errno_value = *errno_location;\n        close_file(file_descriptor);\n        close_file(output_file_descriptor);\n        if (read_result != 0) {\n          *errno_location = errno_value;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write_destination_file(output_file_descriptor,buffer,(long)read_result);\n    } while (bytes_written == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close_file(file_descriptor);\n    close_file(output_file_descriptor);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "param_1": "file_descriptor",
                "param_2": "output_file",
                "__fd": "output_file_descriptor",
                "iVar1": "errno_value",
                "iVar2": "read_result",
                "_Var3": "file_offset",
                "uVar4": "bytes_read",
                "sVar5": "bytes_written",
                "piVar6": "errno_location",
                "auStack_2038": "buffer",
                "FUN_00105c00": "copy_file_00105c00",
                "open": "open_file",
                "lseek": "set_source_file_offset",
                "read": "read_source_file",
                "write": "write_destination_file",
                "__errno_location": "get_errno_location",
                "close": "close_file"
            },
            "calling": [
                "FUN_00105bc0"
            ],
            "called": [
                "open",
                "FUN_00102f55",
                "lseek",
                "read",
                "write",
                "__errno_location",
                "close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "7": "source_file_descriptor",
                    "6": "source_fd",
                    "1": "source_file",
                    "4": "input_file_descriptor",
                    "12": "file_descriptor"
                },
                "param_2": {
                    "1": "output_file_name",
                    "2": "file_name",
                    "5": "destination_file_path",
                    "3": "file_path",
                    "4": "output_file_path",
                    "6": "output_file"
                },
                "__fd": {
                    "3": "output_fd",
                    "2": "dest_fd",
                    "1": "output_descriptor",
                    "14": "output_file_descriptor",
                    "8": "destination_file_descriptor"
                },
                "iVar1": {
                    "1": "saved_errno",
                    "8": "errno_value",
                    "2": "close_error",
                    "3": "original_errno"
                },
                "iVar2": {
                    "1": "read_count",
                    "4": "bytes_read",
                    "10": "read_result",
                    "3": "read_bytes"
                },
                "_Var3": {
                    "2": "source_file_size",
                    "1": "file_pointer",
                    "6": "file_offset",
                    "4": "current_offset",
                    "3": "source_offset"
                },
                "uVar4": {
                    "2": "return_value",
                    "1": "read_result",
                    "3": "bytes_written",
                    "15": "bytes_read",
                    "5": "bytes_copied"
                },
                "sVar5": {
                    "2": "write_result",
                    "1": "num_bytes_written",
                    "23": "bytes_written",
                    "3": "bytes_read"
                },
                "piVar6": {
                    "1": "error_code_pointer",
                    "3": "error_pointer",
                    "13": "errno_location",
                    "2": "error_location",
                    "4": "errno_ptr"
                },
                "auStack_2038": {
                    "27": "buffer",
                    "2": "data_buffer"
                },
                "FUN_00105c00": {
                    "1": "reverse_and_save_file_contents",
                    "2": "extract_and_save_data",
                    "3": "reverse_and_save_data",
                    "4": "extract_data",
                    "5": "copy_file"
                },
                "open": {
                    "2": "open_file"
                },
                "FUN_00102f55": {
                    "1": "handle_error"
                },
                "lseek": {
                    "1": "set_offset"
                },
                "read": {
                    "1": "read_from_file"
                },
                "write": {
                    "1": "write_destination_file"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "close": {
                    "2": "close_file"
                }
            }
        },
        "entry": {
            "entrypoint": "0x00105cc0",
            "current_name": "entry",
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00105cf0": {
            "entrypoint": "0x00105cf0",
            "current_name": "FUNC_00105cf0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "calling": [
                "_FINI_0"
            ],
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00105d20": {
            "entrypoint": "0x00105d20",
            "current_name": "FUNC_00105d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "calling": [
                "_INIT_0"
            ],
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "_FINI_0": {
            "entrypoint": "0x00105d60",
            "current_name": "_FINI_0",
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "__cxa_finalize",
                "FUN_00105cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "_INIT_0": {
            "entrypoint": "0x00105da0",
            "current_name": "_INIT_0",
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00105d20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00105db0": {
            "entrypoint": "0x00105db0",
            "current_name": "decompiled_function_00105db0",
            "code": "\n\n\nvoid decompiled_function_00105db0(uint input_param,FILE *file_param)\n\n{\n  byte *byte_ptr;\n  uint *uint_ptr;\n  byte byte_var;\n  long *long_ptr;\n  undefined8 *undefined8_ptr;\n  undefined4 undefined4_var;\n  undefined4 undefined4_var;\n  bool bool_var;\n  bool bool_var;\n  char **char_ptr_ptr;\n  int *int_ptr;\n  undefined *undefined_ptr;\n  byte byte_var;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined4 undefined4_var;\n  FILE *file_ptr;\n  size_t size_t_var;\n  size_t size_var2;\n  byte *byte_ptr;\n  long *long_pointer;\n  FILE *file_pointer;\n  char *char_ptr;\n  long long_var;\n  ulong ulong_var;\n  undefined8 *undefined8_pointer;\n  undefined8 undefined8_var;\n  FILE *file_pointer;\n  long **long_ptr_ptr;\n  undefined8 undefined8_var;\n  char **char_ptr_ptr;\n  uint uint_var;\n  char **char_ptr_ptr3;\n  byte *byte_pointer;\n  long long_var;\n  long long_var;\n  undefined **undefined_ptr_ptr;\n  uint uint_var;\n  char *char_ptr;\n  byte *byte_pointer;\n  char *char_ptr;\n  ulong ulong_var2;\n  ulong ulong_var3;\n  ulong ulong_var4;\n  FILE *file_pointer_unaff_r12;\n  char *char_pointer_3;\n  uint uint_var;\n  int int_var2;\n  char *char_ptr;\n  bool bool_var;\n  byte byte_var;\n  undefined8 undefined8_var;\n  FILE *file_ptr6;\n  byte *byte_ptr;\n  char **char_ptr_ptr;\n  size_t size_t_var;\n  long long_var;\n  undefined undefined_var [2];\n  undefined undefined_var;\n  undefined5 undefined5_var;\n  uint uint_var;\n  \n  byte_var = 0;\n  char_ptr = (char *)(ulong)input_param;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)file_param;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  char_pointer_3 = (char *)file_param;\n  file_ptr = file_param;\n  if ((int)input_param < 2) goto LAB_001062c6;\n  char_ptr_ptr = (char **)0x7d0;\n  file_pointer_unaff_r12 = (FILE *)0x1;\n  file_ptr6 = (FILE *)0x0;\n  file_pointer = file_param;\n  do {\n    uint_var = (uint)file_pointer_unaff_r12;\n    char_ptr = (char *)(long)(int)uint_var;\n    undefined8_var = (FILE *)((long)char_ptr * 8);\n    char_pointer_3 = (char *)file_pointer;\n    if (**(char **)(&file_pointer->_flags + (long)char_ptr * 2) == '@') {\n      uint_var = (int)char_ptr_ptr - 1;\n      char_ptr_ptr = (char **)(ulong)uint_var;\n      if (uint_var == 0) {\n        long_pointer = *(long **)file_pointer;\n        char_ptr = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,char_ptr,long_pointer);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      char_ptr = *(char **)(&file_pointer->_flags + (long)char_ptr * 2) + 1;\n      int_var = stat(char_ptr,(stat *)undefined_var);\n      if (-1 < int_var) {\n        if ((uint_var & 0xf000) == 0x4000) {\n          long_pointer = *(long **)file_pointer;\n          char_ptr = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        file_ptr = fopen(char_ptr,\"r\");\n        if (file_ptr != (FILE *)0x0) {\n          int_var = fseek(file_ptr,0,2);\n          if (((int_var != -1) && (size_t_var = ftell(file_ptr), size_t_var != 0xffffffffffffffff)) &&\n             (int_var = fseek(file_ptr,0,0), int_var != -1)) {\n            byte_ptr = (byte *)xmalloc(size_t_var + 1);\n            size_var2 = fread(byte_ptr,1,size_t_var,file_ptr);\n            if ((size_t_var == size_var2) || (int_var = ferror(file_ptr), int_var == 0)) {\n              byte_ptr[size_var2] = 0;\n              byte_var = *byte_ptr;\n              byte_pointer = byte_ptr;\n              while( true ) {\n                if (byte_var == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byte_var * 2] & 0x40) == 0) break;\n                byte_var = byte_pointer[1];\n                byte_pointer = byte_pointer + 1;\n              }\n              size_t_var = strlen((char *)byte_ptr);\n              byte_ptr = (byte *)xmalloc(size_t_var + 1);\n              file_pointer = (FILE *)0x0;\n              int_var = 0;\n              bool_var = false;\n              bool_var = false;\n              bool_var = false;\n              long_var = 0;\n              byte_pointer = byte_ptr;\n              do {\n                while (((&_sch_istable)[(ulong)*byte_pointer * 2] & 0x40) != 0) {\n                  byte_pointer = byte_pointer + 1;\n                }\n                if ((int_var == 0) || (int_var + -1 <= (int)long_var)) {\n                  if (file_pointer == (FILE *)0x0) {\n                    int_var = 8;\n                    file_pointer = (FILE *)xmalloc(0x40);\n                    char_ptr_ptr = (char **)((long)&file_pointer->_flags + long_var * 8);\n                    *char_ptr_ptr = (char *)0x0;\n                  }\n                  else {\n                    int_var = int_var * 2;\n                    file_pointer = (FILE *)xrealloc(file_pointer,(long)int_var << 3);\n                    char_ptr_ptr = (char **)((long)&file_pointer->_flags + long_var * 8);\n                    *char_ptr_ptr = (char *)0x0;\n                  }\n                }\n                else {\n                  char_ptr_ptr = (char **)((long)&file_pointer->_flags + long_var * 8);\n                }\n                byte_var = *byte_pointer;\n                byte_pointer = byte_ptr;\n                while (byte_var != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byte_var * 2] & 0x40) != 0) &&\n                       (!(bool)(bool_var | bool_var | bool_var))) {\n                      bool_var = false;\n                      bool_var = false;\n                      bool_var = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!bool_var) break;\n                    byte_pointer = byte_pointer + 1;\n                    *byte_pointer = byte_var;\n                    byte_pointer = byte_pointer + 1;\n                    bool_var = false;\n                    byte_var = *byte_pointer;\n                    if (byte_var == 0) goto LAB_0010606f;\n                  }\n                  if (byte_var == 0x5c) {\n                    bool_var = true;\n                  }\n                  else if (bool_var) {\n                    if (byte_var == 0x27) {\n                      bool_var = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *byte_pointer = byte_var;\n                      byte_pointer = byte_pointer + 1;\n                    }\n                  }\n                  else if (bool_var) {\n                    if (byte_var != 0x22) goto LAB_001061f1;\n                    bool_var = false;\n                  }\n                  else if (byte_var == 0x27) {\n                    bool_var = true;\n                  }\n                  else {\n                    if (byte_var != 0x22) goto LAB_001061f1;\n                    bool_var = true;\n                  }\n                  byte_ptr = byte_pointer + 1;\n                  byte_pointer = byte_pointer + 1;\n                  byte_var = *byte_ptr;\n                }\nLAB_0010606f:\n                *byte_pointer = 0;\n                long_pointer = (long *)xstrdup(byte_ptr);\n                *char_ptr_ptr = (char *)long_pointer;\n                *(undefined8 *)(file_pointer->_shortbuf + long_var * 8 + -0x7b) = 0;\n                byte_var = *byte_pointer;\n                byte_var = (&_sch_istable)[(ulong)byte_var * 2];\n                while ((byte_var & 0x40) != 0) {\n                  byte_var = byte_pointer[1];\n                  byte_pointer = byte_pointer + 1;\n                  byte_var = (&_sch_istable)[(ulong)byte_var * 2];\n                }\n                long_var = long_var + 1;\n                if (byte_var == 0) {\n                  free(byte_ptr);\n                  if (file_pointer == file_param) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(byte_ptr);\n          }\n          fclose(file_ptr);\n        }\n      }\n    }\n    if ((int)char_ptr <= (int)(uint_var + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d2d4 < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uint_var = (uint)file_pointer_unaff_r12;\n        int_var = bfd_init();\n        char_ptr = \"fatal error: libbfd ABI mismatch\";\n        if (int_var != 0x118) goto LAB_00106803;\n        char_ptr = \"x86_64-pc-linux-gnu\";\n        uint_var = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefined_ptr = PTR_DAT_0010d2e0;\n        file_pointer_unaff_r12 = (FILE *)(ulong)uint_var;\n        if ((char)uint_var != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = FUN_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefined_ptr = PTR_DAT_0010d2e0;\n            int_var = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = int_var + 1;\n            *(code **)(undefined_ptr + (long)int_var * 8 + 0x10) = FUN_00107730;\n          }\n          else {\n            undefined8_pointer = (undefined8 *)malloc(0x110);\n            if (undefined8_pointer != (undefined8 *)0x0) {\n              *undefined8_pointer = undefined_ptr;\n              *(undefined4 *)(undefined8_pointer + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8_pointer;\n              goto LAB_0010632b;\n            }\n          }\n          long_var = 1;\n          do {\n            long_var = long_var;\n            int_var = (int)char_ptr;\n            if (int_var <= (int)long_var) break;\n            char_var = FUN_00107640(*(undefined8 *)((int *)char_pointer_3 + long_var * 2));\n            long_var = long_var + 1;\n          } while (char_var != '\\0');\n          char_ptr = (char *)((long)char_pointer_3 + long_var * 8 + -8);\n          uint_var = int_var - ((int)long_var + -1);\n          file_ptr = (FILE *)(ulong)uint_var;\n          if (_DAT_0010d2d4 != 0) {\n            char_pointer_3 = \"DhHUvVt\";\n            uint_var = 0;\n            while (int_var = getopt_long(file_ptr,char_ptr,\"DhHUvVt\",&PTR_DAT_0010d300), int_var != -1)\n            {\n              if (int_var < 0x77) {\n                if (0x43 < int_var) {\n                  switch(int_var) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uint_var = uint_var;\n                  }\n                }\n              }\n              else if (int_var == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uint_var < 2) {\nLAB_00107125:\n              char_ptr = (char *)0x0;\n              FUN_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                FUN_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                FUN_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              file_pointer_unaff_r12 = (FILE *)0x0;\n              char_pointer_3 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uint_var <= (int)char_pointer_3) goto LAB_00106f8b;\n                char_ptr = *(char **)((int *)char_ptr + (long)char_pointer_3 * 2);\n                if ((char)uint_var != '\\0') break;\n                uint_var = FUN_00107650();\n                char_pointer_3 = (char *)((long)(int *)char_pointer_3 + 1);\n                file_pointer_unaff_r12 = (FILE *)(ulong)((uint)file_pointer_unaff_r12 | uint_var);\n              }\n            }\n            while (long_var = FUN_001052a0(char_ptr), long_var < 1) {\n              uint_var = 1;\nLAB_001071c4:\n              int_ptr = (int *)char_pointer_3;\n              char_pointer_3 = (char *)((long)int_ptr + 1);\n              file_pointer_unaff_r12 = (FILE *)(ulong)((uint)file_pointer_unaff_r12 | uint_var);\n              if ((int)uint_var <= (int)char_pointer_3) {\nLAB_00106f8b:\n                    \n                xexit(file_pointer_unaff_r12);\n              }\n              char_ptr = *(char **)((char *)((long)char_ptr + 0x83) + (long)int_ptr * 8 + -0x7b);\n            }\n            int_var = open(char_ptr,2,0);\n            if (int_var < 0) {\n              bfd_set_error(1);\n              FUN_00107c10(char_ptr);\nLAB_0010737f:\n              FUN_00107c10(char_ptr);\nLAB_00107387:\n              FUN_00107c20(char_ptr);\n              int_var = bfd_get_error();\n              if (int_var == 0xd) {\n                FUN_00103bd1(CONCAT53(undefined5_var,\n                                      CONCAT12(undefined_var,CONCAT11(undefined_var[1],undefined_var[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            char_ptr = (char *)bfd_fdopenr(char_ptr,0);\n            if ((FILE *)char_ptr == (FILE *)0x0) goto LAB_0010737f;\n            char_var = bfd_check_format_matches(char_ptr,2,undefined_var);\n            if (char_var == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)char_ptr + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uint_ptr = (uint *)((long)((long)char_ptr + 0x40) + 4);\n                *uint_ptr = *uint_ptr | 0x2000;\n              }\n              (**(code **)(*(char **)((long)char_ptr + 8) + 0x1f0))(char_ptr);\n              char_var = bfd_close(char_ptr);\n              if (char_var != '\\0') {\n                uint_var = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8_var = dcgettext(0,\"%s: no archive map to update\",5);\n            FUN_00107690(undefined8_var,char_ptr);\nLAB_001073cc:\n            char_ptr = (char *)lbasename(DAT_0010d660);\n            size_t_var = strlen(char_ptr);\n            if ((size_t_var < 6) ||\n               (int_var = filename_cmp(char_ptr + (size_t_var - 6),\"ranlib\"), int_var != 0)) {\n              _DAT_0010d2d4 = 0;\n            }\n            else {\n              _DAT_0010d2d4 = 1;\n            }\n            goto LAB_001062d3;\n          }\n          undefined_ptr_ptr = &PTR_DAT_0010d300;\n          char_ptr = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          char_pointer_3 = (char *)&DAT_001096a0;\n          file_pointer = (FILE *)char_ptr;\n          file_pointer = file_ptr;\n          if ((int)uint_var < 2) goto switchD_00107462_caseD_1;\n          undefined8_var = (FILE *)CONCAT71(undefined8_var._1_7_,(char)uint_var);\nLAB_001063a3:\n          file_pointer = (FILE *)char_ptr;\n          if (**(char **)((long)char_ptr + 8) != '-') {\n            undefined_var[0] = 0x2d;\n            undefined_var = 0;\n            size_t_var = strlen(*(char **)((long)char_ptr + 8));\n            int_var = (int)size_t_var + (int)file_ptr;\n            file_pointer_unaff_r12 = (FILE *)xmalloc((long)int_var * 8);\n            undefined4_var = *(undefined4 *)((long)char_ptr + 4);\n            file_pointer_unaff_r12->_flags = *(int *)char_ptr;\n            *(undefined4 *)&file_pointer_unaff_r12->field_0x4 = undefined4_var;\n            char_ptr_ptr = *(char ***)((long)char_ptr + 8);\n            file_ptr6 = (FILE *)((long)char_ptr + 0x10);\n            char_ptr_ptr = char_ptr_ptr;\n            if (*(char *)char_ptr_ptr == '\\0') {\n              char_ptr_ptr3 = &file_pointer_unaff_r12->_IO_read_ptr;\n            }\n            else {\n              byte_ptr = undefined_var;\n              undefined_var[1] = *(char *)char_ptr_ptr;\n              char_ptr = (char *)xstrdup();\n              char_ptr_ptr3 = &file_pointer_unaff_r12->_IO_read_end;\n              file_pointer_unaff_r12->_IO_read_ptr = char_ptr;\n              if (*(char *)((long)char_ptr_ptr + 1) != '\\0') {\n                undefined_var[1] = *(char *)((long)char_ptr_ptr + 1);\n                char_ptr = (char *)xstrdup(byte_ptr);\n                char_ptr_ptr3 = &file_pointer_unaff_r12->_IO_read_base;\n                file_pointer_unaff_r12->_IO_read_end = char_ptr;\n                if (*(char *)((long)char_ptr_ptr + 2) != '\\0') {\n                  undefined_var[1] = *(char *)((long)char_ptr_ptr + 2);\n                  char_ptr = (char *)xstrdup(byte_ptr);\n                  char_ptr_ptr3 = &file_pointer_unaff_r12->_IO_write_base;\n                  file_pointer_unaff_r12->_IO_read_base = char_ptr;\n                  if (*(char *)((long)char_ptr_ptr + 3) != '\\0') {\n                    char_ptr_ptr3 = &file_pointer_unaff_r12->_IO_write_ptr;\n                    undefined_var[1] = *(char *)((long)char_ptr_ptr + 3);\n                    char_ptr = (char *)xstrdup(byte_ptr);\n                    file_pointer_unaff_r12->_IO_write_base = char_ptr;\n                    char_var = *(char *)((long)char_ptr_ptr + 4);\n                    char_ptr_ptr = char_ptr_ptr3;\n                    if (char_var != '\\0') {\n                      char_ptr = (char *)((long)char_ptr_ptr + 4);\n                      char_ptr_ptr = char_ptr_ptr3;\n                      do {\n                        char_ptr_ptr3 = char_ptr_ptr + 1;\n                        undefined_var[1] = char_var;\n                        char_ptr = (char *)xstrdup(byte_ptr);\n                        char_ptr = char_ptr + 1;\n                        *char_ptr_ptr = char_ptr;\n                        char_var = *char_ptr;\n                        char_ptr_ptr = char_ptr_ptr3;\n                        char_ptr_ptr = char_ptr_ptr3;\n                      } while (char_var != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            long_var = (long)(int)file_ptr;\n            int_ptr = (int *)char_ptr + long_var * 2;\n            if (file_ptr6 < int_ptr) {\n              ulong_var = long_var * 8 - 0x11;\n              if ((ulong_var < 0x18) || (char_ptr_ptr3 == (char **)((long)char_ptr + 0x18))) {\n                *char_ptr_ptr3 = *(char **)((long)char_ptr + 0x10);\n                if (((char **)((long)char_ptr + 0x18) < int_ptr) &&\n                   ((((char_ptr_ptr3[1] = *(char **)((long)char_ptr + 0x18),\n                      (char **)((long)char_ptr + 0x20) < int_ptr &&\n                      (char_ptr_ptr3[2] = *(char **)((long)char_ptr + 0x20),\n                      (char **)((long)char_ptr + 0x28) < int_ptr)) &&\n                     (char_ptr_ptr3[3] = *(char **)((long)char_ptr + 0x28),\n                     (char **)((long)char_ptr + 0x30) < int_ptr)) &&\n                    (char_ptr_ptr3[4] = *(char **)((long)char_ptr + 0x30),\n                    (char **)((long)char_ptr + 0x38) < int_ptr)))) {\n                  char_ptr_ptr3[5] = *(char **)((long)char_ptr + 0x38);\n                  char_ptr_ptr = char_ptr_ptr3 + 6;\n                  for (char_ptr_ptr = (char **)((long)char_ptr + 0x40); char_ptr_ptr < int_ptr;\n                      char_ptr_ptr = char_ptr_ptr + (ulong)byte_var * -2 + 1) {\n                    *char_ptr_ptr = *char_ptr_ptr;\n                    char_ptr_ptr = char_ptr_ptr + (ulong)byte_var * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4_var = *(undefined4 *)((long)((long)char_ptr + 0x10) + 4);\n                undefined4_var = *(undefined4 *)((long)char_ptr + 0x18);\n                undefined4_var = *(undefined4 *)((long)((long)char_ptr + 0x18) + 4);\n                ulong_var2 = (ulong_var >> 3) + 1;\n                *(undefined4 *)char_ptr_ptr3 = *(undefined4 *)((long)char_ptr + 0x10);\n                *(undefined4 *)((long)char_ptr_ptr3 + 4) = undefined4_var;\n                *(undefined4 *)(char_ptr_ptr3 + 1) = undefined4_var;\n                *(undefined4 *)((long)char_ptr_ptr3 + 0xc) = undefined4_var;\n                undefined4_var = *(undefined4 *)((long)((long)char_ptr + 0x20) + 4);\n                undefined4_var = *(undefined4 *)((long)char_ptr + 0x28);\n                undefined4_var = *(undefined4 *)((long)((long)char_ptr + 0x28) + 4);\n                ulong_var = ulong_var2 >> 1;\n                *(undefined4 *)(char_ptr_ptr3 + 2) = *(undefined4 *)((long)char_ptr + 0x20);\n                *(undefined4 *)((long)char_ptr_ptr3 + 0x14) = undefined4_var;\n                *(undefined4 *)(char_ptr_ptr3 + 3) = undefined4_var;\n                *(undefined4 *)((long)char_ptr_ptr3 + 0x1c) = undefined4_var;\n                if (ulong_var != 2) {\n                  undefined4_var = *(undefined4 *)((long)((long)char_ptr + 0x30) + 4);\n                  undefined4_var = *(undefined4 *)((long)char_ptr + 0x38);\n                  undefined4_var = *(undefined4 *)((long)((long)char_ptr + 0x38) + 4);\n                  *(undefined4 *)(char_ptr_ptr3 + 4) = *(undefined4 *)((long)char_ptr + 0x30);\n                  *(undefined4 *)((long)char_ptr_ptr3 + 0x24) = undefined4_var;\n                  *(undefined4 *)(char_ptr_ptr3 + 5) = undefined4_var;\n                  *(undefined4 *)((long)char_ptr_ptr3 + 0x2c) = undefined4_var;\n                  if (ulong_var != 3) {\n                    ulong_var3 = 3;\n                    do {\n                      ulong_var4 = ulong_var3 + 1;\n                      char_ptr = (char *)((long)char_ptr + 0x83) + ulong_var3 * 0x10 + -0x73;\n                      undefined4_var = *(undefined4 *)(char_ptr + 4);\n                      undefined4_var = *(undefined4 *)(char_ptr + 8);\n                      undefined4_var = *(undefined4 *)(char_ptr + 0xc);\n                      char_ptr_ptr = char_ptr_ptr3 + ulong_var3 * 2;\n                      *(undefined4 *)char_ptr_ptr = *(undefined4 *)char_ptr;\n                      *(undefined4 *)((long)char_ptr_ptr + 4) = undefined4_var;\n                      *(undefined4 *)(char_ptr_ptr + 1) = undefined4_var;\n                      *(undefined4 *)((long)char_ptr_ptr + 0xc) = undefined4_var;\n                      ulong_var3 = ulong_var4;\n                    } while (ulong_var4 != ulong_var);\n                  }\n                }\n                if ((ulong_var2 & 1) != 0) {\n                  char_ptr_ptr3[ulong_var2 & 0xfffffffffffffffe] =\n                       *(char **)((long)file_ptr6 + (ulong_var2 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              char_ptr_ptr3 = char_ptr_ptr3 + long_var + -2;\n            }\n            file_ptr = (FILE *)(ulong)(int_var - 1);\n            *char_ptr_ptr3 = (char *)0x0;\n            char_ptr = (char *)file_pointer_unaff_r12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uint_var = (uint)file_pointer_unaff_r12;\n            uint_var = getopt_long((ulong)file_ptr & 0xffffffff,char_ptr,file_pointer,undefined_ptr_ptr,0);\n            char_ptr = (char *)file_pointer;\n            if (uint_var == 0xffffffff) break;\n            if (((uint_var - 100 < 0x15) && ((0x117201UL >> ((ulong)(uint_var - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            file_pointer = (FILE *)char_ptr;\n            if (uint_var < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)char_pointer_3 + (long)((int *)char_pointer_3)[uint_var]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            FUN_0010342d(0);\n            char_ptr = (char *)file_pointer;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uint_var = DAT_0010d64c;\n          file_pointer = (FILE *)char_ptr;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)file_ptr <= _optind || (_optind < 1)))) {\n              uint_var = 0;\n              goto LAB_001066aa;\n            }\n            char_ptr = (char *)((long)char_ptr + (long)_optind * 8 + -8);\n            uint_var = (int)file_ptr - (_optind + -1);\n            file_ptr = (FILE *)(ulong)uint_var;\n            _optind = 0;\n            if (1 < (int)uint_var) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          file_pointer_unaff_r12 = (FILE *)((ulong)undefined8_var & 0xff);\n          uint_var = (uint)file_pointer_unaff_r12;\n          undefined_ptr_ptr = (undefined **)((int *)char_ptr + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              FUN_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              file_pointer = (FILE *)char_ptr;\n              if (*undefined_ptr_ptr == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uint_var == 3) goto LAB_00106abc;\n                  if (uint_var != 0) goto LAB_00106700;\nLAB_00106eff:\n                  char_ptr = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uint_var == 3) || (uint_var == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefined4_var = FUN_00107650();\n                    \n                  xexit(undefined4_var);\n                }\nLAB_00106abc:\n                if (uint_var == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  char_ptr = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              char_ptr = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*undefined_ptr_ptr;\n                char_ptr = (char *)0x1;\n                char_ptr = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                char_ptr = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  int_var = (int)char_ptr;\n                  if (*(char **)((long)undefined_ptr_ptr + (long)int_var * 2 * 4) == (char *)0x0) {\n                    undefined8_var = dcgettext(0,\"`N\\' missing value.\",5);\n                    FUN_00107690(undefined8_var);\n                    uint_var = uint_var;\nLAB_00107548:\n                    if (uint_var == 2) {\nLAB_0010704f:\n                      char_ptr = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  char_ptr = (char *)(ulong)(int_var + 1);\n                  long_var = strtol(*(char **)((long)undefined_ptr_ptr + (long)int_var * 2 * 4),(char **)0x0,10)\n                  ;\n                  char_ptr = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)long_var;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              long_var = (long)(int)char_ptr;\n              file_pointer = (FILE *)char_ptr;\n              if (*(long *)(int *)((long)undefined_ptr_ptr + long_var * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              file_pointer = (FILE *)((long)undefined_ptr_ptr + (long_var + 1) * 2 * 4);\n              if (*(FILE **)file_pointer == (FILE *)0x0) {\n                char_pointer_3 = (char *)0x0;\n                file_pointer = (FILE *)0x0;\n              }\n              else if (*(long *)((long)undefined_ptr_ptr + (long_var + 2) * 2 * 4) == 0) {\n                char_pointer_3 = (char *)0x1;\n              }\n              else if (*(long *)((long)undefined_ptr_ptr + (long_var + 3) * 2 * 4) == 0) {\n                char_pointer_3 = (char *)0x2;\n              }\n              else if (*(long *)((long)undefined_ptr_ptr + (long_var + 4) * 2 * 4) == 0) {\n                char_pointer_3 = (char *)0x3;\n              }\n              else if (*(long *)((long)undefined_ptr_ptr + (long_var + 5) * 2 * 4) == 0) {\n                char_pointer_3 = (char *)0x4;\n              }\n              else {\n                file_ptr = (FILE *)0x5;\n                do {\n                  char_pointer_3 = (char *)file_ptr;\n                  file_ptr = (FILE *)((long)(int *)char_pointer_3 + 1);\n                } while (*(long *)((int *)((long)undefined_ptr_ptr + long_var * 2 * 4) + (long)file_ptr * 2) !=\n                         0);\n              }\n              undefined8_pointer = (undefined8 *)FUN_00105300();\n              file_ptr = file_pointer;\n              if (DAT_0010d64c == 5) {\n                char_ptr = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8_pointer + 0x49) & 0x10) == 0) {\n                  char_ptr = (char *)file_pointer;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  FUN_00105480(undefined8_pointer,FUN_00107740,char_ptr,(ulong)char_pointer_3 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                size_t_var = strlen(DAT_0010d628);\n                char_ptr = \"__.LIBDEP\";\n                char_ptr = (char *)(size_t_var + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8_pointer);\n                if (DAT_0010d620 == 0) {\n                  char_ptr = \"Cannot create libdeps record.\";\n                }\n                else {\n                  long_var = bfd_find_target(\"binary\",DAT_0010d620);\n                  char_ptr = \"Cannot set libdeps record type to binary.\";\n                  if (long_var != 0) {\n                    char_var = bfd_set_format(DAT_0010d620,1,5);\n                    char_ptr = \"Cannot set libdeps object format.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    char_var = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    char_ptr = \"Cannot make libdeps object writable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    file_pointer = (FILE *)bfd_bwrite(DAT_0010d628,char_ptr,DAT_0010d620);\n                    char_ptr = \"Cannot write libdeps record.\";\n                    if (file_pointer != (FILE *)char_ptr) goto LAB_00106803;\n                    char_var = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    char_ptr = \"Cannot make libdeps object readable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    long_var = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    char_ptr = \"Cannot reset libdeps record type.\";\n                    if (long_var == 0) goto LAB_00106803;\n                    int_var = (int)char_pointer_3;\n                    undefined8_var = (FILE *)((long)(int_var + 2) * 8);\n                    char_ptr = (char *)xmalloc(undefined8_var,\"Cannot reset libdeps record type.\");\n                    if (int_var == 0) {\n                      long_var = 0;\n                    }\n                    else {\n                      undefined4_var = *(undefined4 *)&file_pointer->field_0x4;\n                      *(int *)char_ptr = file_pointer->_flags;\n                      *(undefined4 *)((long)char_ptr + 4) = undefined4_var;\n                      long_var = 8;\n                      char_ptr_ptr = (char **)((long)char_ptr + 8);\n                      for (char_pointer_3 = undefined8_var[-1]._unused2 + 4; char_pointer_3 != (char *)0x0;\n                          char_pointer_3 = char_pointer_3 + -1) {\n                        *(undefined *)char_ptr_ptr = *(undefined *)&file_pointer->_flags;\n                        file_pointer = (FILE *)((long)file_pointer + (ulong)byte_var * -2 + 1);\n                        char_ptr_ptr = (char **)((long)char_ptr_ptr + (ulong)byte_var * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)char_ptr + long_var) = \"__.LIBDEP\";\n                    char_pointer_3 = (char *)(ulong)(int_var + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)char_ptr + -0xd8))->_unused2 + 0xc + (long)undefined8_var) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      file_pointer = (FILE *)char_ptr;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                char_ptr = (char *)file_pointer;\n                if (file_pointer == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                file_ptr = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                char_ptr = (char *)file_pointer;\n                if ((file_pointer != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  FUN_00105570(undefined8_pointer,char_ptr,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                char_ptr = (char *)file_pointer;\nswitchD_00106ed8_caseD_3:\n                FUN_00105480(undefined8_pointer,FUNC_00107890,char_ptr,(ulong)char_pointer_3 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                char_ptr = (char *)file_pointer;\nswitchD_00106ed8_caseD_4:\n                FUN_00105480(undefined8_pointer,FUN_00103a78,char_ptr,(ulong)char_pointer_3 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                char_ptr = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (file_pointer == (FILE *)0x0) break;\nLAB_00106afb:\n                file_ptr = (FILE *)(undefined8_pointer + 0x1e);\n                do {\n                  file_pointer_unaff_r12 = file_ptr;\n                  if (*(FILE **)file_pointer == (FILE *)0x0) {\nLAB_00106b9f:\n                    FUNC_001058b0(undefined8_pointer);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    long_pointer = *(long **)file_pointer_unaff_r12;\n                    char_ptr = *(char **)file_pointer;\n                    if (long_pointer == (long *)0x0) {\n                      undefined8_var = *undefined8_pointer;\n                      undefined8_var = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      FUN_00107690(undefined8_var,char_ptr,undefined8_var);\n                      char_pointer_3 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    long_var = *long_pointer;\n                    undefined8_var = FUN_00105830(char_ptr,undefined8_pointer);\n                    int_var = filename_cmp(undefined8_var,long_var);\n                    if (int_var == 0) break;\n                    file_pointer_unaff_r12 = (FILE *)(*(long **)file_pointer_unaff_r12 + 0x1e);\n                  }\n                  *(long **)file_pointer_unaff_r12 = (long *)long_pointer[0x1e];\n                  long_ptr_ptr = (long **)FUN_00105870(file_ptr,3,0);\n                  bool_var = DAT_0010d60c != 0;\n                  long_ptr = *long_ptr_ptr;\n                  *long_ptr_ptr = long_pointer;\n                  long_pointer[0x1e] = (long)long_ptr;\n                  if (bool_var) {\n                    printf(\"m - %s\\n\",*(FILE **)file_pointer);\n                  }\n                  file_pointer = (FILE *)&file_pointer->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            FUN_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          int_var = fileno(_stdin);\n          _DAT_0010d608 = isatty(int_var);\n          FUN_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4_var = bfd_get_error();\n        file_pointer = (FILE *)bfd_errmsg(undefined4_var);\n        undefined8_var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        int_var = FUN_00107690(undefined8_var,\"x86_64-pc-linux-gnu\",file_pointer);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          undefined_ptr_ptr = (undefined **)char_ptr;\n          file_pointer = (FILE *)char_ptr;\n          switch(int_var) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uint_var = (uint)file_pointer_unaff_r12;\n            char_ptr = \"libdeps specified more than once\";\n            char_ptr = (char *)file_pointer;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        char_ptr = \"two different operation options specified\";\n        char_ptr = (char *)file_pointer;\nLAB_00106803:\n        undefined8_var = dcgettext(0,char_ptr,5);\n        FUN_00107690(undefined8_var);\nLAB_00106814:\n        int_var = (int)char_ptr;\n        file_pointer = (FILE *)xmalloc(8);\n        *(long **)file_pointer = (long *)0x0;\n        if ((FILE *)char_pointer_3 == file_param) {\nLAB_00106834:\n          if (*(long **)char_pointer_3 == (long *)0x0) {\n            int_var = 0;\n          }\n          else {\n            long_var = 1;\n            do {\n              int_var = (int)long_var;\n              long_var = long_var * 2;\n              long_var = long_var + 1;\n            } while (*(long *)((int *)char_pointer_3 + long_var) != 0);\n          }\n          file_pointer = (FILE *)xmalloc((long)(int_var + 1) << 3);\n          long_pointer = *(long **)char_pointer_3;\n          long_var = 0;\n          while (long_pointer != (long *)0x0) {\n            undefined8_var = xstrdup();\n            *(undefined8 *)((long)&file_pointer->_flags + long_var) = undefined8_var;\n            long_pointer = *(long **)((char *)((long)char_pointer_3 + 0x83) + long_var + -0x7b);\n            long_var = long_var + 8;\n          }\n          *(undefined8 *)((long)&file_pointer->_flags + long_var) = 0;\nLAB_0010610a:\n          int_var = (int)char_ptr;\n          char_pointer_3 = (char *)file_pointer;\n          if (*(long **)file_pointer == (long *)0x0) goto LAB_00106a80;\n          long_var = 0;\n          do {\n            long_var = long_var + 1;\n            long_var = long_var * 8;\n            long_var = long_var;\n          } while (*(long *)(file_pointer->_shortbuf + long_var + -0x7b) != 0);\n          size_t_var = long_var * 8;\n        }\n        else {\nLAB_00106a80:\n          long_var = 0;\n          size_t_var = 0;\n        }\n        long_var = (long)char_ptr * 2;\n        char_ptr = (char *)((long)(char **)char_ptr + long_var);\n        free(*(void **)((int *)char_pointer_3 + long_var));\n        file_pointer = (FILE *)xrealloc(char_pointer_3,(long_var + 1 + (long)int_var) * 8);\n        uint_var = int_var + -1 + (int)long_var;\n        char_ptr = (char *)(ulong)uint_var;\n        memmove(&file_pointer->_flags + (long)char_ptr * 2,\n                (void *)((long)&file_pointer->_IO_read_ptr + (long)undefined8_var),\n                (long)(int)(int_var - uint_var) << 3);\n        memcpy((void *)((long)&undefined8_var->_flags + (long)&file_pointer->_flags),file_pointer,size_t_var);\n        free(file_pointer);\n        free(byte_ptr);\n        fclose(file_ptr);\n        uint_var = (int)file_ptr6 + 1;\n        file_pointer_unaff_r12 = undefined8_var;\n        char_pointer_3 = (char *)file_pointer;\n        undefined8_var = file_pointer;\n        if ((int)uint_var < (int)uint_var) goto LAB_001061ce;\n      } while( true );\n    }\n    uint_var = uint_var + 1;\n    file_ptr6 = file_pointer_unaff_r12;\nLAB_001061ce:\n    file_pointer_unaff_r12 = (FILE *)(ulong)uint_var;\n  } while( true );\nswitchD_00107462_caseD_0:\n  int_var = getopt_long((ulong)file_ptr & 0xffffffff,char_ptr,file_pointer,\"x86_64-pc-linux-gnu\");\n  char_ptr = (char *)file_pointer;\n  if (int_var == -1) goto LAB_00106680;\n  if ((0x14 < int_var - 100U) || ((0x117201UL >> ((byte)(int_var - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8_var = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  FUN_00107920(undefined8_var);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)char_ptr == (FILE *)0x0) {\n    if ((char)file_ptr != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  int_var2 = 0;\n  int_var = strcmp((char *)*(FILE **)char_ptr,\"__.SYMDEF\");\n  undefined8_ptr = undefined8_pointer;\n  if (int_var == 0) {\n    *(byte *)((long)undefined8_pointer + 0x49) = *(byte *)((long)undefined8_pointer + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      long_pointer = undefined8_ptr + 0x1e;\n      if ((undefined8 *)*long_pointer == (undefined8 *)0x0) break;\n      undefined8_var = *(undefined8 *)*long_pointer;\n      undefined8_var = FUN_00105830(*(FILE **)char_ptr,undefined8_pointer);\n      int_var = filename_cmp(undefined8_var,undefined8_var);\n      if ((int_var == 0) &&\n         ((DAT_0010d634 == '\\0' || (int_var2 = int_var2 + 1, int_var2 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)char_ptr);\n        }\n        *long_pointer = *(long *)(*long_pointer + 0xf0);\n        file_ptr = file_pointer_unaff_r12;\n        goto LAB_00106d38;\n      }\n      undefined8_ptr = (undefined8 *)*long_pointer;\n    }\n    if (DAT_0010d60c != 0) {\n      file_pointer = *(FILE **)char_ptr;\n      char_ptr = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(char_ptr,file_pointer);\n    }\n  }\nLAB_00106d38:\n  char_ptr = (char *)((long)char_ptr + 8);\n  goto LAB_00106b89;\n}\n\n",
            "renaming": {
                "param_1": "input_param",
                "param_2": "file_param",
                "pbVar1": "byte_ptr",
                "puVar2": "uint_ptr",
                "bVar3": "byte_var",
                "plVar4": "long_ptr",
                "puVar5": "undefined8_ptr",
                "uVar6": "undefined4_var",
                "uVar7": "undefined4_var",
                "bVar8": "bool_var",
                "bVar9": "bool_var",
                "ppcVar10": "char_ptr_ptr",
                "piVar11": "int_ptr",
                "puVar12": "undefined_ptr",
                "bVar13": "byte_var",
                "cVar14": "char_var",
                "iVar15": "int_var",
                "uVar16": "uint_var",
                "uVar17": "undefined4_var",
                "pFVar18": "file_ptr",
                "sVar19": "size_t_var",
                "sVar20": "size_var2",
                "__ptr": "byte_ptr",
                "plVar21": "long_pointer",
                "pFVar22": "file_pointer",
                "pcVar23": "char_ptr",
                "lVar24": "long_var",
                "uVar25": "ulong_var",
                "puVar26": "undefined8_pointer",
                "uVar27": "undefined8_var",
                "pFVar28": "file_pointer",
                "pplVar29": "long_ptr_ptr",
                "uVar30": "undefined8_var",
                "ppcVar31": "char_ptr_ptr",
                "extraout_EDX": "uint_var",
                "ppcVar32": "char_ptr_ptr3",
                "pbVar33": "byte_pointer",
                "lVar34": "long_var",
                "lVar35": "long_var",
                "ppuVar36": "undefined_ptr_ptr",
                "uVar37": "uint_var",
                "unaff_RBP": "char_ptr",
                "pbVar38": "byte_pointer",
                "pcVar39": "char_ptr",
                "uVar40": "ulong_var2",
                "uVar41": "ulong_var3",
                "uVar42": "ulong_var4",
                "unaff_R12": "file_pointer_unaff_r12",
                "pcVar43": "char_pointer_3",
                "uVar44": "uint_var",
                "iVar45": "int_var2",
                "pcVar46": "char_ptr",
                "bVar47": "bool_var",
                "bVar48": "byte_var",
                "local_130": "undefined8_var",
                "local_128": "file_ptr6",
                "local_118": "byte_ptr",
                "local_110": "char_ptr_ptr",
                "local_108": "size_t_var",
                "local_100": "long_var",
                "local_c8": "undefined_var",
                "uStack_c6": "undefined_var",
                "uStack_c5": "undefined5_var",
                "local_b0": "uint_var",
                "puVar36": "undefined_pointer_pointer1",
                "FUN_00105db0": "decompiled_function_00105db0",
                "plVar29": "long_ptr_ptr",
                "bVar33": "byte_var",
                "pcVar31": "ptr_char31",
                "lVar29": "ptr_arr3"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "setlocale",
                "fopen",
                "bfd_make_readable",
                "FUN_00107cc0",
                "FUN_00107650",
                "bfd_errmsg",
                "bfd_plugin_set_program_name",
                "FUN_00105480",
                "open",
                "xmalloc",
                "xrealloc",
                "xexit",
                "bindtextdomain",
                "FUN_001052a0",
                "FUN_00107920",
                "bfd_create",
                "FUN_001075e0",
                "strcmp",
                "FUN_00105830",
                "xmalloc_set_program_name",
                "filename_cmp",
                "FUN_00105870",
                "FUN_00105570",
                "bfd_set_format",
                "FUN_00107890",
                "bfd_bwrite",
                "FUN_00107640",
                "fclose",
                "FUN_0010394a",
                "ferror",
                "isatty",
                "bfd_plugin_set_plugin",
                "fseek",
                "strlen",
                "strtol",
                "printf",
                "textdomain",
                "malloc",
                "FUN_00103e95",
                "bfd_check_format_matches",
                "FUN_00107740",
                "bfd_init",
                "FUN_00103bd1",
                "ftell",
                "FUN_00103a78",
                "bfd_close",
                "getopt_long",
                "FUN_00107690",
                "bfd_get_error",
                "fread",
                "FUN_00105300",
                "bfd_make_writable",
                "bfd_set_default_target",
                "FUN_00107c10",
                "xstrdup",
                "fileno",
                "free",
                "memmove",
                "FUN_00107c20",
                "dcgettext",
                "FUN_00107730",
                "fprintf",
                "FUN_001058b0",
                "bfd_fdopenr",
                "bfd_set_error_program_name",
                "bfd_set_error",
                "lbasename",
                "FUN_0010342d",
                "stat",
                "memcpy",
                "bfd_find_target"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "param",
                    "1": "file_name",
                    "8": "input_param",
                    "6": "argc"
                },
                "param_2": {
                    "7": "file_param",
                    "2": "parameter_2",
                    "1": "param_two",
                    "6": "argv",
                    "3": "file_pointer"
                },
                "pbVar1": {
                    "1": "bytes_array",
                    "7": "byte_ptr",
                    "3": "byte_pointer_1",
                    "2": "byte_array",
                    "4": "byte_pointer"
                },
                "puVar2": {
                    "9": "uint_ptr",
                    "7": "uint_pointer",
                    "1": "pointer2",
                    "2": "uint_pointer_1",
                    "4": "ptr2"
                },
                "bVar3": {
                    "1": "byte_var_3",
                    "2": "bool_value",
                    "15": "byte_var"
                },
                "plVar4": {
                    "1": "lng_var",
                    "2": "long_pointer_1",
                    "6": "long_pointer",
                    "10": "long_ptr",
                    "3": "ptr3"
                },
                "puVar5": {
                    "2": "undefined8_pointer_1",
                    "1": "ptr_var",
                    "7": "undefined8_ptr",
                    "3": "ptr4"
                },
                "uVar6": {
                    "1": "uint_var6",
                    "2": "uint_var1",
                    "3": "uint_var",
                    "4": "undefined4_var"
                },
                "uVar7": {
                    "2": "undefined4_var2",
                    "1": "variable3",
                    "3": "uint_var",
                    "4": "undefined4_var"
                },
                "bVar8": {
                    "7": "bool_var",
                    "3": "bool_var_1",
                    "1": "bool_variable_1",
                    "2": "bool_var8",
                    "6": "bool_var1"
                },
                "bVar9": {
                    "1": "bool_var_9",
                    "7": "bool_var",
                    "2": "bool2",
                    "6": "bool_var2",
                    "3": "bool_var_2"
                },
                "ppcVar10": {
                    "1": "string_pointer_pointer",
                    "2": "char_pointer_pointer",
                    "9": "char_ptr_ptr",
                    "4": "char_double_pointer"
                },
                "piVar11": {
                    "12": "int_ptr",
                    "1": "pointer_5",
                    "6": "int_pointer",
                    "2": "int_pointer_1"
                },
                "puVar12": {
                    "2": "undefined_pointer_1",
                    "1": "pointer_6",
                    "8": "undefined_ptr",
                    "7": "undefined_pointer"
                },
                "bVar13": {
                    "3": "byte_var2",
                    "2": "byte_var1",
                    "1": "byte_value",
                    "8": "byte_var"
                },
                "cVar14": {
                    "14": "char_var",
                    "2": "char1",
                    "1": "char_variable_1"
                },
                "iVar15": {
                    "1": "int_value",
                    "13": "int_var",
                    "2": "int_var15"
                },
                "uVar16": {
                    "1": "uint_var1",
                    "2": "uint_var16",
                    "12": "uint_var"
                },
                "uVar17": {
                    "2": "undefined4_var3",
                    "1": "uint_var3",
                    "3": "uint_var",
                    "4": "undefined4_var"
                },
                "pFVar18": {
                    "1": "file_var1",
                    "5": "file_pointer",
                    "3": "file_ptr1",
                    "2": "file_var"
                },
                "sVar19": {
                    "4": "size_var",
                    "1": "size_value1",
                    "6": "size_t_var",
                    "2": "size1"
                },
                "sVar20": {
                    "1": "size_t_var20",
                    "5": "size_var2",
                    "2": "size_var",
                    "3": "size2"
                },
                "__ptr": {
                    "1": "byte_pointer_3",
                    "9": "byte_ptr",
                    "2": "ptr6",
                    "6": "byte_pointer"
                },
                "plVar21": {
                    "2": "long_ptr1",
                    "1": "ptr_var",
                    "5": "long_pointer",
                    "4": "long_ptr",
                    "3": "long_ptr2"
                },
                "pFVar22": {
                    "1": "file_ptr1",
                    "2": "file_ptr",
                    "3": "file_pointer_2",
                    "4": "file_ptr2",
                    "5": "file_pointer"
                },
                "pcVar23": {
                    "3": "char_var",
                    "1": "pointer_9",
                    "6": "char_ptr",
                    "2": "char_pointer_1",
                    "4": "char_pointer"
                },
                "lVar24": {
                    "2": "long_variable",
                    "1": "long4",
                    "10": "long_var",
                    "5": "long_var1"
                },
                "uVar25": {
                    "11": "ulong_var",
                    "2": "ulong_var25",
                    "1": "variable_8",
                    "4": "ulong_var1"
                },
                "puVar26": {
                    "2": "undefined8_pointer_2",
                    "1": "void_ptr2",
                    "5": "undefined8_pointer",
                    "4": "undefined8_ptr"
                },
                "uVar27": {
                    "1": "variable_9",
                    "2": "undefined8_var1",
                    "10": "undefined8_var"
                },
                "pFVar28": {
                    "2": "file_ptr",
                    "1": "file_var3",
                    "4": "file_ptr3",
                    "5": "file_pointer",
                    "3": "file_pointer_3"
                },
                "pplVar29": {
                    "1": "ptr_array",
                    "2": "long_pointer_pointer",
                    "7": "long_ptr_ptr"
                },
                "uVar30": {
                    "1": "uint_var30",
                    "5": "undefined8_var",
                    "4": "undefined8_var2"
                },
                "ppcVar31": {
                    "1": "char_double_pointer",
                    "2": "char_ptr_ptr"
                },
                "extraout_EDX": {
                    "1": "uint_var32",
                    "2": "extra_output_edx",
                    "5": "uint_var"
                },
                "ppcVar32": {
                    "1": "pointer_to_pointer_4",
                    "2": "char_ptr_ptr3"
                },
                "pbVar33": {
                    "2": "ptr9",
                    "1": "byte_pointer_3",
                    "3": "byte_pointer"
                },
                "lVar34": {
                    "2": "long_var34",
                    "4": "long_var2",
                    "1": "long5",
                    "7": "long_var"
                },
                "lVar35": {
                    "2": "long_var35",
                    "1": "long3",
                    "7": "long_var",
                    "4": "long_var3"
                },
                "ppuVar36": {
                    "6": "undefined_ptr_ptr",
                    "1": "undefined_double_pointer_1",
                    "2": "undefined_pointer_pointer"
                },
                "uVar37": {
                    "1": "uint_var_2",
                    "2": "uint_variable",
                    "4": "uint_var"
                },
                "unaff_RBP": {
                    "1": "char_pointer38",
                    "5": "char_ptr",
                    "4": "char_pointer",
                    "2": "char_ptr2"
                },
                "pbVar38": {
                    "2": "byte_ptr4",
                    "1": "byte_pointer39",
                    "4": "byte_pointer"
                },
                "pcVar39": {
                    "1": "char_ptr2",
                    "2": "char_pointer"
                },
                "uVar40": {
                    "1": "ulong_var_2",
                    "3": "ulong_var",
                    "2": "ulong2",
                    "5": "ulong_var2"
                },
                "uVar41": {
                    "5": "ulong_var3",
                    "3": "ulong_var",
                    "2": "ulong3",
                    "1": "ulong_var5"
                },
                "uVar42": {
                    "1": "ulong_variable_4",
                    "3": "ulong_var",
                    "2": "ulong4",
                    "5": "ulong_var4"
                },
                "unaff_R12": {
                    "1": "p_file_unaff12"
                },
                "pcVar43": {
                    "1": "char_var4"
                },
                "uVar44": {
                    "1": "uint_variable_4",
                    "3": "uint_var",
                    "2": "uint_var3"
                },
                "iVar45": {
                    "1": "variable_15",
                    "2": "int_var45",
                    "4": "int_var2"
                },
                "pcVar46": {
                    "1": "char_pointer_4",
                    "2": "char_ptr"
                },
                "bVar47": {
                    "1": "bool_var_47",
                    "2": "bool_var_3"
                },
                "bVar48": {
                    "1": "byte_var_3",
                    "2": "byte_var"
                },
                "local_130": {
                    "1": "file_ptr4",
                    "3": "undefined8_var",
                    "2": "file_pointer"
                },
                "local_128": {
                    "1": "file_pointer2",
                    "3": "file_ptr6",
                    "2": "file_var"
                },
                "local_118": {
                    "3": "byte_ptr",
                    "2": "byte_ptr4",
                    "1": "byte_pointer5"
                },
                "local_110": {
                    "2": "char_ptr_ptr2",
                    "1": "local_string_array",
                    "3": "char_ptr_ptr"
                },
                "local_108": {
                    "1": "local_size",
                    "3": "size_t_var",
                    "2": "size_t_var3"
                },
                "local_100": {
                    "1": "local_long",
                    "5": "long_var",
                    "3": "long_var4"
                },
                "local_c8": {
                    "1": "undefined_var4",
                    "2": "local_undefined_array",
                    "3": "undefined_var"
                },
                "uStack_c6": {
                    "1": "local_undefined",
                    "2": "u_stack_var",
                    "4": "undefined_var"
                },
                "uStack_c5": {
                    "1": "local_undefined",
                    "2": "undefined5_var1",
                    "5": "undefined5_var"
                },
                "local_b0": {
                    "1": "local_var",
                    "2": "uint_var5",
                    "5": "uint_var"
                },
                "uVar45": {
                    "1": "uint_value8"
                },
                "puVar36": {
                    "1": "undefined_pointer_pointer1"
                },
                "param_2->_flags": {
                    "1": "file_param->_flags"
                },
                "param_2->_flags + unaff_RBP * 2": {
                    "1": "file_var->_flags"
                },
                "unaff_R12->_flags": {
                    "1": "file_var5->_flags"
                },
                "unaff_R12->_shortbuf": {
                    "1": "shortbuf"
                },
                "FUN_00105db0": {
                    "2": "decompile_and_improve",
                    "1": "decompile_file",
                    "3": "decompiled_function"
                },
                "pplVar43": {
                    "1": "char_ptr_ptr1"
                },
                "local_116": {
                    "1": "byte_ptr5"
                },
                "pplVar36": {
                    "1": "long_ptr_ptr1"
                },
                "PARAM_001": {
                    "1": "param_1"
                },
                "PARAM_002": {
                    "1": "param_2"
                },
                "plVar39": {
                    "1": "long_pointer"
                },
                "pplVar31": {
                    "1": "ptr_arr4"
                },
                "picVar46": {
                    "1": "char_ptr_3"
                },
                "lpplVar29": {
                    "1": "long_ptr_ptr"
                },
                "mismatch_abi": {
                    "1": "bool_var"
                },
                "stats": {
                    "1": "stat_var"
                },
                "plVar29": {
                    "1": "ptr_ptr_long29"
                },
                "bVar33": {
                    "1": "byte_var"
                },
                "pcVar31": {
                    "1": "ptr_char31"
                },
                "local_c8 [2]": {
                    "1": "local_undefined_c8[2]"
                },
                "lVar29": {
                    "1": "ptr_arr3"
                },
                "uVar32": {
                    "1": "var13"
                },
                "pFVar43": {
                    "1": "file_ptr4"
                },
                "uVar47": {
                    "1": "bool3"
                },
                "lppVar29": {
                    "1": "long_pointer_pointer29"
                }
            }
        },
        "FUN_001075e0": {
            "entrypoint": "0x001075e0",
            "current_name": "print_version_info_001075e0",
            "code": "\nvoid print_version_info_001075e0(undefined8 version)\n\n{\n  char *copyright_message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyright_message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyright_message);\n  copyright_message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyright_message);\n                    \n  exit(0);\n}\n\n",
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyright_message"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001075e0": {
                    "19": "print_version_info",
                    "2": "print_binutils_version",
                    "1": "print_version_information",
                    "3": "print_binutils_info"
                },
                "param_1": {
                    "5": "program_name",
                    "1": "version_info",
                    "13": "version",
                    "3": "package_name"
                },
                "pcVar1": {
                    "2": "copy_right_msg",
                    "1": "copyright",
                    "3": "copyright_msg",
                    "5": "copyright_message",
                    "4": "copyright_text"
                },
                "__format": {
                    "1": "format_string"
                }
            }
        },
        "FUN_00107640": {
            "entrypoint": "0x00107640",
            "current_name": "get_default_value_00107640",
            "code": "\nvoid get_default_value_00107640(void)\n\n{\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_00107640": "get_default_value_00107640",
                "undefined8": "void",
                "return": "result"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00107640": {
                    "1": "initialize_program",
                    "9": "initialize",
                    "2": "calculate_result",
                    "10": "get_default_value",
                    "3": "initialize_data"
                },
                "undefined8": {
                    "2": "uint64_t",
                    "6": "void"
                },
                "return": {
                    "1": "status"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "": {
                    "1": ""
                },
                "PTR_XXXXXX": {
                    "1": "new_pointer"
                },
                "DAT_XXXXXX": {
                    "1": "new_data"
                }
            }
        },
        "FUN_00107650": {
            "entrypoint": "0x00107650",
            "current_name": "check_and_process_data_00107650",
            "code": "\nundefined8 check_and_process_data_00107650(undefined8 input_data)\n\n{\n  undefined8 result;\n  long result;\n  \n  result = FUN_001052a0();\n  if (result < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    result = FUN_00105300(input_data,0);\n    if (result == 0) {\n                    \n      xexit(1);\n    }\n    FUNC_001058b0(result);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00107650": "check_and_process_data_00107650",
                "param_1": "input_data",
                "uVar1": "result",
                "lVar2": "result",
                "xexit": "exit_program"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "FUN_00105300",
                "FUN_001058b0",
                "FUN_0010284b",
                "xexit",
                "FUN_001052a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00107650": {
                    "3": "check_and_execute_function",
                    "2": "process_data",
                    "1": "validate_and_exit",
                    "5": "check_and_process_input",
                    "8": "check_and_process_data"
                },
                "param_1": {
                    "5": "input",
                    "2": "input_parameter",
                    "14": "input_data",
                    "1": "binary_file_path",
                    "7": "data"
                },
                "uVar1": {
                    "6": "return_value",
                    "1": "success_flag",
                    "20": "result",
                    "2": "status"
                },
                "lVar2": {
                    "4": "function_result",
                    "1": "error_code",
                    "10": "result",
                    "5": "count"
                },
                "FUN_001052a0": {
                    "1": "get_validation_status",
                    "2": "get_status",
                    "3": "get_data_count",
                    "6": "get_count"
                },
                "FUN_00105300": {
                    "1": "execute_function",
                    "4": "validate_input",
                    "10": "process_data"
                },
                "xexit": {
                    "3": "terminate_program",
                    "16": "exit_program",
                    "1": "handle_exit",
                    "2": "terminate_execution"
                },
                "FUN_001058b0": {
                    "1": "clean_up_data",
                    "4": "process_result",
                    "2": "cleanup",
                    "8": "cleanup_data"
                },
                "FUN_0010284b": {
                    "4": "initialize",
                    "1": "reverse_action"
                },
                "param_2": {
                    "1": "output_data"
                },
                "char": {
                    "1": "string"
                },
                "DAT_0010d648": {
                    "1": "data_initialized",
                    "4": "flag"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                }
            }
        },
        "FUN_00107690": {
            "entrypoint": "0x00107690",
            "current_name": "process_data_00107690",
            "code": "\nvoid process_data_00107690(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param_9,undefined8 input10,undefined8 input11,undefined8 input12,\n                 undefined8 input13,undefined8 input14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 size;\n  undefined *stack_ptr;\n  undefined *local_buffer;\n  undefined buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  stack_ptr = &stack0x00000008;\n  size = 8;\n  local_buffer = buffer;\n  size = 0x30;\n  param_10_copy = input10;\n  param_11 = input11;\n  param_12 = input12;\n  param_13 = input13;\n  param_14 = input14;\n  FUN_001078c0(param_9,&size);\n                    \n  xexit(1);\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d0": "stack_ptr",
                "local_d4": "size",
                "local_c8": "local_buffer",
                "local_b8": "buffer",
                "local_b0": "param_10_copy",
                "local_a8": "param_11",
                "local_a0": "param_12",
                "local_98": "param_13",
                "local_90": "param_14",
                "local_88": "input1_copy",
                "local_78": "input2_copy",
                "local_68": "input3_copy",
                "local_58": "input4_copy",
                "local_48": "input5_copy",
                "local_38": "input6_copy",
                "local_28": "input7_copy",
                "local_18": "input8_copy",
                "xexit": "exit_program",
                "FUN_00107690": "process_data_00107690"
            },
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00105db0",
                "FUN_00103a78"
            ],
            "called": [
                "FUN_001078c0",
                "xexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_param1",
                    "3": "buffer",
                    "2": "input_param_1",
                    "5": "input_1",
                    "7": "input1"
                },
                "param_2": {
                    "1": "source",
                    "3": "arg2",
                    "2": "args",
                    "5": "input_2",
                    "7": "input2"
                },
                "param_3": {
                    "2": "input_param3",
                    "1": "third_param",
                    "3": "arg3",
                    "7": "input3",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "argument4",
                    "2": "input_param4",
                    "3": "arg4",
                    "5": "input_4",
                    "7": "input4"
                },
                "param_5": {
                    "1": "param_five",
                    "7": "input5",
                    "2": "value5",
                    "5": "input_5",
                    "3": "arg5"
                },
                "param_6": {
                    "1": "argument6",
                    "5": "input_6",
                    "7": "input6",
                    "3": "arg6",
                    "2": "input_param6"
                },
                "param_7": {
                    "1": "param7",
                    "2": "value7",
                    "3": "arg7",
                    "7": "input7",
                    "5": "input_7"
                },
                "param_8": {
                    "2": "input_param_8",
                    "1": "eighth_param",
                    "3": "arg8",
                    "7": "input8",
                    "5": "input_8"
                },
                "param_9": {
                    "2": "data1",
                    "1": "input_param_9",
                    "7": "param_9",
                    "3": "param1"
                },
                "param_10": {
                    "1": "pointer2",
                    "3": "param2",
                    "2": "param_b",
                    "6": "param_10"
                },
                "param_11": {
                    "1": "eleventh_param",
                    "2": "param_c",
                    "6": "param_11",
                    "3": "param3"
                },
                "param_12": {
                    "2": "data4",
                    "1": "argument4",
                    "6": "param_12",
                    "3": "param4"
                },
                "param_13": {
                    "1": "arg5",
                    "2": "pointer_5",
                    "6": "param_13",
                    "3": "param5"
                },
                "param_14": {
                    "1": "param14",
                    "3": "param6",
                    "2": "data6",
                    "6": "param_14"
                },
                "in_AL": {
                    "1": "condition_check",
                    "14": "flag",
                    "2": "condition_flag",
                    "6": "input_flag"
                },
                "local_d8": {
                    "1": "buffer_length",
                    "4": "count",
                    "6": "size",
                    "3": "length",
                    "2": "local_size"
                },
                "local_d0": {
                    "1": "local_pointer",
                    "2": "buffer_pointer",
                    "4": "stack_ptr",
                    "3": "buffer"
                },
                "local_d4": {
                    "4": "size",
                    "2": "limit",
                    "1": "local_number2",
                    "3": "buffer_size"
                },
                "local_c8": {
                    "1": "ptr2",
                    "10": "local_buffer",
                    "8": "buffer"
                },
                "local_b8": {
                    "2": "local_array",
                    "4": "temp_buffer",
                    "1": "local_variable1",
                    "6": "buffer"
                },
                "local_b0": {
                    "1": "local_list_item_1",
                    "3": "param_10_copy",
                    "2": "pointer_2_copy"
                },
                "local_a8": {
                    "3": "param_11_copy",
                    "1": "local_param11",
                    "2": "param_c",
                    "4": "param_11"
                },
                "local_a0": {
                    "1": "twelfth_param_ptr",
                    "3": "param_12_copy",
                    "2": "param_d",
                    "4": "param_12"
                },
                "local_98": {
                    "1": "param_thirteen",
                    "2": "value4",
                    "3": "param_13_copy",
                    "4": "param_13"
                },
                "local_90": {
                    "1": "param6_modified",
                    "4": "param_14",
                    "2": "param_f",
                    "3": "param_14_copy"
                },
                "local_88": {
                    "1": "first_param_local",
                    "2": "param_1",
                    "3": "input1_copy"
                },
                "local_78": {
                    "1": "arg_passed_2",
                    "2": "param_2",
                    "3": "input2_copy"
                },
                "local_68": {
                    "1": "copy_param_three",
                    "2": "param_3",
                    "3": "input3_copy"
                },
                "local_58": {
                    "1": "new_value4",
                    "2": "arg4_copy",
                    "3": "input4_copy"
                },
                "local_48": {
                    "1": "param5_copy",
                    "2": "param_5",
                    "3": "input5_copy"
                },
                "local_38": {
                    "1": "param_6_copy",
                    "3": "input6_copy",
                    "2": "param_6"
                },
                "local_28": {
                    "1": "var7_copy",
                    "2": "param_7",
                    "3": "input7_copy"
                },
                "local_18": {
                    "1": "dup_param_8",
                    "3": "input8_copy",
                    "2": "param_8"
                },
                "FUN_001078c0": {
                    "1": "process_data",
                    "2": "copy_data"
                },
                "xexit": {
                    "5": "exit_program",
                    "1": "terminate_execution"
                },
                "FUN_00107690": {
                    "1": "extract_and_exit",
                    "7": "process_data",
                    "2": "execute_function"
                }
            }
        },
        "FUN_00107730": {
            "entrypoint": "0x00107730",
            "current_name": "cleanup_function_00107730",
            "code": "\nvoid cleanup_function_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00107730": "cleanup_function_00107730",
                "unlink_if_ordinary": "remove_file",
                "fclose": "close_file",
                "bfd_cache_close": "close_cache"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "FUN_00102bf5"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00107730": {
                    "3": "cleanup_and_delete_file",
                    "1": "cleanup_files",
                    "10": "cleanup_function",
                    "5": "cleanup_and_remove_file",
                    "2": "cleanup_and_close",
                    "4": "cleanup"
                },
                "FUN_00102bf5": {
                    "1": "initialize_cache",
                    "4": "close_cache",
                    "6": "close_bfd_cache"
                },
                "unlink_if_ordinary": {
                    "7": "delete_file",
                    "3": "unlink_file",
                    "14": "remove_file"
                },
                "DAT_0010d618": {
                    "1": "file_pointer",
                    "3": "file_path"
                },
                "DAT_0010d5e0": {
                    "1": "cache_status",
                    "2": "cache_flag"
                },
                "DAT_0010d5d8": {
                    "2": "file_handle",
                    "1": "file_ptr",
                    "3": "file_pointer"
                },
                "fclose": {
                    "3": "close_file"
                },
                "bfd_cache_close": {
                    "3": "close_cache",
                    "1": "close_bfd_cache"
                }
            }
        },
        "FUN_00107740": {
            "entrypoint": "0x00107740",
            "current_name": "extract_archive_00107740",
            "code": "\n\n\nlong * extract_archive_00107740(long **archive)\n\n{\n  int comparison_result;\n  int stat_error;\n  int *errno_location;\n  char *error_message;\n  undefined8 message;\n  long **file_pointer;\n  void *buffer;\n  size_t bytes_read;\n  long offset;\n  long *current_file;\n  undefined4 *local_array;\n  ulong bytes_processed;\n  size_t bytes_to_read;\n  undefined4 local_array [6];\n  __mode_t file_permissions;\n  ulong file_size;\n  undefined8 temp_var1;\n  undefined8 temp_var2;\n  \n  if (_DAT_0010d600 != 0) {\n    local_array = local_array;\n    for (offset = 0x24; offset != 0; offset = offset + -1) {\n      *local_array = 0;\n      local_array = local_array + 1;\n    }\n  }\n  file_pointer = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    file_pointer = archive;\n  }\n  stat_error = (*(code *)file_pointer[1][0x3d])(archive,local_array);\n  if (stat_error != 0) {\n    current_file = *archive;\n    message = dcgettext(0,\"internal stat error on %s\",5);\n    stat_error = FUN_00107690(message,current_file);\n    message = DAT_0010d638;\n    if (stat_error == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file,message);\n        if (comparison_result == 0) {\n          if (stat_error != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek(archive,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (file_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive);\n  }\n  else {\n    bytes_processed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_read = file_size - bytes_processed;\n      if (0x2000 < bytes_to_read) {\n        bytes_to_read = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_read,archive);\n      if (bytes_to_read != bytes_read) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        message = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(message,archive);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive);\n      }\n      bytes_to_read = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_read != bytes_read) {\n        errno_location = __errno_location();\n        error_message = strerror(*errno_location);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      bytes_processed = bytes_processed + bytes_read;\n    } while (bytes_processed < file_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    temp_var1 = temp_var2;\n    FUN_00107c80(error_message,local_array);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "renaming": {
                "FUN_00107740": "extract_archive_00107740",
                "param_1": "archive",
                "pplVar6": "file_pointer",
                "iVar2": "stat_error",
                "plVar8": "current_file",
                "uVar5": "message",
                "iVar1": "comparison_result",
                "sVar11": "bytes_to_read",
                "__ptr": "buffer",
                "__n": "bytes_read",
                "uVar10": "bytes_processed",
                "piVar3": "errno_location",
                "pcVar4": "error_message",
                "lVar7": "offset",
                "puVar9": "local_array",
                "local_c8": "local_array",
                "_Stack_b0": "file_permissions",
                "uStack_98": "file_size",
                "uStack_80": "temp_var1",
                "uStack_70": "temp_var2",
                "dcgettext": "get_message",
                "filename_cmp": "compare_filename",
                "bfd_seek": "seek_in_file",
                "bfd_bread": "read_from_bfd",
                "fclose": "close_file",
                "chmod": "change_file_permissions"
            },
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "called": [
                "FUN_00102c25"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00107740": {
                    "2": "extract_archive_files",
                    "1": "extract_valid_archive_entry",
                    "5": "process_files",
                    "8": "extract_archive",
                    "4": "process_archive"
                },
                "param_1": {
                    "1": "archive_file",
                    "10": "archive",
                    "2": "input_files",
                    "4": "input",
                    "3": "file_list"
                },
                "pplVar6": {
                    "2": "pointer_array",
                    "1": "archive_files",
                    "5": "file_pointer",
                    "4": "file_list"
                },
                "iVar2": {
                    "1": "function_result",
                    "6": "status",
                    "4": "stat_result",
                    "9": "stat_error",
                    "2": "status_code"
                },
                "plVar8": {
                    "1": "found_file",
                    "2": "result_pointer",
                    "6": "current_entry",
                    "10": "current_file",
                    "4": "current_pointer",
                    "5": "file_pointer"
                },
                "uVar5": {
                    "1": "gettext_string",
                    "2": "gettext_result",
                    "5": "error_message",
                    "6": "message",
                    "3": "error_msg"
                },
                "iVar1": {
                    "2": "result",
                    "1": "file_compare_result",
                    "23": "comparison_result",
                    "4": "filename_comparison_result"
                },
                "sVar11": {
                    "2": "bytes_remaining",
                    "1": "to_read",
                    "18": "bytes_to_read",
                    "3": "write_size"
                },
                "__ptr": {
                    "2": "buffer_ptr",
                    "27": "buffer"
                },
                "__n": {
                    "2": "buffer_size",
                    "3": "read_bytes",
                    "23": "bytes_read",
                    "1": "n_size"
                },
                "uVar10": {
                    "1": "num_read_bytes",
                    "5": "total_bytes_read",
                    "2": "bytes_remaining",
                    "8": "bytes_processed",
                    "4": "total_bytes"
                },
                "piVar3": {
                    "4": "error_number",
                    "1": "error_num",
                    "12": "errno_location",
                    "2": "error_ptr",
                    "3": "errno_ptr"
                },
                "pcVar4": {
                    "10": "error_string",
                    "2": "error_str",
                    "16": "error_message",
                    "1": "error_msg"
                },
                "lVar7": {
                    "1": "loop_variable",
                    "5": "loop_counter",
                    "17": "offset",
                    "2": "loop_index",
                    "4": "index"
                },
                "puVar9": {
                    "1": "local_values",
                    "2": "temp_array",
                    "14": "local_array"
                },
                "local_c8": {
                    "1": "initial_values",
                    "4": "zero_array",
                    "8": "local_array",
                    "2": "local_variables"
                },
                "_Stack_b0": {
                    "3": "file_permission",
                    "2": "mode",
                    "1": "permission",
                    "5": "file_mode",
                    "13": "file_permissions"
                },
                "uStack_98": {
                    "1": "total_bytes",
                    "13": "archive_size"
                },
                "uStack_80": {
                    "1": "message2",
                    "2": "temp_value",
                    "3": "temp_var1"
                },
                "uStack_70": {
                    "1": "temp_val2",
                    "3": "temp_var2"
                },
                "DAT_0010d600": {
                    "1": "flag",
                    "2": "flag1"
                },
                "DAT_0010d638": {
                    "1": "global_flag2",
                    "2": "flag2"
                },
                "DAT_0010d5d8": {
                    "1": "file_ptr"
                },
                "DAT_0010d618": {
                    "2": "file_name"
                },
                "puVar3": {
                    "1": "error_string"
                },
                "local_c8 [6]": {
                    "2": "local_array"
                },
                "FUN_00107690": {
                    "1": "print_error_message"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "filename_cmp": {
                    "1": "compare_filename"
                },
                "bfd_seek": {
                    "1": "seek_in_file"
                },
                "FUN_00105a20": {
                    "1": "open_file"
                },
                "bfd_bread": {
                    "1": "read_from_bfd"
                },
                "fclose": {
                    "1": "close_file"
                },
                "chmod": {
                    "1": "change_file_permissions"
                },
                "FUN_00107c80": {
                    "1": "process_contents"
                }
            }
        },
        "FUN_00107890": {
            "entrypoint": "0x00107890",
            "current_name": "FUNC_00107890",
            "code": "\n\n\nvoid FUNC_00107890(undefined8 param_1)\n\n{\n  FUN_001079c0(_stdout,param_1,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00107890": "FUNC_00107890"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [
                "FUN_001079c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_001078c0": {
            "entrypoint": "0x001078c0",
            "current_name": "print_error_message_001078c0",
            "code": "\n\n\nvoid print_error_message_001078c0(char *error_message,va_list arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_0010d660);\n  vfprintf(standard_error,error_message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "error_message",
                "param_2": "arguments",
                "__gnuc_va_list": "va_list",
                "fprintf": "print_formatted",
                "vfprintf": "print_formatted_error_with_arguments",
                "put": "put_character",
                "fflush": "flush_output",
                "putc": "write_character",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "stdout": "standard_output",
                "stderr": "standard_error"
            },
            "calling": [
                "FUN_00107690",
                "FUN_00107920"
            ],
            "called": [
                "fprintf",
                "vfprintf",
                "putc",
                "fflush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001078c0": {
                    "1": "log_error_message",
                    "30": "print_error_message"
                },
                "param_1": {
                    "16": "error_message",
                    "15": "message"
                },
                "param_2": {
                    "2": "arg_list",
                    "1": "additional_args",
                    "17": "arguments",
                    "9": "args"
                },
                "__stream": {
                    "1": "output_file",
                    "10": "output_stream",
                    "4": "stream"
                },
                "__format": {
                    "3": "format",
                    "15": "format_string"
                },
                "__s": {
                    "7": "output_stream",
                    "1": "output_file",
                    "4": "stream"
                },
                "__arg": {
                    "2": "arg_list",
                    "1": "argument_list",
                    "7": "arguments",
                    "5": "args"
                },
                "__c": {
                    "1": "ch",
                    "17": "character"
                },
                "__gnuc_va_list": {
                    "1": "va_list"
                },
                "fprintf": {
                    "1": "format_and_output",
                    "2": "formatted_print"
                },
                "vfprintf": {
                    "1": "print_variable_formatted_message",
                    "2": "print_formatted_error_with_arguments"
                },
                "__incl": {
                    "1": "line_break"
                },
                "put": {
                    "1": "put_character"
                },
                "fflush": {
                    "4": "flush_output",
                    "2": "flush_buffer",
                    "1": "flush_output_file"
                },
                "putc": {
                    "3": "write_character",
                    "1": "output_char",
                    "2": "put_character"
                },
                "__stdout": {
                    "1": "stdout"
                },
                "__stderr": {
                    "1": "stderr"
                },
                "_stdout": {
                    "4": "standard_output"
                },
                "_stderr": {
                    "4": "standard_error"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "stderr": {
                    "1": "standard_error"
                }
            }
        },
        "FUN_00107920": {
            "entrypoint": "0x00107920",
            "current_name": "process_data_00107920",
            "code": "\nvoid process_data_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 buffer_size;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined temporary_buffer [8];\n  undefined8 param2;\n  undefined8 param3;\n  undefined8 param4;\n  undefined8 param5;\n  undefined8 param6;\n  undefined4 flag_1_copy;\n  undefined4 flag_2_copy;\n  undefined4 flag_3_copy;\n  undefined4 flag_4_copy;\n  undefined4 flag_5_copy;\n  undefined4 flag_6_copy;\n  undefined4 flag_7_copy;\n  undefined4 flag_8_copy;\n  \n  if (flag != '\\0') {\n    flag_1_copy = input1;\n    flag_2_copy = input2;\n    flag_3_copy = input3;\n    flag_4_copy = input4;\n    flag_5_copy = input5;\n    flag_6_copy = input6;\n    flag_7_copy = input7;\n    flag_8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = temporary_buffer;\n  buffer_size = 0x30;\n  param2 = param2;\n  param3 = param3;\n  param4 = param4;\n  param5 = param5;\n  param6 = param6;\n  FUN_001078c0(param1,&buffer_size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00107920": "process_data_00107920",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "flag",
                "local_d8": "buffer_size",
                "local_d4": "buffer_size",
                "local_d0": "buffer",
                "local_c8": "local_buffer",
                "local_b8": "temporary_buffer",
                "local_b0": "param2",
                "local_a8": "param3",
                "local_a0": "param4",
                "local_98": "param5",
                "local_90": "param6",
                "local_88": "flag_1_copy",
                "local_78": "flag_2_copy",
                "local_68": "flag_3_copy",
                "local_58": "flag_4_copy",
                "local_48": "flag_5_copy",
                "local_38": "flag_6_copy",
                "local_28": "flag_7_copy",
                "local_18": "flag_8_copy"
            },
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00102e6f",
                "FUN_001052a0",
                "FUN_001025a0",
                "FUN_00102f1e",
                "FUN_00102fd7"
            ],
            "called": [
                "FUN_001078c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00107920": {
                    "1": "extract_params_and_call_func",
                    "2": "initialize_variables",
                    "6": "extract_and_process_data",
                    "7": "process_data"
                },
                "param_1": {
                    "2": "data1",
                    "1": "init_param1",
                    "5": "input1"
                },
                "param_2": {
                    "2": "data2",
                    "1": "param_b",
                    "5": "input2"
                },
                "param_3": {
                    "2": "input_3",
                    "1": "param_c",
                    "5": "input3"
                },
                "param_4": {
                    "1": "param_d",
                    "2": "data4",
                    "5": "input4"
                },
                "param_5": {
                    "2": "value5",
                    "1": "local_param5",
                    "5": "input5"
                },
                "param_6": {
                    "1": "value5",
                    "2": "data6",
                    "5": "input6"
                },
                "param_7": {
                    "2": "data7",
                    "1": "init_param7",
                    "5": "input7"
                },
                "param_8": {
                    "2": "input_8",
                    "1": "input_param8",
                    "5": "input8"
                },
                "param_9": {
                    "3": "data1",
                    "2": "param9",
                    "1": "output1",
                    "5": "param1"
                },
                "param_10": {
                    "1": "data_param_10",
                    "5": "param2",
                    "3": "param_b",
                    "2": "param_10"
                },
                "param_11": {
                    "1": "data_param3",
                    "3": "param_c",
                    "2": "param_11",
                    "5": "param3"
                },
                "param_12": {
                    "1": "arg_4",
                    "2": "param12",
                    "5": "param4",
                    "3": "data4"
                },
                "param_13": {
                    "1": "value_4",
                    "3": "param_e",
                    "2": "param13",
                    "5": "param5"
                },
                "param_14": {
                    "5": "param6",
                    "1": "value_5",
                    "3": "data6",
                    "2": "param14"
                },
                "in_AL": {
                    "1": "condition_check",
                    "14": "flag",
                    "6": "condition",
                    "2": "input_flag"
                },
                "local_d8": {
                    "1": "buffer_size1",
                    "11": "buffer_size",
                    "8": "size",
                    "2": "count"
                },
                "local_d4": {
                    "1": "buffer_offset",
                    "5": "buffer_size",
                    "3": "length",
                    "2": "constant"
                },
                "local_d0": {
                    "1": "local_variable_1",
                    "3": "stack_ptr",
                    "9": "buffer",
                    "4": "buffer_ptr",
                    "2": "stack_pointer"
                },
                "local_c8": {
                    "15": "local_buffer",
                    "1": "local_variable4",
                    "2": "local_buffer2"
                },
                "local_b8": {
                    "1": "local_data_buffer",
                    "2": "fixed_buffer",
                    "8": "temporary_buffer",
                    "3": "buffer",
                    "5": "temp_buffer"
                },
                "local_b0": {
                    "1": "data1",
                    "2": "param_10_copy",
                    "3": "param2"
                },
                "local_a8": {
                    "2": "param_11",
                    "1": "dest_data_2",
                    "3": "param3"
                },
                "local_a0": {
                    "1": "data4_copy",
                    "2": "param_12",
                    "3": "param4"
                },
                "local_98": {
                    "1": "param5_copy",
                    "3": "param5",
                    "2": "param_13"
                },
                "local_90": {
                    "1": "data6_copy",
                    "2": "param_14_copy",
                    "3": "param6"
                },
                "local_88": {
                    "1": "data1",
                    "2": "input1"
                },
                "local_78": {
                    "1": "optional_param_2",
                    "2": "input2"
                },
                "local_68": {
                    "1": "local_var_3",
                    "2": "flag_3_copy"
                },
                "local_58": {
                    "2": "input4",
                    "1": "input_4_copy"
                },
                "local_48": {
                    "2": "input_value5_copy",
                    "1": "input5_copy"
                },
                "local_38": {
                    "1": "data6_copy",
                    "2": "flag_6_copy"
                },
                "local_28": {
                    "1": "value7",
                    "2": "flag_7_copy"
                },
                "local_18": {
                    "1": "extracted_param_8",
                    "2": "input8"
                },
                "FUN_001078c0": {
                    "1": "process_params_and_call_func",
                    "3": "process_data"
                }
            }
        },
        "FUN_001079c0": {
            "entrypoint": "0x001079c0",
            "current_name": "print_file_info_001079c0",
            "code": "\nvoid print_file_info_001079c0(FILE *file,char **file_info,char print_time,char print_address)\n\n{\n  int result;\n  char **file_info_ptr;\n  char *time_string;\n  uint file_type;\n  time_t current_time;\n  undefined file_type;\n  char user_read;\n  char user_write;\n  char owner_execute;\n  char group_read;\n  char group_write;\n  char group_execute;\n  char other_read;\n  char other_write;\n  char other_execute;\n  undefined u9;\n  char formatted_time [48];\n  undefined buffer [24];\n  uint file_mode;\n  uint user_id;\n  uint group_id;\n  undefined8 file_size;\n  time_t file_modification_time;\n  \n  if (print_time != '\\0') {\n    file_info_ptr = (char **)file_info[0x1d];\n    if ((char **)file_info[0x1d] == (char **)0x0) {\n      file_info_ptr = file_info;\n    }\n    result = (**(code **)(file_info_ptr[1] + 0x1e8))(file_info,buffer);\n    if (result == 0) {\n      current_time = file_modification_time;\n      time_string = ctime(&current_time);\n      if (time_string == (char *)0x0) {\n        time_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formatted_time,time_string);\n      }\n      else {\n        sprintf(formatted_time,\"%.12s %.4s\",time_string + 4);\n      }\n      file_type = file_mode & 0xf000;\n      if (file_type == 0x4000) {\n        file_type = 100;\n      }\n      else if (file_type == 0xa000) {\n        file_type = 0x6c;\n      }\n      else if (file_type == 0x6000) {\n        file_type = 0x62;\n      }\n      else if (file_type == 0x2000) {\n        file_type = 99;\n      }\n      else if (file_type == 0xc000) {\n        file_type = 0x73;\n      }\n      else {\n        file_type = 0x70;\n        if (file_type != 0x1000) {\n          file_type = 0x2d;\n        }\n      }\n      user_read = (-((file_mode & 0x100) == 0) & 0xbbU) + 0x72;\n      user_write = (-((file_mode & 0x80) == 0) & 0xb6U) + 0x77;\n      owner_execute = (-((file_mode & 0x40) == 0) & 0xb5U) + 0x78;\n      group_read = (-((file_mode & 0x20) == 0) & 0xbbU) + 0x72;\n      group_write = (-((file_mode & 0x10) == 0) & 0xb6U) + 0x77;\n      group_execute = (-((file_mode & 8) == 0) & 0xb5U) + 0x78;\n      other_read = (-((file_mode & 4) == 0) & 0xbbU) + 0x72;\n      other_write = (-((file_mode & 2) == 0) & 0xb6U) + 0x77;\n      other_execute = (-((file_mode & 1) == 0) & 0xb5U) + 0x78;\n      if ((file_mode & 0x800) != 0) {\n        if (owner_execute == 'x') {\n          owner_execute = 's';\n        }\n        else {\n          owner_execute = 'S';\n        }\n      }\n      if ((file_mode & 0x400) != 0) {\n        if (group_execute == 'x') {\n          group_execute = 's';\n        }\n        else {\n          group_execute = 'S';\n        }\n      }\n      if ((file_mode & 0x200) != 0) {\n        if (other_execute == 'x') {\n          other_execute = 't';\n        }\n        else {\n          other_execute = 'T';\n        }\n      }\n      u9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&user_read,(ulong)user_id,(ulong)group_id,file_size,\n              formatted_time,(ulong)file_mode);\n    }\n  }\n  fputs(*file_info,file);\n  if (print_address != '\\0') {\n    if ((*(byte_val *)((long)file_info + 0x49) & 0x10) == 0) {\n      if (file_info[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (file_info[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "file",
                "param_2": "file_info",
                "param_3": "print_time",
                "param_4": "print_address",
                "ppcVar2": "file_info_ptr",
                "iVar1": "result",
                "pcVar3": "time_string",
                "uVar4": "file_type",
                "local_100": "current_time",
                "uStack_f3": "file_type",
                "cStack_f2": "user_read",
                "cStack_f1": "user_write",
                "cStack_f0": "owner_execute",
                "cStack_ef": "group_read",
                "cStack_ee": "group_write",
                "cStack_ed": "group_execute",
                "cStack_ec": "other_read",
                "cStack_eb": "other_write",
                "cStack_ea": "other_execute",
                "local_e8": "formatted_time",
                "uStack_a0": "file_mode",
                "uStack_9c": "user_id",
                "uStack_98": "group_id",
                "uStack_88": "file_size",
                "local_60": "file_modification_time",
                "fprintf": "print_formatted",
                "fputs": "print_string",
                "byte": "byte_val",
                "fputc": "print_char",
                "local_b8": "buffer",
                "uStack_e9": "u9"
            },
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "called": [
                "ctime",
                "sprintf",
                "FUN_00102d8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001079c0": {
                    "1": "print_file_permissions",
                    "2": "print_file_information",
                    "25": "print_file_info"
                },
                "param_1": {
                    "9": "output_file",
                    "20": "file",
                    "1": "file_ptr"
                },
                "param_2": {
                    "1": "file_data",
                    "3": "args",
                    "18": "file_info"
                },
                "param_3": {
                    "1": "show_timestamp",
                    "2": "show_time",
                    "3": "print_header",
                    "6": "print_time"
                },
                "param_4": {
                    "2": "is_hex",
                    "5": "show_address",
                    "1": "should_print_address",
                    "4": "print_hex",
                    "3": "include_address",
                    "11": "print_address"
                },
                "ppcVar2": {
                    "2": "file_pointer",
                    "3": "file_ptr",
                    "1": "ppc_file_info",
                    "5": "file_info_ptr"
                },
                "iVar1": {
                    "23": "result",
                    "4": "return_value",
                    "1": "status"
                },
                "pcVar3": {
                    "15": "time_string",
                    "3": "time_str",
                    "1": "file_time"
                },
                "uVar4": {
                    "2": "file_mode",
                    "1": "category",
                    "14": "file_type",
                    "4": "permission",
                    "3": "file_permissions"
                },
                "local_100": {
                    "1": "timestamp_value",
                    "10": "current_timestamp",
                    "16": "current_time",
                    "2": "file_time"
                },
                "uStack_f3": {
                    "4": "file_permission",
                    "1": "permission_bit",
                    "5": "file_type_char",
                    "8": "file_type",
                    "2": "file_permissions"
                },
                "cStack_f2": {
                    "1": "permission_owner_read",
                    "3": "owner_read",
                    "2": "is_setuid"
                },
                "cStack_f1": {
                    "2": "is_user_writable",
                    "1": "user_write_symbol",
                    "3": "owner_write"
                },
                "cStack_f0": {
                    "1": "has_sticky_bit",
                    "2": "user_execute",
                    "3": "owner_execute"
                },
                "cStack_ef": {
                    "1": "ef",
                    "6": "group_read"
                },
                "cStack_ee": {
                    "1": "ee",
                    "6": "group_write",
                    "2": "is_group_writable"
                },
                "cStack_ed": {
                    "1": "permission_group_execute",
                    "5": "group_execute"
                },
                "cStack_ec": {
                    "1": "rs_flag",
                    "2": "others_read",
                    "4": "other_read"
                },
                "cStack_eb": {
                    "2": "is_others_writable",
                    "4": "other_write",
                    "1": "is_group_writable"
                },
                "cStack_ea": {
                    "1": "permission_bit1",
                    "3": "other_execute",
                    "2": "others_execute"
                },
                "local_e8": {
                    "2": "timestamp_string",
                    "1": "time_formatted",
                    "14": "formatted_time",
                    "3": "formatted_timestamp"
                },
                "uStack_a0": {
                    "2": "permissions",
                    "3": "mode",
                    "1": "flags",
                    "6": "file_size",
                    "10": "file_mode",
                    "5": "file_permissions"
                },
                "uStack_9c": {
                    "1": "file_inode",
                    "6": "user_id",
                    "4": "file_links",
                    "2": "major"
                },
                "uStack_98": {
                    "1": "file_inode",
                    "2": "minor",
                    "6": "group_id"
                },
                "uStack_88": {
                    "1": "last_modified_time",
                    "18": "file_size",
                    "2": "inode_number",
                    "3": "inode"
                },
                "local_60": {
                    "1": "current_time2",
                    "3": "creation_time",
                    "2": "file_modified_time",
                    "4": "file_modification_time"
                },
                "outputFile": {
                    "1": "param_1"
                },
                "fileInfo": {
                    "1": "param_2"
                },
                "printTime": {
                    "1": "param_3"
                },
                "printAddress": {
                    "1": "param_4"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "fputs": {
                    "1": "print_string"
                },
                "byte": {
                    "1": "byte_val"
                },
                "fputc": {
                    "1": "print_char"
                },
                "local_b8": {
                    "2": "buffer",
                    "1": "temp_var"
                },
                "uStack_e9": {
                    "1": "u9"
                }
            }
        },
        "FUN_00107c10": {
            "entrypoint": "0x00107c10",
            "current_name": "execute_and_exit_00107c10",
            "code": "\nvoid execute_and_exit_00107c10(void)\n\n{\n  FUN_00107c20();\n                    \n  xexit(1);\n}\n\n",
            "renaming": {
                "FUN_00107c10": "execute_and_exit_00107c10",
                "xexit": "exit_program"
            },
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_00102d2f"
            ],
            "called": [
                "xexit",
                "FUN_00107c20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00107c10": {
                    "2": "execute_exit_function",
                    "1": "initialize_program",
                    "3": "terminate_program",
                    "9": "execute_and_exit"
                },
                "FUN_00107c20": {
                    "1": "handle_exit_with_param",
                    "2": "cleanup",
                    "3": "perform_task",
                    "10": "perform_cleanup"
                },
                "xexit": {
                    "9": "exit_program",
                    "2": "perform_exit",
                    "1": "terminate_program"
                },
                "param_1": {
                    "1": "data"
                }
            }
        },
        "FUN_00107c20": {
            "entrypoint": "0x00107c20",
            "current_name": "print_error_message_00107c20",
            "code": "\n\n\nvoid print_error_message_00107c20(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_message != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_0010d660,error_message,error_message,additional_info);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_0010d660,error_message,additional_info);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "error_message",
                "iVar1": "error",
                "uVar2": "error_message",
                "in_R10": "additional_info",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "dcgettext": "get_localized_message",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_error_code",
                "fprintf": "print_formatted",
                "fflush": "flush_output"
            },
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c10"
            ],
            "called": [
                "FUN_00102f96",
                "bfd_errmsg",
                "bfd_get_error"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00107c20": {
                    "4": "print_error",
                    "25": "print_error_message",
                    "1": "print_error_details"
                },
                "param_1": {
                    "3": "file_name",
                    "9": "error_message",
                    "1": "error_name",
                    "2": "error_cause",
                    "5": "error_description",
                    "6": "error_type"
                },
                "iVar1": {
                    "3": "error_status",
                    "1": "error_type",
                    "10": "error_code",
                    "14": "error",
                    "2": "bfd_error_code"
                },
                "uVar2": {
                    "1": "error_description",
                    "21": "error_message",
                    "3": "error_message_text"
                },
                "in_R10": {
                    "1": "additional_error_message",
                    "6": "additional_info",
                    "2": "unknown",
                    "3": "unused_variable"
                },
                "_stdout": {
                    "3": "standard_output"
                },
                "_stderr": {
                    "3": "standard_error"
                },
                "dcgettext": {
                    "2": "get_localized_message",
                    "1": "fetch_error_message"
                },
                "bfd_errmsg": {
                    "1": "get_bfd_error_message",
                    "2": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error",
                    "2": "get_error_code"
                },
                "FUN_00102f96": {
                    "1": "load_library"
                },
                "DAT_0010d660": {
                    "3": "program_name"
                },
                "fprintf": {
                    "2": "print_formatted"
                },
                "fflush": {
                    "2": "flush_output"
                }
            }
        },
        "FUN_00107c80": {
            "entrypoint": "0x00107c80",
            "current_name": "set_file_time_00107c80",
            "code": "\nvoid set_file_time_00107c80(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 translated_error_message;\n  undefined4 access_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 creation_time;\n  undefined4 backup_time;\n  undefined4 pointer1;\n  undefined4 pointer2;\n  undefined4 pointer3;\n  \n  backup_time = *(undefined4 *)(file_info + 0x58);\n  pointer1 = *(undefined4 *)(file_info + 0x5c);\n  pointer2 = *(undefined4 *)(file_info + 0x60);\n  pointer3 = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  modification_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  creation_time = *(undefined4 *)(file_info + 0x54);\n  result = utimensat(-100,file_path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_message = strerror(*errno_ptr);\n    translated_error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00107920(translated_error_message,file_path,error_message);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "file_path",
                "param_2": "file_info",
                "iVar1": "result",
                "piVar2": "errno_ptr",
                "pcVar3": "error_message",
                "uVar4": "translated_error_message",
                "local_38": "access_time",
                "uStack_34": "modification_time",
                "uStack_30": "change_time",
                "uStack_2c": "creation_time",
                "local_28": "backup_time",
                "uStack_24": "pointer1",
                "uStack_20": "pointer2",
                "uStack_1c": "pointer3",
                "utimensat": "update_file_times",
                "__errno_location": "get_errno_location",
                "strerror": "get_error_string",
                "dcgettext": "translate_string"
            },
            "calling": [
                "FUN_00102c25"
            ],
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00107c80": {
                    "23": "set_file_time",
                    "1": "set_time",
                    "2": "set_file_modification_time",
                    "3": "set_file_timestamp"
                },
                "param_1": {
                    "31": "file_path"
                },
                "param_2": {
                    "1": "file_details",
                    "2": "file_info_ptr",
                    "24": "file_info",
                    "3": "file_data"
                },
                "iVar1": {
                    "28": "result",
                    "1": "error"
                },
                "piVar2": {
                    "1": "error",
                    "3": "error_location",
                    "17": "errno_ptr",
                    "2": "error_ptr"
                },
                "pcVar3": {
                    "10": "error_string",
                    "1": "error_msg",
                    "4": "error_str",
                    "12": "error_message",
                    "2": "err_msg"
                },
                "uVar4": {
                    "5": "translated_error",
                    "1": "error_msg",
                    "3": "error_message",
                    "4": "localized_error_message",
                    "6": "translated_error_message",
                    "2": "translated_err_msg"
                },
                "local_38": {
                    "2": "start_time",
                    "1": "time_spec1",
                    "14": "access_time"
                },
                "uStack_34": {
                    "1": "timestamp_3",
                    "11": "modification_time",
                    "2": "end_time"
                },
                "uStack_30": {
                    "1": "time_buffer3",
                    "7": "change_time",
                    "2": "flags"
                },
                "uStack_2c": {
                    "1": "unused3",
                    "3": "change_time",
                    "5": "creation_time"
                },
                "local_28": {
                    "2": "backup_time",
                    "1": "time2"
                },
                "uStack_24": {
                    "1": "pointer1"
                },
                "uStack_20": {
                    "1": "pointer2"
                },
                "uStack_1c": {
                    "1": "pointer3"
                },
                "utimensat": {
                    "1": "update_file_times"
                },
                "FUN_00107920": {
                    "1": "print_error"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "dcgettext": {
                    "1": "translate_string"
                }
            }
        },
        "FUN_00107cc0": {
            "entrypoint": "0x00107cc0",
            "current_name": "execute_functions_00107cc0",
            "code": "\nvoid execute_functions_00107cc0(void)\n\n{\n  long index;\n  long prev_index;\n  long temp_index;\n  long *function_list;\n  uint count;\n  \n  function_list = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(function_list + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)function_list[index + 2])();\n        prev_index = index + -1;\n        if (-1 < (int)prev_index) {\n          temp_index = prev_index;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)function_list[index + 1])();\n                        prev_index = index + -2;\n                      }\n                      (*(code *)function_list[prev_index + 2])();\n                      prev_index = prev_index + -1;\n                    }\n                    (*(code *)function_list[prev_index + 2])();\n                    prev_index = prev_index + -1;\n                  }\n                  (*(code *)function_list[prev_index + 2])();\n                  prev_index = prev_index + -1;\n                }\n                (*(code *)function_list[prev_index + 2])();\n                prev_index = prev_index + -1;\n              }\n              (*(code *)function_list[prev_index + 2])();\n              prev_index = prev_index + -1;\n            }\n            (*(code *)function_list[prev_index + 2])();\n            temp_index = prev_index + -1;\n            if ((int)(prev_index + -1) < 0) goto loop_label;\n          }\n          do {\n            (*(code *)function_list[temp_index + 2])();\n            index = temp_index + -1;\n            (*(code *)function_list[temp_index + 1])();\n            (*(code *)function_list[temp_index])();\n            (*(code *)function_list[index])();\n            (*(code *)function_list[temp_index + -2])();\n            (*(code *)function_list[temp_index + -3])();\n            (*(code *)function_list[temp_index + -4])();\n            (*(code *)function_list[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nloop_label:\n      function_list = (long *)*function_list;\n    } while (function_list != (long *)0x0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "lVar1": "index",
                "lVar2": "prev_index",
                "lVar3": "temp_index",
                "plVar4": "function_list",
                "uVar5": "count",
                "FUN_00107cc0": "execute_functions_00107cc0",
                "LAB_00107d96": "loop_label"
            },
            "calling": [
                "FUN_00105db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "lVar1": {
                    "3": "index1",
                    "1": "function_index",
                    "6": "current_index",
                    "14": "index"
                },
                "lVar2": {
                    "5": "previous_index",
                    "1": "j",
                    "2": "temp_index",
                    "12": "prev_index",
                    "3": "index2"
                },
                "lVar3": {
                    "1": "loop_index",
                    "3": "index3",
                    "18": "temp_index"
                },
                "plVar4": {
                    "1": "array_pointer",
                    "4": "function_array",
                    "2": "function_pointer_array",
                    "8": "function_list",
                    "5": "function_pointers"
                },
                "uVar5": {
                    "2": "function_index",
                    "1": "index",
                    "5": "num_functions",
                    "6": "counter"
                },
                "FUN_00107cc0": {
                    "3": "execute_function_chain",
                    "1": "execute_operations",
                    "9": "execute_functions"
                },
                "LAB_00107d96": {
                    "1": "label_end_loop"
                },
                "PTR_DAT_0010d2e0": {
                    "1": "function_list"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                }
            }
        },
        "_DT_FINI": {
            "entrypoint": "0x00107da8",
            "current_name": "_DT_FINI",
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 373102,
    "layers": [
        [
            "FUN_00102020",
            "FUN_001025a0",
            "FUN_0010266f",
            "FUN_00102710",
            "FUN_0010284b",
            "FUN_0010285f",
            "FUN_001028ed",
            "FUN_00102943",
            "FUN_00102ba1",
            "FUN_00102bb0",
            "FUN_00102bf5",
            "FUN_00102c25",
            "FUN_00102cd9",
            "FUN_00102d2f",
            "FUN_00102d8c",
            "FUN_00102e57",
            "FUN_00102e6f",
            "FUN_00102f08",
            "FUN_00102f1e",
            "FUN_00102f55",
            "FUN_00102f96",
            "FUN_00102fd7",
            "FUN_0010300e",
            "FUN_001030ed",
            "FUN_0010312d",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_001031a5",
            "FUN_001031cf",
            "FUN_001032a8",
            "FUN_0010336b",
            "FUN_001033b0",
            "FUN_001033d6",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00103a78",
            "FUN_00103ba8",
            "FUN_00103bd1",
            "FUN_00103c60",
            "FUN_00103ddc",
            "FUN_00103df9",
            "FUN_00103e95",
            "FUN_001052a0",
            "FUN_00105300",
            "FUN_00105480",
            "FUN_00105570",
            "FUN_001057a0",
            "FUN_00105830",
            "FUN_00105870",
            "FUN_001058b0",
            "FUN_00105a20",
            "FUN_00105a68",
            "FUN_00105ae0",
            "FUN_00105af0",
            "FUN_00105bb0",
            "FUN_00105bc0",
            "FUN_00105c00",
            "FUN_00105db0",
            "FUN_001075e0",
            "FUN_00107640",
            "FUN_00107650",
            "FUN_00107690",
            "FUN_00107730",
            "FUN_00107740",
            "FUN_00107890",
            "FUN_001078c0",
            "FUN_00107920",
            "FUN_001079c0",
            "FUN_00107c10",
            "FUN_00107c20",
            "FUN_00107c80",
            "FUN_00107cc0"
        ]
    ],
    "locked_functions": []
}