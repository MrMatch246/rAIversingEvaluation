{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_entry_00102cd9",
                "in_EAX": "inputValue",
                "iVar1": "comparisonResult",
                "unaff_RBX": "entryPointer",
                "param_7": "targetFilename"
            },
            "code": "\nlong * findMatchingEntry_00102cd9(void)\n\n{\n  int inputValue;\n  int comparisonResult;\n  long *entryPointer;\n  undefined8 targetFilename;\n  \n  targetFilename = DAT_0010d638;\n  if (inputValue == 3) {\n    for (; *entryPointer != 0; entryPointer = (long *)(*entryPointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*entryPointer != (undefined8 *)0x0; entryPointer = (long *)(*entryPointer + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*entryPointer,targetFilename);\n      if (comparisonResult == 0) {\n        if (inputValue != 2) {\n          return entryPointer;\n        }\n        return (long *)(*entryPointer + 0xf0);\n      }\n    }\n  }\n  return entryPointer;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_entry_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00102710",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00105830",
                "FUN_00105db0",
                "FUN_00102e6f",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "outputFile",
                "param_2": "fileInfo",
                "param_3": "printHeader",
                "param_4": "printAddress",
                "iVar1": "result",
                "ppcVar2": "filePtr",
                "pcVar3": "timeStr",
                "uVar4": "fileType",
                "local_100": "currentTimeStamp",
                "uStack_f3": "permissionsChar",
                "cStack_f2": "userRead",
                "cStack_f1": "userWrite",
                "cStack_f0": "userExec",
                "cStack_ef": "groupRead",
                "cStack_ee": "groupWrite",
                "cStack_ed": "groupExec",
                "cStack_ec": "otherRead",
                "cStack_eb": "otherWrite",
                "cStack_ea": "otherExec",
                "local_e8": "timeFormat",
                "local_b8": "buffer",
                "uStack_a0": "fileSize",
                "uStack_9c": "majorDevice",
                "uStack_98": "minorDevice",
                "uStack_88": "inode",
                "local_60": "creationTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *outputFile,char **fileInfo,char printHeader,char printAddress)\n\n{\n  int result;\n  char **filePtr;\n  char *timeStr;\n  uint fileType;\n  time_t currentTimeStamp;\n  undefined permissionsChar;\n  char userRead;\n  char userWrite;\n  char userExec;\n  char groupRead;\n  char groupWrite;\n  char groupExec;\n  char otherRead;\n  char otherWrite;\n  char otherExec;\n  undefined uStack_e9;\n  char timeFormat [48];\n  undefined buffer [24];\n  uint fileSize;\n  uint majorDevice;\n  uint minorDevice;\n  undefined8 inode;\n  time_t creationTime;\n  \n  if (printHeader != '\\0') {\n    filePtr = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      filePtr = fileInfo;\n    }\n    result = (**(code **)(filePtr[1] + 0x1e8))(fileInfo,buffer);\n    if (result == 0) {\n      currentTimeStamp = creationTime;\n      timeStr = ctime(&currentTimeStamp);\n      if (timeStr == (char *)0x0) {\n        timeStr = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(timeFormat,timeStr);\n      }\n      else {\n        sprintf(timeFormat,\"%.12s %.4s\",timeStr + 4);\n      }\n      fileType = fileSize & 0xf000;\n      if (fileType == 0x4000) {\n        permissionsChar = 100;\n      }\n      else if (fileType == 0xa000) {\n        permissionsChar = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        permissionsChar = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        permissionsChar = 99;\n      }\n      else if (fileType == 0xc000) {\n        permissionsChar = 0x73;\n      }\n      else {\n        permissionsChar = 0x70;\n        if (fileType != 0x1000) {\n          permissionsChar = 0x2d;\n        }\n      }\n      userRead = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      userWrite = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      userExec = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      groupRead = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      groupWrite = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      groupExec = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      otherRead = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      otherWrite = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      otherExec = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (userExec == 'x') {\n          userExec = 's';\n        }\n        else {\n          userExec = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (groupExec == 'x') {\n          groupExec = 's';\n        }\n        else {\n          groupExec = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (otherExec == 'x') {\n          otherExec = 't';\n        }\n        else {\n          otherExec = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&userRead,(ulong)majorDevice,(ulong)minorDevice,inode,\n              timeFormat,(ulong)fileSize);\n    }\n  }\n  fputs(*fileInfo,outputFile);\n  if (printAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "ctime",
                "FUN_00102d8c",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_file_00105a68",
                "pcVar1": "filePath",
                "pFVar2": "filePointer",
                "sVar3": "stringLength"
            },
            "code": "\nvoid processFile_00105a68(void)\n\n{\n  char *filePath;\n  FILE *filePointer;\n  size_t stringLength;\n  \n  filePath = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    stringLength = strlen(DAT_0010d5e8);\n    if (stringLength != 0) {\n      if (filePath[stringLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(filePath,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(filePath,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "perror",
                "concat",
                "printf",
                "fopen",
                "strlen",
                "xexit",
                "FUN_00102e57"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_entries_001032a8",
                "param_1": "archiveEntries",
                "param_2": "callbackFunction",
                "param_3": "entryNames",
                "param_4": "returnValue",
                "lVar1": "currentEntry",
                "uVar2": "formatSpecifier",
                "bVar3": "entryFound",
                "plVar4": "nextEntry",
                "iVar5": "comparisonResult",
                "__format": "localizedFormat",
                "plVar6": "currentEntryChild",
                "lVar7": "currentEntryPtr",
                "plVar8": "prevEntry"
            },
            "code": "\n\n\nundefined8 processArchiveEntries_001032a8(long *archiveEntries,code *callbackFunction,undefined8 *entryNames,undefined8 returnValue)\n\n{\n  long currentEntry;\n  undefined8 formatSpecifier;\n  bool entryFound;\n  long *nextEntry;\n  int comparisonResult;\n  char *localizedFormat;\n  long *currentEntryChild;\n  long currentEntryPtr;\n  long *prevEntry;\n  \n  currentEntryPtr = archiveEntries[0x1e];\n  if (entryNames == (undefined8 *)0x0) {\n    while (currentEntryPtr != 0) {\n      currentEntry = *(long *)(currentEntryPtr + 0xf0);\n      (*callbackFunction)(currentEntryPtr,0);\n      currentEntryPtr = currentEntry;\n    }\n  }\n  else {\n    do {\n      entryFound = false;\n      nextEntry = (long *)archiveEntries[0x1e];\n      prevEntry = archiveEntries;\n      while (currentEntryChild = nextEntry, currentEntryChild != (long *)0x0) {\n        if (*currentEntryChild != 0) {\n          comparisonResult = filename_cmp(*entryNames);\n          if (comparisonResult == 0) {\n            entryFound = true;\n            (*callbackFunction)(currentEntryChild,prevEntry);\n          }\n        }\n        prevEntry = currentEntryChild;\n        nextEntry = (long *)currentEntryChild[0x1e];\n      }\n      if (!entryFound) {\n        formatSpecifier = *entryNames;\n        localizedFormat = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,localizedFormat,formatSpecifier);\n      }\n      entryNames = (undefined8 *)entryNames[1];\n    } while (entryNames != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_entries_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_archive_entry_error_0010285f",
                "__format": "errorMessage",
                "lVar2": "entry",
                "plVar3": "alternateEntry",
                "uVar4": "entryName",
                "plVar5": "currentEntry",
                "unaff_RBP": "printEntry",
                "unaff_R12": "archiveStart",
                "unaff_R13D": "numEntries",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "count",
                "code_r0x0010285f": "printErrorMessageLoop",
                "_stderr": "stderr",
                "dcgettext": "lookupMessage",
                "fprintf": "writeErrorMessage",
                "filename_cmp": "compareEntryNames"
            },
            "code": "\n\n\nvoid printArchiveEntryError_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessage;\n  long entry;\n  long *alternateEntry;\n  undefined8 entryName;\n  long *currentEntry;\n  code *printEntry;\n  long archiveStart;\n  int numEntries;\n  undefined8 *entryNames;\n  int count;\n  \nprintErrorMessageLoop:\n  entryName = *entryNames;\n  errorMessage = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(stderr,errorMessage,entryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  numEntries = numEntries + -1;\n  if (numEntries == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archiveStart + 0xf0);\n  count = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto printErrorMessageLoop;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      entry = *currentEntry;\n      if (entry == 0) {\n        alternateEntry = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          alternateEntry = currentEntry;\n        }\n        (**(code **)(alternateEntry[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archiveStart + 0x49) & 0x10) == 0) || (entry = FUN_00105830(), entry != 0))\n      {\n        entryName = FUN_00105830(*entryNames);\n        iVar1 = filename_cmp(entryName,entry);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (count = count + 1,\n            count == _DAT_0010d630)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*printEntry)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_archive_entry_error_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102bb0",
                "FUN_001057a0",
                "FUN_00103a78",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_info_00102f96",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorInfo_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_info_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "isVerbose",
                "uVar1": "version",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint isVerbose)\n\n{\n  undefined8 version;\n  char *message;\n  FILE *outputStream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (isVerbose != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,message,DAT_0010d660);\n  version = DAT_0010d660;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,message,version);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  FUN_0010336b(outputStream);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (isVerbose != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isVerbose ^ 1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010336b",
                "fprintf",
                "FUN_0010266f",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "param_1": "verbosityLevel",
                "uVar1": "defaultUsageString",
                "__stream": "outputStream",
                "pcVar2": "message",
                "_stderr": "standardErrorStream",
                "_stdout": "standardOutputStream"
            },
            "code": "\n\n\nvoid printUsage_0010394a(uint verbosityLevel)\n\n{\n  undefined8 defaultUsageString;\n  char *message;\n  FILE *outputStream;\n  \n  defaultUsageString = DAT_0010d660;\n  outputStream = standardErrorStream;\n  if (verbosityLevel != 0) {\n    outputStream = standardOutputStream;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,defaultUsageString);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (verbosityLevel != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(verbosityLevel ^ 1);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_0010266f",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "extract_data_00107920",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "dataPtr",
                "param_10": "ptr1",
                "param_11": "ptr2",
                "param_12": "ptr3",
                "param_13": "ptr4",
                "param_14": "ptr5",
                "in_AL": "flag",
                "local_d8": "size1",
                "local_d4": "size2",
                "local_d0": "bufferPtr",
                "local_c8": "buffer",
                "local_b8": "data",
                "local_b0": "paramPtr1",
                "local_a8": "paramPtr2",
                "local_a0": "paramPtr3",
                "local_98": "paramPtr4",
                "local_90": "paramPtr5",
                "local_88": "newParam1",
                "local_78": "newParam2",
                "local_68": "newParam3",
                "local_58": "newParam4",
                "local_48": "newParam5",
                "local_38": "newParam6",
                "local_28": "newParam7",
                "local_18": "newParam8"
            },
            "code": "\nvoid extractData_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 dataPtr,undefined8 ptr1,undefined8 ptr2,undefined8 ptr3,\n                 undefined8 ptr4,undefined8 ptr5)\n\n{\n  char flag;\n  undefined4 size1;\n  undefined4 size2;\n  undefined *bufferPtr;\n  undefined *buffer;\n  undefined data [8];\n  undefined8 paramPtr1;\n  undefined8 paramPtr2;\n  undefined8 paramPtr3;\n  undefined8 paramPtr4;\n  undefined8 paramPtr5;\n  undefined4 newParam1;\n  undefined4 newParam2;\n  undefined4 newParam3;\n  undefined4 newParam4;\n  undefined4 newParam5;\n  undefined4 newParam6;\n  undefined4 newParam7;\n  undefined4 newParam8;\n  \n  if (flag != '\\0') {\n    newParam1 = input1;\n    newParam2 = input2;\n    newParam3 = input3;\n    newParam4 = input4;\n    newParam5 = input5;\n    newParam6 = input6;\n    newParam7 = input7;\n    newParam8 = input8;\n  }\n  bufferPtr = &stack0x00000008;\n  size1 = 8;\n  buffer = data;\n  size2 = 0x30;\n  paramPtr1 = ptr1;\n  paramPtr2 = ptr2;\n  paramPtr3 = ptr3;\n  paramPtr4 = ptr4;\n  paramPtr5 = ptr5;\n  FUN_001078c0(dataPtr,&size1);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00102fd7",
                "FUN_00102f1e",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_data_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_001058b0",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "check_if_true_00105bb0"
            },
            "code": "\nundefined8 check_if_true_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_if_true_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_00107640"
            },
            "code": "\nundefined8 initialize_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "process_file_path_00102e6f",
                "pcVar1": "baseDirectory",
                "in_RAX": "filePath",
                "uVar2": "newFilePath",
                "uVar3": "errorMessage",
                "pFVar4": "filePointer",
                "sVar5": "pathLength",
                "pcVar6": "currentChar"
            },
            "code": "\nvoid processFilePath_00102e6f(void)\n\n{\n  char *baseDirectory;\n  char *filePath;\n  undefined8 newFilePath;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  size_t pathLength;\n  char *currentChar;\n  \n  baseDirectory = DAT_0010d5e8;\n  do {\n    filePath = filePath + 1;\n    while (*filePath != '/') {\n      if (*filePath == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (pathLength = strlen(DAT_0010d5e8), pathLength != 0)) {\n          if (baseDirectory[pathLength - 1] == '/') {\n            DAT_0010d618 = (char *)concat(baseDirectory,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(baseDirectory,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        filePointer = fopen(DAT_0010d618,\"w\");\n        if (filePointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      currentChar = filePath;\n      if ((*filePath == '.') && (currentChar = filePath + 1, filePath[1] == '.')) {\n        currentChar = filePath + 2;\n        if ((filePath[2] == '/') || (filePath[2] == '\\0')) {\n          newFilePath = lbasename();\n          baseDirectory = DAT_0010d618;\n          errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          FUN_00107920(errorMessage,baseDirectory,newFilePath);\n          DAT_0010d618 = (char *)newFilePath;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (filePath = currentChar, *currentChar != '\\0' && (*currentChar != '/')); currentChar = currentChar + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107920",
                "lbasename",
                "FUN_00105a68",
                "FUN_00102e6f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_file_path_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_and_exit_on_zero_0010315d",
                "xexit": "exitFunc"
            },
            "code": "\n\n\nvoid checkAndExitOnZero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_exit_on_zero_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_status_message_00107890",
                "param_1": "message",
                "_stdout": "outputStream"
            },
            "code": "\n\n\nvoid printStatusMessage_00107890(undefined8 message)\n\n{\n  FUN_001079c0(outputStream,message,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_status_message_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00105af0",
                "FUN_00103c60",
                "FUN_00102710"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "bufferPointer",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *bufferPointer;\n  undefined returnValue [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)FUN_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    bufferPointer = malloc(0x4002);\n    *(void **)((long)buffer + 8) = bufferPointer;\n  } while (bufferPointer == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  FUN_001031cf(buffer,param1);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = buffer;\n  return returnValue;\n}\n\n",
            "called": [
                "malloc",
                "FUN_001033b0",
                "FUN_001031cf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "copy_and_print_string_00103172",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "should_print",
                "param_4": "value",
                "uVar1": "temp",
                "auVar2": "result"
            },
            "code": "\nundefined  [16]\ncopy_and_print_string_00103172(undefined8 *source,undefined8 *destination,char should_print,undefined8 value)\n\n{\n  undefined8 temp;\n  undefined result [16];\n  \n  if (should_print != '\\0') {\n    printf(\"r - %s\\n\",*destination);\n  }\n  temp = *source;\n  destination[0x1e] = temp;\n  result._1_7_ = (undefined7)((ulong)temp >> 8);\n  result[0] = 1;\n  *source = destination;\n  result._8_8_ = value;\n  return result;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "copy_and_print_string_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_filename_00105870",
                "param_1": "fileList",
                "param_2": "numFiles",
                "param_3": "searchFilename",
                "uVar2": "defaultFilename",
                "iVar3": "searchType",
                "iVar1": "cmpResult"
            },
            "code": "\nlong * findFilename_00105870(long *fileList,int numFiles,undefined8 searchFilename)\n\n{\n  int cmpResult;\n  undefined8 defaultFilename;\n  int searchType;\n  \n  defaultFilename = DAT_0010d638;\n  searchType = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultFilename = searchFilename;\n    searchType = numFiles;\n  }\n  if (searchType == 3) {\n    for (; *fileList != 0; fileList = (long *)(*fileList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileList != (undefined8 *)0x0; fileList = (long *)(*fileList + 0xf0)) {\n      cmpResult = filename_cmp(*(undefined8 *)*fileList,defaultFilename);\n      if (cmpResult == 0) {\n        if (searchType != 2) {\n          return fileList;\n        }\n        return (long *)(*fileList + 0xf0);\n      }\n    }\n  }\n  return fileList;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_filename_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "initialize_data_001030ed",
                "puVar1": "dataPtr"
            },
            "code": "\nvoid initializeData_001030ed(void)\n\n{\n  undefined8 *dataPtr;\n  \n  dataPtr = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)dataPtr + 0x1c);\n  DAT_0010d5b0 = (undefined *)dataPtr[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *dataPtr;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_data_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_unlink_file_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "copyOptions",
                "param_4": "errorCode",
                "uVar1": "copyResult",
                "piVar2": "errorNumber",
                "pcVar3": "errorMessage",
                "uVar4": "errorString",
                "uVar5": "unlinkResult",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] copyAndUnlinkFile_00105bc0(char *sourceFilePath,char *destinationFilePath,undefined4 copyOptions,undefined8 errorCode)\n\n{\n  uint copyResult;\n  int *errorNumber;\n  char *errorMessage;\n  undefined8 errorString;\n  ulong unlinkResult;\n  undefined result [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    unlinkResult = 0;\n  }\n  else {\n    copyResult = FUN_00105c00(copyOptions);\n    unlinkResult = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorNumber = __errno_location();\n      errorMessage = strerror(*errorNumber);\n      errorString = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00107920(errorString,destinationFilePath,errorMessage);\n    }\n    unlink(sourceFilePath);\n  }\n  result._8_8_ = errorCode;\n  result._0_8_ = unlinkResult;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102f1e",
                "FUN_00105c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "validate_and_execute_00107650",
                "param_1": "input_data",
                "uVar1": "result",
                "lVar2": "count"
            },
            "code": "\nundefined8 validate_and_execute_00107650(undefined8 input_data)\n\n{\n  undefined8 result;\n  long count;\n  \n  count = FUN_001052a0();\n  if (count < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    count = FUN_00105300(input_data,0);\n    if (count == 0) {\n                    \n      xexit(1);\n    }\n    FUN_001058b0(count);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010284b",
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_001052a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "validate_and_execute_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_delete_00102f1e",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "auVar3": "returnValue",
                "__errno_location": "getErrnoLocation",
                "strerror": "getErrorString",
                "dcgettext": "getLocalizedErrorMessage",
                "unlink": "deleteFile"
            },
            "code": "\nundefined  [16] copyFileAndDelete_00102f1e(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  ulong fileSize;\n  char *filePath;\n  undefined returnValue [16];\n  undefined8 unaff_retaddr;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00107920(errorMessage);\n  unlink(filePath);\n  returnValue._0_8_ = fileSize & 0xffffffff;\n  returnValue._8_8_ = unaff_retaddr;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "unlink",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_and_delete_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_time_set_error_00102fd7",
                "piVar1": "errorPointer",
                "uVar2": "errorString"
            },
            "code": "\nvoid printTimeSetError_00102fd7(void)\n\n{\n  int *errorPointer;\n  undefined8 errorString;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00107920(errorString);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_time_set_error_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_00103ba8"
            },
            "code": "\n\n\nvoid checkAndPrintAR_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_print_ar_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105480",
                "FUN_001032a8",
                "FUN_00105db0",
                "FUN_00102cd9",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001025a0",
                "FUN_00103bd1",
                "FUN_0010336b",
                "FUN_00105300",
                "FUN_00102d8c",
                "FUN_00102f1e",
                "FUN_00105db0",
                "FUN_0010394a",
                "FUN_001052a0",
                "FUN_00102c25",
                "FUN_001058b0",
                "FUN_0010285f",
                "FUN_001031a5",
                "FUN_00103a78",
                "FUN_00102fd7",
                "FUN_001032a8",
                "FUN_00102f96",
                "FUN_0010342d",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_00102e6f",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "execute_function_00103ddc",
                "param_1": "inputParam"
            },
            "code": "\nvoid executeFunction_00103ddc(undefined8 inputParam)\n\n{\n  FUN_001079c0(DAT_0010d578,inputParam,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "execute_function_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "errorMessage",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010d660);\n  vfprintf(standardError,errorMessage,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107920",
                "FUN_00107690"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "versionString",
                "pcVar1": "licenseText"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 versionString)\n\n{\n  char *licenseText;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  licenseText = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(licenseText);\n  licenseText = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(licenseText);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archive_entries_00105480",
                "param_1": "archive",
                "param_2": "callbackFn",
                "param_3": "fileNames",
                "param_4": "numFiles",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "nextEntry",
                "uVar4": "result",
                "plVar5": "currentEntryPtr",
                "local_cc": "count",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processArchiveEntries_00105480(long archive,code *callbackFn,undefined8 *fileNames,int numFiles)\n\n{\n  int iVar1;\n  char *formatString;\n  long currentEntry;\n  long *nextEntry;\n  undefined8 result;\n  long *currentEntryPtr;\n  int count;\n  undefined buffer [152];\n  \n  currentEntry = *(long *)(archive + 0xf0);\n  if (numFiles == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callbackFn)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      currentEntryPtr = *(long **)(archive + 0xf0);\n      count = 0;\n      for (; currentEntryPtr != (long *)0x0; currentEntryPtr = (long *)currentEntryPtr[0x1e]) {\n        if (*(int *)((long)currentEntryPtr + 0xac) == 0) {\n          currentEntry = *currentEntryPtr;\n          if (currentEntry == 0) {\n            nextEntry = (long *)currentEntryPtr[0x1d];\n            if ((long *)currentEntryPtr[0x1d] == (long *)0x0) {\n              nextEntry = currentEntryPtr;\n            }\n            (**(code **)(nextEntry[1] + 0x1e8))(currentEntryPtr,buffer);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (currentEntry = FUN_00105830(currentEntry,archive), currentEntry != 0)) {\n            result = FUN_00105830(*fileNames,archive);\n            iVar1 = filename_cmp(result,currentEntry);\n            if ((iVar1 == 0) &&\n               ((DAT_0010d634 == '\\0' || (count = count + 1, count == _DAT_0010d630)))) {\n              (*callbackFn)();\n              *(undefined4 *)((long)currentEntryPtr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      result = *fileNames;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,result);\nLAB_0010553e:\n      fileNames = fileNames + 1;\n      numFiles = numFiles + -1;\n    } while (numFiles != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010285f",
                "FUN_00105830",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_archive_script_error_001031a5",
                "__format": "errorFormat",
                "uVar1": "lineNumber",
                "dcgettext": "getMessage",
                "printf": "printMessage"
            },
            "code": "\nvoid printArchiveScriptError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *errorFormat;\n  \n  lineNumber = DAT_0010d554 + 1;\n  errorFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorFormat,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_archive_script_error_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103a78",
                "FUN_00102ba1",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_0010266f",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00107c10",
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_0010315d",
                "FUN_00105db0",
                "FUN_0010342d",
                "FUN_0010394a",
                "FUN_00107690",
                "FUN_00105a68",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001058b0",
                "FUN_00102f55",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105db0",
                "FUN_00105a68",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "in",
                "__size": "buffer_size",
                "lVar1": "loop_counter",
                "lVar2": "new_buffer_size",
                "puVar3": "buffer_ptr",
                "bVar4": "temp_var"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 in;\n  long loop_counter;\n  long new_buffer_size;\n  undefined4 *buffer_ptr;\n  byte temp_var;\n  \n  temp_var = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return in;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return in;\n    }\n    new_buffer_size = DAT_0010d580 + 8;\n    buffer_size = new_buffer_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_buffer_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)temp_var * -2 + 1;\n      }\n      return in;\n    }\n  }\n  FUN_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return in;\n}\n\n",
            "called": [
                "realloc",
                "calloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_archived_files_00103a78",
                "param_1": "archive_file",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "retrieved_archive",
                "uVar3": "bytes_read",
                "uVar4": "error_message",
                "sVar5": "bytes_written",
                "piVar6": "error_number",
                "unaff_RBP": "remaining_bytes",
                "pcVar7": "error_string",
                "unaff_R13": "total_bytes",
                "unaff_R14": "archive_size",
                "auStack_b8": "additional_data",
                "local_88": "max_bytes"
            },
            "code": "\n\n\nvoid extract_archived_files_00103a78(undefined8 *archive_file)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *retrieved_archive;\n  ulong bytes_read;\n  undefined8 error_message;\n  size_t bytes_written;\n  int *error_number;\n  size_t remaining_bytes;\n  char *error_string;\n  ulong total_bytes;\n  ulong archive_size;\n  undefined additional_data [48];\n  ulong max_bytes;\n  \n  buffer = (void *)xmalloc(0x2000);\n  retrieved_archive = (undefined8 *)archive_file[0x1d];\n  if ((undefined8 *)archive_file[0x1d] == (undefined8 *)0x0) {\n    retrieved_archive = archive_file;\n  }\n  result = (**(code **)(retrieved_archive[1] + 0x1e8))(archive_file,additional_data);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*archive_file);\n    }\n    total_bytes = 0;\n    bfd_seek(archive_file,0,0);\n    goto LAB_00103afd;\n  }\n  archive_file = (undefined8 *)*archive_file;\n  error_string = \"internal stat error on %s\";\n  do {\n    error_message = dcgettext(0,error_string,5);\n    FUN_00107690(error_message,archive_file);\n    max_bytes = archive_size;\n    do {\n      bytes_written = fwrite(buffer,1,remaining_bytes,_stdout);\n      if (bytes_written != remaining_bytes) {\n        error_number = __errno_location();\n        error_string = strerror(*error_number);\n        FUN_00107690(\"stdout: %s\",error_string);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      total_bytes = total_bytes + bytes_written;\nLAB_00103afd:\n      if (max_bytes <= total_bytes) goto LAB_00103b91;\n      remaining_bytes = max_bytes - total_bytes;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,remaining_bytes,archive_file);\n    } while (remaining_bytes == bytes_read);\n    error_string = \"%s is not a valid archive\";\n    archive_file = *(undefined8 **)archive_file[0x1d];\n    archive_size = max_bytes;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "printf",
                "bfd_seek",
                "bfd_bread",
                "__errno_location",
                "free",
                "FUN_00107690",
                "fwrite",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103bd1",
                "FUN_0010336b",
                "FUN_00105300",
                "FUN_00102d8c",
                "FUN_00105db0",
                "FUN_0010394a",
                "FUN_001078c0",
                "FUN_001033b0",
                "FUN_0010285f",
                "FUN_001032a8",
                "FUN_0010342d",
                "FUN_00102f96",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "print_file_details_001058b0",
                "param_1": "fileInfo",
                "cVar1": "result",
                "uVar2": "flags",
                "uVar4": "filename",
                "__format": "timeFormat",
                "__ptr": "filenameCopy",
                "__stream": "fileStream",
                "ppcVar5": "formatOptions",
                "uStack0000000000000020": "fileMode",
                "in_stack_00000028": "fileSize",
                "in_stack_00000038": "fileTime",
                "local_3c": "errorCode",
                "uStack_33": "typeChar",
                "cStack_32": "executableFlag",
                "cStack_31": "writableFlag"
            },
            "code": "\n\n\nvoid printFileDetails_001058b0(undefined8 *fileInfo)\n\n{\n  char result;\n  uint flags;\n  int iVar3;\n  undefined8 filename;\n  char *timeFormat;\n  void *filenameCopy;\n  FILE *fileStream;\n  char **formatOptions;\n  uint fileMode;\n  uint fileSize;\n  undefined8 fileTime;\n  int errorCode [2];\n  undefined typeChar;\n  char executableFlag;\n  char writableFlag;\n  \n  filename = fileInfo[0x1e];\n  errorCode[0] = -1;\n  filenameCopy = (void *)xstrdup(*fileInfo);\n  fileStream = (FILE *)FUN_001057a0(filenameCopy,errorCode);\n  iVar3 = errorCode[0];\n  if (fileStream != (FILE *)0x0) {\n    DAT_0010d618 = fileStream;\n    formatOptions = (char **)bfd_fdopenw(fileStream,*(undefined8 *)fileInfo[1],errorCode[0]);\n    if (formatOptions != (char **)0x0) {\n      DAT_0010d5e0 = formatOptions;\n      bfd_set_format(formatOptions,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)formatOptions + 0x49) & 0xfffffff7;\n      *(char *)((long)formatOptions + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)formatOptions + 0x44) = *(uint *)((long)formatOptions + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)formatOptions + 0x44) = *(uint *)((long)formatOptions + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)fileInfo + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)formatOptions + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(formatOptions,filename);\n        if (result != '\\0') break;\n        flags = FUN_00107c10(filenameCopy);\nLAB_00102d37:\n        *(uint *)((long)formatOptions + 0x44) = *(uint *)((long)formatOptions + 0x44) | 0x100000;\n      }\n      iVar3 = dup(iVar3);\n      result = bfd_close(formatOptions);\n      if (result == '\\0') {\n        FUN_00107c10(filenameCopy);\n        timeFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,timeFormat);\n        flags = fileMode & 0xf000;\n        if (flags == 0x4000) {\n          typeChar = 100;\n        }\n        else if (flags == 0xa000) {\n          typeChar = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          typeChar = 0x62;\n        }\n        else if (flags == 0x2000) {\n          typeChar = 99;\n        }\n        else if (flags == 0xc000) {\n          typeChar = 0x73;\n        }\n        else {\n          typeChar = 0x70;\n          if (flags != 0x1000) {\n            typeChar = 0x2d;\n          }\n        }\n        executableFlag = (-((_fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n        writableFlag = (-((_fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(fileStream,\"%s %ld/%ld %6lu %s \",&executableFlag,_fileMode >> 0x20,\n                (ulong)fileSize,fileTime,&stack0xffffffffffffffd8,\n                _fileMode & 0xffffffff);\n        fputs(*formatOptions,fileStream);\n        if ((char)fileInfo != '\\0') {\n          if ((*(byte *)((long)formatOptions + 0x49) & 0x10) == 0) {\n            if (formatOptions[0xb] != (char *)0x0) {\n              fprintf(fileStream,\" 0x%lx\");\n            }\n          }\n          else if (formatOptions[0xc] != (char *)0x0) {\n            fprintf(fileStream,\" 0x%lx\");\n          }\n        }\n        fputc(10,fileStream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(fileInfo);\n      iVar3 = FUN_00105bc0(fileStream,filenameCopy,iVar3);\n      if (iVar3 == 0) {\n        free(filenameCopy);\n        free(fileStream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(iVar3);\n    FUN_00107c10(filenameCopy);\n  }\n  filename = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  FUN_00107c10(filename);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107c10",
                "close",
                "bfd_fdopenw",
                "FUN_001057a0",
                "xstrdup",
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "print_file_details_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_resources_00102bf5"
            },
            "code": "\nvoid cleanupResources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "fclose",
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_resources_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_function_00102020"
            },
            "code": "\nvoid executeIndirectFunction_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105db0",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102f96",
                "FUN_00103ba8",
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "reset_counter_00102943"
            },
            "code": "\nvoid resetCounter_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_00105570",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "reset_counter_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105af0",
                "FUN_00105300",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_modification_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfoPtr",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar4": "localizedErrorMessage",
                "local_38": "timeSec",
                "uStack_34": "timeNsec",
                "uStack_30": "utcTimeSec",
                "uStack_2c": "utcTimeNsec",
                "local_28": "timeSecBackup",
                "uStack_24": "timeNsecBackup",
                "uStack_20": "utcTimeSecBackup",
                "uStack_1c": "utcTimeNsecBackup"
            },
            "code": "\nvoid setFileModificationTime_00107c80(char *filePath,long fileInfoPtr)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 localizedErrorMessage;\n  undefined4 timeSec;\n  undefined4 timeNsec;\n  undefined4 utcTimeSec;\n  undefined4 utcTimeNsec;\n  undefined4 timeSecBackup;\n  undefined4 timeNsecBackup;\n  undefined4 utcTimeSecBackup;\n  undefined4 utcTimeNsecBackup;\n  \n  timeSecBackup = *(undefined4 *)(fileInfoPtr + 0x58);\n  timeNsecBackup = *(undefined4 *)(fileInfoPtr + 0x5c);\n  utcTimeSecBackup = *(undefined4 *)(fileInfoPtr + 0x60);\n  utcTimeNsecBackup = *(undefined4 *)(fileInfoPtr + 100);\n  timeSec = *(undefined4 *)(fileInfoPtr + 0x48);\n  timeNsec = *(undefined4 *)(fileInfoPtr + 0x4c);\n  utcTimeSec = *(undefined4 *)(fileInfoPtr + 0x50);\n  utcTimeNsec = *(undefined4 *)(fileInfoPtr + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timeSec,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorString = strerror(*errnoPtr);\n    localizedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00107920(localizedErrorMessage,filePath,errorString);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00102fd7",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_modification_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_and_write_file_00105a20",
                "param_1": "outputPath",
                "pcVar1": "archivePath",
                "pcVar2": "currentPath",
                "uVar3": "basenameResult",
                "uVar4": "errorMessage",
                "pFVar5": "filePointer",
                "sVar6": "archivePathSize"
            },
            "code": "\nvoid extractAndWriteFile_00105a20(char *outputPath)\n\n{\n  char *archivePath;\n  char *currentPath;\n  undefined8 basenameResult;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  size_t archivePathSize;\n  \n  archivePath = DAT_0010d5e8;\n  DAT_0010d618 = outputPath;\n  if (*outputPath == '/') {\nLAB_00102e9a:\n    basenameResult = lbasename();\n    archivePath = DAT_0010d618;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    FUN_00107920(errorMessage,archivePath,basenameResult);\n    DAT_0010d618 = (char *)basenameResult;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*outputPath == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (archivePathSize = strlen(DAT_0010d5e8), archivePathSize != 0)) {\n        if (archivePath[archivePathSize - 1] == '/') {\n          DAT_0010d618 = (char *)concat(archivePath,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(archivePath,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      filePointer = fopen(DAT_0010d618,\"w\");\n      if (filePointer == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentPath = outputPath;\n    if ((*outputPath == '.') && (currentPath = outputPath + 1, outputPath[1] == '.')) {\n      currentPath = outputPath + 2;\n      if ((outputPath[2] == '/') || (outputPath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentPath != '\\0' && (*currentPath != '/')); currentPath = currentPath + 1) {\n    }\n    for (; outputPath = currentPath, *currentPath == '/'; currentPath = currentPath + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_and_write_file_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00105a68",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_00102f55",
                "unaff_R12D": "file_descriptor"
            },
            "code": "\nundefined8 close_file_00102f55(void)\n\n{\n  int iVar1;\n  int *piVar2;\n  int file_descriptor;\n  \n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  close(file_descriptor);\n  *piVar2 = iVar1;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "create_temporary_file_path_001057a0",
                "param_1": "input_path",
                "param_2": "file_descriptor",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "path_length",
                "lVar4": "tmp_var_1",
                "lVar5": "tmp_var_2",
                "pcVar6": "allocated_path",
                "bVar7": "byte_var",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] create_temporary_file_path_001057a0(char *input_path,int *file_descriptor,undefined8 arg3,undefined8 arg4)\n\n{\n  int result;\n  char *last_slash;\n  long path_length;\n  long tmp_var_1;\n  long tmp_var_2;\n  char *allocated_path;\n  byte byte_var;\n  undefined return_value [16];\n  \n  byte_var = 0;\n  last_slash = strrchr(input_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    tmp_var_2 = (long)last_slash - (long)input_path;\n    last_slash = (char *)xmalloc(tmp_var_2 + 0xb);\n    path_length = tmp_var_2 + 1;\n    allocated_path = last_slash;\n    for (tmp_var_1 = tmp_var_2; tmp_var_1 != 0; tmp_var_1 = tmp_var_1 + -1) {\n      *allocated_path = *input_path;\n      input_path = input_path + (ulong)byte_var * -2 + 1;\n      allocated_path = allocated_path + (ulong)byte_var * -2 + 1;\n    }\n    last_slash[tmp_var_2] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    allocated_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    allocated_path = last_slash;\n  }\n  return_value._8_8_ = arg4;\n  return_value._0_8_ = allocated_path;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00102ba1",
                "mkstemp",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_001058b0",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "create_temporary_file_path_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "param_19": "filePermissions",
                "param_20": "fileSize",
                "param_22": "modificationTime",
                "__format": "corruptTimeFormat",
                "unaff_RBX": "fileData",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "isExecutable",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "permissionUserRead",
                "cStack0000000000000017": "permissionUserWrite",
                "param_9": "permissionUserExecute",
                "cStack0000000000000019": "permissionGroupRead",
                "cStack000000000000001a": "permissionGroupWrite",
                "cStack000000000000001b": "permissionGroupExecute",
                "cStack000000000000001c": "permissionOtherRead",
                "cStack000000000000001d": "permissionOtherWrite",
                "cStack000000000000001e": "permissionOtherExecute",
                "uStack000000000000001f": "flag",
                "uStack000000000000006c": "currentUid",
                "stack0x00000016": "formattedString1",
                "stack0x00000020": "formattedString2"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *corruptTimeFormat;\n  uint uVar1;\n  char **fileData;\n  FILE *outputFile;\n  char isExecutable;\n  undefined fileTypeChar;\n  char permissionUserRead;\n  char permissionUserWrite;\n  char permissionUserExecute;\n  char permissionGroupRead;\n  char permissionGroupWrite;\n  char permissionGroupExecute;\n  char permissionOtherRead;\n  char permissionOtherWrite;\n  char permissionOtherExecute;\n  undefined flag;\n  uint filePermissions;\n  uint currentUid;\n  uint fileSize;\n  undefined8 modificationTime;\n  \n  corruptTimeFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&formattedString2,corruptTimeFormat);\n  uVar1 = filePermissions & 0xf000;\n  if (uVar1 == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (uVar1 != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  permissionUserRead = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  permissionUserWrite = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  permissionUserExecute = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  permissionGroupRead = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  permissionGroupWrite = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  permissionGroupExecute = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  permissionOtherRead = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  permissionOtherWrite = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  permissionOtherExecute = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (permissionUserExecute == 'x') {\n      permissionUserExecute = 's';\n    }\n    else {\n      permissionUserExecute = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (permissionGroupExecute == 'x') {\n      permissionGroupExecute = 's';\n    }\n    else {\n      permissionGroupExecute = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (permissionOtherExecute == 'x') {\n      permissionOtherExecute = 't';\n    }\n    else {\n      permissionOtherExecute = 'T';\n    }\n  }\n  flag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&formattedString1,(ulong)currentUid,\n          (ulong)fileSize,modificationTime,&formattedString2,(ulong)filePermissions);\n  fputs(*fileData,outputFile);\n  if (isExecutable != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputs",
                "fprintf",
                "fputc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001025a0",
                "FUN_00103a78",
                "FUN_00102f55",
                "FUN_00102fd7",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_001031cf",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105c00",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "convert_library_00105300",
                "param_1": "inputPath",
                "param_2": "archivedFiles",
                "plVar1": "archivedFilePointer",
                "pcVar2": "errorMessage",
                "bVar3": "isThinLibrary",
                "cVar4": "conversionResult",
                "iVar5": "fileStatResult",
                "uVar6": "errorString",
                "uVar7": "libraryName",
                "piVar8": "errnoLocation",
                "lVar9": "nextArchivedFile",
                "puVar10": "readLibraryResult",
                "local_b0": "matchingFormat",
                "local_a8": "fileStat"
            },
            "code": "\n\n\nundefined8 * convertLibrary_00105300(char *inputPath,undefined8 *archivedFiles)\n\n{\n  long *archivedFilePointer;\n  char *errorMessage;\n  byte isThinLibrary;\n  char conversionResult;\n  int fileStatResult;\n  undefined8 errorString;\n  undefined8 libraryName;\n  int *errnoLocation;\n  long nextArchivedFile;\n  undefined8 *readLibraryResult;\n  undefined8 matchingFormat;\n  stat fileStat;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  fileStatResult = stat(inputPath,&fileStat);\n  errorMessage = DAT_0010d618;\n  if (fileStatResult == 0) goto LAB_001053be;\n  errnoLocation = __errno_location();\n  if (*errnoLocation == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(inputPath);\n      FUN_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (archivedFiles != (undefined8 *)0x0)) {\n      readLibraryResult = (undefined8 *)FUN_00102710();\n      return readLibraryResult;\n    }\n    archivedFiles = (undefined8 *)bfd_openw(inputPath,DAT_0010d5f0);\n    if (((archivedFiles != (undefined8 *)0x0) && (conversionResult = bfd_set_format(archivedFiles,2), conversionResult != '\\0')) &&\n       (conversionResult = bfd_close(archivedFiles), conversionResult != '\\0')) {\n      errorMessage = inputPath;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  FUN_00107c10(inputPath);\n  do {\n    isThinLibrary = *(byte *)((long)archivedFiles + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        libraryName = *archivedFiles;\n        errorString = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(errorString,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      libraryName = *archivedFiles;\n      errorString = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(errorString,libraryName);\nLAB_001027cb:\n      FUN_00107c20(inputPath);\n      fileStatResult = bfd_get_error();\n      if (fileStatResult == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(matchingFormat);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archivedFilePointer = archivedFiles + 0x1e;\n      for (nextArchivedFile = bfd_openr_next_archived_file(archivedFiles,0); nextArchivedFile != 0;\n          nextArchivedFile = bfd_openr_next_archived_file(archivedFiles,nextArchivedFile)) {\n        *archivedFilePointer = nextArchivedFile;\n        archivedFilePointer = (long *)(nextArchivedFile + 0xf0);\n      }\n      *archivedFilePointer = 0;\n      fileStatResult = bfd_get_error();\n      if (fileStatResult == 9) {\n        return archivedFiles;\n      }\n      do {\n        FUN_00107c10(inputPath);\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(libraryName,inputPath);\n        errorMessage = inputPath;\nLAB_001053be:\n        DAT_0010d618 = errorMessage;\n        archivedFiles = (undefined8 *)bfd_openr(inputPath,DAT_0010d5f0);\n      } while (archivedFiles == (undefined8 *)0x0);\n      conversionResult = bfd_check_format_matches(archivedFiles,2,&matchingFormat);\n      if (conversionResult == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (nextArchivedFile = bfd_openr_next_archived_file(archivedFiles,0), nextArchivedFile == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00107c10",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "FUN_00103bd1",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_close",
                "__errno_location",
                "FUN_00107920",
                "bfd_set_error",
                "FUN_00107690",
                "stat",
                "fprintf",
                "bfd_openw",
                "FUN_00107c20",
                "FUN_00102710",
                "perror",
                "FUN_0010315d",
                "xexit",
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "convert_library_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_file_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptrBytes",
                "puVar2": "ptrIntegers",
                "bVar3": "byteValue",
                "plVar4": "ptrLongs",
                "puVar5": "ptrUndefined8",
                "uVar6": "var6",
                "uVar7": "var7",
                "bVar8": "boolVar8",
                "bVar9": "boolVar9",
                "ppcVar10": "ptrCharPointers",
                "piVar11": "ptrInt",
                "puVar12": "ptrUndefined",
                "bVar13": "byteVar",
                "cVar14": "charVar",
                "iVar15": "intVar",
                "uVar16": "uintVar",
                "uVar17": "var17",
                "uVar25": "ulongVar",
                "puVar26": "ptrUndefined8Var",
                "uVar27": "undefined8Var",
                "pFVar28": "fileVar",
                "plVar29": "ptrLongPointers",
                "uVar30": "var30",
                "__xexit_cleanup": "exit_cleanup_func",
                "_optarg": "optargVar",
                "_optind": "optindVar",
                "_stderr": "stderr",
                "_sch_istable": "char_table",
                "__ptr": "ptrBytes2",
                "_stdin": "stdin",
                "_flags": "flags"
            },
            "code": "\n\n\nvoid processFile_00105db0(uint argc,FILE *argv)\n\n{\n  byte *ptrBytes;\n  uint *ptrIntegers;\n  byte byteValue;\n  long *ptrLongs;\n  undefined8 *ptrUndefined8;\n  undefined4 var6;\n  undefined4 var7;\n  bool boolVar8;\n  bool boolVar9;\n  char **ptrCharPointers;\n  int *ptrInt;\n  undefined *ptrUndefined;\n  byte byteVar;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined4 var17;\n  FILE *pFVar18;\n  size_t sVar19;\n  size_t sVar20;\n  byte *ptrBytes2;\n  long *plVar21;\n  FILE *pFVar22;\n  char *pcVar23;\n  long lVar24;\n  ulong ulongVar;\n  undefined8 *ptrUndefined8Var;\n  undefined8 undefined8Var;\n  FILE *fileVar;\n  long **pptrLongPointers;\n  undefined8 var30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteValue3;\n  long lVar34;\n  long lVar35;\n  undefined **ppuVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyteValue8;\n  char *pcVar39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uVar44;\n  int iVar45;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 local_130;\n  FILE *local_128;\n  byte *local_118;\n  char **local_110;\n  size_t local_108;\n  long local_100;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  bVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  pFVar18 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  local_110 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  local_128 = (FILE *)0x0;\n  pFVar22 = argv;\n  do {\n    uintVar = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)uintVar;\n    local_130 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)pFVar22;\n    if (**(char **)(&pFVar22->flags + (long)unaff_RBP * 2) == '@') {\n      uVar44 = (int)local_110 - 1;\n      local_110 = (char **)(ulong)uVar44;\n      if (uVar44 == 0) {\n        plVar21 = *(long **)pFVar22;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(stderr,pcVar46,plVar21);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&pFVar22->flags + (long)unaff_RBP * 2) + 1;\n      intVar = stat(pcVar39,(stat *)local_c8);\n      if (-1 < intVar) {\n        if ((local_b0 & 0xf000) == 0x4000) {\n          plVar21 = *(long **)pFVar22;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        pFVar18 = fopen(pcVar39,\"r\");\n        if (pFVar18 != (FILE *)0x0) {\n          intVar = fseek(pFVar18,0,2);\n          if (((intVar != -1) && (sVar19 = ftell(pFVar18), sVar19 != 0xffffffffffffffff)) &&\n             (intVar = fseek(pFVar18,0,0), intVar != -1)) {\n            local_118 = (byte *)xmalloc(sVar19 + 1);\n            sVar20 = fread(local_118,1,sVar19,pFVar18);\n            if ((sVar19 == sVar20) || (intVar = ferror(pFVar18), intVar == 0)) {\n              local_118[sVar20] = 0;\n              byteVar = *local_118;\n              pbyteValue3 = local_118;\n              while( true ) {\n                if (byteVar == 0) goto LAB_00106814;\n                if (((&char_table)[(ulong)byteVar * 2] & 0x40) == 0) break;\n                byteVar = pbyteValue3[1];\n                pbyteValue3 = pbyteValue3 + 1;\n              }\n              sVar19 = strlen((char *)local_118);\n              ptrBytes2 = (byte *)xmalloc(sVar19 + 1);\n              fileVar = (FILE *)0x0;\n              intVar = 0;\n              boolVar9 = false;\n              bVar47 = false;\n              boolVar8 = false;\n              local_100 = 0;\n              pbyteValue3 = local_118;\n              do {\n                while (((&char_table)[(ulong)*pbyteValue3 * 2] & 0x40) != 0) {\n                  pbyteValue3 = pbyteValue3 + 1;\n                }\n                if ((intVar == 0) || (intVar + -1 <= (int)local_100)) {\n                  if (fileVar == (FILE *)0x0) {\n                    intVar = 8;\n                    fileVar = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&fileVar->flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar = intVar * 2;\n                    fileVar = (FILE *)xrealloc(fileVar,(long)intVar << 3);\n                    ppcVar31 = (char **)((long)&fileVar->flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&fileVar->flags + local_100 * 8);\n                }\n                byteVar = *pbyteValue3;\n                pbyteValue8 = ptrBytes2;\n                while (byteVar != 0) {\n                  while( true ) {\n                    if ((((&char_table)[(ulong)byteVar * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar9 | boolVar8 | bVar47))) {\n                      boolVar8 = false;\n                      boolVar9 = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar8) break;\n                    pbyteValue3 = pbyteValue3 + 1;\n                    *pbyteValue8 = byteVar;\n                    pbyteValue8 = pbyteValue8 + 1;\n                    boolVar8 = false;\n                    byteVar = *pbyteValue3;\n                    if (byteVar == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar == 0x5c) {\n                    boolVar8 = true;\n                  }\n                  else if (bVar47) {\n                    if (byteVar == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteValue8 = byteVar;\n                      pbyteValue8 = pbyteValue8 + 1;\n                    }\n                  }\n                  else if (boolVar9) {\n                    if (byteVar != 0x22) goto LAB_001061f1;\n                    boolVar9 = false;\n                  }\n                  else if (byteVar == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (byteVar != 0x22) goto LAB_001061f1;\n                    boolVar9 = true;\n                  }\n                  ptrBytes = pbyteValue3 + 1;\n                  pbyteValue3 = pbyteValue3 + 1;\n                  byteVar = *ptrBytes;\n                }\nLAB_0010606f:\n                *pbyteValue8 = 0;\n                plVar21 = (long *)xstrdup(ptrBytes2);\n                *ppcVar31 = (char *)plVar21;\n                *(undefined8 *)(fileVar->_shortbuf + local_100 * 8 + -0x7b) = 0;\n                byteVar = *pbyteValue3;\n                byteValue = (&char_table)[(ulong)byteVar * 2];\n                while ((byteValue & 0x40) != 0) {\n                  byteVar = pbyteValue3[1];\n                  pbyteValue3 = pbyteValue3 + 1;\n                  byteValue = (&char_table)[(ulong)byteVar * 2];\n                }\n                local_100 = local_100 + 1;\n                if (byteVar == 0) {\n                  free(ptrBytes2);\n                  if (pFVar22 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(local_118);\n          }\n          fclose(pFVar18);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d2d4 < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar = (uint)unaff_R12;\n        intVar = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        uintVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        ptrUndefined = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)uintVar;\n        if ((char)uintVar != '\\0') {\n          if (exit_cleanup_func == (code *)0x0) {\n            exit_cleanup_func = FUN_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            ptrUndefined = PTR_DAT_0010d2e0;\n            intVar = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar + 1;\n            *(code **)(ptrUndefined + (long)intVar * 8 + 0x10) = FUN_00107730;\n          }\n          else {\n            ptrUndefined8Var = (undefined8 *)malloc(0x110);\n            if (ptrUndefined8Var != (undefined8 *)0x0) {\n              *ptrUndefined8Var = ptrUndefined;\n              *(undefined4 *)(ptrUndefined8Var + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)ptrUndefined8Var;\n              goto LAB_0010632b;\n            }\n          }\n          lVar24 = 1;\n          do {\n            lVar35 = lVar24;\n            intVar = (int)pcVar46;\n            if (intVar <= (int)lVar35) break;\n            charVar = FUN_00107640(*(undefined8 *)((int *)pcVar43 + lVar35 * 2));\n            lVar24 = lVar35 + 1;\n          } while (charVar != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + lVar35 * 8 + -8);\n          uVar44 = intVar - ((int)lVar35 + -1);\n          pFVar18 = (FILE *)(ulong)uVar44;\n          if (_DAT_0010d2d4 != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (intVar = getopt_long(pFVar18,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar != -1)\n            {\n              if (intVar < 0x77) {\n                if (0x43 < intVar) {\n                  switch(intVar) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = uintVar;\n                  }\n                }\n              }\n              else if (intVar == 0xc9) {\n                bfd_plugin_set_plugin(optargVar);\n              }\n            }\n            if ((int)uVar44 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              FUN_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                FUN_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                FUN_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)optindVar;\n              while( true ) {\n                if ((int)uVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                uintVar = FUN_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              }\n            }\n            while (lVar24 = FUN_001052a0(pcVar39), lVar24 < 1) {\n              uintVar = 1;\nLAB_001071c4:\n              ptrInt = (int *)pcVar43;\n              pcVar43 = (char *)((long)ptrInt + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              if ((int)uVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)ptrInt * 8 + -0x7b);\n            }\n            intVar = open(pcVar39,2,0);\n            if (intVar < 0) {\n              bfd_set_error(1);\n              FUN_00107c10(pcVar39);\nLAB_0010737f:\n              FUN_00107c10(pcVar39);\nLAB_00107387:\n              FUN_00107c20(pcVar39);\n              intVar = bfd_get_error();\n              if (intVar == 0xd) {\n                FUN_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar = bfd_check_format_matches(unaff_RBP,2,local_c8);\n            if (charVar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                ptrIntegers = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *ptrIntegers = *ptrIntegers | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar = bfd_close(unaff_RBP);\n              if (charVar != '\\0') {\n                uintVar = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Var = dcgettext(0,\"%s: no archive map to update\",5);\n            FUN_00107690(undefined8Var,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(DAT_0010d660);\n            sVar19 = strlen(pcVar39);\n            if ((sVar19 < 6) ||\n               (intVar = filename_cmp(pcVar39 + (sVar19 - 6),\"ranlib\"), intVar != 0)) {\n              _DAT_0010d2d4 = 0;\n            }\n            else {\n              _DAT_0010d2d4 = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          pFVar22 = (FILE *)unaff_RBP;\n          fileVar = pFVar18;\n          if ((int)uVar44 < 2) goto switchD_00107462_caseD_1;\n          local_130 = (FILE *)CONCAT71(local_130._1_7_,(char)uintVar);\nLAB_001063a3:\n          pFVar22 = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            sVar19 = strlen(*(char **)((long)pcVar46 + 8));\n            intVar = (int)sVar19 + (int)pFVar18;\n            unaff_R12 = (FILE *)xmalloc((long)intVar * 8);\n            var17 = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = var17;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            local_128 = (FILE *)((long)pcVar46 + 0x10);\n            local_110 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              local_118 = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(local_118);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(local_118);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(local_118);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    charVar = *(char *)((long)ppcVar31 + 4);\n                    local_110 = ppcVar32;\n                    if (charVar != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = charVar;\n                        pcVar23 = (char *)xstrdup(local_118);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = pcVar23;\n                        charVar = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        local_110 = ppcVar32;\n                      } while (charVar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            lVar24 = (long)(int)pFVar18;\n            ptrInt = (int *)pcVar46 + lVar24 * 2;\n            if (local_128 < ptrInt) {\n              ulongVar = lVar24 * 8 - 0x11;\n              if ((ulongVar < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < ptrInt) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < ptrInt &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < ptrInt)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < ptrInt)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < ptrInt)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  ptrCharPointers = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < ptrInt;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *ptrCharPointers = *ppcVar31;\n                    ptrCharPointers = ptrCharPointers + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                var17 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                var6 = *(undefined4 *)((long)pcVar46 + 0x18);\n                var7 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (ulongVar >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = var17;\n                *(undefined4 *)(ppcVar32 + 1) = var6;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = var7;\n                var17 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                var6 = *(undefined4 *)((long)pcVar46 + 0x28);\n                var7 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = var17;\n                *(undefined4 *)(ppcVar32 + 3) = var6;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = var7;\n                if (ulongVar != 2) {\n                  var17 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  var6 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  var7 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = var17;\n                  *(undefined4 *)(ppcVar32 + 5) = var6;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = var7;\n                  if (ulongVar != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      pcVar39 = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      var17 = *(undefined4 *)(pcVar39 + 4);\n                      var6 = *(undefined4 *)(pcVar39 + 8);\n                      var7 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = var17;\n                      *(undefined4 *)(ppcVar31 + 1) = var6;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = var7;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulongVar);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)local_128 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + lVar24 + -2;\n            }\n            pFVar18 = (FILE *)(ulong)(intVar - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar = (uint)unaff_R12;\n            uVar44 = getopt_long((ulong)pFVar18 & 0xffffffff,pcVar46,pFVar22,ppuVar36,0);\n            unaff_RBP = (char *)pFVar22;\n            if (uVar44 == 0xffffffff) break;\n            if (((uVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uVar44 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            fileVar = (FILE *)pcVar46;\n            if (uVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            FUN_0010342d(0);\n            pcVar46 = (char *)fileVar;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uVar44 = DAT_0010d64c;\n          pFVar22 = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)pFVar18 <= optindVar || (optindVar < 1)))) {\n              uVar44 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)optindVar * 8 + -8);\n            uintVar = (int)pFVar18 - (optindVar + -1);\n            pFVar18 = (FILE *)(ulong)uintVar;\n            optindVar = 0;\n            if (1 < (int)uintVar) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)local_130 & 0xff);\n          uintVar = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)optindVar * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              FUN_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              fileVar = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uVar44 == 3) goto LAB_00106abc;\n                  if (uVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 == 3) || (uVar44 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  var17 = FUN_00107650();\n                    \n                  xexit(var17);\n                }\nLAB_00106abc:\n                if (uVar44 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar = (int)unaff_RBP;\n                  if (*(char **)((long)ppuVar36 + (long)intVar * 2 * 4) == (char *)0x0) {\n                    undefined8Var = dcgettext(0,\"`N\\' missing value.\",5);\n                    FUN_00107690(undefined8Var);\n                    uVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uVar44 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(intVar + 1);\n                  lVar24 = strtol(*(char **)((long)ppuVar36 + (long)intVar * 2 * 4),(char **)0x0,10)\n                  ;\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)lVar24;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              lVar24 = (long)(int)unaff_RBP;\n              pFVar22 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)ppuVar36 + lVar24 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              pFVar22 = (FILE *)((long)ppuVar36 + (lVar24 + 1) * 2 * 4);\n              if (*(FILE **)pFVar22 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                pFVar22 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                pFVar18 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)pFVar18;\n                  pFVar18 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + lVar24 * 2 * 4) + (long)pFVar18 * 2) !=\n                         0);\n              }\n              ptrUndefined8Var = (undefined8 *)FUN_00105300();\n              pFVar18 = pFVar22;\n              if (DAT_0010d64c == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)ptrUndefined8Var + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)pFVar22;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  FUN_00105480(ptrUndefined8Var,FUN_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                sVar19 = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(sVar19 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",ptrUndefined8Var);\n                if (DAT_0010d620 == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  lVar24 = bfd_find_target(\"binary\",DAT_0010d620);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (lVar24 != 0) {\n                    charVar = bfd_set_format(DAT_0010d620,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    charVar = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    fileVar = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (fileVar != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    lVar24 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (lVar24 == 0) goto LAB_00106803;\n                    intVar = (int)pcVar43;\n                    local_130 = (FILE *)((long)(intVar + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(local_130,\"Cannot reset libdeps record type.\");\n                    if (intVar == 0) {\n                      lVar24 = 0;\n                    }\n                    else {\n                      var17 = *(undefined4 *)&pFVar22->field_0x4;\n                      *(int *)unaff_RBP = pFVar22->flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = var17;\n                      lVar24 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = local_130[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&pFVar22->flags;\n                        pFVar22 = (FILE *)((long)pFVar22 + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + lVar24) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)local_130) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      pFVar22 = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)pFVar22;\n                if (pFVar22 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                pFVar18 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)pFVar22;\n                if ((pFVar22 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  FUN_00105570(ptrUndefined8Var,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)pFVar22;\nswitchD_00106ed8_caseD_3:\n                FUN_00105480(ptrUndefined8Var,FUN_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)pFVar22;\nswitchD_00106ed8_caseD_4:\n                FUN_00105480(ptrUndefined8Var,FUN_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (pFVar22 == (FILE *)0x0) break;\nLAB_00106afb:\n                pFVar18 = (FILE *)(ptrUndefined8Var + 0x1e);\n                do {\n                  unaff_R12 = pFVar18;\n                  if (*(FILE **)pFVar22 == (FILE *)0x0) {\nLAB_00106b9f:\n                    FUN_001058b0(ptrUndefined8Var);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    plVar21 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)pFVar22;\n                    if (plVar21 == (long *)0x0) {\n                      undefined8Var = *ptrUndefined8Var;\n                      var30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      FUN_00107690(var30,pcVar46,undefined8Var);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    lVar24 = *plVar21;\n                    undefined8Var = FUN_00105830(pcVar46,ptrUndefined8Var);\n                    intVar = filename_cmp(undefined8Var,lVar24);\n                    if (intVar == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)plVar21[0x1e];\n                  pptrLongPointers = (long **)FUN_00105870(pFVar18,3,0);\n                  bVar47 = DAT_0010d60c != 0;\n                  ptrLongs = *pptrLongPointers;\n                  *pptrLongPointers = plVar21;\n                  plVar21[0x1e] = (long)ptrLongs;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)pFVar22);\n                  }\n                  pFVar22 = (FILE *)&pFVar22->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            FUN_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar = fileno(stdin);\n          _DAT_0010d608 = isatty(intVar);\n          FUN_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        var17 = bfd_get_error();\n        pFVar22 = (FILE *)bfd_errmsg(var17);\n        undefined8Var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar = FUN_00107690(undefined8Var,\"x86_64-pc-linux-gnu\",pFVar22);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)pcVar39;\n          fileVar = (FILE *)pcVar46;\n          switch(intVar) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = optargVar;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)pFVar22;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(optargVar);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = optargVar;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = optargVar;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)pFVar22;\nLAB_00106803:\n        undefined8Var = dcgettext(0,pcVar39,5);\n        FUN_00107690(undefined8Var);\nLAB_00106814:\n        intVar = (int)pcVar46;\n        fileVar = (FILE *)xmalloc(8);\n        *(long **)fileVar = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar = 0;\n          }\n          else {\n            lVar24 = 1;\n            do {\n              intVar = (int)lVar24;\n              lVar35 = lVar24 * 2;\n              lVar24 = lVar24 + 1;\n            } while (*(long *)((int *)pcVar43 + lVar35) != 0);\n          }\n          pFVar22 = (FILE *)xmalloc((long)(intVar + 1) << 3);\n          plVar21 = *(long **)pcVar43;\n          lVar24 = 0;\n          while (plVar21 != (long *)0x0) {\n            undefined8Var = xstrdup();\n            *(undefined8 *)((long)&pFVar22->flags + lVar24) = undefined8Var;\n            plVar21 = *(long **)((char *)((long)pcVar43 + 0x83) + lVar24 + -0x7b);\n            lVar24 = lVar24 + 8;\n          }\n          *(undefined8 *)((long)&pFVar22->flags + lVar24) = 0;\nLAB_0010610a:\n          intVar = (int)pcVar46;\n          pcVar43 = (char *)pFVar22;\n          if (*(long **)fileVar == (long *)0x0) goto LAB_00106a80;\n          lVar24 = 0;\n          do {\n            lVar34 = lVar24 + 1;\n            lVar35 = lVar24 * 8;\n            lVar24 = lVar34;\n          } while (*(long *)(fileVar->_shortbuf + lVar35 + -0x7b) != 0);\n          local_108 = lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 = 0;\n          local_108 = 0;\n        }\n        lVar24 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)pcVar43 + lVar24));\n        pFVar22 = (FILE *)xrealloc(pcVar43,(lVar34 + 1 + (long)intVar) * 8);\n        uVar44 = intVar + -1 + (int)lVar34;\n        pcVar46 = (char *)(ulong)uVar44;\n        memmove(&pFVar22->flags + (long)unaff_RBP * 2,\n                (void *)((long)&pFVar22->_IO_read_ptr + (long)local_130),\n                (long)(int)(intVar - uintVar) << 3);\n        memcpy((void *)((long)&local_130->flags + (long)&pFVar22->flags),fileVar,local_108);\n        free(fileVar);\n        free(local_118);\n        fclose(pFVar18);\n        uintVar = (int)local_128 + 1;\n        unaff_R12 = local_130;\n        pcVar43 = (char *)pFVar22;\n        local_130 = fileVar;\n        if ((int)uintVar < (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar = uintVar + 1;\n    local_128 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar = getopt_long((ulong)pFVar18 & 0xffffffff,pcVar46,pFVar22,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)pFVar22;\n  if (intVar == -1) goto LAB_00106680;\n  if ((0x14 < intVar - 100U) || ((0x117201UL >> ((byte)(intVar - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Var = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  FUN_00107920(undefined8Var);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)pFVar18 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  iVar45 = 0;\n  intVar = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  ptrUndefined8 = ptrUndefined8Var;\n  if (intVar == 0) {\n    *(byte *)((long)ptrUndefined8Var + 0x49) = *(byte *)((long)ptrUndefined8Var + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      plVar21 = ptrUndefined8 + 0x1e;\n      if ((undefined8 *)*plVar21 == (undefined8 *)0x0) break;\n      undefined8Var = *(undefined8 *)*plVar21;\n      var30 = FUN_00105830(*(FILE **)unaff_RBP,ptrUndefined8Var);\n      intVar = filename_cmp(var30,undefined8Var);\n      if ((intVar == 0) &&\n         ((DAT_0010d634 == '\\0' || (iVar45 = iVar45 + 1, iVar45 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *plVar21 = *(long *)(*plVar21 + 0xf0);\n        pFVar18 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      ptrUndefined8 = (undefined8 *)*plVar21;\n    }\n    if (DAT_0010d60c != 0) {\n      pFVar22 = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,pFVar22);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_close",
                "FUN_00105300",
                "FUN_00105830",
                "stat",
                "memmove",
                "bfd_init",
                "FUN_00103a78",
                "strlen",
                "getopt_long",
                "ferror",
                "FUN_00107890",
                "xexit",
                "FUN_001075e0",
                "FUN_00105870",
                "FUN_00107c10",
                "strtol",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_errmsg",
                "bfd_find_target",
                "bfd_set_error",
                "bindtextdomain",
                "setlocale",
                "fprintf",
                "FUN_00107c20",
                "bfd_bwrite",
                "fseek",
                "bfd_fdopenr",
                "textdomain",
                "bfd_create",
                "printf",
                "xrealloc",
                "FUN_00107730",
                "fclose",
                "FUN_00107740",
                "FUN_0010342d",
                "xstrdup",
                "strcmp",
                "FUN_00103e95",
                "FUN_00105570",
                "fileno",
                "fopen",
                "FUN_00107cc0",
                "lbasename",
                "bfd_plugin_set_program_name",
                "FUN_0010394a",
                "filename_cmp",
                "FUN_001058b0",
                "bfd_plugin_set_plugin",
                "free",
                "isatty",
                "malloc",
                "bfd_set_format",
                "FUN_00107650",
                "dcgettext",
                "memcpy",
                "xmalloc",
                "FUN_00103bd1",
                "FUN_00105480",
                "FUN_00107920",
                "fread",
                "bfd_make_readable",
                "FUN_001052a0",
                "FUN_00107690",
                "xmalloc_set_program_name",
                "bfd_make_writable",
                "bfd_set_error_program_name",
                "open",
                "FUN_00107640",
                "bfd_set_default_target",
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_file_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatStrings",
                "uVar1": "defaultValue",
                "__format": "formatMessage",
                "plVar2": "currentFormat",
                "_stdout": "stdout",
                "_stderr": "stderr"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatStrings)\n\n{\n  undefined8 defaultValue;\n  char *formatMessage;\n  long *currentFormat;\n  \n  fflush(stdout);\n  defaultValue = DAT_0010d660;\n  formatMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(stderr,formatMessage,defaultValue);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,stderr);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "fprintf",
                "fputc",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_with_error_00107c10",
                "xexit": "exitCode"
            },
            "code": "\nvoid exitWithError_00107c10(void)\n\n{\n  FUN_00107c20();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "exit_with_error_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "extract_archived_files_00102710",
                "plVar1": "currentFilePtr",
                "cVar2": "formatCheckResult",
                "bVar3": "isThinLibrary",
                "iVar4": "error",
                "lVar5": "filePtr",
                "uVar6": "errorMessage",
                "uVar7": "libraryName",
                "puVar8": "outputFilePtr",
                "unaff_RBP": "temporaryData",
                "in_stack_00000008": "dataToBeClosed"
            },
            "code": "\n\n\nundefined8 * extractArchivedFiles_00102710(void)\n\n{\n  long *currentFilePtr;\n  char formatCheckResult;\n  byte isThinLibrary;\n  int error;\n  long filePtr;\n  undefined8 errorMessage;\n  undefined8 libraryName;\n  undefined8 *outputFilePtr;\n  undefined8 temporaryData;\n  undefined8 dataToBeClosed;\n  \n  filePtr = bfd_openr();\n  if (filePtr != 0) {\n    formatCheckResult = bfd_check_format(filePtr,1);\n    if (formatCheckResult != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(filePtr + 8);\n    }\n    bfd_close(filePtr);\n  }\n  outputFilePtr = (undefined8 *)bfd_openw();\n  if (((outputFilePtr != (undefined8 *)0x0) && (formatCheckResult = bfd_set_format(outputFilePtr,2), formatCheckResult != '\\0')) &&\n     (formatCheckResult = bfd_close(outputFilePtr), formatCheckResult != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  FUN_00107c10();\n  do {\n    isThinLibrary = *(byte *)((long)outputFilePtr + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        libraryName = *outputFilePtr;\n        errorMessage = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(errorMessage,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      libraryName = *outputFilePtr;\n      errorMessage = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(errorMessage,libraryName);\nLAB_001027cb:\n      FUN_00107c20();\n      error = bfd_get_error();\n      if (error == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(dataToBeClosed);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      currentFilePtr = outputFilePtr + 0x1e;\n      for (filePtr = bfd_openr_next_archived_file(outputFilePtr,0); filePtr != 0;\n          filePtr = bfd_openr_next_archived_file(outputFilePtr,filePtr)) {\n        *currentFilePtr = filePtr;\n        currentFilePtr = (long *)(filePtr + 0xf0);\n      }\n      *currentFilePtr = 0;\n      error = bfd_get_error();\n      if (error == 9) {\n        return outputFilePtr;\n      }\n      do {\n        FUN_00107c10();\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(libraryName);\nLAB_001053b7:\n        DAT_0010d618 = temporaryData;\n        outputFilePtr = (undefined8 *)bfd_openr();\n      } while (outputFilePtr == (undefined8 *)0x0);\n      formatCheckResult = bfd_check_format_matches(outputFilePtr,2,&stack0x00000008);\n      if (formatCheckResult == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (filePtr = bfd_openr_next_archived_file(outputFilePtr,0), filePtr == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_openr",
                "bfd_check_format",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "decompress_and_process_files_00103e95",
                "pplVar1": "pointerToLongPointer",
                "cVar2": "character",
                "ppFVar3": "pointerToPointerToFile",
                "pFVar4": "pointerToFile",
                "plVar5": "pointerToLong",
                "uVar6": "unsignedVar6",
                "pbVar7": "pointerToByte",
                "iVar8": "intVar8",
                "pcVar10": "pointerToChar",
                "uVar11": "unsignedVar11",
                "iVar9": "intVar9",
                "plVar12": "pointerToLong",
                "sVar13": "sizeVar13",
                "pvVar14": "pointerToVoid",
                "pcVar15": "pointerToChar",
                "pcVar16": "pointerToChar",
                "lVar17": "longVar17",
                "lVar18": "longVar18",
                "lVar21": "longVar21",
                "uVar19": "unsignedVar19",
                "uVar20": "unsignedVar20",
                "lVar31": "longVar31",
                "puVar22": "pointerToUnsignedVar22",
                "puVar23": "pointerToUnsignedVar23",
                "uVar24": "unsignedVar24",
                "iVar25": "intVar25",
                "uVar26": "unsignedVar26",
                "ppcVar27": "pointerToPointerToChar",
                "bVar28": "booleanVar28",
                "ppcVar29": "pointerToPointerToChar",
                "bVar30": "booleanVar30",
                "pbVar32": "pointerToByte",
                "pbVar33": "pointerToByte",
                "piVar34": "pointerToInt",
                "pbVar35": "pointerToByte",
                "uVar36": "unsignedVar36",
                "bVar39": "booleanVar39",
                "auVar40": "anonymousVar40",
                "auVar41": "anonymousVar41",
                "local_828": "local_pointerToChar",
                "local_820": "local_pointerToChar",
                "local_818": "local_long",
                "local_810": "local_pointerToPointerToChar",
                "local_800": "local_int",
                "local_7fc": "local_unsignedVar",
                "local_7f8": "local_pointerToByte",
                "local_7d0": "local_stat",
                "local_740": "local_charArray",
                "local_678": "local_charPointerArray"
            },
            "code": "\n\n\nvoid decompressAndProcessFiles_00103e95(void)\n\n{\n  long **pointerToLongPointer;\n  char character;\n  FILE **pointerToPointerToFile;\n  FILE *pointerToFile;\n  long *pointerToLong;\n  undefined8 unsignedVar6;\n  byte *pointerToByte;\n  int intVar8;\n  char *pointerToChar;\n  undefined8 unsignedVar11;\n  int intVar9;\n  long *pointerToLong;\n  size_t sizeVar13;\n  void *pointerToVoid;\n  char *pointerToChar;\n  char *pointerToChar;\n  long longVar17;\n  long longVar18;\n  ulong unsignedVar19;\n  uint unsignedVar20;\n  long longVar21;\n  undefined8 *pointerToUnsignedVar22;\n  undefined8 *pointerToUnsignedVar23;\n  uint unsignedVar24;\n  int intVar25;\n  ulong unsignedVar26;\n  char **pointerToPointerToChar;\n  bool booleanVar28;\n  char **pointerToPointerToChar;\n  byte booleanVar30;\n  long longVar31;\n  byte *pointerToByte;\n  byte *pointerToByte;\n  int *pointerToInt;\n  byte *pointerToByte;\n  uint unsignedVar36;\n  int iVar37;\n  char **ppcVar38;\n  byte booleanVar39;\n  undefined anonymousVar40 [16];\n  undefined anonymousVar41 [16];\n  char *local_pointerToChar;\n  char *local_pointerToChar;\n  long local_long;\n  char **local_pointerToPointerToChar;\n  int local_int;\n  uint local_unsignedVar;\n  byte *local_pointerToByte;\n  stat local_stat;\n  char local_charArray [200];\n  char *local_charPointerArray [201];\n  \n  booleanVar39 = 0;\n  longVar18 = 0;\n  DAT_0010d550 = -2;\n  pointerToPointerToChar = local_charPointerArray;\n  local_int = 0;\n  local_pointerToChar = local_charArray;\n  local_long = 200;\n  local_pointerToChar = local_pointerToChar;\n  local_pointerToPointerToChar = pointerToPointerToChar;\nLAB_00103ee9:\n  *local_pointerToChar = (char)longVar18;\n  if (local_pointerToChar + local_long + -1 <= local_pointerToChar) {\n    longVar21 = (long)local_pointerToChar - (long)local_pointerToChar;\n    longVar17 = longVar21 + 1;\n    if (local_long < 10000) {\n      longVar31 = local_long * 2;\n      local_long = 10000;\n      if (longVar31 < 0x2711) {\n        local_long = longVar31;\n      }\n      pointerToChar = (char *)malloc(local_long * 9 + 7);\n      if (pointerToChar != (char *)0x0) {\n        longVar31 = longVar17 * 8;\n        pointerToChar = local_pointerToChar;\n        pointerToChar = pointerToChar;\n        for (; longVar17 != 0; longVar17 = longVar17 + -1) {\n          *pointerToChar = *pointerToChar;\n          pointerToChar = pointerToChar + (ulong)booleanVar39 * -2 + 1;\n          pointerToChar = pointerToChar + (ulong)booleanVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(pointerToChar + local_long);\n        pointerToPointerToChar = ppcVar38;\n        for (; longVar31 != 0; longVar31 = longVar31 + -1) {\n          *(undefined *)pointerToPointerToChar = *(undefined *)local_pointerToPointerToChar;\n          local_pointerToPointerToChar = (char **)((long)local_pointerToPointerToChar + (ulong)booleanVar39 * -2 + 1);\n          pointerToPointerToChar = (char **)((long)pointerToPointerToChar + (ulong)booleanVar39 * -2 + 1);\n        }\n        if (local_pointerToChar != local_charArray) {\n          free(local_pointerToChar);\n        }\n        local_pointerToChar = pointerToChar + longVar21;\n        pointerToPointerToChar = ppcVar38 + longVar21;\n        local_pointerToChar = pointerToChar;\n        local_pointerToPointerToChar = ppcVar38;\n        if (pointerToChar + local_long + -1 <= local_pointerToChar) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    FUN_001031a5();\nLAB_0010524c:\n    pointerToChar = local_pointerToChar;\n    if (local_pointerToChar == local_charArray) {\n      return;\n    }\nLAB_00105265:\n    free(pointerToChar);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)longVar18;\n  if (iVar37 == 3) goto LAB_0010524c;\n  character = (&DAT_0010a200)[iVar37];\n  if (character != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          FUN_00103df9();\n          pointerToUnsignedVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          unsignedVar11 = FUN_001033d6(DAT_0010d590);\n          *pointerToUnsignedVar22 = unsignedVar11;\n        }\n        FUN_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pointerToByte = DAT_0010d5b0;\n      pointerToByte = DAT_0010d5b0;\n      unsignedVar20 = DAT_0010d5d0;\nLAB_001040d4:\n      unsignedVar19 = (ulong)unsignedVar20;\n      unsignedVar26 = (ulong)local_unsignedVar;\n      booleanVar28 = false;\n      do {\n        booleanVar30 = (&DAT_0010ab00)[*pointerToByte];\n        if (*(short *)(&DAT_0010a980 + (long)(int)unsignedVar19 * 2) != 0) {\n          booleanVar28 = true;\n          unsignedVar26 = unsignedVar19 & 0xffffffff;\n          local_pointerToByte = pointerToByte;\n        }\n        while( true ) {\n          intVar8 = (int)unsignedVar19;\n          longVar18 = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + (uint)booleanVar30);\n          if (intVar8 == *(short *)(&DAT_0010a440 + longVar18 * 2)) break;\n          unsignedVar19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)intVar8 * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)intVar8 * 2)) {\n            booleanVar30 = (&DAT_0010a7c0)[(int)(uint)booleanVar30];\n          }\n        }\n        pointerToByte = pointerToByte + 1;\n        unsignedVar19 = (ulong)*(short *)(&DAT_0010a240 + longVar18 * 2);\n      } while (*(short *)(&DAT_0010a640 + unsignedVar19 * 2) != 0xc2);\n      local_unsignedVar = (uint)unsignedVar26;\n      pointerToByte = pointerToByte;\n      if (booleanVar28) {\n        DAT_0010d5b8 = local_pointerToByte;\n        DAT_0010d5c0 = local_unsignedVar;\n      }\nLAB_0010419f:\n      intVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)unsignedVar19 * 2);\n      if (intVar8 == 0) {\n        intVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pointerToByte = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pointerToByte - (int)pointerToByte;\n      DAT_0010d588 = *pointerToByte;\n      DAT_0010d5b0 = pointerToByte;\n      DAT_0010d5c8 = pointerToByte;\n      *pointerToByte = 0;\nLAB_001041f0:\n      pointerToByte = DAT_0010d5c8;\n      longVar18 = DAT_0010d5a0;\n      switch(intVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        FUN_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      longVar18 = (long)iVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        iVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          iVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    unsignedVar20 = character + iVar37;\n    if ((0x22 < unsignedVar20) || (iVar37 != (char)(&DAT_0010a0a0)[(int)unsignedVar20])) goto LAB_001049db;\n    character = (&DAT_0010a060)[(int)unsignedVar20];\n    longVar18 = (long)character;\n    if (character < '\\x01') {\n      iVar37 = -(int)character;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    local_int = local_int + -1 + (uint)(local_int == 0);\n    pointerToPointerToChar = pointerToPointerToChar + 1;\n    *pointerToPointerToChar = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&DAT_0010a020)[(int)longVar18];\n  if ((&DAT_0010a020)[(int)longVar18] == '\\0') {\n    if (local_int == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      FUN_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[longVar18] != -0xe) &&\n             (unsignedVar20 = (int)(char)(&DAT_0010a200)[longVar18] + 1, unsignedVar20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)unsignedVar20] == '\\x01')) &&\n           (longVar18 = (long)(char)(&DAT_0010a060)[(int)unsignedVar20],\n           '\\0' < (char)(&DAT_0010a060)[(int)unsignedVar20])) goto LAB_00105227;\n        if (local_pointerToChar == local_pointerToChar) goto LAB_0010524c;\n        local_pointerToChar = local_pointerToChar + -1;\n        pointerToPointerToChar = pointerToPointerToChar + -1;\n        longVar18 = (long)*local_pointerToChar;\n      } while( true );\n    }\n    if (local_int != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  unsignedVar11 = DAT_0010d660;\n  pointerToPointerToChar = DAT_0010d558;\n  character = (&DAT_00109fe0)[iVar37];\n  ppcVar38 = (char **)pointerToPointerToChar[1 - character];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    FUN_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    FUN_001031a5();\n    break;\n  case 0x17:\n    pointerToUnsignedVar22 = (undefined8 *)*pointerToPointerToChar;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointerToChar = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pointerToChar = (char *)dcgettext(0,pointerToChar,5);\n      fprintf(_stderr,pointerToChar,unsignedVar11);\n      FUN_0010315d();\n    }\n    else {\n      for (; pointerToUnsignedVar22 != (undefined8 *)0x0; pointerToUnsignedVar22 = (undefined8 *)pointerToUnsignedVar22[1]) {\n        for (pointerToUnsignedVar23 = (undefined8 *)DAT_0010d558[0x1f]; pointerToUnsignedVar23 != (undefined8 *)0x0;\n            pointerToUnsignedVar23 = (undefined8 *)pointerToUnsignedVar23[0x1e]) {\n          intVar8 = filename_cmp(*pointerToUnsignedVar23);\n          if (intVar8 == 0) {\n            FUN_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*pointerToUnsignedVar22,0);\n        unsignedVar6 = DAT_0010d660;\n        unsignedVar11 = *pointerToUnsignedVar22;\n        pointerToChar = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerToChar,unsignedVar6,unsignedVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    pointerToUnsignedVar22 = (undefined8 *)*pointerToPointerToChar;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      pointerToChar = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; pointerToUnsignedVar22 != (undefined8 *)0x0; pointerToUnsignedVar22 = (undefined8 *)pointerToUnsignedVar22[1]) {\n      booleanVar28 = false;\n      pointerToPointerToChar = DAT_0010d558 + 0x1f;\n      for (pointerToChar = DAT_0010d558[0x1f]; pointerToChar != (char *)0x0;\n          pointerToChar = *(char **)(pointerToChar + 0xf0)) {\n        intVar8 = filename_cmp();\n        if (intVar8 == 0) {\n          pointerToChar = (char *)bfd_openr(*pointerToUnsignedVar22,0);\n          unsignedVar11 = DAT_0010d660;\n          if (pointerToChar == (char *)0x0) {\n            unsignedVar6 = *pointerToUnsignedVar22;\n            pointerToChar = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pointerToChar,unsignedVar11,unsignedVar6);\n            FUN_0010315d();\n          }\n          else {\n            *pointerToPointerToChar = pointerToChar;\n            booleanVar28 = true;\n            *(undefined8 *)(pointerToChar + 0xf0) = *(undefined8 *)(pointerToChar + 0xf0);\n          }\n        }\n        else {\n          pointerToPointerToChar = (char **)(pointerToChar + 0xf0);\n        }\n      }\n      if (!booleanVar28) {\n        pointerToChar = (char *)bfd_openr(*pointerToUnsignedVar22,0);\n        unsignedVar6 = DAT_0010d660;\n        unsignedVar11 = *pointerToUnsignedVar22;\n        pointerToChar = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerToChar,unsignedVar6,unsignedVar11);\n        unsignedVar11 = DAT_0010d660;\n        if (pointerToChar == (char *)0x0) {\n          unsignedVar6 = *pointerToUnsignedVar22;\n          pointerToChar = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pointerToChar,unsignedVar11,unsignedVar6);\n          FUN_0010315d();\n        }\n        else {\n          *pointerToPointerToChar = pointerToChar;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    pointerToUnsignedVar22 = (undefined8 *)*pointerToPointerToChar;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointerToUnsignedVar22 != (undefined8 *)0x0; pointerToUnsignedVar22 = (undefined8 *)pointerToUnsignedVar22[1]) {\n      booleanVar28 = false;\n      pointerToPointerToChar = DAT_0010d558 + 0x1f;\n      for (pointerToUnsignedVar23 = (undefined8 *)DAT_0010d558[0x1f]; unsignedVar11 = DAT_0010d660,\n          pointerToUnsignedVar23 != (undefined8 *)0x0; pointerToUnsignedVar23 = (undefined8 *)pointerToUnsignedVar23[0x1e]) {\n        intVar8 = filename_cmp(*pointerToUnsignedVar23,*pointerToUnsignedVar22);\n        if (intVar8 == 0) {\n          booleanVar28 = true;\n          *pointerToPointerToChar = (char *)pointerToUnsignedVar23[0x1e];\n        }\n        else {\n          pointerToPointerToChar = (char **)(pointerToUnsignedVar23 + 0x1e);\n        }\n      }\n      if (!booleanVar28) {\n        unsignedVar6 = *pointerToUnsignedVar22;\n        pointerToChar = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerToChar,unsignedVar11,unsignedVar6);\n        FUN_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    pointerToUnsignedVar22 = (undefined8 *)*pointerToPointerToChar;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointerToUnsignedVar22 != (undefined8 *)0x0; pointerToUnsignedVar22 = (undefined8 *)pointerToUnsignedVar22[1]) {\n      pointerToChar = (char *)bfd_openr(*pointerToUnsignedVar22,\"plugin\");\n      unsignedVar11 = DAT_0010d660;\n      pointerToPointerToChar = DAT_0010d558;\n      if (pointerToChar == (char *)0x0) {\n        unsignedVar6 = *pointerToUnsignedVar22;\n        pointerToChar = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pointerToChar,unsignedVar11,unsignedVar6);\n        FUN_0010315d();\n      }\n      else {\n        *(char **)(pointerToChar + 0xf0) = DAT_0010d558[0x1f];\n        pointerToPointerToChar[0x1f] = pointerToChar;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    pointerToChar = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    pointerToChar = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pointerToChar,pointerToChar);\n    for (pointerToChar = DAT_0010d558[0x1f]; pointerToChar != (char *)0x0; pointerToChar = *(char **)(pointerToChar + 0xf0))\n    {\n      FUN_00103ddc(pointerToChar,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(pointerToPointerToChar);\n    pointerToChar = DAT_0010d570;\n    intVar8 = stat(DAT_0010d570,&local_stat);\n    if ((intVar8 != 0) && (DAT_0010d558 = (char **)bfd_openw(pointerToChar,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    FUN_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    FUN_00103c60(*pointerToPointerToChar,0);\n    break;\n  case 0x1f:\n    FUN_00103c60(*pointerToPointerToChar,1);\n    break;\n  case 0x20:\n    pointerToChar = *pointerToPointerToChar;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointerToChar = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    longVar18 = FUN_00105300(pointerToPointerToChar[-1],0);\n    if (longVar18 != 0) {\n      FUN_001032a8(longVar18,FUN_0010312d,pointerToChar);\n    }\n    break;\n  case 0x21:\n    pointerToChar = *pointerToPointerToChar;\n    pointerToChar = pointerToPointerToChar[-1];\n    unsignedVar11 = FUN_00105300(pointerToPointerToChar[-2],0);\n    if (pointerToChar == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(pointerToChar,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        FUN_001032a8(unsignedVar11,FUN_00103ddc,pointerToChar);\n        bfd_close(unsignedVar11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pointerToChar = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pointerToChar,pointerToChar);\n    }\n    FUN_001032a8(unsignedVar11,FUN_00103ddc,pointerToChar);\n    bfd_close(unsignedVar11);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*pointerToPointerToChar;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)pointerToPointerToChar[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    pointerToChar = pointerToPointerToChar[-2];\n    *ppcVar38 = *pointerToPointerToChar;\n    ppcVar38[1] = pointerToChar;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  longVar18 = (long)character;\n  local_pointerToChar = local_pointerToChar + -longVar18;\n  pointerToPointerToChar[1 - longVar18] = (char *)ppcVar38;\n  pointerToPointerToChar = pointerToPointerToChar + (1 - longVar18);\n  unsignedVar20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[iVar37] + -0x18] + (int)*local_pointerToChar;\n  if ((unsignedVar20 < 0x23) && (*local_pointerToChar == (&DAT_0010a0a0)[(int)unsignedVar20])) {\n    longVar18 = (long)(char)(&DAT_0010a060)[(int)unsignedVar20];\n  }\n  else {\n    longVar18 = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  intVar8 = ((int)pointerToByte - (int)DAT_0010d5c8) + -1;\n  *pointerToByte = DAT_0010d588;\n  pointerToLongPointer = (long **)(DAT_0010d5a8 + longVar18 * 8);\n  pointerToPointerToFile = (FILE **)*pointerToLongPointer;\n  if (*(int *)(pointerToPointerToFile + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)pointerToPointerToFile + 0x1c);\n    *(undefined4 *)(pointerToPointerToFile + 7) = 1;\n    *pointerToPointerToFile = DAT_0010d590;\n  }\n  pointerToByte = DAT_0010d5b0;\n  pointerToFile = pointerToPointerToFile[1];\n  anonymousVar40._8_8_ = pointerToFile;\n  anonymousVar40._0_8_ = pointerToPointerToFile;\n  if ((byte *)((long)&pointerToFile->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&pointerToFile->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      anonymousVar40 = FUN_001033b0();\n    }\n    if (*(int *)(anonymousVar40._0_8_ + 0x34) != 0) {\n      unsignedVar20 = (int)((long)pointerToByte - (long)pointerToByte) - 1;\n      for (longVar18 = 0; (int)longVar18 < (int)unsignedVar20; longVar18 = longVar18 + 1) {\n        *(byte *)(anonymousVar40._8_8_ + longVar18) = pointerToByte[longVar18];\n      }\n      pointerToLong = *pointerToLongPointer;\n      if (*(int *)(pointerToLong + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)pointerToLong + 0x1c) = 0;\nLAB_0010475e:\n        pointerToFile = DAT_0010d590;\n        if (unsignedVar20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            FUN_00103df9();\n            pointerToUnsignedVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            unsignedVar11 = FUN_001033d6(pointerToFile);\n            *pointerToUnsignedVar22 = unsignedVar11;\n          }\n          longVar18 = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            longVar18 = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          intVar9 = 1;\n          FUN_001031cf(longVar18);\n          FUN_001030ed();\n        }\n        else {\n          intVar9 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointerToLong = *pointerToLongPointer;\n          unsignedVar24 = ~unsignedVar20 + *(int *)(pointerToLong + 3);\n          if (0 < (int)unsignedVar24) break;\n          unsignedVar24 = (int)DAT_0010d5b0 - (int)(void *)pointerToLong[1];\n          if (*(int *)(pointerToLong + 4) == 0) {\n            pointerToLong[1] = 0;\nLAB_00104626:\n            FUN_001033b0();\n            break;\n          }\n          intVar9 = *(int *)(pointerToLong + 3);\n          intVar25 = intVar9;\n          if (intVar9 < 1) {\n            intVar25 = intVar9 / 8;\n          }\n          *(int *)(pointerToLong + 3) = intVar25 + intVar9;\n          pointerToVoid = realloc((void *)pointerToLong[1],(long)(intVar25 + intVar9 + 2));\n          pointerToLong[1] = (long)pointerToVoid;\n          if (pointerToVoid == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)pointerToVoid + (long)(int)unsignedVar24);\n          pointerToLong = *pointerToLongPointer;\n        }\n        if (0x2000 < (int)unsignedVar24) {\n          unsignedVar24 = 0x2000;\n        }\n        unsignedVar26 = (ulong)unsignedVar24;\n        if (*(int *)((long)pointerToLong + 0x24) == 0) {\n          pointerToInt = __errno_location();\n          unsignedVar26 = (ulong)(int)unsignedVar24;\n          unsignedVar19 = (ulong)(int)unsignedVar20;\n          *pointerToInt = 0;\n          goto LAB_001046c7;\n        }\n        unsignedVar19 = 0;\n        pointerToInt = (int *)(long)(int)unsignedVar20;\n        do {\n          intVar9 = getc(DAT_0010d590);\n          unsignedVar36 = (uint)unsignedVar19;\n          if (intVar9 == -1) {\n            intVar9 = ferror(DAT_0010d590);\n            unsignedVar24 = unsignedVar36;\n            if (intVar9 != 0) {\n              do {\n                pointerToChar = \"input in flex scanner failed\";\n                FUN_001033b0();\n                do {\n                  *pointerToInt = 0;\n                  clearerr((FILE *)pointerToChar);\nLAB_001046c7:\n                  sizeVar13 = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + unsignedVar19),1,unsignedVar26,DAT_0010d590);\n                  pointerToChar = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)sizeVar13;\n                  unsignedVar24 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (intVar9 = ferror(DAT_0010d590), unsignedVar24 = DAT_0010d598, intVar9 == 0))\n                  goto LAB_00104738;\n                } while (*pointerToInt == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (intVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)unsignedVar20 +\n             (long)(int)unsignedVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            unsignedVar24 = unsignedVar36 + 1;\n            break;\n          }\n          unsignedVar19 = (ulong)(unsignedVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)pointerToInt) =\n               (char)intVar9;\n          pointerToInt = (int *)((long)pointerToInt + 1);\n        } while (unsignedVar24 != unsignedVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = unsignedVar24;\n        unsignedVar24 = DAT_0010d598;\n        intVar9 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (unsignedVar24 == 0) goto LAB_0010475e;\n      }\n      pointerToLong = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      longVar18 = *pointerToLong;\n      unsignedVar20 = unsignedVar20 + DAT_0010d598;\n      if (*(int *)(longVar18 + 0x18) < (int)unsignedVar20) {\n        intVar25 = ((int)DAT_0010d598 >> 1) + unsignedVar20;\n        pointerToVoid = realloc(*(void **)(longVar18 + 8),(long)intVar25);\n        *(void **)(longVar18 + 8) = pointerToVoid;\n        anonymousVar41._8_8_ = pointerToLong;\n        anonymousVar41._0_8_ = *pointerToLong;\n        if (*(long *)(*pointerToLong + 8) == 0) {\n          anonymousVar41 = FUN_001033b0();\n        }\n        pointerToLong = anonymousVar41._8_8_;\n        *(int *)(anonymousVar41._0_8_ + 0x18) = intVar25 + -2;\n      }\n      DAT_0010d598 = unsignedVar20;\n      *(undefined *)(*(long *)(*pointerToLong + 8) + (long)(int)unsignedVar20) = 0;\n      *(undefined *)(*(long *)(*pointerToLong + 8) + 1 + (long)(int)unsignedVar20) = 0;\n      pointerToByte = *(byte **)(*pointerToLong + 8);\n      DAT_0010d5c8 = pointerToByte;\n      if (intVar9 == 1) goto LAB_001048a4;\n      if (intVar9 == 2) goto LAB_001048ca;\n      pointerToByte = pointerToByte + intVar8;\n      DAT_0010d5b0 = pointerToByte;\n      unsignedVar20 = FUN_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)pointerToByte - (long)pointerToByte == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pointerToByte = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pointerToByte;\n    unsignedVar19 = FUN_0010300e();\n    pointerToByte = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pointerToByte = pointerToByte + intVar8;\n  DAT_0010d5b0 = pointerToByte;\n  unsignedVar19 = FUN_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)unsignedVar19 * 2) != 0) {\n    DAT_0010d5b8 = pointerToByte;\n    DAT_0010d5c0 = (uint)unsignedVar19;\n  }\n  unsignedVar26 = unsignedVar19 & 0xffffffff;\n  while( true ) {\n    intVar8 = (int)unsignedVar26;\n    if (intVar8 == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + 1) * 2)) break;\n    unsignedVar26 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)intVar8 * 2);\n  }\n  unsignedVar20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + 1) * 2);\n  pointerToByte = pointerToByte;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + 1) * 2) == 0)\n     || (unsignedVar20 == 0xb0)) goto LAB_0010419f;\n  pointerToByte = pointerToByte + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  intVar8 = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pointerToByte = DAT_0010d588;\n  unsignedVar19 = (ulong)DAT_0010d5c0;\n  pointerToByte = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  pointerToPointerToChar = pointerToPointerToChar + 1;\n  local_int = 3;\n  *pointerToPointerToChar = DAT_0010d548;\nLAB_001049d1:\n  local_pointerToChar = local_pointerToChar + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "fopen",
                "bfd_close",
                "FUN_00105300",
                "bfd_cache_close",
                "FUN_00103df9",
                "FUN_00103ddc",
                "stat",
                "filename_cmp",
                "fwrite",
                "FUN_0010312d",
                "FUN_001033d6",
                "unlink",
                "malloc",
                "free",
                "ferror",
                "FUN_00103c60",
                "bfd_set_format",
                "FUN_001031cf",
                "dcgettext",
                "realloc",
                "bfd_openr",
                "getc",
                "__errno_location",
                "fread",
                "FUN_00103ba8",
                "fprintf",
                "bfd_openw",
                "FUN_001030ed",
                "FUN_001033b0",
                "dup",
                "FUN_001031a5",
                "printf",
                "FUN_00105bc0",
                "clearerr",
                "fclose",
                "FUN_0010315d",
                "FUN_001032a8",
                "FUN_00107740",
                "xstrdup",
                "FUN_0010300e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "decompress_and_process_files_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_001025a0",
                "FUN_00103a78",
                "FUN_00102fd7",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_function_chain_00107cc0",
                "lVar1": "currentIndex",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionChain",
                "uVar5": "bitwiseValue"
            },
            "code": "\nvoid executeFunctionChain_00107cc0(void)\n\n{\n  long currentIndex;\n  long prevIndex;\n  long tempIndex;\n  long *functionChain;\n  uint bitwiseValue;\n  \n  functionChain = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      bitwiseValue = *(int *)(functionChain + 1) - 1;\n      if (-1 < (int)bitwiseValue) {\n        currentIndex = (long)(int)bitwiseValue;\n        bitwiseValue = bitwiseValue & 7;\n        (*(code *)functionChain[currentIndex + 2])();\n        prevIndex = currentIndex + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (bitwiseValue != 0) {\n            if (bitwiseValue != 1) {\n              if (bitwiseValue != 2) {\n                if (bitwiseValue != 3) {\n                  if (bitwiseValue != 4) {\n                    if (bitwiseValue != 5) {\n                      if (bitwiseValue != 6) {\n                        (*(code *)functionChain[currentIndex + 1])();\n                        prevIndex = currentIndex + -2;\n                      }\n                      (*(code *)functionChain[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionChain[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionChain[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionChain[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionChain[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionChain[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionChain[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)functionChain[tempIndex + 1])();\n            (*(code *)functionChain[tempIndex])();\n            (*(code *)functionChain[currentIndex])();\n            (*(code *)functionChain[tempIndex + -2])();\n            (*(code *)functionChain[tempIndex + -3])();\n            (*(code *)functionChain[tempIndex + -4])();\n            (*(code *)functionChain[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_00107d96:\n      functionChain = (long *)*functionChain;\n    } while (functionChain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_function_chain_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "initialize_00105ae0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "code": "\nvoid initialize_00105ae0(undefined8 input_param_1,undefined8 input_param_2,undefined input_param_3,undefined input_param_4)\n\n{\n  FUN_00105af0(input_param_1,input_param_2,input_param_3,input_param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "initialize_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105db0",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "extract_and_exit_00107690",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "in_AL": "flag",
                "local_d8": "local_1",
                "local_d4": "local_2",
                "local_d0": "local_3",
                "local_c8": "local_4",
                "local_b8": "local_5",
                "local_b0": "local_6",
                "local_a8": "local_7",
                "local_a0": "local_8",
                "local_98": "local_9",
                "local_90": "local_10",
                "local_88": "local_11",
                "local_78": "local_12",
                "local_68": "local_13",
                "local_58": "local_14",
                "local_48": "local_15",
                "local_38": "local_16",
                "local_28": "local_17"
            },
            "code": "\nvoid extract_and_exit_00107690(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 param_9,undefined8 input_10,undefined8 input_11,undefined8 input_12,\n                 undefined8 input_13,undefined8 input_14)\n\n{\n  char flag;\n  undefined4 local_1;\n  undefined4 local_2;\n  undefined *local_3;\n  undefined *local_4;\n  undefined local_5 [8];\n  undefined8 local_6;\n  undefined8 local_7;\n  undefined8 local_8;\n  undefined8 local_9;\n  undefined8 local_10;\n  undefined4 local_11;\n  undefined4 local_12;\n  undefined4 local_13;\n  undefined4 local_14;\n  undefined4 local_15;\n  undefined4 local_16;\n  undefined4 local_17;\n  undefined4 local_18;\n  \n  if (flag != '\\0') {\n    local_11 = input_1;\n    local_12 = input_2;\n    local_13 = input_3;\n    local_14 = input_4;\n    local_15 = input_5;\n    local_16 = input_6;\n    local_17 = input_7;\n    local_18 = input_8;\n  }\n  local_3 = &stack0x00000008;\n  local_1 = 8;\n  local_4 = local_5;\n  local_2 = 0x30;\n  local_6 = input_10;\n  local_7 = input_11;\n  local_8 = input_12;\n  local_9 = input_13;\n  local_10 = input_14;\n  FUN_001078c0(param_9,&local_1);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00103a78",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "file",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "targetPtr"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *file)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *targetPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtr = targetList;\n  while( true ) {\n    currentTarget = *targetPtr;\n    targetPtr = targetPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "fprintf",
                "fputc",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_string_from_memory_00105830",
                "param_1": "path",
                "param_2": "memory_block",
                "__s": "file_name",
                "uVar3": "file_name_length",
                "pcVar4": "destination",
                "bVar5": "flag",
                "auVar6": "result",
                "lVar1": "memory_address",
                "sVar2": "file_name_size"
            },
            "code": "\nundefined  [16] extract_string_from_memory_00105830(char *path,long memory_block,undefined8 param_3,undefined8 param_4)\n\n{\n  long memory_address;\n  size_t file_name_size;\n  char *file_name;\n  ulong file_name_length;\n  char *destination;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    file_name = (char *)lbasename();\n    path = file_name;\n    if ((DAT_0010d5fa != '\\0') && (memory_block != 0)) {\n      file_name_size = strlen(file_name);\n      file_name_length = (ulong)*(byte *)(*(long *)(memory_block + 8) + 0x1e);\n      if (file_name_length < file_name_size) {\n        path = (char *)xmalloc(file_name_length + 1);\n        memory_address = *(long *)(memory_block + 8);\n        destination = path;\n        for (file_name_length = (ulong)*(byte *)(memory_address + 0x1e); file_name_length != 0; file_name_length = file_name_length - 1) {\n          *destination = *file_name;\n          file_name = file_name + (ulong)flag * -2 + 1;\n          destination = destination + (ulong)flag * -2 + 1;\n        }\n        path[*(byte *)(memory_address + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = param_4;\n  result._0_8_ = path;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102bb0",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105480",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_string_from_memory_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_and_remove_file_00107730",
                "unlink_if_ordinary": "removeFile",
                "fclose": "closeFile"
            },
            "code": "\nvoid cleanupAndRemoveFile_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_and_remove_file_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_00107c20",
                "param_1": "errorMessage",
                "iVar1": "errorStatus",
                "uVar2": "errorMessageText",
                "in_R10": "unusedVariable"
            },
            "code": "\n\n\nvoid printError_00107c20(long errorMessage)\n\n{\n  int errorStatus;\n  undefined8 errorMessageText;\n  undefined8 unusedVariable;\n  \n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorMessageText = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessageText = bfd_errmsg(errorStatus);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorMessage,errorMessageText,unusedVariable);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessageText,unusedVariable);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_00102f96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00107c10",
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_error_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_stream_001031cf",
                "param_1": "fileStream",
                "param_2": "file",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errnoValue",
                "uVar2": "isTerminal",
                "iVar3": "fileDescriptor",
                "piVar4": "errnoPointer",
                "lVar5": "someValue"
            },
            "code": "\n\n\nundefined8\ninitializeFileStream_001031cf(FILE **fileStream,FILE *file,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errnoValue;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errnoPointer;\n  long someValue;\n  \n  errnoPointer = __errno_location();\n  someValue = DAT_0010d5a8;\n  errnoValue = *errnoPointer;\n  if (fileStream == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = file;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (fileStream == *(FILE ***)(someValue + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)fileStream + 0x1c) = 0;\n    *(undefined *)&fileStream[1]->_flags = 0;\n    *(undefined *)((long)&fileStream[1]->_flags + 1) = 0;\n    *(undefined4 *)(fileStream + 5) = 1;\n    fileStream[2] = fileStream[1];\n    *(undefined4 *)(fileStream + 7) = 0;\n    if (someValue != 0) {\n      if (fileStream == *(FILE ***)(someValue + DAT_0010d5a0 * 8)) {\n        FUN_001030ed();\n      }\n      *fileStream = file;\n      *(undefined4 *)((long)fileStream + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *fileStream = file;\n    *(undefined4 *)((long)fileStream + 0x34) = 1;\n  }\n  *(undefined8 *)((long)fileStream + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (file != (FILE *)0x0) {\n    fileDescriptor = fileno(file);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)fileStream + 0x24) = isTerminal;\n  *errnoPointer = errnoValue;\n  return param5;\n}\n\n",
            "called": [
                "fileno",
                "__errno_location",
                "isatty",
                "FUN_001030ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_stream_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "sourcePtr",
                "param_2": "destinationPtr",
                "lVar1": "tempVar"
            },
            "code": "\nvoid copyData_0010312d(long sourcePtr,long destinationPtr)\n\n{\n  long tempVar;\n  \n  if (destinationPtr != 0) {\n    *(undefined8 *)(destinationPtr + 0xf0) = *(undefined8 *)(sourcePtr + 0xf0);\n  }\n  tempVar = DAT_0010d558;\n  *(undefined8 *)(sourcePtr + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(tempVar + 0xf8) = sourcePtr;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_data_to_file_00105c00",
                "param_1": "fileToRead",
                "param_2": "outputFile",
                "iVar1": "readError",
                "__fd": "outputFileDescriptor",
                "iVar2": "bytesRead",
                "_Var3": "filePosition",
                "uVar4": "returnValue",
                "sVar5": "bytesWritten",
                "piVar6": "errnoLocation",
                "auStack_2038": "dataBuffer"
            },
            "code": "\nulong copyDataToFile_00105c00(int fileToRead,char *outputFile)\n\n{\n  int readError;\n  int outputFileDescriptor;\n  int bytesRead;\n  __off_t filePosition;\n  ulong returnValue;\n  size_t bytesWritten;\n  int *errnoLocation;\n  undefined dataBuffer [8200];\n  \n  if ((-1 < fileToRead) && (filePosition = lseek(fileToRead,0,0), filePosition == 0)) {\n    outputFileDescriptor = open(outputFile,0x201);\n    if (outputFileDescriptor < 0) {\n      returnValue = FUN_00102f55();\n      return returnValue;\n    }\n    do {\n      returnValue = read(fileToRead,dataBuffer,0x2000);\n      bytesRead = (int)returnValue;\n      if (bytesRead < 1) {\n        errnoLocation = __errno_location();\n        readError = *errnoLocation;\n        close(fileToRead);\n        close(outputFileDescriptor);\n        if (bytesRead != 0) {\n          *errnoLocation = readError;\n          return 0xffffffff;\n        }\n        return returnValue & 0xffffffff;\n      }\n      bytesWritten = write(outputFileDescriptor,dataBuffer,(long)bytesRead);\n    } while (bytesWritten == (long)bytesRead);\n    errnoLocation = __errno_location();\n    bytesRead = *errnoLocation;\n    close(fileToRead);\n    close(outputFileDescriptor);\n    *errnoLocation = bytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "FUN_00102f55",
                "__errno_location",
                "open",
                "write",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_data_to_file_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_001052a0",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errorNum",
                "uVar3": "errorMessage",
                "pcVar4": "errorStr",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong checkFile_001052a0(char *filePath)\n\n{\n  int status;\n  int *errorNum;\n  undefined8 errorMessage;\n  char *errorStr;\n  stat fileStat;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStat);\n    if (status < 0) {\n      errorNum = __errno_location();\n      if (*errorNum == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00107920(errorMessage,filePath);\n      }\n      else {\n        errorStr = strerror(*errorNum);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00107920(errorMessage,filePath,errorStr);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001025a0",
                "FUN_00107920",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "check_file_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "optionDescription"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *optionDescription;\n  \n  optionDescription = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,optionDescription);\n  optionDescription = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,optionDescription);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00103a78",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_00103ba8",
                "FUN_00105a68",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_00103172",
                "FUN_00102f08"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "initialize_archive_00103c60",
                "param_1": "inputArchivePath",
                "param_2": "createNewArchive",
                "cVar1": "checkFormatResult",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "lVar4": "inputArchive",
                "lVar5": "archivedFile",
                "uVar6": "programName",
                "plVar7": "archivedFilePtr"
            },
            "code": "\n\n\nvoid initializeArchive_00103c60(char *inputArchivePath,int createNewArchive)\n\n{\n  char checkFormatResult;\n  int *errorLocation;\n  char *errorMessage;\n  long inputArchive;\n  long archivedFile;\n  undefined8 programName;\n  long *archivedFilePtr;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)FUN_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errorLocation = __errno_location();\n    inputArchivePath = strerror(*errorLocation);\n    programName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      errorMessage = \"%s: Can\\'t open output archive %s\\n\";\n      inputArchivePath = DAT_0010d560;\n    }\n    else {\n      if (createNewArchive != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchive = bfd_openr(inputArchivePath,\"plugin\");\n      if (inputArchive == 0) {\n        errorMessage = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        checkFormatResult = bfd_check_format(inputArchive,2);\n        if (checkFormatResult != '\\0') {\n          archivedFilePtr = (long *)(DAT_0010d558 + 0xf8);\n          for (archivedFile = bfd_openr_next_archived_file(inputArchive,0); archivedFile != 0;\n              archivedFile = bfd_openr_next_archived_file(inputArchive,archivedFile)) {\n            *archivedFilePtr = archivedFile;\n            archivedFilePtr = (long *)(archivedFile + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMessage = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    programName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,errorMessage,5);\n  }\n  fprintf(_stderr,errorMessage,programName,inputArchivePath);\n  FUN_0010315d();\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_openr",
                "bfd_fdopenw",
                "FUN_001057a0",
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "FUN_0010315d",
                "fprintf",
                "xstrdup",
                "bfd_set_format",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_archive_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "save_to_file_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid saveToFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "save_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "extract_archived_files_00105af0",
                "param_1": "files",
                "param_2": "archive",
                "param_3": "reverse",
                "param_4": "check_format",
                "cVar1": "is_bfd_format",
                "uVar2": "result",
                "lVar3": "file",
                "uVar4": "extracted_count"
            },
            "code": "\nulong extract_archived_files_00105af0(long *files,long archive,char reverse,char check_format)\n\n{\n  char is_bfd_format;\n  uint result;\n  long file;\n  ulong extracted_count;\n  \n  if (check_format == '\\0') {\n    if (reverse != '\\0') {\n      extracted_count = FUN_00102f08();\n      return extracted_count;\n    }\n  }\n  else {\n    is_bfd_format = bfd_check_format(archive,2);\n    if (is_bfd_format != '\\0') {\n      extracted_count = 0;\n      for (file = bfd_openr_next_archived_file(archive,0); file != 0;\n          file = bfd_openr_next_archived_file(archive,file)) {\n        result = extract_archived_files_00105af0(files,file,reverse,1);\n        if ((char)result != '\\0') {\n          extracted_count = (ulong)result;\n          files = (long *)(*files + 0xf0);\n        }\n      }\n      return extracted_count;\n    }\n    if (reverse != '\\0') {\n      extracted_count = FUN_00102f08();\n      return extracted_count;\n    }\n  }\n  *(long *)(archive + 0xf0) = *files;\n  *files = archive;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_00105af0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_index_0010300e",
                "bVar1": "foundMatch",
                "iVar2": "currentIndex",
                "lVar3": "calculatedIndex",
                "bVar4": "lookupValue",
                "pbVar5": "dataArray",
                "in_R9": "matchingElement",
                "in_R10D": "matchingIndex"
            },
            "code": "\nvoid findMatchingIndex_0010300e(void)\n\n{\n  bool foundMatch;\n  int currentIndex;\n  long calculatedIndex;\n  byte lookupValue;\n  byte *dataArray;\n  byte *matchingElement;\n  int matchingIndex;\n  \n  foundMatch = false;\n  currentIndex = DAT_0010d5d0;\n  for (dataArray = DAT_0010d5c8; dataArray < DAT_0010d5b0; dataArray = dataArray + 1) {\n    lookupValue = 1;\n    if (*dataArray != 0) {\n      lookupValue = (&DAT_0010ab00)[*dataArray];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      foundMatch = true;\n      matchingElement = dataArray;\n      matchingIndex = currentIndex;\n    }\n    while( true ) {\n      calculatedIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)lookupValue);\n      if (*(short *)(&DAT_0010a440 + calculatedIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        lookupValue = (&DAT_0010a7c0)[(int)(uint)lookupValue];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + calculatedIndex * 2);\n  }\n  if (foundMatch) {\n    DAT_0010d5b8 = matchingElement;\n    DAT_0010d5c0 = matchingIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_index_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "cleanup_and_return_00102ba1",
                "unaff_RBP": "buffer",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] cleanupAndReturn_00102ba1(void)\n\n{\n  undefined returnValue [16];\n  void *buffer;\n  ulong returnAddress;\n  \n  free(buffer);\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = returnAddress;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "cleanup_and_return_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_write_archive_00107740",
                "param_1": "filePaths",
                "iVar1": "comparisonResult",
                "iVar2": "errorCode",
                "piVar3": "errnoLocation",
                "pcVar4": "errorString",
                "uVar5": "errorMessage",
                "pplVar6": "filePathsPtr",
                "__ptr": "bufferPtr",
                "__n": "readBufferSize",
                "lVar7": "loopCounter",
                "plVar8": "currentFile",
                "puVar9": "localVarsPtr",
                "uVar10": "bytesRead",
                "sVar11": "writeBufferSize",
                "local_c8": "localVarsBuffer",
                "_Stack_b0": "filePermission",
                "uStack_98": "archiveSize",
                "uStack_80": "savedStackValue1",
                "uStack_70": "savedStackValue2"
            },
            "code": "\n\n\nlong * extractAndWriteArchive_00107740(long **filePaths)\n\n{\n  int comparisonResult;\n  int errorCode;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  long **filePathsPtr;\n  void *bufferPtr;\n  size_t readBufferSize;\n  long loopCounter;\n  long *currentFile;\n  undefined4 *localVarsPtr;\n  ulong bytesRead;\n  size_t writeBufferSize;\n  undefined4 localVarsBuffer [6];\n  __mode_t filePermission;\n  ulong archiveSize;\n  undefined8 savedStackValue1;\n  undefined8 savedStackValue2;\n  \n  if (_DAT_0010d600 != 0) {\n    localVarsPtr = localVarsBuffer;\n    for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *localVarsPtr = 0;\n      localVarsPtr = localVarsPtr + 1;\n    }\n  }\n  filePathsPtr = (long **)filePaths[0x1d];\n  if ((long **)filePaths[0x1d] == (long **)0x0) {\n    filePathsPtr = filePaths;\n  }\n  errorCode = (*(code *)filePathsPtr[1][0x3d])(filePaths,localVarsBuffer);\n  if (errorCode != 0) {\n    currentFile = *filePaths;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = FUN_00107690(errorMessage,currentFile);\n    errorMessage = DAT_0010d638;\n    if (errorCode == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentFile,errorMessage);\n        if (comparisonResult == 0) {\n          if (errorCode != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek(filePaths,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*filePaths);\n  }\n  else {\n    bytesRead = 0;\n    bufferPtr = (void *)xmalloc(0x2000);\n    do {\n      writeBufferSize = archiveSize - bytesRead;\n      if (0x2000 < writeBufferSize) {\n        writeBufferSize = 0x2000;\n      }\n      readBufferSize = bfd_bread(bufferPtr,writeBufferSize,filePaths);\n      if (writeBufferSize != readBufferSize) {\nLAB_00102c78:\n        filePaths = (long **)*filePaths[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(errorMessage,filePaths);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*filePaths);\n      }\n      writeBufferSize = fwrite(bufferPtr,1,readBufferSize,DAT_0010d5d8);\n      if (writeBufferSize != readBufferSize) {\n        errnoLocation = __errno_location();\n        errorString = strerror(*errnoLocation);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      bytesRead = bytesRead + readBufferSize;\n    } while (bytesRead < archiveSize);\n    free(bufferPtr);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,filePermission);\n  if (_DAT_0010d600 != 0) {\n    savedStackValue1 = savedStackValue2;\n    FUN_00107c80(errorString,localVarsBuffer);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "bVar1": "fileType",
                "cVar2": "result",
                "iVar3": "status",
                "__format": "timeErrorMsg",
                "uVar4": "filePermissions",
                "unaff_RBX": "filePaths",
                "unaff_RBP": "filePtr",
                "unaff_R12": "fileStat",
                "unaff_R13": "mallocedPtr",
                "unaff_R14D": "fileDesc",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "setuidBit",
                "cStack0000000000000017": "setgidBit",
                "in_stack_00000018": "stickyBit",
                "cStack0000000000000019": "setuidBitOther",
                "cStack000000000000001a": "setgidBitOther",
                "cStack000000000000001b": "stickyBitOther",
                "cStack000000000000001c": "setuidBitGroup",
                "cStack000000000000001d": "setgidBitGroup",
                "cStack000000000000001e": "stickyBitGroup",
                "uStack000000000000001f": "printHex",
                "uStack0000000000000068": "fileInfo",
                "uStack000000000000006c": "inode",
                "in_stack_00000070": "device",
                "in_stack_00000080": "fileSize"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte fileType;\n  char result;\n  int status;\n  char *timeErrorMsg;\n  uint filePermissions;\n  char **filePaths;\n  FILE *filePtr;\n  long fileStat;\n  void *mallocedPtr;\n  int fileDesc;\n  undefined fileTypeChar;\n  char setuidBit;\n  char setgidBit;\n  char stickyBit;\n  char setuidBitOther;\n  char setgidBitOther;\n  char stickyBitOther;\n  char setuidBitGroup;\n  char setgidBitGroup;\n  char stickyBitGroup;\n  undefined printHex;\n  uint fileInfo;\n  uint inode;\n  uint device;\n  undefined8 fileSize;\n  \n  do {\n    fileType = FUN_00107c10();\n    *(uint *)((long)filePaths + 0x44) = *(uint *)((long)filePaths + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(fileStat + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)filePaths + 0x49) = fileType | 0x10;\n    }\n    result = bfd_set_archive_head();\n  } while (result == '\\0');\n  dup(fileDesc);\n  result = bfd_close();\n  if (result != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    status = FUN_00105bc0();\n    if (status == 0) {\n      free(mallocedPtr);\n      free(filePtr);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  FUN_00107c10();\n  timeErrorMsg = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,timeErrorMsg);\n  filePermissions = fileInfo & 0xf000;\n  if (filePermissions == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (filePermissions == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (filePermissions == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (filePermissions == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (filePermissions == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (filePermissions != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  setuidBit = (-((fileInfo & 0x100) == 0) & 0xbbU) + 0x72;\n  setgidBit = (-((fileInfo & 0x80) == 0) & 0xb6U) + 0x77;\n  stickyBit = (-((fileInfo & 0x40) == 0) & 0xb5U) + 0x78;\n  setuidBitOther = (-((fileInfo & 0x20) == 0) & 0xbbU) + 0x72;\n  setgidBitOther = (-((fileInfo & 0x10) == 0) & 0xb6U) + 0x77;\n  stickyBitOther = (-((fileInfo & 8) == 0) & 0xb5U) + 0x78;\n  setuidBitGroup = (-((fileInfo & 4) == 0) & 0xbbU) + 0x72;\n  setgidBitGroup = (-((fileInfo & 2) == 0) & 0xb6U) + 0x77;\n  stickyBitGroup = (-((fileInfo & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileInfo & 0x800) != 0) {\n    if (stickyBit == 'x') {\n      stickyBit = 's';\n    }\n    else {\n      stickyBit = 'S';\n    }\n  }\n  if ((fileInfo & 0x400) != 0) {\n    if (stickyBitOther == 'x') {\n      stickyBitOther = 's';\n    }\n    else {\n      stickyBitOther = 'S';\n    }\n  }\n  if ((fileInfo & 0x200) != 0) {\n    if (stickyBitGroup == 'x') {\n      stickyBitGroup = 't';\n    }\n    else {\n      stickyBitGroup = 'T';\n    }\n  }\n  printHex = 0;\n  fprintf(filePtr,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)inode,\n          (ulong)device,fileSize,&stack0x00000020,(ulong)fileInfo)\n  ;\n  fputs(*filePaths,filePtr);\n  if ((char)fileStat != '\\0') {\n    if ((*(byte *)((long)filePaths + 0x49) & 0x10) == 0) {\n      if (filePaths[0xb] != (char *)0x0) {\n        fprintf(filePtr,\" 0x%lx\");\n      }\n    }\n    else if (filePaths[0xc] != (char *)0x0) {\n      fprintf(filePtr,\" 0x%lx\");\n    }\n  }\n  fputc(10,filePtr);\n  return;\n}\n\n",
            "called": [
                "FUN_00107c10",
                "FUN_00105bc0",
                "bfd_close",
                "free",
                "FUN_00102d2f",
                "xexit",
                "dup",
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "fileList",
                "param_2": "flags",
                "uVar1": "undefinedVar1",
                "bVar2": "byteVar2",
                "iVar3": "index",
                "sVar4": "size",
                "piVar5": "errorCode",
                "pcVar6": "currentFile",
                "pcVar7": "currentFileBase",
                "ppcVar8": "tempPointer",
                "uVar9": "result",
                "lVar10": "currentEntry",
                "__s": "fileBase",
                "__s_00": "currentFileBase",
                "lVar11": "previousEntry",
                "uVar12": "baseName",
                "uVar13": "count",
                "unaff_RBX": "fileName",
                "ppcVar14": "filePointer",
                "unaff_RBP": "fileListPointer",
                "unaff_R12": "entryPointer1",
                "unaff_R13D": "loopCounter",
                "ppcVar15": "entryPointer2",
                "unaff_R14": "fileListBase",
                "bVar16": "boolVar",
                "bVar17": "byteVar3",
                "param_7": "entryList",
                "param_9": "result",
                "in_stack_00000078": "stackVar1",
                "in_stack_00000108": "stackVar2"
            },
            "code": "\n\n\nundefined8 processFiles_001028ed(undefined8 fileList,long flags)\n\n{\n  undefined undefinedVar1;\n  byte byteVar2;\n  int index;\n  size_t size;\n  int *errorCode;\n  char *currentFile;\n  char *currentFileBase;\n  char **tempPointer;\n  undefined8 result;\n  long currentEntry;\n  char *fileBase;\n  char *currentFileBase;\n  long previousEntry;\n  undefined8 baseName;\n  ulong count;\n  char *fileName;\n  char **filePointer;\n  char **fileListPointer;\n  char **entryPointer1;\n  uint loopCounter;\n  char **entryPointer2;\n  long fileListBase;\n  bool boolVar;\n  byte byteVar3;\n  char **entryList;\n  undefined8 result;\n  long stackVar1;\n  long stackVar2;\n  \n  byteVar3 = 0;\ncode_r0x001028ed:\n  FUN_00107c10(fileName,flags);\nLAB_001028f5:\n  baseName = DAT_0010d638;\n  if (loopCounter != 3) {\n    while( true ) {\n      if ((undefined8 *)*entryPointer1 == (undefined8 *)0x0) goto LAB_0010571f;\n      index = filename_cmp(*(undefined8 *)*entryPointer1,baseName);\n      if (index == 0) break;\n      entryPointer1 = (char **)(*entryPointer1 + 0xf0);\n    }\n    if (loopCounter != 2) goto LAB_0010571f;\n    entryPointer1 = (char **)(*entryPointer1 + 0xf0);\n    goto LAB_0010571f;\n  }\n  currentEntry = *(long *)(fileListBase + 0xf0);\n  if (*(long *)(fileListBase + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    previousEntry = currentEntry;\n    currentEntry = *(long *)(previousEntry + 0xf0);\n  } while (currentEntry != 0);\n  entryPointer1 = (char **)(previousEntry + 0xf0);\n  fileName = *fileListPointer;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefinedVar1 = DAT_0010d5f8;\n  loopCounter = (uint)(DAT_0010d60c != 0);\n  flags = bfd_openr(fileName,DAT_0010d5f0);\n  if (flags != 0) {\n    fileListPointer = fileListPointer + 1;\n    byteVar2 = FUN_00105af0(entryPointer1,flags,loopCounter,undefinedVar1);\n    result._6_1_ = result._6_1_ | byteVar2;\n    currentFile = *fileListPointer;\n    do {\n      if (currentFile == (char *)0x0) {\n        if (result._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        baseName = FUN_001058b0();\n        return baseName;\n      }\n      filePointer = *(char ***)(fileListBase + 0xf0);\n      entryPointer1 = entryList;\n      if (result._7_1_ == '\\0') {\n        entryPointer2 = entryList;\n        if (filePointer != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              fileBase = (char *)lbasename(*filePointer);\n              currentFileBase = fileBase;\n              if (DAT_0010d5fa != '\\0') {\n                size = strlen(fileBase);\n                count = (ulong)*(byte *)(*(long *)(fileListBase + 8) + 0x1e);\n                if (count < size) {\n                  currentFileBase = (char *)xmalloc(count + 1);\n                  currentEntry = *(long *)(fileListBase + 8);\n                  currentFile = currentFileBase;\n                  for (count = (ulong)*(byte *)(currentEntry + 0x1e); count != 0; count = count - 1) {\n                    *currentFile = *fileBase;\n                    fileBase = fileBase + (ulong)byteVar3 * -2 + 1;\n                    currentFile = currentFile + (ulong)byteVar3 * -2 + 1;\n                  }\n                  currentFileBase[*(byte *)(currentEntry + 0x1e)] = '\\0';\n                }\n                currentFile = *fileListPointer;\n                fileBase = currentFileBase;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              currentFile = *fileListPointer;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              currentFileBase = (char *)lbasename(currentFile);\n              if (DAT_0010d5fa != '\\0') {\n                size = strlen(currentFileBase);\n                count = (ulong)*(byte *)(*(long *)(fileListBase + 8) + 0x1e);\n                currentFile = currentFileBase;\n                fileBase = currentFileBase;\n                if (count < size) {\n                  currentFile = (char *)xmalloc(count + 1);\n                  currentEntry = *(long *)(fileListBase + 8);\n                  currentFileBase = currentFile;\n                  for (count = (ulong)*(byte *)(currentEntry + 0x1e); count != 0; count = count - 1) {\n                    *currentFileBase = *currentFileBase;\n                    currentFileBase = currentFileBase + (ulong)byteVar3 * -2 + 1;\n                    currentFileBase = currentFileBase + (ulong)byteVar3 * -2 + 1;\n                  }\n                  currentFile[*(byte *)(currentEntry + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              index = filename_cmp(currentFileBase,currentFileBase);\n            }\n            else {\n              currentFile = *fileListPointer;\n              fileBase = *filePointer;\nLAB_00102980:\n              index = filename_cmp(currentFile,fileBase);\n            }\n            if ((index == 0) && (filePointer[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                index = stat(*fileListPointer,(stat *)&stack0x000000b0);\n                if (index != 0) {\n                  errorCode = __errno_location();\n                  if (*errorCode != 2) {\n                    FUN_00107c10(*fileListPointer);\nLAB_00102b7e:\n                    currentFile = *filePointer;\n                    baseName = dcgettext(0,\"internal stat error on %s\",5);\n                    FUN_00107690(baseName,currentFile);\n                    free(fileListPointer);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                tempPointer = (char **)filePointer[0x1d];\n                if ((char **)filePointer[0x1d] == (char **)0x0) {\n                  tempPointer = filePointer;\n                }\n                index = (**(code **)(tempPointer[1] + 0x1e8))(filePointer,&stack0x00000020);\n                if (index != 0) goto LAB_00102b7e;\n                if (stackVar2 <= stackVar1) goto LAB_0010577e;\n              }\n              baseName = FUN_00105870(entryList,2,*filePointer);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                currentFile = *fileListPointer;\n                boolVar = DAT_0010d60c != 0;\n                currentEntry = bfd_openr(currentFile,DAT_0010d5f0);\n                if (currentEntry == 0) {\n                  FUN_00107c10(currentFile,0);\n                  goto LAB_00102b3e;\n                }\n                byteVar2 = FUN_00103172(baseName,currentEntry,boolVar);\n              }\n              else {\n                result = FUN_00105830(*fileListPointer);\n                index = filename_cmp(result,\"__.LIBDEP\");\n                if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byteVar2 = FUN_00103172(baseName,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byteVar2 != 0) {\n                *entryPointer2 = *(char **)(*entryPointer2 + 0xf0);\n                result._6_1_ = byteVar2;\n              }\n              goto LAB_0010577e;\n            }\n            entryPointer2 = filePointer + 0x1e;\n            filePointer = (char **)filePointer[0x1e];\n          } while (filePointer != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        loopCounter = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        loopCounter = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        currentEntry = *(long *)(fileListBase + 0xf0);\n        if (*(long *)(fileListBase + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      fileName = *fileListPointer;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      baseName = FUN_00105830(fileName);\n      index = filename_cmp(baseName,\"__.LIBDEP\");\n      if (index != 0) goto code_r0x0010574f;\n      byteVar2 = FUN_00105ae0(entryPointer1,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      result._6_1_ = byteVar2 | result._6_1_;\nLAB_0010577e:\n      fileListPointer = fileListPointer + 1;\n      currentFile = *fileListPointer;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  fileName = *fileListPointer;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "bfd_openr",
                "FUN_00107c10",
                "dcgettext",
                "FUN_00105ae0",
                "xmalloc",
                "__errno_location",
                "FUN_00105af0",
                "lbasename",
                "FUN_00105830",
                "FUN_00107690",
                "stat",
                "filename_cmp",
                "FUN_00102943",
                "FUN_001058b0",
                "strlen",
                "FUN_00103172",
                "FUN_00105870",
                "FUN_001028ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102bf5",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_and_exit_001033b0",
                "param_1": "message",
                "_stderr": "errorOutput"
            },
            "code": "\n\n\nvoid printAndExit_001033b0(undefined8 message)\n\n{\n  fprintf(errorOutput,\"%s\\n\",message);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "exit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "print_file_error_001025a0",
                "piVar1": "errno_ptr",
                "uVar2": "error_message"
            },
            "code": "\nundefined8 print_file_error_001025a0(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00107920(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00107920(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "print_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_one_0010284b",
                "return": "result"
            },
            "code": "\nundefined8 getOne_0010284b(void)\n\n{\n  result 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_one_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_valid_archive_file_00102c25",
                "param_7": "param_values",
                "param_11": "file_permissions",
                "param_12": "archive_size",
                "iVar1": "comparison_result",
                "iVar2": "stat_error",
                "piVar3": "error_number_ptr",
                "pcVar4": "error_message",
                "uVar5": "text",
                "pplVar6": "archive_data",
                "__ptr": "buffer",
                "__n": "bytes_read",
                "lVar7": "loop_index",
                "unaff_RBX": "archive_info",
                "plVar8": "current_file_info",
                "puVar9": "initialized_var",
                "uVar10": "bytes_written",
                "sVar11": "bytes_to_write"
            },
            "code": "\n\n\nlong * extractValidArchiveFile_00102c25(void)\n\n{\n  int comparison_result;\n  int stat_error;\n  int *error_number_ptr;\n  char *error_message;\n  undefined8 text;\n  long **archive_data;\n  void *buffer;\n  size_t bytes_read;\n  long loop_index;\n  long **archive_info;\n  long *current_file_info;\n  undefined4 *initialized_var;\n  ulong bytes_written;\n  size_t bytes_to_write;\n  undefined4 *param_values;\n  __mode_t file_permissions;\n  ulong archive_size;\n  \n  initialized_var = param_values;\n  for (loop_index = 0x24; loop_index != 0; loop_index = loop_index + -1) {\n    *initialized_var = 0;\n    initialized_var = initialized_var + 1;\n  }\n  archive_data = (long **)archive_info[0x1d];\n  if ((long **)archive_info[0x1d] == (long **)0x0) {\n    archive_data = archive_info;\n  }\n  stat_error = (*(code *)archive_data[1][0x3d])();\n  if (stat_error != 0) {\n    current_file_info = *archive_info;\n    text = dcgettext(0,\"internal stat error on %s\",5);\n    stat_error = FUN_00107690(text,current_file_info);\n    text = DAT_0010d638;\n    if (stat_error == 3) {\n      for (; *current_file_info != 0; current_file_info = (long *)(*current_file_info + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file_info != (undefined8 *)0x0; current_file_info = (long *)(*current_file_info + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file_info,text);\n        if (comparison_result == 0) {\n          if (stat_error != 2) {\n            return current_file_info;\n          }\n          return (long *)(*current_file_info + 0xf0);\n        }\n      }\n    }\n    return current_file_info;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive_info);\n  }\n  else {\n    bytes_written = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_write = archive_size - bytes_written;\n      if (0x2000 < bytes_to_write) {\n        bytes_to_write = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_write);\n      if (bytes_to_write != bytes_read) {\nLAB_00102c78:\n        archive_info = (long **)*archive_info[0x1d];\n        text = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(text,archive_info);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive_info);\n      }\n      bytes_to_write = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_write != bytes_read) {\n        error_number_ptr = __errno_location();\n        error_message = strerror(*error_number_ptr);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      bytes_written = bytes_written + bytes_read;\n    } while (bytes_written < archive_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    FUN_00107c80(error_message,param_values);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00107c80",
                "dcgettext",
                "FUN_00105a20",
                "xmalloc",
                "__errno_location",
                "bfd_bread",
                "FUN_00107690",
                "fwrite",
                "bfd_seek",
                "fclose",
                "free",
                "chmod",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_valid_archive_file_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "reverse_and_copy_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "stringLength",
                "puVar3": "newString",
                "uVar4": "maxLength",
                "unaff_RBX": "source",
                "unaff_RBP": "stackBasePointer",
                "puVar5": "destination",
                "bVar6": "byteValue",
                "auVar7": "returnStruct",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] reverseAndCopyString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t stringLength;\n  undefined *newString;\n  ulong maxLength;\n  undefined *source;\n  long stackBasePointer;\n  undefined *destination;\n  byte byteValue;\n  undefined returnStruct [16];\n  undefined8 returnAddress;\n  \n  byteValue = 0;\n  stringLength = strlen(inputString);\n  maxLength = (ulong)*(byte *)(*(long *)(stackBasePointer + 8) + 0x1e);\n  newString = source;\n  if (maxLength < stringLength) {\n    newString = (undefined *)xmalloc(maxLength + 1);\n    lVar1 = *(long *)(stackBasePointer + 8);\n    destination = newString;\n    for (maxLength = (ulong)*(byte *)(lVar1 + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n      *destination = *source;\n      source = source + (ulong)byteValue * -2 + 1;\n      destination = destination + (ulong)byteValue * -2 + 1;\n    }\n    newString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnStruct._8_8_ = returnAddress;\n  returnStruct._0_8_ = newString;\n  return returnStruct;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "reverse_and_copy_string_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_swap_value_00102f08",
                "unaff_RBX": "aPointer",
                "unaff_R12": "anotherPointer"
            },
            "code": "\nundefined8 printAndSwapValue_00102f08(void)\n\n{\n  undefined8 *aPointer;\n  undefined8 *anotherPointer;\n  \n  printf(\"a - %s\\n\",*aPointer);\n  aPointer[0x1e] = *anotherPointer;\n  *anotherPointer = aPointer;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_swap_value_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "analyze_files_00105570",
                "param_1": "fileInfo",
                "param_2": "filePaths",
                "param_3": "flag",
                "ppcVar1": "currentPath",
                "uVar2": "undefinedVar",
                "bVar3": "byteVar",
                "iVar4": "index",
                "sVar5": "size",
                "piVar6": "errnoLoc",
                "pcVar7": "currentFilePath",
                "pcVar8": "basename",
                "uVar9": "libdep",
                "pcVar10": "currentFilePath",
                "__s": "basenameResult",
                "lVar11": "currentPath",
                "lVar12": "nextPath",
                "uVar13": "result",
                "uVar14": "byteVar",
                "ppcVar15": "fileList",
                "ppcVar16": "currentFile",
                "uVar17": "flag",
                "ppcVar18": "previousFile",
                "bVar19": "flag",
                "bVar20": "byteVar",
                "local_15a": "flag",
                "auStack_158": "stackArray",
                "lStack_100": "timestamp",
                "sStack_c8": "fileStat"
            },
            "code": "\n\n\nundefined8 analyzeFiles_00105570(long fileInfo,char **filePaths,char flag)\n\n{\n  char **currentPath;\n  undefined undefinedVar;\n  byte byteVar;\n  int index;\n  size_t size;\n  int *errnoLoc;\n  char *currentFilePath;\n  char *basename;\n  undefined8 libdep;\n  char *currentFilePath;\n  char *basenameResult;\n  long currentPath;\n  long nextPath;\n  undefined8 result;\n  ulong byteVar;\n  char **fileList;\n  char **currentFile;\n  uint flag;\n  char **previousFile;\n  bool flag;\n  byte byteVar;\n  byte flag;\n  undefined stackArray [88];\n  long timestamp;\n  stat fileStat;\n  \n  byteVar = 0;\n  currentPath = (char **)(fileInfo + 0xf0);\n  flag = 0;\n  if (filePaths == (char **)0x0) {\n    result = FUN_00102943();\n    return result;\n  }\n  do {\n    currentFilePath = *filePaths;\njoined_r0x001055aa:\n    if (currentFilePath == (char *)0x0) {\n      if (flag != 0) {\n        result = FUN_001058b0(fileInfo);\n        return result;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    fileList = *(char ***)(fileInfo + 0xf0);\n    currentFile = currentPath;\n    if (flag != '\\0') {\nLAB_0010564c:\n      flag = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      nextPath = *(long *)(fileInfo + 0xf0);\n      if (*(long *)(fileInfo + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentPath = nextPath;\n        nextPath = *(long *)(currentPath + 0xf0);\n      } while (nextPath != 0);\n      currentFile = (char **)(currentPath + 0xf0);\n      currentFilePath = *filePaths;\n      do {\n        if (DAT_0010d620 != 0) {\n          result = FUN_00105830(currentFilePath,fileInfo);\n          index = filename_cmp(result,\"__.LIBDEP\");\n          if (index == 0) {\n            byteVar = FUN_00105ae0(currentFile,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            flag = byteVar | flag;\n            goto LAB_0010577e;\n          }\n          currentFilePath = *filePaths;\n        }\n        undefinedVar = DAT_0010d5f8;\n        flag = DAT_0010d60c != 0;\n        nextPath = bfd_openr(currentFilePath,DAT_0010d5f0);\n        if (nextPath != 0) {\n          filePaths = filePaths + 1;\n          byteVar = FUN_00105af0(currentFile,nextPath,(uint)flag,undefinedVar);\n          flag = flag | byteVar;\n          currentFilePath = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        FUN_00107c10(currentFilePath,0);\n        flag = (uint)flag;\nLAB_001028f5:\n        result = DAT_0010d638;\n        if (flag == 3) {\n          nextPath = *(long *)(fileInfo + 0xf0);\n          if (*(long *)(fileInfo + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*currentFile != (undefined8 *)0x0;\n              currentFile = (char **)(*currentFile + 0xf0)) {\n            index = filename_cmp(*(undefined8 *)*currentFile,result);\n            if (index == 0) {\n              if (flag == 2) {\n                currentFile = (char **)(*currentFile + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFilePath = *filePaths;\n      } while( true );\n    }\n    previousFile = currentPath;\n    if (fileList == (char **)0x0) {\n      flag = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      currentFilePath = (char *)lbasename(*fileList);\n      basename = currentFilePath;\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(currentFilePath);\n        byteVar = (ulong)*(byte *)(*(long *)(fileInfo + 8) + 0x1e);\n        if (byteVar < size) {\n          basename = (char *)xmalloc(byteVar + 1);\n          nextPath = *(long *)(fileInfo + 8);\n          currentFilePath = basename;\n          for (byteVar = (ulong)*(byte *)(nextPath + 0x1e); byteVar != 0; byteVar = byteVar - 1) {\n            *currentFilePath = *currentFilePath;\n            currentFilePath = currentFilePath + (ulong)byteVar * -2 + 1;\n            currentFilePath = currentFilePath + (ulong)byteVar * -2 + 1;\n          }\n          basename[*(byte *)(nextPath + 0x1e)] = '\\0';\n        }\n        currentFilePath = *filePaths;\n        currentFilePath = basename;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      currentFilePath = *filePaths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basenameResult = (char *)lbasename(currentFilePath);\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(basenameResult);\n        byteVar = (ulong)*(byte *)(*(long *)(fileInfo + 8) + 0x1e);\n        currentFilePath = basenameResult;\n        currentFilePath = basename;\n        if (byteVar < size) {\n          currentFilePath = (char *)xmalloc(byteVar + 1);\n          nextPath = *(long *)(fileInfo + 8);\n          basename = currentFilePath;\n          for (byteVar = (ulong)*(byte *)(nextPath + 0x1e); byteVar != 0; byteVar = byteVar - 1) {\n            *basename = *basenameResult;\n            basenameResult = basenameResult + (ulong)byteVar * -2 + 1;\n            basename = basename + (ulong)byteVar * -2 + 1;\n          }\n          currentFilePath[*(byte *)(nextPath + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      index = filename_cmp(basenameResult,basename);\n      if (index == 0) goto LAB_00102993;\nLAB_00105639:\n      previousFile = fileList + 0x1e;\n      fileList = (char **)fileList[0x1e];\n      if (fileList == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    currentFilePath = *filePaths;\n    currentFilePath = *fileList;\nLAB_00102980:\n    index = filename_cmp(currentFilePath,currentFilePath);\n    if (index != 0) goto LAB_00105639;\nLAB_00102993:\n    if (fileList[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      index = stat(*filePaths,&fileStat);\n      if (index != 0) {\n        errnoLoc = __errno_location();\n        if (*errnoLoc != 2) {\n          FUN_00107c10(*filePaths);\nLAB_00102b7e:\n          currentFilePath = *fileList;\n          result = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00107690(result,currentFilePath);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      currentFile = (char **)fileList[0x1d];\n      if ((char **)fileList[0x1d] == (char **)0x0) {\n        currentFile = fileList;\n      }\n      index = (**(code **)(currentFile[1] + 0x1e8))(fileList,stackArray);\n      if (index != 0) goto LAB_00102b7e;\n      if (fileStat.st_mtim.tv_sec <= timestamp) goto LAB_0010577e;\n    }\n    result = FUN_00105870(currentPath,2,*fileList);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      currentFilePath = *filePaths;\n      flag = DAT_0010d60c != 0;\n      nextPath = bfd_openr(currentFilePath,DAT_0010d5f0);\n      if (nextPath == 0) {\n        FUN_00107c10(currentFilePath,0);\n        goto LAB_00102b3e;\n      }\n      byteVar = FUN_00103172(result,nextPath,flag);\n    }\n    else {\n      libdep = FUN_00105830(*filePaths,fileInfo);\n      index = filename_cmp(libdep,\"__.LIBDEP\");\n      if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteVar = FUN_00103172(result,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byteVar != 0) {\n      *previousFile = *(char **)(*previousFile + 0xf0);\n      flag = byteVar;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "analyze_files_00105570"
        }
    },
    "used_tokens": 86479,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_0010285f",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_00102e6f",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_001033d6",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00107c10",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_00102e57",
            "FUN_00105af0",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_001028ed",
            "FUN_001033b0",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00102c25",
            "FUN_00102bb0",
            "FUN_00102f08",
            "FUN_00105570"
        ]
    ],
    "locked_functions": []
}