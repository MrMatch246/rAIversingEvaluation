{
    "functions": {
        "FUN_0010c1a0": {
            "renaming": {},
            "code": "\n\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* asprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1a0",
            "calling": [
                "asprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c1a0"
        },
        "FUN_001055a0": {
            "renaming": {
                "FUN_001055a0": "initialize_program_001055a0",
                "completed_0": "isInitialized",
                "__cxa_finalize": "finalizeCleanup",
                "__dso_handle": "dynamicSharedObjHandle",
                "deregister_tm_clones": "deregisterCloneTmFunctions"
            },
            "code": "\nvoid initializeProgram_001055a0(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  finalizeCleanup(dynamicSharedObjHandle);\n  deregisterCloneTmFunctions();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_001055a0"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "set_print_width.cold",
                "set_print_width"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "update_relocation_info_00103c00",
                "param_1": "binary_handle",
                "param_2": "relocation_offset",
                "param_3": "relocation_info",
                "puVar1": "reloc_ptr",
                "auVar2": "reloc_info",
                "lVar3": "reloc_size",
                "uVar4": "allocated_memory",
                "uVar5": "canonicalized_reloc"
            },
            "code": "\nundefined8\nupdate_relocation_info_00103c00(undefined8 *binary_handle,long relocation_offset,undefined (*relocation_info) [16],undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined8 *reloc_ptr;\n  undefined reloc_info [16];\n  long reloc_size;\n  undefined8 allocated_memory;\n  undefined8 canonicalized_reloc;\n  \n  **(long **)*relocation_info = relocation_offset;\n  if ((*(byte *)(relocation_offset + 0x24) & 4) == 0) {\n    **(undefined8 **)(*relocation_info + 8) = 0;\n    **(undefined8 **)relocation_info[1] = 0;\n  }\n  else {\n    reloc_size = bfd_get_reloc_upper_bound();\n    if (-1 < reloc_size) {\n      reloc_ptr = *(undefined8 **)(*relocation_info + 8);\n      allocated_memory = xmalloc(reloc_size);\n      canonicalized_reloc = *(undefined8 *)(relocation_info[1] + 8);\n      *reloc_ptr = allocated_memory;\n      reloc_ptr = *(undefined8 **)relocation_info[1];\n      canonicalized_reloc = bfd_canonicalize_reloc(binary_handle,relocation_offset,**(undefined8 **)(*relocation_info + 8),canonicalized_reloc);\n      *reloc_ptr = canonicalized_reloc;\n      if (-1 < **(long **)relocation_info[1]) goto LAB_00103c7c;\n    }\n    bfd_fatal(*binary_handle);\n  }\nLAB_00103c7c:\n  reloc_size = *(long *)(*relocation_info + 8) + 8;\n  *(long *)relocation_info[1] = *(long *)relocation_info[1] + 8;\n  reloc_info._8_4_ = (int)reloc_size;\n  reloc_info._0_8_ = *(long *)*relocation_info + 8;\n  reloc_info._12_4_ = (int)((ulong)reloc_size >> 0x20);\n  *relocation_info = reloc_info;\n  return param_5;\n}\n\n",
            "called": [
                "xmalloc",
                "bfd_get_reloc_upper_bound",
                "bfd_fatal",
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "print_symbol.cold"
            ],
            "imported": false,
            "current_name": "update_relocation_info_00103c00"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "get_relocs"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "print_archive_filename_bsd",
                "FUN_00103463",
                "print_archive_member_sysv",
                "print_symbol_info_bsd",
                "print_archive_member_bsd",
                "print_object_filename_sysv",
                "FUN_00102739",
                "main",
                "print_symbol_info_bsd.cold",
                "print_symbol",
                "print_symbol_filename_sysv",
                "print_object_filename_posix",
                "print_symbol_filename_posix.cold",
                "print_symbol_info_sysv",
                "print_symbol_info_posix",
                "print_symbol_filename_bsd.cold",
                "print_object_filename_bsd",
                "print_value.constprop.0",
                "print_archive_member_posix",
                "display_file",
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_information_0010370a",
                "plVar4": "formattedMessage",
                "uVar9": "maskedRBX",
                "bVar8": "symbolType",
                "cVar1": "isUndefined",
                "uVar2": "shiftedSymbolFlag",
                "lVar7": "symbolInfoAddress",
                "pcVar10": "symbolInfoString",
                "iVar3": "asprintfReturnValue",
                "unaff_RBX": "originalRBX",
                "bufp_6": "buffer1",
                "bufp_7": "buffer2",
                "piVar5": "errnoLoc",
                "print_width": "printWidth",
                "xstrerror": "getErrorStringFunction",
                "free": "freeFunction",
                "__errno_location": "getErrnoLocationFunction",
                "print_value_constprop_0": "printValue",
                "printf": "printFormatted",
                "dcgettext": "getLocalizedStringFunction"
            },
            "code": "\nvoid printSymbolInformation_0010370a(void)\n\n{\n  char isUndefined;\n  ushort shiftedSymbolFlag;\n  int asprintfReturnValue;\n  long *formattedMessage;\n  int *errnoLoc;\n  undefined8 uVar6;\n  long symbolInfoAddress;\n  ulong originalRBX;\n  byte symbolType;\n  ulong maskedRBX;\n  char *symbolInfoString;\n  \n  formattedMessage = (long *)getLocalizedStringFunction(0,\"Print width has not been initialized (%d)\",5);\n  maskedRBX = originalRBX & 0xffffffff;\n  fatal(formattedMessage,maskedRBX);\n  print_symname(\"%-20s|\",formattedMessage,0,maskedRBX);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*formattedMessage + 8));\n  if (isUndefined == '\\0') {\n    printValue(*(undefined8 *)*formattedMessage);\n  }\n  else if (printWidth == 0x20) {\n    printFormatted(\"        \");\n  }\n  else {\n    printFormatted(\"                \");\n  }\n  printFormatted(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*formattedMessage + 8));\n  if (*(char *)(*formattedMessage + 8) == '-') {\n    printFormatted(\"%18s|  \",*(undefined8 *)(*formattedMessage + 0x20));\n    printFormatted((char *)&desc_format,(ulong)(uint)(int)*(short *)(*formattedMessage + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (formattedMessage[2] == 0) {\n    if (formattedMessage[3] != 0) {\n      symbolInfoAddress = *(long *)(formattedMessage[3] + 0x30);\n      isUndefined = *(char *)(symbolInfoAddress + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symbolInfoString = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symbolInfoString = \"Block\";\n      }\n      else if (*(ushort *)(symbolInfoAddress + 0x26) == 0) {\n        symbolInfoString = \"None\";\n      }\n      else {\n        shiftedSymbolFlag = *(ushort *)(symbolInfoAddress + 0x26) >> 4 & 3;\n        if (shiftedSymbolFlag == 2) {\n          symbolInfoString = \"Function\";\n        }\n        else if (shiftedSymbolFlag == 3) {\n          symbolInfoString = \"Array\";\n        }\n        else {\n          if (shiftedSymbolFlag != 1) {\n            freeFunction(buffer1);\n            shiftedSymbolFlag = *(ushort *)(symbolInfoAddress + 0x26);\n            symbolType = *(byte *)(symbolInfoAddress + 0x28);\n            symbolInfoString = (char *)getLocalizedStringFunction(0,\"<unknown>: %d/%d\",5);\n            asprintfReturnValue = asprintFormatted(&buffer1,symbolInfoString,(ulong)symbolType,(ulong)shiftedSymbolFlag);\n            symbolInfoString = buffer1;\n            goto joined_r0x00103964;\n          }\n          symbolInfoString = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printFormatted(\"                  |\");\n  }\n  else {\n    symbolType = *(byte *)(formattedMessage[2] + 0x48) & 0xf;\n    switch(symbolType) {\n    case 0:\n      symbolInfoString = \"NOTYPE\";\n      break;\n    case 1:\n      symbolInfoString = \"OBJECT\";\n      break;\n    case 2:\n      symbolInfoString = \"FUNC\";\n      break;\n    case 3:\n      symbolInfoString = \"SECTION\";\n      break;\n    case 4:\n      symbolInfoString = \"FILE\";\n      break;\n    case 5:\n      symbolInfoString = \"COMMON\";\n      break;\n    case 6:\n      symbolInfoString = \"TLS\";\n      break;\n    default:\n      freeFunction(buffer2);\n      symbolInfoString = \"<processor specific>: %d\";\n      if ((2 < symbolType - 0xd) && (symbolInfoString = \"<OS specific>: %d\", 2 < symbolType - 10)) {\n        symbolInfoString = \"<unknown>: %d\";\n      }\n      symbolInfoString = (char *)getLocalizedStringFunction(0,symbolInfoString,5);\n      asprintfReturnValue = asprintFormatted(&buffer2,symbolInfoString,(ulong)symbolType);\n      symbolInfoString = buffer2;\njoined_r0x00103964:\n      if (asprintfReturnValue < 0) {\n        errnoLoc = getErrnoLocationFunction();\n        uVar6 = getErrorStringFunction(*errnoLoc);\n        fatal(&DAT_0010712d,uVar6);\nLAB_00103983:\n        symbolInfoString = \"File\";\n      }\n    }\nLAB_001039c0:\n    printFormatted(\"%18s|\",symbolInfoString);\n  }\n  if (formattedMessage[2] == 0) {\n    if (formattedMessage[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (printWidth == 0x20) {\n      printFormatted(\"        \");\n    }\n    else {\n      printFormatted(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(formattedMessage[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printValue();\n  }\n  symbolInfoAddress = formattedMessage[2];\n  if ((symbolInfoAddress != 0) || (symbolInfoAddress = formattedMessage[3], symbolInfoAddress != 0)) {\n    printFormatted(\"|     |%s\",**(undefined8 **)(symbolInfoAddress + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printFormatted(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "print_value.constprop.0"
            ],
            "imported": false,
            "current_name": "print_symbol_information_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "set_print_format_00104370",
                "param_1": "inputFormat",
                "param_2": "data",
                "uVar1": "errorMessage",
                "ppuVar2": "outputFormat",
                "print_format": "printFormat",
                "format": "currentFormat"
            },
            "code": "\nundefined ** setPrintFormat_00104370(undefined *inputFormat,undefined8 data)\n\n{\n  undefined8 errorMessage;\n  undefined **outputFormat;\n  \n  switch(*inputFormat) {\n  case 0x42:\n  case 0x62:\n    printFormat = 0;\n    currentFormat = (undefined *)&currentFormats;\n    return &currentFormats;\n  default:\n    errorMessage = dcgettext(0,\"%s: invalid output currentFormat\",5);\n    fatal(errorMessage,inputFormat);\n    errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    non_fatal(errorMessage);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    outputFormat = (undefined **)set_printFormat_00104397(inputFormat,data,3);\n    return outputFormat;\n  case 0x50:\n  case 0x70:\n    outputFormat = (undefined **)set_printFormat_00104397(inputFormat,data,2);\n    return outputFormat;\n  case 0x53:\n  case 0x73:\n    outputFormat = (undefined **)set_printFormat_00104397(inputFormat,data,1);\n    return outputFormat;\n  }\n}\n\n",
            "called": [
                "FUN_00104397",
                "fatal",
                "set_output_format.cold",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "set_print_format_00104370"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "size_forward1"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010c058": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c058",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_0010c058"
        },
        "FUN_0010c178": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c178",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010c178"
        },
        "FUN_0010c210": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c210",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010c210"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00105500": {
            "renaming": {
                "FUN_00105500": "start_main_impl_00105500",
                "param_1": "main_function",
                "param_2": "command_line_args",
                "auStack_8": "stack_variable"
            },
            "code": "\nvoid processEntry start_main_impl_00105500(undefined8 main_function,undefined8 command_line_args)\n\n{\n  undefined stack_variable [8];\n  \n  __libc_start_main(main,command_line_args,&stack0x00000008,0,0,main_function,stack_variable);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "start_main_impl_00105500"
        },
        "FUN_00102475": {
            "renaming": {
                "FUN_00102475": "set_print_format_00102475",
                "param_1": "printFormatParam1",
                "param_2": "printFormatParam2"
            },
            "code": "\nvoid setPrintFormat_00102475(undefined8 printFormatParam1,undefined8 printFormatParam2)\n\n{\n  set_print_format_00104397(printFormatParam1,printFormatParam2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "set_output_format"
            ],
            "imported": false,
            "current_name": "set_print_format_00102475"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "formats",
                "uVar1": "program_name",
                "__format": "format_string",
                "plVar2": "current_format"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *formats)\n\n{\n  undefined8 program_name;\n  char *format_string;\n  long *current_format;\n  \n  fflush(_stdout);\n  program_name = program_name;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,format_string,program_name);\n  for (current_format = formats; *current_format != 0; current_format = current_format + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_0010c050": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c050",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010c050"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_filename_and_path_001036a7",
                "param_1": "filename",
                "param_2": "path",
                "param_3": "unused_1",
                "param_4": "unused_2"
            },
            "code": "\nvoid printFilenameAndPath_001036a7(undefined8 *filename,undefined8 *path,undefined8 unused_1,undefined8 unused_2)\n\n{\n  if (filename_per_symbol != 0) {\n    if (filename != (undefined8 *)0x0) {\n      printf(\"%s:\",*filename);\n    }\n    printf(\"%s:\",*path,unused_2);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_filename_and_path_001036a7"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "fatal",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbols_00102f19",
                "param_1": "filePath",
                "pcVar1": "formatString",
                "undefined_only": "isUndefinedOnly",
                "print_width": "width"
            },
            "code": "\nvoid printSymbols_00102f19(undefined8 filePath)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (isUndefinedOnly == 0) {\n    formatString = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,filePath);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (width != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00102f19"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "analyze_binary_00102fc3",
                "param_1": "bfd_handle",
                "param_2": "param",
                "cVar1": "last_char",
                "__s": "string1",
                "__s_00": "string2",
                "uVar3": "flag",
                "lVar4": "result1",
                "lVar5": "result2",
                "sVar6": "len1",
                "sVar7": "len2",
                "pcVar8": "ptr1",
                "pcVar9": "ptr2",
                "uVar10": "num1",
                "uVar2": "num2",
                "uVar11": "end1",
                "uVar12": "end2",
                "uVar13": "sort_type",
                "bVar14": "is_less"
            },
            "code": "\nulong analyze_binary_00102fc3(undefined8 bfd_handle,undefined8 param)\n\n{\n  char last_char;\n  ulong num2;\n  char *string1;\n  char *string2;\n  uint flag;\n  long result1;\n  long result2;\n  size_t len1;\n  size_t len2;\n  char *ptr1;\n  char *ptr2;\n  ulong num1;\n  ulong end1;\n  ulong end2;\n  undefined8 sort_type;\n  long unaff_R13;\n  bool is_less;\n  \n  sort_type = *sort_bfd;\n  bfd_fatal();\n  result1 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,sort_type,sort_x);\n  result2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,param,sort_y);\n  if ((result1 == 0) || (unaff_R13 = result2, result2 == 0)) {\n    result2 = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  num1 = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  num2 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  end2 = *(long *)(result1 + 0x10) + num1;\n  end1 = *(long *)(unaff_R13 + 0x10) + num2;\n  is_less = end2 < end1;\n  if ((end2 != end1) || (is_less = num1 < num2, num1 != num2)) {\n    return (ulong)(-(uint)is_less | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(unaff_R13 + 8);\n  len1 = strlen(string1);\n  len2 = strlen(string2);\n  ptr1 = strstr(string1,\"gnu_compiled\");\n  if (ptr1 == (char *)0x0) {\n    ptr2 = strstr(string1,\"gcc2_compiled\");\n    ptr1 = strstr(string2,\"gnu_compiled\");\n    if ((ptr1 == (char *)0x0) && (ptr1 = strstr(string2,\"gcc2_compiled\"), ptr1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (ptr2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    ptr1 = strstr(string2,\"gnu_compiled\");\n    if (ptr1 == (char *)0x0) {\n      ptr2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (ptr2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(unaff_R13 + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((len1 < 3) || (string1[len1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((len2 < 3) || (string2[len2 - 2] != '.')) goto LAB_00103202;\n      is_less = false;\n      goto LAB_001031e7;\n    }\n    last_char = string1[len1 - 1];\n    is_less = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((len2 < 3) || (string2[len2 - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (len2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[len2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_less = true;\nLAB_001031e7:\n    if ((string2[len2 - 1] != 'o') && (string2[len2 - 1] != 'a')) {\n      if (is_less) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_less) {\n    return 1;\n  }\nLAB_00103202:\n  num1 = non_numeric_forward(sort_type,param);\n  return num1;\n}\n\n",
            "called": [
                "bfd_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "numeric_forward"
            ],
            "imported": false,
            "current_name": "analyze_binary_00102fc3"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_information_00103729",
                "param_1": "symbol_info",
                "param_2": "param2",
                "cVar1": "is_undefined_symclass",
                "uVar2": "short_value",
                "iVar3": "string_length",
                "piVar4": "errno_location",
                "uVar5": "error_string",
                "lVar6": "address",
                "bVar7": "byte_value",
                "pcVar8": "symbol_type"
            },
            "code": "\nvoid print_symbol_information_00103729(long *symbol_info,undefined8 param2)\n\n{\n  char is_undefined_symclass;\n  ushort short_value;\n  int string_length;\n  int *errno_location;\n  undefined8 error_string;\n  long address;\n  byte byte_value;\n  char *symbol_type;\n  \n  print_symname(\"%-20s|\",symbol_info,0,param2);\n  is_undefined_symclass = bfd_is_undefined_symclass((int)*(char *)(*symbol_info + 8));\n  if (is_undefined_symclass == '\\0') {\n    print_value_constprop_0(*(undefined8 *)*symbol_info);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol_info + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol_info[2] == 0) {\n    if (symbol_info[3] != 0) {\n      address = *(long *)(symbol_info[3] + 0x30);\n      is_undefined_symclass = *(char *)(address + 0x28);\n      if (is_undefined_symclass == 'g') goto LAB_00103983;\n      if (is_undefined_symclass == 'h') {\n        symbol_type = \"Line\";\n      }\n      else if (is_undefined_symclass == 'd') {\n        symbol_type = \"Block\";\n      }\n      else if (*(ushort *)(address + 0x26) == 0) {\n        symbol_type = \"None\";\n      }\n      else {\n        short_value = *(ushort *)(address + 0x26) >> 4 & 3;\n        if (short_value == 2) {\n          symbol_type = \"Function\";\n        }\n        else if (short_value == 3) {\n          symbol_type = \"Array\";\n        }\n        else {\n          if (short_value != 1) {\n            free(bufp_6);\n            short_value = *(ushort *)(address + 0x26);\n            byte_value = *(byte *)(address + 0x28);\n            symbol_type = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            string_length = asprintf(&bufp_6,symbol_type,(ulong)byte_value,(ulong)short_value);\n            symbol_type = bufp_6;\n            goto joined_r0x00103964;\n          }\n          symbol_type = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    byte_value = *(byte *)(symbol_info[2] + 0x48) & 0xf;\n    switch(byte_value) {\n    case 0:\n      symbol_type = \"NOTYPE\";\n      break;\n    case 1:\n      symbol_type = \"OBJECT\";\n      break;\n    case 2:\n      symbol_type = \"FUNC\";\n      break;\n    case 3:\n      symbol_type = \"SECTION\";\n      break;\n    case 4:\n      symbol_type = \"FILE\";\n      break;\n    case 5:\n      symbol_type = \"COMMON\";\n      break;\n    case 6:\n      symbol_type = \"TLS\";\n      break;\n    default:\n      free(bufp_7);\n      symbol_type = \"<processor specific>: %d\";\n      if ((2 < byte_value - 0xd) && (symbol_type = \"<OS specific>: %d\", 2 < byte_value - 10)) {\n        symbol_type = \"<unknown>: %d\";\n      }\n      symbol_type = (char *)dcgettext(0,symbol_type,5);\n      string_length = asprintf(&bufp_7,symbol_type,(ulong)byte_value);\n      symbol_type = bufp_7;\njoined_r0x00103964:\n      if (string_length < 0) {\n        errno_location = __errno_location();\n        error_string = xstrerror(*errno_location);\n        fatal(&DAT_0010712d,error_string);\nLAB_00103983:\n        symbol_type = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbol_type);\n  }\n  if (symbol_info[2] == 0) {\n    if (symbol_info[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol_info[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_value_constprop_0();\n  }\n  address = symbol_info[2];\n  if ((address != 0) || (address = symbol_info[3], address != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(address + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass",
                "fatal",
                "asprintf",
                "free",
                "xstrerror",
                "printf",
                "print_value.constprop.0",
                "__errno_location",
                "print_symname",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_00103729"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "display_file",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_0010c188": {
            "renaming": {},
            "code": "\n\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcoll@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c188",
            "calling": [
                "strcoll"
            ],
            "imported": false,
            "current_name": "FUN_0010c188"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_profiler_00102000",
                "ctx": "context"
            },
            "code": "\nint initializeProfiler_00102000(EVP_PKEY_CTX *context)\n\n{\n  int iVar1;\n  \n  iVar1 = __gmon_start__();\n  return iVar1;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_profiler_00102000"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_strings_00103573",
                "param_1": "string_1",
                "param_2": "string_2",
                "param_3": "unused_param",
                "param_4": "string_3"
            },
            "code": "\nvoid print_strings_00103573(undefined8 *string_1,undefined8 *string_2,undefined8 unused_param,undefined8 string_3)\n\n{\n  if (string_1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string_1);\n  }\n  printf(\"%s:\",*string_2,string_3);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "print_symbol_filename_bsd"
            ],
            "imported": false,
            "current_name": "print_strings_00103573"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_location_information_00105110",
                "param_1": "symbol_info",
                "param_2": "debug_info",
                "param_3": "filename",
                "param_4": "additional_info",
                "__ptr": "ptr",
                "__s1": "string1",
                "pplVar1": "ptr_to_ptr",
                "plVar2": "ptr",
                "lVar3": "size",
                "puVar4": "ptr",
                "cVar5": "char_val",
                "iVar6": "int_val",
                "pvVar7": "ptr_val",
                "lVar8": "size",
                "uVar9": "uint_val",
                "lVar10": "size",
                "local_b4": "local_uint",
                "local_b0": "local_array1",
                "local_a8": "local_ptr",
                "local_a0": "local_val",
                "local_98": "local_ptr",
                "local_90": "local_ptr",
                "local_88": "local_ptr",
                "pvStack_80": "stack_ptr",
                "pvStack_78": "stack_ptr",
                "pvStack_70": "stack_ptr",
                "local_68": "local_array2",
                "local_60": "local_char"
            },
            "code": "\n\n\nvoid print_location_information_00105110(undefined8 *symbol_info,long *debug_info,undefined8 filename,undefined8 *additional_info)\n\n{\n  void *ptr;\n  char *string1;\n  long **ptr_to_ptr;\n  long *ptr;\n  long size;\n  undefined8 *ptr;\n  char char_val;\n  int int_val;\n  void *ptr_val;\n  long size;\n  uint uint_val;\n  long size;\n  uint local_uint;\n  undefined local_array1 [8];\n  undefined *local_ptr;\n  undefined8 local_val;\n  long *local_ptr;\n  long *local_ptr;\n  void *local_ptr;\n  void *stack_ptr;\n  void *stack_ptr;\n  void *stack_ptr;\n  undefined local_array2 [8];\n  char local_char;\n  \n  if (*(code **)(format + 0x18) == print_symbol_filename_bsd) {\n    if (filename_per_symbol != 0) {\n      if (additional_info != (undefined8 *)0x0) {\n        printf(\"%s:\",*additional_info);\n      }\n      printf(\"%s:\",*symbol_info);\n    }\n  }\n  else {\n    (**(code **)(format + 0x18))(additional_info,symbol_info);\n  }\n  local_ptr = local_array2;\n  (**(code **)(symbol_info[1] + 0x218))(symbol_info,debug_info,local_ptr);\n  uint_val = *(uint *)(debug_info + 3);\n  char_val = local_char;\n  if (((((local_char == 'i') && ((uint_val & 0x400000) != 0)) && (ifunc_type_chars != (char *)0x0)) &&\n      ((*ifunc_type_chars != '\\0' && (char_val = *ifunc_type_chars, (uint_val & 2) == 0)))) &&\n     (char_val = local_char, ifunc_type_chars[1] != '\\0')) {\n    char_val = ifunc_type_chars[1];\n  }\n  local_char = char_val;\n  local_val = filename;\n  if ((uint_val & 0x200100) != 0) goto LAB_00103330;\n  size = *debug_info;\n  int_val = *(int *)(*(long *)(size + 8) + 8);\n  if (((uint_val & 0x200000) == 0) && (int_val == 5)) {\n    local_ptr = debug_info;\n    if (*(long *)(size + 0x110) == 0) {\n      local_ptr = (long *)0x0;\n    }\n  }\n  else {\n    local_ptr = (long *)0x0;\n    if (((int_val - 2U & 0xfffffffd) == 0) && (local_ptr = debug_info, *(long *)(size + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  local_ptr = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(format + 0x20))(&local_ptr,symbol_info);\n  do {\n    if (line_numbers == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (lineno_cache_bfd == symbol_info) {\n      ptr = lineno_cache_bfd;\n      if (syms_5 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      lineno_cache_bfd = ptr;\n      ptr_val = relocs_3;\n      if (debug_info[4] == 0x10c2a8) {\n        if (lineno_cache_rel_bfd == symbol_info) {\n          if (relocs_3 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          uint_val = 0;\n          if (relocs_3 != (void *)0x0) {\n            for (; uint_val < seccount_2; uint_val = uint_val + 1) {\n              ptr = *(void **)((long)ptr_val + (ulong)uint_val * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(secs_1);\n            free(ptr_val);\n            free(relcount_0);\n            secs_1 = (void *)0x0;\n            relocs_3 = (void *)0x0;\n            relcount_0 = (void *)0x0;\n          }\nLAB_001033d1:\n          seccount_2 = *(uint *)(symbol_info + 0x14);\n          secs_1 = (void *)xmalloc((ulong)seccount_2 * 8);\n          relocs_3 = (void *)xmalloc((ulong)seccount_2 << 3);\n          relcount_0 = (void *)xmalloc((ulong)seccount_2 << 3);\n          stack_ptr = syms_5;\n          local_ptr = secs_1;\n          stack_ptr = relocs_3;\n          stack_ptr = relcount_0;\n          bfd_map_over_sections(symbol_info,get_relocs,&local_ptr);\n          lineno_cache_rel_bfd = symbol_info;\n        }\n        string1 = (char *)debug_info[1];\n        for (uint_val = 0; uint_val < seccount_2; uint_val = uint_val + 1) {\n          size = (ulong)uint_val * 8;\n          ptr_val = relcount_0;\n          for (size = 0;\n              *(long *)((long)ptr_val + size) != size && size <= *(long *)((long)ptr_val + size)\n              ; size = size + 1) {\n            ptr_to_ptr = *(long ***)(*(long *)((long)relocs_3 + size) + size * 8);\n            ptr = *ptr_to_ptr;\n            if ((((ptr != (long *)0x0) &&\n                 (size = *ptr, *(long *)(size + 0x20) == debug_info[4])) &&\n                (*(long *)(size + 0x10) == debug_info[2])) &&\n               (((int_val = strcmp(string1,*(char **)(size + 8)), int_val == 0 &&\n                 (char_val = (**(code **)(symbol_info[1] + 0x240))\n                                    (symbol_info,syms_5,*(undefined8 *)((long)secs_1 + size),ptr_to_ptr[1]\n                                     ,&local_ptr,local_array1,&local_uint,0), ptr_val = relcount_0,\n                 char_val != '\\0')) && (local_ptr != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",local_ptr,(ulong)local_uint);\n              uint_val = seccount_2;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(debug_info[4] + 0xe0) == symbol_info) {\n        char_val = (**(code **)(symbol_info[1] + 0x250))(symbol_info,syms_5,debug_info,&local_ptr,&local_uint);\n        if (((char_val != '\\0') ||\n            (char_val = (**(code **)(symbol_info[1] + 0x240))\n                               (symbol_info,syms_5,debug_info[4],debug_info[2],&local_ptr,local_array1,&local_uint,0)\n            , char_val != '\\0')) && ((local_ptr != (void *)0x0 && (local_uint != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (syms_5 != (void *)0x0) {\n      free(syms_5);\n      syms_5 = (void *)0x0;\n    }\nLAB_00105359:\n    size = (**(code **)(symbol_info[1] + 0x1f8))(symbol_info);\n    if (size < 0) {\n      find_matching_records_00103463(size);\n      return;\n    }\n    syms_5 = (void *)xmalloc();\n    size = (**(code **)(symbol_info[1] + 0x200))(symbol_info,syms_5);\n    ptr = symbol_info;\n    if (-1 < size) goto LAB_00105288;\n    bfd_fatal(*symbol_info);\nLAB_00103330:\n    local_ptr = (long *)0x0;\n    local_ptr = (long *)0x0;\n    (**(code **)(format + 0x20))(&local_ptr,symbol_info);\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103463",
                "print_symbol_info_bsd",
                "free",
                "xmalloc",
                "printf",
                "bfd_fatal",
                "print_symbol_filename_bsd",
                "print_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_location_information_00105110"
        },
        "FUN_0010c060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010c060"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00103463",
                "set_print_width",
                "FUN_00104d5b",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_0010c1a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1a8",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010c1a8"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "check_compilation_type_00102fd2",
                "param_1": "file1",
                "param_2": "file2",
                "cVar1": "lastCharacter",
                "__s": "string1",
                "__s_00": "string2",
                "uVar2": "string1Length",
                "uVar3": "string2Length",
                "pcVar8": "compilationType1",
                "pcVar9": "compilationType2",
                "uVar10": "result",
                "uVar11": "sum1",
                "uVar12": "sum2",
                "unaff_R13": "bfdHandle",
                "bVar13": "shouldCompare"
            },
            "code": "\nulong checkCompilationType_00102fd2(undefined8 file1,undefined8 file2)\n\n{\n  char lastCharacter;\n  ulong string1Length;\n  char *string1;\n  char *string2;\n  uint string2Length;\n  long lVar4;\n  long lVar5;\n  size_t sVar6;\n  size_t sVar7;\n  char *compilationType1;\n  char *compilationType2;\n  ulong result;\n  ulong sum1;\n  ulong sum2;\n  long bfdHandle;\n  bool shouldCompare;\n  \n  lVar4 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,file1,sort_x);\n  lVar5 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,file2,sort_y);\n  if ((lVar4 == 0) || (bfdHandle = lVar5, lVar5 == 0)) {\n    lVar5 = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(lVar4 + 0x20) == 0x10c2a8) || (*(long *)(lVar5 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(lVar4 + 0x20) + 0x30);\n  string1Length = *(ulong *)(*(long *)(lVar5 + 0x20) + 0x30);\n  sum2 = *(long *)(lVar4 + 0x10) + result;\n  sum1 = *(long *)(bfdHandle + 0x10) + string1Length;\n  shouldCompare = sum2 < sum1;\n  if ((sum2 != sum1) || (shouldCompare = result < string1Length, result != string1Length)) {\n    return (ulong)(-(uint)shouldCompare | 1);\n  }\n  string1 = *(char **)(lVar4 + 8);\n  string2 = *(char **)(bfdHandle + 8);\n  sVar6 = strlen(string1);\n  sVar7 = strlen(string2);\n  compilationType1 = strstr(string1,\"gnu_compiled\");\n  if (compilationType1 == (char *)0x0) {\n    compilationType2 = strstr(string1,\"gcc2_compiled\");\n    compilationType1 = strstr(string2,\"gnu_compiled\");\n    if ((compilationType1 == (char *)0x0) && (compilationType1 = strstr(string2,\"gcc2_compiled\"), compilationType1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (compilationType2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    compilationType1 = strstr(string2,\"gnu_compiled\");\n    if (compilationType1 == (char *)0x0) {\n      compilationType2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (compilationType2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  string2Length = *(uint *)(bfdHandle + 0x18) & 0x4000;\n  if ((*(byte *)(lVar4 + 0x19) & 0x40) == 0) {\n    if ((sVar6 < 3) || (string1[sVar6 - 2] != '.')) {\n      if (string2Length != 0) {\n        return 1;\n      }\n      if ((sVar7 < 3) || (string2[sVar7 - 2] != '.')) goto LAB_00103202;\n      shouldCompare = false;\n      goto LAB_001031e7;\n    }\n    lastCharacter = string1[sVar6 - 1];\n    shouldCompare = lastCharacter == 'o' || lastCharacter == 'a';\n    if (string2Length == 0) {\n      if ((sVar7 < 3) || (string2[sVar7 - 2] != '.')) {\n        if (lastCharacter == 'o' || lastCharacter == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (string2Length != 0) goto LAB_00103202;\n    if (sVar7 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[sVar7 - 2] != '.') {\n      return 0xffffffff;\n    }\n    shouldCompare = true;\nLAB_001031e7:\n    if ((string2[sVar7 - 1] != 'o') && (string2[sVar7 - 1] != 'a')) {\n      if (shouldCompare) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!shouldCompare) {\n    return 1;\n  }\nLAB_00103202:\n  result = non_numeric_forward(file1,file2);\n  return result;\n}\n\n",
            "called": [
                "non_numeric_forward",
                "abort",
                "bfd_fatal",
                "strlen",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "check_compilation_type_00102fd2"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "print_symbol.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "decompile_and_fatal_00102f9f",
                "auVar1": "result",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] decompile_and_fatal_00102f9f(void)\n\n{\n  undefined result [16];\n  undefined8 return_address;\n  \n  bfd_fatal(*sort_bfd);\n  result._8_8_ = return_address;\n  result._0_8_ = 0xffffffff;\n  return result;\n}\n\n",
            "called": [
                "bfd_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "non_numeric_forward"
            ],
            "imported": false,
            "current_name": "decompile_and_fatal_00102f9f"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_if_pointer_is_null_00103a66",
                "unaff_RBX": "pointerOffset",
                "print_constprop_0_0010651a": "printErrorMessage"
            },
            "code": "\nvoid checkIfPointerIsNull_00103a66(void)\n\n{\n  long pointerOffset;\n  \n  if (*(long *)(pointerOffset + 8) != 0) {\n    printErrorMessage();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "check_if_pointer_is_null_00103a66"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "display_rel_file",
                "main",
                "bfd_nonfatal",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_0010c118": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c118",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010c118"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_symbol_details_001035a2",
                "unaff_RBX": "symbol_info",
                "lVar1": "symbol_address",
                "putchar": "put_character",
                "print_value_constprop_0": "print_value",
                "printf": "print_formatted",
                "print_symname": "print_symbol_name"
            },
            "code": "\nvoid print_symbol_details_001035a2(void)\n\n{\n  long *symbol_info;\n  long symbol_address;\n  \n  if (symbol_info[2] == 0) {\n    symbol_address = symbol_info[1];\n  }\n  else {\n    symbol_address = *(long *)(symbol_info[2] + 0x38);\n  }\n  if (symbol_address != 0) {\n    put_character(0x20);\n    if (symbol_info[2] == 0) {\n      symbol_address = symbol_info[1];\n    }\n    else {\n      symbol_address = *(long *)(symbol_info[2] + 0x38);\n    }\n    print_value(symbol_address);\n  }\n  print_formatted(\" %c\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) != '-') {\n    print_symbol_name(&DAT_0010712c);\n    return;\n  }\n  put_character(0x20);\n  print_formatted((char *)&other_format,(ulong)(uint)(int)*(char *)(*symbol_info + 0x19));\n  put_character(0x20);\n  print_formatted((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n  print_formatted(\" %5s\",*(undefined8 *)(*symbol_info + 0x20));\n  print_symbol_name(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "print_value.constprop.0",
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "print_symbol_info_bsd"
            ],
            "imported": false,
            "current_name": "print_symbol_details_001035a2"
        },
        "FUN_0010c198": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c198",
            "calling": [
                "fseek",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_0010c198"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "find_matching_records_00103463",
                "unaff_R12": "recordName",
                "unaff_R13": "bfdObject",
                "unaff_R15": "currentRecord",
                "param_8": "recordCount",
                "param_10": "recordOffset",
                "in_stack_00000050": "recordLine",
                "seccount_2": "totalRecords",
                "relcount_0": "relCount",
                "relocs_3": "relocationArray"
            },
            "code": "\n\n\nvoid findMatchingRecords_00103463(void)\n\n{\n  long *plVar1;\n  long lVar2;\n  char cVar3;\n  int iVar4;\n  long lVar5;\n  char *recordName;\n  undefined8 *bfdObject;\n  long lVar6;\n  long currentRecord;\n  undefined8 recordCount;\n  ulong recordOffset;\n  long recordLine;\n  \n  bfd_fatal(*bfdObject);\n  do {\n    recordCount._4_4_ = recordCount._4_4_ + 1;\n    if (totalRecords <= recordCount._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    lVar5 = relCount;\n    for (lVar6 = 0; plVar1 = (long *)(lVar5 + (ulong)recordCount._4_4_ * 8),\n        *plVar1 != lVar6 && lVar6 <= *plVar1; lVar6 = lVar6 + 1) {\n      plVar1 = **(long ***)(*(long *)(relocationArray + (ulong)recordCount._4_4_ * 8) + lVar6 * 8);\n      if ((((plVar1 != (long *)0x0) &&\n           (lVar2 = *plVar1, *(long *)(lVar2 + 0x20) == *(long *)(currentRecord + 0x20))) &&\n          (*(long *)(lVar2 + 0x10) == *(long *)(currentRecord + 0x10))) &&\n         (((iVar4 = strcmp(recordName,*(char **)(lVar2 + 8)), iVar4 == 0 &&\n           (cVar3 = (**(code **)(bfdObject[1] + 0x240))(), lVar5 = relCount, cVar3 != '\\0')) &&\n          (recordLine != 0)))) {\n        printf(\"\\t%s:%u\",recordLine,recordOffset >> 0x20);\n        recordCount._4_4_ = totalRecords;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "bfd_fatal",
                "strcmp",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "find_matching_records_00103463"
        },
        "FUN_0010c1b8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1b8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010c1b8"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "set_print_format_00104397",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "printMode",
                "print_format": "printMode",
                "format": "printFormat"
            },
            "code": "\nvoid setPrintFormat_00104397(undefined8 arg1,undefined8 arg2,int printMode)\n\n{\n  printMode = printMode;\n  printFormat = (undefined *)(&printFormats + (long)printMode * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "set_output_format",
                "set_output_format.cold"
            ],
            "imported": false,
            "current_name": "set_print_format_00104397"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "update_print_format_00104670",
                "param_1": "input",
                "iVar1": "widthFlag",
                "pcVar2": "widthPtr",
                "puVar3": "radixFlag",
                "pcVar4": "archPtr",
                "print_width": "archSize",
                "print_format_string": "formatString",
                "print_format": "formatType",
                "print_radix": "radixType"
            },
            "code": "\nvoid updatePrintFormat_00104670(long input)\n\n{\n  int widthFlag;\n  char *widthPtr;\n  undefined *radixFlag;\n  char *archPtr;\n  \n  archSize = bfd_get_arch_size();\n  if (archSize == -1) {\n    archPtr = **(char ***)(input + 8);\n    widthPtr = strstr(archPtr,\"64\");\n    widthFlag = 0x40;\n    if (widthPtr == (char *)0x0) {\n      widthFlag = strcmp(archPtr,\"mmo\");\n      widthFlag = (-(uint)(widthFlag == 0) & 0x20) + 0x20;\n    }\n    archSize = widthFlag;\n    free(formatString);\n  }\n  else {\n    free(formatString);\n  }\n  if (formatType - 2U < 2) {\n    archPtr = \"\";\n  }\n  else if (archSize == 0x20) {\n    archPtr = \"08\";\n  }\n  else {\n    archPtr = \"016\";\n  }\n  radixFlag = &DAT_001071d0;\n  if (radixType != 0x10) {\n    if (radixType < 0x11) {\n      if (radixType == 8) {\n        radixFlag = &DAT_001071ca;\n      }\n      else {\n        if (radixType != 10) {\n          formatString = (void *)concat(&DAT_001071d7,archPtr,0,0);\n          return;\n        }\n        radixFlag = &DAT_001071cd;\n      }\n    }\n    else {\n      radixFlag = (undefined *)0x0;\n    }\n  }\n  formatString = (void *)concat(&DAT_001071d7,archPtr,radixFlag,0);\n  return;\n}\n\n",
            "called": [
                "set_print_width.cold",
                "free",
                "bfd_get_arch_size",
                "strcmp",
                "concat",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "update_print_format_00104670"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_0010c070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010c070"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00103463",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_0010c0b0": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0b0",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010c0b0"
        },
        "FUN_0010c1d0": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1d0",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010c1d0"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "process_symbols_001048e0",
                "param_1": "symbolTable",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "symbolData",
                "param_6": "pluginData",
                "bVar1": "byteVar1",
                "pcVar2": "codePtr2",
                "cVar3": "charVar3",
                "iVar4": "intVar4",
                "uVar5": "uintVar5",
                "uVar6": "undefinedVar6",
                "lVar7": "longVar7",
                "ppuVar8": "pointerPtr8",
                "ppuVar9": "pointerPtr9",
                "lVar10": "longVar10",
                "puVar11": "pointerVar11",
                "unaff_RBX": "unaffRBX",
                "ppuVar12": "pointerPtr12",
                "ppuVar13": "pointerPtr13",
                "unaff_RBP": "unaffRBP",
                "ppuVar14": "pointerPtr14",
                "ppuVar15": "pointerPtr15",
                "ppuVar16": "pointerPtr16",
                "ppuVar17": "pointerPtr17",
                "ppuVar18": "pointerPtr18",
                "unaff_R14": "unaffR14",
                "unaff_R15": "unaffR15",
                "bVar19": "boolVar19",
                "bVar20": "byteVar20",
                "ppuStack_78": "stackPtr78",
                "local_4c": "localVar4c",
                "local_48": "localVar48",
                "local_40": "localArray40"
            },
            "code": "\nvoid processSymbols_001048e0(ulong **symbolTable,undefined8 param2,undefined8 param3,undefined8 param4,\n                 ulong **symbolData,ulong **pluginData)\n\n{\n  byte byteVar1;\n  code *codePtr2;\n  char charVar3;\n  int intVar4;\n  uint uintVar5;\n  undefined8 undefinedVar6;\n  long longVar7;\n  ulong **pointerPtr8;\n  ulong **pointerPtr9;\n  long longVar10;\n  ulong *pointerVar11;\n  ulong **unaffRBX;\n  ulong **pointerPtr12;\n  ulong **pointerPtr13;\n  ulong **unaffRBP;\n  ulong **pointerPtr14;\n  ulong **pointerPtr15;\n  ulong **pointerPtr16;\n  ulong **pointerPtr17;\n  ulong **pointerPtr18;\n  ulong **unaffR14;\n  ulong **unaffR15;\n  bool boolVar19;\n  byte byteVar20;\n  ulong **stackPtr78;\n  uint localVar4c;\n  ulong *localVar48;\n  ulong **localArray40 [2];\n  \n  byteVar20 = 0;\n  localVar48 = (ulong *)0x0;\n  if ((dynamic != 0) || ((*(byte *)((long)symbolTable + 0x44) & 0x10) != 0)) {\n    pointerPtr9 = (ulong **)&localVar4c;\n    pointerPtr8 = (ulong **)(*(code *)symbolTable[1][0x4d])(symbolTable,dynamic != 0,localArray40);\n    if ((long)pointerPtr8 < 0) {\n      if ((dynamic != 0) && (intVar4 = bfd_get_error(), intVar4 == 7)) {\n        if (quiet != 0) {\n          return;\n        }\n        pointerVar11 = *symbolTable;\n        undefinedVar6 = dcgettext(0,\"%s: no symbols\",5);\n        non_fatal(undefinedVar6,pointerVar11);\n        return;\n      }\n      bfd_fatal(*symbolTable);\n      goto LAB_00102e9e;\n    }\n    if (pointerPtr8 != (ulong **)0x0) {\n      if (show_synthetic != 0) {\n        if (localVar4c == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byteVar1 = *(byte *)((long)symbolTable + 0x4a);\n      pointerPtr13 = symbolTable;\n      do {\n        if ((byteVar1 & 0x10) != 0) {\n          unaffRBX = (ulong **)*pointerPtr13;\n          report_plugin_err = '\\0';\n          undefinedVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          non_fatal(undefinedVar6);\n        }\n        pointerPtr14 = localArray40[0];\n        unaffR14 = (ulong **)(ulong)localVar4c;\n        boolVar19 = dynamic != 0;\n        pointerPtr9 = localArray40[0];\n        unaffR15 = (ulong **)(*(code *)pointerPtr13[1][0x41])(pointerPtr13);\n        pointerPtr12 = unaffRBX;\n        unaffRBP = (ulong **)(ulong)boolVar19;\n        symbolTable = pointerPtr13;\n        if (unaffR15 == (ulong **)0x0) goto LAB_00102ea7;\n        pointerPtr17 = (ulong **)((long)pointerPtr8 * (long)unaffR14);\n        pointerPtr8 = (ulong **)((long)pointerPtr14 + (long)pointerPtr17);\n        symbolTable = pointerPtr14;\n        pointerPtr12 = pointerPtr14;\njoined_r0x001049a4:\n        if (symbolTable < pointerPtr8) {\n          do {\n            pointerPtr9 = (ulong **)(*(code *)pointerPtr13[1][0x4e])(pointerPtr13,boolVar19,symbolTable,unaffR15);\n            pointerPtr17 = unaffR15;\n            if (pointerPtr9 == (ulong **)0x0) goto LAB_00102eb0;\n            pointerVar11 = pointerPtr9[1];\n            pointerPtr17 = pointerPtr8;\n            if (((pointerVar11 == (ulong *)0x0) || (*(char *)pointerVar11 != '_')) ||\n               (*(char *)((long)pointerVar11 + 1) != '_')) {\nLAB_00104a03:\n              if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uintVar5 = (uint)(pointerPtr9[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uintVar5 == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (print_debug_syms == 0) {\n                if ((*(byte *)(pointerPtr9 + 3) & 4) == 0) {\n                  if (sort_by_size != 0) goto process_symbols_00104d5b;\nLAB_00104a53:\n                  pluginData = (ulong **)(ulong)defined_only;\n                  if (defined_only == 0) {\n                    charVar3 = (*(code *)pointerPtr13[1][0x46])(pointerPtr13,pointerPtr9);\n                    if (charVar3 != '\\0') {\n                      display_rel_file_cold();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (pointerPtr9[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (sort_by_size == 0) goto LAB_00104a53;\nprocess_symbols_00104d5b:\n                if ((pointerPtr9[4] == (ulong *)0x10c2a8) || (pointerPtr9[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                charVar3 = (*(code *)pointerPtr13[1][0x46])(pointerPtr13,pointerPtr9);\n                if (charVar3 != '\\0') {\n                  display_rel_file_cold();\n                  return;\n                }\nLAB_00104a7b:\n                if (pointerPtr12 != symbolTable) {\n                  if (unaffR14 == (ulong **)0x8) {\n                    *pointerPtr12 = *symbolTable;\n                    process_symbols_001049c0();\n                    return;\n                  }\n                  for (; unaffR14 != (ulong **)0x0; unaffR14 = (ulong **)((long)unaffR14 + -1)) {\n                    *(undefined *)pointerPtr12 = *(undefined *)symbolTable;\n                    symbolTable = (ulong **)((long)symbolTable + (ulong)byteVar20 * -2 + 1);\n                    pointerPtr12 = (ulong **)((long)pointerPtr12 + (ulong)byteVar20 * -2 + 1);\n                  }\n                  process_symbols_001049c0();\n                  return;\n                }\n                pointerPtr12 = (ulong **)((long)pointerPtr12 + (long)unaffR14);\n              }\n            }\n            else {\n              intVar4 = strcmp((char *)((long)pointerVar11 + (ulong)(*(char *)((long)pointerVar11 + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              stackPtr78 = pointerPtr9;\n              if (intVar4 == 0) {\n                if (report_plugin_err != '\\0') {\n                  stackPtr78 = (ulong **)*pointerPtr13;\n                  report_plugin_err = '\\0';\n                  undefinedVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(undefinedVar6,stackPtr78);\n                }\n                goto LAB_00104a03;\n              }\n              if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (external_only == 0) {\n                if (non_weak != 0) {\n                  uintVar5 = (*(uint *)(pointerPtr9 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(pointerPtr9 + 3) & 0x800082) != 0) || (pointerPtr9[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)pointerPtr9[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            symbolTable = (ulong **)((long)symbolTable + (long)unaffR14);\n            if (pointerPtr8 <= symbolTable) break;\n          } while( true );\n        }\n        pointerPtr12 = (ulong **)((long)pointerPtr12 - (long)pointerPtr14);\n        if (unaffR14 == (ulong **)0x8) {\n          pointerVar11 = pointerPtr13[1];\n          pointerPtr14 = (ulong **)((long)pointerPtr12 + 7);\n          if (-1 < (long)pointerPtr12) {\n            pointerPtr14 = pointerPtr12;\n          }\n          symbolData = (ulong **)(ulong)no_sort;\n          codePtr2 = (code *)pointerVar11[0x41];\n          pointerPtr14 = (ulong **)((long)pointerPtr14 >> 3);\n        }\n        else {\n          pointerPtr14 = (ulong **)((long)pointerPtr12 / (long)unaffR14);\n          pointerVar11 = pointerPtr13[1];\n          codePtr2 = (code *)pointerVar11[0x41];\n        }\n        if (no_sort != 0) goto LAB_00104be2;\n        sort_dynamic = dynamic != 0;\n        sort_bfd = pointerPtr13;\n        sort_x = (ulong **)(*codePtr2)(pointerPtr13);\n        sort_y = (ulong **)(*(code *)pointerPtr13[1][0x41])(pointerPtr13);\n        pointerPtr12 = localArray40[0];\n        if ((sort_x != (ulong **)0x0) && (sort_y != (ulong **)0x0)) {\n          pointerPtr8 = (ulong **)(ulong)localVar4c;\n          if (sort_by_size != 0) {\n            boolVar19 = dynamic != 0;\n            qsort(localArray40[0],(size_t)pointerPtr14,(size_t)pointerPtr8,size_forward1);\n            pointerPtr17 = (ulong **)xmalloc((long)pointerPtr14 << 4);\n            pointerPtr18 = sort_x;\n            symbolTable = sort_y;\n            unaffR14 = (ulong **)((long)pointerPtr14 * (long)pointerPtr8 + (long)pointerPtr12);\n            pointerPtr9 = sort_x;\n            if (unaffR14 <= pointerPtr12) goto LAB_00102ec2;\n            pluginData = sort_y;\n            pointerPtr14 = (ulong **)(*(code *)pointerPtr13[1][0x4e])(pointerPtr13,boolVar19,pointerPtr12);\n            symbolData = pointerPtr8;\n            stackPtr78 = pointerPtr17;\n            if (pointerPtr14 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(localArray40[0],(size_t)pointerPtr14,(size_t)pointerPtr8,\n                *(__compar_fn_t *)(sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8))\n          ;\n          pointerVar11 = pointerPtr13[1];\nLAB_00104be2:\n          symbolTable = pointerPtr13;\n          pointerPtr18 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        bfd_fatal(*pointerPtr13);\n        symbolTable = pointerPtr13;\n        pointerPtr12 = unaffR15;\n        while( true ) {\n          unaffRBX = (ulong **)xmalloc();\n          pointerPtr8 = (ulong **)(*(code *)symbolTable[1][0x6b])(symbolTable,unaffRBX);\n          pointerPtr9 = pointerPtr17;\n          if (-1 < (long)pointerPtr8) break;\n          pointerPtr13 = (ulong **)*symbolTable;\n          pointerPtr14 = (ulong **)bfd_fatal(pointerPtr13,pointerPtr17);\nLAB_00102dbe:\n          pointerVar11 = pointerPtr14[2];\n          pointerPtr9 = (ulong **)0x0;\nLAB_00102dc4:\n          pointerVar11 = (ulong *)((long)pointerPtr8[8] - (long)pointerVar11);\n          pointerPtr18 = symbolTable;\n          pointerPtr15 = pointerPtr12;\nLAB_00104ea7:\n          pointerPtr14 = pointerPtr9;\n          pointerPtr12 = unaffRBX;\n          symbolTable = pluginData;\n          if (pointerVar11 != (ulong *)0x0) {\n            *pointerPtr17 = (ulong *)pointerPtr15;\n            pointerPtr17[1] = pointerVar11;\n            pointerPtr17 = pointerPtr17 + 2;\n          }\nLAB_00104e35:\n          pluginData = pointerPtr18;\n          if (pointerPtr12 < unaffR14) goto code_r0x00104e3e;\n          pointerPtr14 = (ulong **)((long)pointerPtr17 - (long)stackPtr78 >> 4);\n          qsort(stackPtr78,(size_t)pointerPtr14,0x10,size_forward2);\n          pointerVar11 = pointerPtr13[1];\n          symbolTable = pointerPtr13;\n          pointerPtr18 = stackPtr78;\nLAB_00104be5:\n          unaffRBX = localArray40[0];\n          pointerPtr8 = (ulong **)(ulong)sort_by_size;\n          unaffR14 = (ulong **)(ulong)(dynamic != 0);\n          if (sort_by_size != 0) {\n            pointerPtr17 = (ulong **)(*(code *)pointerVar11[0x41])(symbolTable);\n            if (pointerPtr17 == (ulong **)0x0) goto LAB_00102ed2;\n            pointerPtr12 = pointerPtr18 + (long)pointerPtr14 * 2;\n            pointerPtr14 = pointerPtr18;\n            goto LAB_00104ee9;\n          }\n          pointerPtr8 = (ulong **)(ulong)localVar4c;\n          unaffR15 = (ulong **)(*(code *)pointerVar11[0x41])(symbolTable);\n          if (unaffR15 != (ulong **)0x0) {\n            unaffRBP = (ulong **)((long)pointerPtr14 * (long)pointerPtr8 + (long)unaffRBX);\n            if (unaffRBX < unaffRBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          bfd_fatal(*symbolTable);\n          unaffR15 = pointerPtr18;\nLAB_00102d06:\n          pointerPtr9 = pointerPtr8;\n          if (dynamic != 0) {\n            unaffRBX = localArray40[0];\n            pointerPtr14 = (ulong **)0x0;\n            pointerPtr17 = (ulong **)0x0;\n            break;\n          }\n          longVar10 = (*(code *)symbolTable[1][0x6a])(symbolTable);\n          pointerPtr14 = localArray40[0];\n          pointerPtr17 = pointerPtr8;\n          pointerPtr12 = unaffR15;\n          if (longVar10 < 1) {\n            pointerPtr8 = (ulong **)0x0;\n            unaffRBX = (ulong **)0x0;\n            break;\n          }\n        }\n        pluginData = &localVar48;\n        symbolData = unaffRBX;\n        longVar10 = (*(code *)symbolTable[1][0x6c])(symbolTable,pointerPtr17,pointerPtr14,pointerPtr8);\n        pointerPtr8 = pointerPtr9;\n        if (0 < longVar10) {\n          pointerPtr8 = (ulong **)((long)pointerPtr9 + longVar10);\n          localArray40[0] = (ulong **)xrealloc(localArray40[0]);\n          longVar7 = 0;\n          do {\n            localArray40[0][(long)pointerPtr9 + longVar7] = localVar48 + longVar7 * 6;\n            longVar7 = longVar7 + 1;\n          } while (longVar10 != longVar7);\n          localArray40[0][(long)pointerPtr9 + longVar10] = (ulong *)0x0;\n        }\n        if ((dynamic == 0) && (unaffRBX != (ulong **)0x0)) {\n          free(unaffRBX);\n        }\nLAB_00102cc2:\n        byteVar1 = *(byte *)((long)symbolTable + 0x4a);\n        pointerPtr13 = symbolTable;\n      } while( true );\n    }\n  }\n  if (quiet == 0) {\n    pointerVar11 = *symbolTable;\n    undefinedVar6 = dcgettext(0,\"%s: no symbols\",5);\n    non_fatal(undefinedVar6,pointerVar11);\n  }\n  return;\ncode_r0x00104b01:\n  symbolTable = (ulong **)((long)symbolTable + (long)unaffR14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaffRBX = (ulong **)((long)pointerPtr12 + (long)symbolData);\n  if (unaffR14 <= unaffRBX) {\n    pointerPtr8 = (ulong **)pointerPtr14[4];\n    if ((*(uint *)(pointerPtr14 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    pointerPtr9 = (ulong **)0x0;\nLAB_00104e95:\n    pointerPtr18 = symbolTable;\n    pointerPtr15 = pointerPtr12;\n    if (*(int *)(pointerPtr13[1] + 1) == 5) {\n      pointerVar11 = pointerPtr14[7];\n      goto LAB_00104ea7;\n    }\n    pointerVar11 = pointerPtr14[2];\n    if ((*(byte *)((long)pointerPtr8 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaffR14 <= unaffRBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  pointerPtr8 = symbolTable;\n  pointerPtr15 = symbolData;\n  pointerPtr16 = pluginData;\n  pointerPtr9 = (ulong **)(*(code *)pointerPtr13[1][0x4e])();\n  pointerPtr18 = pointerPtr12;\n  if (pointerPtr9 == (ulong **)0x0) goto LAB_00102edb;\n  pointerPtr8 = (ulong **)pointerPtr14[4];\n  if ((*(uint *)(pointerPtr14 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (pointerPtr12 <= pointerPtr14) {\nLAB_00104c75:\n    if (localVar48 == (ulong *)0x0) {\n      free(localArray40[0]);\n      free(pointerPtr18);\n      return;\n    }\n    free(localVar48);\n    free(localArray40[0]);\n    free(pointerPtr18);\n    return;\n  }\n  pointerPtr8 = pointerPtr17;\n  longVar10 = (*(code *)symbolTable[1][0x4e])(symbolTable,unaffR14,*pointerPtr14);\n  if (longVar10 == 0) goto LAB_00102ec9;\n  pointerPtr8 = pointerPtr14 + 1;\n  pointerPtr14 = pointerPtr14 + 2;\n  print_symbol(symbolTable,longVar10,*pointerPtr8,param2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  bfd_fatal(*symbolTable,0);\nLAB_00102ed2:\n  pointerPtr13 = (ulong **)*symbolTable;\n  bfd_fatal();\n  unaffRBX = pointerPtr12;\n  pointerPtr15 = symbolData;\n  pointerPtr16 = pluginData;\nLAB_00102edb:\n  pluginData = pointerPtr16;\n  symbolData = pointerPtr15;\n  pointerPtr13 = (ulong **)*pointerPtr13;\n  pointerPtr9 = (ulong **)bfd_fatal();\n  pointerPtr12 = pointerPtr18;\nLAB_00102ee3:\n  pointerVar11 = pointerPtr14[2];\nLAB_00102ee7:\n  if (pointerPtr8 != (ulong **)pointerPtr9[4]) goto LAB_00102dc4;\n  pointerVar11 = (ulong *)((long)pointerPtr9[2] - (long)pointerVar11);\n  pointerPtr18 = symbolTable;\n  pointerPtr15 = pointerPtr12;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (pointerPtr9 = unaffR15, longVar10 = (*(code *)symbolTable[1][0x4e])(symbolTable,unaffR14,unaffRBX),\n        longVar10 != 0) {\n    unaffRBX = (ulong **)((long)unaffRBX + (long)pointerPtr8);\n    print_symbol(symbolTable,longVar10,0,param2);\n    if (unaffRBP <= unaffRBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  bfd_fatal(*symbolTable);\n  pointerPtr12 = unaffRBX;\nLAB_00102ea7:\n  pointerPtr13 = unaffRBP;\n  bfd_fatal(*symbolTable);\n  pointerPtr17 = unaffR15;\nLAB_00102eb0:\n  bfd_fatal(*pointerPtr13);\n  pointerPtr13 = symbolTable;\nLAB_00102eb9:\n  bfd_fatal(*pointerPtr13);\n  symbolTable = pluginData;\nLAB_00102ec2:\n  pointerPtr14 = (ulong **)0x0;\n  symbolData = pointerPtr8;\n  pointerPtr18 = pointerPtr9;\n  stackPtr78 = pointerPtr17;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "non_fatal",
                "bfd_fatal",
                "bfd_get_error",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "process_symbols_001048e0"
        },
        "FUN_0010c248": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c248",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_0010c248"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "get_relocs"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_001065a0": {
            "renaming": {
                "FUN_001065a0": "FUNC_001065a0"
            },
            "code": "\nvoid FUNC_001065a0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_001065a0"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "get_relocs",
                "FUN_00104d5b",
                "main",
                "print_symbol.cold",
                "print_symbol",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_0010c008": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c008",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010c008"
        },
        "FUN_0010c240": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c240",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010c240"
        },
        "FUN_0010c088": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c088",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010c088"
        },
        "FUN_0010c0a8": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0a8",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010c0a8"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "set_print_width",
                "size_forward1"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "list_matching_formats",
                "usage.cold",
                "main",
                "bfd_nonfatal",
                "usage",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_file_name_001062d0",
                "param_1": "file_name",
                "filename_per_file": "flag_per_file",
                "filename_per_symbol": "flag_per_symbol"
            },
            "code": "\nvoid print_file_name_001062d0(undefined8 file_name)\n\n{\n  if ((flag_per_file != 0) && (flag_per_symbol == 0)) {\n    printf(\"\\n%s:\\n\",file_name);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_file_name_001062d0"
        },
        "FUN_0010c0c0": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0c0",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010c0c0"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "process_sections_00103238",
                "__ptr": "ptr",
                "__s1": "str",
                "plVar1": "ptrVar1",
                "lVar2": "var2",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "unaff_RBX": "RBX",
                "pvVar5": "ptrVar5",
                "uVar6": "index",
                "unaff_R13": "R13",
                "lVar7": "var7",
                "param_10": "param10",
                "param_12": "param12",
                "relocs_3": "relocs",
                "lineno_cache_rel_bfd": "linenoCacheRelBfd",
                "seccount_2": "secCount",
                "secs_1": "secs",
                "relcount_0": "relCount",
                "_stdout": "stdout"
            },
            "code": "\n\n\nvoid processSections_00103238(void)\n\n{\n  long *ptrVar1;\n  void *ptr;\n  char *str;\n  long var2;\n  char charVar;\n  int intVar;\n  long RBX;\n  void *ptrVar5;\n  uint index;\n  long R13;\n  long var7;\n  ulong param10;\n  void *param12;\n  \n  ptrVar5 = relocs;\n  if (linenoCacheRelBfd == R13) {\n    if (relocs != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    index = 0;\n    if (relocs != (void *)0x0) {\n      for (; index < secCount; index = index + 1) {\n        ptr = *(void **)((long)ptrVar5 + (ulong)index * 8);\n        if (ptr != (void *)0x0) {\n          free(ptr);\n        }\n      }\n      free(secs);\n      free(ptrVar5);\n      free(relCount);\n      secs = (void *)0x0;\n      relocs = (void *)0x0;\n      relCount = (void *)0x0;\n    }\n  }\n  secCount = *(uint *)(R13 + 0xa0);\n  secs = (void *)xmalloc((ulong)secCount * 8);\n  relocs = (void *)xmalloc((ulong)secCount << 3);\n  relCount = (void *)xmalloc((ulong)secCount << 3);\n  param12 = secs;\n  bfd_map_over_sections();\n  linenoCacheRelBfd = R13;\nLAB_00103296:\n  str = *(char **)(RBX + 8);\n  index = 0;\n  do {\n    if (secCount <= index) {\n      putc(10,stdout);\n      return;\n    }\n    ptrVar5 = relCount;\n    for (var7 = 0; ptrVar1 = (long *)((long)ptrVar5 + (ulong)index * 8),\n        *ptrVar1 != var7 && var7 <= *ptrVar1; var7 = var7 + 1) {\n      ptrVar1 = **(long ***)(*(long *)((long)relocs + (ulong)index * 8) + var7 * 8);\n      if ((((ptrVar1 != (long *)0x0) &&\n           (var2 = *ptrVar1, *(long *)(var2 + 0x20) == *(long *)(RBX + 0x20))) &&\n          (*(long *)(var2 + 0x10) == *(long *)(RBX + 0x10))) &&\n         (((intVar = strcmp(str,*(char **)(var2 + 8)), intVar == 0 &&\n           (charVar = (**(code **)(*(long *)(R13 + 8) + 0x240))(), ptrVar5 = relCount,\n           charVar != '\\0')) && (param12 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",param12,param10 >> 0x20);\n        index = secCount;\n        break;\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "get_relocs",
                "xmalloc",
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "process_sections_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "tag",
                "param_2": "message"
            },
            "code": "\nvoid printMessage_001036e0(undefined8 *tag,undefined8 *message)\n\n{\n  if (tag != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*tag);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "print_symbol_filename_posix"
            ],
            "imported": false,
            "current_name": "print_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_string_and_free_memory_001047d0",
                "unaff_RBX": "result",
                "unaff_R12": "flagPtr",
                "unaff_R13": "concatenatedString",
                "unaff_R14": "formatString",
                "unaff_R15": "pointer"
            },
            "code": "\nvoid printStringAndFreeMemory_001047d0(void)\n\n{\n  char *pcVar1;\n  void *result;\n  undefined *flagPtr;\n  void *concatenatedString;\n  char *formatString;\n  long pointer;\n  \n  if (((with_symbol_versions != 0) &&\n      (pcVar1 = (char *)(**(code **)(*(long *)(pointer + 8) + 0x220))(), pcVar1 != (char *)0x0))\n     && (*pcVar1 != '\\0')) {\n    result = (void *)reconcat();\n    concatenatedString = result;\n  }\n  printf(formatString,concatenatedString);\n  if (flagPtr != (undefined *)0x0) {\n    *flagPtr = 0x40;\n  }\n  free(result);\n  return;\n}\n\n",
            "called": [
                "free",
                "printf",
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00102739",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "print_string_and_free_memory_001047d0"
        },
        "FUN_0010c138": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c138",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010c138"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "display_file_not_ordinary_warning_0010249f",
                "uVar1": "warningMessage",
                "dcgettext": "getWarningMessage",
                "non_fatal": "displayNonFatalError"
            },
            "code": "\nundefined8 displayFileNotOrdinaryWarning_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = getWarningMessage(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  displayNonFatalError(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "display_file_not_ordinary_warning_0010249f"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "param_1": "file_path",
                "cVar1": "char_temp",
                "iVar2": "status",
                "uVar3": "return_value",
                "piVar4": "errno_ptr",
                "uVar5": "warning_message",
                "puVar6": "file_ptr",
                "puVar9": "archived_file_ptr",
                "puVar10": "prev_archived_file_ptr",
                "lVar7": "file_offset",
                "pcVar8": "error_message",
                "local_c8": "file_stats",
                "line_numbers": "include_line_numbers",
                "target": "target_value",
                "format": "format_function",
                "print_armap": "print_archive_map",
                "lineno_cache_bfd": "cache_bfd_line_numbers",
                "lineno_cache_rel_bfd": "cache_rel_bfd_line_numbers"
            },
            "code": "\nundefined4 check_file_001043d0(char *file_path)\n\n{\n  char char_temp;\n  int status;\n  undefined4 return_value;\n  int *errno_ptr;\n  undefined8 warning_message;\n  undefined8 *file_ptr;\n  long file_offset;\n  char *error_message;\n  undefined8 *archived_file_ptr;\n  undefined8 *prev_archived_file_ptr;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stats);\n    if (status < 0) {\nLAB_00102522:\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        warning_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(warning_message,file_path);\n      }\n      else {\n        error_message = strerror(*errno_ptr);\n        warning_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(warning_message,file_path,error_message);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      warning_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(warning_message,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (file_stats.st_size < 0) {\n        warning_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        non_fatal(warning_message,file_path);\n      }\n      else if (file_stats.st_size != 0) {\n        if (target_value == 0) {\n          file_ptr = (undefined8 *)bfd_openr(file_path,\"plugin\");\n        }\n        else {\n          file_ptr = (undefined8 *)bfd_openr(file_path);\n        }\n        if (file_ptr != (undefined8 *)0x0) {\n          if (include_line_numbers != 0) {\n            *(uint *)((long)file_ptr + 0x44) = *(uint *)((long)file_ptr + 0x44) | 0x8000;\n          }\n          char_temp = bfd_check_format_function(file_ptr,2);\n          if (char_temp == '\\0') {\n            return_value = bfd_check_format_function_matches(file_ptr,1,&file_stats);\n            if ((char)return_value == '\\0') goto LAB_001025ac;\n            set_print_width(file_ptr);\n            (**(code **)format_function)(file_path);\n            display_rel_file(file_ptr,0);\n          }\n          else {\n            (**(code **)(format_function + 8))(*file_ptr);\n            if ((print_archive_map != 0) &&\n               (file_offset = bfd_get_next_mapent(file_ptr,0xffffffffffffffff,&file_stats), file_offset != -1)) {\n              error_message = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(error_message);\n              do {\n                archived_file_ptr = (undefined8 *)(**(code **)(file_ptr[1] + 0x1e0))(file_ptr,file_offset);\n                if (archived_file_ptr == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_stats.st_dev != 0) {\n                  print_symname(&DAT_0010712d,0,*(long *)file_stats.st_dev,file_ptr);\n                  printf(\" in %s\\n\",*archived_file_ptr);\n                }\n                file_offset = bfd_get_next_mapent(file_ptr,file_offset,&file_stats);\n              } while (file_offset != -1);\n            }\n            archived_file_ptr = (undefined8 *)0x0;\n            do {\n              do {\n                prev_archived_file_ptr = archived_file_ptr;\n                archived_file_ptr = (undefined8 *)bfd_openr_next_archived_file(file_ptr,prev_archived_file_ptr);\n                if (archived_file_ptr == (undefined8 *)0x0) {\n                  status = bfd_get_error();\n                  if (status != 9) {\n                    bfd_fatal(*file_ptr);\nLAB_00102516:\n                    bfd_fatal(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (prev_archived_file_ptr != (undefined8 *)0x0) {\n                    bfd_close(prev_archived_file_ptr);\n                    cache_bfd_line_numbers = 0;\n                    cache_rel_bfd_line_numbers = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                char_temp = bfd_check_format_function_matches(archived_file_ptr,1,&file_stats);\n                if (char_temp == '\\0') {\n                  bfd_nonfatal(*archived_file_ptr);\n                  status = bfd_get_error();\n                  if (status == 0xd) {\n                    list_matching_format_functions(file_stats.st_dev);\n                  }\n                }\n                else {\n                  set_print_width(archived_file_ptr);\n                  (**(code **)(format_function + 0x10))(*file_ptr,*archived_file_ptr);\n                  display_rel_file(archived_file_ptr,file_ptr);\n                }\n              } while (prev_archived_file_ptr == (undefined8 *)0x0);\n              bfd_close(prev_archived_file_ptr);\n              cache_bfd_line_numbers = 0;\n              cache_rel_bfd_line_numbers = 0;\n            } while (prev_archived_file_ptr != archived_file_ptr);\n          }\nLAB_001044b4:\n          return_value = 1;\n          while (char_temp = bfd_close(file_ptr), char_temp == '\\0') {\n            bfd_fatal(file_path);\nLAB_001025ac:\n            bfd_nonfatal(file_path);\n            status = bfd_get_error();\n            if (status == 0xd) {\n              list_matching_format_functions(file_stats.st_dev);\n            }\n          }\n          cache_rel_bfd_line_numbers = 0;\n          cache_bfd_line_numbers = 0;\n          return return_value;\n        }\n        bfd_nonfatal(file_path);\n      }\n    }\n    else {\n      warning_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(warning_message,file_path);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "print_archive_filename_bsd",
                "strerror",
                "non_fatal",
                "set_print_width",
                "print_archive_member_bsd",
                "display_file.cold",
                "list_matching_formats",
                "printf",
                "bfd_nonfatal",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "stat",
                "print_symname",
                "bfd_openr",
                "print_object_filename_bsd",
                "bfd_check_format_matches",
                "bfd_get_next_mapent",
                "bfd_get_error",
                "bfd_fatal",
                "display_rel_file",
                "bfd_close",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_file_001043d0"
        },
        "FUN_001055e0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_001055e0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_0010c010": {
            "renaming": {},
            "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c010",
            "calling": [
                "putchar"
            ],
            "imported": false,
            "current_name": "FUN_0010c010"
        },
        "FUN_0010c098": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c098",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010c098"
        },
        "FUN_0010c130": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c130",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010c130"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "create_print_format_string_001025f5",
                "param_1": "arg1",
                "param_2": "arg2",
                "print_format_string": "concatenated_string"
            },
            "code": "\nvoid create_print_format_string_001025f5(undefined8 arg1,undefined8 arg2)\n\n{\n  concatenated_string = concat(&DAT_001071d7,arg2,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "set_print_width"
            ],
            "imported": false,
            "current_name": "create_print_format_string_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_filename_00102670",
                "param_1": "filename",
                "filename_per_file": "check_per_file"
            },
            "code": "\nvoid print_filename_00102670(undefined8 filename)\n\n{\n  if (check_per_file != 0) {\n    printf(\"\\n%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_filename_00102670"
        },
        "FUN_0010c0b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0b8",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010c0b8"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_value.constprop.0.cold",
                "print_archive_member_sysv",
                "print_symbol_info_bsd",
                "display_file.cold",
                "list_matching_formats",
                "usage.cold",
                "FUN_00104d5b",
                "print_object_filename_sysv",
                "main",
                "set_output_format",
                "bfd_nonfatal.cold",
                "print_symbol_info_sysv",
                "display_rel_file",
                "display_file",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "FUN_0010c0d0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0d0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010c0d0"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_bfd_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "string2_ptr",
                "__s1": "string1_ptr",
                "uVar1": "comparison_result",
                "lVar2": "string1_length",
                "lVar3": "string2_length"
            },
            "code": "\nuint compare_bfd_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *string2_ptr;\n  char *string1_ptr;\n  uint comparison_result;\n  long string1_length;\n  long string2_length;\n  \n  string1_length = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,string1,sort_x);\n  string2_length = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,string2,sort_y);\n  if ((string1_length == 0) || (string2_length == 0)) {\n    bfd_fatal(*sort_bfd);\n  }\n  else {\n    string2_ptr = *(char **)(string2_length + 8);\n    string1_ptr = *(char **)(string1_length + 8);\n    if (string2_ptr == (char *)0x0) {\n      return (uint)(string1_ptr != (char *)0x0);\n    }\n    if (string1_ptr != (char *)0x0) {\n      if (*string2_ptr == '\\0') {\n        return (uint)(*string1_ptr != '\\0');\n      }\n      if (*string1_ptr == '\\0') {\n        return 0xffffffff;\n      }\n      comparison_result = strcoll(string1_ptr,string2_ptr);\n      return comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "non_numeric_forward.cold",
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "numeric_forward",
                "size_forward1",
                "non_numeric_reverse"
            ],
            "imported": false,
            "current_name": "compare_bfd_strings_00104fa0"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010c028": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c028",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_0010c028"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_formatted_message_001064a0",
                "param_1": "symbol",
                "param_2": "message",
                "filename_per_symbol": "shouldPrintFileName",
                "printf": "print"
            },
            "code": "\nvoid printFormattedMessage_001064a0(undefined8 *symbol,undefined8 *message)\n\n{\n  if (shouldPrintFileName == 0) {\n    return;\n  }\n  if (symbol != (undefined8 *)0x0) {\n    print(\"%s[%s]: \",*symbol);\n    return;\n  }\n  print(\"%s: \",*message);\n  return;\n}\n\n",
            "called": [
                "print_symbol_filename_posix.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_formatted_message_001064a0"
        },
        "FUN_0010c148": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c148",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c148"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "input",
                "cVar1": "isUndefinedSymclass",
                "uVar2": "symClass",
                "iVar3": "result",
                "plVar4": "symInfoPtr",
                "piVar5": "errorNumPtr",
                "uVar6": "errorString",
                "lVar7": "infoPtr",
                "uVar8": "printWidth",
                "bVar9": "byteVal",
                "pcVar11": "varType",
                "in_R8": "var1",
                "in_R9": "var2"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 input)\n\n{\n  char isUndefinedSymclass;\n  ushort symClass;\n  int result;\n  long *symInfoPtr;\n  int *errorNumPtr;\n  undefined8 errorString;\n  long infoPtr;\n  ulong printWidth;\n  byte byteVal;\n  ulong uVar10;\n  char *varType;\n  undefined8 var1;\n  undefined8 var2;\n  \n  printWidth = (ulong)print_width;\n  if ((print_width - 0x20 & 0xffffffdf) == 0) {\n    printf(print_format_string,input);\n    return;\n  }\n  symInfoPtr = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  uVar10 = printWidth;\n  fatal(symInfoPtr,printWidth);\n  print_symname(\"%-20s|\",symInfoPtr,0,uVar10,var1,var2,printWidth);\n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*symInfoPtr + 8));\n  if (isUndefinedSymclass == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symInfoPtr);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symInfoPtr + 8));\n  if (*(char *)(*symInfoPtr + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symInfoPtr + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symInfoPtr + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symInfoPtr[2] == 0) {\n    if (symInfoPtr[3] != 0) {\n      infoPtr = *(long *)(symInfoPtr[3] + 0x30);\n      isUndefinedSymclass = *(char *)(infoPtr + 0x28);\n      if (isUndefinedSymclass == 'g') goto LAB_00103983;\n      if (isUndefinedSymclass == 'h') {\n        varType = \"Line\";\n      }\n      else if (isUndefinedSymclass == 'd') {\n        varType = \"Block\";\n      }\n      else if (*(ushort *)(infoPtr + 0x26) == 0) {\n        varType = \"None\";\n      }\n      else {\n        symClass = *(ushort *)(infoPtr + 0x26) >> 4 & 3;\n        if (symClass == 2) {\n          varType = \"Function\";\n        }\n        else if (symClass == 3) {\n          varType = \"Array\";\n        }\n        else {\n          if (symClass != 1) {\n            free(bufp_6);\n            symClass = *(ushort *)(infoPtr + 0x26);\n            byteVal = *(byte *)(infoPtr + 0x28);\n            varType = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            result = asprintf(&bufp_6,varType,(ulong)byteVal,(ulong)symClass);\n            varType = bufp_6;\n            goto joined_r0x00103964;\n          }\n          varType = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    byteVal = *(byte *)(symInfoPtr[2] + 0x48) & 0xf;\n    switch(byteVal) {\n    case 0:\n      varType = \"NOTYPE\";\n      break;\n    case 1:\n      varType = \"OBJECT\";\n      break;\n    case 2:\n      varType = \"FUNC\";\n      break;\n    case 3:\n      varType = \"SECTION\";\n      break;\n    case 4:\n      varType = \"FILE\";\n      break;\n    case 5:\n      varType = \"COMMON\";\n      break;\n    case 6:\n      varType = \"TLS\";\n      break;\n    default:\n      free(bufp_7);\n      varType = \"<processor specific>: %d\";\n      if ((2 < byteVal - 0xd) && (varType = \"<OS specific>: %d\", 2 < byteVal - 10)) {\n        varType = \"<unknown>: %d\";\n      }\n      varType = (char *)dcgettext(0,varType,5);\n      result = asprintf(&bufp_7,varType,(ulong)byteVal);\n      varType = bufp_7;\njoined_r0x00103964:\n      if (result < 0) {\n        errorNumPtr = __errno_location();\n        errorString = xstrerror(*errorNumPtr);\n        fatal(&DAT_0010712d,errorString);\nLAB_00103983:\n        varType = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",varType);\n  }\n  if (symInfoPtr[2] == 0) {\n    if (symInfoPtr[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symInfoPtr[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  infoPtr = symInfoPtr[2];\n  if ((infoPtr != 0) || (infoPtr = symInfoPtr[3], infoPtr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(infoPtr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "print_value.constprop.0.cold",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_0010651a",
                "print_symbol_info_bsd",
                "print_symbol_info_bsd.cold",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_file_names_001053b0",
                "param_1": "file1",
                "param_2": "file2",
                "param_3": "param3",
                "param_4": "param4",
                "filename_per_symbol": "isFileSymbolSet",
                "printf": "print"
            },
            "code": "\nvoid printFileNames_001053b0(undefined8 *file1,undefined8 *file2,undefined8 param3,undefined8 param4)\n\n{\n  if (isFileSymbolSet == 0) {\n    return;\n  }\n  if (file1 != (undefined8 *)0x0) {\n    print(\"%s:\",*file1);\n  }\n  print(\"%s:\",*file2,param4);\n  return;\n}\n\n",
            "called": [
                "print_symbol_filename_bsd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_file_names_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "display_files_001055f0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePtr1",
                "bVar2": "byteVar1",
                "bVar3": "boolVar1",
                "bVar4": "boolVar2",
                "bVar5": "boolVar3",
                "cVar6": "charVar1",
                "bVar7": "byteVar2",
                "cVar8": "charVar2",
                "cVar9": "charVar3",
                "iVar10": "intVar1",
                "uVar11": "uintVar1",
                "iVar12": "intVar2",
                "__stream": "fileStream",
                "__s": "bytePtr2",
                "piVar15": "intPtr1",
                "sVar16": "sizeVar1",
                "__ptr": "bytePtr3",
                "__src": "longPtr1",
                "lVar17": "longVar1",
                "plVar18": "paramPtr",
                "plVar19": "ptrVar1",
                "uVar20": "undefined8Var1",
                "uVar21": "undefined8Var2",
                "pcVar22": "strVar1",
                "pbVar23": "bytePtr4",
                "unaff_RBP": "returnPtr",
                "lVar24": "longVar2",
                "pbVar25": "bytePtr5",
                "pcVar26": "strVar2",
                "unaff_R12": "intPtr2",
                "piVar27": "intPtr3",
                "local_110": "localVar1",
                "local_10c": "localVar2",
                "local_108": "localVar3",
                "local_c8": "statVar"
            },
            "code": "\n\n\nundefined1 * display_files_001055f0(int argc,long *argv)\n\n{\n  byte *bytePtr1;\n  byte byteVar1;\n  bool boolVar1;\n  bool boolVar2;\n  bool boolVar3;\n  char charVar1;\n  byte byteVar2;\n  char charVar2;\n  char charVar3;\n  int intVar1;\n  uint uintVar1;\n  int intVar2;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  FILE *fileStream;\n  byte *bytePtr2;\n  int *intPtr1;\n  size_t sizeVar1;\n  byte *bytePtr3;\n  long *longPtr1;\n  long longVar1;\n  long *paramPtr;\n  long *ptrVar1;\n  undefined8 undefined8Var1;\n  undefined8 undefined8Var2;\n  char *strVar1;\n  byte *bytePtr4;\n  undefined1 *returnPtr;\n  long longVar2;\n  byte *bytePtr5;\n  char *strVar2;\n  int *intPtr2;\n  int *intPtr3;\n  int localVar1;\n  int localVar2;\n  size_t localVar3;\n  stat statVar;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  strVar1 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  paramPtr = argv;\n  if (1 < argc) {\n    localVar2 = 2000;\n    intPtr2 = (int *)0x1;\n    localVar1 = 0;\n    do {\n      intVar2 = (int)intPtr2;\n      returnPtr = (undefined1 *)(long)intVar2;\n      intPtr3 = (int *)((long)returnPtr * 8);\n      if (*(char *)paramPtr[(long)returnPtr] != '@') goto LAB_00105a70;\n      localVar2 = localVar2 + -1;\n      if (localVar2 == 0) {\n        longVar2 = *paramPtr;\n        strVar2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      strVar1 = (char *)paramPtr[(long)returnPtr] + 1;\n      intVar1 = stat(strVar1,&statVar);\n      if (intVar1 < 0) {\nLAB_00105a70:\n        if (argc <= intVar2 + 1) break;\nLAB_00105a7a:\n        uintVar1 = intVar2 + 1;\n        localVar1 = intVar2;\n      }\n      else {\n        if ((statVar.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        fileStream = fopen(strVar1,\"r\");\n        if (fileStream == (FILE *)0x0) goto LAB_00105a70;\n        intVar1 = fseek(fileStream,0,2);\n        if (((intVar1 == -1) ||\n            (strVar1 = (char *)ftell(fileStream), (int *)strVar1 == (int *)0xffffffffffffffff)) ||\n           (intVar1 = fseek(fileStream,0,0), intVar1 == -1)) {\nLAB_00105ad0:\n          fclose(fileStream);\n          if (intVar2 + 1 < argc) goto LAB_00105a7a;\n          break;\n        }\n        bytePtr2 = (byte *)xmalloc((char *)((long)strVar1 + 1));\n        intPtr1 = (int *)fread(bytePtr2,1,(size_t)strVar1,fileStream);\n        if (((int *)strVar1 != intPtr1) && (intVar1 = ferror(fileStream), intVar1 != 0)) {\n          free(bytePtr2);\n          goto LAB_00105ad0;\n        }\n        bytePtr2[(long)intPtr1] = 0;\n        byteVar2 = *bytePtr2;\n        bytePtr4 = bytePtr2;\n        if (byteVar2 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) goto LAB_001057c0;\n          sizeVar1 = strlen((char *)bytePtr2);\n          bytePtr3 = (byte *)xmalloc(sizeVar1 + 1);\n          intVar1 = 0;\n          boolVar3 = false;\n          boolVar1 = false;\n          longVar2 = 0;\n          longPtr1 = (long *)0x0;\n          boolVar2 = false;\n          bytePtr4 = bytePtr2;\n          do {\n            while (((&_sch_istable)[(ulong)*bytePtr4 * 2] & 0x40) != 0) {\n              bytePtr4 = bytePtr4 + 1;\n            }\n            if ((intVar1 == 0) || (ptrVar1 = longPtr1 + longVar2, intVar1 + -1 <= (int)longVar2)) {\n              if (longPtr1 == (long *)0x0) {\n                intVar1 = 8;\n                longPtr1 = (long *)xmalloc(0x40);\n                ptrVar1 = longPtr1 + longVar2;\n                *ptrVar1 = 0;\n              }\n              else {\n                intVar1 = intVar1 * 2;\n                longPtr1 = (long *)xrealloc(longPtr1,(long)intVar1 << 3);\n                ptrVar1 = longPtr1 + longVar2;\n                *ptrVar1 = 0;\n              }\n            }\n            byteVar2 = *bytePtr4;\n            bytePtr5 = bytePtr3;\n            while (byteVar2 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar3 | boolVar2 | boolVar1))) {\n                  boolVar2 = false;\n                  boolVar3 = false;\n                  boolVar1 = false;\n                  goto LAB_001058e0;\n                }\n                if (!boolVar2) break;\n                bytePtr4 = bytePtr4 + 1;\n                *bytePtr5 = byteVar2;\n                bytePtr5 = bytePtr5 + 1;\n                boolVar2 = false;\n                byteVar2 = *bytePtr4;\n                if (byteVar2 == 0) goto LAB_001058e0;\n              }\n              if (byteVar2 == 0x5c) {\n                boolVar2 = true;\n              }\n              else if (boolVar1) {\n                if (byteVar2 == 0x27) {\n                  boolVar1 = false;\n                }\n                else {\nLAB_00105a55:\n                  *bytePtr5 = byteVar2;\n                  bytePtr5 = bytePtr5 + 1;\n                }\n              }\n              else if (boolVar3) {\n                if (byteVar2 != 0x22) goto LAB_00105a55;\n                boolVar3 = false;\n              }\n              else if (byteVar2 == 0x27) {\n                boolVar1 = true;\n              }\n              else {\n                if (byteVar2 != 0x22) goto LAB_00105a55;\n                boolVar3 = true;\n              }\n              bytePtr1 = bytePtr4 + 1;\n              bytePtr4 = bytePtr4 + 1;\n              byteVar2 = *bytePtr1;\n            }\nLAB_001058e0:\n            *bytePtr5 = 0;\n            longVar1 = xstrdup(bytePtr3);\n            *ptrVar1 = longVar1;\n            longPtr1[longVar2 + 1] = 0;\n            byteVar2 = *bytePtr4;\n            byteVar1 = (&_sch_istable)[(ulong)byteVar2 * 2];\n            while ((byteVar1 & 0x40) != 0) {\n              byteVar2 = bytePtr4[1];\n              bytePtr4 = bytePtr4 + 1;\n              byteVar1 = (&_sch_istable)[(ulong)byteVar2 * 2];\n            }\n            longVar2 = longVar2 + 1;\n          } while (byteVar2 != 0);\n          free(bytePtr3);\n          ptrVar1 = paramPtr;\n          if (argv == paramPtr) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        longPtr1 = (long *)xmalloc(8);\n        *longPtr1 = 0;\n        if (argv == paramPtr) {\nLAB_00105c79:\n          if (*paramPtr == 0) {\n            intVar1 = 0;\n          }\n          else {\n            longVar2 = 1;\n            do {\n              intVar1 = (int)longVar2;\n              ptrVar1 = paramPtr + longVar2;\n              longVar2 = longVar2 + 1;\n            } while (*ptrVar1 != 0);\n          }\n          longVar1 = 0;\n          ptrVar1 = (long *)xmalloc((long)(intVar1 + 1) << 3);\n          longVar2 = *paramPtr;\n          while (longVar2 != 0) {\n            undefined8Var1 = xstrdup();\n            *(undefined8 *)((long)ptrVar1 + longVar1) = undefined8Var1;\n            longVar1 = longVar1 + 8;\n            longVar2 = *(long *)((long)paramPtr + longVar1);\n          }\n          *(undefined8 *)((long)ptrVar1 + longVar1) = 0;\nLAB_0010597d:\n          paramPtr = ptrVar1;\n          if (*longPtr1 == 0) goto LAB_00105d50;\n          strVar1 = (char *)0x0;\n          do {\n            strVar1 = (char *)((long)strVar1 + 1);\n          } while (longPtr1[(long)strVar1] != 0);\n          localVar3 = (long)strVar1 * 8;\n        }\n        else {\nLAB_00105d50:\n          strVar1 = (char *)0x0;\n          localVar3 = 0;\n        }\n        free((void *)paramPtr[(long)returnPtr]);\n        paramPtr = (long *)xrealloc(paramPtr,(long)((long)strVar1 + (long)argc + 1) * 8);\n        intVar1 = argc + -1 + (int)strVar1;\n        memmove(paramPtr + (long)(returnPtr + (long)strVar1),paramPtr + 1 + (long)returnPtr,\n                (long)(argc - intVar2) << 3);\n        memcpy(paramPtr + (long)returnPtr,longPtr1,localVar3);\n        free(longPtr1);\n        free(bytePtr2);\n        fclose(fileStream);\n        uintVar1 = localVar1 + 1;\n        returnPtr = returnPtr + (long)strVar1;\n        intPtr2 = intPtr3;\n        argc = intVar1;\n        if (intVar1 <= (int)uintVar1) break;\n      }\n      intPtr2 = (int *)(ulong)uintVar1;\n    } while( true );\n  }\n  intVar2 = bfd_init();\n  strVar2 = \"fatal error: libbfd ABI mismatch\";\n  if (intVar2 != 0x118) goto LAB_00106085;\n  returnPtr = long_options;\n  charVar2 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  strVar1 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  intPtr2 = (int *)\"x86_64-pc-linux-gnu\";\n  charVar3 = other_format._3_1_;\n  charVar1 = desc_format._3_1_;\n  uVar14 = print_radix;\n  if (charVar2 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    print_radix = uVar14;\n    desc_format._3_1_ = charVar1;\n    other_format._3_1_ = charVar3;\n    uVar13 = getopt_long(argc,paramPtr,strVar1);\n    intPtr3 = _optarg;\n    intPtr1 = (int *)strVar1;\n    charVar3 = other_format._3_1_;\n    charVar1 = desc_format._3_1_;\n    uVar14 = print_radix;\n    switch(uVar13) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      usage(_stderr,1);\n      intPtr3 = intPtr2;\nLAB_001061d5:\n      intVar2 = strcmp((char *)intPtr3,\"l\");\n      if (intVar2 == 0) goto LAB_001061a3;\n      intVar2 = strcmp((char *)intPtr3,\"escape\");\n      intPtr2 = intPtr3;\n      if ((intVar2 == 0) || (intVar2 = strcmp((char *)intPtr3,\"e\"), intVar2 == 0)) {\n        unicode_display = 2;\n        charVar3 = other_format._3_1_;\n        charVar1 = desc_format._3_1_;\n        uVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar2 = strcmp((char *)intPtr3,\"invalid\");\n      if ((intVar2 == 0) || (intVar2 = strcmp((char *)intPtr3,\"i\"), intVar2 == 0)) {\n        unicode_display = 5;\n        charVar3 = other_format._3_1_;\n        charVar1 = desc_format._3_1_;\n        uVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar2 = strcmp((char *)intPtr3,\"hex\");\n      if ((intVar2 == 0) || (intVar2 = strcmp((char *)intPtr3,\"x\"), intVar2 == 0)) {\n        unicode_display = 3;\n        charVar3 = other_format._3_1_;\n        charVar1 = desc_format._3_1_;\n        uVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar2 = strcmp((char *)intPtr3,\"highlight\");\n      if ((intVar2 == 0) || (intVar2 = strcmp((char *)intPtr3,\"h\"), intVar2 == 0)) {\n        unicode_display = 4;\n        charVar3 = other_format._3_1_;\n        charVar1 = desc_format._3_1_;\n        uVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      strVar2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      filename_per_symbol = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      set_output_format(&DAT_00107033);\n      charVar3 = other_format._3_1_;\n      charVar1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      dynamic = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      usage(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      intPtr2 = (int *)&optarg;\n      do_demangle = 1;\n      charVar3 = other_format._3_1_;\n      charVar1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      if (_optarg != (int *)0x0) {\n        intVar2 = cplus_demangle_name_to_style();\n        intPtr1 = _optarg;\n        if (intVar2 == 0) {\n          undefined8Var1 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          fatal(undefined8Var1,intPtr1);\nswitchD_00105c5a_caseD_cc:\n          demangle_flags = demangle_flags | 0x40000;\n          strVar1 = (char *)intPtr1;\n          charVar3 = other_format._3_1_;\n          charVar1 = desc_format._3_1_;\n          uVar14 = print_radix;\n        }\n        else {\n          cplus_demangle_set_style();\n          charVar3 = other_format._3_1_;\n          charVar1 = desc_format._3_1_;\n          uVar14 = print_radix;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      set_output_format(\"posix\");\n      charVar3 = other_format._3_1_;\n      charVar1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      print_size = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      defined_only = 1;\n      undefined_only = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      non_weak = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      intVar2 = strcmp((char *)_optarg,\"32_64\");\n      charVar3 = other_format._3_1_;\n      charVar1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      if (intVar2 != 0) {\n        strVar2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        undefined8Var1 = dcgettext(0,strVar2,5);\n        fatal(undefined8Var1);\nswitchD_00105c5a_caseD_56:\n        show_version = 1;\n        charVar3 = other_format._3_1_;\n        charVar1 = desc_format._3_1_;\n        uVar14 = print_radix;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      print_debug_syms = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      set_output_format(_optarg);\n      charVar3 = other_format._3_1_;\n      charVar1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      external_only = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      set_output_format(\"just-symbols\");\n      charVar3 = other_format._3_1_;\n      charVar1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      line_numbers = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      sort_numerically = 1;\n      no_sort = 0;\n      sort_by_size = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      no_sort = 1;\n      sort_numerically = 0;\n      sort_by_size = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      reverse_sort = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      print_armap = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      charVar3 = *(char *)_optarg;\n      intPtr2 = intPtr3;\n      charVar1 = charVar3;\n      uVar14 = 10;\n      if (charVar3 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < charVar3) {\n        if (charVar3 == 'o') {\n          uVar14 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (charVar3 == 'x') {\n          uVar14 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      strVar2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      undefined_only = 1;\n      defined_only = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      target = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      charVar3 = other_format._3_1_;\n      charVar1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      sort_by_size = 1;\n      no_sort = 0;\n      sort_numerically = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      demangle_flags = demangle_flags & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      ifunc_type_chars = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      intVar2 = strcmp((char *)_optarg,\"default\");\n      if ((intVar2 == 0) || (intVar2 = strcmp((char *)intPtr3,\"d\"), intVar2 == 0)) {\n        unicode_display = 0;\n        intPtr2 = intPtr3;\n        charVar3 = other_format._3_1_;\n        charVar1 = desc_format._3_1_;\n        uVar14 = print_radix;\n      }\n      else {\n        intVar2 = strcmp((char *)intPtr3,\"locale\");\n        if (intVar2 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        unicode_display = 1;\n        intPtr2 = intPtr3;\n        charVar3 = other_format._3_1_;\n        charVar1 = desc_format._3_1_;\n        uVar14 = print_radix;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    undefined8Var1 = dcgettext(0,strVar2,5);\n    fatal(undefined8Var1,intPtr3);\nLAB_00105f13:\n    longVar2 = *paramPtr;\n    strVar2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,strVar2,longVar2);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uVar14 = bfd_get_error();\n  undefined8Var1 = bfd_errmsg(uVar14);\n  undefined8Var2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  fatal(undefined8Var2,\"x86_64-pc-linux-gnu\",undefined8Var1);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byteVar2 = bytePtr4[1];\n  bytePtr4 = bytePtr4 + 1;\n  if (byteVar2 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  quiet = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  returnPtr = (undefined1 *)(ulong)show_version;\n  if (show_version != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    strVar1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(strVar1);\n    strVar1 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(strVar1);\n                    \n    exit(0);\n  }\n  if ((sort_by_size != 0) && (undefined_only != 0)) {\n    undefined8Var1 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    non_fatal(undefined8Var1);\n    undefined8Var1 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    non_fatal(undefined8Var1);\n    return returnPtr;\n  }\n  strVar1 = &optind;\n  if (_optind != argc) {\n    if (1 < argc - _optind) {\nLAB_00105f38:\n      filename_per_file = 1;\n    }\n    while( true ) {\n      intVar2 = *(int *)strVar1;\n      if (argc <= intVar2) break;\n      longVar2 = paramPtr[intVar2];\n      *(int *)strVar1 = intVar2 + 1;\n      charVar3 = display_file(longVar2);\n      if (charVar3 != '\\0') {\n        intVar2 = *(int *)strVar1;\n        if (argc <= intVar2) break;\n        longVar2 = paramPtr[intVar2];\n        *(int *)strVar1 = intVar2 + 1;\n        charVar3 = display_file(longVar2);\n        if (charVar3 != '\\0') {\n          intVar2 = *(int *)strVar1;\n          while( true ) {\n            if (argc <= intVar2) goto LAB_00105bdd;\n            longVar2 = paramPtr[intVar2];\n            *(int *)strVar1 = intVar2 + 1;\n            charVar3 = display_file(longVar2);\n            if (charVar3 == '\\0') break;\n            intVar2 = *(int *)strVar1;\n          }\n        }\n      }\n      returnPtr = (undefined1 *)(ulong)((int)returnPtr + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)returnPtr);\n  }\nLAB_0010613c:\n  uintVar1 = display_file(\"a.out\");\n  return (undefined1 *)(ulong)((uintVar1 ^ 1) & 0xff);\n}\n\n",
            "called": [
                "xexit",
                "textdomain",
                "fseek",
                "bfd_init",
                "getopt_long",
                "bfd_plugin_set_plugin",
                "xmalloc_set_program_name",
                "bfd_plugin_set_program_name",
                "set_output_format",
                "cplus_demangle_set_style",
                "ferror",
                "strlen",
                "stat",
                "fatal",
                "fclose",
                "xstrdup",
                "setlocale",
                "xrealloc",
                "exit",
                "bfd_errmsg",
                "bfd_get_error",
                "fopen",
                "ftell",
                "display_file",
                "usage",
                "dcgettext",
                "free",
                "non_fatal",
                "xmalloc",
                "printf",
                "bindtextdomain",
                "memcpy",
                "fprintf",
                "bfd_set_error_program_name",
                "bfd_set_default_target",
                "fread",
                "memmove",
                "strcmp",
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "display_files_001055f0"
        },
        "FUN_0010c020": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c020",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010c020"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_0010c260": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c260",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010c260"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_file_name_or_return_0010351b"
            },
            "code": "\nvoid printFileNameOrReturn_0010351b(void)\n\n{\n  if (filename_per_symbol == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_file_name_or_return_0010351b"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_filename_and_symbol_00103b2b",
                "param_1": "filename",
                "param_2": "symbol"
            },
            "code": "\nvoid printFilenameAndSymbol_00103b2b(undefined8 filename,undefined8 symbol)\n\n{\n  if (filename_per_symbol == 0) {\n    printf(\"%s[%s]:\\n\",filename,symbol);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_filename_and_symbol_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_formatted_string_00104740",
                "param_1": "formatString",
                "param_2": "symbolTable",
                "param_3": "symbol",
                "param_4": "binaryAddress",
                "puVar1": "tempPtr1",
                "bVar2": "tempByte1",
                "bVar3": "tempByte2",
                "iVar4": "tempInt",
                "sVar5": "tempSize",
                "pcVar6": "tempPtr2",
                "puVar7": "tempPtr3",
                "__ptr": "dynamicString",
                "uVar9": "tempUlong1",
                "uVar10": "tempUlong2",
                "puVar11": "tempPtr4",
                "puVar12": "tempPtr5",
                "__s": "tempPtr6",
                "__s_00": "tempPtr7",
                "lVar13": "tempLong",
                "uVar14": "tempUint",
                "bVar15": "tempByte3",
                "acStack_39": "tempCharStack",
                "with_symbol_versions": "symbolVersionFlag",
                "print_unicode_string_00102739": "printUnicodeString",
                "do_demangle": "demangleFlag",
                "unicode_display": "unicodeDisplay",
                "LAB_00104775": "label1",
                "LAB_00104794": "label2",
                "LAB_0010482b": "label3",
                "_sch_istable": "characterTable",
                "joined_r0x00104864": "label4",
                "buffer_8": "buffer",
                "buffer_len_9": "bufferLength",
                "xmalloc": "allocateMemory",
                "isatty": "isTerminal",
                "strchr": "findCharacter",
                "printf": "print",
                "print_string_and_free_memory_001047d0": "printStringAndFreeMemory",
                "reconcat": "reconcatenate",
                "free": "freeMemory",
                "strlen": "stringLength",
                "sprintf": "formatIntoString"
            },
            "code": "\nvoid printFormattedString_00104740(char *formatString,long *symbolTable,undefined8 *symbol,long binaryAddress)\n\n{\n  undefined8 *tempPtr1;\n  byte tempByte1;\n  byte tempByte2;\n  int tempInt;\n  size_t tempSize;\n  char *tempPtr2;\n  undefined8 *tempPtr3;\n  char *pcVar8;\n  undefined8 *dynamicString;\n  ulong tempUlong1;\n  undefined8 tempUlong2;\n  undefined *tempPtr4;\n  undefined8 *tempPtr5;\n  char *tempPtr6;\n  undefined8 *tempPtr7;\n  long tempLong;\n  uint tempUint;\n  byte tempByte3;\n  char tempCharStack [9];\n  \n  tempByte3 = 0;\n  if (symbol == (undefined8 *)0x0) {\n    symbol = *(undefined8 **)(*symbolTable + 0x10);\n    if (symbolVersionFlag == 0) {\n      printUnicodeString();\n      return;\n    }\nlabel1:\n    tempPtr5 = symbol;\n    if (demangleFlag == 0) {\n      tempPtr2 = (char *)0x0;\n      if (unicodeDisplay == 0) {\nlabel2:\n        tempPtr5 = symbol;\n        dynamicString = (undefined8 *)0x0;\n      }\n      else {\n        dynamicString = (undefined8 *)0x0;\n        if (symbol != (undefined8 *)0x0) goto LAB_0010269d;\n        tempPtr5 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      tempPtr2 = (char *)0x0;\nlabel3:\n      if ((*(char *)tempPtr5 == '\\0') ||\n         (symbol = (undefined8 *)bfd_demangle(binaryAddress,tempPtr5,demangle_flags),\n         symbol == (undefined8 *)0x0)) {\n        symbol = tempPtr5;\n        if (unicodeDisplay != 0) goto LAB_00102698;\n        dynamicString = (undefined8 *)0x0;\n      }\n      else {\n        tempPtr5 = symbol;\n        dynamicString = symbol;\n        if (unicodeDisplay != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    tempPtr5 = symbol;\n    if (symbolVersionFlag == 0) {\n      if (*(int *)(*(long *)(binaryAddress + 8) + 8) != 5) goto label1;\n      tempPtr2 = findCharacter((char *)symbol,0x40);\n      if (tempPtr2 == (char *)0x0) {\n        if (demangleFlag == 0) {\n          if (unicodeDisplay == 0) {\n            if (symbolTable == (long *)0x0) {\n              dynamicString = (undefined8 *)0x0;\n              print(formatString,symbol);\n            }\n            else {\n              if (symbolTable[2] != 0) {\n                printStringAndFreeMemory();\n                return;\n              }\n              dynamicString = (undefined8 *)0x0;\n              print(formatString,symbol);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *tempPtr2 = '\\0';\n        if (demangleFlag == 0) {\n          if (unicodeDisplay == 0) goto label2;\n          dynamicString = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto label3;\n    }\n    tempPtr2 = (char *)0x0;\n    if (demangleFlag != 0) goto label3;\n    if (unicodeDisplay == 0) goto label2;\nLAB_00102698:\n    tempPtr5 = symbol;\n    dynamicString = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      tempByte1 = *(byte *)symbol;\n      symbol = (undefined8 *)((long)symbol + 1);\n      if (tempByte1 == 0) goto label4;\n    } while ((((&characterTable)[(ulong)tempByte1 * 2] & 2) == 0) && (tempByte1 < 0xc0));\n    tempSize = stringLength((char *)tempPtr5);\n    tempPtr7 = buffer;\n    if (bufferLength < tempSize * 9) {\n      freeMemory(buffer);\n      tempSize = stringLength((char *)tempPtr5);\n      bufferLength = tempSize * 9;\n      buffer = (undefined8 *)allocateMemory(bufferLength + 1);\n      tempPtr7 = buffer;\n    }\n    while( true ) {\n      tempPtr3 = buffer;\n      tempByte1 = *(byte *)tempPtr5;\n      tempPtr1 = (undefined8 *)((long)tempPtr5 + 1);\n      if (tempByte1 == 0) break;\n      if (((&characterTable)[(ulong)tempByte1 * 2] & 2) == 0) {\n        if ((tempByte1 < 0xc0) || (unicodeDisplay == 0)) {\n          *(byte *)tempPtr7 = tempByte1;\n          tempPtr7 = (undefined8 *)((long)tempPtr7 + 1);\n          tempPtr5 = tempPtr1;\n        }\n        else {\n          tempByte2 = *(byte *)((long)tempPtr5 + 1);\n          if ((tempByte2 & 0xc0) == 0x80) {\n            tempPtr3 = tempPtr7;\n            if ((tempByte1 & 0x20) == 0) {\n              switch(unicodeDisplay) {\n              case 1:\n                tempUint = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                tempLong = 2;\n                goto LAB_00102917;\n              case 4:\n                tempInt = isTerminal(1);\n                if (tempInt == 0) {\n                  tempByte2 = *(byte *)((long)tempPtr5 + 1);\n                }\n                else {\n                  *(undefined *)(tempPtr7 + 1) = 0;\n                  *tempPtr7 = 0x6d37343b31335b1b;\n                  tempByte2 = *(byte *)((long)tempPtr5 + 1);\n                  tempPtr3 = tempPtr7 + 1;\n                }\n              case 2:\n                tempUint = 2;\n                formatIntoString((char *)tempPtr3,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)tempPtr5 >> 2 & 7),\n                        (ulong)((*(byte *)tempPtr5 & 3) << 6 | tempByte2 & 0x3f));\n                tempPtr3 = (undefined8 *)((long)tempPtr3 + 6);\n                goto LAB_00102a27;\n              default:\n                tempUint = 2;\n              }\n            }\n            else {\n              tempByte2 = *(byte *)((long)tempPtr5 + 2);\n              if ((tempByte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((tempByte1 & 0x10) == 0) {\n                switch(unicodeDisplay) {\n                case 1:\n                  tempUint = 3;\nLAB_00102a62:\n                  for (tempUlong1 = (ulong)tempUint; tempUlong1 != 0; tempUlong1 = tempUlong1 - 1) {\n                    *(undefined *)tempPtr3 = *(undefined *)tempPtr5;\n                    tempPtr5 = (undefined8 *)((long)tempPtr5 + (ulong)tempByte3 * -2 + 1);\n                    tempPtr3 = (undefined8 *)((long)tempPtr3 + (ulong)tempByte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  tempLong = 3;\nLAB_00102917:\n                  tempUlong2 = 0x7b;\n                  if (unicodeDisplay == 3) {\n                    tempUlong2 = 0x3c;\n                  }\n                  formatIntoString((char *)tempPtr7,\"%c\",tempUlong2);\n                  *(undefined *)((long)tempPtr7 + 3) = 0;\n                  tempPtr3 = (undefined8 *)(tempLong + (long)tempPtr5);\n                  *(undefined2 *)((long)tempPtr7 + 1) = 0x7830;\n                  pcVar8 = (char *)((long)tempPtr7 + 3);\n                  do {\n                    tempPtr6 = pcVar8;\n                    tempByte1 = *(byte *)tempPtr5;\n                    tempPtr5 = (undefined8 *)((long)tempPtr5 + 1);\n                    formatIntoString(tempPtr6,\"%02x\",(ulong)tempByte1);\n                    pcVar8 = tempPtr6 + 2;\n                  } while (tempPtr5 != tempPtr3);\n                  tempUlong2 = 0x7d;\n                  if (unicodeDisplay == 3) {\n                    tempUlong2 = 0x3e;\n                  }\n                  tempUint = (uint)tempLong;\n                  formatIntoString(tempPtr6 + 2,\"%c\",tempUlong2);\n                  tempPtr3 = (undefined8 *)(tempPtr6 + 3);\n                  break;\n                case 4:\n                  tempInt = isTerminal(1);\n                  if (tempInt == 0) {\n                    tempByte2 = *(byte *)((long)tempPtr5 + 2);\n                  }\n                  else {\n                    *(undefined *)(tempPtr7 + 1) = 0;\n                    *tempPtr7 = 0x6d37343b31335b1b;\n                    tempByte2 = *(byte *)((long)tempPtr5 + 2);\n                    tempPtr3 = tempPtr7 + 1;\n                  }\n                case 2:\n                  tempUint = 3;\n                  formatIntoString((char *)tempPtr3,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)tempPtr5 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)tempPtr5 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)tempPtr5 + 1) & 3) << 6 | tempByte2 & 0x3f));\n                  tempPtr3 = (undefined8 *)((long)tempPtr3 + 6);\nLAB_00102a27:\n                  if ((unicodeDisplay == 4) && (tempInt = isTerminal(1), tempInt != 0)) {\n                    *(undefined4 *)tempPtr3 = 0x6d305b1b;\n                    tempPtr3 = (undefined8 *)((long)tempPtr3 + 4);\n                    *(undefined *)tempPtr3 = 0;\n                  }\n                  break;\n                default:\n                  tempUint = 3;\n                }\n              }\n              else {\n                tempByte2 = *(byte *)((long)tempPtr5 + 3);\n                if ((tempByte2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicodeDisplay) {\n                case 1:\n                  tempUint = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  tempLong = 4;\n                  goto LAB_00102917;\n                case 4:\n                  tempInt = isTerminal(1);\n                  if (tempInt == 0) {\n                    tempByte2 = *(byte *)((long)tempPtr5 + 3);\n                  }\n                  else {\n                    *(undefined *)(tempPtr7 + 1) = 0;\n                    *tempPtr7 = 0x6d37343b31335b1b;\n                    tempByte2 = *(byte *)((long)tempPtr5 + 3);\n                    tempPtr3 = tempPtr7 + 1;\n                  }\n                case 2:\n                  tempUint = 4;\n                  tempInt = formatIntoString((char *)tempPtr3,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)tempPtr5 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)tempPtr5 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)tempPtr5 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)tempPtr5 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)tempPtr5 + 2) & 3) << 6 | tempByte2 & 0x3f));\n                  tempPtr3 = (undefined8 *)((long)tempPtr3 + (long)tempInt);\n                  goto LAB_00102a27;\n                default:\n                  tempUint = 4;\n                }\n              }\n            }\n            tempUlong1 = (ulong)(uint)((int)tempPtr3 - (int)tempPtr7);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)tempPtr7 = tempByte1;\n            tempUint = 1;\n            tempUlong1 = 1;\n          }\n          tempPtr7 = (undefined8 *)((long)tempPtr7 + tempUlong1);\n          tempPtr5 = (undefined8 *)((long)tempPtr1 + (ulong)(tempUint - 1));\n        }\n      }\n      else {\n        *(undefined *)tempPtr7 = 0x5e;\n        *(byte *)((long)tempPtr7 + 1) = tempByte1 + 0x40;\n        tempPtr7 = (undefined8 *)((long)tempPtr7 + 2);\n        tempPtr5 = tempPtr1;\n      }\n    }\n    *(undefined *)tempPtr7 = 0;\n    tempPtr5 = tempPtr3;\n  }\nlabel4:\n  if ((((symbolTable != (long *)0x0) && (symbolTable[2] != 0)) && (symbolVersionFlag != 0)) &&\n     ((pcVar8 = (char *)(**(code **)(*(long *)(binaryAddress + 8) + 0x220))\n                                  (binaryAddress,symbolTable[2],0,tempCharStack), pcVar8 != (char *)0x0 &&\n      (*pcVar8 != '\\0')))) {\n    tempPtr4 = &DAT_001071e0;\n    if ((tempCharStack[0] == '\\0') && (*(long *)(symbolTable[2] + 0x20) != 0x10c2a8)) {\n      tempPtr4 = &DAT_001071df;\n    }\n    dynamicString = (undefined8 *)reconcatenate(dynamicString,tempPtr5,tempPtr4,pcVar8,0);\n    tempPtr5 = dynamicString;\n  }\n  print(formatString,tempPtr5);\n  if (tempPtr2 != (char *)0x0) {\n    *tempPtr2 = '@';\n  }\nLAB_001047ba:\n  freeMemory(dynamicString);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "just_print_symbol_name",
                "print_symbol_info_bsd.cold",
                "display_file",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_formatted_string_00104740"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_0010c0c8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0c8",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_0010c0c8"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "report_with_params_00106400",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "inputParam5",
                "param_6": "inputParam6",
                "param_7": "inputParam7",
                "param_8": "inputParam8",
                "param_9": "reportParam1",
                "param_10": "reportParam2",
                "param_11": "reportParam3",
                "param_12": "reportParam4",
                "param_13": "reportParam5",
                "param_14": "reportParam6",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "tempBuffer",
                "local_b0": "localParam2",
                "local_a8": "localParam3",
                "local_a0": "localParam4",
                "local_98": "localParam5",
                "local_90": "localParam6",
                "local_88": "localParam1",
                "local_78": "localParam2",
                "local_68": "localParam3",
                "local_58": "localParam4",
                "local_48": "localParam5",
                "local_38": "localParam6",
                "local_28": "localParam7",
                "local_18": "localParam8"
            },
            "code": "\nvoid reportWithParams_00106400(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4,\n                 undefined4 inputParam5,undefined4 inputParam6,undefined4 inputParam7,undefined4 inputParam8,\n                 undefined8 reportParam1,undefined8 reportParam2,undefined8 reportParam3,undefined8 reportParam4,\n                 undefined8 reportParam5,undefined8 reportParam6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined tempBuffer [8];\n  undefined8 localParam2;\n  undefined8 localParam3;\n  undefined8 localParam4;\n  undefined8 localParam5;\n  undefined8 localParam6;\n  undefined4 localParam1;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 localParam4;\n  undefined4 localParam5;\n  undefined4 localParam6;\n  undefined4 localParam7;\n  undefined4 localParam8;\n  \n  if (flag != '\\0') {\n    localParam1 = inputParam1;\n    localParam2 = inputParam2;\n    localParam3 = inputParam3;\n    localParam4 = inputParam4;\n    localParam5 = inputParam5;\n    localParam6 = inputParam6;\n    localParam7 = inputParam7;\n    localParam8 = inputParam8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  localBuffer = tempBuffer;\n  length = 0x30;\n  localParam2 = reportParam2;\n  localParam3 = reportParam3;\n  localParam4 = reportParam4;\n  localParam5 = reportParam5;\n  localParam6 = reportParam6;\n  report(reportParam1,&size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "display_file.cold",
                "display_rel_file",
                "FUN_00104d5b",
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "report_with_params_00106400"
        },
        "FUN_0010c1e8": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1e8",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c1e8"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_print_width",
                "list_matching_formats",
                "FUN_00104d5b",
                "main",
                "print_symbol.cold",
                "print_symbol",
                "usage",
                "FUN_001047d0",
                "print_symname.cold",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "size_forward1",
                "main",
                "usage",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "print_symbol_info_bsd",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_sort_00103533",
                "param_1": "array1",
                "param_2": "array2",
                "uVar1": "result"
            },
            "code": "\nulong compareAndSort_00103533(undefined8 *array1,undefined8 *array2)\n\n{\n  ulong result;\n  \n  if ((ulong)array1[1] < (ulong)array2[1]) {\n    return (ulong)(-(uint)(reverse_sort == 0) | 1);\n  }\n  if ((ulong)array2[1] < (ulong)array1[1]) {\n    return (ulong)((-(uint)(reverse_sort == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (**(code **)(sorters + (long)reverse_sort * 8))(*array1,*array2);\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_sort_00103533"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "list_matching_formats",
                "bfd_nonfatal",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "print_constprop_0_0010651a",
                "print_value_constprop_0": "print_constprop_0"
            },
            "code": "\nvoid print_constprop_0_0010651a(void)\n\n{\n  print_constprop_0_0010651a();\n  return;\n}\n\n",
            "called": [
                "print_value.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "print_symbol_info_posix.cold",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_constprop_0_0010651a"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "param_1": "symbolTableEntry",
                "param_2": "param2",
                "iVar1": "printWidth",
                "cVar2": "undefinedSymclass",
                "uVar3": "symbolValue",
                "lVar4": "symbolOffset"
            },
            "code": "\nvoid printSymbolInfo_001053c0(long *symbolTableEntry,undefined8 param2)\n\n{\n  int printWidth;\n  char undefinedSymclass;\n  undefined8 symbolValue;\n  long symbolOffset;\n  \n  undefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*symbolTableEntry + 8));\n  printWidth = print_width;\n  if (undefinedSymclass == '\\0') {\n    if (sort_by_size == 0) {\n      if ((print_width - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        symbolValue = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        fatal(symbolValue,printWidth);\n        goto LAB_00103623;\n      }\n      symbolValue = *(undefined8 *)*symbolTableEntry;\n    }\n    else {\n      if (print_size == 0) {\n        if (symbolTableEntry[2] == 0) {\n          symbolOffset = symbolTableEntry[1];\n        }\n        else {\n          symbolOffset = *(long *)(symbolTableEntry[2] + 0x38);\n        }\n        print_value_constprop_0(symbolOffset);\n        if (print_size != 0) {\n          print_symbol_info_bsd_cold();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      symbolValue = *(undefined8 *)*symbolTableEntry;\n      if ((print_width - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(print_format_string,symbolValue);\n    if (print_size != 0) {\n      print_symbol_info_bsd_cold();\n      return;\n    }\n  }\n  else if (print_width == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolTableEntry + 8));\n  if (*(char *)(*symbolTableEntry + 8) != '-') {\n    print_symname(&DAT_0010712c,symbolTableEntry,0,param2);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf((char *)&other_format,(ulong)(uint)(int)*(char *)(*symbolTableEntry + 0x19));\n  putchar(0x20);\n  printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbolTableEntry + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolTableEntry + 0x20));\n  print_symname(&DAT_0010712c,symbolTableEntry,0,param2);\n  return;\n}\n\n",
            "called": [
                "fatal",
                "bfd_is_undefined_symclass",
                "printf",
                "print_value.constprop.0",
                "print_symbol_info_bsd.cold",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_info_001064b0",
                "param_1": "symbol",
                "param_2": "symbol_table",
                "cVar1": "is_undefined_symclass",
                "param_1[2]": "other_data",
                "param_1[1]": "const_data"
            },
            "code": "\nvoid print_symbol_info_001064b0(long *symbol,undefined8 symbol_table)\n\n{\n  char is_undefined_symclass;\n  \n  print_symname(&DAT_00107363,symbol,0,symbol_table);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbol + 8));\n  is_undefined_symclass = bfd_is_undefined_symclass((int)*(char *)(*symbol + 8));\n  if (is_undefined_symclass != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  print_value_constprop_0(*(undefined8 *)*symbol);\n  putchar(0x20);\n  if (other_data == 0) {\n    if (const_data != 0) {\n      print_constprop_0_0010651a();\n      return;\n    }\n  }\n  else if (*(long *)(other_data + 0x38) != 0) {\n    print_value_constprop_0();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass",
                "FUN_0010651a",
                "putchar",
                "printf",
                "print_value.constprop.0",
                "print_symbol_info_posix.cold",
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_001064b0"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_0010c030": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c030",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010c030"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010c150": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c150",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010c150"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "print_symbol_name_00103b49",
                "param_1": "symbol",
                "param_2": "address"
            },
            "code": "\nvoid print_symbol_name_00103b49(undefined8 symbol,undefined8 address)\n\n{\n  print_symname(&DAT_0010712d,symbol,0,address);\n  return;\n}\n\n",
            "called": [
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_name_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_symbols_00103abf",
                "param_1": "file_name",
                "param_2": "library_name",
                "pcVar1": "format_string",
                "undefined_only": "is_undefined_only",
                "print_width": "width"
            },
            "code": "\nvoid printSymbols_00103abf(undefined8 file_name,undefined8 library_name)\n\n{\n  char *format_string;\n  \n  format_string = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (is_undefined_only == 0) {\n    format_string = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  format_string = (char *)dcgettext(0,format_string,5);\n  printf(format_string,file_name,library_name);\n  format_string = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (width != 0x20) {\n    format_string = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  format_string = (char *)dcgettext(0,format_string,5);\n  printf(format_string);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00103abf"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "calculate_inverse_00103bf6",
                "in_RAX": "input_value",
                "iVar1": "result_of_forward",
                "auVar2": "inverse_result"
            },
            "code": "\nundefined  [16] calculate_inverse_00103bf6(void)\n\n{\n  int result_of_forward;\n  undefined8 input_value;\n  undefined inverse_result [16];\n  \n  result_of_forward = non_numeric_forward();\n  inverse_result._0_4_ = -result_of_forward;\n  inverse_result._4_4_ = 0;\n  inverse_result._8_8_ = input_value;\n  return inverse_result;\n}\n\n",
            "called": [
                "non_numeric_forward"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_inverse_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "pcVar2": "targetMessage",
                "__ptr": "targetList",
                "unaff_RBX": "outputFile",
                "plVar3": "currentTarget",
                "in_stack_00000008": "exitCode",
                "lVar1": "currentTargetValue"
            },
            "code": "\nvoid printSupportedTargets_00102450(void)\n\n{\n  long currentTargetValue;\n  char *targetMessage;\n  long *targetList;\n  FILE *outputFile;\n  long *currentTarget;\n  int exitCode;\n  \n  targetMessage = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputFile,targetMessage);\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    currentTargetValue = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (currentTargetValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    targetMessage = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,targetMessage,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00102450"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_matching_formats",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "print_symbol_info_bsd.cold",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "print_symbols_00102c19",
                "pcVar1": "symbolName",
                "pcVar2": "printSymbolFunc",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "ulongVar",
                "lVar7": "longVar",
                "puVar8": "ptrVar1",
                "lVar9": "longVar2",
                "puVar10": "ptrVar2",
                "unaff_RBX": "unaffRbx",
                "puVar13": "ptrVar8",
                "unaff_RBP": "unaffRbp",
                "puVar15": "ptrVar13",
                "unaff_R12": "unaffR12",
                "unaff_R13": "unaffR13",
                "unaff_R14": "unaffR14",
                "unaff_R15": "unaffR15",
                "bVar16": "boolVar",
                "bVar17": "byteVar",
                "unaff_retaddr": "unaffRetaddr",
                "uVar18": "ulongVar3",
                "in_stack_00000008": "localVar1",
                "in_stack_00000010": "localVar2",
                "in_stack_00000018": "localVar3",
                "in_stack_00000038": "localVar4",
                "in_stack_00000040": "localVar5",
                "in_stack_00000048": "localVar6",
                "allow_special_symbols": "allowSpecialSymbols",
                "undefined_only": "undefinedOnly",
                "external_only": "externalOnly",
                "non_weak": "nonWeak",
                "defined_only": "definedOnly",
                "no_sort": "noSort",
                "sort_by_size": "sortBySize",
                "sort_dynamic": "sortDynamic",
                "sort_bfd": "sortBfd",
                "sort_x": "sortX",
                "sort_y": "sortY",
                "dynamic": "dynamicVar",
                "reverse_sort": "reverseSort",
                "sort_numerically": "sortNumerically",
                "print_debug_syms": "printDebugSymbols",
                "puVar11": "ptrVar11",
                "puVar12": "ptrVar12",
                "__ptr": "ptrVar7",
                "in_R8": "inReg8",
                "in_R9": "inReg9",
                "puVar14": "ptrVar9",
                "qsort": "quickSort",
                "size_forward1": "sizeForward1",
                "xmalloc": "allocateMemory",
                "size_forward2": "sizeForward2",
                "xrealloc": "reallocMemory",
                "bfd_fatal": "fatalErrorMessage",
                "dcgettext": "getMessage",
                "non_fatal": "nonFatalErrorMessage",
                "report_plugin_err": "reportPluginError"
            },
            "code": "\nvoid printSymbols_00102c19(void)\n\n{\n  char *symbolName;\n  code *printSymbolFunc;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 ulongVar;\n  long longVar;\n  undefined8 *ptrVar1;\n  long longVar2;\n  undefined8 *ptrVar2;\n  undefined8 *unaffRbx;\n  undefined8 *ptrVar7;\n  undefined8 *unaffRbp;\n  undefined8 *ptrVar11;\n  undefined8 *ptrVar12;\n  undefined8 *inReg8;\n  undefined8 *ptrVar8;\n  undefined8 *inReg9;\n  undefined8 *ptrVar9;\n  undefined8 *unaffR12;\n  undefined8 *ptrVar13;\n  undefined8 *unaffR13;\n  undefined8 *unaffR14;\n  undefined8 *unaffR15;\n  bool boolVar;\n  byte byteVar;\n  ulong unaffRetaddr;\n  ulong ulongVar3;\n  undefined8 localVar1;\n  undefined8 *localVar2;\n  undefined8 *localVar3;\n  undefined8 localVar4;\n  void *localVar5;\n  undefined8 *localVar6;\n  \n  byteVar = 0;\n  if (allowSpecialSymbols == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (unaffRbx != unaffR13) {\n      if (unaffR14 == (undefined8 *)0x8) {\n        *unaffRbx = *unaffR13;\n        FUN_001049c0();\n        return;\n      }\n      for (; unaffR14 != (undefined8 *)0x0; unaffR14 = (undefined8 *)((long)unaffR14 + -1)) {\n        *(undefined *)unaffRbx = *(undefined *)unaffR13;\n        unaffR13 = (undefined8 *)((long)unaffR13 + (ulong)byteVar * -2 + 1);\n        unaffRbx = (undefined8 *)((long)unaffRbx + (ulong)byteVar * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    unaffRbx = (undefined8 *)((long)unaffRbx + (long)unaffR14);\nLAB_001049c3:\n    do {\n      do {\n        unaffR13 = (undefined8 *)((long)unaffR13 + (long)unaffR14);\n        ptrVar13 = unaffR12;\n        ptrVar12 = unaffRbp;\n        if (unaffR12 <= unaffR13) goto LAB_00104b15;\nLAB_001049cf:\n        ptrVar1 = (undefined8 *)\n                 (**(code **)(unaffRbp[1] + 0x270))\n                           (unaffRbp,unaffRetaddr & 0xffffffff,unaffR13,unaffR15);\n        ptrVar11 = unaffRbp;\n        ptrVar12 = unaffR13;\n        ptrVar13 = unaffR15;\n        if (ptrVar1 == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbolName = (char *)ptrVar1[1];\n        if (((symbolName == (char *)0x0) || (*symbolName != '_')) || (symbolName[1] != '_')) {\nLAB_00104a03:\n          if (undefinedOnly == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintVar = (uint)(ptrVar1[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintVar != 0) goto LAB_00104a2d;\n          unaffR13 = (undefined8 *)((long)unaffR13 + (long)unaffR14);\n          ptrVar13 = unaffR12;\n          ptrVar12 = unaffRbp;\n          if (unaffR12 <= unaffR13) {\nLAB_00104b15:\n            unaffRbx = (undefined8 *)((long)unaffRbx - (long)localVar3);\n            if (unaffR14 == (undefined8 *)0x8) {\n              longVar2 = ptrVar12[1];\n              ptrVar11 = (undefined8 *)((long)unaffRbx + 7);\n              if (-1 < (long)unaffRbx) {\n                ptrVar11 = unaffRbx;\n              }\n              inReg8 = (undefined8 *)(ulong)noSort;\n              printSymbolFunc = *(code **)(longVar2 + 0x208);\n              ptrVar11 = (undefined8 *)((long)ptrVar11 >> 3);\n            }\n            else {\n              ptrVar11 = (undefined8 *)((long)unaffRbx / (long)unaffR14);\n              longVar2 = ptrVar12[1];\n              printSymbolFunc = *(code **)(longVar2 + 0x208);\n            }\n            unaffRbp = ptrVar12;\n            if (noSort == 0) {\n              sortDynamic = dynamicVar != 0;\n              sortBfd = ptrVar12;\n              sortX = (undefined8 *)(*printSymbolFunc)(ptrVar12);\n              sortY = (undefined8 *)(**(code **)(ptrVar12[1] + 0x208))(ptrVar12);\n              unaffRbx = localVar6;\n              if ((sortX == (undefined8 *)0x0) || (sortY == (undefined8 *)0x0)) {\n                fatalErrorMessage(*ptrVar12);\n                ptrVar7 = unaffR15;\n                goto LAB_00102d8e;\n              }\n              unaffR12 = (undefined8 *)(ulong)localVar4._4_4_;\n              if (sortBySize != 0) {\n                ulongVar3 = (ulong)(dynamicVar != 0);\n                quickSort(localVar6,(size_t)ptrVar11,(size_t)unaffR12,sizeForward1);\n                ptrVar13 = (undefined8 *)allocateMemory((long)ptrVar11 << 4);\n                ptrVar8 = sortX;\n                unaffRbp = sortY;\n                unaffR14 = (undefined8 *)((long)ptrVar11 * (long)unaffR12 + (long)unaffRbx);\n                ptrVar1 = sortX;\n                inReg9 = sortY;\n                if (unaffR14 <= unaffRbx) goto LAB_00102ec2;\n                ptrVar11 = (undefined8 *)\n                          (**(code **)(ptrVar12[1] + 0x270))(ptrVar12,ulongVar3 & 0xffffffff,unaffRbx);\n                ptrVar7 = unaffRbx;\n                inReg8 = unaffR12;\n                localVar2 = ptrVar13;\n                if (ptrVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              quickSort(localVar6,(size_t)ptrVar11,(size_t)unaffR12,\n                    *(__compar_fn_t *)\n                     (sorters + ((long)reverseSort + (long)sortNumerically * 2) * 8));\n              longVar2 = ptrVar12[1];\n            }\n            ptrVar7 = (undefined8 *)0x0;\n            do {\n              ptrVar12 = localVar6;\n              ptrVar1 = (undefined8 *)(ulong)sortBySize;\n              unaffR14 = (undefined8 *)(ulong)(dynamicVar != 0);\n              if (sortBySize != 0) {\n                ptrVar13 = (undefined8 *)(**(code **)(longVar2 + 0x208))(unaffRbp);\n                if (ptrVar13 == (undefined8 *)0x0) goto LAB_00102ed2;\n                unaffRbx = ptrVar7 + (long)ptrVar11 * 2;\n                ptrVar11 = ptrVar7;\n                do {\n                  if (unaffRbx <= ptrVar11) {\nLAB_00104c75:\n                    if (localVar5 == (void *)0x0) {\n                      free(localVar6);\n                      free(ptrVar7);\n                      return;\n                    }\n                    free(localVar5);\n                    free(localVar6);\n                    free(ptrVar7);\n                    return;\n                  }\n                  ptrVar1 = ptrVar13;\n                  longVar2 = (**(code **)(unaffRbp[1] + 0x270))(unaffRbp,unaffR14,*ptrVar11);\n                  if (longVar2 == 0) {\n                    fatalErrorMessage(*unaffRbp,0);\nLAB_00102ed2:\n                    ptrVar12 = (undefined8 *)*unaffRbp;\n                    fatalErrorMessage();\n                    ptrVar8 = inReg8;\n                    ptrVar9 = inReg9;\n                    goto LAB_00102edb;\n                  }\n                  ptrVar12 = ptrVar11 + 1;\n                  ptrVar11 = ptrVar11 + 2;\n                  print_symbol(unaffRbp,longVar2,*ptrVar12,localVar1);\n                } while( true );\n              }\n              unaffR12 = (undefined8 *)(ulong)localVar4._4_4_;\n              unaffR15 = (undefined8 *)(**(code **)(longVar2 + 0x208))(unaffRbp);\n              if (unaffR15 == (undefined8 *)0x0) {\n                fatalErrorMessage(*unaffRbp);\n                ptrVar12 = unaffR12;\n                if (dynamicVar == 0) {\n                  longVar2 = (**(code **)(unaffRbp[1] + 0x350))(unaffRbp);\n                  ptrVar11 = localVar6;\n                  ptrVar13 = unaffR12;\n                  if (longVar2 < 1) {\n                    ptrVar1 = (undefined8 *)0x0;\n                    unaffRbx = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    unaffRbx = (undefined8 *)allocateMemory();\n                    ptrVar1 = (undefined8 *)(**(code **)(unaffRbp[1] + 0x358))(unaffRbp,unaffRbx);\n                    ptrVar12 = ptrVar13;\n                    if ((long)ptrVar1 < 0) {\n                      ptrVar12 = (undefined8 *)*unaffRbp;\n                      ptrVar11 = (undefined8 *)fatalErrorMessage(ptrVar12,ptrVar13);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  ptrVar1 = unaffR12;\n                  unaffRbx = localVar6;\n                  ptrVar11 = (undefined8 *)0x0;\n                  ptrVar13 = (undefined8 *)0x0;\n                }\n                inReg9 = &stack0x00000040;\n                inReg8 = unaffRbx;\n                longVar2 = (**(code **)(unaffRbp[1] + 0x360))(unaffRbp,ptrVar13,ptrVar11,ptrVar1);\n                unaffR12 = ptrVar12;\n                if (0 < longVar2) {\n                  unaffR12 = (undefined8 *)((long)ptrVar12 + longVar2);\n                  localVar6 = (undefined8 *)reallocMemory(localVar6);\n                  longVar = 0;\n                  do {\n                    localVar6[(long)((long)ptrVar12 + longVar)] =\n                         (void *)(longVar * 0x30 + (long)localVar5);\n                    longVar = longVar + 1;\n                  } while (longVar2 != longVar);\n                  localVar6[(long)((long)ptrVar12 + longVar2)] = 0;\n                }\n                if ((dynamicVar == 0) && (unaffRbx != (undefined8 *)0x0)) {\n                  free(unaffRbx);\n                }\n                if ((*(byte *)((long)unaffRbp + 0x4a) & 0x10) != 0) {\n                  unaffRbx = (undefined8 *)*unaffRbp;\n                  reportPluginError = '\\0';\n                  ulongVar = getMessage(0,\"%s: plugin needed to handle lto object\",5);\n                  nonFatalErrorMessage(ulongVar);\n                }\n                unaffR14 = (undefined8 *)(ulong)localVar4._4_4_;\n                boolVar = dynamicVar != 0;\n                ptrVar11 = (undefined8 *)(ulong)boolVar;\n                ptrVar1 = localVar6;\n                localVar3 = localVar6;\n                unaffR15 = (undefined8 *)(**(code **)(unaffRbp[1] + 0x208))(unaffRbp);\n                if (unaffR15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                ptrVar11 = (undefined8 *)((long)ptrVar11 * (long)unaffR12 + (long)ptrVar12);\n                unaffRbx = ptrVar12;\n                while( true ) {\n                  if (ptrVar11 <= unaffRbx) goto LAB_00104c75;\n                  ptrVar1 = unaffR15;\n                  longVar2 = (**(code **)(unaffRbp[1] + 0x270))(unaffRbp,unaffR14,unaffRbx);\n                  if (longVar2 == 0) break;\n                  unaffRbx = (undefined8 *)((long)unaffRbx + (long)unaffR12);\n                  print_symbol(unaffRbp,longVar2,0,localVar1);\n                }\n                fatalErrorMessage(*unaffRbp,0);\n              }\n              fatalErrorMessage(*unaffRbp);\n              ptrVar12 = unaffRbp;\n              ptrVar13 = unaffR15;\nLAB_00102eb0:\n              fatalErrorMessage(*ptrVar11);\nLAB_00102eb9:\n              fatalErrorMessage(*ptrVar12);\nLAB_00102ec2:\n              ptrVar11 = (undefined8 *)0x0;\n              ptrVar7 = unaffRbx;\n              inReg8 = unaffR12;\n              ptrVar8 = ptrVar1;\n              unaffRbp = inReg9;\n              localVar2 = ptrVar13;\nLAB_00104e35:\n              while (inReg9 = ptrVar8, ptrVar7 < unaffR14) {\n                unaffRbx = (undefined8 *)((long)ptrVar7 + (long)inReg8);\n                if (unaffRbx < unaffR14) {\n                  ptrVar1 = unaffRbp;\n                  ptrVar8 = inReg8;\n                  ptrVar9 = inReg9;\n                  ptrVar2 = (undefined8 *)(**(code **)(ptrVar12[1] + 0x270))();\n                  if (ptrVar2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    inReg9 = ptrVar9;\n                    inReg8 = ptrVar8;\n                    ptrVar12 = (undefined8 *)*ptrVar12;\n                    ptrVar2 = (undefined8 *)fatalErrorMessage();\n                  }\n                  else {\n                    ptrVar1 = (undefined8 *)ptrVar11[4];\n                    if ((*(uint *)(ptrVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar2 = ptrVar11[2];\nLAB_00102ee7:\n                  if (ptrVar1 == (undefined8 *)ptrVar2[4]) {\n                    longVar2 = ptrVar2[2] - longVar2;\n                    ptrVar8 = unaffRbp;\n                    ptrVar9 = ptrVar7;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar2 = ptrVar1[8] - longVar2;\n                  ptrVar8 = unaffRbp;\n                  ptrVar9 = ptrVar7;\n                }\n                else {\n                  ptrVar1 = (undefined8 *)ptrVar11[4];\n                  if ((*(uint *)(ptrVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar2 = ptrVar11[2];\n                    ptrVar2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  ptrVar2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  ptrVar8 = unaffRbp;\n                  ptrVar9 = ptrVar7;\n                  if (*(int *)(ptrVar12[1] + 8) == 5) {\n                    longVar2 = ptrVar11[7];\n                  }\n                  else {\n                    longVar2 = ptrVar11[2];\n                    if ((*(byte *)((long)ptrVar1 + 0x25) & 0x10) == 0) {\n                      if (unaffRbx < unaffR14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                ptrVar11 = ptrVar2;\n                ptrVar7 = unaffRbx;\n                unaffRbp = inReg9;\n                if (longVar2 != 0) {\n                  *ptrVar13 = ptrVar9;\n                  ptrVar13[1] = longVar2;\n                  ptrVar13 = ptrVar13 + 2;\n                }\n              }\n              ptrVar11 = (undefined8 *)((long)ptrVar13 - (long)localVar2 >> 4);\n              quickSort(localVar2,(size_t)ptrVar11,0x10,sizeForward2);\n              longVar2 = ptrVar12[1];\n              unaffRbx = ptrVar7;\n              unaffRbp = ptrVar12;\n              ptrVar7 = localVar2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVar = strcmp(symbolName + (symbolName[2] == '_'),\"__gnu_lto_slim\");\n        localVar2 = ptrVar1;\n        if (intVar == 0) {\n          if (reportPluginError != '\\0') {\n            localVar2 = (undefined8 *)*unaffRbp;\n            reportPluginError = '\\0';\n            ulongVar = getMessage(0,\"%s: plugin needed to handle lto object\",5);\n            nonFatalErrorMessage(ulongVar,localVar2);\n          }\n          goto LAB_00104a03;\n        }\n        if (undefinedOnly != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (externalOnly == 0) {\n          if (nonWeak == 0) goto LAB_00104a2d;\n          uintVar = (*(uint *)(ptrVar1 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(ptrVar1 + 3) & 0x800082) == 0) && (ptrVar1[4] != 0x10c2a8)) &&\n           ((*(byte *)(ptrVar1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (printDebugSymbols != 0) {\n          if (sortBySize == 0) goto LAB_00104a53;\nprocess_symbols_00104d5b:\n          if ((ptrVar1[4] != 0x10c2a8) && (ptrVar1[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(ptrVar1 + 3) & 4) != 0);\n      if (sortBySize != 0) goto process_symbols_00104d5b;\nLAB_00104a53:\n      inReg9 = (undefined8 *)(ulong)definedOnly;\n      if (definedOnly == 0) {\n        charVar = (**(code **)(unaffRbp[1] + 0x230))(unaffRbp);\n        if (charVar != '\\0') {\n          printSymbols_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (ptrVar1[4] == 0x10c2a8);\nLAB_00104cba:\n    charVar = (**(code **)(unaffRbp[1] + 0x230))(unaffRbp);\n    if (charVar != '\\0') {\n      printSymbols_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  ptrVar13 = (undefined8 *)((long)unaffR12 * (long)unaffR14);\n  unaffR12 = (undefined8 *)((long)localVar3 + (long)ptrVar13);\n  unaffRbx = localVar3;\n  ptrVar12 = unaffRbp;\n  if (localVar3 < unaffR12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unaffRetaddr = (ulong)boolVar;\n  unaffR13 = localVar3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_symbols_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_00106530",
                "iVar1": "errorStatus",
                "uVar2": "errorMessage",
                "lVar3": "lineNumber"
            },
            "code": "\n\n\nvoid printError_00106530(void)\n\n{\n  int errorStatus;\n  undefined8 errorMessage;\n  long lineNumber;\n  undefined8 in_R10;\n  \n  bfd_nonfatal();\n  lineNumber = 1;\n  xexit();\n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorStatus);\n  }\n  fflush(_stdout);\n  if (lineNumber != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,lineNumber,errorMessage,in_R10);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,in_R10);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103463",
                "non_numeric_forward.cold",
                "get_relocs",
                "size_forward1",
                "display_rel_file",
                "FUN_00104d5b",
                "print_symbol",
                "display_file",
                "numeric_forward.cold"
            ],
            "imported": false,
            "current_name": "print_error_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "print_unicode_string_0010268b",
                "puVar1": "ptr",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "int1",
                "sVar5": "strLen",
                "puVar6": "ptr2",
                "pcVar7": "str1",
                "uVar8": "ulong1",
                "uVar9": "ulong2",
                "puVar10": "ptr3",
                "puVar11": "ptr4",
                "unaff_RBP": "unaff_reg1",
                "puVar12": "ptr5",
                "unaff_R12": "unaff_reg2",
                "unaff_R13": "unaff_reg3",
                "lVar13": "long1",
                "uVar14": "uint1",
                "unaff_R14": "unaff_reg4",
                "unaff_R15": "unaff_reg5",
                "bVar15": "byte3",
                "__s": "str2",
                "in_stack_00000038": "inStackVar"
            },
            "code": "\nvoid printUnicodeString_0010268b(void)\n\n{\n  undefined8 *ptr;\n  byte byte1;\n  byte byte2;\n  int int1;\n  size_t strLen;\n  undefined8 *ptr2;\n  char *str1;\n  ulong ulong1;\n  undefined8 ulong2;\n  undefined *ptr3;\n  undefined8 *ptr4;\n  long unaff_reg1;\n  undefined8 *ptr5;\n  undefined *unaff_reg2;\n  undefined8 *unaff_reg3;\n  long long1;\n  uint uint1;\n  char *unaff_reg4;\n  long unaff_reg5;\n  byte byte3;\n  char *str2;\n  undefined8 inStackVar;\n  \n  byte3 = 0;\n  ptr5 = unaff_reg3;\n  if (unicode_display != 0) {\n    do {\n      byte1 = *(byte *)ptr5;\n      if (byte1 == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (ptr5 = (undefined8 *)((long)ptr5 + 1), byte1 < 0xc0));\n    strLen = strlen((char *)unaff_reg3);\n    ptr5 = buffer_8;\n    ptr4 = unaff_reg3;\n    if (buffer_len_9 < strLen * 9) {\n      free(buffer_8);\n      strLen = strlen((char *)unaff_reg3);\n      buffer_len_9 = strLen * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      ptr5 = buffer_8;\n    }\n    while( true ) {\n      unaff_reg3 = buffer_8;\n      byte1 = *(byte *)ptr4;\n      ptr = (undefined8 *)((long)ptr4 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (unicode_display == 0)) {\n          *(byte *)ptr5 = byte1;\n          ptr5 = (undefined8 *)((long)ptr5 + 1);\n          ptr4 = ptr;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = ptr5;\n            if ((byte1 & 0x20) == 0) {\n              switch(unicode_display) {\n              case 1:\n                uint1 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long1 = 2;\n                goto LAB_00102917;\n              case 4:\n                int1 = isatty(1);\n                if (int1 == 0) {\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                }\n                else {\n                  *(undefined *)(ptr5 + 1) = 0;\n                  *ptr5 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                  ptr2 = ptr5 + 1;\n                }\n              case 2:\n                uint1 = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr4 >> 2 & 7),\n                        (ulong)((*(byte *)ptr4 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uint1 = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(unicode_display) {\n                case 1:\n                  uint1 = 3;\nLAB_00102a62:\n                  for (ulong1 = (ulong)uint1; ulong1 != 0; ulong1 = ulong1 - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + (ulong)byte3 * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long1 = 3;\nLAB_00102917:\n                  ulong2 = 0x7b;\n                  if (unicode_display == 3) {\n                    ulong2 = 0x3c;\n                  }\n                  sprintf((char *)ptr5,\"%c\",ulong2);\n                  *(undefined *)((long)ptr5 + 3) = 0;\n                  ptr2 = (undefined8 *)(long1 + (long)ptr4);\n                  *(undefined2 *)((long)ptr5 + 1) = 0x7830;\n                  str1 = (char *)((long)ptr5 + 3);\n                  do {\n                    str2 = str1;\n                    byte1 = *(byte *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + 1);\n                    sprintf(str2,\"%02x\",(ulong)byte1);\n                    str1 = str2 + 2;\n                  } while (ptr4 != ptr2);\n                  ulong2 = 0x7d;\n                  if (unicode_display == 3) {\n                    ulong2 = 0x3e;\n                  }\n                  uint1 = (uint)long1;\n                  sprintf(str2 + 2,\"%c\",ulong2);\n                  ptr2 = (undefined8 *)(str2 + 3);\n                  break;\n                case 4:\n                  int1 = isatty(1);\n                  if (int1 == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                  }\n                  else {\n                    *(undefined *)(ptr5 + 1) = 0;\n                    *ptr5 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                    ptr2 = ptr5 + 1;\n                  }\n                case 2:\n                  uint1 = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((unicode_display == 4) && (int1 = isatty(1), int1 != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uint1 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)ptr4 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicode_display) {\n                case 1:\n                  uint1 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long1 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  int1 = isatty(1);\n                  if (int1 != 0) {\n                    *(undefined *)(ptr5 + 1) = 0;\n                    *ptr5 = 0x6d37343b31335b1b;\n                    ptr2 = ptr5 + 1;\n                  }\n                case 2:\n                  uint1 = 4;\n                  int1 = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)int1);\n                  goto LAB_00102a27;\n                default:\n                  uint1 = 4;\n                }\n              }\n            }\n            ulong1 = (ulong)(uint)((int)ptr2 - (int)ptr5);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)ptr5 = byte1;\n            uint1 = 1;\n            ulong1 = 1;\n          }\n          ptr5 = (undefined8 *)((long)ptr5 + ulong1);\n          ptr4 = (undefined8 *)((long)ptr + (ulong)(uint1 - 1));\n        }\n      }\n      else {\n        *(undefined *)ptr5 = 0x5e;\n        *(byte *)((long)ptr5 + 1) = byte1 + 0x40;\n        ptr5 = (undefined8 *)((long)ptr5 + 2);\n        ptr4 = ptr;\n      }\n    }\n    *(undefined *)ptr5 = 0;\n  }\nLAB_0010485e:\n  ptr5 = (undefined8 *)0x0;\n  if ((((unaff_reg1 != 0) && (*(long *)(unaff_reg1 + 0x10) != 0)) && (with_symbol_versions != 0)) &&\n     ((str1 = (char *)(**(code **)(*(long *)(unaff_reg5 + 8) + 0x220))\n                                  (unaff_reg5,*(long *)(unaff_reg1 + 0x10),0,\n                                   (long)&stack0x00000038 + 7), str1 != (char *)0x0 &&\n      (*str1 != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((inStackVar._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(unaff_reg1 + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    ptr5 = (undefined8 *)reconcat(0,unaff_reg3,ptr3,str1,0);\n    unaff_reg3 = ptr5;\n  }\n  printf(unaff_reg4,unaff_reg3);\n  if (unaff_reg2 != (undefined *)0x0) {\n    *unaff_reg2 = 0x40;\n  }\n  free(ptr5);\n  return;\n}\n\n",
            "called": [
                "free",
                "xmalloc",
                "isatty",
                "sprintf",
                "strlen",
                "FUN_001047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_unicode_string_0010268b"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00104d5b",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "non_numeric_forward"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "calculate_result_00103bec",
                "in_RAX": "input_value",
                "iVar1": "numeric_value",
                "auVar2": "result_array"
            },
            "code": "\nundefined  [16] calculate_result_00103bec(void)\n\n{\n  int numeric_value;\n  undefined8 input_value;\n  undefined result_array [16];\n  \n  numeric_value = numeric_forward();\n  result_array._0_4_ = -numeric_value;\n  result_array._4_4_ = 0;\n  result_array._8_8_ = input_value;\n  return result_array;\n}\n\n",
            "called": [
                "numeric_forward"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00103bec"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "message",
                "param_2": "arg_list",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "program_name": "application_name"
            },
            "code": "\n\n\nvoid printErrorMessage_001063a0(char *message,__gnuc_va_list arg_list)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",application_name);\n  vfprintf(standard_error,message,arg_list);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "fflush",
                "fprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_0010c208": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c208",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c208"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "print_unicode_string_00102739",
                "unaff_R13": "ptrUnicodeString",
                "do_demangle": "isDemangleEnabled",
                "unicode_display": "unicodeDisplayMode",
                "unaff_RBP": "ptrRBP",
                "unaff_R14": "ptrFormatString",
                "unaff_R15": "ptrR15",
                "puVar12": "ptrBuffer",
                "puVar7": "ptrOutput",
                "__ptr": "ptrTemp",
                "bVar2": "byteValue1",
                "bVar3": "byteValue2",
                "iVar4": "intValue",
                "sVar5": "size",
                "pcVar6": "ptrChar",
                "uVar9": "ulongValue",
                "uVar10": "ulongValue2",
                "puVar11": "ptrConstant",
                "lVar13": "longValue",
                "uVar14": "uintValue",
                "bVar15": "byteValue3",
                "__s": "ptrString",
                "in_stack_00000038": "var38"
            },
            "code": "\nvoid printUnicodeString_00102739(void)\n\n{\n  undefined8 *puVar1;\n  byte byteValue1;\n  byte byteValue2;\n  int intValue;\n  size_t size;\n  char *ptrChar;\n  undefined8 *ptrOutput;\n  char *pcVar8;\n  undefined8 *ptrTemp;\n  ulong ulongValue;\n  undefined8 ulongValue2;\n  undefined *ptrConstant;\n  long ptrRBP;\n  undefined8 *ptrBuffer;\n  undefined8 *ptrUnicodeString;\n  long longValue;\n  uint uintValue;\n  char *ptrFormatString;\n  long ptrR15;\n  byte byteValue3;\n  char *ptrString;\n  undefined8 var38;\n  \n  byteValue3 = 0;\n  ptrBuffer = ptrUnicodeString;\n  if (*(int *)(*(long *)(ptrR15 + 8) + 8) != 5) {\n    if (isDemangleEnabled != 0) {\n      ptrChar = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    ptrChar = (char *)0x0;\n    if (unicodeDisplayMode == 0) {\nLAB_00104794:\n      ptrTemp = (undefined8 *)0x0;\n    }\n    else {\n      ptrTemp = (undefined8 *)0x0;\n      if (ptrUnicodeString != (undefined8 *)0x0) goto LAB_0010269d;\n      ptrTemp = (undefined8 *)0x0;\n      ptrUnicodeString = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  ptrChar = strchr((char *)ptrUnicodeString,0x40);\n  if (ptrChar == (char *)0x0) {\n    if (isDemangleEnabled != 0) goto LAB_0010482b;\n    if (unicodeDisplayMode == 0) {\n      if (ptrRBP == 0) {\n        ptrTemp = (undefined8 *)0x0;\n        printf(ptrFormatString);\n      }\n      else {\n        if (*(long *)(ptrRBP + 0x10) != 0) {\n          print_string_and_free_memory_001047d0();\n          return;\n        }\n        ptrTemp = (undefined8 *)0x0;\n        printf(ptrFormatString);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    ptrBuffer = ptrUnicodeString;\n    ptrTemp = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byteValue1 = *(byte *)ptrBuffer;\n      if (byteValue1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byteValue1 * 2] & 2) == 0) &&\n            (ptrBuffer = (undefined8 *)((long)ptrBuffer + 1), byteValue1 < 0xc0));\n    size = strlen((char *)ptrUnicodeString);\n    ptrBuffer = buffer_8;\n    if (buffer_len_9 < size * 9) {\n      free(buffer_8);\n      size = strlen((char *)ptrUnicodeString);\n      buffer_len_9 = size * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      ptrBuffer = buffer_8;\n    }\n    while( true ) {\n      ptrOutput = buffer_8;\n      byteValue1 = *(byte *)ptrUnicodeString;\n      puVar1 = (undefined8 *)((long)ptrUnicodeString + 1);\n      if (byteValue1 == 0) break;\n      if (((&_sch_istable)[(ulong)byteValue1 * 2] & 2) == 0) {\n        if ((byteValue1 < 0xc0) || (unicodeDisplayMode == 0)) {\n          *(byte *)ptrBuffer = byteValue1;\n          ptrBuffer = (undefined8 *)((long)ptrBuffer + 1);\n          ptrUnicodeString = puVar1;\n        }\n        else {\n          byteValue2 = *(byte *)((long)ptrUnicodeString + 1);\n          if ((byteValue2 & 0xc0) == 0x80) {\n            ptrOutput = ptrBuffer;\n            if ((byteValue1 & 0x20) == 0) {\n              switch(unicodeDisplayMode) {\n              case 1:\n                uintValue = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longValue = 2;\n                goto LAB_00102917;\n              case 4:\n                intValue = isatty(1);\n                if (intValue == 0) {\n                  byteValue2 = *(byte *)((long)ptrUnicodeString + 1);\n                }\n                else {\n                  *(undefined *)(ptrBuffer + 1) = 0;\n                  *ptrBuffer = 0x6d37343b31335b1b;\n                  byteValue2 = *(byte *)((long)ptrUnicodeString + 1);\n                  ptrOutput = ptrBuffer + 1;\n                }\n              case 2:\n                uintValue = 2;\n                sprintf((char *)ptrOutput,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptrUnicodeString >> 2 & 7)\n                        ,(ulong)((*(byte *)ptrUnicodeString & 3) << 6 | byteValue2 & 0x3f));\n                ptrOutput = (undefined8 *)((long)ptrOutput + 6);\n                goto LAB_00102a27;\n              default:\n                uintValue = 2;\n              }\n            }\n            else {\n              byteValue2 = *(byte *)((long)ptrUnicodeString + 2);\n              if ((byteValue2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byteValue1 & 0x10) == 0) {\n                switch(unicodeDisplayMode) {\n                case 1:\n                  uintValue = 3;\nLAB_00102a62:\n                  for (ulongValue = (ulong)uintValue; ulongValue != 0; ulongValue = ulongValue - 1) {\n                    *(undefined *)ptrOutput = *(undefined *)ptrUnicodeString;\n                    ptrUnicodeString = (undefined8 *)((long)ptrUnicodeString + (ulong)byteValue3 * -2 + 1);\n                    ptrOutput = (undefined8 *)((long)ptrOutput + (ulong)byteValue3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longValue = 3;\nLAB_00102917:\n                  ulongValue2 = 0x7b;\n                  if (unicodeDisplayMode == 3) {\n                    ulongValue2 = 0x3c;\n                  }\n                  sprintf((char *)ptrBuffer,\"%c\",ulongValue2);\n                  *(undefined *)((long)ptrBuffer + 3) = 0;\n                  ptrOutput = (undefined8 *)(longValue + (long)ptrUnicodeString);\n                  *(undefined2 *)((long)ptrBuffer + 1) = 0x7830;\n                  pcVar8 = (char *)((long)ptrBuffer + 3);\n                  do {\n                    ptrString = pcVar8;\n                    byteValue1 = *(byte *)ptrUnicodeString;\n                    ptrUnicodeString = (undefined8 *)((long)ptrUnicodeString + 1);\n                    sprintf(ptrString,\"%02x\",(ulong)byteValue1);\n                    pcVar8 = ptrString + 2;\n                  } while (ptrUnicodeString != ptrOutput);\n                  ulongValue2 = 0x7d;\n                  if (unicodeDisplayMode == 3) {\n                    ulongValue2 = 0x3e;\n                  }\n                  uintValue = (uint)longValue;\n                  sprintf(ptrString + 2,\"%c\",ulongValue2);\n                  ptrOutput = (undefined8 *)(ptrString + 3);\n                  break;\n                case 4:\n                  intValue = isatty(1);\n                  if (intValue == 0) {\n                    byteValue2 = *(byte *)((long)ptrUnicodeString + 2);\n                  }\n                  else {\n                    *(undefined *)(ptrBuffer + 1) = 0;\n                    *ptrBuffer = 0x6d37343b31335b1b;\n                    byteValue2 = *(byte *)((long)ptrUnicodeString + 2);\n                    ptrOutput = ptrBuffer + 1;\n                  }\n                case 2:\n                  uintValue = 3;\n                  sprintf((char *)ptrOutput,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptrUnicodeString & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptrUnicodeString + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptrUnicodeString + 1) & 3) << 6 | byteValue2 & 0x3f));\n                  ptrOutput = (undefined8 *)((long)ptrOutput + 6);\nLAB_00102a27:\n                  if ((unicodeDisplayMode == 4) && (intValue = isatty(1), intValue != 0)) {\n                    *(undefined4 *)ptrOutput = 0x6d305b1b;\n                    ptrOutput = (undefined8 *)((long)ptrOutput + 4);\n                    *(undefined *)ptrOutput = 0;\n                  }\n                  break;\n                default:\n                  uintValue = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)ptrUnicodeString + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicodeDisplayMode) {\n                case 1:\n                  uintValue = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longValue = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intValue = isatty(1);\n                  if (intValue != 0) {\n                    *(undefined *)(ptrBuffer + 1) = 0;\n                    *ptrBuffer = 0x6d37343b31335b1b;\n                    ptrOutput = ptrBuffer + 1;\n                  }\n                case 2:\n                  uintValue = 4;\n                  intValue = sprintf((char *)ptrOutput,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptrUnicodeString & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptrUnicodeString + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptrUnicodeString + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptrUnicodeString + 2) >> 2 & 0xfU));\n                  ptrOutput = (undefined8 *)((long)ptrOutput + (long)intValue);\n                  goto LAB_00102a27;\n                default:\n                  uintValue = 4;\n                }\n              }\n            }\n            ulongValue = (ulong)(uint)((int)ptrOutput - (int)ptrBuffer);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)ptrBuffer = byteValue1;\n            uintValue = 1;\n            ulongValue = 1;\n          }\n          ptrBuffer = (undefined8 *)((long)ptrBuffer + ulongValue);\n          ptrUnicodeString = (undefined8 *)((long)puVar1 + (ulong)(uintValue - 1));\n        }\n      }\n      else {\n        *(undefined *)ptrBuffer = 0x5e;\n        *(byte *)((long)ptrBuffer + 1) = byteValue1 + 0x40;\n        ptrBuffer = (undefined8 *)((long)ptrBuffer + 2);\n        ptrUnicodeString = puVar1;\n      }\n    }\n    *(undefined *)ptrBuffer = 0;\n    ptrUnicodeString = ptrOutput;\n  }\n  else {\n    *ptrChar = '\\0';\n    if (isDemangleEnabled == 0) {\n      if (unicodeDisplayMode == 0) goto LAB_00104794;\n      ptrTemp = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)ptrUnicodeString == '\\0') ||\n       (ptrBuffer = (undefined8 *)bfd_demangle(), ptrBuffer == (undefined8 *)0x0)) {\n      if (unicodeDisplayMode != 0) goto LAB_00102698;\n      ptrTemp = (undefined8 *)0x0;\n    }\n    else {\n      ptrUnicodeString = ptrBuffer;\n      ptrTemp = ptrBuffer;\n      if (unicodeDisplayMode != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((ptrRBP != 0) && (*(long *)(ptrRBP + 0x10) != 0)) && (with_symbol_versions != 0)) &&\n     ((pcVar8 = (char *)(**(code **)(*(long *)(ptrR15 + 8) + 0x220))\n                                  (ptrR15,*(long *)(ptrRBP + 0x10),0,\n                                   (long)&stack0x00000038 + 7), pcVar8 != (char *)0x0 &&\n      (*pcVar8 != '\\0')))) {\n    ptrConstant = &DAT_001071e0;\n    if ((var38._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(ptrRBP + 0x10) + 0x20) != 0x10c2a8)) {\n      ptrConstant = &DAT_001071df;\n    }\n    ptrTemp = (undefined8 *)reconcat(ptrTemp,ptrUnicodeString,ptrConstant,pcVar8,0);\n    ptrUnicodeString = ptrTemp;\n  }\n  printf(ptrFormatString,ptrUnicodeString);\n  if (ptrChar != (char *)0x0) {\n    *ptrChar = '@';\n  }\nLAB_001047ba:\n  free(ptrTemp);\n  return;\n}\n\n",
            "called": [
                "bfd_demangle",
                "strchr",
                "printf",
                "FUN_001047d0",
                "print_symname.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "print_symname"
            ],
            "imported": false,
            "current_name": "print_unicode_string_00102739"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "compare_and_forward_00105050",
                "param_1": "source_file",
                "param_2": "target_file",
                "cVar1": "last_char",
                "__s": "source_string",
                "__s_00": "target_string",
                "lVar3": "source_length",
                "lVar9": "source_info",
                "lVar10": "target_info",
                "uVar2": "target_length",
                "uVar11": "result",
                "uVar12": "source_end",
                "uVar13": "target_end",
                "uVar14": "source_offset",
                "uVar15": "critical_value",
                "uVar4": "is_gcc_compiled",
                "sVar5": "source_len",
                "sVar6": "target_len",
                "pcVar7": "gcc_compiled_1",
                "pcVar8": "gcc_compiled_2",
                "unaff_R13": "target_info",
                "bVar16": "comparison_result"
            },
            "code": "\nulong compare_and_forward_00105050(undefined8 source_file,undefined8 target_file)\n\n{\n  char last_char;\n  ulong target_length;\n  char *source_string;\n  char *target_string;\n  long source_length;\n  uint is_gcc_compiled;\n  size_t source_len;\n  size_t target_len;\n  char *gcc_compiled_1;\n  char *gcc_compiled_2;\n  long source_info;\n  long target_info;\n  ulong result;\n  ulong source_end;\n  ulong target_end;\n  ulong source_offset;\n  undefined8 critical_value;\n  long target_info;\n  bool comparison_result;\n  \n  source_info = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,source_file,sort_x);\n  result = (ulong)sort_dynamic;\n  target_info = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,result,target_file,sort_y);\n  if ((source_info != 0) && (target_info != 0)) {\n    source_length = *(long *)(target_info + 0x20);\n    if (*(long *)(source_info + 0x20) == 0x10c2a8) {\n      result = 0xffffffff;\n      if (source_length == 0x10c2a8) {\nLAB_001050fa:\n        result = non_numeric_forward(source_file,target_file);\n        return result;\n      }\n    }\n    else if (source_length == 0x10c2a8) {\n      result = 1;\n    }\n    else {\n      target_end = *(long *)(source_info + 0x10) + *(long *)(*(long *)(source_info + 0x20) + 0x30);\n      result = *(long *)(target_info + 0x10) + *(long *)(source_length + 0x30);\n      if (target_end == result) goto LAB_001050fa;\n      result = (ulong)(-(uint)(target_end < result) | 1);\n    }\n    return result;\n  }\n  critical_value = *sort_bfd;\n  bfd_fatal();\n  source_info = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,critical_value,sort_x);\n  target_info = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,result,sort_y);\n  if ((source_info == 0) || (target_info = target_info, target_info == 0)) {\n    target_info = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(source_info + 0x20) == 0x10c2a8) || (*(long *)(target_info + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  target_end = *(ulong *)(*(long *)(source_info + 0x20) + 0x30);\n  target_length = *(ulong *)(*(long *)(target_info + 0x20) + 0x30);\n  source_offset = *(long *)(source_info + 0x10) + target_end;\n  source_end = *(long *)(target_info + 0x10) + target_length;\n  comparison_result = source_offset < source_end;\n  if ((source_offset != source_end) || (comparison_result = target_end < target_length, target_end != target_length)) {\n    return (ulong)(-(uint)comparison_result | 1);\n  }\n  source_string = *(char **)(source_info + 8);\n  target_string = *(char **)(target_info + 8);\n  source_len = strlen(source_string);\n  target_len = strlen(target_string);\n  gcc_compiled_1 = strstr(source_string,\"gnu_compiled\");\n  if (gcc_compiled_1 == (char *)0x0) {\n    gcc_compiled_2 = strstr(source_string,\"gcc2_compiled\");\n    gcc_compiled_1 = strstr(target_string,\"gnu_compiled\");\n    if ((gcc_compiled_1 == (char *)0x0) && (gcc_compiled_1 = strstr(target_string,\"gcc2_compiled\"), gcc_compiled_1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (gcc_compiled_2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    gcc_compiled_1 = strstr(target_string,\"gnu_compiled\");\n    if (gcc_compiled_1 == (char *)0x0) {\n      gcc_compiled_2 = strstr(target_string,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (gcc_compiled_2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  is_gcc_compiled = *(uint *)(target_info + 0x18) & 0x4000;\n  if ((*(byte *)(source_info + 0x19) & 0x40) == 0) {\n    if ((source_len < 3) || (source_string[source_len - 2] != '.')) {\n      if (is_gcc_compiled != 0) {\n        return 1;\n      }\n      if ((target_len < 3) || (target_string[target_len - 2] != '.')) goto LAB_00103202;\n      comparison_result = false;\n      goto LAB_001031e7;\n    }\n    last_char = source_string[source_len - 1];\n    comparison_result = last_char == 'o' || last_char == 'a';\n    if (is_gcc_compiled == 0) {\n      if ((target_len < 3) || (target_string[target_len - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (is_gcc_compiled != 0) goto LAB_00103202;\n    if (target_len < 3) {\n      return 0xffffffff;\n    }\n    if (target_string[target_len - 2] != '.') {\n      return 0xffffffff;\n    }\n    comparison_result = true;\nLAB_001031e7:\n    if ((target_string[target_len - 1] != 'o') && (target_string[target_len - 1] != 'a')) {\n      if (comparison_result) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!comparison_result) {\n    return 1;\n  }\nLAB_00103202:\n  result = non_numeric_forward(critical_value,result);\n  return result;\n}\n\n",
            "called": [
                "non_numeric_forward",
                "numeric_forward.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "numeric_reverse"
            ],
            "imported": false,
            "current_name": "compare_and_forward_00105050"
        },
        "FUN_0010c168": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c168",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010c168"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "process_symbols_001049c0",
                "pcVar1": "symbolName",
                "pcVar2": "sortFunction",
                "cVar3": "result",
                "iVar4": "comparisonResult",
                "uVar5": "isMatching",
                "uVar6": "errorString",
                "lVar7": "tempValue2",
                "uVar18": "isDynamic",
                "unaff_retaddr": "unaff_returnAddress",
                "bVar17": "loopVariable",
                "puVar8": "symbolData",
                "puVar11": "symbolData1",
                "puVar12": "symbolData2",
                "puVar13": "comparisonSymbolArray",
                "puVar14": "tempSymbolData",
                "puVar15": "symbolDataArray",
                "unaff_RBX": "tempPointer1",
                "unaff_RBP": "comparisonSymbolPointer",
                "unaff_R12": "unaff_register12",
                "unaff_R13": "unaff_register13",
                "unaff_R14": "unaff_register14",
                "unaff_R15": "unaff_register15",
                "bVar16": "isSortBySize",
                "__ptr": "tempPointer",
                "puVar10": "comparisonResult2",
                "lVar9": "tempValue1"
            },
            "code": "\nvoid processSymbols_001049c0(void)\n\n{\n  char *symbolName;\n  code *sortFunction;\n  char result;\n  int comparisonResult;\n  uint isMatching;\n  undefined8 errorString;\n  long tempValue2;\n  undefined8 *symbolData;\n  long tempValue1;\n  undefined8 *comparisonResult2;\n  undefined8 *tempPointer1;\n  undefined8 *tempPointer;\n  undefined8 *comparisonSymbolPointer;\n  undefined8 *symbolData1;\n  undefined8 *symbolData2;\n  undefined8 *in_R8;\n  undefined8 *comparisonSymbolArray;\n  undefined8 *in_R9;\n  undefined8 *tempSymbolData;\n  undefined8 *symbolDataArray;\n  undefined8 *unaff_register12;\n  undefined8 *unaff_register13;\n  undefined8 *unaff_register14;\n  undefined8 *unaff_register15;\n  bool isSortBySize;\n  byte loopVariable;\n  ulong unaff_returnAddress;\n  ulong isDynamic;\n  undefined8 in_stack_00000008;\n  undefined8 *in_stack_00000010;\n  undefined8 *in_stack_00000018;\n  undefined8 in_stack_00000038;\n  void *in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  loopVariable = 0;\n  do {\n    tempPointer1 = (undefined8 *)((long)tempPointer1 + (long)unaff_register14);\nLAB_001049c3:\n    do {\n      do {\n        unaff_register13 = (undefined8 *)((long)unaff_register13 + (long)unaff_register14);\n        symbolDataArray = unaff_register12;\n        symbolData2 = comparisonSymbolPointer;\n        if (unaff_register12 <= unaff_register13) goto LAB_00104b15;\nLAB_001049cf:\n        symbolData = (undefined8 *)\n                 (**(code **)(comparisonSymbolPointer[1] + 0x270))\n                           (comparisonSymbolPointer,unaff_returnAddress & 0xffffffff,unaff_register13,unaff_register15);\n        symbolData1 = comparisonSymbolPointer;\n        symbolData2 = unaff_register13;\n        symbolDataArray = unaff_register15;\n        if (symbolData == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbolName = (char *)symbolData[1];\n        if (((symbolName == (char *)0x0) || (*symbolName != '_')) || (symbolName[1] != '_')) {\nLAB_00104a03:\n          if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          isMatching = (uint)(symbolData[4] == 0x10c2a8);\nLAB_00104af9:\n          if (isMatching != 0) goto LAB_00104a2d;\n          unaff_register13 = (undefined8 *)((long)unaff_register13 + (long)unaff_register14);\n          symbolDataArray = unaff_register12;\n          symbolData2 = comparisonSymbolPointer;\n          if (unaff_register12 <= unaff_register13) {\nLAB_00104b15:\n            tempPointer1 = (undefined8 *)((long)tempPointer1 - (long)in_stack_00000018);\n            if (unaff_register14 == (undefined8 *)0x8) {\n              tempValue1 = symbolData2[1];\n              symbolData1 = (undefined8 *)((long)tempPointer1 + 7);\n              if (-1 < (long)tempPointer1) {\n                symbolData1 = tempPointer1;\n              }\n              in_R8 = (undefined8 *)(ulong)no_sort;\n              sortFunction = *(code **)(tempValue1 + 0x208);\n              symbolData1 = (undefined8 *)((long)symbolData1 >> 3);\n            }\n            else {\n              symbolData1 = (undefined8 *)((long)tempPointer1 / (long)unaff_register14);\n              tempValue1 = symbolData2[1];\n              sortFunction = *(code **)(tempValue1 + 0x208);\n            }\n            comparisonSymbolPointer = symbolData2;\n            if (no_sort == 0) {\n              sort_dynamic = dynamic != 0;\n              sort_bfd = symbolData2;\n              sort_x = (undefined8 *)(*sortFunction)(symbolData2);\n              sort_y = (undefined8 *)(**(code **)(symbolData2[1] + 0x208))(symbolData2);\n              tempPointer1 = in_stack_00000048;\n              if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n                bfd_fatal(*symbolData2);\n                tempPointer = unaff_register15;\n                goto LAB_00102d8e;\n              }\n              unaff_register12 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              if (sort_by_size != 0) {\n                isDynamic = (ulong)(dynamic != 0);\n                qsort(in_stack_00000048,(size_t)symbolData1,(size_t)unaff_register12,size_forward1);\n                symbolDataArray = (undefined8 *)xmalloc((long)symbolData1 << 4);\n                comparisonSymbolArray = sort_x;\n                comparisonSymbolPointer = sort_y;\n                unaff_register14 = (undefined8 *)((long)symbolData1 * (long)unaff_register12 + (long)tempPointer1);\n                symbolData = sort_x;\n                in_R9 = sort_y;\n                if (unaff_register14 <= tempPointer1) goto LAB_00102ec2;\n                symbolData1 = (undefined8 *)\n                          (**(code **)(symbolData2[1] + 0x270))(symbolData2,isDynamic & 0xffffffff,tempPointer1);\n                tempPointer = tempPointer1;\n                in_R8 = unaff_register12;\n                in_stack_00000010 = symbolDataArray;\n                if (symbolData1 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(in_stack_00000048,(size_t)symbolData1,(size_t)unaff_register12,\n                    *(__compar_fn_t *)\n                     (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n              tempValue1 = symbolData2[1];\n            }\n            tempPointer = (undefined8 *)0x0;\n            do {\n              symbolData2 = in_stack_00000048;\n              symbolData = (undefined8 *)(ulong)sort_by_size;\n              unaff_register14 = (undefined8 *)(ulong)(dynamic != 0);\n              if (sort_by_size != 0) {\n                symbolDataArray = (undefined8 *)(**(code **)(tempValue1 + 0x208))(comparisonSymbolPointer);\n                if (symbolDataArray == (undefined8 *)0x0) goto LAB_00102ed2;\n                tempPointer1 = tempPointer + (long)symbolData1 * 2;\n                symbolData1 = tempPointer;\n                do {\n                  if (tempPointer1 <= symbolData1) {\nLAB_00104c75:\n                    if (in_stack_00000040 == (void *)0x0) {\n                      free(in_stack_00000048);\n                      free(tempPointer);\n                      return;\n                    }\n                    free(in_stack_00000040);\n                    free(in_stack_00000048);\n                    free(tempPointer);\n                    return;\n                  }\n                  symbolData = symbolDataArray;\n                  tempValue1 = (**(code **)(comparisonSymbolPointer[1] + 0x270))(comparisonSymbolPointer,unaff_register14,*symbolData1);\n                  if (tempValue1 == 0) {\n                    bfd_fatal(*comparisonSymbolPointer,0);\nLAB_00102ed2:\n                    symbolData2 = (undefined8 *)*comparisonSymbolPointer;\n                    bfd_fatal();\n                    comparisonSymbolArray = in_R8;\n                    tempSymbolData = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  symbolData2 = symbolData1 + 1;\n                  symbolData1 = symbolData1 + 2;\n                  print_symbol(comparisonSymbolPointer,tempValue1,*symbolData2,in_stack_00000008);\n                } while( true );\n              }\n              unaff_register12 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              unaff_register15 = (undefined8 *)(**(code **)(tempValue1 + 0x208))(comparisonSymbolPointer);\n              if (unaff_register15 == (undefined8 *)0x0) {\n                bfd_fatal(*comparisonSymbolPointer);\n                symbolData2 = unaff_register12;\n                if (dynamic == 0) {\n                  tempValue1 = (**(code **)(comparisonSymbolPointer[1] + 0x350))(comparisonSymbolPointer);\n                  symbolData1 = in_stack_00000048;\n                  symbolDataArray = unaff_register12;\n                  if (tempValue1 < 1) {\n                    symbolData = (undefined8 *)0x0;\n                    tempPointer1 = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    tempPointer1 = (undefined8 *)xmalloc();\n                    symbolData = (undefined8 *)(**(code **)(comparisonSymbolPointer[1] + 0x358))(comparisonSymbolPointer,tempPointer1);\n                    symbolData2 = symbolDataArray;\n                    if ((long)symbolData < 0) {\n                      symbolData2 = (undefined8 *)*comparisonSymbolPointer;\n                      symbolData1 = (undefined8 *)bfd_fatal(symbolData2,symbolDataArray);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  symbolData = unaff_register12;\n                  tempPointer1 = in_stack_00000048;\n                  symbolData1 = (undefined8 *)0x0;\n                  symbolDataArray = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = tempPointer1;\n                tempValue1 = (**(code **)(comparisonSymbolPointer[1] + 0x360))(comparisonSymbolPointer,symbolDataArray,symbolData1,symbolData);\n                unaff_register12 = symbolData2;\n                if (0 < tempValue1) {\n                  unaff_register12 = (undefined8 *)((long)symbolData2 + tempValue1);\n                  in_stack_00000048 = (undefined8 *)xrealloc(in_stack_00000048);\n                  tempValue2 = 0;\n                  do {\n                    in_stack_00000048[(long)((long)symbolData2 + tempValue2)] =\n                         (void *)(tempValue2 * 0x30 + (long)in_stack_00000040);\n                    tempValue2 = tempValue2 + 1;\n                  } while (tempValue1 != tempValue2);\n                  in_stack_00000048[(long)((long)symbolData2 + tempValue1)] = 0;\n                }\n                if ((dynamic == 0) && (tempPointer1 != (undefined8 *)0x0)) {\n                  free(tempPointer1);\n                }\n                if ((*(byte *)((long)comparisonSymbolPointer + 0x4a) & 0x10) != 0) {\n                  tempPointer1 = (undefined8 *)*comparisonSymbolPointer;\n                  report_plugin_err = '\\0';\n                  errorString = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(errorString);\n                }\n                unaff_register14 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n                isSortBySize = dynamic != 0;\n                symbolData1 = (undefined8 *)(ulong)isSortBySize;\n                symbolData = in_stack_00000048;\n                in_stack_00000018 = in_stack_00000048;\n                unaff_register15 = (undefined8 *)(**(code **)(comparisonSymbolPointer[1] + 0x208))(comparisonSymbolPointer);\n                if (unaff_register15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                symbolData1 = (undefined8 *)((long)symbolData1 * (long)unaff_register12 + (long)symbolData2);\n                tempPointer1 = symbolData2;\n                while( true ) {\n                  if (symbolData1 <= tempPointer1) goto LAB_00104c75;\n                  symbolData = unaff_register15;\n                  tempValue1 = (**(code **)(comparisonSymbolPointer[1] + 0x270))(comparisonSymbolPointer,unaff_register14,tempPointer1);\n                  if (tempValue1 == 0) break;\n                  tempPointer1 = (undefined8 *)((long)tempPointer1 + (long)unaff_register12);\n                  print_symbol(comparisonSymbolPointer,tempValue1,0,in_stack_00000008);\n                }\n                bfd_fatal(*comparisonSymbolPointer,0);\n              }\n              bfd_fatal(*comparisonSymbolPointer);\n              symbolData2 = comparisonSymbolPointer;\n              symbolDataArray = unaff_register15;\nLAB_00102eb0:\n              bfd_fatal(*symbolData1);\nLAB_00102eb9:\n              bfd_fatal(*symbolData2);\nLAB_00102ec2:\n              symbolData1 = (undefined8 *)0x0;\n              tempPointer = tempPointer1;\n              in_R8 = unaff_register12;\n              comparisonSymbolArray = symbolData;\n              comparisonSymbolPointer = in_R9;\n              in_stack_00000010 = symbolDataArray;\nLAB_00104e35:\n              while (in_R9 = comparisonSymbolArray, tempPointer < unaff_register14) {\n                tempPointer1 = (undefined8 *)((long)tempPointer + (long)in_R8);\n                if (tempPointer1 < unaff_register14) {\n                  symbolData = comparisonSymbolPointer;\n                  comparisonSymbolArray = in_R8;\n                  tempSymbolData = in_R9;\n                  comparisonResult2 = (undefined8 *)(**(code **)(symbolData2[1] + 0x270))();\n                  if (comparisonResult2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = tempSymbolData;\n                    in_R8 = comparisonSymbolArray;\n                    symbolData2 = (undefined8 *)*symbolData2;\n                    comparisonResult2 = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    symbolData = (undefined8 *)symbolData1[4];\n                    if ((*(uint *)(symbolData1 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  tempValue1 = symbolData1[2];\nLAB_00102ee7:\n                  if (symbolData == (undefined8 *)comparisonResult2[4]) {\n                    tempValue1 = comparisonResult2[2] - tempValue1;\n                    comparisonSymbolArray = comparisonSymbolPointer;\n                    tempSymbolData = tempPointer;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  tempValue1 = symbolData[8] - tempValue1;\n                  comparisonSymbolArray = comparisonSymbolPointer;\n                  tempSymbolData = tempPointer;\n                }\n                else {\n                  symbolData = (undefined8 *)symbolData1[4];\n                  if ((*(uint *)(symbolData1 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    tempValue1 = symbolData1[2];\n                    comparisonResult2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  comparisonResult2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  comparisonSymbolArray = comparisonSymbolPointer;\n                  tempSymbolData = tempPointer;\n                  if (*(int *)(symbolData2[1] + 8) == 5) {\n                    tempValue1 = symbolData1[7];\n                  }\n                  else {\n                    tempValue1 = symbolData1[2];\n                    if ((*(byte *)((long)symbolData + 0x25) & 0x10) == 0) {\n                      if (tempPointer1 < unaff_register14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                symbolData1 = comparisonResult2;\n                tempPointer = tempPointer1;\n                comparisonSymbolPointer = in_R9;\n                if (tempValue1 != 0) {\n                  *symbolDataArray = tempSymbolData;\n                  symbolDataArray[1] = tempValue1;\n                  symbolDataArray = symbolDataArray + 2;\n                }\n              }\n              symbolData1 = (undefined8 *)((long)symbolDataArray - (long)in_stack_00000010 >> 4);\n              qsort(in_stack_00000010,(size_t)symbolData1,0x10,size_forward2);\n              tempValue1 = symbolData2[1];\n              tempPointer1 = tempPointer;\n              comparisonSymbolPointer = symbolData2;\n              tempPointer = in_stack_00000010;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        comparisonResult = strcmp(symbolName + (symbolName[2] == '_'),\"__gnu_lto_slim\");\n        in_stack_00000010 = symbolData;\n        if (comparisonResult == 0) {\n          if (report_plugin_err != '\\0') {\n            in_stack_00000010 = (undefined8 *)*comparisonSymbolPointer;\n            report_plugin_err = '\\0';\n            errorString = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(errorString,in_stack_00000010);\n          }\n          goto LAB_00104a03;\n        }\n        if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (external_only == 0) {\n          if (non_weak == 0) goto LAB_00104a2d;\n          isMatching = (*(uint *)(symbolData + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(symbolData + 3) & 0x800082) == 0) && (symbolData[4] != 0x10c2a8)) &&\n           ((*(byte *)(symbolData[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (print_debug_syms != 0) {\n          if (sort_by_size == 0) goto LAB_00104a53;\nprocess_symbols_00104d5b:\n          if ((symbolData[4] != 0x10c2a8) && (symbolData[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(symbolData + 3) & 4) != 0);\n      if (sort_by_size != 0) goto process_symbols_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)defined_only;\n      if (defined_only == 0) {\n        result = (**(code **)(comparisonSymbolPointer[1] + 0x230))(comparisonSymbolPointer);\n        if (result != '\\0') {\n          display_rel_file_cold();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (symbolData[4] == 0x10c2a8);\nLAB_00104cba:\n    result = (**(code **)(comparisonSymbolPointer[1] + 0x230))(comparisonSymbolPointer);\n    if (result != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\nLAB_00104a7b:\n    if (tempPointer1 != unaff_register13) {\n      if (unaff_register14 == (undefined8 *)0x8) {\n        *tempPointer1 = *unaff_register13;\n        processSymbols_001049c0();\n        return;\n      }\n      for (; unaff_register14 != (undefined8 *)0x0; unaff_register14 = (undefined8 *)((long)unaff_register14 + -1)) {\n        *(undefined *)tempPointer1 = *(undefined *)unaff_register13;\n        unaff_register13 = (undefined8 *)((long)unaff_register13 + (ulong)loopVariable * -2 + 1);\n        tempPointer1 = (undefined8 *)((long)tempPointer1 + (ulong)loopVariable * -2 + 1);\n      }\n      processSymbols_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  symbolDataArray = (undefined8 *)((long)unaff_register12 * (long)unaff_register14);\n  unaff_register12 = (undefined8 *)((long)in_stack_00000018 + (long)symbolDataArray);\n  tempPointer1 = in_stack_00000018;\n  symbolData2 = comparisonSymbolPointer;\n  if (in_stack_00000018 < unaff_register12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unaff_returnAddress = (ulong)isSortBySize;\n  unaff_register13 = in_stack_00000018;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_symbols_001049c0"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "set_print_width"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "display_symbol_help_00103ca0",
                "param_1": "outputFile",
                "param_2": "exitStatus",
                "lVar1": "programName",
                "iVar2": "totalCharCount",
                "iVar3": "symbolPrintCount",
                "pcVar4": "text",
                "lVar5": "spaceCount",
                "sVar6": "symbolLength",
                "__ptr": "targetList",
                "plVar7": "currentTarget",
                "ppcVar8": "demanglerList",
                "pcVar9": "separator",
                "local_3c": "charCount"
            },
            "code": "\nvoid displaySymbolHelp_00103ca0(FILE *outputFile,int exitStatus)\n\n{\n  long programName;\n  int totalCharCount;\n  int symbolPrintCount;\n  char *text;\n  long spaceCount;\n  size_t symbolLength;\n  long *targetList;\n  long *currentTarget;\n  char **demanglerList;\n  char *separator;\n  uint charCount;\n  \n  programName = program_name;\n  text = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,text,programName);\n  text = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*text == ' ') {\n    programName = 1;\n    do {\n      spaceCount = programName;\n      programName = spaceCount + 1;\n    } while (text[spaceCount] == ' ');\n    charCount = (uint)spaceCount;\n  }\n  else {\n    charCount = 0;\n  }\n  totalCharCount = fprintf(outputFile,\"%s\",text);\n  separator = \"\";\n  for (demanglerList = (char **)&libiberty_demanglers; *demanglerList != (char *)0x0; demanglerList = demanglerList + 3) {\n    symbolLength = strlen(*demanglerList);\n    if (0x4a < (long)totalCharCount + symbolLength) {\n      fprintf(outputFile,\"%.1s\\n\",separator);\n      separator = \"\";\n      totalCharCount = fprintf(outputFile,\"%.*s\",(ulong)charCount,text);\n    }\n    symbolPrintCount = fprintf(outputFile,\"%s\\\"%s\\\"\",separator,*demanglerList);\n    totalCharCount = totalCharCount + symbolPrintCount;\n    separator = \", \";\n  }\n  fputc(10,outputFile);\n  text = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(outputFile,text);\n  programName = program_name;\n  if (program_name == 0) {\n    text = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,text);\n  }\n  else {\n    text = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,text,programName);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    programName = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (programName == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitStatus == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitStatus);\n}\n\n",
            "called": [
                "free",
                "fputc",
                "exit",
                "bfd_target_list",
                "fseek",
                "usage.cold",
                "fprintf",
                "strlen",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_symbol_help_00103ca0"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "process_symbols_00104d5b",
                "pcVar1": "symbol_name",
                "pcVar2": "sort_function",
                "cVar3": "check_result",
                "iVar4": "comparison_result",
                "uVar5": "is_match",
                "uVar6": "error_message",
                "puVar7": "ptr_var",
                "lVar8": "loop_counter",
                "lVar9": "temp_variable",
                "unaff_retaddr": "return_address",
                "uVar18": "dynamic_flag",
                "param_7": "function_argument",
                "param_8": "param8",
                "param_9": "param9",
                "param_13": "param13",
                "param_14": "param14",
                "in_stack_00000038": "stack_var"
            },
            "code": "\nvoid process_symbols_00104d5b(void)\n\n{\n  char *symbol_name;\n  code *sort_function;\n  char check_result;\n  int comparison_result;\n  uint is_match;\n  undefined8 error_message;\n  undefined8 *ptr_var;\n  long loop_counter;\n  long temp_variable;\n  undefined8 *puVar10;\n  undefined8 *in_RCX;\n  undefined8 *unaff_RBX;\n  undefined8 *__ptr;\n  undefined8 *puVar11;\n  undefined8 *unaff_RBP;\n  undefined8 *puVar12;\n  undefined8 *in_R8;\n  undefined8 *puVar13;\n  undefined8 *in_R9;\n  undefined8 *puVar14;\n  undefined8 *puVar15;\n  undefined8 *unaff_R12;\n  undefined8 *unaff_R13;\n  undefined8 *unaff_R14;\n  undefined8 *unaff_R15;\n  bool bVar16;\n  byte bVar17;\n  ulong return_address;\n  ulong dynamic_flag;\n  undefined8 function_argument;\n  undefined8 *param8;\n  undefined8 *param9;\n  undefined8 stack_var;\n  void *param13;\n  undefined8 *param14;\n  \n  bVar17 = 0;\n  do {\n    if ((in_RCX[4] != 0x10c2a8) && (in_RCX[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      unaff_R13 = (undefined8 *)((long)unaff_R13 + (long)unaff_R14);\n      puVar15 = unaff_R12;\n      puVar12 = unaff_RBP;\n      if (unaff_R12 <= unaff_R13) goto LAB_00104b15;\nLAB_001049cf:\n      in_RCX = (undefined8 *)\n               (**(code **)(unaff_RBP[1] + 0x270))\n                         (unaff_RBP,return_address & 0xffffffff,unaff_R13,unaff_R15);\n      puVar11 = unaff_RBP;\n      puVar12 = unaff_R13;\n      puVar15 = unaff_R15;\n      if (in_RCX == (undefined8 *)0x0) goto LAB_00102eb0;\n      symbol_name = (char *)in_RCX[1];\n      if (((symbol_name == (char *)0x0) || (*symbol_name != '_')) || (symbol_name[1] != '_')) {\nLAB_00104a03:\n        if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        is_match = (uint)(in_RCX[4] == 0x10c2a8);\nLAB_00104af9:\n        if (is_match != 0) goto LAB_00104a2d;\n        unaff_R13 = (undefined8 *)((long)unaff_R13 + (long)unaff_R14);\n        puVar15 = unaff_R12;\n        puVar12 = unaff_RBP;\n        if (unaff_R12 <= unaff_R13) {\nLAB_00104b15:\n          unaff_RBX = (undefined8 *)((long)unaff_RBX - (long)param9);\n          if (unaff_R14 == (undefined8 *)0x8) {\n            temp_variable = puVar12[1];\n            puVar11 = (undefined8 *)((long)unaff_RBX + 7);\n            if (-1 < (long)unaff_RBX) {\n              puVar11 = unaff_RBX;\n            }\n            in_R8 = (undefined8 *)(ulong)no_sort;\n            sort_function = *(code **)(temp_variable + 0x208);\n            puVar11 = (undefined8 *)((long)puVar11 >> 3);\n          }\n          else {\n            puVar11 = (undefined8 *)((long)unaff_RBX / (long)unaff_R14);\n            temp_variable = puVar12[1];\n            sort_function = *(code **)(temp_variable + 0x208);\n          }\n          unaff_RBP = puVar12;\n          if (no_sort == 0) {\n            sort_dynamic = dynamic != 0;\n            sort_bfd = puVar12;\n            sort_x = (undefined8 *)(*sort_function)(puVar12);\n            sort_y = (undefined8 *)(**(code **)(puVar12[1] + 0x208))(puVar12);\n            unaff_RBX = param14;\n            if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n              bfd_fatal(*puVar12);\n              __ptr = unaff_R15;\n              goto LAB_00102d8e;\n            }\n            unaff_R12 = (undefined8 *)(ulong)stack_var._4_4_;\n            if (sort_by_size != 0) {\n              dynamic_flag = (ulong)(dynamic != 0);\n              qsort(param14,(size_t)puVar11,(size_t)unaff_R12,size_forward1);\n              puVar15 = (undefined8 *)xmalloc((long)puVar11 << 4);\n              puVar13 = sort_x;\n              unaff_RBP = sort_y;\n              unaff_R14 = (undefined8 *)((long)puVar11 * (long)unaff_R12 + (long)unaff_RBX);\n              in_RCX = sort_x;\n              in_R9 = sort_y;\n              if (unaff_R14 <= unaff_RBX) goto LAB_00102ec2;\n              puVar11 = (undefined8 *)\n                        (**(code **)(puVar12[1] + 0x270))(puVar12,dynamic_flag & 0xffffffff,unaff_RBX);\n              __ptr = unaff_RBX;\n              in_R8 = unaff_R12;\n              param8 = puVar15;\n              if (puVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(param14,(size_t)puVar11,(size_t)unaff_R12,\n                  *(__compar_fn_t *)\n                   (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n            temp_variable = puVar12[1];\n          }\n          __ptr = (undefined8 *)0x0;\n          do {\n            puVar12 = param14;\n            ptr_var = (undefined8 *)(ulong)sort_by_size;\n            unaff_R14 = (undefined8 *)(ulong)(dynamic != 0);\n            if (sort_by_size != 0) {\n              puVar15 = (undefined8 *)(**(code **)(temp_variable + 0x208))(unaff_RBP);\n              if (puVar15 == (undefined8 *)0x0) goto LAB_00102ed2;\n              unaff_RBX = __ptr + (long)puVar11 * 2;\n              puVar11 = __ptr;\n              do {\n                if (unaff_RBX <= puVar11) {\nLAB_00104c75:\n                  if (param13 != (void *)0x0) {\n                    free(param13);\n                    free(param14);\n                    free(__ptr);\n                    return;\n                  }\n                  free(param14);\n                  free(__ptr);\n                  return;\n                }\n                ptr_var = puVar15;\n                temp_variable = (**(code **)(unaff_RBP[1] + 0x270))(unaff_RBP,unaff_R14,*puVar11);\n                if (temp_variable == 0) {\n                  bfd_fatal(*unaff_RBP,0);\nLAB_00102ed2:\n                  puVar12 = (undefined8 *)*unaff_RBP;\n                  bfd_fatal();\n                  puVar13 = in_R8;\n                  puVar14 = in_R9;\n                  goto LAB_00102edb;\n                }\n                puVar12 = puVar11 + 1;\n                puVar11 = puVar11 + 2;\n                print_symbol(unaff_RBP,temp_variable,*puVar12,function_argument);\n              } while( true );\n            }\n            unaff_R12 = (undefined8 *)(ulong)stack_var._4_4_;\n            unaff_R15 = (undefined8 *)(**(code **)(temp_variable + 0x208))(unaff_RBP);\n            if (unaff_R15 == (undefined8 *)0x0) {\n              bfd_fatal(*unaff_RBP);\n              puVar12 = unaff_R12;\n              if (dynamic == 0) {\n                temp_variable = (**(code **)(unaff_RBP[1] + 0x350))(unaff_RBP);\n                puVar11 = param14;\n                puVar15 = unaff_R12;\n                if (temp_variable < 1) {\n                  ptr_var = (undefined8 *)0x0;\n                  unaff_RBX = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  unaff_RBX = (undefined8 *)xmalloc();\n                  ptr_var = (undefined8 *)(**(code **)(unaff_RBP[1] + 0x358))(unaff_RBP,unaff_RBX);\n                  puVar12 = puVar15;\n                  if ((long)ptr_var < 0) {\n                    puVar12 = (undefined8 *)*unaff_RBP;\n                    puVar11 = (undefined8 *)bfd_fatal(puVar12,puVar15);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                ptr_var = unaff_R12;\n                unaff_RBX = param14;\n                puVar11 = (undefined8 *)0x0;\n                puVar15 = (undefined8 *)0x0;\n              }\n              in_R9 = &stack0x00000040;\n              in_R8 = unaff_RBX;\n              temp_variable = (**(code **)(unaff_RBP[1] + 0x360))(unaff_RBP,puVar15,puVar11,ptr_var);\n              unaff_R12 = puVar12;\n              if (0 < temp_variable) {\n                unaff_R12 = (undefined8 *)((long)puVar12 + temp_variable);\n                param14 = (undefined8 *)xrealloc(param14);\n                loop_counter = 0;\n                do {\n                  param14[(long)puVar12 + loop_counter] = (void *)(loop_counter * 0x30 + (long)param13);\n                  loop_counter = loop_counter + 1;\n                } while (temp_variable != loop_counter);\n                param14[(long)puVar12 + temp_variable] = 0;\n              }\n              if ((dynamic == 0) && (unaff_RBX != (undefined8 *)0x0)) {\n                free(unaff_RBX);\n              }\n              if ((*(byte *)((long)unaff_RBP + 0x4a) & 0x10) != 0) {\n                unaff_RBX = (undefined8 *)*unaff_RBP;\n                report_plugin_err = '\\0';\n                error_message = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                non_fatal(error_message);\n              }\n              unaff_R14 = (undefined8 *)(ulong)stack_var._4_4_;\n              bVar16 = dynamic != 0;\n              puVar11 = (undefined8 *)(ulong)bVar16;\n              in_RCX = param14;\n              param9 = param14;\n              unaff_R15 = (undefined8 *)(**(code **)(unaff_RBP[1] + 0x208))(unaff_RBP);\n              if (unaff_R15 != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              puVar11 = (undefined8 *)((long)puVar11 * (long)unaff_R12 + (long)puVar12);\n              unaff_RBX = puVar12;\n              while( true ) {\n                if (puVar11 <= unaff_RBX) goto LAB_00104c75;\n                in_RCX = unaff_R15;\n                temp_variable = (**(code **)(unaff_RBP[1] + 0x270))(unaff_RBP,unaff_R14,unaff_RBX);\n                if (temp_variable == 0) break;\n                unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)unaff_R12);\n                print_symbol(unaff_RBP,temp_variable,0,function_argument);\n              }\n              bfd_fatal(*unaff_RBP,0);\n            }\n            bfd_fatal(*unaff_RBP);\n            puVar12 = unaff_RBP;\n            puVar15 = unaff_R15;\nLAB_00102eb0:\n            bfd_fatal(*puVar11);\nLAB_00102eb9:\n            bfd_fatal(*puVar12);\nLAB_00102ec2:\n            puVar11 = (undefined8 *)0x0;\n            __ptr = unaff_RBX;\n            in_R8 = unaff_R12;\n            puVar13 = in_RCX;\n            unaff_RBP = in_R9;\n            param8 = puVar15;\nLAB_00104e35:\n            while (in_R9 = puVar13, __ptr < unaff_R14) {\n              unaff_RBX = (undefined8 *)((long)__ptr + (long)in_R8);\n              if (unaff_RBX < unaff_R14) {\n                ptr_var = unaff_RBP;\n                puVar13 = in_R8;\n                puVar14 = in_R9;\n                puVar10 = (undefined8 *)(**(code **)(puVar12[1] + 0x270))();\n                if (puVar10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                  in_R9 = puVar14;\n                  in_R8 = puVar13;\n                  puVar12 = (undefined8 *)*puVar12;\n                  puVar10 = (undefined8 *)bfd_fatal();\n                }\n                else {\n                  ptr_var = (undefined8 *)puVar11[4];\n                  if ((*(uint *)(puVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                temp_variable = puVar11[2];\nLAB_00102ee7:\n                if (ptr_var == (undefined8 *)puVar10[4]) {\n                  temp_variable = puVar10[2] - temp_variable;\n                  puVar13 = unaff_RBP;\n                  puVar14 = __ptr;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                temp_variable = ptr_var[8] - temp_variable;\n                puVar13 = unaff_RBP;\n                puVar14 = __ptr;\n              }\n              else {\n                ptr_var = (undefined8 *)puVar11[4];\n                if ((*(uint *)(puVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  temp_variable = puVar11[2];\n                  puVar10 = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                puVar10 = (undefined8 *)0x0;\nLAB_00104e95:\n                puVar13 = unaff_RBP;\n                puVar14 = __ptr;\n                if (*(int *)(puVar12[1] + 8) == 5) {\n                  temp_variable = puVar11[7];\n                }\n                else {\n                  temp_variable = puVar11[2];\n                  if ((*(byte *)((long)ptr_var + 0x25) & 0x10) == 0) {\n                    if (unaff_RBX < unaff_R14) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              puVar11 = puVar10;\n              __ptr = unaff_RBX;\n              unaff_RBP = in_R9;\n              if (temp_variable != 0) {\n                *puVar15 = puVar14;\n                puVar15[1] = temp_variable;\n                puVar15 = puVar15 + 2;\n              }\n            }\n            puVar11 = (undefined8 *)((long)puVar15 - (long)param8 >> 4);\n            qsort(param8,(size_t)puVar11,0x10,size_forward2);\n            temp_variable = puVar12[1];\n            unaff_RBX = __ptr;\n            unaff_RBP = puVar12;\n            __ptr = param8;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      comparison_result = strcmp(symbol_name + (symbol_name[2] == '_'),\"__gnu_lto_slim\");\n      param8 = in_RCX;\n      if (comparison_result == 0) {\n        if (report_plugin_err != '\\0') {\n          param8 = (undefined8 *)*unaff_RBP;\n          report_plugin_err = '\\0';\n          error_message = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          non_fatal(error_message,param8);\n        }\n        goto LAB_00104a03;\n      }\n      if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (external_only == 0) {\n        if (non_weak == 0) goto LAB_00104a2d;\n        is_match = (*(uint *)(in_RCX + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(in_RCX + 3) & 0x800082) == 0) && (in_RCX[4] != 0x10c2a8)) &&\n         ((*(byte *)(in_RCX[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((print_debug_syms == 0) && ((*(byte *)(in_RCX + 3) & 4) != 0));\n  } while (sort_by_size != 0);\n  in_R9 = (undefined8 *)(ulong)defined_only;\n  if (defined_only == 0) {\n    check_result = (**(code **)(unaff_RBP[1] + 0x230))(unaff_RBP);\n    if (check_result != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  else {\n    if (in_RCX[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    check_result = (**(code **)(unaff_RBP[1] + 0x230))(unaff_RBP);\n    if (check_result != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  if (unaff_RBX != unaff_R13) {\n    if (unaff_R14 != (undefined8 *)0x8) {\n      for (; unaff_R14 != (undefined8 *)0x0; unaff_R14 = (undefined8 *)((long)unaff_R14 + -1)) {\n        *(undefined *)unaff_RBX = *(undefined *)unaff_R13;\n        unaff_R13 = (undefined8 *)((long)unaff_R13 + (ulong)bVar17 * -2 + 1);\n        unaff_RBX = (undefined8 *)((long)unaff_RBX + (ulong)bVar17 * -2 + 1);\n      }\n      process_symbols_00104d5b_001049c0();\n      return;\n    }\n    *unaff_RBX = *unaff_R13;\n    process_symbols_00104d5b_001049c0();\n    return;\n  }\n  unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)unaff_R14);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  puVar15 = (undefined8 *)((long)unaff_R12 * (long)unaff_R14);\n  unaff_R12 = (undefined8 *)((long)param9 + (long)puVar15);\n  unaff_RBX = param9;\n  puVar12 = unaff_RBP;\n  if (param9 < unaff_R12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  return_address = (ulong)bVar16;\n  unaff_R13 = param9;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "qsort",
                "free",
                "non_fatal",
                "xmalloc",
                "FUN_00104d5b",
                "print_symbol",
                "size_forward2",
                "xrealloc",
                "bfd_fatal",
                "size_forward1",
                "FUN_001049c0",
                "display_rel_file.cold",
                "strcmp",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_symbols_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "report_error_00106300",
                "param_1": "error_code_1",
                "param_2": "error_code_2",
                "param_3": "error_code_3",
                "param_4": "error_code_4",
                "param_5": "error_code_5",
                "param_6": "error_code_6",
                "param_7": "error_code_7",
                "param_8": "error_code_8",
                "in_AL": "flag",
                "__arg": "arg_list",
                "__format": "format_str",
                "local_d8": "local_variable_1",
                "local_d4": "local_variable_2",
                "local_d0": "local_ptr_1",
                "local_c8": "local_ptr_2",
                "local_b8": "local_buffer",
                "local_b0": "buffer_param_1",
                "local_a8": "buffer_param_2",
                "local_a0": "buffer_param_3",
                "local_98": "buffer_param_4",
                "local_90": "buffer_param_5",
                "local_88": "error_arg_1",
                "local_78": "error_arg_2",
                "local_68": "error_arg_3",
                "local_58": "error_arg_4",
                "local_48": "error_arg_5",
                "local_38": "error_arg_6",
                "local_28": "error_arg_7",
                "local_18": "error_arg_8"
            },
            "code": "\n\n\nvoid report_error_00106300(undefined4 error_code_1,undefined4 error_code_2,undefined4 error_code_3,undefined4 error_code_4,\n                 undefined4 error_code_5,undefined4 error_code_6,undefined4 error_code_7,undefined4 error_code_8,\n                 undefined8 param_9,undefined8 error_code_10,undefined8 error_code_11,undefined8 error_code_12,\n                 undefined8 error_code_13,undefined8 error_code_14)\n\n{\n  char flag;\n  undefined4 *arg_list;\n  char *format_str;\n  undefined4 local_variable_1;\n  undefined4 local_variable_2;\n  undefined *local_ptr_1;\n  undefined *local_ptr_2;\n  undefined local_buffer [8];\n  undefined8 buffer_param_1;\n  undefined8 buffer_param_2;\n  undefined8 buffer_param_3;\n  undefined8 buffer_param_4;\n  undefined8 buffer_param_5;\n  undefined4 error_arg_1;\n  undefined4 error_arg_2;\n  undefined4 error_arg_3;\n  undefined4 error_arg_4;\n  undefined4 error_arg_5;\n  undefined4 error_arg_6;\n  undefined4 error_arg_7;\n  undefined4 error_arg_8;\n  \n  arg_list = &local_variable_1;\n  if (flag != '\\0') {\n    error_arg_1 = error_code_1;\n    error_arg_2 = error_code_2;\n    error_arg_3 = error_code_3;\n    error_arg_4 = error_code_4;\n    error_arg_5 = error_code_5;\n    error_arg_6 = error_code_6;\n    error_arg_7 = error_code_7;\n    error_arg_8 = error_code_8;\n  }\n  local_ptr_1 = &stack0x00000008;\n  local_variable_1 = 8;\n  local_ptr_2 = local_buffer;\n  local_variable_2 = 0x30;\n  buffer_param_1 = error_code_10;\n  buffer_param_2 = error_code_11;\n  buffer_param_3 = error_code_12;\n  buffer_param_4 = error_code_13;\n  buffer_param_5 = error_code_14;\n  report();\n  format_str = (char *)0x1;\n  xexit();\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",program_name);\n  vfprintf(_stderr,format_str,arg_list);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "print_value.constprop.0.cold",
                "print_symbol_info_bsd",
                "main",
                "set_output_format",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "report_error_00106300"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_filename_00102f7b",
                "param_1": "filename",
                "filename_per_file": "is_filename_per_file",
                "filename_per_symbol": "is_filename_per_symbol"
            },
            "code": "\nvoid print_filename_00102f7b(undefined8 filename)\n\n{\n  if ((is_filename_per_file != 0) && (is_filename_per_symbol == 0)) {\n    printf(\"%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_filename_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "errorMessage",
                "iVar1": "error",
                "uVar2": "errorMessageText",
                "in_R10": "extraInfo",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "appName"
            },
            "code": "\n\n\nvoid printErrorMessage_00106540(long errorMessage)\n\n{\n  int error;\n  undefined8 errorMessageText;\n  undefined8 extraInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessageText = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessageText = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (errorMessage != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",appName,errorMessage,errorMessageText,extraInfo);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",appName,errorMessageText,extraInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "fflush",
                "bfd_get_error",
                "fprintf",
                "bfd_nonfatal.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "bfd_fatal",
                "display_file"
            ],
            "imported": false,
            "current_name": "print_error_message_00106540"
        },
        "FUN_0010c160": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c160",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010c160"
        }
    },
    "used_tokens": 95513,
    "layers": [
        [
            "FUN_001055a0",
            "FUN_00103c00",
            "FUN_0010370a",
            "FUN_00105500",
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00102fc3",
            "FUN_00103729",
            "FUN_00102000",
            "FUN_00103573",
            "FUN_00102fd2",
            "FUN_00102f9f",
            "FUN_001035a2",
            "FUN_00103463",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_0010249f",
            "FUN_001043d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_00104fa0",
            "FUN_001064a0",
            "FUN_001053b0",
            "FUN_001055f0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00106400",
            "FUN_00103533",
            "FUN_0010651a",
            "FUN_001053c0",
            "FUN_00103b49",
            "FUN_00103abf",
            "FUN_00103bf6",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_00106530",
            "FUN_0010268b",
            "FUN_00103bec",
            "FUN_001063a0",
            "FUN_00105050",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00106300",
            "FUN_00102f7b",
            "FUN_00106540"
        ],
        [
            "FUN_00104370",
            "FUN_00102475",
            "FUN_00105110",
            "FUN_00103a66",
            "FUN_001064b0",
            "FUN_00102739",
            "FUN_00104d5b"
        ],
        [
            "FUN_001048e0",
            "FUN_00104740"
        ],
        [
            "FUN_001054d0"
        ]
    ],
    "locked_functions": []
}