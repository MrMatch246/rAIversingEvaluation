{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_001025c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001027b0",
                "FUN_001025c0",
                "FUN_001023a0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001063e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_001061c8);\n  FUNC_001026f0();\n  DAT_001063e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_001026f0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102760",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_00102620": {
            "renaming": {
                "FUN_00102620": "initialize_data_00102620",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "param_5": "data5",
                "param_6": "data6",
                "param_7": "data7",
                "param_8": "data8",
                "param_9": "input1",
                "param_10": "input2",
                "param_11": "input3",
                "param_12": "input4",
                "param_13": "input5",
                "param_14": "input6",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "bufferSize",
                "local_d0": "localBuffer",
                "local_c8": "localArray",
                "local_b8": "temporaryBuffer",
                "local_b0": "temporaryVar1",
                "local_a8": "temporaryVar2",
                "local_a0": "temporaryVar3",
                "local_98": "temporaryVar4",
                "local_90": "temporaryVar5",
                "local_88": "temp1",
                "local_78": "temp2",
                "local_68": "temp3",
                "local_58": "temp4",
                "local_48": "temp5",
                "local_38": "temp6",
                "local_28": "temp7",
                "local_18": "temp8"
            },
            "code": "\nvoid initializeData_00102620(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4,\n                 undefined4 data5,undefined4 data6,undefined4 data7,undefined4 data8,\n                 undefined8 input1,undefined8 input2,undefined8 input3,undefined8 input4,\n                 undefined8 input5,undefined8 input6)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 bufferSize;\n  undefined *localBuffer;\n  undefined *localArray;\n  undefined temporaryBuffer [8];\n  undefined8 temporaryVar1;\n  undefined8 temporaryVar2;\n  undefined8 temporaryVar3;\n  undefined8 temporaryVar4;\n  undefined8 temporaryVar5;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined4 temp8;\n  \n  if (condition != '\\0') {\n    temp1 = data1;\n    temp2 = data2;\n    temp3 = data3;\n    temp4 = data4;\n    temp5 = data5;\n    temp6 = data6;\n    temp7 = data7;\n    temp8 = data8;\n  }\n  localBuffer = &stack0x00000008;\n  size = 8;\n  localArray = temporaryBuffer;\n  bufferSize = 0x30;\n  temporaryVar1 = input2;\n  temporaryVar2 = input3;\n  temporaryVar3 = input4;\n  temporaryVar4 = input5;\n  temporaryVar5 = input6;\n  FUN_001025c0(input1,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_001025c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102620",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "initialize_data_00102620"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "bfd_demangle": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_demangle"
        },
        "fgets": {
            "renaming": {},
            "code": "\n\n\nchar * fgets(char *__s,int __n,FILE *__stream)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = fgets(__s,__n,__stream);\n  return pcVar1;\n}\n\n",
            "called": [
                "fgets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "fgets"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00102720();\n  return;\n}\n\n",
            "called": [
                "FUN_00102720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027a0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_001025c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "FUN_001027b0": {
            "renaming": {
                "FUN_001027b0": "get_addresses_from_file_001027b0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePtr1",
                "puVar2": "uintPtr2",
                "bVar3": "byteVar3",
                "uVar4": "ushortVar4",
                "lVar5": "longVar5",
                "bVar6": "boolVar6",
                "bVar7": "boolVar7",
                "bVar8": "boolVar8",
                "pvVar9": "voidPtr9",
                "bVar10": "byteVar10",
                "cVar11": "charVar11",
                "iVar12": "intVar12",
                "uVar13": "uintVar13",
                "iVar14": "intVar14",
                "uVar15": "uintVar15",
                "__stream": "fileStream",
                "__s": "byteArr",
                "__ptr": "bytePtr",
                "puVar18": "undefinedPtr18",
                "pFVar19": "filePointer",
                "lVar20": "longVar20",
                "psVar21": "statStruct1",
                "uVar22": "undefined8Var22",
                "piVar23": "intPtr23",
                "ppuVar24": "undefinedPtrPtr24",
                "psVar35": "statStruct2",
                "plVar26": "longPtr26",
                "ppuVar33": "undefinedPtrPtr33",
                "iVar34": "intVar34",
                "uint": "uVar37",
                "local_148": "undefinedPtrPtr_local148",
                "local_140": "undefinedPtrPtr_local140",
                "local_120": "size_t_local120",
                "local_118": "long_local118",
                "local_d0": "longPtr_locald0",
                "local_c8": "statStruct_localc8"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined8 getAddressesFromFile_001027b0(uVar37 argc,FILE *argv)\n\n{\n  byte *bytePtr1;\n  uVar37 *uintPtr2;\n  byte byteVar3;\n  ushort ushortVar4;\n  long longVar5;\n  bool boolVar6;\n  bool boolVar7;\n  bool boolVar8;\n  void *voidPtr9;\n  byte byteVar10;\n  char charVar11;\n  int intVar12;\n  uVar37 uintVar13;\n  int intVar14;\n  undefined4 uintVar15;\n  FILE *fileStream;\n  byte *byteArr;\n  undefined **ppuVar16;\n  size_t sVar17;\n  byte *bytePtr;\n  undefined *undefinedPtr18;\n  FILE *filePointer;\n  long longVar20;\n  stat *statStruct1;\n  undefined8 undefined8Var22;\n  int *intPtr23;\n  undefined **undefinedPtrPtr24;\n  stat *byteArr_00;\n  ulong uVar25;\n  long *longPtr26;\n  FILE *pFVar27;\n  char *pcVar28;\n  byte *pbVar29;\n  char *unaff_RBP;\n  long lVar30;\n  byte *pbyteVar31;\n  char *pcVar32;\n  undefined **undefinedPtrPtr33;\n  int intVar34;\n  undefined **unaff_R12;\n  stat *statStruct2;\n  int iVar36;\n  uVar37 uVar37;\n  undefined **undefinedPtrPtr_local148;\n  undefined **undefinedPtrPtr_local140;\n  size_t size_t_local120;\n  long long_local118;\n  long *longPtr_locald0;\n  stat statStruct_localc8;\n  \n  pFVar27 = (FILE *)(ulong)argc;\n  setlocale(5,\"\");\n  pcVar28 = \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00106438 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00106438);\n  filePointer = argv;\n  fileStream = argv;\n  if (1 < (int)argc) {\n    intVar14 = 2000;\n    unaff_R12 = (undefined **)0x1;\n    undefinedPtrPtr_local140 = (undefined **)0x0;\n    do {\n      intVar34 = (int)unaff_R12;\n      unaff_RBP = (char *)(long)intVar34;\n      undefinedPtrPtr_local148 = (undefined **)((long)unaff_RBP * 8);\n      iVar36 = (int)pFVar27;\n      if (**(char **)(&filePointer->_flags + (long)unaff_RBP * 2) == '@') {\n        intVar14 = intVar14 + -1;\n        if (intVar14 == 0) {\n          longPtr26 = *(long **)filePointer;\n          pcVar28 = \"%s: error: too many @-files encountered\\n\";\n          goto LAB_00103239;\n        }\n        pcVar28 = *(char **)(&filePointer->_flags + (long)unaff_RBP * 2) + 1;\n        intVar12 = stat(pcVar28,&statStruct_localc8);\n        if (intVar12 < 0) goto LAB_00102c30;\n        if ((statStruct_localc8.st_mode & 0xf000) == 0x4000) {\n          do {\n            longPtr26 = *(long **)filePointer;\n            pcVar28 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00103239:\n            fprintf(_stderr,pcVar28,longPtr26);\n            xexit(1);\n          } while( true );\n        }\n        fileStream = fopen(pcVar28,\"r\");\n        if (fileStream == (FILE *)0x0) goto LAB_00102c30;\n        intVar12 = fseek(fileStream,0,2);\n        if (((intVar12 == -1) ||\n            (pcVar28 = (char *)ftell(fileStream),\n            (undefined **)pcVar28 == (undefined **)0xffffffffffffffff)) ||\n           (intVar12 = fseek(fileStream,0,0), intVar12 == -1)) {\nLAB_00102c90:\n          fclose(fileStream);\n          if (intVar34 + 1 < iVar36) goto LAB_00102c3a;\n          break;\n        }\n        byteArr = (byte *)xmalloc((long)pcVar28 + 1);\n        ppuVar16 = (undefined **)fread(byteArr,1,(size_t)pcVar28,fileStream);\n        if (((undefined **)pcVar28 != ppuVar16) && (intVar12 = ferror(fileStream), intVar12 != 0)) {\n          free(byteArr);\n          goto LAB_00102c90;\n        }\n        byteArr[(long)ppuVar16] = 0;\n        byteVar10 = *byteArr;\n        pbVar29 = byteArr;\n        if (byteVar10 != 0) {\nLAB_00102980:\n          if (((&_sch_istable)[(ulong)byteVar10 * 2] & 0x40) != 0) goto LAB_00102970;\n          sVar17 = strlen((char *)byteArr);\n          bytePtr = (byte *)xmalloc(sVar17 + 1);\n          ppuVar16 = (undefined **)0x0;\n          intVar12 = 0;\n          boolVar6 = false;\n          boolVar7 = false;\n          boolVar8 = false;\n          long_local118 = 0;\n          pbVar29 = byteArr;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar29 * 2] & 0x40) != 0) {\n              pbVar29 = pbVar29 + 1;\n            }\n            if ((intVar12 == 0) || (undefinedPtrPtr24 = ppuVar16 + long_local118, intVar12 + -1 <= (int)long_local118)) {\n              if (ppuVar16 == (undefined **)0x0) {\n                ppuVar16 = (undefined **)xmalloc(0x40);\n                intVar12 = 8;\n                undefinedPtrPtr24 = ppuVar16 + long_local118;\n                *undefinedPtrPtr24 = (undefined *)0x0;\n              }\n              else {\n                intVar12 = intVar12 * 2;\n                ppuVar16 = (undefined **)xrealloc(ppuVar16,(long)intVar12 << 3);\n                undefinedPtrPtr24 = ppuVar16 + long_local118;\n                *undefinedPtrPtr24 = (undefined *)0x0;\n              }\n            }\n            byteVar10 = *pbVar29;\n            pbyteVar31 = bytePtr;\n            while (byteVar10 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar10 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar8 | boolVar7 | boolVar6))) {\n                  boolVar8 = false;\n                  boolVar6 = false;\n                  boolVar7 = false;\n                  goto LAB_00102a9e;\n                }\n                if (!boolVar8) break;\n                pbVar29 = pbVar29 + 1;\n                *pbyteVar31 = byteVar10;\n                pbyteVar31 = pbyteVar31 + 1;\n                boolVar8 = false;\n                byteVar10 = *pbVar29;\n                if (byteVar10 == 0) goto LAB_00102a9e;\n              }\n              if (byteVar10 == 0x5c) {\n                boolVar8 = true;\n              }\n              else if (boolVar7) {\n                if (byteVar10 == 0x27) {\n                  boolVar7 = false;\n                }\n                else {\nLAB_00102c0d:\n                  *pbyteVar31 = byteVar10;\n                  pbyteVar31 = pbyteVar31 + 1;\n                }\n              }\n              else if (boolVar6) {\n                if (byteVar10 != 0x22) goto LAB_00102c0d;\n                boolVar6 = false;\n              }\n              else if (byteVar10 == 0x27) {\n                boolVar7 = true;\n              }\n              else {\n                if (byteVar10 != 0x22) goto LAB_00102c0d;\n                boolVar6 = true;\n              }\n              bytePtr1 = pbVar29 + 1;\n              pbVar29 = pbVar29 + 1;\n              byteVar10 = *bytePtr1;\n            }\nLAB_00102a9e:\n            *pbyteVar31 = 0;\n            undefinedPtr18 = (undefined *)xstrdup(bytePtr);\n            *undefinedPtrPtr24 = undefinedPtr18;\n            ppuVar16[long_local118 + 1] = (undefined *)0x0;\n            byteVar10 = *pbVar29;\n            byteVar3 = (&_sch_istable)[(ulong)byteVar10 * 2];\n            while ((byteVar3 & 0x40) != 0) {\n              byteVar10 = pbVar29[1];\n              pbVar29 = pbVar29 + 1;\n              byteVar3 = (&_sch_istable)[(ulong)byteVar10 * 2];\n            }\n            long_local118 = long_local118 + 1;\n          } while (byteVar10 != 0);\n          free(bytePtr);\n          pFVar27 = filePointer;\n          if (argv == filePointer) goto LAB_001030d9;\n          goto LAB_00102b38;\n        }\nLAB_001030bb:\n        ppuVar16 = (undefined **)xmalloc(8);\n        *ppuVar16 = (undefined *)0x0;\n        if (argv == filePointer) {\nLAB_001030d9:\n          if (*(long **)filePointer == (long *)0x0) {\n            intVar12 = 0;\n          }\n          else {\n            longVar20 = 1;\n            do {\n              intVar12 = (int)longVar20;\n              lVar30 = longVar20 * 2;\n              longVar20 = longVar20 + 1;\n            } while (*(long *)(&filePointer->_flags + lVar30) != 0);\n          }\n          pFVar27 = (FILE *)xmalloc((long)(intVar12 + 1) << 3);\n          longPtr26 = *(long **)filePointer;\n          longVar20 = 0;\n          while (longPtr26 != (long *)0x0) {\n            undefined8Var22 = xstrdup();\n            *(undefined8 *)((long)&pFVar27->_flags + longVar20) = undefined8Var22;\n            longPtr26 = *(long **)(filePointer->_shortbuf + longVar20 + -0x7b);\n            longVar20 = longVar20 + 8;\n          }\n          *(undefined8 *)((long)&pFVar27->_flags + longVar20) = 0;\nLAB_00102b38:\n          filePointer = pFVar27;\n          if (*ppuVar16 == (undefined *)0x0) goto LAB_0010318e;\n          pcVar28 = (char *)0x0;\n          do {\n            pcVar28 = (char *)((long)pcVar28 + 1);\n          } while (ppuVar16[(long)pcVar28] != (undefined *)0x0);\n          size_t_local120 = (long)pcVar28 * 8;\n        }\n        else {\nLAB_0010318e:\n          pcVar28 = (char *)0x0;\n          size_t_local120 = 0;\n        }\n        free(*(void **)(&filePointer->_flags + (long)unaff_RBP * 2));\n        filePointer = (FILE *)xrealloc(filePointer,((long)pcVar28 + (long)iVar36 + 1) * 8);\n        uVar37 = iVar36 + -1 + (int)pcVar28;\n        pFVar27 = (FILE *)(ulong)uVar37;\n        memmove(&filePointer->_flags + (long)(FILE **)((long)unaff_RBP + (long)pcVar28) * 2,\n                &filePointer->_IO_read_ptr + (long)unaff_RBP,(long)(iVar36 - intVar34) << 3);\n        memcpy(&filePointer->_flags + (long)unaff_RBP * 2,ppuVar16,size_t_local120);\n        free(ppuVar16);\n        free(byteArr);\n        fclose(fileStream);\n        uintVar13 = (int)undefinedPtrPtr_local140 + 1;\n        unaff_RBP = (char *)(FILE **)((long)unaff_RBP + (long)pcVar28);\n        unaff_R12 = undefinedPtrPtr_local148;\n        undefinedPtrPtr_local148 = ppuVar16;\n        if ((int)uVar37 <= (int)uintVar13) break;\n      }\n      else {\nLAB_00102c30:\n        if (iVar36 <= intVar34 + 1) break;\nLAB_00102c3a:\n        uintVar13 = intVar34 + 1;\n        undefinedPtrPtr_local140 = unaff_R12;\n      }\n      unaff_R12 = (undefined **)(ulong)uintVar13;\n    } while( true );\n  }\n  intVar14 = bfd_init();\n  if (intVar14 != 0x118) {\n    undefined8Var22 = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    FUN_00103bd0(undefined8Var22);\n    goto switchD_00102d16_caseD_43;\n  }\n  pcVar28 = \"x86_64-pc-linux-gnu\";\n  charVar11 = bfd_set_default_target();\n  if (charVar11 == '\\0') {\n    uintVar15 = bfd_get_error();\n    unaff_RBP = (char *)bfd_errmsg(uintVar15);\n    undefined8Var22 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    FUN_00103bd0(undefined8Var22,\"x86_64-pc-linux-gnu\",unaff_RBP);\n    goto switchD_00102d16_caseD_61;\n  }\n  unaff_R12 = &PTR_s_addresses_001061e0;\n  undefinedPtrPtr_local140 = (undefined **)0x0;\n  unaff_RBP = \"ab:Ce:rRsfHhij:pVv\";\n  undefinedPtrPtr_local148 = (undefined **)0x0;\n  pcVar28 = (char *)(undefined **)0x0;\nswitchD_00102d16_caseD_0:\n  do {\n    uintVar15 = getopt_long(pFVar27,filePointer,unaff_RBP,unaff_R12,0);\n    switch(uintVar15) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x41:\n    case 0x42:\n    case 0x44:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x50:\n    case 0x51:\n    case 0x53:\n    case 0x54:\n    case 0x55:\n    case 0x57:\n    case 0x58:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 99:\n    case 100:\n    case 0x67:\n    case 0x6b:\n    case 0x6c:\n    case 0x6d:\n    case 0x6e:\n    case 0x6f:\n    case 0x71:\n    case 0x74:\n    case 0x75:\n      FUN_001023e1(_stderr,1);\n    case 0x6a:\n      undefinedPtrPtr_local148 = _optarg;\n      break;\n    case 0x43:\nswitchD_00102d16_caseD_43:\n      fileStream = (FILE *)&optarg;\n      DAT_00106434 = '\\x01';\n      if (_optarg != (undefined **)0x0) {\n        intVar14 = cplus_demangle_name_to_style();\n        if (intVar14 == 0) goto LAB_0010339f;\n        cplus_demangle_set_style();\n      }\n      break;\n    case 0x48:\n    case 0x68:\n      FUN_001023e1(_stdout,0);\nLAB_0010339f:\n      pcVar28 = *(char **)fileStream;\n      pcVar32 = \"unknown demangling style `%s\\'\";\nLAB_001033ae:\n      undefined8Var22 = dcgettext(0,pcVar32,5);\n      FUN_00103bd0(undefined8Var22,pcVar28);\nswitchD_00102d16_caseD_72:\n      DAT_001061d0 = DAT_001061d0 | 0x40000;\n      break;\n    case 0x52:\n      DAT_001061d0 = DAT_001061d0 & 0xfffbffff;\n      break;\n    case 0x56:\n    case 0x76:\n      printf(\"GNU %s %s\\n\",\"addr2line\",\"(GNU Binutils for Debian) 2.40\");\n      pcVar28 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(pcVar28);\n      pcVar28 = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(pcVar28);\n                    \n      exit(0);\n    case 0x61:\nswitchD_00102d16_caseD_61:\n      DAT_00106435 = '\\x01';\n      break;\n    case 0x62:\n      undefinedPtrPtr_local140 = _optarg;\n      break;\n    case 0x65:\n      pcVar28 = (char *)_optarg;\n      break;\n    case 0x66:\n      DAT_00106432 = '\\x01';\n      break;\n    case 0x69:\n      DAT_00106430 = '\\x01';\n      break;\n    case 0x70:\n      DAT_00106431 = '\\x01';\n      break;\n    case 0x72:\n      goto switchD_00102d16_caseD_72;\n    case 0x73:\n      goto switchD_00102d16_caseD_73;\n    default:\n      DAT_00106428 = (char **)(&filePointer->_flags + (long)_optind * 2);\n      DAT_00106420 = (int)pFVar27 - _optind;\n      if ((undefined **)pcVar28 == (undefined **)0x0) {\n        pcVar28 = \"a.out\";\n      }\n      intVar14 = stat(pcVar28,&statStruct_localc8);\n      if (intVar14 < 0) {\n        intPtr23 = __errno_location();\n        pcVar32 = \"\\'%s\\': No such file\";\n        if (*intPtr23 != 2) {\n          pcVar32 = strerror(*intPtr23);\n          undefined8Var22 = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n          FUN_00102620(undefined8Var22,pcVar28,pcVar32);\n          return 1;\n        }\nLAB_001039cd:\n        undefined8Var22 = dcgettext(0,pcVar32,5);\n        FUN_00102620(undefined8Var22,pcVar28);\n        return 1;\n      }\n      if ((statStruct_localc8.st_mode & 0xf000) == 0x4000) {\n        pcVar32 = \"Warning: \\'%s\\' is a directory\";\n        goto LAB_001039cd;\n      }\n      pcVar32 = \"Warning: \\'%s\\' is not an ordinary file\";\n      if ((statStruct_localc8.st_mode & 0xf000) != 0x8000) goto LAB_001039cd;\n      pcVar32 = \"Warning: \\'%s\\' has negative size, probably it is too large\";\n      if (statStruct_localc8.st_size < 0) goto LAB_001039cd;\n      if (statStruct_localc8.st_size == 0) {\n        return 1;\n      }\n      filePointer = (FILE *)bfd_openr(pcVar28,undefinedPtrPtr_local140);\n      if (filePointer == (FILE *)0x0) {\n        FUN_00103c70(pcVar28);\n        xexit(1);\n        goto LAB_00103a85;\n      }\n      uintPtr2 = (uVar37 *)((long)&filePointer->_IO_buf_end + 4);\n      *uintPtr2 = *uintPtr2 | 0x8000;\n      charVar11 = bfd_check_format(filePointer,2);\n      if (charVar11 != '\\0') {\n        pcVar32 = \"%s: cannot get addresses from archive\";\n        goto LAB_001033ae;\n      }\n      charVar11 = bfd_check_format_matches(filePointer,1,&longPtr_locald0);\n      if (charVar11 == '\\0') {\n        FUN_00103c70(*(long **)filePointer);\n        intVar14 = bfd_get_error();\n        if (intVar14 == 0xd) {\n          filePointer = (FILE *)0x1040e1;\n          fflush(_stdout);\n          longPtr26 = DAT_00106438;\n          pcVar28 = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n          fprintf(_stderr,pcVar28,longPtr26);\n          for (longPtr26 = longPtr_locald0; *longPtr26 != 0; longPtr26 = longPtr26 + 1) {\n            fprintf(_stderr,\" %s\");\n          }\n          free(longPtr_locald0);\n          fputc(10,_stderr);\n        }\n        goto LAB_00103801;\n      }\n      ppuVar16 = undefinedPtrPtr_local148;\n      if ((undefinedPtrPtr_local148 != (undefined **)0x0) &&\n         (ppuVar16 = (undefined **)bfd_get_section_by_name(filePointer), ppuVar16 == (undefined **)0x0))\n      {\n        undefined8Var22 = dcgettext(0,\"%s: cannot find section %s\",5);\n        FUN_00103bd0(undefined8Var22,pcVar28,undefinedPtrPtr_local148);\n        goto LAB_0010399c;\n      }\n      undefinedPtrPtr_local148 = ppuVar16;\n      if ((*(byte *)((long)&filePointer->_IO_buf_end + 4) & 0x10) == 0) goto LAB_00102ecd;\n      longVar20 = (**(code **)(filePointer->_IO_read_ptr + 0x1f8))(filePointer);\n      if (longVar20 == 0) {\n        longVar20 = (**(code **)(filePointer->_IO_read_ptr + 0x350))(filePointer);\n        if (-1 < longVar20) {\n          DAT_00106418 = (void *)xmalloc(longVar20);\n          DAT_001063e8 = (**(code **)(filePointer->_IO_read_ptr + 0x358))(filePointer);\n          if (-1 < DAT_001063e8) goto LAB_00102ebf;\n        }\n      }\n      else if (-1 < longVar20) {\n        DAT_00106418 = (void *)xmalloc(longVar20);\n        DAT_001063e8 = (**(code **)(filePointer->_IO_read_ptr + 0x200))(filePointer);\n        if (-1 < DAT_001063e8) {\n          if (DAT_001063e8 == 0) goto LAB_0010380b;\n          goto LAB_00102ebf;\n        }\n      }\n      FUN_00103c70(*(long **)filePointer);\nLAB_00103801:\n      xexit(1);\nLAB_0010380b:\n      longVar20 = (**(code **)(filePointer->_IO_read_ptr + 0x350))(filePointer);\n      if (0 < longVar20) {\n        free(DAT_00106418);\n        DAT_00106418 = (void *)xmalloc(longVar20);\n        DAT_001063e8 = (**(code **)(filePointer->_IO_read_ptr + 0x358))(filePointer);\n      }\nLAB_00102ebf:\n      if (DAT_001063e8 < 1) {\n        free(DAT_00106418);\n        DAT_00106418 = (void *)0x0;\n      }\nLAB_00102ecd:\n      unaff_R12 = (undefined **)(ulong)DAT_00106420;\n      fileStream = (FILE *)&DAT_0010400a;\n      if (DAT_00106420 == 0) goto LAB_00103065;\nLAB_00102ee7:\n      if ((int)DAT_00106420 < 1) {\nLAB_0010308a:\n        free(DAT_00106418);\n        DAT_00106418 = (void *)0x0;\n        bfd_close(filePointer);\n        return 0;\n      }\n      DAT_00106420 = DAT_00106420 - 1;\n      statStruct1 = (stat *)*DAT_00106428;\n      DAT_00106428 = DAT_00106428 + 1;\n      do {\n        byteVar10 = *(byte *)&statStruct1->st_dev;\n        uVar25 = (ulong)byteVar10;\n        ushortVar4 = *(ushort *)(&_sch_istable + uVar25 * 2);\n        byteArr_00 = statStruct1;\n        while ((ushortVar4 & 0x40) != 0) {\n          byteVar10 = *(byte *)((long)&byteArr_00->st_dev + 1);\n          uVar25 = (ulong)byteVar10;\n          byteArr_00 = (stat *)((long)&byteArr_00->st_dev + 1);\n          ushortVar4 = *(ushort *)(&_sch_istable + uVar25 * 2);\n        }\n        if ((((ushortVar4 & 4) == 0) && (byteVar10 != 0)) &&\n           ((statStruct2 = byteArr_00, 5 < (byte)((&_sch_toupper)[uVar25] + 0xbf) ||\n            (pcVar28 = strchr((char *)byteArr_00,0x2b), pcVar28 != (char *)0x0)))) {\n          while( true ) {\n            byteVar10 = *(byte *)&statStruct2->st_dev;\n            statStruct1 = statStruct2;\n            if (((byteVar10 == 0) || ((*(ushort *)(&_sch_istable + (ulong)byteVar10 * 2) & 0x40) != 0)) ||\n               (byteVar10 == 0x2b)) break;\n            statStruct2 = (stat *)((long)&statStruct2->st_dev + 1);\n          }\n          while (((&_sch_istable)[(ulong)*(byte *)&statStruct1->st_dev * 2] & 0x40) != 0) {\n            statStruct1 = (stat *)((long)&statStruct1->st_dev + 1);\n          }\n          uVar25 = 0;\n          if (*(byte *)&statStruct1->st_dev == 0x2b) {\n            uVar25 = strtoul((char *)((long)&statStruct1->st_dev + 1),(char **)0x0,0);\n          }\n          voidPtr9 = DAT_00106418;\n          longVar20 = DAT_001063e8;\n          *(undefined *)&statStruct2->st_dev = 0;\n          for (lVar30 = 0; lVar30 < longVar20; lVar30 = lVar30 + 1) {\n            longVar5 = *(long *)((long)voidPtr9 + lVar30 * 8);\n            intVar14 = strcmp(*(char **)(longVar5 + 8),(char *)byteArr_00);\n            if (intVar14 == 0) {\n              unaff_R12 = (undefined **)((ulong)unaff_R12 & 0xffffffff);\n              DAT_00106410 = (undefined *)\n                             (uVar25 + *(long *)(longVar5 + 0x10) +\n                             *(long *)(*(long *)(longVar5 + 0x20) + 0x30));\n              goto LAB_00102f4b;\n            }\n          }\n          unaff_R12 = (undefined **)((ulong)unaff_R12 & 0xffffffff);\n          for (longVar20 = 0; longVar20 < DAT_001063e8; longVar20 = longVar20 + 1) {\n            pcVar28 = (char *)bfd_demangle(filePointer,*(undefined8 *)\n                                                    (*(long *)((long)DAT_00106418 + longVar20 * 8) + 8)\n                                           ,DAT_001061d0);\n            if ((pcVar28 != (char *)0x0) && (intVar14 = strcmp(pcVar28,(char *)byteArr_00), intVar14 == 0))\n            {\n              free(pcVar28);\n              longVar20 = *(long *)((long)DAT_00106418 + longVar20 * 8);\n              DAT_00106410 = (undefined *)\n                             (*(long *)(longVar20 + 0x10) + uVar25 +\n                             *(long *)(*(long *)(longVar20 + 0x20) + 0x30));\n              goto LAB_00102f4b;\n            }\n            free(pcVar28);\n          }\n          DAT_00106410 = (undefined *)0x0;\n        }\n        else {\n          DAT_00106410 = (undefined *)bfd_scan_vma(statStruct1,0,0x10);\n        }\nLAB_00102f4b:\n        if (*(int *)(filePointer->_IO_read_ptr + 8) == 5) {\n          longVar20 = *(long *)(filePointer->_IO_read_ptr + 0x380);\n          uVar25 = 1L << (*(char *)(*(long *)(longVar20 + 0x340) + 10) - 1U & 0x3f);\n          DAT_00106410 = (undefined *)((ulong)DAT_00106410 & uVar25 * 2 - 1);\n          if ((*(byte *)(longVar20 + 0x3f1) & 1) != 0) {\n            DAT_00106410 = (undefined *)(((ulong)DAT_00106410 ^ uVar25) - uVar25);\n          }\n        }\n        if (DAT_00106435 != '\\0') {\n          printf(\"0x\");\n          bfd_fprintf_vma(filePointer,_stdout,DAT_00106410);\n          if (DAT_00106431 == '\\0') {\n            putchar(10);\n          }\n          else {\n            printf(\": \");\n          }\n        }\n        unaff_RBP = &stdout;\n        DAT_00106408 = '\\0';\n        if (undefinedPtrPtr_local148 == (undefined **)0x0) {\n          bfd_map_over_sections(filePointer,FUN_00102540,0);\nLAB_00102fcf:\n          if (DAT_00106408 != '\\0') {\n            do {\n              if (DAT_00106432 != '\\0') {\n                ppuVar16 = DAT_00106400;\n                if (DAT_00106400 == (undefined **)0x0) {\nLAB_00103a4a:\n                  undefinedPtrPtr24 = (undefined **)&DAT_0010400a;\n                }\n                else {\n                  if (*(char *)DAT_00106400 == '\\0') {\n                    ppuVar16 = (undefined **)0x0;\n                    goto LAB_00103a4a;\n                  }\n                  pcVar28 = (char *)DAT_00106400;\n                  pFVar27 = filePointer;\n                  if (DAT_00106434 == '\\0') {\nLAB_001031f4:\n                    ppuVar16 = (undefined **)0x0;\n                    undefinedPtrPtr24 = (undefined **)pcVar28;\n                    filePointer = pFVar27;\n                  }\n                  else {\nLAB_0010399c:\n                    ppuVar16 = (undefined **)bfd_demangle(pFVar27,pcVar28,DAT_001061d0);\n                    undefinedPtrPtr24 = ppuVar16;\n                    filePointer = pFVar27;\n                    if (ppuVar16 == (undefined **)0x0) goto LAB_001031f4;\n                  }\n                }\n                printf(\"%s\",undefinedPtrPtr24);\n                if (DAT_00106431 == '\\0') {\n                  putchar(10);\n                }\n                else {\n                  pcVar28 = (char *)dcgettext(0,&DAT_001040f1,5);\n                  printf(pcVar28);\n                }\n                free(ppuVar16);\n              }\n              pFVar27 = DAT_001063f8;\n              if (DAT_00106433 == '\\0') {\n                if (DAT_001063f8 == (FILE *)0x0) {\n                  pFVar27 = fileStream;\n                }\n              }\n              else if (DAT_001063f8 == (FILE *)0x0) {\n                pFVar27 = (FILE *)&DAT_0010400a;\n              }\n              else {\n                pcVar28 = strrchr((char *)DAT_001063f8,0x2f);\n                if (pcVar28 != (char *)0x0) {\n                  pFVar27 = (FILE *)(pcVar28 + 1);\n                  DAT_001063f8 = pFVar27;\n                }\n              }\n              printf(\"%s:\",pFVar27);\n              pFVar27 = filePointer;\n              if (DAT_001063f4 == 0) {\nLAB_00103a85:\n                puts(\"?\");\n                filePointer = pFVar27;\n              }\n              else if (DAT_001063f0 == 0) {\n                printf(\"%u\\n\");\n              }\n              else {\n                printf(\"%u (discriminator %u)\\n\");\n              }\n              if (DAT_00106430 == '\\0') {\nLAB_0010304c:\n                DAT_00106408 = '\\0';\n                goto LAB_00103053;\n              }\n              DAT_00106408 = (**(code **)(filePointer->_IO_read_ptr + 600))\n                                       (filePointer,&DAT_001063f8,&DAT_00106400,&DAT_001063f4);\n              ppuVar16 = DAT_00106400;\n              if (DAT_00106408 == '\\0') goto LAB_00103053;\n              while (DAT_00106400 = ppuVar16, DAT_00106431 == '\\0') {\n                if (DAT_00106432 != '\\0') {\n                  undefinedPtrPtr24 = ppuVar16;\n                  if (ppuVar16 == (undefined **)0x0) {\nLAB_00103b7b:\n                    undefinedPtrPtr33 = (undefined **)&DAT_0010400a;\n                  }\n                  else {\n                    if (*(char *)ppuVar16 == '\\0') {\n                      undefinedPtrPtr24 = (undefined **)0x0;\n                      goto LAB_00103b7b;\n                    }\n                    if ((DAT_00106434 == '\\0') ||\n                       (undefinedPtrPtr24 = (undefined **)bfd_demangle(filePointer,ppuVar16,DAT_001061d0),\n                       undefinedPtrPtr33 = undefinedPtrPtr24, undefinedPtrPtr24 == (undefined **)0x0)) {\n                      undefinedPtrPtr24 = (undefined **)0x0;\n                      undefinedPtrPtr33 = ppuVar16;\n                    }\n                  }\n                  printf(\"%s\",undefinedPtrPtr33);\n                  if (DAT_00106431 == '\\0') {\n                    putchar(10);\n                  }\n                  else {\n                    pcVar28 = (char *)dcgettext(0,&DAT_001040f1,5);\n                    printf(pcVar28);\n                  }\n                  free(undefinedPtrPtr24);\n                }\n                pFVar27 = DAT_001063f8;\n                if (DAT_00106433 == '\\0') {\n                  if (DAT_001063f8 == (FILE *)0x0) {\n                    pFVar27 = (FILE *)&DAT_0010400a;\n                  }\n                }\n                else if (DAT_001063f8 == (FILE *)0x0) {\n                  pFVar27 = (FILE *)&DAT_0010400a;\n                }\n                else {\n                  pcVar28 = strrchr((char *)DAT_001063f8,0x2f);\n                  if (pcVar28 != (char *)0x0) {\n                    pFVar27 = (FILE *)(pcVar28 + 1);\n                    DAT_001063f8 = pFVar27;\n                  }\n                }\n                printf(\"%s:\",pFVar27);\n                if (DAT_001063f4 == 0) {\n                  puts(\"?\");\n                }\n                else if (DAT_001063f0 == 0) {\n                  printf(\"%u\\n\");\n                }\n                else {\n                  printf(\"%u (discriminator %u)\\n\");\n                }\n                if (DAT_00106430 == '\\0') goto LAB_0010304c;\n                DAT_00106408 = (**(code **)(filePointer->_IO_read_ptr + 600))\n                                         (filePointer,&DAT_001063f8,&DAT_00106400,&DAT_001063f4);\n                ppuVar16 = DAT_00106400;\n                if (DAT_00106408 == '\\0') {\n                  DAT_00106408 = '\\0';\n                  goto LAB_00103053;\n                }\n              }\n              pcVar28 = (char *)dcgettext(0,\" (inlined by) \",5);\n              printf(pcVar28);\n            } while( true );\n          }\n        }\n        else if (((*(byte *)((long)undefinedPtrPtr_local148 + 0x24) & 1) != 0) && (DAT_00106410 < undefinedPtrPtr_local148[8])) {\n          DAT_00106408 = (**(code **)(filePointer->_IO_read_ptr + 0x240))\n                                   (filePointer,DAT_00106418,undefinedPtrPtr_local148,DAT_00106410,&DAT_001063f8,\n                                    &DAT_00106400,&DAT_001063f4,&DAT_001063f0);\n          goto LAB_00102fcf;\n        }\n        if (DAT_00106432 != '\\0') {\n          if (DAT_00106431 == '\\0') {\n            puts(\"??\");\n          }\n          else {\n            printf(\"?? \");\n          }\n        }\n        puts(\"??:0\");\nLAB_00103053:\n        fflush(*(FILE **)unaff_RBP);\n        if ((int)unaff_R12 != 0) goto LAB_00102ee7;\nLAB_00103065:\n        pcVar28 = fgets((char *)&statStruct_localc8,100,_stdin);\n        statStruct1 = &statStruct_localc8;\n        if (pcVar28 == (char *)0x0) goto LAB_0010308a;\n      } while( true );\n    }\n  } while( true );\nLAB_00102970:\n  byteVar10 = pbVar29[1];\n  pbVar29 = pbVar29 + 1;\n  if (byteVar10 == 0) goto LAB_001030bb;\n  goto LAB_00102980;\nswitchD_00102d16_caseD_73:\n  DAT_00106433 = '\\x01';\n  goto switchD_00102d16_caseD_0;\n}\n\n",
            "called": [
                "bfd_init",
                "fopen",
                "stat",
                "fflush",
                "cplus_demangle_name_to_style",
                "fseek",
                "bfd_demangle",
                "ftell",
                "bindtextdomain",
                "strrchr",
                "bfd_set_error_program_name",
                "xexit",
                "bfd_errmsg",
                "exit",
                "ferror",
                "memcpy",
                "__errno_location",
                "textdomain",
                "cplus_demangle_set_style",
                "puts",
                "fgets",
                "xrealloc",
                "strchr",
                "strtoul",
                "FUN_00103c70",
                "bfd_openr",
                "xmalloc_set_program_name",
                "bfd_check_format_matches",
                "FUN_00102540",
                "dcgettext",
                "strlen",
                "FUN_00102620",
                "fputc",
                "strerror",
                "fclose",
                "printf",
                "fread",
                "strcmp",
                "free",
                "FUN_00103bd0",
                "fprintf",
                "putchar",
                "setlocale",
                "xmalloc",
                "bfd_set_default_target",
                "bfd_fprintf_vma",
                "bfd_close",
                "xstrdup",
                "FUN_001023e1",
                "bfd_get_error",
                "bfd_scan_vma",
                "memmove",
                "bfd_map_over_sections",
                "bfd_get_section_by_name",
                "getopt_long",
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027b0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "get_addresses_from_file_001027b0"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_001027b0",
                "FUN_00103c70"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00103bd0": {
            "renaming": {
                "FUN_00103bd0": "extract_and_print_bfd_error_00103bd0",
                "param_1": "bfd_format",
                "param_2": "bfd_arch",
                "param_3": "bfd_target",
                "param_4": "bfd_object_type",
                "param_5": "bfd_flags",
                "param_6": "bfd_section",
                "param_7": "bfd_print_archive_filename",
                "param_8": "bfd_error_message",
                "param_9": "bfd_handler",
                "in_AL": "is_error_present",
                "iVar1": "bfd_error_code",
                "uVar2": "error_message",
                "lVar3": "is_error_unknown",
                "local_d8": "num_bytes",
                "local_d4": "value",
                "local_d0": "buffer",
                "local_c8": "local_buffer",
                "local_b8": "local_array",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "bfd_format_copy",
                "local_78": "bfd_arch_copy",
                "local_68": "bfd_target_copy",
                "local_58": "bfd_object_type_copy",
                "local_48": "bfd_flags_copy",
                "local_38": "bfd_section_copy",
                "local_28": "bfd_print_archive_filename_copy",
                "local_18": "bfd_error_message_copy"
            },
            "code": "\n\n\nvoid extract_and_print_bfd_error_00103bd0(undefined4 bfd_format,undefined4 bfd_arch,undefined4 bfd_target,undefined4 bfd_object_type,\n                 undefined4 bfd_flags,undefined4 bfd_section,undefined4 bfd_print_archive_filename,undefined4 bfd_error_message,\n                 undefined8 bfd_handler,undefined8 bfd_format0,undefined8 bfd_format1,undefined8 bfd_format2,\n                 undefined8 bfd_format3,undefined8 bfd_format4)\n\n{\n  char is_error_present;\n  int bfd_error_code;\n  undefined8 error_message;\n  long is_error_unknown;\n  undefined8 in_R10;\n  undefined4 num_bytes;\n  undefined4 value;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 bfd_format_copy;\n  undefined4 bfd_arch_copy;\n  undefined4 bfd_target_copy;\n  undefined4 bfd_object_type_copy;\n  undefined4 bfd_flags_copy;\n  undefined4 bfd_section_copy;\n  undefined4 bfd_print_archive_filename_copy;\n  undefined4 bfd_error_message_copy;\n  \n  if (is_error_present != '\\0') {\n    bfd_format_copy = bfd_format;\n    bfd_arch_copy = bfd_arch;\n    bfd_target_copy = bfd_target;\n    bfd_object_type_copy = bfd_object_type;\n    bfd_flags_copy = bfd_flags;\n    bfd_section_copy = bfd_section;\n    bfd_print_archive_filename_copy = bfd_print_archive_filename;\n    bfd_error_message_copy = bfd_error_message;\n  }\n  buffer = &stack0x00000008;\n  num_bytes = 8;\n  local_buffer = local_array;\n  value = 0x30;\n  param_10_copy = bfd_format0;\n  param_11_copy = bfd_format1;\n  param_12_copy = bfd_format2;\n  param_13_copy = bfd_format3;\n  param_14_copy = bfd_format4;\n  FUN_001025c0(bfd_handler,&num_bytes);\n  is_error_unknown = 1;\n  xexit();\n  bfd_error_code = bfd_get_error();\n  if (bfd_error_code == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(bfd_error_code);\n  }\n  fflush(_stdout);\n  if (is_error_unknown != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00106438,is_error_unknown,error_message,in_R10);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00106438,error_message,in_R10);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "FUN_001025c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "extract_and_print_bfd_error_00103bd0"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103cd0",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_001025c0": {
            "renaming": {
                "FUN_001025c0": "print_error_message_001025c0",
                "param_1": "errorMessage",
                "param_2": "formatArguments",
                "fflush": "flushStandardOutput",
                "fprintf": "printToStandardError",
                "_stderr": "standardErrorStream",
                "vfprintf": "printFormattedToStandardError",
                "putc": "writeCharacterToStandardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001025c0(char *errorMessage,__gnuc_va_list formatArguments)\n\n{\n  fflush(_stdout);\n  fprintf(standardErrorStream,\"%s: \",DAT_00106438);\n  vfprintf(standardErrorStream,errorMessage,formatArguments);\n  putc(10,standardErrorStream);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "fprintf",
                "fflush",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025c0",
            "calling": [
                "FUN_00103bd0",
                "FUN_00102620"
            ],
            "imported": false,
            "current_name": "print_error_message_001025c0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_001027b0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_001027b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001026c0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001027b0",
                "FUN_001023a0",
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00102720": {
            "renaming": {
                "FUN_00102720": "FUNC_00102720"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102744) */\n/* WARNING: Removing unreachable block (ram,0x00102750) */\n\nvoid FUNC_00102720(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00102720",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00102720"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_001026f0": {
            "renaming": {
                "FUN_001026f0": "FUNC_001026f0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102703) */\n/* WARNING: Removing unreachable block (ram,0x0010270f) */\n\nvoid FUNC_001026f0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001026f0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_001026f0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_001027b0",
                "FUN_00103bd0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "bfd_fprintf_vma": {
            "renaming": {},
            "code": "\nvoid bfd_fprintf_vma(void)\n\n{\n  bfd_fprintf_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_fprintf_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_fprintf_vma"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_001027b0",
                "FUN_00103c70"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001023e1": {
            "renaming": {
                "FUN_001023e1": "display_usage_info_001023e1",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "languageCode",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "targetPtr",
                "fprintf": "writeToOutputFile",
                "dcgettext": "getMessage",
                "fputc": "writeCharacterToOutputFile",
                "free": "deallocateMemory",
                "exit": "terminateProgram"
            },
            "code": "\nvoid displayUsageInfo_001023e1(FILE *outputFile,int exitCode)\n\n{\n  long languageCode;\n  char *message;\n  long *targetList;\n  long *targetPtr;\n  \n  languageCode = DAT_00106438;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [addr(s)]\\n\",5);\n  fprintf(outputFile,message,languageCode);\n  message = (char *)dcgettext(0,\" Convert addresses into line number/file name pairs.\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \" If no addresses are specified on the command line, they will be read from stdin\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                Read options from <file>\\n  -a --addresses         Show addresses\\n  -b --target=<bfdname>  Set the binary file format\\n  -e --exe=<executable>  Set the input file name (default is a.out)\\n  -i --inlines           Unwind inlined functions\\n  -j --section=<name>    Read section-relative offsets instead of addresses\\n  -p --pretty-print      Make the output easier to read for humans\\n  -s --basenames         Strip directory names\\n  -f --functions         Show function names\\n  -C --demangle[=style]  Demangle function names\\n  -R --recurse-limit     Enable a limit on recursion whilst demangling.  [Default]\\n  -r --no-recurse-limit  Disable a limit on recursion whilst demangling\\n  -h --help              Display this information\\n  -v --version           Display the program\\'s version\\n\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  languageCode = DAT_00106438;\n  if (DAT_00106438 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,languageCode);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtr = targetList;\n  while( true ) {\n    languageCode = *targetPtr;\n    targetPtr = targetPtr + 1;\n    if (languageCode == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminateProgram(exitCode);\n}\n\n",
            "called": [
                "fputc",
                "free",
                "exit",
                "fprintf",
                "bfd_target_list",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e1",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "display_usage_info_001023e1"
        },
        "FUN_001023a0": {
            "renaming": {
                "FUN_001023a0": "print_error_details_001023a0",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorDetails_001023a0(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00106438);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00106438,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00103c70"
            ],
            "imported": false,
            "current_name": "print_error_details_001023a0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001027b0",
                "FUN_001025c0",
                "FUN_001023a0",
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_00103c70": {
            "renaming": {
                "FUN_00103c70": "print_error_00103c70",
                "param_1": "errorDescription",
                "iVar1": "error",
                "uVar2": "errorString",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printError_00103c70(long errorDescription)\n\n{\n  int error;\n  undefined8 errorString;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00106438,errorDescription,errorString,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00106438,errorString,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_001023a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c70",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "print_error_00103c70"
        },
        "puts": {
            "renaming": {},
            "code": "\n\n\nint puts(char *__s)\n\n{\n  int iVar1;\n  \n  iVar1 = puts(__s);\n  return iVar1;\n}\n\n",
            "called": [
                "puts"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "puts"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_00102540": {
            "renaming": {
                "FUN_00102540": "process_data_00102540",
                "param_1": "input_pointer",
                "param_2": "data_pointer",
                "uVar1": "offset"
            },
            "code": "\nvoid processData_00102540(long input_pointer,long data_pointer)\n\n{\n  ulong offset;\n  \n  if ((DAT_00106408 == '\\0') && ((*(byte *)(data_pointer + 0x24) & 1) != 0)) {\n    offset = *(ulong *)(data_pointer + 0x30);\n    if ((offset <= DAT_00106410) && (DAT_00106410 < *(long *)(data_pointer + 0x40) + offset)) {\n      DAT_00106408 = (**(code **)(*(long *)(input_pointer + 8) + 0x240))\n                               (input_pointer,DAT_00106418,data_pointer,DAT_00106410 - offset,&DAT_001063f8,\n                                &DAT_00106400,&DAT_001063f4,&DAT_001063f0);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "process_data_00102540"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        }
    },
    "used_tokens": 23511,
    "layers": [
        [
            "FUN_00102620",
            "FUN_001027b0",
            "FUN_00103bd0",
            "FUN_001025c0",
            "FUN_001023e1",
            "FUN_001023a0",
            "FUN_00103c70",
            "FUN_00102540",
            "FUN_00102020"
        ]
    ],
    "locked_functions": []
}