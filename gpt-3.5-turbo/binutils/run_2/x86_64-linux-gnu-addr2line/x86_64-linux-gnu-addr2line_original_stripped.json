{
    "functions": {
        "FUN_001070a0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070a0",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_001070a0"
        },
        "FUN_00102620": {
            "renaming": {
                "FUN_00102620": "report_data_00102620",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "output1",
                "param_10": "output2",
                "param_11": "output3",
                "param_12": "output4",
                "param_13": "output5",
                "param_14": "output6",
                "in_AL": "isFlagSet",
                "local_d8": "byteCount",
                "local_d4": "bufferSize",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "tempBuffer",
                "local_b0": "tempOutput2",
                "local_a8": "tempOutput3",
                "local_a0": "tempOutput4",
                "local_98": "tempOutput5",
                "local_90": "tempOutput6",
                "local_88": "copy1",
                "local_78": "copy2",
                "local_68": "copy3",
                "local_58": "copy4",
                "local_48": "copy5",
                "local_38": "copy6",
                "local_28": "copy7",
                "local_18": "copy8"
            },
            "code": "\nvoid reportData_00102620(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 output1,undefined8 output2,undefined8 output3,undefined8 output4,\n                 undefined8 output5,undefined8 output6)\n\n{\n  char isFlagSet;\n  undefined4 byteCount;\n  undefined4 bufferSize;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined tempBuffer [8];\n  undefined8 tempOutput2;\n  undefined8 tempOutput3;\n  undefined8 tempOutput4;\n  undefined8 tempOutput5;\n  undefined8 tempOutput6;\n  undefined4 copy1;\n  undefined4 copy2;\n  undefined4 copy3;\n  undefined4 copy4;\n  undefined4 copy5;\n  undefined4 copy6;\n  undefined4 copy7;\n  undefined4 copy8;\n  \n  if (isFlagSet != '\\0') {\n    copy1 = input1;\n    copy2 = input2;\n    copy3 = input3;\n    copy4 = input4;\n    copy5 = input5;\n    copy6 = input6;\n    copy7 = input7;\n    copy8 = input8;\n  }\n  buffer = &stack0x00000008;\n  byteCount = 8;\n  localBuffer = tempBuffer;\n  bufferSize = 0x30;\n  tempOutput2 = output2;\n  tempOutput3 = output3;\n  tempOutput4 = output4;\n  tempOutput5 = output5;\n  tempOutput6 = output6;\n  report(output1,&byteCount);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102620",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "report_data_00102620"
        },
        "FUN_001070a8": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070a8",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_001070a8"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001071c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071c8",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_001071c8"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "bfd_nonfatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00107120": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107120",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00107120"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_00107080": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107080",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00107080"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "usage",
                "main",
                "bfd_nonfatal.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00107128": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107128",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00107128"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "usage",
                "main",
                "bfd_nonfatal.cold",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_001070b0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070b0",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_001070b0"
        },
        "FUN_00107008": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107008",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_00107008"
        },
        "FUN_00107090": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107090",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00107090"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001070b8": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070b8",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_001070b8"
        },
        "FUN_001025c0": {
            "renaming": {
                "FUN_001025c0": "print_error_message_001025c0",
                "param_1": "format_string",
                "param_2": "args_list",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "putc": "print_character"
            },
            "code": "\n\n\nvoid print_error_message_001025c0(char *format_string,__gnuc_va_list args_list)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",program_name);\n  vfprintf(standard_error,format_string,args_list);\n  print_character(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "putc",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025c0",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001025c0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "fatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\n\n\nint puts(char *__s)\n\n{\n  int iVar1;\n  \n  iVar1 = puts(__s);\n  return iVar1;\n}\n\n",
            "called": [
                "puts"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_00107098": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107098",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00107098"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_profiler_00102000",
                "ctx": "context",
                "iVar1": "startResult"
            },
            "code": "\nint initializeProfiler_00102000(EVP_PKEY_CTX *context)\n\n{\n  int startResult;\n  \n  startResult = __gmon_start__();\n  return startResult;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_profiler_00102000"
        },
        "FUN_00107018": {
            "renaming": {},
            "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107018",
            "calling": [
                "putchar"
            ],
            "imported": false,
            "current_name": "FUN_00107018"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00107138": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107138",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00107138"
        },
        "FUN_00102760": {
            "renaming": {
                "FUN_00102760": "initialize_library_00102760",
                "completed_0": "isLibraryInitialized"
            },
            "code": "\nvoid initializeLibrary_00102760(void)\n\n{\n  if (isLibraryInitialized != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  isLibraryInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102760",
            "calling": [],
            "imported": false,
            "current_name": "initialize_library_00102760"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\nvoid bfd_fprintf_vma(void)\n\n{\n  bfd_fprintf_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_fprintf_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_001026f0": {
            "renaming": {
                "FUN_001026f0": "FUNC_001026f0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102703) */\n/* WARNING: Removing unreachable block (ram,0x0010270f) */\n\nvoid FUNC_001026f0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001026f0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_001026f0"
        },
        "FUN_001070c8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070c8",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_001070c8"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_00107020": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107020",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00107020"
        },
        "FUN_00107140": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107140",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00107140"
        },
        "FUN_00107028": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107028",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00107028"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00103cd0": {
            "renaming": {
                "FUN_00103cd0": "FUNC_00103cd0"
            },
            "code": "\nvoid FUNC_00103cd0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103cd0"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_001023a0": {
            "renaming": {
                "FUN_001023a0": "print_error_message_001023a0",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorStatus",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_001023a0(void)\n\n{\n  undefined8 errorMessage;\n  long errorStatus;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorStatus != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001023a0"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001071f8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071f8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001071f8"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00107150": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107150",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_00107150"
        },
        "FUN_001027a0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027a0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_001027a0"
        },
        "FUN_00102540": {
            "renaming": {
                "FUN_00102540": "check_and_execute_function_00102540",
                "param_1": "file_data",
                "param_2": "symbol_data",
                "uVar1": "range_end",
                "found": "is_found",
                "pc": "program_counter",
                "filename": "file_name",
                "functionname": "function_name",
                "line": "line_number"
            },
            "code": "\nvoid check_and_execute_function_00102540(long file_data,long symbol_data)\n\n{\n  ulong range_end;\n  \n  if ((is_found == '\\0') && ((*(byte *)(symbol_data + 0x24) & 1) != 0)) {\n    range_end = *(ulong *)(symbol_data + 0x30);\n    if ((range_end <= program_counter) && (program_counter < *(long *)(symbol_data + 0x40) + range_end)) {\n      is_found = (**(code **)(*(long *)(file_data + 8) + 0x240))\n                        (file_data,syms,symbol_data,program_counter - range_end,&file_name,&function_name,&line_number,\n                         &discriminator);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_00102540"
        },
        "FUN_00107158": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107158",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_00107158"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_function_00102020"
            },
            "code": "\nvoid executeIndirectFunction_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nchar * fgets(char *__s,int __n,FILE *__stream)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = fgets(__s,__n,__stream);\n  return pcVar1;\n}\n\n",
            "called": [
                "fgets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_00107040": {
            "renaming": {},
            "code": "\n\n\n\nint puts(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* puts@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107040",
            "calling": [
                "puts"
            ],
            "imported": false,
            "current_name": "FUN_00107040"
        },
        "FUN_00107160": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107160",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00107160"
        },
        "FUN_001027b0": {
            "renaming": {
                "FUN_001027b0": "decode_file_001027b0",
                "param_1": "numOptions",
                "param_2": "inputFile",
                "pbVar1": "bytePtr1",
                "puVar2": "uintPtr2",
                "bVar3": "byteVar3",
                "uVar4": "ushortVar4",
                "lVar5": "longVar5",
                "bVar6": "boolVar6",
                "bVar7": "boolVar7",
                "bVar8": "boolVar8",
                "pvVar9": "ptrVar9",
                "bVar10": "byteVar10",
                "cVar11": "charVar11",
                "iVar12": "intVar12",
                "uVar13": "uintVar13",
                "iVar14": "intVar14",
                "uVar15": "uintVar15",
                "__stream": "fileStream",
                "__s": "bytePtr2",
                "__ptr": "bytePtr3",
                "lVar18": "longVar18",
                "pFVar19": "filePtr1",
                "psVar20": "statPtr1",
                "uVar21": "ulongVar21",
                "piVar22": "intPtr1",
                "plVar23": "longPtr10",
                "__s_00": "statPtr2",
                "uVar24": "ulongVar24",
                "pFVar25": "filePtr2",
                "pcVar26": "charPtr1",
                "pbVar27": "bytePtr4",
                "local_148": "longPtr11",
                "local_140": "longPtr12",
                "local_120": "size_tVar2",
                "local_118": "longVar34",
                "local_d0": "longPtr4",
                "local_c8": "statVar1",
                "program_name": "programName",
                "xmalloc_set_program_name": "setProgramName",
                "bfd_set_error_program_name": "setErrorProgramName",
                "iVar32": "intVar32",
                "unaff_RBP": "charPtr1",
                "lVar28": "longVar28",
                "pbVar29": "bytePtr5",
                "pcVar30": "charPtr2",
                "plVar31": "longPtr8",
                "plVar16": "longPtr9",
                "found": "boolVar9",
                "uVar35": "uintVar35"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined8 decodeFile_001027b0(uint numOptions,FILE *inputFile)\n\n{\n  byte *bytePtr1;\n  uint *uintPtr2;\n  byte byteVar3;\n  ushort ushortVar4;\n  long longVar5;\n  bool boolVar6;\n  bool boolVar7;\n  bool boolVar8;\n  void *ptrVar9;\n  byte byteVar10;\n  char charVar11;\n  int intVar12;\n  uint uintVar13;\n  int intVar14;\n  undefined4 uintVar15;\n  FILE *fileStream;\n  byte *bytePtr2;\n  long *longPtr9;\n  size_t sVar17;\n  byte *bytePtr3;\n  long longVar18;\n  FILE *filePtr1;\n  stat *statPtr1;\n  undefined8 ulongVar21;\n  int *intPtr1;\n  long *longPtr10;\n  stat *statPtr2;\n  ulong ulongVar24;\n  FILE *filePtr2;\n  char *charPtr1;\n  byte *bytePtr4;\n  char *charPtr1;\n  long longVar28;\n  byte *bytePtr5;\n  char *charPtr2;\n  long *longPtr8;\n  int intVar32;\n  undefined1 *unaff_R12;\n  stat *psVar33;\n  int iVar34;\n  uint uintVar35;\n  long *longPtr11;\n  long *longPtr12;\n  size_t size_tVar2;\n  long longVar34;\n  long *longPtr4;\n  stat statVar1;\n  \n  filePtr2 = (FILE *)(ulong)numOptions;\n  setlocale(5,\"\");\n  charPtr1 = \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  programName = *(long **)inputFile;\n  setProgramName();\n  setErrorProgramName(programName);\n  filePtr1 = inputFile;\n  fileStream = inputFile;\n  if (1 < (int)numOptions) {\n    intVar14 = 2000;\n    unaff_R12 = (undefined1 *)0x1;\n    longPtr12 = (long *)0x0;\n    do {\n      intVar32 = (int)unaff_R12;\n      charPtr1 = (char *)(long)intVar32;\n      longPtr11 = (long *)((long)charPtr1 * 8);\n      iVar34 = (int)filePtr2;\n      if (**(char **)(&filePtr1->_flags + (long)charPtr1 * 2) == '@') {\n        intVar14 = intVar14 + -1;\n        if (intVar14 == 0) {\n          longPtr9 = *(long **)filePtr1;\n          charPtr1 = \"%s: error: too many @-files encountered\\n\";\n          goto LAB_00103239;\n        }\n        charPtr1 = *(char **)(&filePtr1->_flags + (long)charPtr1 * 2) + 1;\n        intVar12 = stat(charPtr1,&statVar1);\n        if (intVar12 < 0) goto LAB_00102c30;\n        if ((statVar1.st_mode & 0xf000) == 0x4000) {\n          do {\n            longPtr9 = *(long **)filePtr1;\n            charPtr1 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00103239:\n            fprintf(_stderr,charPtr1,longPtr9);\n            xexit(1);\n          } while( true );\n        }\n        fileStream = fopen(charPtr1,\"r\");\n        if (fileStream == (FILE *)0x0) goto LAB_00102c30;\n        intVar12 = fseek(fileStream,0,2);\n        if (((intVar12 == -1) ||\n            (charPtr1 = (char *)ftell(fileStream), (long *)charPtr1 == (long *)0xffffffffffffffff)) ||\n           (intVar12 = fseek(fileStream,0,0), intVar12 == -1)) {\nLAB_00102c90:\n          fclose(fileStream);\n          if (intVar32 + 1 < iVar34) goto LAB_00102c3a;\n          break;\n        }\n        bytePtr2 = (byte *)xmalloc((long)charPtr1 + 1);\n        longPtr9 = (long *)fread(bytePtr2,1,(size_t)charPtr1,fileStream);\n        if (((long *)charPtr1 != longPtr9) && (intVar12 = ferror(fileStream), intVar12 != 0)) {\n          free(bytePtr2);\n          goto LAB_00102c90;\n        }\n        bytePtr2[(long)longPtr9] = 0;\n        byteVar10 = *bytePtr2;\n        bytePtr4 = bytePtr2;\n        if (byteVar10 != 0) {\nLAB_00102980:\n          if (((&_sch_istable)[(ulong)byteVar10 * 2] & 0x40) != 0) goto LAB_00102970;\n          sVar17 = strlen((char *)bytePtr2);\n          bytePtr3 = (byte *)xmalloc(sVar17 + 1);\n          longPtr9 = (long *)0x0;\n          intVar12 = 0;\n          boolVar6 = false;\n          boolVar7 = false;\n          boolVar8 = false;\n          longVar34 = 0;\n          bytePtr4 = bytePtr2;\n          do {\n            while (((&_sch_istable)[(ulong)*bytePtr4 * 2] & 0x40) != 0) {\n              bytePtr4 = bytePtr4 + 1;\n            }\n            if ((intVar12 == 0) || (longPtr10 = longPtr9 + longVar34, intVar12 + -1 <= (int)longVar34)) {\n              if (longPtr9 == (long *)0x0) {\n                longPtr9 = (long *)xmalloc(0x40);\n                intVar12 = 8;\n                longPtr10 = longPtr9 + longVar34;\n                *longPtr10 = 0;\n              }\n              else {\n                intVar12 = intVar12 * 2;\n                longPtr9 = (long *)xrealloc(longPtr9,(long)intVar12 << 3);\n                longPtr10 = longPtr9 + longVar34;\n                *longPtr10 = 0;\n              }\n            }\n            byteVar10 = *bytePtr4;\n            bytePtr5 = bytePtr3;\n            while (byteVar10 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar10 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar8 | boolVar7 | boolVar6))) {\n                  boolVar8 = false;\n                  boolVar6 = false;\n                  boolVar7 = false;\n                  goto LAB_00102a9e;\n                }\n                if (!boolVar8) break;\n                bytePtr4 = bytePtr4 + 1;\n                *bytePtr5 = byteVar10;\n                bytePtr5 = bytePtr5 + 1;\n                boolVar8 = false;\n                byteVar10 = *bytePtr4;\n                if (byteVar10 == 0) goto LAB_00102a9e;\n              }\n              if (byteVar10 == 0x5c) {\n                boolVar8 = true;\n              }\n              else if (boolVar7) {\n                if (byteVar10 == 0x27) {\n                  boolVar7 = false;\n                }\n                else {\nLAB_00102c0d:\n                  *bytePtr5 = byteVar10;\n                  bytePtr5 = bytePtr5 + 1;\n                }\n              }\n              else if (boolVar6) {\n                if (byteVar10 != 0x22) goto LAB_00102c0d;\n                boolVar6 = false;\n              }\n              else if (byteVar10 == 0x27) {\n                boolVar7 = true;\n              }\n              else {\n                if (byteVar10 != 0x22) goto LAB_00102c0d;\n                boolVar6 = true;\n              }\n              bytePtr1 = bytePtr4 + 1;\n              bytePtr4 = bytePtr4 + 1;\n              byteVar10 = *bytePtr1;\n            }\nLAB_00102a9e:\n            *bytePtr5 = 0;\n            longVar18 = xstrdup(bytePtr3);\n            *longPtr10 = longVar18;\n            longPtr9[longVar34 + 1] = 0;\n            byteVar10 = *bytePtr4;\n            byteVar3 = (&_sch_istable)[(ulong)byteVar10 * 2];\n            while ((byteVar3 & 0x40) != 0) {\n              byteVar10 = bytePtr4[1];\n              bytePtr4 = bytePtr4 + 1;\n              byteVar3 = (&_sch_istable)[(ulong)byteVar10 * 2];\n            }\n            longVar34 = longVar34 + 1;\n          } while (byteVar10 != 0);\n          free(bytePtr3);\n          filePtr2 = filePtr1;\n          if (inputFile == filePtr1) goto LAB_001030d9;\n          goto LAB_00102b38;\n        }\nLAB_001030bb:\n        longPtr9 = (long *)xmalloc(8);\n        *longPtr9 = 0;\n        if (inputFile == filePtr1) {\nLAB_001030d9:\n          if (*(long **)filePtr1 == (long *)0x0) {\n            intVar12 = 0;\n          }\n          else {\n            longVar18 = 1;\n            do {\n              intVar12 = (int)longVar18;\n              longVar28 = longVar18 * 2;\n              longVar18 = longVar18 + 1;\n            } while (*(long *)(&filePtr1->_flags + longVar28) != 0);\n          }\n          filePtr2 = (FILE *)xmalloc((long)(intVar12 + 1) << 3);\n          longPtr10 = *(long **)filePtr1;\n          longVar18 = 0;\n          while (longPtr10 != (long *)0x0) {\n            ulongVar21 = xstrdup();\n            *(undefined8 *)((long)&filePtr2->_flags + longVar18) = ulongVar21;\n            longPtr10 = *(long **)(filePtr1->_shortbuf + longVar18 + -0x7b);\n            longVar18 = longVar18 + 8;\n          }\n          *(undefined8 *)((long)&filePtr2->_flags + longVar18) = 0;\nLAB_00102b38:\n          filePtr1 = filePtr2;\n          if (*longPtr9 == 0) goto LAB_0010318e;\n          charPtr1 = (char *)0x0;\n          do {\n            charPtr1 = (char *)((long)charPtr1 + 1);\n          } while (longPtr9[(long)charPtr1] != 0);\n          size_tVar2 = (long)charPtr1 * 8;\n        }\n        else {\nLAB_0010318e:\n          charPtr1 = (char *)0x0;\n          size_tVar2 = 0;\n        }\n        free(*(void **)(&filePtr1->_flags + (long)charPtr1 * 2));\n        filePtr1 = (FILE *)xrealloc(filePtr1,((long)charPtr1 + (long)iVar34 + 1) * 8);\n        uintVar35 = iVar34 + -1 + (int)charPtr1;\n        filePtr2 = (FILE *)(ulong)uintVar35;\n        memmove(&filePtr1->_flags + (long)(FILE **)((long)charPtr1 + (long)charPtr1) * 2,\n                &filePtr1->_IO_read_ptr + (long)charPtr1,(long)(iVar34 - intVar32) << 3);\n        memcpy(&filePtr1->_flags + (long)charPtr1 * 2,longPtr9,size_tVar2);\n        free(longPtr9);\n        free(bytePtr2);\n        fclose(fileStream);\n        uintVar13 = (int)longPtr12 + 1;\n        charPtr1 = (char *)(FILE **)((long)charPtr1 + (long)charPtr1);\n        unaff_R12 = (undefined1 *)longPtr11;\n        longPtr11 = longPtr9;\n        if ((int)uintVar35 <= (int)uintVar13) break;\n      }\n      else {\nLAB_00102c30:\n        if (iVar34 <= intVar32 + 1) break;\nLAB_00102c3a:\n        uintVar13 = intVar32 + 1;\n        longPtr12 = (long *)unaff_R12;\n      }\n      unaff_R12 = (undefined1 *)(ulong)uintVar13;\n    } while( true );\n  }\n  intVar14 = bfd_init();\n  if (intVar14 != 0x118) {\n    ulongVar21 = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    fatal(ulongVar21);\n    goto switchD_00102d16_caseD_43;\n  }\n  charPtr1 = \"x86_64-pc-linux-gnu\";\n  charVar11 = bfd_set_default_target();\n  if (charVar11 == '\\0') {\n    uintVar15 = bfd_get_error();\n    charPtr1 = (char *)bfd_errmsg(uintVar15);\n    ulongVar21 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    fatal(ulongVar21,\"x86_64-pc-linux-gnu\",charPtr1);\n    goto switchD_00102d16_caseD_61;\n  }\n  unaff_R12 = long_options;\n  longPtr12 = (long *)0x0;\n  charPtr1 = \"ab:Ce:rRsfHhij:pVv\";\n  longPtr11 = (long *)0x0;\n  charPtr1 = (char *)(long *)0x0;\nswitchD_00102d16_caseD_0:\n  do {\n    uintVar15 = getopt_long(filePtr2,filePtr1,charPtr1,unaff_R12,0);\n    switch(uintVar15) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x41:\n    case 0x42:\n    case 0x44:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x50:\n    case 0x51:\n    case 0x53:\n    case 0x54:\n    case 0x55:\n    case 0x57:\n    case 0x58:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 99:\n    case 100:\n    case 0x67:\n    case 0x6b:\n    case 0x6c:\n    case 0x6d:\n    case 0x6e:\n    case 0x6f:\n    case 0x71:\n    case 0x74:\n    case 0x75:\n      usage(_stderr,1);\n    case 0x6a:\n      longPtr11 = _optarg;\n      break;\n    case 0x43:\nswitchD_00102d16_caseD_43:\n      fileStream = (FILE *)&optarg;\n      do_demangle = '\\x01';\n      if (_optarg != (long *)0x0) {\n        intVar14 = cplus_demangle_name_to_style();\n        if (intVar14 == 0) goto LAB_0010339f;\n        cplus_demangle_set_style();\n      }\n      break;\n    case 0x48:\n    case 0x68:\n      usage(_stdout,0);\nLAB_0010339f:\n      charPtr1 = *(char **)fileStream;\n      charPtr2 = \"unknown demangling style `%s\\'\";\nLAB_001033ae:\n      ulongVar21 = dcgettext(0,charPtr2,5);\n      fatal(ulongVar21,charPtr1);\nswitchD_00102d16_caseD_72:\n      demangle_flags = demangle_flags | 0x40000;\n      break;\n    case 0x52:\n      demangle_flags = demangle_flags & 0xfffbffff;\n      break;\n    case 0x56:\n    case 0x76:\n      printf(\"GNU %s %s\\n\",\"addr2line\",\"(GNU Binutils for Debian) 2.40\");\n      charPtr1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(charPtr1);\n      charPtr1 = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(charPtr1);\n                    \n      exit(0);\n    case 0x61:\nswitchD_00102d16_caseD_61:\n      with_addresses = '\\x01';\n      break;\n    case 0x62:\n      longPtr12 = _optarg;\n      break;\n    case 0x65:\n      charPtr1 = (char *)_optarg;\n      break;\n    case 0x66:\n      with_functions = '\\x01';\n      break;\n    case 0x69:\n      unwind_inlines = '\\x01';\n      break;\n    case 0x70:\n      pretty_print = '\\x01';\n      break;\n    case 0x72:\n      goto switchD_00102d16_caseD_72;\n    case 0x73:\n      goto switchD_00102d16_caseD_73;\n    default:\n      addr = (char **)(&filePtr1->_flags + (long)_optind * 2);\n      naddr = (int)filePtr2 - _optind;\n      if ((long *)charPtr1 == (long *)0x0) {\n        charPtr1 = \"a.out\";\n      }\n      intVar14 = stat(charPtr1,&statVar1);\n      if (intVar14 < 0) {\n        intPtr1 = __errno_location();\n        charPtr2 = \"\\'%s\\': No such file\";\n        if (*intPtr1 != 2) {\n          charPtr2 = strerror(*intPtr1);\n          ulongVar21 = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n          non_fatal(ulongVar21,charPtr1,charPtr2);\n          return 1;\n        }\nLAB_001039cd:\n        ulongVar21 = dcgettext(0,charPtr2,5);\n        non_fatal(ulongVar21,charPtr1);\n        return 1;\n      }\n      if ((statVar1.st_mode & 0xf000) == 0x4000) {\n        charPtr2 = \"Warning: \\'%s\\' is a directory\";\n        goto LAB_001039cd;\n      }\n      charPtr2 = \"Warning: \\'%s\\' is not an ordinary file\";\n      if ((statVar1.st_mode & 0xf000) != 0x8000) goto LAB_001039cd;\n      charPtr2 = \"Warning: \\'%s\\' has negative size, probably it is too large\";\n      if (statVar1.st_size < 0) goto LAB_001039cd;\n      if (statVar1.st_size == 0) {\n        return 1;\n      }\n      filePtr1 = (FILE *)bfd_openr(charPtr1,longPtr12);\n      if (filePtr1 == (FILE *)0x0) {\n        bfd_nonfatal(charPtr1);\n        xexit(1);\n        goto LAB_00103a85;\n      }\n      uintPtr2 = (uint *)((long)&filePtr1->_IO_buf_end + 4);\n      *uintPtr2 = *uintPtr2 | 0x8000;\n      charVar11 = bfd_check_format(filePtr1,2);\n      if (charVar11 != '\\0') {\n        charPtr2 = \"%s: cannot get addresses from archive\";\n        goto LAB_001033ae;\n      }\n      charVar11 = bfd_check_format_matches(filePtr1,1,&longPtr4);\n      if (charVar11 == '\\0') {\n        bfd_nonfatal(*(long **)filePtr1);\n        intVar14 = bfd_get_error();\n        if (intVar14 == 0xd) {\n          filePtr1 = (FILE *)0x1040e1;\n          fflush(_stdout);\n          longPtr9 = programName;\n          charPtr1 = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n          fprintf(_stderr,charPtr1,longPtr9);\n          for (longPtr9 = longPtr4; *longPtr9 != 0; longPtr9 = longPtr9 + 1) {\n            fprintf(_stderr,\" %s\");\n          }\n          free(longPtr4);\n          fputc(10,_stderr);\n        }\n        goto LAB_00103801;\n      }\n      longPtr9 = longPtr11;\n      if ((longPtr11 != (long *)0x0) &&\n         (longPtr9 = (long *)bfd_get_section_by_name(filePtr1), longPtr9 == (long *)0x0)) {\n        ulongVar21 = dcgettext(0,\"%s: cannot find section %s\",5);\n        fatal(ulongVar21,charPtr1,longPtr11);\n        goto LAB_0010399c;\n      }\n      longPtr11 = longPtr9;\n      if ((*(byte *)((long)&filePtr1->_IO_buf_end + 4) & 0x10) == 0) goto LAB_00102ecd;\n      longVar18 = (**(code **)(filePtr1->_IO_read_ptr + 0x1f8))(filePtr1);\n      if (longVar18 == 0) {\n        longVar18 = (**(code **)(filePtr1->_IO_read_ptr + 0x350))(filePtr1);\n        if (-1 < longVar18) {\n          syms = (void *)xmalloc(longVar18);\n          symcount = (**(code **)(filePtr1->_IO_read_ptr + 0x358))(filePtr1);\n          if (-1 < symcount) goto LAB_00102ebf;\n        }\n      }\n      else if (-1 < longVar18) {\n        syms = (void *)xmalloc(longVar18);\n        symcount = (**(code **)(filePtr1->_IO_read_ptr + 0x200))(filePtr1);\n        if (-1 < symcount) {\n          if (symcount == 0) goto LAB_0010380b;\n          goto LAB_00102ebf;\n        }\n      }\n      bfd_nonfatal(*(long **)filePtr1);\nLAB_00103801:\n      xexit(1);\nLAB_0010380b:\n      longVar18 = (**(code **)(filePtr1->_IO_read_ptr + 0x350))(filePtr1);\n      if (0 < longVar18) {\n        free(syms);\n        syms = (void *)xmalloc(longVar18);\n        symcount = (**(code **)(filePtr1->_IO_read_ptr + 0x358))(filePtr1);\n      }\nLAB_00102ebf:\n      if (symcount < 1) {\n        free(syms);\n        syms = (void *)0x0;\n      }\nLAB_00102ecd:\n      unaff_R12 = (undefined1 *)(ulong)naddr;\n      fileStream = (FILE *)&DAT_0010400a;\n      if (naddr == 0) goto LAB_00103065;\nLAB_00102ee7:\n      if ((int)naddr < 1) {\nLAB_0010308a:\n        free(syms);\n        syms = (void *)0x0;\n        bfd_close(filePtr1);\n        return 0;\n      }\n      naddr = naddr - 1;\n      statPtr1 = (stat *)*addr;\n      addr = addr + 1;\n      do {\n        byteVar10 = *(byte *)&statPtr1->st_dev;\n        ulongVar24 = (ulong)byteVar10;\n        ushortVar4 = *(ushort *)(&_sch_istable + ulongVar24 * 2);\n        statPtr2 = statPtr1;\n        while ((ushortVar4 & 0x40) != 0) {\n          byteVar10 = *(byte *)((long)&statPtr2->st_dev + 1);\n          ulongVar24 = (ulong)byteVar10;\n          statPtr2 = (stat *)((long)&statPtr2->st_dev + 1);\n          ushortVar4 = *(ushort *)(&_sch_istable + ulongVar24 * 2);\n        }\n        if ((((ushortVar4 & 4) == 0) && (byteVar10 != 0)) &&\n           ((psVar33 = statPtr2, 5 < (byte)((&_sch_toupper)[ulongVar24] + 0xbf) ||\n            (charPtr1 = strchr((char *)statPtr2,0x2b), charPtr1 != (char *)0x0)))) {\n          while( true ) {\n            byteVar10 = *(byte *)&psVar33->st_dev;\n            statPtr1 = psVar33;\n            if (((byteVar10 == 0) || ((*(ushort *)(&_sch_istable + (ulong)byteVar10 * 2) & 0x40) != 0)) ||\n               (byteVar10 == 0x2b)) break;\n            psVar33 = (stat *)((long)&psVar33->st_dev + 1);\n          }\n          while (((&_sch_istable)[(ulong)*(byte *)&statPtr1->st_dev * 2] & 0x40) != 0) {\n            statPtr1 = (stat *)((long)&statPtr1->st_dev + 1);\n          }\n          ulongVar24 = 0;\n          if (*(byte *)&statPtr1->st_dev == 0x2b) {\n            ulongVar24 = strtoul((char *)((long)&statPtr1->st_dev + 1),(char **)0x0,0);\n          }\n          ptrVar9 = syms;\n          longVar18 = symcount;\n          *(undefined *)&psVar33->st_dev = 0;\n          for (longVar28 = 0; longVar28 < longVar18; longVar28 = longVar28 + 1) {\n            longVar5 = *(long *)((long)ptrVar9 + longVar28 * 8);\n            intVar14 = strcmp(*(char **)(longVar5 + 8),(char *)statPtr2);\n            if (intVar14 == 0) {\n              unaff_R12 = (undefined1 *)((ulong)unaff_R12 & 0xffffffff);\n              pc = ulongVar24 + *(long *)(longVar5 + 0x10) + *(long *)(*(long *)(longVar5 + 0x20) + 0x30);\n              goto LAB_00102f4b;\n            }\n          }\n          unaff_R12 = (undefined1 *)((ulong)unaff_R12 & 0xffffffff);\n          for (longVar18 = 0; longVar18 < symcount; longVar18 = longVar18 + 1) {\n            charPtr1 = (char *)bfd_demangle(filePtr1,*(undefined8 *)\n                                                    (*(long *)((long)syms + longVar18 * 8) + 8),\n                                           demangle_flags);\n            if ((charPtr1 != (char *)0x0) && (intVar14 = strcmp(charPtr1,(char *)statPtr2), intVar14 == 0))\n            {\n              free(charPtr1);\n              longVar18 = *(long *)((long)syms + longVar18 * 8);\n              pc = *(long *)(longVar18 + 0x10) + ulongVar24 + *(long *)(*(long *)(longVar18 + 0x20) + 0x30);\n              goto LAB_00102f4b;\n            }\n            free(charPtr1);\n          }\n          pc = 0;\n        }\n        else {\n          pc = bfd_scan_vma(statPtr1,0,0x10);\n        }\nLAB_00102f4b:\n        if (*(int *)(filePtr1->_IO_read_ptr + 8) == 5) {\n          longVar18 = *(long *)(filePtr1->_IO_read_ptr + 0x380);\n          ulongVar24 = 1L << (*(char *)(*(long *)(longVar18 + 0x340) + 10) - 1U & 0x3f);\n          pc = pc & ulongVar24 * 2 - 1;\n          if ((*(byte *)(longVar18 + 0x3f1) & 1) != 0) {\n            pc = (pc ^ ulongVar24) - ulongVar24;\n          }\n        }\n        if (with_addresses != '\\0') {\n          printf(\"0x\");\n          bfd_fprintf_vma(filePtr1,_stdout,pc);\n          if (pretty_print == '\\0') {\n            putchar(10);\n          }\n          else {\n            printf(\": \");\n          }\n        }\n        charPtr1 = &stdout;\n        boolVar9 = '\\0';\n        if (longPtr11 == (long *)0x0) {\n          bfd_map_over_sections(filePtr1,find_address_in_section,0);\nLAB_00102fcf:\n          if (boolVar9 != '\\0') {\n            do {\n              if (with_functions != '\\0') {\n                longPtr9 = functionname;\n                if (functionname == (long *)0x0) {\nLAB_00103a4a:\n                  longPtr10 = (long *)&DAT_0010400a;\n                }\n                else {\n                  if (*(char *)functionname == '\\0') {\n                    longPtr9 = (long *)0x0;\n                    goto LAB_00103a4a;\n                  }\n                  charPtr1 = (char *)functionname;\n                  filePtr2 = filePtr1;\n                  if (do_demangle == '\\0') {\nLAB_001031f4:\n                    longPtr9 = (long *)0x0;\n                    longPtr10 = (long *)charPtr1;\n                    filePtr1 = filePtr2;\n                  }\n                  else {\nLAB_0010399c:\n                    longPtr9 = (long *)bfd_demangle(filePtr2,charPtr1,demangle_flags);\n                    longPtr10 = longPtr9;\n                    filePtr1 = filePtr2;\n                    if (longPtr9 == (long *)0x0) goto LAB_001031f4;\n                  }\n                }\n                printf(\"%s\",longPtr10);\n                if (pretty_print == '\\0') {\n                  putchar(10);\n                }\n                else {\n                  charPtr1 = (char *)dcgettext(0,&DAT_001040f1,5);\n                  printf(charPtr1);\n                }\n                free(longPtr9);\n              }\n              filePtr2 = filename;\n              if (base_names == '\\0') {\n                if (filename == (FILE *)0x0) {\n                  filePtr2 = fileStream;\n                }\n              }\n              else if (filename == (FILE *)0x0) {\n                filePtr2 = (FILE *)&DAT_0010400a;\n              }\n              else {\n                charPtr1 = strrchr((char *)filename,0x2f);\n                if (charPtr1 != (char *)0x0) {\n                  filePtr2 = (FILE *)(charPtr1 + 1);\n                  filename = filePtr2;\n                }\n              }\n              printf(\"%s:\",filePtr2);\n              filePtr2 = filePtr1;\n              if (line == 0) {\nLAB_00103a85:\n                puts(\"?\");\n                filePtr1 = filePtr2;\n              }\n              else if (discriminator == 0) {\n                printf(\"%u\\n\");\n              }\n              else {\n                printf(\"%u (discriminator %u)\\n\");\n              }\n              if (unwind_inlines == '\\0') {\nLAB_0010304c:\n                boolVar9 = '\\0';\n                goto LAB_00103053;\n              }\n              boolVar9 = (**(code **)(filePtr1->_IO_read_ptr + 600))\n                                (filePtr1,&filename,&functionname,&line);\n              longPtr9 = functionname;\n              if (boolVar9 == '\\0') goto LAB_00103053;\n              while (functionname = longPtr9, pretty_print == '\\0') {\n                if (with_functions != '\\0') {\n                  longPtr10 = longPtr9;\n                  if (longPtr9 == (long *)0x0) {\nLAB_00103b7b:\n                    longPtr8 = (long *)&DAT_0010400a;\n                  }\n                  else {\n                    if (*(char *)longPtr9 == '\\0') {\n                      longPtr10 = (long *)0x0;\n                      goto LAB_00103b7b;\n                    }\n                    if ((do_demangle == '\\0') ||\n                       (longPtr10 = (long *)bfd_demangle(filePtr1,longPtr9,demangle_flags),\n                       longPtr8 = longPtr10, longPtr10 == (long *)0x0)) {\n                      longPtr10 = (long *)0x0;\n                      longPtr8 = longPtr9;\n                    }\n                  }\n                  printf(\"%s\",longPtr8);\n                  if (pretty_print == '\\0') {\n                    putchar(10);\n                  }\n                  else {\n                    charPtr1 = (char *)dcgettext(0,&DAT_001040f1,5);\n                    printf(charPtr1);\n                  }\n                  free(longPtr10);\n                }\n                filePtr2 = filename;\n                if (base_names == '\\0') {\n                  if (filename == (FILE *)0x0) {\n                    filePtr2 = (FILE *)&DAT_0010400a;\n                  }\n                }\n                else if (filename == (FILE *)0x0) {\n                  filePtr2 = (FILE *)&DAT_0010400a;\n                }\n                else {\n                  charPtr1 = strrchr((char *)filename,0x2f);\n                  if (charPtr1 != (char *)0x0) {\n                    filePtr2 = (FILE *)(charPtr1 + 1);\n                    filename = filePtr2;\n                  }\n                }\n                printf(\"%s:\",filePtr2);\n                if (line == 0) {\n                  puts(\"?\");\n                }\n                else if (discriminator == 0) {\n                  printf(\"%u\\n\");\n                }\n                else {\n                  printf(\"%u (discriminator %u)\\n\");\n                }\n                if (unwind_inlines == '\\0') goto LAB_0010304c;\n                boolVar9 = (**(code **)(filePtr1->_IO_read_ptr + 600))\n                                  (filePtr1,&filename,&functionname,&line);\n                longPtr9 = functionname;\n                if (boolVar9 == '\\0') {\n                  boolVar9 = '\\0';\n                  goto LAB_00103053;\n                }\n              }\n              charPtr1 = (char *)dcgettext(0,\" (inlined by) \",5);\n              printf(charPtr1);\n            } while( true );\n          }\n        }\n        else if (((*(byte *)((long)longPtr11 + 0x24) & 1) != 0) && (pc < (ulong)longPtr11[8])) {\n          boolVar9 = (**(code **)(filePtr1->_IO_read_ptr + 0x240))\n                            (filePtr1,syms,longPtr11,pc,&filename,&functionname,&line,&discriminator)\n          ;\n          goto LAB_00102fcf;\n        }\n        if (with_functions != '\\0') {\n          if (pretty_print == '\\0') {\n            puts(\"??\");\n          }\n          else {\n            printf(\"?? \");\n          }\n        }\n        puts(\"??:0\");\nLAB_00103053:\n        fflush(*(FILE **)charPtr1);\n        if ((int)unaff_R12 != 0) goto LAB_00102ee7;\nLAB_00103065:\n        charPtr1 = fgets((char *)&statVar1,100,_stdin);\n        statPtr1 = &statVar1;\n        if (charPtr1 == (char *)0x0) goto LAB_0010308a;\n      } while( true );\n    }\n  } while( true );\nLAB_00102970:\n  byteVar10 = bytePtr4[1];\n  bytePtr4 = bytePtr4 + 1;\n  if (byteVar10 == 0) goto LAB_001030bb;\n  goto LAB_00102980;\nswitchD_00102d16_caseD_73:\n  base_names = '\\x01';\n  goto switchD_00102d16_caseD_0;\n}\n\n",
            "called": [
                "xstrdup",
                "non_fatal",
                "bfd_check_format_matches",
                "fputc",
                "bfd_check_format",
                "stat",
                "fgets",
                "bindtextdomain",
                "fread",
                "find_address_in_section",
                "bfd_openr",
                "strtoul",
                "fatal",
                "xmalloc",
                "free",
                "fprintf",
                "strchr",
                "__errno_location",
                "fclose",
                "exit",
                "setlocale",
                "xexit",
                "fopen",
                "bfd_get_section_by_name",
                "bfd_init",
                "bfd_demangle",
                "usage",
                "strlen",
                "ftell",
                "strrchr",
                "bfd_errmsg",
                "getopt_long",
                "strerror",
                "fseek",
                "bfd_map_over_sections",
                "memcpy",
                "ferror",
                "cplus_demangle_set_style",
                "textdomain",
                "dcgettext",
                "bfd_set_default_target",
                "strcmp",
                "bfd_nonfatal",
                "xmalloc_set_program_name",
                "bfd_fprintf_vma",
                "cplus_demangle_name_to_style",
                "bfd_set_error_program_name",
                "fflush",
                "memmove",
                "putchar",
                "bfd_scan_vma",
                "xrealloc",
                "printf",
                "puts",
                "bfd_get_error",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027b0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "decode_file_001027b0"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00107048": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107048",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_00107048"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00103bd0": {
            "renaming": {
                "FUN_00103bd0": "report_error_00103bd0",
                "param_1": "error1",
                "param_2": "error2",
                "param_3": "error3",
                "param_4": "error4",
                "param_5": "error5",
                "param_6": "error6",
                "param_7": "error7",
                "param_8": "error8",
                "param_9": "errorDesc",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "lVar3": "hasError",
                "in_R10": "additionalInfo",
                "local_d8": "localVar1",
                "local_d4": "localVar2",
                "local_d0": "localBuffer",
                "local_c8": "localPointer",
                "local_b8": "localArray",
                "local_b0": "localVar3",
                "local_a8": "localVar4",
                "local_a0": "localVar5",
                "local_98": "localVar6",
                "local_90": "localVar7",
                "local_88": "localError1",
                "local_78": "localError2",
                "local_68": "localError3",
                "local_58": "localError4",
                "local_48": "localError5",
                "local_38": "localError6",
                "local_28": "localError7",
                "local_18": "localError8",
                "program_name": "progName",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid reportError_00103bd0(undefined4 error1,undefined4 error2,undefined4 error3,undefined4 error4,\n                 undefined4 error5,undefined4 error6,undefined4 error7,undefined4 error8,\n                 undefined8 errorDesc,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  int error;\n  undefined8 errorMessage;\n  long hasError;\n  undefined8 additionalInfo;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localBuffer;\n  undefined *localPointer;\n  undefined localArray [8];\n  undefined8 localVar3;\n  undefined8 localVar4;\n  undefined8 localVar5;\n  undefined8 localVar6;\n  undefined8 localVar7;\n  undefined4 localError1;\n  undefined4 localError2;\n  undefined4 localError3;\n  undefined4 localError4;\n  undefined4 localError5;\n  undefined4 localError6;\n  undefined4 localError7;\n  undefined4 localError8;\n  \n  if (flag != '\\0') {\n    localError1 = error1;\n    localError2 = error2;\n    localError3 = error3;\n    localError4 = error4;\n    localError5 = error5;\n    localError6 = error6;\n    localError7 = error7;\n    localError8 = error8;\n  }\n  localBuffer = &stack0x00000008;\n  localVar1 = 8;\n  localPointer = localArray;\n  localVar2 = 0x30;\n  localVar3 = param10;\n  localVar4 = param11;\n  localVar5 = param12;\n  localVar6 = param13;\n  localVar7 = param14;\n  report(errorDesc,&localVar1);\n  hasError = 1;\n  xexit();\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (hasError != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",progName,hasError,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",progName,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "report_error_00103bd0"
        },
        "FUN_00107168": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107168",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00107168"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main",
                "bfd_nonfatal.cold",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00107208": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107208",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_00107208"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00107170": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107170",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00107170"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00107058": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107058",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_00107058"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_00102720": {
            "renaming": {
                "FUN_00102720": "FUNC_00102720"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102744) */\n/* WARNING: Removing unreachable block (ram,0x00102750) */\n\nvoid FUNC_00102720(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00102720",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00102720"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_00107180": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107180",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_00107180"
        },
        "FUN_001071a8": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071a8",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_001071a8"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "bfd_nonfatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_00107100": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107100",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00107100"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001071b8": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071b8",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_001071b8"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001023e1": {
            "renaming": {
                "FUN_001023e1": "print_usage_001023e1",
                "param_1": "output_file",
                "param_2": "exit_code",
                "lVar1": "program_name_ptr",
                "pcVar2": "translation",
                "__ptr": "target_list_ptr",
                "plVar3": "current_target_ptr"
            },
            "code": "\nvoid print_usage_001023e1(FILE *output_file,int exit_code)\n\n{\n  long program_name_ptr;\n  char *translation;\n  long *target_list_ptr;\n  long *current_target_ptr;\n  \n  program_name_ptr = program_name;\n  translation = (char *)dcgettext(0,\"Usage: %s [option(s)] [addr(s)]\\n\",5);\n  fprintf(output_file,translation,program_name_ptr);\n  translation = (char *)dcgettext(0,\" Convert addresses into line number/file name pairs.\\n\",5);\n  fprintf(output_file,translation);\n  translation = (char *)dcgettext(0,\n                             \" If no addresses are specified on the command line, they will be read from stdin\\n\"\n                             ,5);\n  fprintf(output_file,translation);\n  translation = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                Read options from <file>\\n  -a --addresses         Show addresses\\n  -b --target=<bfdname>  Set the binary file format\\n  -e --exe=<executable>  Set the input file name (default is a.out)\\n  -i --inlines           Unwind inlined functions\\n  -j --section=<name>    Read section-relative offsets instead of addresses\\n  -p --pretty-print      Make the output easier to read for humans\\n  -s --basenames         Strip directory names\\n  -f --functions         Show function names\\n  -C --demangle[=style]  Demangle function names\\n  -R --recurse-limit     Enable a limit on recursion whilst demangling.  [Default]\\n  -r --no-recurse-limit  Disable a limit on recursion whilst demangling\\n  -h --help              Display this information\\n  -v --version           Display the program\\'s version\\n\\n\"\n                             ,5);\n  fprintf(output_file,translation);\n  program_name_ptr = program_name;\n  if (program_name == 0) {\n    translation = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,translation);\n  }\n  else {\n    translation = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,translation,program_name_ptr);\n  }\n  target_list_ptr = (long *)bfd_target_list();\n  current_target_ptr = target_list_ptr;\n  while( true ) {\n    program_name_ptr = *current_target_ptr;\n    current_target_ptr = current_target_ptr + 1;\n    if (program_name_ptr == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list_ptr);\n  if (exit_code == 0) {\n    translation = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,translation,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exit_code);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "bfd_target_list",
                "fputc",
                "exit",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e1",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_001023e1"
        },
        "FUN_00103c70": {
            "renaming": {
                "FUN_00103c70": "print_error_message_00103c70",
                "param_1": "errorCode",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "appName"
            },
            "code": "\n\n\nvoid printErrorMessage_00103c70(long errorCode)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (errorCode != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",appName,errorCode,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",appName,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c70",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_error_message_00103c70"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001026c0": {
            "renaming": {
                "FUN_001026c0": "run_process_entry_001026c0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "auxiliaryStack"
            },
            "code": "\nvoid processEntry runProcessEntry_001026c0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined auxiliaryStack [8];\n  \n  __libc_start_main(main,arg2,&stack0x00000008,0,0,arg1,auxiliaryStack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001026c0",
            "calling": [],
            "imported": false,
            "current_name": "run_process_entry_001026c0"
        },
        "FUN_00107070": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107070",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_00107070"
        },
        "FUN_00107190": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107190",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_00107190"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00107110": {
            "renaming": {},
            "code": "\n\n\n\nchar * fgets(char *__s,int __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fgets@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107110",
            "calling": [
                "fgets"
            ],
            "imported": false,
            "current_name": "FUN_00107110"
        }
    },
    "used_tokens": 14804,
    "layers": [
        [
            "FUN_00102620",
            "FUN_001025c0",
            "FUN_00102000",
            "FUN_00102760",
            "FUN_001023a0",
            "FUN_00102540",
            "FUN_00102020",
            "FUN_001027b0",
            "FUN_00103bd0",
            "FUN_001023e1",
            "FUN_00103c70",
            "FUN_001026c0"
        ]
    ],
    "locked_functions": []
}