{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_match_00102cd9",
                "in_EAX": "input",
                "iVar1": "comparisonResult",
                "unaff_RBX": "ptrArray",
                "param_7": "filename"
            },
            "code": "\nlong * findMatch_00102cd9(void)\n\n{\n  int input;\n  int comparisonResult;\n  long *ptrArray;\n  undefined8 filename;\n  \n  filename = DAT_0010d638;\n  if (input == 3) {\n    for (; *ptrArray != 0; ptrArray = (long *)(*ptrArray + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*ptrArray != (undefined8 *)0x0; ptrArray = (long *)(*ptrArray + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*ptrArray,filename);\n      if (comparisonResult == 0) {\n        if (input != 2) {\n          return ptrArray;\n        }\n        return (long *)(*ptrArray + 0xf0);\n      }\n    }\n  }\n  return ptrArray;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_match_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102710",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_00105830",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "file",
                "param_2": "fileContent",
                "param_3": "includeFileInfo",
                "param_4": "includeMemoryAddress",
                "iVar1": "status",
                "ppcVar2": "filePtr",
                "pcVar3": "timeData",
                "uVar4": "fileMode",
                "local_100": "currentTime",
                "uStack_f3": "fileType",
                "cStack_f2": "permUserRead",
                "cStack_f1": "permUserWrite",
                "cStack_f0": "permUserExecute",
                "cStack_ef": "permGroupRead",
                "cStack_ee": "permGroupWrite",
                "cStack_ed": "permGroupExecute",
                "cStack_ec": "permOthersRead",
                "cStack_eb": "permOthersWrite",
                "cStack_ea": "permOthersExecute",
                "local_e8": "formattedTime",
                "uStack_a0": "permissionBits",
                "uStack_9c": "inodeNumber",
                "uStack_98": "deviceNumber",
                "uStack_88": "fileSize",
                "local_60": "fileModificationTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *file,char **fileContent,char includeFileInfo,char includeMemoryAddress)\n\n{\n  int status;\n  char **filePtr;\n  char *timeData;\n  uint fileMode;\n  time_t currentTime;\n  undefined fileType;\n  char permUserRead;\n  char permUserWrite;\n  char permUserExecute;\n  char permGroupRead;\n  char permGroupWrite;\n  char permGroupExecute;\n  char permOthersRead;\n  char permOthersWrite;\n  char permOthersExecute;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined local_b8 [24];\n  uint permissionBits;\n  uint inodeNumber;\n  uint deviceNumber;\n  undefined8 fileSize;\n  time_t fileModificationTime;\n  \n  if (includeFileInfo != '\\0') {\n    filePtr = (char **)fileContent[0x1d];\n    if ((char **)fileContent[0x1d] == (char **)0x0) {\n      filePtr = fileContent;\n    }\n    status = (**(code **)(filePtr[1] + 0x1e8))(fileContent,local_b8);\n    if (status == 0) {\n      currentTime = fileModificationTime;\n      timeData = ctime(&currentTime);\n      if (timeData == (char *)0x0) {\n        timeData = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeData);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeData + 4);\n      }\n      fileMode = permissionBits & 0xf000;\n      if (fileMode == 0x4000) {\n        fileType = 100;\n      }\n      else if (fileMode == 0xa000) {\n        fileType = 0x6c;\n      }\n      else if (fileMode == 0x6000) {\n        fileType = 0x62;\n      }\n      else if (fileMode == 0x2000) {\n        fileType = 99;\n      }\n      else if (fileMode == 0xc000) {\n        fileType = 0x73;\n      }\n      else {\n        fileType = 0x70;\n        if (fileMode != 0x1000) {\n          fileType = 0x2d;\n        }\n      }\n      permUserRead = (-((permissionBits & 0x100) == 0) & 0xbbU) + 0x72;\n      permUserWrite = (-((permissionBits & 0x80) == 0) & 0xb6U) + 0x77;\n      permUserExecute = (-((permissionBits & 0x40) == 0) & 0xb5U) + 0x78;\n      permGroupRead = (-((permissionBits & 0x20) == 0) & 0xbbU) + 0x72;\n      permGroupWrite = (-((permissionBits & 0x10) == 0) & 0xb6U) + 0x77;\n      permGroupExecute = (-((permissionBits & 8) == 0) & 0xb5U) + 0x78;\n      permOthersRead = (-((permissionBits & 4) == 0) & 0xbbU) + 0x72;\n      permOthersWrite = (-((permissionBits & 2) == 0) & 0xb6U) + 0x77;\n      permOthersExecute = (-((permissionBits & 1) == 0) & 0xb5U) + 0x78;\n      if ((permissionBits & 0x800) != 0) {\n        if (permUserExecute == 'x') {\n          permUserExecute = 's';\n        }\n        else {\n          permUserExecute = 'S';\n        }\n      }\n      if ((permissionBits & 0x400) != 0) {\n        if (permGroupExecute == 'x') {\n          permGroupExecute = 's';\n        }\n        else {\n          permGroupExecute = 'S';\n        }\n      }\n      if ((permissionBits & 0x200) != 0) {\n        if (permOthersExecute == 'x') {\n          permOthersExecute = 't';\n        }\n        else {\n          permOthersExecute = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&permUserRead,(ulong)inodeNumber,(ulong)deviceNumber,fileSize,\n              formattedTime,(ulong)permissionBits);\n    }\n  }\n  fputs(*fileContent,file);\n  if (includeMemoryAddress != '\\0') {\n    if ((*(byte *)((long)fileContent + 0x49) & 0x10) == 0) {\n      if (fileContent[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (fileContent[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00102d8c",
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00107890",
                "FUN_00103ddc"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "prepare_and_print_file_00105a68",
                "pcVar1": "directoryPath",
                "pFVar2": "filePointer",
                "sVar3": "directoryPathLength"
            },
            "code": "\nvoid prepareAndPrintFile_00105a68(void)\n\n{\n  char *directoryPath;\n  FILE *filePointer;\n  size_t directoryPathLength;\n  \n  directoryPath = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    directoryPathLength = strlen(DAT_0010d5e8);\n    if (directoryPathLength != 0) {\n      if (directoryPath[directoryPathLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(directoryPath,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(directoryPath,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat",
                "printf",
                "xexit",
                "FUN_00102e57",
                "perror",
                "fopen",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "prepare_and_print_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_001032a8",
                "param_1": "archive",
                "param_2": "callback_function",
                "param_3": "entry_list",
                "param_4": "return_value",
                "lVar1": "next_entry",
                "uVar2": "entry_value",
                "bVar3": "entry_found",
                "plVar4": "current_entry",
                "iVar5": "filename_comparison",
                "__format": "format_string",
                "plVar6": "next_entry",
                "lVar7": "current_entry",
                "plVar8": "previous_entry"
            },
            "code": "\n\n\nundefined8 process_archive_001032a8(long *archive,code *callback_function,undefined8 *entry_list,undefined8 return_value)\n\n{\n  long next_entry;\n  undefined8 entry_value;\n  bool entry_found;\n  long *current_entry;\n  int filename_comparison;\n  char *format_string;\n  long *next_entry;\n  long current_entry;\n  long *previous_entry;\n  \n  current_entry = archive[0x1e];\n  if (entry_list == (undefined8 *)0x0) {\n    while (current_entry != 0) {\n      next_entry = *(long *)(current_entry + 0xf0);\n      (*callback_function)(current_entry,0);\n      current_entry = next_entry;\n    }\n  }\n  else {\n    do {\n      entry_found = false;\n      current_entry = (long *)archive[0x1e];\n      previous_entry = archive;\n      while (next_entry = current_entry, next_entry != (long *)0x0) {\n        if (*next_entry != 0) {\n          filename_comparison = filename_cmp(*entry_list);\n          if (filename_comparison == 0) {\n            entry_found = true;\n            (*callback_function)(next_entry,previous_entry);\n          }\n        }\n        previous_entry = next_entry;\n        current_entry = (long *)next_entry[0x1e];\n      }\n      if (!entry_found) {\n        entry_value = *entry_list;\n        format_string = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,format_string,entry_value);\n      }\n      entry_list = (undefined8 *)entry_list[1];\n    } while (entry_list != (undefined8 *)0x0);\n  }\n  return return_value;\n}\n\n",
            "called": [
                "filename_cmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_missing_entries_0010285f",
                "unaff_RBP": "callback",
                "unaff_R12": "archiveBase",
                "unaff_R13D": "numEntries",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "numPrinted",
                "plVar5": "currentEntry",
                "plVar3": "alternateEntry",
                "lVar2": "entryAddress",
                "uVar4": "entryName",
                "__format": "errorMessage"
            },
            "code": "\n\n\nvoid printMissingEntries_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessage;\n  long entryAddress;\n  long *alternateEntry;\n  undefined8 entryName;\n  long *currentEntry;\n  code *callback;\n  long archiveBase;\n  int numEntries;\n  undefined8 *entryNames;\n  int numPrinted;\n  \ncode_r0x0010285f:\n  entryName = *entryNames;\n  errorMessage = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorMessage,entryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  numEntries = numEntries + -1;\n  if (numEntries == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archiveBase + 0xf0);\n  numPrinted = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      entryAddress = *currentEntry;\n      if (entryAddress == 0) {\n        alternateEntry = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          alternateEntry = currentEntry;\n        }\n        (**(code **)(alternateEntry[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archiveBase + 0x49) & 0x10) == 0) || (entryAddress = extracted_data_00105830(), entryAddress != 0))\n      {\n        entryName = extracted_data_00105830(*entryNames);\n        iVar1 = filename_cmp(entryName,entryAddress);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (numPrinted = numPrinted + 1,\n            numPrinted == _DAT_0010d630)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*callback)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_missing_entries_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_001057a0",
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "outputMode",
                "uVar1": "archiveName",
                "pcVar2": "text",
                "__stream": "fileStream"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint outputMode)\n\n{\n  undefined8 archiveName;\n  char *text;\n  FILE *fileStream;\n  \n  text = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  fileStream = _stderr;\n  if (outputMode != 0) {\n    fileStream = _stdout;\n  }\n  fprintf(fileStream,text,DAT_0010d660);\n  archiveName = DAT_0010d660;\n  text = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(fileStream,text,archiveName);\n  text = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(fileStream,text);\n  text = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(fileStream,text);\n  print_emulation_options_0010336b(fileStream);\n  print_supported_targets_0010266f(DAT_0010d660,fileStream);\n  if (outputMode != 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(fileStream,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputMode ^ 1);\n}\n\n",
            "called": [
                "FUN_0010266f",
                "FUN_0010336b",
                "dcgettext",
                "xexit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "param_1": "shouldPrintToStdout",
                "uVar1": "defaultPrintValue",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010394a(uint shouldPrintToStdout)\n\n{\n  undefined8 defaultPrintValue;\n  char *message;\n  FILE *outputStream;\n  \n  defaultPrintValue = DAT_0010d660;\n  outputStream = _stderr;\n  if (shouldPrintToStdout != 0) {\n    outputStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,defaultPrintValue);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (shouldPrintToStdout != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(shouldPrintToStdout ^ 1);\n}\n\n",
            "called": [
                "FUN_0010266f",
                "dcgettext",
                "xexit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "print_error_message_00107920",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "arraySize",
                "local_d4": "numElements",
                "local_d0": "localArray",
                "local_c8": "localArrayCopy",
                "local_b8": "buffer",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "error_code_copy",
                "local_78": "param2_copy",
                "local_68": "param3_copy",
                "local_58": "param4_copy",
                "local_48": "param5_copy",
                "local_38": "param6_copy",
                "local_28": "param7_copy",
                "local_18": "param8_copy"
            },
            "code": "\nvoid printErrorMessage_00107920(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 arraySize;\n  undefined4 numElements;\n  undefined *localArray;\n  undefined *localArrayCopy;\n  undefined buffer [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  localArray = &stack0x00000008;\n  arraySize = 8;\n  localArrayCopy = buffer;\n  numElements = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  print_error_message_001078c0(param9,&arraySize);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "print_error_message_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "get_return_value_00105bb0"
            },
            "code": "\nundefined8 getReturnValue_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "get_return_value_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "get_zero_00107640"
            },
            "code": "\nundefined8 getZero_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "get_zero_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "process_file_path_00102e6f",
                "in_RAX": "filePath",
                "pcVar1": "currentDir",
                "uVar2": "baseName",
                "uVar3": "errorMsg",
                "pFVar4": "file",
                "sVar5": "length",
                "pcVar6": "currentPath"
            },
            "code": "\nvoid processFilePath_00102e6f(void)\n\n{\n  char *currentDir;\n  char *filePath;\n  undefined8 baseName;\n  undefined8 errorMsg;\n  FILE *file;\n  size_t length;\n  char *currentPath;\n  \n  currentDir = DAT_0010d5e8;\n  do {\n    filePath = filePath + 1;\n    while (*filePath != '/') {\n      if (*filePath == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (length = strlen(DAT_0010d5e8), length != 0)) {\n          if (currentDir[length - 1] == '/') {\n            DAT_0010d618 = (char *)concat(currentDir,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(currentDir,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        file = fopen(DAT_0010d618,\"w\");\n        if (file == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      currentPath = filePath;\n      if ((*filePath == '.') && (currentPath = filePath + 1, filePath[1] == '.')) {\n        currentPath = filePath + 2;\n        if ((filePath[2] == '/') || (filePath[2] == '\\0')) {\n          baseName = lbasename();\n          currentDir = DAT_0010d618;\n          errorMsg = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          print_error_message_00107920(errorMsg,currentDir,baseName);\n          DAT_0010d618 = (char *)baseName;\n          prepare_and_print_file_00105a68();\n          return;\n        }\n      }\n      for (; (filePath = currentPath, *currentPath != '\\0' && (*currentPath != '/')); currentPath = currentPath + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "FUN_00102e6f",
                "lbasename",
                "dcgettext",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_file_path_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_exit_status_0010315d",
                "xexit": "exitProgram"
            },
            "code": "\n\n\nvoid checkExitStatus_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_exit_status_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_file_info_00107890",
                "param_1": "file",
                "print_file_info_001079c0": "printFileInfoHelper",
                "_stdout": "outputStream"
            },
            "code": "\n\n\nvoid printFileInfo_00107890(undefined8 file)\n\n{\n  printFileInfo_00107890Helper(outputStream,file,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_file_info_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00105af0",
                "FUN_00102710"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "pvVar1": "buffer",
                "pvVar2": "allocatedMemory",
                "auVar3": "outputBuffer"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 input1,undefined8 input2,undefined8 input3,undefined8 input4)\n\n{\n  void *buffer;\n  void *allocatedMemory;\n  undefined outputBuffer [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)print_and_exit_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    allocatedMemory = malloc(0x4002);\n    *(void **)((long)buffer + 8) = allocatedMemory;\n  } while (allocatedMemory == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  initialize_file_001031cf(buffer,input1);\n  outputBuffer._8_8_ = input4;\n  outputBuffer._0_8_ = buffer;\n  return outputBuffer;\n}\n\n",
            "called": [
                "FUN_001033b0",
                "FUN_001031cf",
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_param_values_00103172",
                "param_1": "original_data",
                "param_2": "modified_data",
                "param_3": "flag",
                "param_4": "extra_data",
                "uVar1": "temp_value",
                "auVar2": "result"
            },
            "code": "\nundefined  [16]\nupdate_param_values_00103172(undefined8 *original_data,undefined8 *modified_data,char flag,undefined8 extra_data)\n\n{\n  undefined8 temp_value;\n  undefined result [16];\n  \n  if (flag != '\\0') {\n    printf(\"r - %s\\n\",*modified_data);\n  }\n  temp_value = *original_data;\n  modified_data[0x1e] = temp_value;\n  result._1_7_ = (undefined7)((ulong)temp_value >> 8);\n  result[0] = 1;\n  *original_data = modified_data;\n  result._8_8_ = extra_data;\n  return result;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_param_values_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_matching_pointer_00105870",
                "param_1": "pointers",
                "param_2": "count",
                "param_3": "key",
                "iVar1": "comparisonResult",
                "iVar3": "mode",
                "uVar2": "defaultKey"
            },
            "code": "\nlong * findMatchingPointer_00105870(long *pointers,int count,undefined8 key)\n\n{\n  int comparisonResult;\n  undefined8 defaultKey;\n  int mode;\n  \n  defaultKey = DAT_0010d638;\n  mode = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultKey = key;\n    mode = count;\n  }\n  if (mode == 3) {\n    for (; *pointers != 0; pointers = (long *)(*pointers + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*pointers != (undefined8 *)0x0; pointers = (long *)(*pointers + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*pointers,defaultKey);\n      if (comparisonResult == 0) {\n        if (mode != 2) {\n          return pointers;\n        }\n        return (long *)(*pointers + 0xf0);\n      }\n    }\n  }\n  return pointers;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_matching_pointer_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_001030ed",
                "puVar1": "dataPointer"
            },
            "code": "\nvoid extractData_001030ed(void)\n\n{\n  undefined8 *dataPointer;\n  \n  dataPointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)dataPointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)dataPointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *dataPointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_00103e95",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "extract_data_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_replace_file_00105bc0",
                "param_1": "originalFilePath",
                "param_2": "newFilePath",
                "param_3": "permissions",
                "param_4": "timestamp",
                "uVar1": "reverseResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "unlinkResult",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] copyAndReplaceFile_00105bc0(char *originalFilePath,char *newFilePath,undefined4 permissions,undefined8 timestamp)\n\n{\n  uint reverseResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong unlinkResult;\n  undefined result [16];\n  \n  if (newFilePath == originalFilePath) {\n    unlinkResult = 0;\n  }\n  else {\n    reverseResult = reverse_and_save_to_file_00105c00(permissions);\n    unlinkResult = (ulong)reverseResult;\n    if (reverseResult != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00107920(errorMessage,newFilePath,errorString);\n    }\n    unlink(originalFilePath);\n  }\n  result._8_8_ = timestamp;\n  result._0_8_ = unlinkResult;\n  return result;\n}\n\n",
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "copy_and_replace_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_file_and_get_info_00107650",
                "param_1": "file",
                "uVar1": "result",
                "lVar2": "fileSize"
            },
            "code": "\nundefined8 checkFileAndGetInfo_00107650(undefined8 file)\n\n{\n  undefined8 result;\n  long fileSize;\n  \n  fileSize = get_file_size_001052a0();\n  if (fileSize < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    fileSize = convert_library_00105300(file,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    print_archive_info_001058b0(fileSize);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00105300",
                "xexit",
                "FUN_001052a0",
                "FUN_0010284b",
                "FUN_001058b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_file_and_get_info_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_unlink_00102f1e",
                "unaff_RBP": "file_size",
                "unaff_R12": "file_name",
                "unaff_retaddr": "return_address",
                "piVar1": "errno_location_result",
                "uVar2": "error_message",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] copy_file_and_unlink_00102f1e(void)\n\n{\n  int *errno_location_result;\n  undefined8 error_message;\n  ulong file_size;\n  char *file_name;\n  undefined result [16];\n  undefined8 return_address;\n  \n  errno_location_result = __errno_location();\n  strerror(*errno_location_result);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00107920(error_message);\n  unlink(file_name);\n  result._0_8_ = file_size & 0xffffffff;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_and_unlink_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_error_message_00102fd7",
                "piVar1": "error_number",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_message_00102fd7(void)\n\n{\n  int *error_number;\n  undefined8 error_message;\n  \n  error_number = __errno_location();\n  strerror(*error_number);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_00102fd7_00107920(error_message);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_error_message_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_status_00103ba8",
                "printf": "printStatusMessage",
                "fflush": "flushStandardOutput"
            },
            "code": "\n\n\nvoid checkAndPrintARStatus_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_print_ar_status_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00105480",
                "FUN_001028ed",
                "FUN_00102cd9"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00105300",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00102f96",
                "FUN_001031a5",
                "FUN_001058b0",
                "FUN_0010285f",
                "FUN_001075e0",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_0010266f",
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_0010336b",
                "FUN_0010342d",
                "FUN_001052a0",
                "FUN_0010394a",
                "FUN_00102d8c",
                "FUN_00103bd1",
                "FUN_001028ed",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_0010266f",
                "FUN_00102d8c",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_file_info_00103ddc",
                "param_1": "file_path"
            },
            "code": "\nvoid print_file_info_00103ddc(undefined8 file_path)\n\n{\n  print_file_info_00103ddc_001079c0(DAT_0010d578,file_path,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_file_info_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "message",
                "param_2": "argList",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *message,__gnuc_va_list argList)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010d660);\n  vfprintf(standardError,message,argList);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "vfprintf",
                "fprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107690",
                "FUN_00107920"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00102710",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_gnu_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyright"
            },
            "code": "\nvoid printGnuInfo_001075e0(undefined8 version)\n\n{\n  char *copyright;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyright = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyright);\n  copyright = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyright);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_gnu_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archive_entries_00105480",
                "param_1": "archive",
                "param_2": "entryProcessor",
                "param_3": "entryNames",
                "param_4": "numEntries",
                "iVar1": "comparisonResult",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "fallbackEntry",
                "uVar4": "processedEntry",
                "plVar5": "entryList",
                "local_cc": "counter",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processArchiveEntries_00105480(long archive,code *entryProcessor,undefined8 *entryNames,int numEntries)\n\n{\n  int comparisonResult;\n  char *formatString;\n  long currentEntry;\n  long *fallbackEntry;\n  undefined8 processedEntry;\n  long *entryList;\n  int counter;\n  undefined buffer [152];\n  \n  currentEntry = *(long *)(archive + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*entryProcessor)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entryList = *(long **)(archive + 0xf0);\n      counter = 0;\n      for (; entryList != (long *)0x0; entryList = (long *)entryList[0x1e]) {\n        if (*(int *)((long)entryList + 0xac) == 0) {\n          currentEntry = *entryList;\n          if (currentEntry == 0) {\n            fallbackEntry = (long *)entryList[0x1d];\n            if ((long *)entryList[0x1d] == (long *)0x0) {\n              fallbackEntry = entryList;\n            }\n            (**(code **)(fallbackEntry[1] + 0x1e8))(entryList,buffer);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (currentEntry = extracted_data_00105830(currentEntry,archive), currentEntry != 0)) {\n            processedEntry = extracted_data_00105830(*entryNames,archive);\n            comparisonResult = filename_cmp(processedEntry,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((DAT_0010d634 == '\\0' || (counter = counter + 1, counter == _DAT_0010d630)))) {\n              (*entryProcessor)();\n              *(undefined4 *)((long)entryList + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      processedEntry = *entryNames;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,processedEntry);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_in_archive_script_001031a5",
                "__format": "formatString",
                "uVar1": "updatedValue",
                "dcgettext": "getLocalizedMessage",
                "printf": "printFormattedString"
            },
            "code": "\nvoid printSyntaxErrorInArchiveScript_001031a5(void)\n\n{\n  uint updatedValue;\n  char *formatString;\n  \n  updatedValue = DAT_0010d554 + 1;\n  formatString = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(formatString,(ulong)updatedValue);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_syntax_error_in_archive_script_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00102ba1",
                "FUN_0010266f",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105a68",
                "FUN_00105300",
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00107c10",
                "FUN_0010342d",
                "FUN_00107690",
                "FUN_0010394a",
                "FUN_0010315d",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00105c00",
                "FUN_001058b0",
                "FUN_00102f55"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_00105db0",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001052a0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "initialize_dynamic_memory_00103df9",
                "in_RCX": "returnValue",
                "__size": "size",
                "lVar1": "loopCounter",
                "lVar2": "newSize",
                "puVar3": "bufferPointer",
                "bVar4": "zeroByteFlag"
            },
            "code": "\nundefined8 initializeDynamicMemory_00103df9(void)\n\n{\n  size_t size;\n  undefined8 returnValue;\n  long loopCounter;\n  long newSize;\n  undefined4 *bufferPointer;\n  byte zeroByteFlag;\n  \n  zeroByteFlag = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return returnValue;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return returnValue;\n    }\n    newSize = DAT_0010d580 + 8;\n    size = newSize * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      bufferPointer = (undefined4 *)((long)DAT_0010d5a8 + (size - 0x40));\n      DAT_0010d580 = newSize;\n      for (loopCounter = 0x10; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *bufferPointer = 0;\n        bufferPointer = bufferPointer + (ulong)zeroByteFlag * -2 + 1;\n      }\n      return returnValue;\n    }\n  }\n  print_and_exit_001033b0(\"out of dynamic memory in yyensure_buffer_stack()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "realloc",
                "FUN_001033b0",
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_dynamic_memory_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_data_00103a78",
                "param_1": "args",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "archive",
                "uVar3": "bytes_read",
                "uVar4": "error_msg",
                "sVar5": "bytes_written",
                "piVar6": "errno",
                "unaff_RBP": "remaining_bytes",
                "pcVar7": "error_str",
                "unaff_R13": "total_bytes_read",
                "unaff_R14": "total_bytes_expected",
                "auStack_b8": "stack_buffer",
                "local_88": "archive_size"
            },
            "code": "\n\n\nvoid extract_and_print_archive_data_00103a78(undefined8 *args)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *archive;\n  ulong bytes_read;\n  undefined8 error_msg;\n  size_t bytes_written;\n  int *errno;\n  size_t remaining_bytes;\n  char *error_str;\n  ulong total_bytes_read;\n  ulong total_bytes_expected;\n  undefined stack_buffer [48];\n  ulong archive_size;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archive = (undefined8 *)args[0x1d];\n  if ((undefined8 *)args[0x1d] == (undefined8 *)0x0) {\n    archive = args;\n  }\n  result = (**(code **)(archive[1] + 0x1e8))(args,stack_buffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*args);\n    }\n    total_bytes_read = 0;\n    bfd_seek(args,0,0);\n    goto LAB_00103afd;\n  }\n  args = (undefined8 *)*args;\n  error_str = \"internal stat error on %s\";\n  do {\n    error_msg = dcgettext(0,error_str,5);\n    print_error_and_exit_00107690(error_msg,args);\n    archive_size = total_bytes_expected;\n    do {\n      bytes_written = fwrite(buffer,1,remaining_bytes,_stdout);\n      if (bytes_written != remaining_bytes) {\n        errno = __errno_location();\n        error_str = strerror(*errno);\n        print_error_and_exit_00107690(\"stdout: %s\",error_str);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      total_bytes_read = total_bytes_read + bytes_written;\nLAB_00103afd:\n      if (archive_size <= total_bytes_read) goto LAB_00103b91;\n      remaining_bytes = archive_size - total_bytes_read;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,remaining_bytes,args);\n    } while (remaining_bytes == bytes_read);\n    error_str = \"%s is not a valid archive\";\n    args = *(undefined8 **)args[0x1d];\n    total_bytes_expected = archive_size;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "printf",
                "xmalloc",
                "dcgettext",
                "bfd_bread",
                "FUN_00107690",
                "bfd_seek",
                "__errno_location",
                "strerror",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_data_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00105300",
                "FUN_001078c0",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00102f96",
                "FUN_0010285f",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_0010336b",
                "FUN_0010342d",
                "FUN_001033b0",
                "FUN_0010394a",
                "FUN_00102d8c",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "print_archive_info_001058b0",
                "param_1": "parameters",
                "cVar1": "charVar1",
                "uVar2": "uintVar2",
                "iVar3": "intVar3",
                "uVar4": "uintVar4",
                "__format": "formatString",
                "__ptr": "ptr",
                "__stream": "fileStream",
                "ppcVar5": "charDoublePtr",
                "uStack0000000000000020": "uStack20",
                "in_stack_00000028": "inStack28",
                "in_stack_00000038": "inStack38",
                "local_3c": "localArray",
                "uStack_33": "uStack33",
                "cStack_32": "cStack32",
                "cStack_31": "cStack31",
                "print_error_and_exit_00107c10": "printErrorAndExit",
                "extract_filename_001057a0": "extractFilename",
                "bfd_fdopenw": "bfdFdOpenW",
                "bfd_set_format": "bfdSetFormat",
                "bfd_set_archive_head": "bfdSetArchiveHead",
                "dup": "duplicate",
                "bfd_close": "bfdClose",
                "sprintf": "formatStringWithVariables",
                "fprintf": "filePrintf",
                "fputs": "filePuts",
                "fputc": "filePutc",
                "dcgettext": "dcGetText",
                "free": "freeMemory",
                "copy_and_replace_file_00105bc0": "copyAndReplaceFile",
                "xexit": "exitProgram"
            },
            "code": "\n\n\nvoid print_archive_info_001058b0(undefined8 *parameters)\n\n{\n  char charVar1;\n  uint uintVar2;\n  int intVar3;\n  undefined8 uintVar4;\n  char *formatString;\n  void *ptr;\n  FILE *fileStream;\n  char **charDoublePtr;\n  uint uStack20;\n  uint inStack28;\n  undefined8 inStack38;\n  int localArray [2];\n  undefined uStack33;\n  char cStack32;\n  char cStack31;\n  \n  uintVar4 = parameters[0x1e];\n  localArray[0] = -1;\n  ptr = (void *)xstrduplicate(*parameters);\n  fileStream = (FILE *)extractFilename(ptr,localArray);\n  intVar3 = localArray[0];\n  if (fileStream != (FILE *)0x0) {\n    DAT_0010d618 = fileStream;\n    charDoublePtr = (char **)bfd_fdopenw(fileStream,*(undefined8 *)parameters[1],localArray[0]);\n    if (charDoublePtr != (char **)0x0) {\n      DAT_0010d5e0 = charDoublePtr;\n      bfd_set_format(charDoublePtr,2);\n      uintVar2 = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)charDoublePtr + 0x49) & 0xfffffff7;\n      *(char *)((long)charDoublePtr + 0x49) = (char)uintVar2;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)charDoublePtr + 0x44) = *(uint *)((long)charDoublePtr + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)charDoublePtr + 0x44) = *(uint *)((long)charDoublePtr + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)parameters + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)charDoublePtr + 0x49) = (byte)uintVar2 | 0x10;\n        }\n        charVar1 = bfd_set_archive_head(charDoublePtr,uintVar4);\n        if (charVar1 != '\\0') break;\n        uintVar2 = printErrorAndExit(ptr);\nLAB_00102d37:\n        *(uint *)((long)charDoublePtr + 0x44) = *(uint *)((long)charDoublePtr + 0x44) | 0x100000;\n      }\n      intVar3 = duplicate(intVar3);\n      charVar1 = bfd_close(charDoublePtr);\n      if (charVar1 == '\\0') {\n        printErrorAndExit(ptr);\n        formatString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,formatString);\n        uintVar2 = uStack20 & 0xf000;\n        if (uintVar2 == 0x4000) {\n          uStack33 = 100;\n        }\n        else if (uintVar2 == 0xa000) {\n          uStack33 = 0x6c;\n        }\n        else if (uintVar2 == 0x6000) {\n          uStack33 = 0x62;\n        }\n        else if (uintVar2 == 0x2000) {\n          uStack33 = 99;\n        }\n        else if (uintVar2 == 0xc000) {\n          uStack33 = 0x73;\n        }\n        else {\n          uStack33 = 0x70;\n          if (uintVar2 != 0x1000) {\n            uStack33 = 0x2d;\n          }\n        }\n        cStack32 = (-((_uStack20 & 0x100) == 0) & 0xbbU) + 0x72;\n        cStack31 = (-((_uStack20 & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(fileStream,\"%s %ld/%ld %6lu %s \",&cStack32,_uStack20 >> 0x20,\n                (ulong)inStack28,inStack38,&stack0xffffffffffffffd8,\n                _uStack20 & 0xffffffff);\n        fputs(*charDoublePtr,fileStream);\n        if ((char)parameters != '\\0') {\n          if ((*(byte *)((long)charDoublePtr + 0x49) & 0x10) == 0) {\n            if (charDoublePtr[0xb] != (char *)0x0) {\n              fprintf(fileStream,\" 0x%lx\");\n            }\n          }\n          else if (charDoublePtr[0xc] != (char *)0x0) {\n            fprintf(fileStream,\" 0x%lx\");\n          }\n        }\n        fputc(10,fileStream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(parameters);\n      intVar3 = copyAndReplaceFile(fileStream,ptr,intVar3);\n      if (intVar3 == 0) {\n        freeMemory(ptr);\n        freeMemory(fileStream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(intVar3);\n    printErrorAndExit(ptr);\n  }\n  uintVar4 = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  printErrorAndExit(uintVar4);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "close",
                "bfd_set_format",
                "FUN_001057a0",
                "FUN_00107c10",
                "xstrdup",
                "dcgettext",
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "print_archive_info_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_resources_00102bf5"
            },
            "code": "\nvoid cleanupResources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "fclose",
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_resources_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_call_00102020"
            },
            "code": "\nvoid executeIndirectCall_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_call_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_001078c0",
                "FUN_00102f96",
                "FUN_00103ba8",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_00105570",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_modification_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "syscallResult",
                "piVar2": "errorPointer",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4",
                "local_28": "timeSpec5"
            },
            "code": "\nvoid setFileModificationTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int syscallResult;\n  int *errorPointer;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 timeSpec5;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  timeSpec5 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  timeSpec1 = *(undefined4 *)(fileInfo + 0x48);\n  timeSpec2 = *(undefined4 *)(fileInfo + 0x4c);\n  timeSpec3 = *(undefined4 *)(fileInfo + 0x50);\n  timeSpec4 = *(undefined4 *)(fileInfo + 0x54);\n  syscallResult = utimensat(-100,filePath,(timespec *)&timeSpec1,0);\n  if (syscallResult != 0) {\n    errorPointer = __errno_location();\n    errorMessage = strerror(*errorPointer);\n    translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00107920(translatedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_modification_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_archive_member_00105a20",
                "param_1": "inputPath",
                "pcVar1": "basePath",
                "pcVar2": "tempPath",
                "uVar3": "baseName",
                "uVar4": "errorMessage",
                "pFVar5": "filePointer",
                "sVar6": "basePathLength"
            },
            "code": "\nvoid extractArchiveMember_00105a20(char *inputPath)\n\n{\n  char *basePath;\n  char *tempPath;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  size_t basePathLength;\n  \n  basePath = DAT_0010d5e8;\n  DAT_0010d618 = inputPath;\n  if (*inputPath == '/') {\nLAB_00102e9a:\n    baseName = lbasename();\n    basePath = DAT_0010d618;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    print_error_message_00107920(errorMessage,basePath,baseName);\n    DAT_0010d618 = (char *)baseName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*inputPath == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (basePathLength = strlen(DAT_0010d5e8), basePathLength != 0)) {\n        if (basePath[basePathLength - 1] == '/') {\n          DAT_0010d618 = (char *)concat(basePath,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(basePath,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      filePointer = fopen(DAT_0010d618,\"w\");\n      if (filePointer == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    tempPath = inputPath;\n    if ((*inputPath == '.') && (tempPath = inputPath + 1, inputPath[1] == '.')) {\n      tempPath = inputPath + 2;\n      if ((inputPath[2] == '/') || (inputPath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*tempPath != '\\0' && (*tempPath != '/')); tempPath = tempPath + 1) {\n    }\n    for (; inputPath = tempPath, *tempPath == '/'; tempPath = tempPath + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_001079c0",
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_00102f55",
                "piVar2": "errnoPtr",
                "unaff_R12D": "fileDescriptor",
                "iVar1": "errnoValue"
            },
            "code": "\nundefined8 closeFile_00102f55(void)\n\n{\n  int errnoValue;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  errnoValue = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = errnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_filename_001057a0",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unused_param",
                "param_4": "unused_param_2",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "filename_length",
                "lVar4": "index",
                "lVar5": "slash_position",
                "pcVar6": "filename",
                "bVar7": "char_offset",
                "auVar8": "ret_val"
            },
            "code": "\nundefined  [16] extract_filename_001057a0(char *file_path,int *file_descriptor,undefined8 unused_param,undefined8 unused_param_2)\n\n{\n  int result;\n  char *last_slash;\n  long filename_length;\n  long index;\n  long slash_position;\n  char *filename;\n  byte char_offset;\n  undefined ret_val [16];\n  \n  char_offset = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    filename_length = 0;\n  }\n  else {\n    slash_position = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(slash_position + 0xb);\n    filename_length = slash_position + 1;\n    filename = last_slash;\n    for (index = slash_position; index != 0; index = index + -1) {\n      *filename = *file_path;\n      file_path = file_path + (ulong)char_offset * -2 + 1;\n      filename = filename + (ulong)char_offset * -2 + 1;\n    }\n    last_slash[slash_position] = '/';\n  }\n  *(undefined8 *)(last_slash + filename_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + filename_length) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    filename = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    filename = last_slash;\n  }\n  ret_val._8_8_ = unused_param_2;\n  ret_val._0_8_ = filename;\n  return ret_val;\n}\n\n",
            "called": [
                "FUN_00102ba1",
                "xmalloc",
                "strrchr",
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "extract_filename_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "unaff_RBX": "fileContent",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "isHex",
                "param_9": "permissionChar",
                "param_19": "permissionBits",
                "param_20": "fileSize",
                "param_22": "timestamp",
                "__format": "errorMessage",
                "uVar1": "fileType",
                "uStack000000000000006c": "deviceID",
                "stack0x00000020": "errorMessageBuffer",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "readPermission",
                "cStack0000000000000017": "writePermission",
                "cStack0000000000000019": "executePermission",
                "cStack000000000000001a": "unknownPermission1",
                "cStack000000000000001b": "unknownPermission2",
                "cStack000000000000001c": "unknownPermission3",
                "cStack000000000000001d": "unknownPermission4",
                "cStack000000000000001e": "unknownPermission5"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *errorMessage;\n  uint fileType;\n  char **fileContent;\n  FILE *outputFile;\n  char isHex;\n  undefined fileTypeChar;\n  char readPermission;\n  char writePermission;\n  char permissionChar;\n  char executePermission;\n  char unknownPermission1;\n  char unknownPermission2;\n  char unknownPermission3;\n  char unknownPermission4;\n  char unknownPermission5;\n  undefined uStack000000000000001f;\n  uint permissionBits;\n  uint deviceID;\n  uint fileSize;\n  undefined8 timestamp;\n  \n  errorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&errorMessageBuffer,errorMessage);\n  fileType = permissionBits & 0xf000;\n  if (fileType == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (fileType == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (fileType == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (fileType != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  readPermission = (-((permissionBits & 0x100) == 0) & 0xbbU) + 0x72;\n  writePermission = (-((permissionBits & 0x80) == 0) & 0xb6U) + 0x77;\n  permissionChar = (-((permissionBits & 0x40) == 0) & 0xb5U) + 0x78;\n  executePermission = (-((permissionBits & 0x20) == 0) & 0xbbU) + 0x72;\n  unknownPermission1 = (-((permissionBits & 0x10) == 0) & 0xb6U) + 0x77;\n  unknownPermission2 = (-((permissionBits & 8) == 0) & 0xb5U) + 0x78;\n  unknownPermission3 = (-((permissionBits & 4) == 0) & 0xbbU) + 0x72;\n  unknownPermission4 = (-((permissionBits & 2) == 0) & 0xb6U) + 0x77;\n  unknownPermission5 = (-((permissionBits & 1) == 0) & 0xb5U) + 0x78;\n  if ((permissionBits & 0x800) != 0) {\n    if (permissionChar == 'x') {\n      permissionChar = 's';\n    }\n    else {\n      permissionChar = 'S';\n    }\n  }\n  if ((permissionBits & 0x400) != 0) {\n    if (unknownPermission2 == 'x') {\n      unknownPermission2 = 's';\n    }\n    else {\n      unknownPermission2 = 'S';\n    }\n  }\n  if ((permissionBits & 0x200) != 0) {\n    if (unknownPermission5 == 'x') {\n      unknownPermission5 = 't';\n    }\n    else {\n      unknownPermission5 = 'T';\n    }\n  }\n  uStack000000000000001f = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)deviceID,\n          (ulong)fileSize,timestamp,&errorMessageBuffer,(ulong)permissionBits);\n  fputs(*fileContent,outputFile);\n  if (isHex != '\\0') {\n    if ((*(byte *)((long)fileContent + 0x49) & 0x10) == 0) {\n      if (fileContent[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileContent[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "fprintf",
                "sprintf",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00105c00",
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_00103e95",
                "FUN_001031cf",
                "FUN_001028ed",
                "FUN_00102f55",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "convert_library_00105300",
                "param_1": "libraryPath",
                "param_2": "formats",
                "plVar1": "currentFile",
                "pcVar2": "errorMessage",
                "bVar3": "isThinLibrary",
                "cVar4": "conversionError",
                "iVar5": "statResult",
                "uVar6": "errorString",
                "uVar7": "errorString2",
                "piVar8": "errorNumber",
                "lVar9": "archivedFile",
                "puVar10": "extractedFiles",
                "local_b0": "matchingFormats",
                "local_a8": "fileStatus"
            },
            "code": "\n\n\nundefined8 * convertLibrary_00105300(char *libraryPath,undefined8 *formats)\n\n{\n  long *currentFile;\n  char *errorMessage;\n  byte isThinLibrary;\n  char conversionError;\n  int statResult;\n  undefined8 errorString;\n  undefined8 errorString2;\n  int *errorNumber;\n  long archivedFile;\n  undefined8 *extractedFiles;\n  undefined8 matchingFormats;\n  stat fileStatus;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  statResult = stat(libraryPath,&fileStatus);\n  errorMessage = DAT_0010d618;\n  if (statResult == 0) goto LAB_001053be;\n  errorNumber = __errno_location();\n  if (*errorNumber == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(libraryPath);\n      check_exit_status_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (formats != (undefined8 *)0x0)) {\n      extractedFiles = (undefined8 *)extract_and_convert_archived_files_00102710();\n      return extractedFiles;\n    }\n    formats = (undefined8 *)bfd_openw(libraryPath,DAT_0010d5f0);\n    if (((formats != (undefined8 *)0x0) && (conversionError = bfd_set_format(formats,2), conversionError != '\\0')) &&\n       (conversionError = bfd_close(formats), conversionError != '\\0')) {\n      errorMessage = libraryPath;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  print_error_and_exit_00107c10(libraryPath);\n  do {\n    isThinLibrary = *(byte *)((long)formats + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        errorString2 = *formats;\n        errorString = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit_00107690(errorString,errorString2);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      errorString2 = *formats;\n      errorString = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit_00107690(errorString,errorString2);\nLAB_001027cb:\n      print_error_message_00107c20(libraryPath);\n      statResult = bfd_get_error();\n      if (statResult == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(matchingFormats);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      currentFile = formats + 0x1e;\n      for (archivedFile = bfd_openr_next_archived_file(formats,0); archivedFile != 0;\n          archivedFile = bfd_openr_next_archived_file(formats,archivedFile)) {\n        *currentFile = archivedFile;\n        currentFile = (long *)(archivedFile + 0xf0);\n      }\n      *currentFile = 0;\n      statResult = bfd_get_error();\n      if (statResult == 9) {\n        return formats;\n      }\n      do {\n        print_error_and_exit_00107c10(libraryPath);\nLAB_00102826:\n        errorString2 = dcgettext(0,\"creating %s\",5);\n        print_error_message_00107920(errorString2,libraryPath);\n        errorMessage = libraryPath;\nLAB_001053be:\n        DAT_0010d618 = errorMessage;\n        formats = (undefined8 *)bfd_openr(libraryPath,DAT_0010d5f0);\n      } while (formats == (undefined8 *)0x0);\n      conversionError = bfd_check_format_matches(formats,2,&matchingFormats);\n      if (conversionError == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archivedFile = bfd_openr_next_archived_file(formats,0), archivedFile == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_openw",
                "bfd_set_format",
                "FUN_00107c10",
                "dcgettext",
                "bfd_openr",
                "xexit",
                "bfd_openr_next_archived_file",
                "FUN_00107690",
                "bfd_set_error",
                "stat",
                "FUN_00102710",
                "bfd_close",
                "bfd_check_format_matches",
                "FUN_00107c20",
                "bfd_get_error",
                "fprintf",
                "perror",
                "__errno_location",
                "FUN_00103bd1",
                "FUN_0010315d",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "convert_library_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "currByte",
                "puVar2": "currIdx",
                "bVar3": "currChar",
                "plVar4": "currPtr",
                "puVar5": "currVar",
                "uVar6": "currVar1",
                "uVar7": "currVar2",
                "bVar8": "currFlag",
                "bVar9": "prevFlag",
                "ppcVar10": "fileList",
                "piVar11": "fileCount",
                "puVar12": "tmpPtr",
                "bVar13": "tmpByte",
                "cVar14": "tmpChar",
                "iVar15": "tmpInt",
                "uVar16": "tmpUint",
                "uVar17": "tmpUint1",
                "pFVar18": "currFile",
                "sVar19": "tmpSize",
                "sVar20": "readSize",
                "__ptr": "fileContent",
                "plVar21": "ptrVar",
                "pFVar22": "tmpFile",
                "pcVar23": "tmpString",
                "lVar24": "tmpLong",
                "uVar25": "tmpUlong",
                "puVar26": "tmpPtrUlong",
                "uVar27": "tmpVar",
                "pFVar28": "tmpFile1",
                "uVar30": "tmpUlong2",
                "lVar34": "tmpLong1",
                "uVar37": "tmpVar1",
                "uVar40": "tmpUlong1",
                "uVar41": "tmpVar2",
                "uVar42": "tmpVar3",
                "uVar44": "tmpVar4",
                "iVar45": "tmpInt1",
                "pcVar46": "tmpString1",
                "bVar47": "tmpFlag1",
                "bVar48": "tmpByte1",
                "local_130": "tmpFile2",
                "local_128": "tmpFile3",
                "local_118": "tmpArrByte",
                "local_110": "tmpArrPtr",
                "local_108": "tmpArrSize",
                "local_100": "tmpLong2",
                "local_c8": "tmpArrByte1",
                "uStack_c6": "tmpStackVar1",
                "uStack_c5": "tmpStackVar2",
                "local_b0": "tmpVar5"
            },
            "code": "\n\n\nvoid processFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *currByte;\n  uint *currIdx;\n  byte currChar;\n  long *currPtr;\n  undefined8 *currVar;\n  undefined4 currVar1;\n  undefined4 currVar2;\n  bool currFlag;\n  bool prevFlag;\n  char **fileList;\n  int *fileCount;\n  undefined *tmpPtr;\n  byte tmpByte;\n  char tmpChar;\n  int tmpInt;\n  uint tmpUint;\n  undefined4 tmpUint1;\n  FILE *currFile;\n  size_t tmpSize;\n  size_t readSize;\n  byte *fileContent;\n  long *ptrVar;\n  FILE *tmpFile;\n  char *tmpString;\n  long tmpLong;\n  ulong tmpUlong;\n  undefined8 *tmpPtrUlong;\n  undefined8 tmpVar;\n  FILE *tmpFile1;\n  long **pplVar29;\n  undefined8 tmpUlong2;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pcurrChar3;\n  long tmpLong1;\n  long lVar35;\n  undefined **ppuVar36;\n  uint tmpVar1;\n  char *unaff_RBP;\n  byte *pcurrChar8;\n  char *pcVar39;\n  ulong tmpUlong1;\n  ulong tmpVar2;\n  ulong tmpVar3;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint tmpVar4;\n  int tmpInt1;\n  char *tmpString1;\n  bool tmpFlag1;\n  byte tmpByte1;\n  undefined8 tmpFile2;\n  FILE *tmpFile3;\n  byte *tmpArrByte;\n  char **tmpArrPtr;\n  size_t tmpArrSize;\n  long tmpLong2;\n  undefined tmpArrByte1 [2];\n  undefined tmpStackVar1;\n  undefined5 tmpStackVar2;\n  uint tmpVar5;\n  \n  tmpByte1 = 0;\n  tmpString1 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  currFile = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  tmpArrPtr = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  tmpFile3 = (FILE *)0x0;\n  tmpFile = argv;\n  do {\n    tmpUint = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)tmpUint;\n    tmpFile2 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)tmpFile;\n    if (**(char **)(&tmpFile->_flags + (long)unaff_RBP * 2) == '@') {\n      tmpVar4 = (int)tmpArrPtr - 1;\n      tmpArrPtr = (char **)(ulong)tmpVar4;\n      if (tmpVar4 == 0) {\n        ptrVar = *(long **)tmpFile;\n        tmpString1 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,tmpString1,ptrVar);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&tmpFile->_flags + (long)unaff_RBP * 2) + 1;\n      tmpInt = stat(pcVar39,(stat *)tmpArrByte1);\n      if (-1 < tmpInt) {\n        if ((tmpVar5 & 0xf000) == 0x4000) {\n          ptrVar = *(long **)tmpFile;\n          tmpString1 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        currFile = fopen(pcVar39,\"r\");\n        if (currFile != (FILE *)0x0) {\n          tmpInt = fseek(currFile,0,2);\n          if (((tmpInt != -1) && (tmpSize = ftell(currFile), tmpSize != 0xffffffffffffffff)) &&\n             (tmpInt = fseek(currFile,0,0), tmpInt != -1)) {\n            tmpArrByte = (byte *)xmalloc(tmpSize + 1);\n            readSize = fread(tmpArrByte,1,tmpSize,currFile);\n            if ((tmpSize == readSize) || (tmpInt = ferror(currFile), tmpInt == 0)) {\n              tmpArrByte[readSize] = 0;\n              tmpByte = *tmpArrByte;\n              pcurrChar3 = tmpArrByte;\n              while( true ) {\n                if (tmpByte == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)tmpByte * 2] & 0x40) == 0) break;\n                tmpByte = pcurrChar3[1];\n                pcurrChar3 = pcurrChar3 + 1;\n              }\n              tmpSize = strlen((char *)tmpArrByte);\n              fileContent = (byte *)xmalloc(tmpSize + 1);\n              tmpFile1 = (FILE *)0x0;\n              tmpInt = 0;\n              prevFlag = false;\n              tmpFlag1 = false;\n              currFlag = false;\n              tmpLong2 = 0;\n              pcurrChar3 = tmpArrByte;\n              do {\n                while (((&_sch_istable)[(ulong)*pcurrChar3 * 2] & 0x40) != 0) {\n                  pcurrChar3 = pcurrChar3 + 1;\n                }\n                if ((tmpInt == 0) || (tmpInt + -1 <= (int)tmpLong2)) {\n                  if (tmpFile1 == (FILE *)0x0) {\n                    tmpInt = 8;\n                    tmpFile1 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&tmpFile1->_flags + tmpLong2 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    tmpInt = tmpInt * 2;\n                    tmpFile1 = (FILE *)xrealloc(tmpFile1,(long)tmpInt << 3);\n                    ppcVar31 = (char **)((long)&tmpFile1->_flags + tmpLong2 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&tmpFile1->_flags + tmpLong2 * 8);\n                }\n                tmpByte = *pcurrChar3;\n                pcurrChar8 = fileContent;\n                while (tmpByte != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)tmpByte * 2] & 0x40) != 0) &&\n                       (!(bool)(prevFlag | currFlag | tmpFlag1))) {\n                      currFlag = false;\n                      prevFlag = false;\n                      tmpFlag1 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!currFlag) break;\n                    pcurrChar3 = pcurrChar3 + 1;\n                    *pcurrChar8 = tmpByte;\n                    pcurrChar8 = pcurrChar8 + 1;\n                    currFlag = false;\n                    tmpByte = *pcurrChar3;\n                    if (tmpByte == 0) goto LAB_0010606f;\n                  }\n                  if (tmpByte == 0x5c) {\n                    currFlag = true;\n                  }\n                  else if (tmpFlag1) {\n                    if (tmpByte == 0x27) {\n                      tmpFlag1 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pcurrChar8 = tmpByte;\n                      pcurrChar8 = pcurrChar8 + 1;\n                    }\n                  }\n                  else if (prevFlag) {\n                    if (tmpByte != 0x22) goto LAB_001061f1;\n                    prevFlag = false;\n                  }\n                  else if (tmpByte == 0x27) {\n                    tmpFlag1 = true;\n                  }\n                  else {\n                    if (tmpByte != 0x22) goto LAB_001061f1;\n                    prevFlag = true;\n                  }\n                  currByte = pcurrChar3 + 1;\n                  pcurrChar3 = pcurrChar3 + 1;\n                  tmpByte = *currByte;\n                }\nLAB_0010606f:\n                *pcurrChar8 = 0;\n                ptrVar = (long *)xstrdup(fileContent);\n                *ppcVar31 = (char *)ptrVar;\n                *(undefined8 *)(tmpFile1->_shortbuf + tmpLong2 * 8 + -0x7b) = 0;\n                tmpByte = *pcurrChar3;\n                currChar = (&_sch_istable)[(ulong)tmpByte * 2];\n                while ((currChar & 0x40) != 0) {\n                  tmpByte = pcurrChar3[1];\n                  pcurrChar3 = pcurrChar3 + 1;\n                  currChar = (&_sch_istable)[(ulong)tmpByte * 2];\n                }\n                tmpLong2 = tmpLong2 + 1;\n                if (tmpByte == 0) {\n                  free(fileContent);\n                  if (tmpFile == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(tmpArrByte);\n          }\n          fclose(currFile);\n        }\n      }\n    }\n    if ((int)tmpString1 <= (int)(tmpUint + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d65c < 0) goto LAB_001073cc;\nLAB_001062d3:\n        tmpUint = (uint)unaff_R12;\n        tmpInt = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (tmpInt != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        tmpUint = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        tmpPtr = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)tmpUint;\n        if ((char)tmpUint != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = execute_functions_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            tmpPtr = PTR_DAT_0010d2e0;\n            tmpInt = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = tmpInt + 1;\n            *(code **)(tmpPtr + (long)tmpInt * 8 + 0x10) = cleanup_resources_00107730;\n          }\n          else {\n            tmpPtrUlong = (undefined8 *)malloc(0x110);\n            if (tmpPtrUlong != (undefined8 *)0x0) {\n              *tmpPtrUlong = tmpPtr;\n              *(undefined4 *)(tmpPtrUlong + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)tmpPtrUlong;\n              goto LAB_0010632b;\n            }\n          }\n          tmpLong = 1;\n          do {\n            lVar35 = tmpLong;\n            tmpInt = (int)tmpString1;\n            if (tmpInt <= (int)lVar35) break;\n            tmpChar = get_zero_00107640(*(undefined8 *)((int *)pcVar43 + lVar35 * 2));\n            tmpLong = lVar35 + 1;\n          } while (tmpChar != '\\0');\n          tmpString1 = (char *)((long)pcVar43 + lVar35 * 8 + -8);\n          tmpVar4 = tmpInt - ((int)lVar35 + -1);\n          currFile = (FILE *)(ulong)tmpVar4;\n          if (_DAT_0010d65c != 0) {\n            pcVar43 = \"DhHUvVt\";\n            tmpVar1 = 0;\n            while (tmpInt = getopt_long(currFile,tmpString1,\"DhHUvVt\",&PTR_DAT_0010d300), tmpInt != -1)\n            {\n              if (tmpInt < 0x77) {\n                if (0x43 < tmpInt) {\n                  switch(tmpInt) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    tmpVar1 = tmpUint;\n                  }\n                }\n              }\n              else if (tmpInt == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)tmpVar4 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              print_usage_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                print_usage_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                print_gnu_info_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)tmpVar4 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)tmpString1 + (long)pcVar43 * 2);\n                if ((char)tmpVar1 != '\\0') break;\n                tmpUint = check_file_and_get_info_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | tmpUint);\n              }\n            }\n            while (tmpLong = get_file_size_001052a0(pcVar39), tmpLong < 1) {\n              tmpUint = 1;\nLAB_001071c4:\n              fileCount = (int *)pcVar43;\n              pcVar43 = (char *)((long)fileCount + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | tmpUint);\n              if ((int)tmpVar4 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)tmpString1 + 0x83) + (long)fileCount * 8 + -0x7b);\n            }\n            tmpInt = open(pcVar39,2,0);\n            if (tmpInt < 0) {\n              bfd_set_error(1);\n              print_error_and_exit_00107c10(pcVar39);\nLAB_0010737f:\n              print_error_and_exit_00107c10(pcVar39);\nLAB_00107387:\n              print_error_message_00107c20(pcVar39);\n              tmpInt = bfd_get_error();\n              if (tmpInt == 0xd) {\n                print_matching_formats_00103bd1(CONCAT53(tmpStackVar2,\n                                      CONCAT12(tmpStackVar1,CONCAT11(tmpArrByte1[1],tmpArrByte1[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            tmpChar = bfd_check_format_matches(unaff_RBP,2,tmpArrByte1);\n            if (tmpChar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                currIdx = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *currIdx = *currIdx | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              tmpChar = bfd_close(unaff_RBP);\n              if (tmpChar != '\\0') {\n                tmpUint = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            tmpVar = dcgettext(0,\"%s: no archive map to update\",5);\n            print_error_and_exit_00107690(tmpVar,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(DAT_0010d660);\n            tmpSize = strlen(pcVar39);\n            if ((tmpSize < 6) ||\n               (tmpInt = filename_cmp(pcVar39 + (tmpSize - 6),\"ranlib\"), tmpInt != 0)) {\n              _DAT_0010d65c = 0;\n            }\n            else {\n              _DAT_0010d65c = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          tmpFile = (FILE *)unaff_RBP;\n          tmpFile1 = currFile;\n          if ((int)tmpVar4 < 2) goto switchD_00107462_caseD_1;\n          tmpFile2 = (FILE *)CONCAT71(tmpFile2._1_7_,(char)tmpUint);\nLAB_001063a3:\n          tmpFile = (FILE *)unaff_RBP;\n          if (**(char **)((long)tmpString1 + 8) != '-') {\n            tmpArrByte1[0] = 0x2d;\n            tmpStackVar1 = 0;\n            tmpSize = strlen(*(char **)((long)tmpString1 + 8));\n            tmpInt = (int)tmpSize + (int)currFile;\n            unaff_R12 = (FILE *)xmalloc((long)tmpInt * 8);\n            tmpUint1 = *(undefined4 *)((long)tmpString1 + 4);\n            unaff_R12->_flags = *(int *)tmpString1;\n            *(undefined4 *)&unaff_R12->field_0x4 = tmpUint1;\n            ppcVar31 = *(char ***)((long)tmpString1 + 8);\n            tmpFile3 = (FILE *)((long)tmpString1 + 0x10);\n            tmpArrPtr = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              tmpArrByte = tmpArrByte1;\n              tmpArrByte1[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                tmpArrByte1[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(tmpArrByte);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  tmpArrByte1[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(tmpArrByte);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    tmpArrByte1[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(tmpArrByte);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    tmpChar = *(char *)((long)ppcVar31 + 4);\n                    tmpArrPtr = ppcVar32;\n                    if (tmpChar != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        tmpArrByte1[1] = tmpChar;\n                        tmpString = (char *)xstrdup(tmpArrByte);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = tmpString;\n                        tmpChar = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        tmpArrPtr = ppcVar32;\n                      } while (tmpChar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            tmpLong = (long)(int)currFile;\n            fileCount = (int *)tmpString1 + tmpLong * 2;\n            if (tmpFile3 < fileCount) {\n              tmpUlong = tmpLong * 8 - 0x11;\n              if ((tmpUlong < 0x18) || (ppcVar32 == (char **)((long)tmpString1 + 0x18))) {\n                *ppcVar32 = *(char **)((long)tmpString1 + 0x10);\n                if (((char **)((long)tmpString1 + 0x18) < fileCount) &&\n                   ((((ppcVar32[1] = *(char **)((long)tmpString1 + 0x18),\n                      (char **)((long)tmpString1 + 0x20) < fileCount &&\n                      (ppcVar32[2] = *(char **)((long)tmpString1 + 0x20),\n                      (char **)((long)tmpString1 + 0x28) < fileCount)) &&\n                     (ppcVar32[3] = *(char **)((long)tmpString1 + 0x28),\n                     (char **)((long)tmpString1 + 0x30) < fileCount)) &&\n                    (ppcVar32[4] = *(char **)((long)tmpString1 + 0x30),\n                    (char **)((long)tmpString1 + 0x38) < fileCount)))) {\n                  ppcVar32[5] = *(char **)((long)tmpString1 + 0x38);\n                  fileList = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)tmpString1 + 0x40); ppcVar31 < fileCount;\n                      ppcVar31 = ppcVar31 + (ulong)tmpByte1 * -2 + 1) {\n                    *fileList = *ppcVar31;\n                    fileList = fileList + (ulong)tmpByte1 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                tmpUint1 = *(undefined4 *)((long)((long)tmpString1 + 0x10) + 4);\n                currVar1 = *(undefined4 *)((long)tmpString1 + 0x18);\n                currVar2 = *(undefined4 *)((long)((long)tmpString1 + 0x18) + 4);\n                tmpUlong1 = (tmpUlong >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)tmpString1 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = tmpUint1;\n                *(undefined4 *)(ppcVar32 + 1) = currVar1;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = currVar2;\n                tmpUint1 = *(undefined4 *)((long)((long)tmpString1 + 0x20) + 4);\n                currVar1 = *(undefined4 *)((long)tmpString1 + 0x28);\n                currVar2 = *(undefined4 *)((long)((long)tmpString1 + 0x28) + 4);\n                tmpUlong = tmpUlong1 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)tmpString1 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = tmpUint1;\n                *(undefined4 *)(ppcVar32 + 3) = currVar1;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = currVar2;\n                if (tmpUlong != 2) {\n                  tmpUint1 = *(undefined4 *)((long)((long)tmpString1 + 0x30) + 4);\n                  currVar1 = *(undefined4 *)((long)tmpString1 + 0x38);\n                  currVar2 = *(undefined4 *)((long)((long)tmpString1 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)tmpString1 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = tmpUint1;\n                  *(undefined4 *)(ppcVar32 + 5) = currVar1;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = currVar2;\n                  if (tmpUlong != 3) {\n                    tmpVar2 = 3;\n                    do {\n                      tmpVar3 = tmpVar2 + 1;\n                      pcVar39 = (char *)((long)tmpString1 + 0x83) + tmpVar2 * 0x10 + -0x73;\n                      tmpUint1 = *(undefined4 *)(pcVar39 + 4);\n                      currVar1 = *(undefined4 *)(pcVar39 + 8);\n                      currVar2 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + tmpVar2 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = tmpUint1;\n                      *(undefined4 *)(ppcVar31 + 1) = currVar1;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = currVar2;\n                      tmpVar2 = tmpVar3;\n                    } while (tmpVar3 != tmpUlong);\n                  }\n                }\n                if ((tmpUlong1 & 1) != 0) {\n                  ppcVar32[tmpUlong1 & 0xfffffffffffffffe] =\n                       *(char **)((long)tmpFile3 + (tmpUlong1 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + tmpLong + -2;\n            }\n            currFile = (FILE *)(ulong)(tmpInt - 1);\n            *ppcVar32 = (char *)0x0;\n            tmpString1 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            tmpUint = (uint)unaff_R12;\n            tmpVar4 = getopt_long((ulong)currFile & 0xffffffff,tmpString1,tmpFile,ppuVar36,0);\n            unaff_RBP = (char *)tmpFile;\n            if (tmpVar4 == 0xffffffff) break;\n            if (((tmpVar4 - 100 < 0x15) && ((0x117201UL >> ((ulong)(tmpVar4 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            tmpFile1 = (FILE *)tmpString1;\n            if (tmpVar4 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[tmpVar4]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            print_usage_0010342d(0);\n            tmpString1 = (char *)tmpFile1;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          tmpVar4 = DAT_0010d64c;\n          tmpFile = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)currFile <= _optind || (_optind < 1)))) {\n              tmpVar4 = 0;\n              goto LAB_001066aa;\n            }\n            tmpString1 = (char *)((long)tmpString1 + (long)_optind * 8 + -8);\n            tmpUint = (int)currFile - (_optind + -1);\n            currFile = (FILE *)(ulong)tmpUint;\n            _optind = 0;\n            if (1 < (int)tmpUint) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)tmpFile2 & 0xff);\n          tmpUint = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)tmpString1 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              print_gnu_info_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              tmpFile1 = (FILE *)tmpString1;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (tmpVar4 == 3) goto LAB_00106abc;\n                  if (tmpVar4 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((tmpVar4 == 3) || (tmpVar4 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  tmpUint1 = check_file_and_get_info_00107650();\n                    \n                  xexit(tmpUint1);\n                }\nLAB_00106abc:\n                if (tmpVar4 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  tmpInt = (int)unaff_RBP;\n                  if (*(char **)((long)ppuVar36 + (long)tmpInt * 2 * 4) == (char *)0x0) {\n                    tmpVar = dcgettext(0,\"`N\\' missing value.\",5);\n                    print_error_and_exit_00107690(tmpVar);\n                    tmpVar4 = extraout_EDX;\nLAB_00107548:\n                    if (tmpVar4 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(tmpInt + 1);\n                  tmpLong = strtol(*(char **)((long)ppuVar36 + (long)tmpInt * 2 * 4),(char **)0x0,10)\n                  ;\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)tmpLong;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              tmpLong = (long)(int)unaff_RBP;\n              tmpFile = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)ppuVar36 + tmpLong * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              tmpFile = (FILE *)((long)ppuVar36 + (tmpLong + 1) * 2 * 4);\n              if (*(FILE **)tmpFile == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                tmpFile = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (tmpLong + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (tmpLong + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (tmpLong + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (tmpLong + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                currFile = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)currFile;\n                  currFile = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + tmpLong * 2 * 4) + (long)currFile * 2) !=\n                         0);\n              }\n              tmpPtrUlong = (undefined8 *)convert_library_00105300();\n              currFile = tmpFile;\n              if (DAT_0010d64c == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)tmpPtrUlong + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)tmpFile;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  process_archive_entries_00105480(tmpPtrUlong,extract_and_modify_archive_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                tmpSize = strlen(DAT_0010d628);\n                tmpString1 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(tmpSize + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",tmpPtrUlong);\n                if (DAT_0010d620 == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  tmpLong = bfd_find_target(\"binary\",DAT_0010d620);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (tmpLong != 0) {\n                    tmpChar = bfd_set_format(DAT_0010d620,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (tmpChar == '\\0') goto LAB_00106803;\n                    tmpChar = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (tmpChar == '\\0') goto LAB_00106803;\n                    tmpFile1 = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (tmpFile1 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    tmpChar = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (tmpChar == '\\0') goto LAB_00106803;\n                    tmpLong = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (tmpLong == 0) goto LAB_00106803;\n                    tmpInt = (int)pcVar43;\n                    tmpFile2 = (FILE *)((long)(tmpInt + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(tmpFile2,\"Cannot reset libdeps record type.\");\n                    if (tmpInt == 0) {\n                      tmpLong = 0;\n                    }\n                    else {\n                      tmpUint1 = *(undefined4 *)&tmpFile->field_0x4;\n                      *(int *)unaff_RBP = tmpFile->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = tmpUint1;\n                      tmpLong = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = tmpFile2[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&tmpFile->_flags;\n                        tmpFile = (FILE *)((long)tmpFile + (ulong)tmpByte1 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)tmpByte1 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + tmpLong) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(tmpInt + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)tmpFile2) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      tmpFile = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)tmpFile;\n                if (tmpFile == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                currFile = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)tmpFile;\n                if ((tmpFile != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  process_files_00105570(tmpPtrUlong,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)tmpFile;\nswitchD_00106ed8_caseD_3:\n                process_archive_entries_00105480(tmpPtrUlong,print_file_info_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)tmpFile;\nswitchD_00106ed8_caseD_4:\n                process_archive_entries_00105480(tmpPtrUlong,extract_and_print_archive_data_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (tmpFile == (FILE *)0x0) break;\nLAB_00106afb:\n                currFile = (FILE *)(tmpPtrUlong + 0x1e);\n                do {\n                  unaff_R12 = currFile;\n                  if (*(FILE **)tmpFile == (FILE *)0x0) {\nLAB_00106b9f:\n                    print_archive_info_001058b0(tmpPtrUlong);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    ptrVar = *(long **)unaff_R12;\n                    tmpString1 = *(char **)tmpFile;\n                    if (ptrVar == (long *)0x0) {\n                      tmpVar = *tmpPtrUlong;\n                      tmpUlong2 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      print_error_and_exit_00107690(tmpUlong2,tmpString1,tmpVar);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    tmpLong = *ptrVar;\n                    tmpVar = extracted_data_00105830(tmpString1,tmpPtrUlong);\n                    tmpInt = filename_cmp(tmpVar,tmpLong);\n                    if (tmpInt == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)ptrVar[0x1e];\n                  pplVar29 = (long **)find_matching_pointer_00105870(currFile,3,0);\n                  tmpFlag1 = DAT_0010d60c != 0;\n                  currPtr = *pplVar29;\n                  *pplVar29 = ptrVar;\n                  ptrVar[0x1e] = (long)currPtr;\n                  if (tmpFlag1) {\n                    printf(\"m - %s\\n\",*(FILE **)tmpFile);\n                  }\n                  tmpFile = (FILE *)&tmpFile->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            print_usage_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          tmpInt = fileno(_stdin);\n          _DAT_0010d608 = isatty(tmpInt);\n          extract_data_from_archive_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        tmpUint1 = bfd_get_error();\n        tmpFile = (FILE *)bfd_errmsg(tmpUint1);\n        tmpVar = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        tmpInt = print_error_and_exit_00107690(tmpVar,\"x86_64-pc-linux-gnu\",tmpFile);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)pcVar39;\n          tmpFile1 = (FILE *)tmpString1;\n          switch(tmpInt) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            tmpUint = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)tmpFile;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)tmpFile;\nLAB_00106803:\n        tmpVar = dcgettext(0,pcVar39,5);\n        print_error_and_exit_00107690(tmpVar);\nLAB_00106814:\n        tmpInt = (int)tmpString1;\n        tmpFile1 = (FILE *)xmalloc(8);\n        *(long **)tmpFile1 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            tmpInt = 0;\n          }\n          else {\n            tmpLong = 1;\n            do {\n              tmpInt = (int)tmpLong;\n              lVar35 = tmpLong * 2;\n              tmpLong = tmpLong + 1;\n            } while (*(long *)((int *)pcVar43 + lVar35) != 0);\n          }\n          tmpFile = (FILE *)xmalloc((long)(tmpInt + 1) << 3);\n          ptrVar = *(long **)pcVar43;\n          tmpLong = 0;\n          while (ptrVar != (long *)0x0) {\n            tmpVar = xstrdup();\n            *(undefined8 *)((long)&tmpFile->_flags + tmpLong) = tmpVar;\n            ptrVar = *(long **)((char *)((long)pcVar43 + 0x83) + tmpLong + -0x7b);\n            tmpLong = tmpLong + 8;\n          }\n          *(undefined8 *)((long)&tmpFile->_flags + tmpLong) = 0;\nLAB_0010610a:\n          tmpInt = (int)tmpString1;\n          pcVar43 = (char *)tmpFile;\n          if (*(long **)tmpFile1 == (long *)0x0) goto LAB_00106a80;\n          tmpLong = 0;\n          do {\n            tmpLong1 = tmpLong + 1;\n            lVar35 = tmpLong * 8;\n            tmpLong = tmpLong1;\n          } while (*(long *)(tmpFile1->_shortbuf + lVar35 + -0x7b) != 0);\n          tmpArrSize = tmpLong1 * 8;\n        }\n        else {\nLAB_00106a80:\n          tmpLong1 = 0;\n          tmpArrSize = 0;\n        }\n        tmpLong = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + tmpLong1);\n        free(*(void **)((int *)pcVar43 + tmpLong));\n        tmpFile = (FILE *)xrealloc(pcVar43,(tmpLong1 + 1 + (long)tmpInt) * 8);\n        tmpVar4 = tmpInt + -1 + (int)tmpLong1;\n        tmpString1 = (char *)(ulong)tmpVar4;\n        memmove(&tmpFile->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&tmpFile->_IO_read_ptr + (long)tmpFile2),\n                (long)(int)(tmpInt - tmpUint) << 3);\n        memcpy((void *)((long)&tmpFile2->_flags + (long)&tmpFile->_flags),tmpFile1,tmpArrSize);\n        free(tmpFile1);\n        free(tmpArrByte);\n        fclose(currFile);\n        tmpUint = (int)tmpFile3 + 1;\n        unaff_R12 = tmpFile2;\n        pcVar43 = (char *)tmpFile;\n        tmpFile2 = tmpFile1;\n        if ((int)tmpUint < (int)tmpVar4) goto LAB_001061ce;\n      } while( true );\n    }\n    tmpUint = tmpUint + 1;\n    tmpFile3 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)tmpUint;\n  } while( true );\nswitchD_00107462_caseD_0:\n  tmpInt = getopt_long((ulong)currFile & 0xffffffff,tmpString1,tmpFile,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)tmpFile;\n  if (tmpInt == -1) goto LAB_00106680;\n  if ((0x14 < tmpInt - 100U) || ((0x117201UL >> ((byte)(tmpInt - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  tmpVar = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  print_error_message_00107920(tmpVar);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)currFile != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  tmpInt1 = 0;\n  tmpInt = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  currVar = tmpPtrUlong;\n  if (tmpInt == 0) {\n    *(byte *)((long)tmpPtrUlong + 0x49) = *(byte *)((long)tmpPtrUlong + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      ptrVar = currVar + 0x1e;\n      if ((undefined8 *)*ptrVar == (undefined8 *)0x0) break;\n      tmpVar = *(undefined8 *)*ptrVar;\n      tmpUlong2 = extracted_data_00105830(*(FILE **)unaff_RBP,tmpPtrUlong);\n      tmpInt = filename_cmp(tmpUlong2,tmpVar);\n      if ((tmpInt == 0) &&\n         ((DAT_0010d634 == '\\0' || (tmpInt1 = tmpInt1 + 1, tmpInt1 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *ptrVar = *(long *)(*ptrVar + 0xf0);\n        currFile = unaff_R12;\n        goto LAB_00106d38;\n      }\n      currVar = (undefined8 *)*ptrVar;\n    }\n    if (DAT_0010d60c != 0) {\n      tmpFile = *(FILE **)unaff_RBP;\n      tmpString1 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(tmpString1,tmpFile);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_bwrite",
                "strtol",
                "bfd_init",
                "isatty",
                "FUN_00107640",
                "FUN_001075e0",
                "bindtextdomain",
                "FUN_00103a78",
                "bfd_find_target",
                "memcpy",
                "fread",
                "FUN_00107730",
                "FUN_00105570",
                "FUN_00107c20",
                "bfd_plugin_set_plugin",
                "FUN_001052a0",
                "bfd_plugin_set_program_name",
                "open",
                "xrealloc",
                "bfd_create",
                "FUN_00107650",
                "FUN_00107740",
                "setlocale",
                "bfd_set_format",
                "xexit",
                "bfd_make_writable",
                "strcmp",
                "stat",
                "fseek",
                "bfd_fdopenr",
                "xmalloc",
                "lbasename",
                "bfd_set_error_program_name",
                "fprintf",
                "getopt_long",
                "xmalloc_set_program_name",
                "FUN_00105870",
                "FUN_00105300",
                "printf",
                "FUN_00105830",
                "dcgettext",
                "FUN_00107cc0",
                "bfd_set_error",
                "memmove",
                "fclose",
                "strlen",
                "bfd_close",
                "free",
                "bfd_set_default_target",
                "bfd_check_format_matches",
                "filename_cmp",
                "xstrdup",
                "ftell",
                "FUN_00105480",
                "FUN_0010394a",
                "FUN_00107920",
                "bfd_errmsg",
                "FUN_00107c10",
                "fileno",
                "FUN_00103e95",
                "FUN_00107690",
                "fopen",
                "ferror",
                "FUN_001058b0",
                "FUN_00107890",
                "FUN_0010342d",
                "bfd_get_error",
                "textdomain",
                "bfd_make_readable",
                "malloc",
                "FUN_00103bd1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_files_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatStrings",
                "uVar1": "data",
                "__format": "formatString",
                "plVar2": "currentFormatString"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatStrings)\n\n{\n  undefined8 data;\n  char *formatString;\n  long *currentFormatString;\n  \n  fflush(_stdout);\n  data = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,data);\n  for (currentFormatString = formatStrings; *currentFormatString != 0; currentFormatString = currentFormatString + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "free",
                "fflush",
                "dcgettext",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "print_error_and_exit_00107c10",
                "print_error_message_00107c20": "print_error_message",
                "xexit": "exit"
            },
            "code": "\nvoid print_error_and_exit_00107c10(void)\n\n{\n  print_error_message();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_001028ed",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "extract_and_convert_archived_files_00102710",
                "plVar1": "nextArchivedFile",
                "cVar2": "formatCheckResult",
                "bVar3": "thinFormatFlag",
                "iVar4": "errorCheckResult",
                "lVar5": "archivedFile",
                "uVar6": "errorMessage",
                "uVar7": "libraryName",
                "puVar8": "outputFile",
                "unaff_RBP": "stackVariable",
                "in_stack_00000008": "stackVariable2"
            },
            "code": "\n\n\nundefined8 * extractAndConvertArchivedFiles_00102710(void)\n\n{\n  long *nextArchivedFile;\n  char formatCheckResult;\n  byte thinFormatFlag;\n  int errorCheckResult;\n  long archivedFile;\n  undefined8 errorMessage;\n  undefined8 libraryName;\n  undefined8 *outputFile;\n  undefined8 stackVariable;\n  undefined8 stackVariable2;\n  \n  archivedFile = bfd_openr();\n  if (archivedFile != 0) {\n    formatCheckResult = bfd_check_format(archivedFile,1);\n    if (formatCheckResult != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(archivedFile + 8);\n    }\n    bfd_close(archivedFile);\n  }\n  outputFile = (undefined8 *)bfd_openw();\n  if (((outputFile != (undefined8 *)0x0) && (formatCheckResult = bfd_set_format(outputFile,2), formatCheckResult != '\\0')) &&\n     (formatCheckResult = bfd_close(outputFile), formatCheckResult != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  print_error_and_exit_00107c10();\n  do {\n    thinFormatFlag = *(byte *)((long)outputFile + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (thinFormatFlag != 0) {\n        libraryName = *outputFile;\n        errorMessage = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit_00107690(errorMessage,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (thinFormatFlag == 0) {\n      libraryName = *outputFile;\n      errorMessage = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit_00107690(errorMessage,libraryName);\nLAB_001027cb:\n      print_error_message_00107c20();\n      errorCheckResult = bfd_get_error();\n      if (errorCheckResult == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(stackVariable2);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      nextArchivedFile = outputFile + 0x1e;\n      for (archivedFile = bfd_openr_next_archived_file(outputFile,0); archivedFile != 0;\n          archivedFile = bfd_openr_next_archived_file(outputFile,archivedFile)) {\n        *nextArchivedFile = archivedFile;\n        nextArchivedFile = (long *)(archivedFile + 0xf0);\n      }\n      *nextArchivedFile = 0;\n      errorCheckResult = bfd_get_error();\n      if (errorCheckResult == 9) {\n        return outputFile;\n      }\n      do {\n        print_error_and_exit_00107c10();\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        print_error_message_00107920(libraryName);\nLAB_001053b7:\n        DAT_0010d618 = stackVariable;\n        outputFile = (undefined8 *)bfd_openr();\n      } while (outputFile == (undefined8 *)0x0);\n      formatCheckResult = bfd_check_format_matches(outputFile,2,&stack0x00000008);\n      if (formatCheckResult == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archivedFile = bfd_openr_next_archived_file(outputFile,0), archivedFile == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "extract_and_convert_archived_files_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "extract_data_from_archive_00103e95",
                "pplVar1": "doublePointer",
                "cVar2": "charVar",
                "ppFVar3": "pointerToPointerFile",
                "pFVar4": "pointerToFile",
                "plVar5": "pointerToLong",
                "uVar6": "unsignedVar",
                "pbVar7": "pointerToByte",
                "iVar8": "intVar",
                "pcVar10": "charVar2",
                "pcVar15": "charVar3",
                "pcVar16": "charVar4",
                "lVar17": "longVar",
                "lVar18": "lengthVar",
                "uVar19": "unsignedVar2",
                "uVar20": "unsignedVar3",
                "lVar21": "longVar2",
                "puVar22": "pointerToUnsignedVar",
                "puVar23": "pointerToUnsignedVar2",
                "uVar24": "unsignedVar4",
                "iVar25": "intVar2",
                "uVar26": "unsignedVar5",
                "ppcVar27": "pointerToPointerChar",
                "bVar28": "boolVar",
                "ppcVar29": "pointerToPointerChar2",
                "bVar30": "byteVar",
                "lVar31": "longVar3",
                "pbVar32": "pointerToByte2",
                "pbVar33": "pointerToByte3",
                "piVar34": "pointerToInt",
                "pbVar35": "pointerToByte4",
                "iVar37": "intVar3",
                "uVar36": "unsignedVar6",
                "plVar12": "pointerToLong2",
                "sVar13": "sizeVar",
                "pvVar14": "pointerToVoid",
                "local_828": "buffer",
                "local_820": "bufferOffset",
                "local_818": "bufferSize",
                "local_810": "bufferPointer",
                "local_800": "currentIndex",
                "local_7fc": "counterVar",
                "local_7f8": "dataBuffer",
                "local_7d0": "statBuffer",
                "local_740": "temporaryBuffer",
                "local_678": "temporaryBufferArray",
                "bVar39": "boolVar2",
                "auVar40": "arrayVar",
                "auVar41": "arrayVar2"
            },
            "code": "\n\n\nvoid extractDataFromArchive_00103e95(void)\n\n{\n  long **doublePointer;\n  char charVar;\n  FILE **pointerToPointerFile;\n  FILE *pointerToFile;\n  long *pointerToLong;\n  undefined8 unsignedVar;\n  byte *pointerToByte;\n  int intVar;\n  char *charVar2;\n  undefined8 uVar11;\n  int iVar9;\n  long *pointerToLong2;\n  size_t sizeVar;\n  void *pointerToVoid;\n  char *charVar3;\n  char *charVar4;\n  long longVar;\n  long lengthVar;\n  ulong unsignedVar2;\n  uint unsignedVar3;\n  long longVar2;\n  undefined8 *pointerToUnsignedVar;\n  undefined8 *pointerToUnsignedVar2;\n  uint unsignedVar4;\n  int intVar2;\n  ulong unsignedVar5;\n  char **pointerToPointerChar;\n  bool boolVar;\n  char **pointerToPointerChar2;\n  byte byteVar;\n  long longVar3;\n  byte *pointerToByte2;\n  byte *pointerToByte3;\n  int *pointerToInt;\n  byte *pointerToByte4;\n  uint unsignedVar6;\n  int intVar3;\n  char **ppcVar38;\n  byte boolVar2;\n  undefined arrayVar [16];\n  undefined arrayVar2 [16];\n  char *buffer;\n  char *bufferOffset;\n  long bufferSize;\n  char **bufferPointer;\n  int currentIndex;\n  uint counterVar;\n  byte *dataBuffer;\n  stat statBuffer;\n  char temporaryBuffer [200];\n  char *temporaryBufferArray [201];\n  \n  boolVar2 = 0;\n  lengthVar = 0;\n  DAT_0010d550 = -2;\n  pointerToPointerChar2 = temporaryBufferArray;\n  currentIndex = 0;\n  buffer = temporaryBuffer;\n  bufferSize = 200;\n  bufferOffset = buffer;\n  bufferPointer = pointerToPointerChar2;\nLAB_00103ee9:\n  *buffer = (char)lengthVar;\n  if (bufferOffset + bufferSize + -1 <= buffer) {\n    longVar2 = (long)buffer - (long)bufferOffset;\n    longVar = longVar2 + 1;\n    if (bufferSize < 10000) {\n      longVar3 = bufferSize * 2;\n      bufferSize = 10000;\n      if (longVar3 < 0x2711) {\n        bufferSize = longVar3;\n      }\n      charVar2 = (char *)malloc(bufferSize * 9 + 7);\n      if (charVar2 != (char *)0x0) {\n        longVar3 = longVar * 8;\n        charVar3 = bufferOffset;\n        charVar4 = charVar2;\n        for (; longVar != 0; longVar = longVar + -1) {\n          *charVar4 = *charVar3;\n          charVar3 = charVar3 + (ulong)boolVar2 * -2 + 1;\n          charVar4 = charVar4 + (ulong)boolVar2 * -2 + 1;\n        }\n        ppcVar38 = (char **)(charVar2 + bufferSize);\n        pointerToPointerChar2 = ppcVar38;\n        for (; longVar3 != 0; longVar3 = longVar3 + -1) {\n          *(undefined *)pointerToPointerChar2 = *(undefined *)bufferPointer;\n          bufferPointer = (char **)((long)bufferPointer + (ulong)boolVar2 * -2 + 1);\n          pointerToPointerChar2 = (char **)((long)pointerToPointerChar2 + (ulong)boolVar2 * -2 + 1);\n        }\n        if (bufferOffset != temporaryBuffer) {\n          free(bufferOffset);\n        }\n        buffer = charVar2 + longVar2;\n        pointerToPointerChar2 = ppcVar38 + longVar2;\n        bufferOffset = charVar2;\n        bufferPointer = ppcVar38;\n        if (charVar2 + bufferSize + -1 <= buffer) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    print_syntax_error_in_archive_script_001031a5();\nLAB_0010524c:\n    charVar2 = bufferOffset;\n    if (bufferOffset == temporaryBuffer) {\n      return;\n    }\nLAB_00105265:\n    free(charVar2);\n    return;\n  }\nLAB_00103fd8:\n  intVar3 = (int)lengthVar;\n  if (intVar3 == 3) goto LAB_0010524c;\n  charVar = (&DAT_0010a200)[intVar3];\n  if (charVar != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          initialize_dynamic_memory_00103df9();\n          pointerToUnsignedVar = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          uVar11 = create_buffer_001033d6(DAT_0010d590);\n          *pointerToUnsignedVar = uVar11;\n        }\n        extract_data_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pointerToByte2 = DAT_0010d5b0;\n      pointerToByte4 = DAT_0010d5b0;\n      unsignedVar3 = DAT_0010d5d0;\nLAB_001040d4:\n      unsignedVar2 = (ulong)unsignedVar3;\n      unsignedVar5 = (ulong)counterVar;\n      boolVar = false;\n      do {\n        byteVar = (&DAT_0010ab00)[*pointerToByte4];\n        if (*(short *)(&DAT_0010a980 + (long)(int)unsignedVar2 * 2) != 0) {\n          boolVar = true;\n          unsignedVar5 = unsignedVar2 & 0xffffffff;\n          dataBuffer = pointerToByte4;\n        }\n        while( true ) {\n          intVar = (int)unsignedVar2;\n          lengthVar = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)intVar * 2) + (uint)byteVar);\n          if (intVar == *(short *)(&DAT_0010a440 + lengthVar * 2)) break;\n          unsignedVar2 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)intVar * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)intVar * 2)) {\n            byteVar = (&DAT_0010a7c0)[(int)(uint)byteVar];\n          }\n        }\n        pointerToByte4 = pointerToByte4 + 1;\n        unsignedVar2 = (ulong)*(short *)(&DAT_0010a240 + lengthVar * 2);\n      } while (*(short *)(&DAT_0010a640 + unsignedVar2 * 2) != 0xc2);\n      counterVar = (uint)unsignedVar5;\n      pointerToByte3 = pointerToByte2;\n      if (boolVar) {\n        DAT_0010d5b8 = dataBuffer;\n        DAT_0010d5c0 = counterVar;\n      }\nLAB_0010419f:\n      intVar = (int)*(short *)(&DAT_0010a980 + (long)(int)unsignedVar2 * 2);\n      if (intVar == 0) {\n        intVar = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pointerToByte4 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pointerToByte4 - (int)pointerToByte3;\n      DAT_0010d588 = *pointerToByte4;\n      DAT_0010d5b0 = pointerToByte4;\n      DAT_0010d5c8 = pointerToByte3;\n      *pointerToByte4 = 0;\nLAB_001041f0:\n      pointerToByte2 = DAT_0010d5c8;\n      lengthVar = DAT_0010d5a0;\n      switch(intVar) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        print_and_exit_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      lengthVar = (long)intVar3;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        intVar3 = 2;\n        if (DAT_0010d550 < 0x114) {\n          intVar3 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    intVar3 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    unsignedVar3 = charVar + intVar3;\n    if ((0x22 < unsignedVar3) || (intVar3 != (char)(&DAT_0010a0a0)[(int)unsignedVar3])) goto LAB_001049db;\n    charVar = (&DAT_0010a060)[(int)unsignedVar3];\n    lengthVar = (long)charVar;\n    if (charVar < '\\x01') {\n      intVar3 = -(int)charVar;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    currentIndex = currentIndex + -1 + (uint)(currentIndex == 0);\n    pointerToPointerChar2 = pointerToPointerChar2 + 1;\n    *pointerToPointerChar2 = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  intVar3 = (int)(char)(&DAT_0010a020)[(int)lengthVar];\n  if ((&DAT_0010a020)[(int)lengthVar] == '\\0') {\n    if (currentIndex == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      print_syntax_error_in_archive_script_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[lengthVar] != -0xe) &&\n             (unsignedVar3 = (int)(char)(&DAT_0010a200)[lengthVar] + 1, unsignedVar3 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)unsignedVar3] == '\\x01')) &&\n           (lengthVar = (long)(char)(&DAT_0010a060)[(int)unsignedVar3],\n           '\\0' < (char)(&DAT_0010a060)[(int)unsignedVar3])) goto LAB_00105227;\n        if (bufferOffset == buffer) goto LAB_0010524c;\n        buffer = buffer + -1;\n        pointerToPointerChar2 = pointerToPointerChar2 + -1;\n        lengthVar = (long)*buffer;\n      } while( true );\n    }\n    if (currentIndex != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  uVar11 = DAT_0010d660;\n  pointerToPointerChar = DAT_0010d558;\n  charVar = (&DAT_00109fe0)[intVar3];\n  ppcVar38 = (char **)pointerToPointerChar2[1 - charVar];\n  switch(intVar3) {\n  case 2:\n  case 6:\n    check_and_print_ar_status_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    print_syntax_error_in_archive_script_001031a5();\n    break;\n  case 0x17:\n    pointerToUnsignedVar = (undefined8 *)*pointerToPointerChar2;\n    if (DAT_0010d558 == (char **)0x0) {\n      charVar2 = \"%s: no open archive\\n\";\nLAB_00104b62:\n      charVar2 = (char *)dcgettext(0,charVar2,5);\n      fprintf(_stderr,charVar2,uVar11);\n      check_exit_status_0010315d();\n    }\n    else {\n      for (; pointerToUnsignedVar != (undefined8 *)0x0; pointerToUnsignedVar = (undefined8 *)pointerToUnsignedVar[1]) {\n        for (pointerToUnsignedVar2 = (undefined8 *)DAT_0010d558[0x1f]; pointerToUnsignedVar2 != (undefined8 *)0x0;\n            pointerToUnsignedVar2 = (undefined8 *)pointerToUnsignedVar2[0x1e]) {\n          intVar = filename_cmp(*pointerToUnsignedVar2);\n          if (intVar == 0) {\n            extract_and_modify_archive_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*pointerToUnsignedVar,0);\n        unsignedVar = DAT_0010d660;\n        uVar11 = *pointerToUnsignedVar;\n        charVar2 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar2,unsignedVar,uVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    pointerToUnsignedVar = (undefined8 *)*pointerToPointerChar2;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      charVar2 = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; pointerToUnsignedVar != (undefined8 *)0x0; pointerToUnsignedVar = (undefined8 *)pointerToUnsignedVar[1]) {\n      boolVar = false;\n      pointerToPointerChar = DAT_0010d558 + 0x1f;\n      for (charVar2 = DAT_0010d558[0x1f]; charVar2 != (char *)0x0;\n          charVar2 = *(char **)(charVar2 + 0xf0)) {\n        intVar = filename_cmp();\n        if (intVar == 0) {\n          charVar3 = (char *)bfd_openr(*pointerToUnsignedVar,0);\n          uVar11 = DAT_0010d660;\n          if (charVar3 == (char *)0x0) {\n            unsignedVar = *pointerToUnsignedVar;\n            charVar3 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,charVar3,uVar11,unsignedVar);\n            check_exit_status_0010315d();\n          }\n          else {\n            *pointerToPointerChar = charVar3;\n            boolVar = true;\n            *(undefined8 *)(charVar3 + 0xf0) = *(undefined8 *)(charVar2 + 0xf0);\n          }\n        }\n        else {\n          pointerToPointerChar = (char **)(charVar2 + 0xf0);\n        }\n      }\n      if (!boolVar) {\n        charVar2 = (char *)bfd_openr(*pointerToUnsignedVar,0);\n        unsignedVar = DAT_0010d660;\n        uVar11 = *pointerToUnsignedVar;\n        charVar3 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar3,unsignedVar,uVar11);\n        uVar11 = DAT_0010d660;\n        if (charVar2 == (char *)0x0) {\n          unsignedVar = *pointerToUnsignedVar;\n          charVar2 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,charVar2,uVar11,unsignedVar);\n          check_exit_status_0010315d();\n        }\n        else {\n          *pointerToPointerChar = charVar2;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    pointerToUnsignedVar = (undefined8 *)*pointerToPointerChar2;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointerToUnsignedVar != (undefined8 *)0x0; pointerToUnsignedVar = (undefined8 *)pointerToUnsignedVar[1]) {\n      boolVar = false;\n      pointerToPointerChar = DAT_0010d558 + 0x1f;\n      for (pointerToUnsignedVar2 = (undefined8 *)DAT_0010d558[0x1f]; uVar11 = DAT_0010d660,\n          pointerToUnsignedVar2 != (undefined8 *)0x0; pointerToUnsignedVar2 = (undefined8 *)pointerToUnsignedVar2[0x1e]) {\n        intVar = filename_cmp(*pointerToUnsignedVar2,*pointerToUnsignedVar);\n        if (intVar == 0) {\n          boolVar = true;\n          *pointerToPointerChar = (char *)pointerToUnsignedVar2[0x1e];\n        }\n        else {\n          pointerToPointerChar = (char **)(pointerToUnsignedVar2 + 0x1e);\n        }\n      }\n      if (!boolVar) {\n        unsignedVar = *pointerToUnsignedVar;\n        charVar2 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar2,uVar11,unsignedVar);\n        check_exit_status_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    pointerToUnsignedVar = (undefined8 *)*pointerToPointerChar2;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointerToUnsignedVar != (undefined8 *)0x0; pointerToUnsignedVar = (undefined8 *)pointerToUnsignedVar[1]) {\n      charVar2 = (char *)bfd_openr(*pointerToUnsignedVar,\"plugin\");\n      uVar11 = DAT_0010d660;\n      pointerToPointerChar = DAT_0010d558;\n      if (charVar2 == (char *)0x0) {\n        unsignedVar = *pointerToUnsignedVar;\n        charVar2 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,charVar2,uVar11,unsignedVar);\n        check_exit_status_0010315d();\n      }\n      else {\n        *(char **)(charVar2 + 0xf0) = DAT_0010d558[0x1f];\n        pointerToPointerChar[0x1f] = charVar2;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    charVar2 = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    charVar3 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(charVar3,charVar2);\n    for (charVar2 = DAT_0010d558[0x1f]; charVar2 != (char *)0x0; charVar2 = *(char **)(charVar2 + 0xf0))\n    {\n      print_file_info_00103ddc(charVar2,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(pointerToPointerChar);\n    charVar2 = DAT_0010d570;\n    intVar = stat(DAT_0010d570,&statBuffer);\n    if ((intVar != 0) && (DAT_0010d558 = (char **)bfd_openw(charVar2,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    copy_and_replace_file_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    extract_and_format_archive_00103c60(*pointerToPointerChar2,0);\n    break;\n  case 0x1f:\n    extract_and_format_archive_00103c60(*pointerToPointerChar2,1);\n    break;\n  case 0x20:\n    charVar2 = *pointerToPointerChar2;\n    if (DAT_0010d558 == (char **)0x0) {\n      charVar2 = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    lengthVar = convert_library_00105300(pointerToPointerChar2[-1],0);\n    if (lengthVar != 0) {\n      process_archive_001032a8(lengthVar,copy_data_0010312d,charVar2);\n    }\n    break;\n  case 0x21:\n    charVar2 = *pointerToPointerChar2;\n    charVar3 = pointerToPointerChar2[-1];\n    uVar11 = convert_library_00105300(pointerToPointerChar2[-2],0);\n    if (charVar2 == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(charVar2,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        process_archive_001032a8(uVar11,print_file_info_00103ddc,charVar3);\n        bfd_close(uVar11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      charVar4 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,charVar4,charVar2);\n    }\n    process_archive_001032a8(uVar11,print_file_info_00103ddc,charVar3);\n    bfd_close(uVar11);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*pointerToPointerChar2;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)pointerToPointerChar2[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    charVar2 = pointerToPointerChar2[-2];\n    *ppcVar38 = *pointerToPointerChar2;\n    ppcVar38[1] = charVar2;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  lengthVar = (long)charVar;\n  buffer = buffer + -lengthVar;\n  pointerToPointerChar2[1 - lengthVar] = (char *)ppcVar38;\n  pointerToPointerChar2 = pointerToPointerChar2 + (1 - lengthVar);\n  unsignedVar3 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[intVar3] + -0x18] + (int)*buffer;\n  if ((unsignedVar3 < 0x23) && (*buffer == (&DAT_0010a0a0)[(int)unsignedVar3])) {\n    lengthVar = (long)(char)(&DAT_0010a060)[(int)unsignedVar3];\n  }\n  else {\n    lengthVar = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[intVar3] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  intVar = ((int)pointerToByte4 - (int)DAT_0010d5c8) + -1;\n  *pointerToByte4 = DAT_0010d588;\n  doublePointer = (long **)(DAT_0010d5a8 + lengthVar * 8);\n  pointerToPointerFile = (FILE **)*doublePointer;\n  if (*(int *)(pointerToPointerFile + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)pointerToPointerFile + 0x1c);\n    *(undefined4 *)(pointerToPointerFile + 7) = 1;\n    *pointerToPointerFile = DAT_0010d590;\n  }\n  pointerToByte = DAT_0010d5b0;\n  pointerToFile = pointerToPointerFile[1];\n  arrayVar._8_8_ = pointerToFile;\n  arrayVar._0_8_ = pointerToPointerFile;\n  if ((byte *)((long)&pointerToFile->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&pointerToFile->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      arrayVar = print_and_exit_001033b0();\n    }\n    if (*(int *)(arrayVar._0_8_ + 0x34) != 0) {\n      unsignedVar3 = (int)((long)pointerToByte - (long)pointerToByte2) - 1;\n      for (lengthVar = 0; (int)lengthVar < (int)unsignedVar3; lengthVar = lengthVar + 1) {\n        *(byte *)(arrayVar._8_8_ + lengthVar) = pointerToByte2[lengthVar];\n      }\n      pointerToLong2 = *doublePointer;\n      if (*(int *)(pointerToLong2 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)pointerToLong2 + 0x1c) = 0;\nLAB_0010475e:\n        pointerToFile = DAT_0010d590;\n        if (unsignedVar3 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            initialize_dynamic_memory_00103df9();\n            pointerToUnsignedVar = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            uVar11 = create_buffer_001033d6(pointerToFile);\n            *pointerToUnsignedVar = uVar11;\n          }\n          lengthVar = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            lengthVar = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          iVar9 = 1;\n          initialize_file_001031cf(lengthVar);\n          extract_data_001030ed();\n        }\n        else {\n          iVar9 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointerToLong = *doublePointer;\n          unsignedVar4 = ~unsignedVar3 + *(int *)(pointerToLong2 + 3);\n          if (0 < (int)unsignedVar4) break;\n          unsignedVar4 = (int)DAT_0010d5b0 - (int)(void *)pointerToLong[1];\n          if (*(int *)(pointerToLong + 4) == 0) {\n            pointerToLong[1] = 0;\nLAB_00104626:\n            print_and_exit_001033b0();\n            break;\n          }\n          iVar9 = *(int *)(pointerToLong + 3);\n          intVar2 = iVar9;\n          if (iVar9 < 1) {\n            intVar2 = iVar9 / 8;\n          }\n          *(int *)(pointerToLong + 3) = intVar2 + iVar9;\n          pointerToVoid = realloc((void *)pointerToLong[1],(long)(intVar2 + iVar9 + 2));\n          pointerToLong[1] = (long)pointerToVoid;\n          if (pointerToVoid == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)pointerToVoid + (long)(int)unsignedVar4);\n          pointerToLong2 = *doublePointer;\n        }\n        if (0x2000 < (int)unsignedVar4) {\n          unsignedVar4 = 0x2000;\n        }\n        unsignedVar5 = (ulong)unsignedVar4;\n        if (*(int *)((long)pointerToLong + 0x24) == 0) {\n          pointerToInt = __errno_location();\n          unsignedVar5 = (ulong)(int)unsignedVar4;\n          unsignedVar2 = (ulong)(int)unsignedVar3;\n          *pointerToInt = 0;\n          goto LAB_001046c7;\n        }\n        unsignedVar2 = 0;\n        pointerToInt = (int *)(long)(int)unsignedVar3;\n        do {\n          iVar9 = getc(DAT_0010d590);\n          unsignedVar6 = (uint)unsignedVar2;\n          if (iVar9 == -1) {\n            iVar9 = ferror(DAT_0010d590);\n            unsignedVar4 = unsignedVar6;\n            if (iVar9 != 0) {\n              do {\n                charVar2 = \"input in flex scanner failed\";\n                print_and_exit_001033b0();\n                do {\n                  *pointerToInt = 0;\n                  clearerr((FILE *)charVar2);\nLAB_001046c7:\n                  sizeVar = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + unsignedVar2),1,unsignedVar5,DAT_0010d590);\n                  charVar2 = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)sizeVar;\n                  unsignedVar4 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (iVar9 = ferror(DAT_0010d590), unsignedVar4 = DAT_0010d598, iVar9 == 0))\n                  goto LAB_00104738;\n                } while (*pointerToInt == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (iVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)unsignedVar3 +\n             (long)(int)unsignedVar6 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            unsignedVar4 = unsignedVar6 + 1;\n            break;\n          }\n          unsignedVar2 = (ulong)(unsignedVar6 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)pointerToInt) =\n               (char)iVar9;\n          pointerToInt = (int *)((long)pointerToInt + 1);\n        } while (unsignedVar4 != unsignedVar6 + 1);\nLAB_00104738:\n        DAT_0010d598 = unsignedVar4;\n        unsignedVar4 = DAT_0010d598;\n        iVar9 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (unsignedVar4 == 0) goto LAB_0010475e;\n      }\n      pointerToLong2 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      lengthVar = *pointerToLong2;\n      unsignedVar3 = unsignedVar3 + DAT_0010d598;\n      if (*(int *)(lengthVar + 0x18) < (int)unsignedVar3) {\n        intVar2 = ((int)DAT_0010d598 >> 1) + unsignedVar3;\n        pointerToVoid = realloc(*(void **)(lengthVar + 8),(long)intVar2);\n        *(void **)(lengthVar + 8) = pointerToVoid;\n        arrayVar2._8_8_ = pointerToLong2;\n        arrayVar2._0_8_ = *pointerToLong2;\n        if (*(long *)(*pointerToLong2 + 8) == 0) {\n          arrayVar2 = print_and_exit_001033b0();\n        }\n        pointerToLong2 = arrayVar2._8_8_;\n        *(int *)(arrayVar2._0_8_ + 0x18) = intVar2 + -2;\n      }\n      DAT_0010d598 = unsignedVar3;\n      *(undefined *)(*(long *)(*pointerToLong2 + 8) + (long)(int)unsignedVar3) = 0;\n      *(undefined *)(*(long *)(*pointerToLong2 + 8) + 1 + (long)(int)unsignedVar3) = 0;\n      pointerToByte2 = *(byte **)(*pointerToLong2 + 8);\n      DAT_0010d5c8 = pointerToByte2;\n      if (iVar9 == 1) goto LAB_001048a4;\n      if (iVar9 == 2) goto LAB_001048ca;\n      pointerToByte4 = pointerToByte2 + intVar;\n      DAT_0010d5b0 = pointerToByte4;\n      unsignedVar3 = find_matching_indices_and_update_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)pointerToByte - (long)pointerToByte2 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pointerToByte4 = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pointerToByte4;\n    unsignedVar2 = find_matching_indices_and_update_0010300e();\n    pointerToByte3 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pointerToByte4 = pointerToByte2 + intVar;\n  DAT_0010d5b0 = pointerToByte4;\n  unsignedVar2 = find_matching_indices_and_update_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)unsignedVar2 * 2) != 0) {\n    DAT_0010d5b8 = pointerToByte4;\n    DAT_0010d5c0 = (uint)unsignedVar2;\n  }\n  unsignedVar5 = unsignedVar2 & 0xffffffff;\n  while( true ) {\n    intVar = (int)unsignedVar5;\n    if (intVar == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)intVar * 2) + 1) * 2)) break;\n    unsignedVar5 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)intVar * 2);\n  }\n  unsignedVar3 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)intVar * 2) + 1) * 2);\n  pointerToByte3 = pointerToByte2;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)intVar * 2) + 1) * 2) == 0)\n     || (unsignedVar3 == 0xb0)) goto LAB_0010419f;\n  pointerToByte4 = pointerToByte4 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  intVar = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pointerToByte4 = DAT_0010d588;\n  unsignedVar2 = (ulong)DAT_0010d5c0;\n  pointerToByte4 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  pointerToPointerChar2 = pointerToPointerChar2 + 1;\n  currentIndex = 3;\n  *pointerToPointerChar2 = DAT_0010d548;\nLAB_001049d1:\n  buffer = buffer + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "FUN_00105300",
                "dup",
                "realloc",
                "printf",
                "dcgettext",
                "FUN_001033d6",
                "fclose",
                "fwrite",
                "bfd_close",
                "free",
                "fread",
                "FUN_0010312d",
                "filename_cmp",
                "xstrdup",
                "FUN_001033b0",
                "FUN_00103ba8",
                "__errno_location",
                "FUN_0010315d",
                "FUN_0010300e",
                "FUN_00107740",
                "bfd_openw",
                "FUN_00103df9",
                "bfd_set_format",
                "FUN_001032a8",
                "bfd_openr",
                "FUN_00105bc0",
                "FUN_001031a5",
                "fopen",
                "ferror",
                "FUN_001031cf",
                "stat",
                "FUN_00103c60",
                "bfd_cache_close",
                "clearerr",
                "getc",
                "fprintf",
                "FUN_001030ed",
                "FUN_00103ddc",
                "malloc",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_data_from_archive_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_functions_00107cc0",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionPointers",
                "uVar5": "count"
            },
            "code": "\nvoid executeFunctions_00107cc0(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *functionPointers;\n  uint count;\n  \n  functionPointers = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionPointers + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionPointers[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionPointers[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)functionPointers[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionPointers[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionPointers[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionPointers[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionPointers[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionPointers[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionPointers[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionPointers[tempIndex + 1])();\n            (*(code *)functionPointers[tempIndex])();\n            (*(code *)functionPointers[index])();\n            (*(code *)functionPointers[tempIndex + -2])();\n            (*(code *)functionPointers[tempIndex + -3])();\n            (*(code *)functionPointers[tempIndex + -4])();\n            (*(code *)functionPointers[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      functionPointers = (long *)*functionPointers;\n    } while (functionPointers != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "process_and_archive_files_00105ae0",
                "param_1": "file_path",
                "param_2": "archive_path",
                "param_3": "flag_1",
                "param_4": "flag_2"
            },
            "code": "\nvoid process_and_archive_files_00105ae0(undefined8 file_path,undefined8 archive_path,undefined flag_1,undefined flag_2)\n\n{\n  process_archived_files_00105af0(file_path,archive_path,flag_1,flag_2);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_and_archive_files_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(process_files_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "print_error_and_exit_00107690",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "should_print_error",
                "local_d8": "length",
                "local_d4": "zero",
                "local_d0": "buffer_ptr",
                "local_c8": "buffer",
                "local_b8": "local_buffer",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "param_1_copy",
                "local_78": "param_2_copy",
                "local_68": "param_3_copy",
                "local_58": "param_4_copy",
                "local_48": "param_5_copy",
                "local_38": "param_6_copy",
                "local_28": "param_7_copy",
                "local_18": "param_8_copy"
            },
            "code": "\nvoid print_error_and_exit_00107690(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char should_print_error;\n  undefined4 length;\n  undefined4 zero;\n  undefined *buffer_ptr;\n  undefined *buffer;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 param_5_copy;\n  undefined4 param_6_copy;\n  undefined4 param_7_copy;\n  undefined4 param_8_copy;\n  \n  if (should_print_error != '\\0') {\n    param_1_copy = error_code;\n    param_2_copy = param_2;\n    param_3_copy = param_3;\n    param_4_copy = param_4;\n    param_5_copy = param_5;\n    param_6_copy = param_6;\n    param_7_copy = param_7;\n    param_8_copy = param_8;\n  }\n  buffer_ptr = &stack0x00000008;\n  length = 8;\n  buffer = local_buffer;\n  zero = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message_001078c0(error_message,&length);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_001078c0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetID",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "listPtr"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long targetID;\n  char *message;\n  long *targetList;\n  long *listPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  listPtr = targetList;\n  while( true ) {\n    targetID = *listPtr;\n    listPtr = listPtr + 1;\n    if (targetID == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "free",
                "bfd_target_list",
                "dcgettext",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extracted_data_00105830",
                "param_1": "fileName",
                "param_2": "dataInfoAddress",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "__s": "baseName",
                "uVar3": "maxLength",
                "pcVar4": "extractedDataPtr",
                "bVar5": "zeroFlag",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extractedData_00105830(char *fileName,long dataInfoAddress,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  long lVar1;\n  size_t sVar2;\n  char *baseName;\n  ulong maxLength;\n  char *extractedData_00105830Ptr;\n  byte zeroFlag;\n  undefined result [16];\n  \n  zeroFlag = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    baseName = (char *)lbasename();\n    fileName = baseName;\n    if ((DAT_0010d5fa != '\\0') && (dataInfoAddress != 0)) {\n      sVar2 = strlen(baseName);\n      maxLength = (ulong)*(byte *)(*(long *)(dataInfoAddress + 8) + 0x1e);\n      if (maxLength < sVar2) {\n        fileName = (char *)xmalloc(maxLength + 1);\n        lVar1 = *(long *)(dataInfoAddress + 8);\n        extractedData_00105830Ptr = fileName;\n        for (maxLength = (ulong)*(byte *)(lVar1 + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n          *extractedData_00105830Ptr = *baseName;\n          baseName = baseName + (ulong)zeroFlag * -2 + 1;\n          extractedData_00105830Ptr = extractedData_00105830Ptr + (ulong)zeroFlag * -2 + 1;\n        }\n        fileName[*(byte *)(lVar1 + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = unusedParam2;\n  result._0_8_ = fileName;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102bb0",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105db0",
                "FUN_00105480",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extracted_data_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_resources_00107730"
            },
            "code": "\nvoid cleanupResources_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_resources_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorDescription",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "unknownCause",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "fflush": "flushOutput",
                "bfd_get_error": "getBfdError",
                "dcgettext": "getLocalizedMessage",
                "bfd_errmsg": "getBfdErrorMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorDescription)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 unknownCause;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (errorDescription != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010d660,errorDescription,errorMessage,unknownCause);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010d660,errorMessage,unknownCause);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00102f96",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePtr",
                "param_2": "inputFile",
                "param_3": "param1",
                "param_4": "param2",
                "param_5": "param3",
                "iVar1": "errnoValue",
                "uVar2": "isTerminal",
                "iVar3": "fileDescriptor",
                "piVar4": "errnoLocation"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePtr,FILE *inputFile,undefined8 param1,undefined8 param2,undefined8 param3)\n\n{\n  int errnoValue;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errnoLocation;\n  long lVar5;\n  \n  errnoLocation = __errno_location();\n  lVar5 = DAT_0010d5a8;\n  errnoValue = *errnoLocation;\n  if (filePtr == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (filePtr == *(FILE ***)(lVar5 + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePtr + 0x1c) = 0;\n    *(undefined *)&filePtr[1]->_flags = 0;\n    *(undefined *)((long)&filePtr[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePtr + 5) = 1;\n    filePtr[2] = filePtr[1];\n    *(undefined4 *)(filePtr + 7) = 0;\n    if (lVar5 != 0) {\n      if (filePtr == *(FILE ***)(lVar5 + DAT_0010d5a0 * 8)) {\n        extract_data_001030ed();\n      }\n      *filePtr = inputFile;\n      *(undefined4 *)((long)filePtr + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePtr = inputFile;\n    *(undefined4 *)((long)filePtr + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePtr + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileDescriptor = fileno(inputFile);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePtr + 0x24) = isTerminal;\n  *errnoLocation = errnoValue;\n  return param3;\n}\n\n",
            "called": [
                "isatty",
                "fileno",
                "FUN_001030ed",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "destination",
                "param_2": "source",
                "lVar1": "tempVar"
            },
            "code": "\nvoid copyData_0010312d(long destination,long source)\n\n{\n  long tempVar;\n  \n  if (source != 0) {\n    *(undefined8 *)(source + 0xf0) = *(undefined8 *)(destination + 0xf0);\n  }\n  tempVar = DAT_0010d558;\n  *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(tempVar + 0xf8) = destination;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "reverse_and_save_to_file_00105c00",
                "param_1": "file_descriptor",
                "param_2": "file_path",
                "iVar1": "errno_value",
                "__fd": "output_file_descriptor",
                "iVar2": "read_result",
                "_Var3": "file_offset",
                "uVar4": "return_value",
                "sVar5": "write_result",
                "piVar6": "errno_location_pointer",
                "auStack_2038": "buffer"
            },
            "code": "\nulong reverseAndSaveToFile_00105c00(int file_descriptor,char *file_path)\n\n{\n  int errno_value;\n  int output_file_descriptor;\n  int read_result;\n  __off_t file_offset;\n  ulong return_value;\n  size_t write_result;\n  int *errno_location_pointer;\n  undefined buffer [8200];\n  \n  if ((-1 < file_descriptor) && (file_offset = lseek(file_descriptor,0,0), file_offset == 0)) {\n    output_file_descriptor = open(file_path,0x201);\n    if (output_file_descriptor < 0) {\n      return_value = close_file_00102f55();\n      return return_value;\n    }\n    do {\n      return_value = read(file_descriptor,buffer,0x2000);\n      read_result = (int)return_value;\n      if (read_result < 1) {\n        errno_location_pointer = __errno_location();\n        errno_value = *errno_location_pointer;\n        close(file_descriptor);\n        close(output_file_descriptor);\n        if (read_result != 0) {\n          *errno_location_pointer = errno_value;\n          return 0xffffffff;\n        }\n        return return_value & 0xffffffff;\n      }\n      write_result = write(output_file_descriptor,buffer,(long)read_result);\n    } while (write_result == (long)read_result);\n    errno_location_pointer = __errno_location();\n    read_result = *errno_location_pointer;\n    close(file_descriptor);\n    close(output_file_descriptor);\n    *errno_location_pointer = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "lseek",
                "close",
                "__errno_location",
                "write",
                "FUN_00102f55",
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "reverse_and_save_to_file_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_size_001052a0",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "errno_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stat"
            },
            "code": "\nlong get_file_size_001052a0(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stat);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00107920(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00107920(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stat.st_size) {\n        return file_stat.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001025a0",
                "dcgettext",
                "stat",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "get_file_size_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "filePtr",
                "pcVar1": "message"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *filePtr)\n\n{\n  char *message;\n  \n  message = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(filePtr,message);\n  message = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(filePtr,message);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001031a5",
                "FUN_00103ba8",
                "FUN_00102f08",
                "FUN_001075e0",
                "FUN_00103a78",
                "FUN_00103172"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "extract_and_format_archive_00103c60",
                "param_1": "input_archive_path",
                "param_2": "is_output_archive",
                "cVar1": "format_valid",
                "piVar2": "errno_ptr",
                "pcVar3": "error_message",
                "lVar4": "input_archive",
                "lVar5": "archived_file",
                "uVar6": "program_name",
                "plVar7": "archived_file_ptr"
            },
            "code": "\n\n\nvoid extract_and_format_archive_00103c60(char *input_archive_path,int is_output_archive)\n\n{\n  char format_valid;\n  int *errno_ptr;\n  char *error_message;\n  long input_archive;\n  long archived_file;\n  undefined8 program_name;\n  long *archived_file_ptr;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)extract_filename_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errno_ptr = __errno_location();\n    input_archive_path = strerror(*errno_ptr);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive_path = DAT_0010d560;\n    }\n    else {\n      if (is_output_archive != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive = bfd_openr(input_archive_path,\"plugin\");\n      if (input_archive == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        format_valid = bfd_check_format(input_archive,2);\n        if (format_valid != '\\0') {\n          archived_file_ptr = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_archive,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_archive,archived_file)) {\n            *archived_file_ptr = archived_file;\n            archived_file_ptr = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,program_name,input_archive_path);\n  check_exit_status_0010315d();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_set_format",
                "xstrdup",
                "FUN_001057a0",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "fprintf",
                "__errno_location",
                "FUN_0010315d",
                "strerror",
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_format_archive_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "write_data_to_file_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid writeDataToFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "write_data_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_archived_files_00105af0",
                "param_1": "archive_list",
                "param_2": "archive_file",
                "param_3": "print_result",
                "param_4": "check_format",
                "cVar1": "is_valid_format",
                "uVar2": "result",
                "lVar3": "next_file",
                "uVar4": "return_value"
            },
            "code": "\nulong process_archived_files_00105af0(long *archive_list,long archive_file,char print_result,char check_format)\n\n{\n  char is_valid_format;\n  uint result;\n  long next_file;\n  ulong return_value;\n  \n  if (check_format == '\\0') {\n    if (print_result != '\\0') {\n      return_value = print_and_assign_00102f08();\n      return return_value;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(archive_file,2);\n    if (is_valid_format != '\\0') {\n      return_value = 0;\n      for (next_file = bfd_openr_next_archived_file(archive_file,0); next_file != 0;\n          next_file = bfd_openr_next_archived_file(archive_file,next_file)) {\n        result = process_archived_files_00105af0(archive_list,next_file,print_result,1);\n        if ((char)result != '\\0') {\n          return_value = (ulong)result;\n          archive_list = (long *)(*archive_list + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (print_result != '\\0') {\n      return_value = print_and_assign_00102f08();\n      return return_value;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *archive_list;\n  *archive_list = archive_file;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_00105af0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_indices_and_update_0010300e",
                "bVar1": "foundMatch",
                "iVar2": "currentIndex",
                "lVar3": "calculatedIndex",
                "bVar4": "lookupResult",
                "pbVar5": "currentByte",
                "in_R9": "matchingIndicesPtr",
                "in_R10D": "matchingIndicesCount"
            },
            "code": "\nvoid findMatchingIndicesAndUpdate_0010300e(void)\n\n{\n  bool foundMatch;\n  int currentIndex;\n  long calculatedIndex;\n  byte lookupResult;\n  byte *currentByte;\n  byte *matchingIndicesPtr;\n  int matchingIndicesCount;\n  \n  foundMatch = false;\n  currentIndex = DAT_0010d5d0;\n  for (currentByte = DAT_0010d5c8; currentByte < DAT_0010d5b0; currentByte = currentByte + 1) {\n    lookupResult = 1;\n    if (*currentByte != 0) {\n      lookupResult = (&DAT_0010ab00)[*currentByte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      foundMatch = true;\n      matchingIndicesPtr = currentByte;\n      matchingIndicesCount = currentIndex;\n    }\n    while( true ) {\n      calculatedIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)lookupResult);\n      if (*(short *)(&DAT_0010a440 + calculatedIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        lookupResult = (&DAT_0010a7c0)[(int)(uint)lookupResult];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + calculatedIndex * 2);\n  }\n  if (foundMatch) {\n    DAT_0010d5b8 = matchingIndicesPtr;\n    DAT_0010d5c0 = matchingIndicesCount;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_indices_and_update_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_return_address_00102ba1",
                "unaff_RBP": "memoryPointer",
                "unaff_retaddr": "returnAddress",
                "auVar1": "combinedVariables"
            },
            "code": "\nundefined  [16] freeAndReturnAddress_00102ba1(void)\n\n{\n  undefined combinedVariables [16];\n  void *memoryPointer;\n  ulong returnAddress;\n  \n  free(memoryPointer);\n  combinedVariables._8_8_ = 0;\n  combinedVariables._0_8_ = returnAddress;\n  return combinedVariables << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_and_return_address_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_modify_archive_00107740",
                "param_1": "source_files",
                "iVar1": "comparison_result",
                "iVar2": "error_code",
                "piVar3": "errno_ptr",
                "pcVar4": "error_message",
                "uVar5": "error_string",
                "pplVar6": "source_directory",
                "__ptr": "buffer",
                "__n": "bytes_read",
                "lVar7": "loop_counter",
                "plVar8": "current_file",
                "puVar9": "local_array_ptr",
                "uVar10": "bytes_copied",
                "sVar11": "copy_size",
                "local_c8": "local_array",
                "_Stack_b0": "file_permissions",
                "uStack_98": "total_file_size",
                "uStack_80": "modification_time1",
                "uStack_70": "modification_time2"
            },
            "code": "\n\n\nlong * extract_and_modify_archive_00107740(long **source_files)\n\n{\n  int comparison_result;\n  int error_code;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 error_string;\n  long **source_directory;\n  void *buffer;\n  size_t bytes_read;\n  long loop_counter;\n  long *current_file;\n  undefined4 *local_array_ptr;\n  ulong bytes_copied;\n  size_t copy_size;\n  undefined4 local_array [6];\n  __mode_t file_permissions;\n  ulong total_file_size;\n  undefined8 modification_time1;\n  undefined8 modification_time2;\n  \n  if (_DAT_0010d600 != 0) {\n    local_array_ptr = local_array;\n    for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *local_array_ptr = 0;\n      local_array_ptr = local_array_ptr + 1;\n    }\n  }\n  source_directory = (long **)source_files[0x1d];\n  if ((long **)source_files[0x1d] == (long **)0x0) {\n    source_directory = source_files;\n  }\n  error_code = (*(code *)source_directory[1][0x3d])(source_files,local_array);\n  if (error_code != 0) {\n    current_file = *source_files;\n    error_string = dcgettext(0,\"internal stat error on %s\",5);\n    error_code = print_error_and_exit_00107690(error_string,current_file);\n    error_string = DAT_0010d638;\n    if (error_code == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file,error_string);\n        if (comparison_result == 0) {\n          if (error_code != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek(source_files,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (total_file_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*source_files);\n  }\n  else {\n    bytes_copied = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      copy_size = total_file_size - bytes_copied;\n      if (0x2000 < copy_size) {\n        copy_size = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,copy_size,source_files);\n      if (copy_size != bytes_read) {\nLAB_00102c78:\n        source_files = (long **)*source_files[0x1d];\n        error_string = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_and_exit_00107690(error_string,source_files);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*source_files);\n      }\n      copy_size = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (copy_size != bytes_read) {\n        errno_ptr = __errno_location();\n        error_message = strerror(*errno_ptr);\n        print_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      bytes_copied = bytes_copied + bytes_read;\n    } while (bytes_copied < total_file_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    modification_time1 = modification_time2;\n    set_file_modification_time_00107c80(error_message,local_array);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_modify_archive_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_information_00102d2f",
                "bVar1": "errorFlag",
                "cVar2": "archiveHead",
                "iVar3": "copyResult",
                "__format": "timeErrorFormat",
                "uVar4": "fileTypeMask",
                "unaff_RBX": "fileInfo",
                "unaff_RBP": "outputFile",
                "unaff_R12": "fileAttributes",
                "unaff_R13": "fileContent",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "filePermFlag",
                "cStack0000000000000016": "fileUserExec",
                "cStack0000000000000017": "fileGroupExec",
                "in_stack_00000018": "fileOtherExec",
                "cStack0000000000000019": "fileUserWrite",
                "cStack000000000000001a": "fileGroupWrite",
                "cStack000000000000001b": "fileOtherWrite",
                "cStack000000000000001c": "fileUserRead",
                "cStack000000000000001d": "fileGroupRead",
                "cStack000000000000001e": "fileOtherRead",
                "uStack000000000000001f": "fileSpecialFlag",
                "uStack0000000000000068": "filePermission",
                "uStack000000000000006c": "fileUserID",
                "in_stack_00000070": "fileGroupID",
                "in_stack_00000080": "fileSize"
            },
            "code": "\nvoid printFileInformation_00102d2f(void)\n\n{\n  byte errorFlag;\n  char archiveHead;\n  int copyResult;\n  char *timeErrorFormat;\n  uint fileTypeMask;\n  char **fileInfo;\n  FILE *outputFile;\n  long fileAttributes;\n  void *fileContent;\n  int fileDescriptor;\n  undefined filePermFlag;\n  char fileUserExec;\n  char fileGroupExec;\n  char fileOtherExec;\n  char fileUserWrite;\n  char fileGroupWrite;\n  char fileOtherWrite;\n  char fileUserRead;\n  char fileGroupRead;\n  char fileOtherRead;\n  undefined fileSpecialFlag;\n  uint filePermission;\n  uint fileUserID;\n  uint fileGroupID;\n  undefined8 fileSize;\n  \n  do {\n    errorFlag = print_error_and_exit_00107c10();\n    *(uint *)((long)fileInfo + 0x44) = *(uint *)((long)fileInfo + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(fileAttributes + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileInfo + 0x49) = errorFlag | 0x10;\n    }\n    archiveHead = bfd_set_archive_head();\n  } while (archiveHead == '\\0');\n  dup(fileDescriptor);\n  archiveHead = bfd_close();\n  if (archiveHead != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    copyResult = copy_and_replace_file_00105bc0();\n    if (copyResult == 0) {\n      free(fileContent);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  print_error_and_exit_00107c10();\n  timeErrorFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,timeErrorFormat);\n  fileTypeMask = filePermission & 0xf000;\n  if (fileTypeMask == 0x4000) {\n    filePermFlag = 100;\n  }\n  else if (fileTypeMask == 0xa000) {\n    filePermFlag = 0x6c;\n  }\n  else if (fileTypeMask == 0x6000) {\n    filePermFlag = 0x62;\n  }\n  else if (fileTypeMask == 0x2000) {\n    filePermFlag = 99;\n  }\n  else if (fileTypeMask == 0xc000) {\n    filePermFlag = 0x73;\n  }\n  else {\n    filePermFlag = 0x70;\n    if (fileTypeMask != 0x1000) {\n      filePermFlag = 0x2d;\n    }\n  }\n  fileUserExec = (-((filePermission & 0x100) == 0) & 0xbbU) + 0x72;\n  fileGroupExec = (-((filePermission & 0x80) == 0) & 0xb6U) + 0x77;\n  fileOtherExec = (-((filePermission & 0x40) == 0) & 0xb5U) + 0x78;\n  fileUserWrite = (-((filePermission & 0x20) == 0) & 0xbbU) + 0x72;\n  fileGroupWrite = (-((filePermission & 0x10) == 0) & 0xb6U) + 0x77;\n  fileOtherWrite = (-((filePermission & 8) == 0) & 0xb5U) + 0x78;\n  fileUserRead = (-((filePermission & 4) == 0) & 0xbbU) + 0x72;\n  fileGroupRead = (-((filePermission & 2) == 0) & 0xb6U) + 0x77;\n  fileOtherRead = (-((filePermission & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermission & 0x800) != 0) {\n    if (fileOtherExec == 'x') {\n      fileOtherExec = 's';\n    }\n    else {\n      fileOtherExec = 'S';\n    }\n  }\n  if ((filePermission & 0x400) != 0) {\n    if (fileOtherWrite == 'x') {\n      fileOtherWrite = 's';\n    }\n    else {\n      fileOtherWrite = 'S';\n    }\n  }\n  if ((filePermission & 0x200) != 0) {\n    if (fileOtherRead == 'x') {\n      fileOtherRead = 't';\n    }\n    else {\n      fileOtherRead = 'T';\n    }\n  }\n  fileSpecialFlag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileUserID,\n          (ulong)fileGroupID,fileSize,&stack0x00000020,(ulong)filePermission)\n  ;\n  fputs(*fileInfo,outputFile);\n  if ((char)fileAttributes != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "free",
                "dup",
                "FUN_00107c10",
                "xexit",
                "FUN_00105bc0",
                "bfd_close",
                "bfd_set_archive_head",
                "FUN_00102d2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_information_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "filename",
                "param_2": "filesize",
                "uVar1": "undefinedVar1",
                "bVar2": "byteVar2",
                "iVar3": "intVar3",
                "sVar4": "sizeVar4",
                "piVar5": "intPointerVar5",
                "pcVar6": "charPointerVar6",
                "pcVar7": "charPointerVar7",
                "ppcVar8": "charPointerPointerVar8",
                "uVar9": "undefinedVar9",
                "lVar10": "longVar10",
                "__s": "stringVar1",
                "__s_00": "stringVar2",
                "lVar11": "longVar11",
                "uVar12": "undefinedVar12",
                "uVar13": "ulongVar13",
                "unaff_RBX": "pointerVarRBX",
                "ppcVar14": "pointerPointerVar14",
                "unaff_RBP": "pointerPointerVarRBP",
                "unaff_R12": "pointerPointerVarR12",
                "unaff_R13D": "uintVarR13D",
                "ppcVar15": "pointerPointerVar15",
                "unaff_R14": "longVarR14",
                "bVar16": "boolVar16",
                "bVar17": "byteVar17",
                "param_7": "pointerVar7",
                "param_9": "paramVar9",
                "in_stack_00000078": "longVarStack78",
                "in_stack_00000108": "longVarStack108"
            },
            "code": "\n\n\nundefined8 processFiles_001028ed(undefined8 filename,long filesize)\n\n{\n  undefined undefinedVar1;\n  byte byteVar2;\n  int intVar3;\n  size_t sizeVar4;\n  int *intPointerVar5;\n  char *charPointerVar6;\n  char *charPointerVar7;\n  char **charPointerPointerVar8;\n  undefined8 undefinedVar9;\n  long longVar10;\n  char *stringVar1;\n  char *stringVar2;\n  long longVar11;\n  undefined8 undefinedVar12;\n  ulong ulongVar13;\n  char *pointerVarRBX;\n  char **pointerPointerVar14;\n  char **pointerPointerVarRBP;\n  char **pointerPointerVarR12;\n  uint uintVarR13D;\n  char **pointerPointerVar15;\n  long longVarR14;\n  bool boolVar16;\n  byte byteVar17;\n  char **pointerVar7;\n  undefined8 paramVar9;\n  long longVarStack78;\n  long longVarStack108;\n  \n  byteVar17 = 0;\ncode_r0x001028ed:\n  print_error_and_exit_00107c10(pointerVarRBX,filesize);\nLAB_001028f5:\n  undefinedVar12 = DAT_0010d638;\n  if (uintVarR13D != 3) {\n    while( true ) {\n      if ((undefined8 *)*pointerPointerVarR12 == (undefined8 *)0x0) goto LAB_0010571f;\n      intVar3 = filename_cmp(*(undefined8 *)*pointerPointerVarR12,undefinedVar12);\n      if (intVar3 == 0) break;\n      pointerPointerVarR12 = (char **)(*pointerPointerVarR12 + 0xf0);\n    }\n    if (uintVarR13D != 2) goto LAB_0010571f;\n    pointerPointerVarR12 = (char **)(*pointerPointerVarR12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  longVar10 = *(long *)(longVarR14 + 0xf0);\n  if (*(long *)(longVarR14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    longVar11 = longVar10;\n    longVar10 = *(long *)(longVar11 + 0xf0);\n  } while (longVar10 != 0);\n  pointerPointerVarR12 = (char **)(longVar11 + 0xf0);\n  pointerVarRBX = *pointerPointerVarRBP;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefinedVar1 = DAT_0010d5f8;\n  uintVarR13D = (uint)(DAT_0010d60c != 0);\n  filesize = bfd_openr(pointerVarRBX,DAT_0010d5f0);\n  if (filesize != 0) {\n    pointerPointerVarRBP = pointerPointerVarRBP + 1;\n    byteVar2 = process_archived_files_00105af0(pointerPointerVarR12,filesize,uintVarR13D,undefinedVar1);\n    paramVar9._6_1_ = paramVar9._6_1_ | byteVar2;\n    charPointerVar6 = *pointerPointerVarRBP;\n    do {\n      if (charPointerVar6 == (char *)0x0) {\n        if (paramVar9._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefinedVar12 = print_archive_info_001058b0();\n        return undefinedVar12;\n      }\n      pointerPointerVar14 = *(char ***)(longVarR14 + 0xf0);\n      pointerPointerVarR12 = pointerVar7;\n      if (paramVar9._7_1_ == '\\0') {\n        pointerPointerVar15 = pointerVar7;\n        if (pointerPointerVar14 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              stringVar1 = (char *)lbasename(*pointerPointerVar14);\n              charPointerVar7 = stringVar1;\n              if (DAT_0010d5fa != '\\0') {\n                sizeVar4 = strlen(stringVar1);\n                ulongVar13 = (ulong)*(byte *)(*(long *)(longVarR14 + 8) + 0x1e);\n                if (ulongVar13 < sizeVar4) {\n                  charPointerVar7 = (char *)xmalloc(ulongVar13 + 1);\n                  longVar10 = *(long *)(longVarR14 + 8);\n                  charPointerVar6 = charPointerVar7;\n                  for (ulongVar13 = (ulong)*(byte *)(longVar10 + 0x1e); ulongVar13 != 0; ulongVar13 = ulongVar13 - 1) {\n                    *charPointerVar6 = *stringVar1;\n                    stringVar1 = stringVar1 + (ulong)byteVar17 * -2 + 1;\n                    charPointerVar6 = charPointerVar6 + (ulong)byteVar17 * -2 + 1;\n                  }\n                  charPointerVar7[*(byte *)(longVar10 + 0x1e)] = '\\0';\n                }\n                charPointerVar6 = *pointerPointerVarRBP;\n                stringVar1 = charPointerVar7;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              charPointerVar6 = *pointerPointerVarRBP;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              stringVar2 = (char *)lbasename(charPointerVar6);\n              if (DAT_0010d5fa != '\\0') {\n                sizeVar4 = strlen(stringVar2);\n                ulongVar13 = (ulong)*(byte *)(*(long *)(longVarR14 + 8) + 0x1e);\n                charPointerVar6 = stringVar2;\n                stringVar1 = charPointerVar7;\n                if (ulongVar13 < sizeVar4) {\n                  charPointerVar6 = (char *)xmalloc(ulongVar13 + 1);\n                  longVar10 = *(long *)(longVarR14 + 8);\n                  charPointerVar7 = charPointerVar6;\n                  for (ulongVar13 = (ulong)*(byte *)(longVar10 + 0x1e); ulongVar13 != 0; ulongVar13 = ulongVar13 - 1) {\n                    *charPointerVar7 = *stringVar2;\n                    stringVar2 = stringVar2 + (ulong)byteVar17 * -2 + 1;\n                    charPointerVar7 = charPointerVar7 + (ulong)byteVar17 * -2 + 1;\n                  }\n                  charPointerVar6[*(byte *)(longVar10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              intVar3 = filename_cmp(stringVar2,charPointerVar7);\n            }\n            else {\n              charPointerVar6 = *pointerPointerVarRBP;\n              stringVar1 = *pointerPointerVar14;\nLAB_00102980:\n              intVar3 = filename_cmp(charPointerVar6,stringVar1);\n            }\n            if ((intVar3 == 0) && (pointerPointerVar14[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                intVar3 = stat(*pointerPointerVarRBP,(stat *)&stack0x000000b0);\n                if (intVar3 != 0) {\n                  intPointerVar5 = __errno_location();\n                  if (*intPointerVar5 != 2) {\n                    print_error_and_exit_00107c10(*pointerPointerVarRBP);\nLAB_00102b7e:\n                    charPointerVar6 = *pointerPointerVar14;\n                    undefinedVar12 = dcgettext(0,\"internal stat error on %s\",5);\n                    print_error_and_exit_00107690(undefinedVar12,charPointerVar6);\n                    free(pointerPointerVarRBP);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                charPointerPointerVar8 = (char **)pointerPointerVar14[0x1d];\n                if ((char **)pointerPointerVar14[0x1d] == (char **)0x0) {\n                  charPointerPointerVar8 = pointerPointerVar14;\n                }\n                intVar3 = (**(code **)(charPointerPointerVar8[1] + 0x1e8))(pointerPointerVar14,&stack0x00000020);\n                if (intVar3 != 0) goto LAB_00102b7e;\n                if (longVarStack108 <= longVarStack78) goto LAB_0010577e;\n              }\n              undefinedVar12 = find_matching_pointer_00105870(pointerVar7,2,*pointerPointerVar14);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                charPointerVar6 = *pointerPointerVarRBP;\n                boolVar16 = DAT_0010d60c != 0;\n                longVar10 = bfd_openr(charPointerVar6,DAT_0010d5f0);\n                if (longVar10 == 0) {\n                  print_error_and_exit_00107c10(charPointerVar6,0);\n                  goto LAB_00102b3e;\n                }\n                byteVar2 = update_param_values_00103172(undefinedVar12,longVar10,boolVar16);\n              }\n              else {\n                undefinedVar9 = extracted_data_00105830(*pointerPointerVarRBP);\n                intVar3 = filename_cmp(undefinedVar9,\"__.LIBDEP\");\n                if (intVar3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byteVar2 = update_param_values_00103172(undefinedVar12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byteVar2 != 0) {\n                *pointerPointerVar15 = *(char **)(*pointerPointerVar15 + 0xf0);\n                paramVar9._6_1_ = byteVar2;\n              }\n              goto LAB_0010577e;\n            }\n            pointerPointerVar15 = pointerPointerVar14 + 0x1e;\n            pointerPointerVar14 = (char **)pointerPointerVar14[0x1e];\n          } while (pointerPointerVar14 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uintVarR13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uintVarR13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        longVar10 = *(long *)(longVarR14 + 0xf0);\n        if (*(long *)(longVarR14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      pointerVarRBX = *pointerPointerVarRBP;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefinedVar12 = extracted_data_00105830(pointerVarRBX);\n      intVar3 = filename_cmp(undefinedVar12,\"__.LIBDEP\");\n      if (intVar3 != 0) goto code_r0x0010574f;\n      byteVar2 = process_and_archive_files_00105ae0(pointerPointerVarR12,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      paramVar9._6_1_ = byteVar2 | paramVar9._6_1_;\nLAB_0010577e:\n      pointerPointerVarRBP = pointerPointerVarRBP + 1;\n      charPointerVar6 = *pointerPointerVarRBP;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  pointerVarRBX = *pointerPointerVarRBP;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "FUN_00105ae0",
                "FUN_00105870",
                "FUN_00107c10",
                "FUN_00105830",
                "bfd_openr",
                "dcgettext",
                "FUN_00105af0",
                "FUN_00107690",
                "FUN_00102943",
                "FUN_001058b0",
                "stat",
                "strlen",
                "FUN_00103172",
                "filename_cmp",
                "lbasename",
                "xmalloc",
                "__errno_location",
                "FUN_001028ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102bf5",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_and_exit_001033b0",
                "param_1": "message",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printAndExit_001033b0(undefined8 message)\n\n{\n  fprintf(errorStream,\"%s\\n\",message);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_00103df9",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00103e95",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_error_001025a0",
                "piVar1": "error_location",
                "uVar2": "error_message",
                "dcgettext": "get_error_text",
                "print_error_message_00107920": "print_error_message"
            },
            "code": "\nundefined8 handle_error_001025a0(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  \n  error_location = __errno_location();\n  if (*error_location == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_message);\n  }\n  else {\n    strerror(*error_location);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "initialize_application_0010284b"
            },
            "code": "\nundefined8 initializeApplication_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "initialize_application_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_modify_archive_00102c25",
                "param_7": "permissions",
                "param_11": "newPermissions",
                "param_12": "archiveSize",
                "iVar1": "comparisonResult",
                "iVar2": "error",
                "piVar3": "errnoLocation",
                "pcVar4": "errorMessage",
                "uVar5": "gettextResult",
                "pplVar6": "archivePointer",
                "__ptr": "buffer",
                "__n": "readBytes",
                "lVar7": "loopCounter",
                "unaff_RBX": "inputArguments",
                "plVar8": "outputPointer",
                "puVar9": "zeroesArray",
                "uVar10": "bytesCounter",
                "sVar11": "remainingBytes"
            },
            "code": "\n\n\nlong * extractAndModifyArchive_00102c25(void)\n\n{\n  int comparisonResult;\n  int error;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 gettextResult;\n  long **archivePointer;\n  void *buffer;\n  size_t readBytes;\n  long loopCounter;\n  long **inputArguments;\n  long *outputPointer;\n  undefined4 *zeroesArray;\n  ulong bytesCounter;\n  size_t remainingBytes;\n  undefined4 *permissions;\n  __mode_t newPermissions;\n  ulong archiveSize;\n  \n  zeroesArray = permissions;\n  for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *zeroesArray = 0;\n    zeroesArray = zeroesArray + 1;\n  }\n  archivePointer = (long **)inputArguments[0x1d];\n  if ((long **)inputArguments[0x1d] == (long **)0x0) {\n    archivePointer = inputArguments;\n  }\n  error = (*(code *)archivePointer[1][0x3d])();\n  if (error != 0) {\n    outputPointer = *inputArguments;\n    gettextResult = dcgettext(0,\"internal stat error on %s\",5);\n    error = print_error_and_exit_00107690(gettextResult,outputPointer);\n    gettextResult = DAT_0010d638;\n    if (error == 3) {\n      for (; *outputPointer != 0; outputPointer = (long *)(*outputPointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*outputPointer != (undefined8 *)0x0; outputPointer = (long *)(*outputPointer + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*outputPointer,gettextResult);\n        if (comparisonResult == 0) {\n          if (error != 2) {\n            return outputPointer;\n          }\n          return (long *)(*outputPointer + 0xf0);\n        }\n      }\n    }\n    return outputPointer;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*inputArguments);\n  }\n  else {\n    bytesCounter = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      remainingBytes = archiveSize - bytesCounter;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      readBytes = bfd_bread(buffer,remainingBytes);\n      if (remainingBytes != readBytes) {\nLAB_00102c78:\n        inputArguments = (long **)*inputArguments[0x1d];\n        gettextResult = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_and_exit_00107690(gettextResult,inputArguments);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*inputArguments);\n      }\n      remainingBytes = fwrite(buffer,1,readBytes,DAT_0010d5d8);\n      if (remainingBytes != readBytes) {\n        errnoLocation = __errno_location();\n        errorMessage = strerror(*errnoLocation);\n        print_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,errorMessage);\n        goto LAB_00102c78;\n      }\n      bytesCounter = bytesCounter + readBytes;\n    } while (bytesCounter < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorMessage = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,newPermissions);\n  if (_DAT_0010d600 != 0) {\n    set_file_modification_time_00107c80(errorMessage,permissions);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_bread",
                "FUN_00107690",
                "fclose",
                "strerror",
                "fwrite",
                "FUN_00107c80",
                "free",
                "xmalloc",
                "bfd_seek",
                "__errno_location",
                "FUN_00105a20",
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_and_modify_archive_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_string_with_limit_00102bb0",
                "in_RAX": "sourceString",
                "sVar2": "sourceLength",
                "puVar3": "resultString",
                "uVar4": "limit",
                "unaff_RBX": "sourcePointer",
                "unaff_RBP": "framePointer",
                "puVar5": "resultPointer",
                "bVar6": "flag",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyStringWithLimit_00102bb0(void)\n\n{\n  long lVar1;\n  char *sourceString;\n  size_t sourceLength;\n  undefined *resultString;\n  ulong limit;\n  undefined *sourcePointer;\n  long framePointer;\n  undefined *resultPointer;\n  byte flag;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  flag = 0;\n  sourceLength = strlen(sourceString);\n  limit = (ulong)*(byte *)(*(long *)(framePointer + 8) + 0x1e);\n  resultString = sourcePointer;\n  if (limit < sourceLength) {\n    resultString = (undefined *)xmalloc(limit + 1);\n    lVar1 = *(long *)(framePointer + 8);\n    resultPointer = resultString;\n    for (limit = (ulong)*(byte *)(lVar1 + 0x1e); limit != 0; limit = limit - 1) {\n      *resultPointer = *sourcePointer;\n      sourcePointer = sourcePointer + (ulong)flag * -2 + 1;\n      resultPointer = resultPointer + (ulong)flag * -2 + 1;\n    }\n    resultString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = resultString;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "copy_string_with_limit_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_assign_00102f08",
                "unaff_RBX": "buffer_pointer",
                "unaff_R12": "data_pointer"
            },
            "code": "\nundefined8 print_and_assign_00102f08(void)\n\n{\n  undefined8 *buffer_pointer;\n  undefined8 *data_pointer;\n  \n  printf(\"a - %s\\n\",*buffer_pointer);\n  buffer_pointer[0x1e] = *data_pointer;\n  *data_pointer = buffer_pointer;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_assign_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "input_data",
                "param_2": "file_paths",
                "param_3": "archive_mode",
                "ppcVar1": "current_file",
                "uVar2": "undefined",
                "bVar3": "byte_status",
                "iVar4": "index",
                "sVar5": "size",
                "piVar6": "error_indicator",
                "pcVar7": "current_path",
                "pcVar8": "basename_a",
                "uVar9": "extracted_data",
                "pcVar10": "current_file",
                "__s": "basename_b",
                "lVar11": "current_path_pointer",
                "lVar12": "list_pointer",
                "uVar13": "return_value",
                "uVar14": "file_size",
                "ppcVar15": "file_list",
                "ppcVar16": "current_file_pointer",
                "uVar17": "mode",
                "ppcVar18": "previous_file_pointer",
                "bVar19": "flag",
                "bVar20": "byte_data",
                "local_15a": "flag_status",
                "auStack_158": "temp_stack",
                "lStack_100": "time_threshold",
                "sStack_c8": "file_status"
            },
            "code": "\n\n\nundefined8 process_files_00105570(long input_data,char **file_paths,char archive_mode)\n\n{\n  char **current_file;\n  undefined undefined;\n  byte byte_status;\n  int index;\n  size_t size;\n  int *error_indicator;\n  char *current_path;\n  char *basename_a;\n  undefined8 extracted_data;\n  char *current_file;\n  char *basename_b;\n  long current_path_pointer;\n  long list_pointer;\n  undefined8 return_value;\n  ulong file_size;\n  char **file_list;\n  char **current_file_pointer;\n  uint mode;\n  char **previous_file_pointer;\n  bool flag;\n  byte byte_data;\n  byte flag_status;\n  undefined temp_stack [88];\n  long time_threshold;\n  stat file_status;\n  \n  byte_data = 0;\n  current_file = (char **)(input_data + 0xf0);\n  flag_status = 0;\n  if (file_paths == (char **)0x0) {\n    return_value = initialize_data_00102943();\n    return return_value;\n  }\n  do {\n    current_file = *file_paths;\njoined_r0x001055aa:\n    if (current_file == (char *)0x0) {\n      if (flag_status != 0) {\n        return_value = print_archive_info_001058b0(input_data);\n        return return_value;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    file_list = *(char ***)(input_data + 0xf0);\n    current_file_pointer = current_file;\n    if (archive_mode != '\\0') {\nLAB_0010564c:\n      mode = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      list_pointer = *(long *)(input_data + 0xf0);\n      if (*(long *)(input_data + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        current_path_pointer = list_pointer;\n        list_pointer = *(long *)(current_path_pointer + 0xf0);\n      } while (list_pointer != 0);\n      current_file_pointer = (char **)(current_path_pointer + 0xf0);\n      current_file = *file_paths;\n      do {\n        if (DAT_0010d620 != 0) {\n          return_value = extracted_data_00105830(current_file,input_data);\n          index = filename_cmp(return_value,\"__.LIBDEP\");\n          if (index == 0) {\n            byte_status = process_and_archive_files_00105ae0(current_file_pointer,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            flag_status = byte_status | flag_status;\n            goto LAB_0010577e;\n          }\n          current_file = *file_paths;\n        }\n        undefined = DAT_0010d5f8;\n        flag = DAT_0010d60c != 0;\n        list_pointer = bfd_openr(current_file,DAT_0010d5f0);\n        if (list_pointer != 0) {\n          file_paths = file_paths + 1;\n          byte_status = process_archived_files_00105af0(current_file_pointer,list_pointer,(uint)flag,undefined);\n          flag_status = flag_status | byte_status;\n          current_file = *file_paths;\n          goto joined_r0x001055aa;\n        }\n        print_error_and_exit_00107c10(current_file,0);\n        mode = (uint)flag;\nLAB_001028f5:\n        return_value = DAT_0010d638;\n        if (mode == 3) {\n          list_pointer = *(long *)(input_data + 0xf0);\n          if (*(long *)(input_data + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*current_file_pointer != (undefined8 *)0x0;\n              current_file_pointer = (char **)(*current_file_pointer + 0xf0)) {\n            index = filename_cmp(*(undefined8 *)*current_file_pointer,return_value);\n            if (index == 0) {\n              if (mode == 2) {\n                current_file_pointer = (char **)(*current_file_pointer + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        current_file = *file_paths;\n      } while( true );\n    }\n    previous_file_pointer = current_file;\n    if (file_list == (char **)0x0) {\n      mode = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      current_file = (char *)lbasename(*file_list);\n      basename_a = current_file;\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(current_file);\n        file_size = (ulong)*(byte *)(*(long *)(input_data + 8) + 0x1e);\n        if (file_size < size) {\n          basename_a = (char *)xmalloc(file_size + 1);\n          list_pointer = *(long *)(input_data + 8);\n          current_path = basename_a;\n          for (file_size = (ulong)*(byte *)(list_pointer + 0x1e); file_size != 0; file_size = file_size - 1) {\n            *current_path = *current_file;\n            current_file = current_file + (ulong)byte_data * -2 + 1;\n            current_path = current_path + (ulong)byte_data * -2 + 1;\n          }\n          basename_a[*(byte *)(list_pointer + 0x1e)] = '\\0';\n        }\n        current_path = *file_paths;\n        current_file = basename_a;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      current_path = *file_paths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basename_b = (char *)lbasename(current_path);\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(basename_b);\n        file_size = (ulong)*(byte *)(*(long *)(input_data + 8) + 0x1e);\n        current_path = basename_b;\n        current_file = basename_a;\n        if (file_size < size) {\n          current_path = (char *)xmalloc(file_size + 1);\n          list_pointer = *(long *)(input_data + 8);\n          basename_a = current_path;\n          for (file_size = (ulong)*(byte *)(list_pointer + 0x1e); file_size != 0; file_size = file_size - 1) {\n            *basename_a = *basename_b;\n            basename_b = basename_b + (ulong)byte_data * -2 + 1;\n            basename_a = basename_a + (ulong)byte_data * -2 + 1;\n          }\n          current_path[*(byte *)(list_pointer + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      index = filename_cmp(basename_b,basename_a);\n      if (index == 0) goto LAB_00102993;\nLAB_00105639:\n      previous_file_pointer = file_list + 0x1e;\n      file_list = (char **)file_list[0x1e];\n      if (file_list == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    current_path = *file_paths;\n    current_file = *file_list;\nLAB_00102980:\n    index = filename_cmp(current_path,current_file);\n    if (index != 0) goto LAB_00105639;\nLAB_00102993:\n    if (file_list[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      index = stat(*file_paths,&file_status);\n      if (index != 0) {\n        error_indicator = __errno_location();\n        if (*error_indicator != 2) {\n          print_error_and_exit_00107c10(*file_paths);\nLAB_00102b7e:\n          current_file = *file_list;\n          return_value = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_and_exit_00107690(return_value,current_file);\n          free(file_paths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      current_file_pointer = (char **)file_list[0x1d];\n      if ((char **)file_list[0x1d] == (char **)0x0) {\n        current_file_pointer = file_list;\n      }\n      index = (**(code **)(current_file_pointer[1] + 0x1e8))(file_list,temp_stack);\n      if (index != 0) goto LAB_00102b7e;\n      if (file_status.st_mtim.tv_sec <= time_threshold) goto LAB_0010577e;\n    }\n    return_value = find_matching_pointer_00105870(current_file,2,*file_list);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      current_file = *file_paths;\n      flag = DAT_0010d60c != 0;\n      list_pointer = bfd_openr(current_file,DAT_0010d5f0);\n      if (list_pointer == 0) {\n        print_error_and_exit_00107c10(current_file,0);\n        goto LAB_00102b3e;\n      }\n      byte_status = update_param_values_00103172(return_value,list_pointer,flag);\n    }\n    else {\n      extracted_data = extracted_data_00105830(*file_paths,input_data);\n      index = filename_cmp(extracted_data,\"__.LIBDEP\");\n      if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byte_status = update_param_values_00103172(return_value,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byte_status != 0) {\n      *previous_file_pointer = *(char **)(*previous_file_pointer + 0xf0);\n      flag_status = byte_status;\n    }\nLAB_0010577e:\n    file_paths = file_paths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 79164,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00103ba8",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_001031a5",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00103bd1",
            "FUN_00107cc0",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_0010312d",
            "FUN_0010336b",
            "FUN_00102e57",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_001033b0",
            "FUN_0010284b",
            "FUN_00102bb0",
            "FUN_00102f08"
        ],
        [
            "FUN_0010285f",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00107890",
            "FUN_00103ddc",
            "FUN_00105480",
            "FUN_00103df9",
            "FUN_00107c10",
            "FUN_00107690",
            "FUN_001031cf",
            "FUN_00105c00",
            "FUN_00103c60"
        ],
        [
            "FUN_00102e6f",
            "FUN_001033d6",
            "FUN_00105bc0",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103a78",
            "FUN_00107c80",
            "FUN_00102710",
            "FUN_001052a0",
            "FUN_001025a0"
        ],
        [
            "FUN_001058b0",
            "FUN_00105300",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_00102c25"
        ],
        [
            "FUN_00107650",
            "FUN_00103e95"
        ],
        [
            "FUN_00105af0"
        ],
        [
            "FUN_00105ae0"
        ],
        [
            "FUN_001028ed",
            "FUN_00105570"
        ],
        [
            "FUN_00105db0"
        ]
    ],
    "locked_functions": []
}